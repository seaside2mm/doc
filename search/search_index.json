{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5199\u4f5c \u5199\u4f5c\u7684\u4e00\u4e9b\u8bf4\u660e https://squidfunk.github.io/mkdocs-material/extensions/admonition/ \u5173\u4e8e\u4f5c\u8005 Seaside, \u52aa\u529b\u6210\u4e3a\u4e00\u4e2a\u4e0d\u900f\u660e\u7684\u4eba. \u8054\u7cfb\u65b9\u5f0f mail: seasidezhang@gmail.com \u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898, \u8bf7\u8054\u7cfb\u6211, \u6211\u4f1a\u5c3d\u53ef\u80fd\u56de\u590d. \u5c0f\u989d\u8d5e\u52a9 \u8bb8\u53ef\u534f\u8bae CC BY-NC-SA (\u7f72\u540d-\u76f8\u540c\u65b9\u5f0f\u5171\u4eab-\u975e\u5546\u4e1a\u6027\u4f7f\u7528).","title":"\u4e3b\u9875"},{"location":"#_1","text":"\u5199\u4f5c\u7684\u4e00\u4e9b\u8bf4\u660e https://squidfunk.github.io/mkdocs-material/extensions/admonition/","title":"\u5199\u4f5c"},{"location":"#_2","text":"Seaside, \u52aa\u529b\u6210\u4e3a\u4e00\u4e2a\u4e0d\u900f\u660e\u7684\u4eba.","title":"\u5173\u4e8e\u4f5c\u8005"},{"location":"#_3","text":"mail: seasidezhang@gmail.com \u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898, \u8bf7\u8054\u7cfb\u6211, \u6211\u4f1a\u5c3d\u53ef\u80fd\u56de\u590d.","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"#_4","text":"","title":"\u5c0f\u989d\u8d5e\u52a9"},{"location":"#_5","text":"CC BY-NC-SA (\u7f72\u540d-\u76f8\u540c\u65b9\u5f0f\u5171\u4eab-\u975e\u5546\u4e1a\u6027\u4f7f\u7528).","title":"\u8bb8\u53ef\u534f\u8bae"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/","text":"http://opencv.jp/cookbook/index.html \u5b98\u65b9\u6587\u6863 1. Mat\u6982\u8981 \u7531\u4e24\u4e2a\u6570\u636e\u90e8\u5206\u6784\u6210\uff0c\u77e9\u9635\u5934\uff08\u5305\u542b\u77e9\u9635\u5c3a\u5bf8\uff0c\u5b58\u50a8\u65b9\u6cd5\uff0c\u5b58\u50a8\u5730\u5740\u7b49\u7b49\uff09\u548c\u4e00\u4e2a\u6307\u5411\u5b58\u50a8\u6240\u6709\u50cf\u7d20\u503c\u7684\u77e9\u9635\u7684\u6307\u9488 \u6210\u5458\u53d8\u91cf int cv::Mat::cols; //\u8fd4\u56de\u77e9\u9635\u7684\u5217\u6570 int cv::Mat::rows // \u8fd4\u56de\u77e9\u9635\u884c\u6570 uchar* cv::Mat::data // \u6307\u5411\u77e9\u9635\u7684\u6570\u636e\u5355\u5143\u7684\u6307\u9488 int cv::Mat::dims // \u8fd4\u56de\u77e9\u9635\u7ef4\u5ea6\uff0c\u8be5\u7ef4\u5ea6\u22652 MatSize cv::Mat::size // \u8fd4\u56de\u77e9\u9635\u5927\u5c0f \u56fe\u50cf\u683c\u5f0f 1.\u6df1\u5ea6 depth() : \u56fe\u50cf\u4f4d\u6df1\u5ea6=\u6bd4\u7279\u6570+\u6570\u636e\u7c7b\u578b\uff1b \u4e0b\u8868\u662f\u8fd4\u56de\u503c\u4ee5\u53ca\u5bf9\u5e94\u542b\u4e49 \u56fe\u50cf\u6df1\u5ea6 \u679a\u4e3e\u6570\u503c \u7a7a\u95f4\u5927\u5c0f \u8303\u56f4 \u7b49\u540cC++\u53d8\u91cf CV_8U 0 8bits 0~255 unsigned char CV_8S 1 8bits -128~127 char CV_16U 2 16bits 0~65535 ushort,unsigned short int,unsigned short CV_16S 3 16bits -32768~32767 short,short int CV32S 4 32bits -2147483648~2147483647 int,long CV32F 5 32bits 1.18e-38~3.40e38 float CV_64F 6 64bits 2.23e-308~1.79e308 double CV_USRTYPE1 7 - 2.\u901a\u9053\u6570 int Mat:channels() 3.\u6570\u636e\u7c7b\u578b types() \u83b7\u53d6\u5b58\u50a8\u7684\u77e9\u9635\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff08\u5305\u62ec\u4f4d\u6df1\u5ea6\uff0c\u901a\u9053\u6570\uff0c\u6570\u636e\u7c7b\u578b\uff09 \u5b58\u50a8\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff1a CV_[\u4f4d\u6570][\u5e26\u7b26\u53f7\u4e0e\u5426][\u7c7b\u578b\u524d\u7f00]C[\u901a\u9053\u6570] \u5e26\u7b26\u53f7\u4e0e\u5426\uff1aS\u4e3a\u7b26\u53f7\u6574\u578b\uff0cU\u4e3a\u65e0\u7b26\u53f7\u6574\u578b\uff0cF\u4e3a\u6d6e\u70b9\u578b\uff1b\u4f8b\u5982CV_8UC3 \u56fe\u50cf\u7c7b\u578b=\u6bd4\u7279\u6570+\u6570\u636e\u7c7b\u578b+\u901a\u9053\u6570 int Mat:type() \u5177\u4f53\u6570\u636e\u7c7b\u578b\u4e0e\u8fd4\u56de\u503c\u5173\u7cfb\uff1a C1 C2 C3 C4 CV_8U 0 8 16 24 CV_8S 1 9 17 25 CV_16U 2 10 18 26 CV_16S 3 11 19 27 CV_32S 4 12 20 28 CV_32F 5 13 21 29 CV_64F 6 14 22 30 \u7528\u6237\u5b9a\u4e49 7 2. Mat\u57fa\u672c\u64cd\u4f5c \u521b\u5efaMat\u5bf9\u8c61 //\u4e00\uff0cMat\u6784\u9020\u5668 Mat M(2,2, CV_8UC3, Scalar(0,0,255)); cout << \"M = \" << endl << \" \" << M << endl << endl; //\u4e8c\uff0cC/C++\u6570\u7ec4\u521d\u59cb\u5316 int sz[3] = {2,2,2}; Mat L(3,sz, CV_8UC(1), Scalar::all(0)); //cout << \"L = \" << endl << \" \" << L << endl << endl; //\u4e09\uff0ccreate\u51fd\u6570 M.create(4,4, CV_8UC(2)); cout << \"M = \"<< endl << \" \" << M << endl << endl; //\u56db\uff0cMATLAB \u98ce\u683c Mat E = Mat::eye(4, 4, CV_64F); cout << \"E = \" << endl << \" \" << E << endl << endl; Mat O = Mat::ones(2, 2, CV_32F); cout << \"O = \" << endl << \" \" << O << endl << endl; Mat Z = Mat::zeros(3,3, CV_8UC1); cout << \"Z = \" << endl << \" \" << Z << endl << endl; //\u4e94\uff0c\u9017\u53f7\u5206\u5272\u6216\u8005\u6570\u7ec4\u521d\u59cb\u5316 Mat C = (Mat_<double>(3,3) << 0, -1, 0, -1, 5, -1, 0, -1, 0); cout << \"C = \" << endl << \" \" << C << endl << endl; C = (Mat_<double>({0, -1, 0, -1, 5, -1, 0, -1, 0})).reshape(3); //C++11 support cout << \"C = \" << endl << \" \" << C << endl << endl; //\u516d\uff0c\u5229\u7528\u5df2\u6709Mat\u521b\u5efaMat\u5934\uff0c\u7528cv::Mat::clone or cv::Mat::copyTo\u65b9\u6cd5 Mat RowClone = C.row(1).clone(); cout << \"RowClone = \" << endl << \" \" << RowClone << endl << endl; \u683c\u5f0f\u5316\u8f93\u51fa Mat r = Mat(10, 3, CV_8UC3); randu(r, Scalar::all(0), Scalar::all(255)); cout << \"r (OpenCV\u9ed8\u8ba4\u98ce\u683c) = \" << r << \";\" << endl << endl; cout << \"r (Python\u98ce\u683c) = \" << format(r, Formatter::FMT_PYTHON) << \";\" << endl << endl; cout << \"r (Numpy\u98ce\u683c) = \" << format(r, Formatter::FMT_NUMPY )<< \";\" << endl << endl; cout << \"r (\u9017\u53f7\u5206\u9694\u98ce\u683c) = \" << format(r, Formatter::FMT_CSV )<< \";\" << endl<< endl; cout << \"r (C\u8bed\u8a00\u98ce\u683c) = \" << format(r, Formatter::FMT_C ) << \";\" << endl << endl; \u5176\u4ed6\u6570\u636e\u7ed3\u6784 Point\u7c7b Point2f Point3f Scalar\u7c7b Scalar\u662f\u4e00\u4e2ashort\u578b\u7684\u5411\u91cf\uff0c\u80fd\u591f\u4f7f\u7528\u6307\u5b9a\u7684\u5b9a\u5236\u5316\u503c\u6765\u521d\u59cb\u5316\u77e9\u9635\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u8868\u793a\u989c\u8272 Size\u7c7b Rect\u7c7b Circle \u64cd\u4f5c\u4e0e\u904d\u5386\u56fe\u50cf\u50cf\u7d20 1.\u6307\u9488\u8bbf\u95ee int rowNumber = outputImage.rows; //\u884c\u6570 int colNumber = outputImage.cols*outputImage.channels(); //\u5217\u6570 x \u901a\u9053\u6570=\u6bcf\u4e00\u884c\u5143\u7d20\u7684\u4e2a\u6570 //\u53cc\u91cd\u5faa\u73af\uff0c\u904d\u5386\u6240\u6709\u7684\u50cf\u7d20\u503c for(int i = 0;i < rowNumber;i++) //\u884c\u5faa\u73af { uchar* data = image.ptr<uchar>(i); //\u83b7\u53d6\u7b2ci\u884c\u7684\u9996\u5730\u5740 for(int j = 0;j < colNumber;j++) //\u5217\u5faa\u73af { // ---------\u3010\u5f00\u59cb\u5904\u7406\u6bcf\u4e2a\u50cf\u7d20\u3011------------- // process each pixel, reduce color number; div=64 data[i] = data[i] / div * div + div / 2; // ----------\u3010\u5904\u7406\u7ed3\u675f\u3011--------------------- } //\u884c\u5904\u7406\u7ed3\u675f } 2. \u8fed\u4ee3\u5668\u8bbf\u95ee\u50cf\u7d20 \u53e6\u4e00\u79cd\u904d\u5386\u50cf\u7d20\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 STL \u98ce\u683c\u7684\u8fed\u4ee3\u5668\uff0c\u5982 cv::MatIterator_ \u548c cv::MatConstIterator_ \uff1a MatIterator_<cv::Vec3b> it \u4e5f\u53ef\u4ee5\u4f7f\u7528 iterator \u7c7b\u578b\uff0c\u5728 Mat_ \u6a21\u677f\u7c7b\u91cc\u5b9a\u4e49\uff1a Mat_<cv::Vec3b>::iterator it Mat \u7684\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a \u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 \uff0c\u56e0\u6b64\u652f\u6301\u5b8c\u6574\u7684\u8fed\u4ee3\u5668\u7b97\u672f\u8fd0\u7b97\uff0c\u5982 std::sort() \u7b49\u3002 //\u83b7\u53d6\u8fed\u4ee3\u5668 Mat_<Vec3b>::iterator it = outputImage.begin<Vec3b>(); //\u521d\u59cb\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668 Mat_<Vec3b>::iterator itend = outputImage.end<Vec3b>(); //\u7ec8\u6b62\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668 //\u5b58\u53d6\u5f69\u8272\u56fe\u50cf\u50cf\u7d20 for(;it != itend;++it){ // ------------------------\u3010\u5f00\u59cb\u5904\u7406\u6bcf\u4e2a\u50cf\u7d20\u3011-------------------- (*it)[0] = ... (*it)[1] = ... (*it)[2] = ... // ------------------------\u3010\u5904\u7406\u7ed3\u675f\u3011---------------------------- } 3. \u52a8\u6001\u5730\u5740\u8ba1\u7b97\u914d\u5408at\u8bbf\u95ee\u50cf\u7d20 \u4f7f\u7528 at \u65b9\u5f0f\u8fdb\u884c\u8bbf\u95ee\uff0c\u5728 at \u7684\u65f6\u5019\u9700\u8981\u6307\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u5bf9\u7167\u8868\u5982\u4e0b\uff1a \u79cd\u7c7b C1 C2 C3 C4 C6 uchar 8U uchar cv::Vec2b cv::Vec3b cv::Vec4b char 8S ushort 16U short 16S short cv::Vec2s cv::Vec3s cv::Vec4s int 32S int cv::Vec2i cv::Vec3i cv::Vec4i float 32F float cv::Vec2f cv::Vec3f cv::Vec4f cv::Vec6f double 64F double cv::Vec2d cv::Vec3d cv::Vec4d cv::Vec6d //\u83b7\u53d6\u5355\u901a\u9053\u7070\u5ea6\u56fe\uff08\u7c7b\u578b\u4e3a8UC1\uff09\u91cc\u50cf\u7d20\u70b9 (x,y) \u7684\u4eae\u5ea6\u503c\uff1a Scalar intensity = img.at<uchar>(x\uff0cy); //\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a\u5f97\u5230\u7684 intensity.val[0] \u5c06\u5305\u542b\u4e00\u4e2a\u4ece 0~255 \u4e4b\u95f4\u7684\u6570\u503c\u3002 Scalar intensity = img.at<uchar>(Point(x, y)); //\u5b58\u53d6\u5f69\u8272\u56fe\u50cf\u50cf\u7d20 for(int i = 0;i < rowNumber;i++){ for(int j = 0;j < colNumber;j++){ // ------------------------\u3010\u5f00\u59cb\u5904\u7406\u6bcf\u4e2a\u50cf\u7d20\u3011-------------------- image.at<Vec3b>(i,j)[0] = ...//\u84dd\u8272\u901a\u9053 image.at<Vec3b>(i,j)[1] = ...//\u7eff\u8272\u901a\u9053 image.at<Vec3b>(ij)[2] = ... //\u7ea2\u662f\u901a\u9053 // -------------------------\u3010\u5904\u7406\u7ed3\u675f\u3011---------------------------- } // \u884c\u5904\u7406\u7ed3\u675f } \u66f4\u591a\u50cf\u7d20\u64cd\u4f5c: 14\u79cd\u65b9\u6cd5 4. \u904d\u5386\u5e76\u8bbf\u95ee\u76f8\u90bb\u50cf\u7d20 \u6709\u65f6\u5019\u9700\u8981\u5728\u904d\u5386\u56fe\u50cf\u7684\u540c\u65f6\u8bbf\u95ee\u76f8\u90bb\u7684\u50cf\u7d20\u3002\u5982\u679c\u4ece\u56fe\u50cf\u4e2d\u51cf\u53bb\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u90e8\u5206\uff0c\u56fe\u50cf\u7684\u8fb9\u7f18\u5c31\u4f1a\u653e\u5927\uff0c\u56e0\u800c \u56fe\u50cf\u4f1a\u53d8\u5f97\u66f4\u52a0\u5c16\u9510\u3002 \u589e\u5f3a\u540e\u7684\u50cf\u7d20\u503c = 5*\u5f53\u524d - \u5de6 - \u53f3 - \u4e0a - \u4e0b \u53ef\u4f7f\u7528\u4e09\u4e2a\u6307\u9488\u6765\u8fdb\u884c\u56fe\u50cf\u904d\u5386\uff0c\u4e00\u4e2a\u7528\u4e8e\u5f53\u524d\u884c\uff0c\u4e00\u4e2a\u7528\u4e8e\u4e0a\u9762\u4e00\u884c\uff0c\u4e00\u4e2a\u7528\u4e8e\u4e0b\u9762\u4e00\u884c\uff1a /** * sharpen - lapracian sharpen function * * @param image - the source grey scale image * @param result - the output grey scale image */ void sharpen(const cv::Mat &image, cv::Mat &result) { // allocate if neccessary result.create(image.size(), image.type()); for (int j=1; j<image.rows-1; ++j) { // for all rows // (except first and last) const uchar *previous = image.ptr<const uchar>(j-1); // previous row const uchar *current = image.ptr<const uchar>(j); // current row const uchar *next = image.ptr<const uchar>(j+1); // next row uchar *output = result.ptr<uchar>(j); // output row for (int i=1; i<image.cols-1; ++i) { *output++ = cv::saturate_cast<uchar>(5*current[i]-current[i-1] -current[i+1]-previous[i]-next[i]); } } // Set the unprocess pixelss to 0 result.row(0).setTo(cv::Scalar(0)); result.row(result.rows-1).setTo(cv::Scalar(0)); result.col(0).setTo(cv::Scalar(0)); result.col(result.cols-1).setTo(cv::Scalar(0)); } filter2D\u5b9e\u73b0\u539f\u7406 \u5b9a\u4e49\u4e00\u4e2a\u6838\uff08\u4ee5\u77e9\u9635\u7684\u5f62\u5f0f\uff09\uff0c\u8c03\u7528\u51fd\u6570\u5e76\u4f20\u5165\u56fe\u50cf\u548c\u5185\u6838\uff0c\u5373\u53ef\u8fd4\u56de\u5377\u79ef\u6ee4\u6ce2\u540e\u7684\u56fe\u50cf\u3002 \u66f4\u591a\u64cd\u4f5c \u90e8\u5206\u77e9\u9635 & \u7279\u5b9a\u884c/\u5217 & \u8bbe\u7f6eROI \u4f7f\u7528Rect \u6307\u5b9a\u884c\u5217\u8303\u56f4Range // \u884c[0,2) \u5217[0,2) \u306e\u7bc4\u56f2\u306e\u90e8\u5206\u884c\u5217\uff08Range\uff09 M(cv::Range(0,2), cv::Range(0,2)); // \u884c[0,2) \u5217[0,2) \u306e\u7bc4\u56f2\u306e\u90e8\u5206\u884c\u5217\uff08Rect\uff09 M(cv::Rect(0,0,2,2)); // \u3059\u3079\u3066\u306e\u884c m1.rowRange(cv::Range::all()); //colRange // [0,2) \u884c\u306e\u7bc4\u56f2 m1.rowRange(cv::Range(0,2)); //colRange // 0\u884c\u76ee,0\u5217\u76ee m1.row(0) //.col(0); Mat_<_Tp>, Matx, Vec \u901a\u9053\u7684\u5408\u6210\u4e0e\u5206\u79bb \u5408\u6210 \u4f7f\u7528 cv::merge \u64cd\u4f5c\u53ef\u4ee5\u91cd\u65b0\u5c06\u51e0\u4e2a\u5355\u901a\u9053\u56fe\u50cf\u5408\u5e76\u6210\u4e00\u4e2a\u591a\u901a\u9053\u56fe\u50cf\u3002\u4e0b\u9762\u7684\u7a0b\u5e8f\u6f14\u793a\u4e86\u5c06\u4e00\u5e45\u56fe\u50cf image2 \u4e0e\u53e6\u4e00\u5e45\u56fe\u50cf image1 \u7684\u84dd\u8272\u901a\u9053\u6df7\u5408\uff1a merge, mixChannels \u5206\u79bb \u53ef\u4ee5\u4f7f\u7528 cv::split \u64cd\u4f5c\u6765\u5c06\u5f69\u8272\u56fe\u50cf\u5206\u79bb\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u901a\u9053\u56fe\u50cf\u3002 $mv c =src(I)$ // create vector of 3 images std::vector<cv::Mat> planes; // split 1 3-channel image into 3 1-channel images cv::split(image1, planes); // add to blue channel planes[0] += image2; // merge the 3 1-channel images into 1 3-channel image cv::merge(planes, result); \u76f8\u5173\u51fd\u6570 convertTo //\u5c55\u793a\u4e00\u5e45 32F \u7684\u56fe\u50cf,\u9700\u8981\u5148\u8f6c\u6210 8U \u7c7b\u578b\u3002 cvtColor(img, grey, COLOR_BGR2GRAY); Mat sobelx; Sobel(grey, sobelx, CV_32F, 1, 0); double minVal, maxVal; minMaxLoc(sobelx, &minVal, &maxVal); //find minimum and maximum intensities Mat draw; sobelx.convertTo(draw, CV_8U, 255.0/(maxVal - minVal), -minVal * 255.0/(maxVal - minVal));","title":"OpenCV\u4e0e\u57fa\u7840\u6570\u5b57\u56fe\u50cf\u5904\u7406\u7cfb\u52171-Mat\u57fa\u7840"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#1-mat","text":"\u7531\u4e24\u4e2a\u6570\u636e\u90e8\u5206\u6784\u6210\uff0c\u77e9\u9635\u5934\uff08\u5305\u542b\u77e9\u9635\u5c3a\u5bf8\uff0c\u5b58\u50a8\u65b9\u6cd5\uff0c\u5b58\u50a8\u5730\u5740\u7b49\u7b49\uff09\u548c\u4e00\u4e2a\u6307\u5411\u5b58\u50a8\u6240\u6709\u50cf\u7d20\u503c\u7684\u77e9\u9635\u7684\u6307\u9488","title":"1. Mat\u6982\u8981"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#_1","text":"int cv::Mat::cols; //\u8fd4\u56de\u77e9\u9635\u7684\u5217\u6570 int cv::Mat::rows // \u8fd4\u56de\u77e9\u9635\u884c\u6570 uchar* cv::Mat::data // \u6307\u5411\u77e9\u9635\u7684\u6570\u636e\u5355\u5143\u7684\u6307\u9488 int cv::Mat::dims // \u8fd4\u56de\u77e9\u9635\u7ef4\u5ea6\uff0c\u8be5\u7ef4\u5ea6\u22652 MatSize cv::Mat::size // \u8fd4\u56de\u77e9\u9635\u5927\u5c0f","title":"\u6210\u5458\u53d8\u91cf"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#_2","text":"","title":"\u56fe\u50cf\u683c\u5f0f"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#1","text":"depth() : \u56fe\u50cf\u4f4d\u6df1\u5ea6=\u6bd4\u7279\u6570+\u6570\u636e\u7c7b\u578b\uff1b \u4e0b\u8868\u662f\u8fd4\u56de\u503c\u4ee5\u53ca\u5bf9\u5e94\u542b\u4e49 \u56fe\u50cf\u6df1\u5ea6 \u679a\u4e3e\u6570\u503c \u7a7a\u95f4\u5927\u5c0f \u8303\u56f4 \u7b49\u540cC++\u53d8\u91cf CV_8U 0 8bits 0~255 unsigned char CV_8S 1 8bits -128~127 char CV_16U 2 16bits 0~65535 ushort,unsigned short int,unsigned short CV_16S 3 16bits -32768~32767 short,short int CV32S 4 32bits -2147483648~2147483647 int,long CV32F 5 32bits 1.18e-38~3.40e38 float CV_64F 6 64bits 2.23e-308~1.79e308 double CV_USRTYPE1 7 -","title":"1.\u6df1\u5ea6"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#2","text":"int Mat:channels()","title":"2.\u901a\u9053\u6570"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#3","text":"types() \u83b7\u53d6\u5b58\u50a8\u7684\u77e9\u9635\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff08\u5305\u62ec\u4f4d\u6df1\u5ea6\uff0c\u901a\u9053\u6570\uff0c\u6570\u636e\u7c7b\u578b\uff09 \u5b58\u50a8\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff1a CV_[\u4f4d\u6570][\u5e26\u7b26\u53f7\u4e0e\u5426][\u7c7b\u578b\u524d\u7f00]C[\u901a\u9053\u6570] \u5e26\u7b26\u53f7\u4e0e\u5426\uff1aS\u4e3a\u7b26\u53f7\u6574\u578b\uff0cU\u4e3a\u65e0\u7b26\u53f7\u6574\u578b\uff0cF\u4e3a\u6d6e\u70b9\u578b\uff1b\u4f8b\u5982CV_8UC3 \u56fe\u50cf\u7c7b\u578b=\u6bd4\u7279\u6570+\u6570\u636e\u7c7b\u578b+\u901a\u9053\u6570 int Mat:type() \u5177\u4f53\u6570\u636e\u7c7b\u578b\u4e0e\u8fd4\u56de\u503c\u5173\u7cfb\uff1a C1 C2 C3 C4 CV_8U 0 8 16 24 CV_8S 1 9 17 25 CV_16U 2 10 18 26 CV_16S 3 11 19 27 CV_32S 4 12 20 28 CV_32F 5 13 21 29 CV_64F 6 14 22 30 \u7528\u6237\u5b9a\u4e49 7","title":"3.\u6570\u636e\u7c7b\u578b"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#2-mat","text":"","title":"2. Mat\u57fa\u672c\u64cd\u4f5c"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#mat","text":"//\u4e00\uff0cMat\u6784\u9020\u5668 Mat M(2,2, CV_8UC3, Scalar(0,0,255)); cout << \"M = \" << endl << \" \" << M << endl << endl; //\u4e8c\uff0cC/C++\u6570\u7ec4\u521d\u59cb\u5316 int sz[3] = {2,2,2}; Mat L(3,sz, CV_8UC(1), Scalar::all(0)); //cout << \"L = \" << endl << \" \" << L << endl << endl; //\u4e09\uff0ccreate\u51fd\u6570 M.create(4,4, CV_8UC(2)); cout << \"M = \"<< endl << \" \" << M << endl << endl; //\u56db\uff0cMATLAB \u98ce\u683c Mat E = Mat::eye(4, 4, CV_64F); cout << \"E = \" << endl << \" \" << E << endl << endl; Mat O = Mat::ones(2, 2, CV_32F); cout << \"O = \" << endl << \" \" << O << endl << endl; Mat Z = Mat::zeros(3,3, CV_8UC1); cout << \"Z = \" << endl << \" \" << Z << endl << endl; //\u4e94\uff0c\u9017\u53f7\u5206\u5272\u6216\u8005\u6570\u7ec4\u521d\u59cb\u5316 Mat C = (Mat_<double>(3,3) << 0, -1, 0, -1, 5, -1, 0, -1, 0); cout << \"C = \" << endl << \" \" << C << endl << endl; C = (Mat_<double>({0, -1, 0, -1, 5, -1, 0, -1, 0})).reshape(3); //C++11 support cout << \"C = \" << endl << \" \" << C << endl << endl; //\u516d\uff0c\u5229\u7528\u5df2\u6709Mat\u521b\u5efaMat\u5934\uff0c\u7528cv::Mat::clone or cv::Mat::copyTo\u65b9\u6cd5 Mat RowClone = C.row(1).clone(); cout << \"RowClone = \" << endl << \" \" << RowClone << endl << endl;","title":"\u521b\u5efaMat\u5bf9\u8c61"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#_3","text":"Mat r = Mat(10, 3, CV_8UC3); randu(r, Scalar::all(0), Scalar::all(255)); cout << \"r (OpenCV\u9ed8\u8ba4\u98ce\u683c) = \" << r << \";\" << endl << endl; cout << \"r (Python\u98ce\u683c) = \" << format(r, Formatter::FMT_PYTHON) << \";\" << endl << endl; cout << \"r (Numpy\u98ce\u683c) = \" << format(r, Formatter::FMT_NUMPY )<< \";\" << endl << endl; cout << \"r (\u9017\u53f7\u5206\u9694\u98ce\u683c) = \" << format(r, Formatter::FMT_CSV )<< \";\" << endl<< endl; cout << \"r (C\u8bed\u8a00\u98ce\u683c) = \" << format(r, Formatter::FMT_C ) << \";\" << endl << endl;","title":"\u683c\u5f0f\u5316\u8f93\u51fa"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#_4","text":"Point\u7c7b Point2f Point3f Scalar\u7c7b Scalar\u662f\u4e00\u4e2ashort\u578b\u7684\u5411\u91cf\uff0c\u80fd\u591f\u4f7f\u7528\u6307\u5b9a\u7684\u5b9a\u5236\u5316\u503c\u6765\u521d\u59cb\u5316\u77e9\u9635\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u8868\u793a\u989c\u8272 Size\u7c7b Rect\u7c7b Circle","title":"\u5176\u4ed6\u6570\u636e\u7ed3\u6784"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#_5","text":"","title":"\u64cd\u4f5c\u4e0e\u904d\u5386\u56fe\u50cf\u50cf\u7d20"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#1_1","text":"int rowNumber = outputImage.rows; //\u884c\u6570 int colNumber = outputImage.cols*outputImage.channels(); //\u5217\u6570 x \u901a\u9053\u6570=\u6bcf\u4e00\u884c\u5143\u7d20\u7684\u4e2a\u6570 //\u53cc\u91cd\u5faa\u73af\uff0c\u904d\u5386\u6240\u6709\u7684\u50cf\u7d20\u503c for(int i = 0;i < rowNumber;i++) //\u884c\u5faa\u73af { uchar* data = image.ptr<uchar>(i); //\u83b7\u53d6\u7b2ci\u884c\u7684\u9996\u5730\u5740 for(int j = 0;j < colNumber;j++) //\u5217\u5faa\u73af { // ---------\u3010\u5f00\u59cb\u5904\u7406\u6bcf\u4e2a\u50cf\u7d20\u3011------------- // process each pixel, reduce color number; div=64 data[i] = data[i] / div * div + div / 2; // ----------\u3010\u5904\u7406\u7ed3\u675f\u3011--------------------- } //\u884c\u5904\u7406\u7ed3\u675f }","title":"1.\u6307\u9488\u8bbf\u95ee"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#2_1","text":"\u53e6\u4e00\u79cd\u904d\u5386\u50cf\u7d20\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 STL \u98ce\u683c\u7684\u8fed\u4ee3\u5668\uff0c\u5982 cv::MatIterator_ \u548c cv::MatConstIterator_ \uff1a MatIterator_<cv::Vec3b> it \u4e5f\u53ef\u4ee5\u4f7f\u7528 iterator \u7c7b\u578b\uff0c\u5728 Mat_ \u6a21\u677f\u7c7b\u91cc\u5b9a\u4e49\uff1a Mat_<cv::Vec3b>::iterator it Mat \u7684\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a \u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 \uff0c\u56e0\u6b64\u652f\u6301\u5b8c\u6574\u7684\u8fed\u4ee3\u5668\u7b97\u672f\u8fd0\u7b97\uff0c\u5982 std::sort() \u7b49\u3002 //\u83b7\u53d6\u8fed\u4ee3\u5668 Mat_<Vec3b>::iterator it = outputImage.begin<Vec3b>(); //\u521d\u59cb\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668 Mat_<Vec3b>::iterator itend = outputImage.end<Vec3b>(); //\u7ec8\u6b62\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668 //\u5b58\u53d6\u5f69\u8272\u56fe\u50cf\u50cf\u7d20 for(;it != itend;++it){ // ------------------------\u3010\u5f00\u59cb\u5904\u7406\u6bcf\u4e2a\u50cf\u7d20\u3011-------------------- (*it)[0] = ... (*it)[1] = ... (*it)[2] = ... // ------------------------\u3010\u5904\u7406\u7ed3\u675f\u3011---------------------------- }","title":"2. \u8fed\u4ee3\u5668\u8bbf\u95ee\u50cf\u7d20"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#3-at","text":"\u4f7f\u7528 at \u65b9\u5f0f\u8fdb\u884c\u8bbf\u95ee\uff0c\u5728 at \u7684\u65f6\u5019\u9700\u8981\u6307\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u5bf9\u7167\u8868\u5982\u4e0b\uff1a \u79cd\u7c7b C1 C2 C3 C4 C6 uchar 8U uchar cv::Vec2b cv::Vec3b cv::Vec4b char 8S ushort 16U short 16S short cv::Vec2s cv::Vec3s cv::Vec4s int 32S int cv::Vec2i cv::Vec3i cv::Vec4i float 32F float cv::Vec2f cv::Vec3f cv::Vec4f cv::Vec6f double 64F double cv::Vec2d cv::Vec3d cv::Vec4d cv::Vec6d //\u83b7\u53d6\u5355\u901a\u9053\u7070\u5ea6\u56fe\uff08\u7c7b\u578b\u4e3a8UC1\uff09\u91cc\u50cf\u7d20\u70b9 (x,y) \u7684\u4eae\u5ea6\u503c\uff1a Scalar intensity = img.at<uchar>(x\uff0cy); //\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a\u5f97\u5230\u7684 intensity.val[0] \u5c06\u5305\u542b\u4e00\u4e2a\u4ece 0~255 \u4e4b\u95f4\u7684\u6570\u503c\u3002 Scalar intensity = img.at<uchar>(Point(x, y)); //\u5b58\u53d6\u5f69\u8272\u56fe\u50cf\u50cf\u7d20 for(int i = 0;i < rowNumber;i++){ for(int j = 0;j < colNumber;j++){ // ------------------------\u3010\u5f00\u59cb\u5904\u7406\u6bcf\u4e2a\u50cf\u7d20\u3011-------------------- image.at<Vec3b>(i,j)[0] = ...//\u84dd\u8272\u901a\u9053 image.at<Vec3b>(i,j)[1] = ...//\u7eff\u8272\u901a\u9053 image.at<Vec3b>(ij)[2] = ... //\u7ea2\u662f\u901a\u9053 // -------------------------\u3010\u5904\u7406\u7ed3\u675f\u3011---------------------------- } // \u884c\u5904\u7406\u7ed3\u675f } \u66f4\u591a\u50cf\u7d20\u64cd\u4f5c: 14\u79cd\u65b9\u6cd5","title":"3. \u52a8\u6001\u5730\u5740\u8ba1\u7b97\u914d\u5408at\u8bbf\u95ee\u50cf\u7d20"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#4","text":"\u6709\u65f6\u5019\u9700\u8981\u5728\u904d\u5386\u56fe\u50cf\u7684\u540c\u65f6\u8bbf\u95ee\u76f8\u90bb\u7684\u50cf\u7d20\u3002\u5982\u679c\u4ece\u56fe\u50cf\u4e2d\u51cf\u53bb\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u90e8\u5206\uff0c\u56fe\u50cf\u7684\u8fb9\u7f18\u5c31\u4f1a\u653e\u5927\uff0c\u56e0\u800c \u56fe\u50cf\u4f1a\u53d8\u5f97\u66f4\u52a0\u5c16\u9510\u3002 \u589e\u5f3a\u540e\u7684\u50cf\u7d20\u503c = 5*\u5f53\u524d - \u5de6 - \u53f3 - \u4e0a - \u4e0b \u53ef\u4f7f\u7528\u4e09\u4e2a\u6307\u9488\u6765\u8fdb\u884c\u56fe\u50cf\u904d\u5386\uff0c\u4e00\u4e2a\u7528\u4e8e\u5f53\u524d\u884c\uff0c\u4e00\u4e2a\u7528\u4e8e\u4e0a\u9762\u4e00\u884c\uff0c\u4e00\u4e2a\u7528\u4e8e\u4e0b\u9762\u4e00\u884c\uff1a /** * sharpen - lapracian sharpen function * * @param image - the source grey scale image * @param result - the output grey scale image */ void sharpen(const cv::Mat &image, cv::Mat &result) { // allocate if neccessary result.create(image.size(), image.type()); for (int j=1; j<image.rows-1; ++j) { // for all rows // (except first and last) const uchar *previous = image.ptr<const uchar>(j-1); // previous row const uchar *current = image.ptr<const uchar>(j); // current row const uchar *next = image.ptr<const uchar>(j+1); // next row uchar *output = result.ptr<uchar>(j); // output row for (int i=1; i<image.cols-1; ++i) { *output++ = cv::saturate_cast<uchar>(5*current[i]-current[i-1] -current[i+1]-previous[i]-next[i]); } } // Set the unprocess pixelss to 0 result.row(0).setTo(cv::Scalar(0)); result.row(result.rows-1).setTo(cv::Scalar(0)); result.col(0).setTo(cv::Scalar(0)); result.col(result.cols-1).setTo(cv::Scalar(0)); } filter2D\u5b9e\u73b0\u539f\u7406 \u5b9a\u4e49\u4e00\u4e2a\u6838\uff08\u4ee5\u77e9\u9635\u7684\u5f62\u5f0f\uff09\uff0c\u8c03\u7528\u51fd\u6570\u5e76\u4f20\u5165\u56fe\u50cf\u548c\u5185\u6838\uff0c\u5373\u53ef\u8fd4\u56de\u5377\u79ef\u6ee4\u6ce2\u540e\u7684\u56fe\u50cf\u3002","title":"4. \u904d\u5386\u5e76\u8bbf\u95ee\u76f8\u90bb\u50cf\u7d20"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#_6","text":"","title":"\u66f4\u591a\u64cd\u4f5c"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#roi","text":"\u4f7f\u7528Rect \u6307\u5b9a\u884c\u5217\u8303\u56f4Range // \u884c[0,2) \u5217[0,2) \u306e\u7bc4\u56f2\u306e\u90e8\u5206\u884c\u5217\uff08Range\uff09 M(cv::Range(0,2), cv::Range(0,2)); // \u884c[0,2) \u5217[0,2) \u306e\u7bc4\u56f2\u306e\u90e8\u5206\u884c\u5217\uff08Rect\uff09 M(cv::Rect(0,0,2,2)); // \u3059\u3079\u3066\u306e\u884c m1.rowRange(cv::Range::all()); //colRange // [0,2) \u884c\u306e\u7bc4\u56f2 m1.rowRange(cv::Range(0,2)); //colRange // 0\u884c\u76ee,0\u5217\u76ee m1.row(0) //.col(0);","title":"\u90e8\u5206\u77e9\u9635 &amp; \u7279\u5b9a\u884c/\u5217 &amp; \u8bbe\u7f6eROI"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#mat__tp-matx-vec","text":"","title":"Mat_&lt;_Tp&gt;, Matx, Vec"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#_7","text":"\u5408\u6210 \u4f7f\u7528 cv::merge \u64cd\u4f5c\u53ef\u4ee5\u91cd\u65b0\u5c06\u51e0\u4e2a\u5355\u901a\u9053\u56fe\u50cf\u5408\u5e76\u6210\u4e00\u4e2a\u591a\u901a\u9053\u56fe\u50cf\u3002\u4e0b\u9762\u7684\u7a0b\u5e8f\u6f14\u793a\u4e86\u5c06\u4e00\u5e45\u56fe\u50cf image2 \u4e0e\u53e6\u4e00\u5e45\u56fe\u50cf image1 \u7684\u84dd\u8272\u901a\u9053\u6df7\u5408\uff1a merge, mixChannels \u5206\u79bb \u53ef\u4ee5\u4f7f\u7528 cv::split \u64cd\u4f5c\u6765\u5c06\u5f69\u8272\u56fe\u50cf\u5206\u79bb\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u901a\u9053\u56fe\u50cf\u3002 $mv c =src(I)$ // create vector of 3 images std::vector<cv::Mat> planes; // split 1 3-channel image into 3 1-channel images cv::split(image1, planes); // add to blue channel planes[0] += image2; // merge the 3 1-channel images into 1 3-channel image cv::merge(planes, result);","title":"\u901a\u9053\u7684\u5408\u6210\u4e0e\u5206\u79bb"},{"location":"content/cv/1-Mat%E5%9F%BA%E6%9C%AC/#_8","text":"convertTo //\u5c55\u793a\u4e00\u5e45 32F \u7684\u56fe\u50cf,\u9700\u8981\u5148\u8f6c\u6210 8U \u7c7b\u578b\u3002 cvtColor(img, grey, COLOR_BGR2GRAY); Mat sobelx; Sobel(grey, sobelx, CV_32F, 1, 0); double minVal, maxVal; minMaxLoc(sobelx, &minVal, &maxVal); //find minimum and maximum intensities Mat draw; sobelx.convertTo(draw, CV_8U, 255.0/(maxVal - minVal), -minVal * 255.0/(maxVal - minVal));","title":"\u76f8\u5173\u51fd\u6570"},{"location":"content/cv/5-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/","text":"\u53ea\u6539\u53d8\u50cf\u7d20\u5750\u6807\u4f4d\u7f6e\uff0c\u4e0d\u6539\u53d8\u50cf\u7d20\u503c\u3002 \u5bf9\u4e8e\u4e00\u5f20\u56fe\u7247\u7684\u653e\u5927\u3001\u7f29\u5c0f\u3001\u65cb\u8f6c\u7b49\u64cd\u4f5c\u6211\u4eec\u7edf\u79f0\u4e3a\u51e0\u4f55\u53d8\u6362\u3002\u51e0\u4f55\u53d8\u6362\u662f\u56fe\u50cf\u6700\u57fa\u672c\u4e5f\u662f\u6700\u6210\u7528\u7684\u64cd\u4f5c\uff0c\u5e38\u89c1\u7684\u51e0\u4f55\u53d8\u6362\u6709\u4eff\u5c04\u53d8\u6362\u3001\u6295\u5f71\u53d8\u6362\u3001\u6781\u5750\u6807\u53d8\u6362\u3002 \u53c2\u8003 \u76f8\u5173\u7406\u8bba\uff1a OpenCV\u7b97\u6cd5\u5b66\u4e60\u7b14\u8bb0\u4e4b\u51e0\u4f55\u53d8\u6362 \u4eff\u5c04\u53d8\u6362 \u4eff\u5c04\u53d8\u6362=\u7ebf\u6027\u53d8\u6362+\u5e73\u79fb\u529f\u80fd \u4eff\u5c04\u53d8\u6362\u77e9\u9635 $$ A = \\begin{pmatrix} a11 & a12 &a13\\ a21 &a22 & a23 \\0 & 0 & 1 \\end{pmatrix} $$ \u5e73\u79fbT\uff0c\u7f29\u653eS\uff0c\u65cb\u8f6cR $$ T = \\begin{pmatrix} 1 & 0 &t_x\\ 0 &1 & t_y \\0 & 0 & 1 \\end{pmatrix} $$ $$ S = \\begin{pmatrix} s_x & 0 &0\\ 0 &s_y & 0 \\0 & 0 & 1 \\end{pmatrix} $$ $$ R = \\begin{pmatrix} cos\\theta & -sin\\theta &0 \\sin\\theta &cos\\theta & 0 \\0 & 0 & 1 \\end{pmatrix} $$ \u5404\u79cd\u65cb\u8f6c\u53d8\u6362 C\u8bed\u8a00\u5b9e\u73b0 \u4ee3\u7801\u5b9e\u73b0 OpenCV\u6e90\u7801\u5206\u6790 getAffineTransform warpAffine \u4ee5\u4e0a\u90fd\u662f\u77e5\u9053\u53d8\u6362\u524d\u5750\u6807\u6c42\u53d8\u6362\u540e\u7684\u5750\u6807\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u53d8\u6362\u524d\u7684\u5750\u6807\u548c\u53d8\u6362\u540e\u7684\u5750\u6807\uff0c\u60f3\u6c42\u51fa\u4eff\u5c04\u53d8\u6362\u77e9\u9635\uff0c\u53ef\u4ee5\u901a\u8fc7\u89e3\u65b9\u7a0b\u6cd5\u6216\u77e9\u9635\u6cd5\u3002 \u7531\u4e8e\u4eff\u5c04\u53d8\u6362\u77e9\u9635\u67096\u4e2a\u672a\u77e5\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u4e09\u7ec4\u5750\u6807\u5217\u51fa\u516d\u4e2a\u65b9\u7a0b\u5373\u53ef\u3002 // \u7b2c\u4e00\u79cd\u65b9\u6cd5 Point2f src1[] = {Pointy2f(0, 0), Point2f(200, 0), Point2f(0, 200)}; Point2f dst1[] = {Pointy2f(0, 0), Point2f(100, 0), Point2f(0, 100)}; // \u7b2c\u4e8c\u79cd\u65b9\u6cd5 Mat src2 = (Mat_<float>(3, 2) << 0, 0, 200, 0, 0, 200); Mat dst2 = (Mat_<float>(3, 2) << 0, 0, 100, 0, 0, 100); Mat A = getAffineTransform(src1, dst1); \u5bf9\u4e8e\u77e9\u9635\u6cd5\u6c42\u89e3\uff0c\u4eff\u5c04\u53d8\u6362\u77e9\u9635\u662f\u5e73\u79fb\u4eff\u5c04\u77e9\u9635\u4e58\u4ee5\u7f29\u653e\u4eff\u5c04\u77e9\u9635 $$ \\begin{pmatrix} \\tilde x \\ \\tilde y \\ 1 \\end{pmatrix} = TS \\begin{pmatrix} x \\ y \\ 1 \\end{pmatrix} $$ Calculates coefficients of affine transformation which maps $x_i,y_i) \\to (u_i,v_i), (i=1,2,3)$ /* ui = c00*xi + c01*yi + c02 * vi = c10*xi + c11*yi + c12 * * Coefficients are calculated by solving linear system: * / x0 y0 1 0 0 0 \\ /c00\\ /u0\\ * | x1 y1 1 0 0 0 | |c01| |u1| * | x2 y2 1 0 0 0 | |c02| |u2| * | 0 0 0 x0 y0 1 | |c10| |v0| * | 0 0 0 x1 y1 1 | |c11| |v1| * \\ 0 0 0 x2 y2 1 / |c12| |v2| * * where: * cij - matrix coefficients */ [\u5b8c\u6574\u6e90\u7801]https://gist.github.com/seaside2mm/b5f0c383e9bb19fca11b35b03f5bf6c9 python\u6848\u4f8b\u5b9e\u73b0 \u524d\u9762\u8bb2\u5b8c\u4e86\u4eff\u5c04\u53d8\u6362\u548c\u53cc\u7ebf\u6027\u63d2\u503c\uff0c\u6211\u4eec\u6574\u7406\u4e00\u4e0b\uff1a \u4eff\u5c04\u53d8\u6362\u662f\u6211\u4eec\u7684\u76ee\u7684\uff0c\u53cc\u7ebf\u6027\u63d2\u503c\u662f\u5e2e\u52a9\u6211\u4eec\u5728\u56fe\u50cf\u4e0a\u5b9e\u73b0\u4eff\u5c04\u53d8\u6362\u3002 \u5728\u5199\u4ee3\u7801\u524d\uff0c\u7406\u4e00\u4e0b\u5728\u56fe\u7247\u4e0a\u505a\u4eff\u5c04\u53d8\u6362\u7684\u601d\u8def\uff0c\u901a\u5e38\u5206\u4e3a3\u4e2a\u6b65\u9aa4\uff1a \u9996\u5148\uff0c\u521b\u5efa\u91c7\u6837\u7f51\u683c(sampling grid)\u3002\u7f51\u683c\u548c\u8f93\u5165\u7279\u5f81\u6620\u5c04\u76f8\u540c\u7a7a\u95f4\u5927\u5c0f\u7684\u68cb\u76d8\u7f51\u683c(\u6807\u6ce8\u5404\u4e2a\u5750\u6807\u70b9\uff0c\u7528\u4e8e\u5b58\u50a8\u4eff\u5c04\u53d8\u6362\u540e\u7684\u5750\u6807\u70b9) \u5176\u6b21\uff0c\u5c06\u4eff\u5c04\u8f6c\u6362\u5e94\u7528\u4e8e\u4e0a\u6b65\u751f\u6210\u7684sampling grid\uff0c\u5f97\u5230\u5b9e\u9645\u7684\u91c7\u6837\u5750\u6807 \u6700\u540e\uff0c\u4f7f\u7528\u53cc\u7ebf\u6027\u63d2\u503c\u6280\u672f\u4ece\u539f\u59cb\u56fe\u7247\u4e0a\u6309\u7167\u5b9e\u9645\u91c7\u6837\u5750\u6807\u91c7\u6837\u5f97\u5230\u6700\u7ec8\u7ed3\u679c \u5b8c\u6574\u6848\u4f8b\u4ee3\u7801 \u6295\u5f71\u53d8\u6362 \u5982\u679c\u7269\u4f53\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u53d1\u751f\u65cb\u8f6c\uff0c\u8fd9\u79cd\u53d8\u6362\u901a\u5e38\u6210\u4e3a\u6295\u5f71\u53d8\u6362\u3002\u7531\u4e8e\u53ef\u80fd\u51fa\u73b0\u9634\u5f71\u6216\u8005\u906e\u6321\uff0c\u6240\u4ee5\u6295\u5f71\u53d8\u6362\u5f88\u96be\u4fee\u6b63\u3002\u4f46\u662f\u5982\u679c\u7269\u4f53\u662f\u5e73\u9762\u7684\uff0c\u90a3\u4e48\u5f88\u5bb9\u6613\u901a\u8fc7\u4e8c\u7ef4\u6295\u5f71\u53d8\u6362\u5bf9\u6b64\u7269\u4f53\u4e09\u7ef4\u53d8\u6362\u8fdb\u884c\u6a21\u578b\u5316\uff0c\u8fd9\u5c31\u662f\u4e13\u7528\u7684\u4e8c\u7ef4\u6295\u5f71\u53d8\u6362\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u8868\u8ff0\uff1a $$ \\begin{pmatrix} \\tilde x \\ \\tilde y \\ 1 \\end{pmatrix} = \\begin{pmatrix} a11 & a12 &a13\\ a21 &a22 & a23 \\a31 & a32 & a33 \\end{pmatrix} \\begin{pmatrix} x \\ y \\ 1 \\end{pmatrix} $$ \u4ee3\u7801\u5b9e\u73b0 getPerspectiveTransform\u3002 warpPerspective c\u8bed\u8a00\u5b9e\u73b0 /*\u30b5\u30f3\u30d7\u30eb\u306e\u5c04\u5f71\u5909\u63db\u7528\u306e\u884c\u5217\u306f\u3001\u4ee5\u4e0b\u306e4\u70b9\u306e\u5ea7\u6a19\u5909\u63db\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 (0, 0)\u2192(0, 0) (640, 0)\u2192(580, 25) (0, 480)\u2192(0, 480) (640, 480)\u2192(600, 400) \u30d0\u30a4\u30ea\u30cb\u30a2\u88dc\u9593\u3092\u4f7f\u7528\u3057\u3001\u7aef\u306f\u51e6\u7406\u3057\u3066\u3044\u307e\u305b\u3093\u3002*/ void homography(unsigned char *out, unsigned char *in, int inHeight, int inWidth, int inChannel, double *ht){ int i, j; int index; double tmp, tmpX, tmpY; int floorX, floorY; int inX, inY; int widthStep; widthStep = inWidth * inChannel; if(widthStep % 4 != 0){ widthStep = widthStep + 4 - widthStep % 4; } for(i = 0; i < inHeight; ++i){ for(j = 0; j < inWidth; ++j){ tmp = j * ht[6] + i * ht[7] + 1.0; tmpX = (j * ht[0] + i * ht[1] + ht[2]) / tmp; tmpY = (j * ht[3] + i * ht[4] + ht[5]) / tmp; floorX = (int)tmpX; floorY = (int)tmpY; if(tmpX > 1 && tmpX < (inWidth - 1) && tmpY > 1 && tmpY < (inHeight - 1)){ // \u5de6\u4e0a + \u53f3\u4e0a + \u5de6\u4e0b + \u53f3\u4e0b index = i * widthStep + j; out[index] = (floorX + 1.0 - tmpX) * (floorY + 1.0 - tmpY) * (double)in[floorY * widthStep + floorX] + (tmpX - floorX) * (floorY + 1.0 - tmpY) * (double)in[floorY * widthStep + (floorX + 1)] + (floorX + 1.0 - tmpX) * (tmpY - floorY) * (double)in[(floorY + 1) * widthStep + floorX] + (tmpX - floorX) * (tmpY - floorY) * (double)in[(floorY + 1) * widthStep + floorX + 1]; } } } } \u6781\u5750\u6807\u53d8\u6362\u3002 \u901a\u5e38\u901a\u8fc7\u6781\u5750\u6807\u53d8\u5316\u6821\u6b63\u56fe\u50cf\u4e2d\u7684\u5706\u5f62\u7269\u4f53\u6216\u5305\u542b\u5728\u5706\u73af\u4e2d\u7684\u7269\u4f53\u3002 \u9879\u76ee \u81ea\u52a8\u88c1\u526a\u56fe\u50cf\u5e76\u53d8\u6362\u89c6\u56fe\u3002 void NearestNeighbor(unsigned char *out, unsigned char *in, int inHeight, int inWidth, int inChannel, double mag){ int height; int width; int outStep; int inStep; int i, j; height = (int)((double)inHeight * mag); width = (int)((double)inWidth * mag); // OpenCV\u3067\u4f7f\u7528\u3059\u308b\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u6a2a\u5e45\u306f4\u30d0\u30a4\u30c8\u533a\u5207\u308a\u306e\u305f\u3081\u8abf\u6574 inStep = inWidth * inChannel; if( (inStep % 4) != 0){ inStep = inStep + (4 - inStep %4); } outStep = width * inChannel; if( (outStep % 4) != 0){ outStep = outStep + (4 - outStep %4); } // \u30eb\u30fc\u30d7\u4e2d\u306bif\u6587\u3092\u66f8\u304f\u3068\u9045\u3044\u305f\u3081\u30eb\u30fc\u30d7\u524d\u306b\u30d3\u30c3\u30c8\u6570\u306e\u6761\u4ef6\u5206\u5c90 switch(inChannel){ case 1: // 8bit\u753b\u50cf for(i = 0; i < height; ++i){ for(j = 0; j < width; ++j){ out[i * outStep + j] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag)]; } } break; case 3: // 24bit\u753b\u50cf for(i = 0; i < height; ++i){ for(j = 0; j < width; ++j){ out[i * outStep + j * 3] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 3]; out[i * outStep + j * 3 + 1] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 3 + 1]; out[i * outStep + j * 3 + 2] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 3 + 2]; } } break; case 4: // 32bit\u753b\u50cf for(i = 0; i < height; ++i){ for(j = 0; j < width; ++j){ out[i * outStep + j * 4] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 4]; out[i * outStep + j * 4 + 1] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 4 + 1]; out[i * outStep + j * 4 + 2] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 4 + 2]; out[i * outStep + j * 4 + 3] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 4 + 3]; } } break; default: break; } } /* in : \u6a2a\u306f4\u30d0\u30a4\u30c8 */ void Bilinear(unsigned char *out, unsigned char *in, int inHeight, int inWidth, int inChannel, double mag){ int height; int width; int outStep; int inStep; int i, j; double inX, inY; height = (int)((double)inHeight * mag); width = (int)((double)inWidth * mag); // OpenCV\u3067\u4f7f\u7528\u3059\u308b\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u6a2a\u5e45\u306f4\u30d0\u30a4\u30c8\u533a\u5207\u308a\u306e\u305f\u3081\u8abf\u6574 inStep = inWidth * inChannel; if( (inStep % 4) != 0){ inStep = inStep + (4 - inStep %4); } outStep = width * inChannel; if( (outStep % 4) != 0){ outStep = outStep + (4 - outStep %4); } // \u30eb\u30fc\u30d7\u4e2d\u306bif\u6587\u3092\u66f8\u304f\u3068\u9045\u3044\u305f\u3081\u30eb\u30fc\u30d7\u524d\u306b\u30d3\u30c3\u30c8\u6570\u306e\u6761\u4ef6\u5206\u5c90 switch(inChannel){ case 1: // 8bit\u753b\u50cf for(i = 0; i < height; ++i){ inY = (double)i / mag; // \u5165\u529b\u753b\u50cf\u306e\u9ad8\u3055\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b if((int)inY >= inHeight){ --inY; } for(j = 0; j < width; ++j){ // \u5165\u529b\u753b\u50cf\u306e\u5e45\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b inX = (double)j / mag; if((int)inX >= inWidth){ --inX; } out[i * outStep + j] = (unsigned char)(((int)inX + 1 - inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + (int)inX] + (inX - (int)inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + (int)inX + 1] + ((int)inX + 1 - inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + (int)inX] + (inX - (int)inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + (int)inX + 1]); } } break; case 3: // 24bit\u753b\u50cf for(i = 0; i < height; ++i){ inY = (double)i / mag; // \u5165\u529b\u753b\u50cf\u306e\u9ad8\u3055\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b if((int)inY >= inHeight){ --inY; } for(j = 0; j < width; ++j){ // \u5165\u529b\u753b\u50cf\u306e\u5e45\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b inX = (double)j / mag; if((int)inX >= inWidth){ --inX; } out[i * outStep + j * 3] = (unsigned char)(((int)inX + 1 - inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + (int)inX * 3] + (inX - (int)inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + ((int)inX + 1) * 3] + ((int)inX + 1 - inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + (int)inX * 3] + (inX - (int)inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + ((int)inX + 1) * 3]); out[i * outStep + j * 3 + 1] = (unsigned char)(((int)inX + 1 - inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + (int)inX * 3 + 1] + (inX - (int)inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + ((int)inX + 1) * 3 + 1] + ((int)inX + 1 - inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + (int)inX * 3 + 1] + (inX - (int)inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + ((int)inX + 1) * 3 + 1]); out[i * outStep + j * 3 + 2] = (unsigned char)(((int)inX + 1 - inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + (int)inX * 3 + 2] + (inX - (int)inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + ((int)inX + 1) * 3 + 2] + ((int)inX + 1 - inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + (int)inX * 3 + 2] + (inX - (int)inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + ((int)inX + 1) * 3 + 2]); } } break; case 4: // 32bit\u753b\u50cf break; default: break; } } /*\u30d0\u30a4\u30ad\u30e5\u30fc\u30d3\u30c3\u30af \u30d0\u30a4\u30ad\u30e5\u30fc\u30d3\u30c3\u30af\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 \u753b\u50cf\u306e\u7aef\u306e\u51e6\u7406\u306f\u672a\u5b9f\u88c5\u3067\u3059\u3002 \u901f\u5ea6\u3001\u7c21\u6f54\u3055\u306a\u3069\u5ea6\u5916\u8996\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u5b9f\u88c5\u3057\u305f\u7248\u3067\u3059\u3002*/ #define KEISU_A -1.0 double calcH(double inValue, double aValue){ double tmpValue = abs(inValue); double outValue; if(tmpValue <= 1){ outValue = (aValue + 2.0) * tmpValue * tmpValue * tmpValue - (aValue + 3.0) * tmpValue * tmpValue + 1.0; } else if(tmpValue <= 2){ outValue = aValue * tmpValue * tmpValue * tmpValue - 5 * aValue * tmpValue * tmpValue + 8.0 * aValue * tmpValue - 4.0 * aValue; } else { outValue = 0.0; } return outValue; } double calcH(double inValue){ double outValue = calcH(inValue, -1.0); return outValue; } /* in : \u6a2a\u306f4\u30d0\u30a4\u30c8 */ void Bicubic(unsigned char *out, unsigned char *in, int inHeight, int inWidth, int inChannel, double mag){ int height; int width; int outStep; int inStep; int i, j; double inX, inY; double inXa[4], inYa[4]; double hx[4], hy[4]; int indexY[4]; int indexX[4]; double tmp; height = (int)((double)inHeight * mag); width = (int)((double)inWidth * mag); // OpenCV\u3067\u4f7f\u7528\u3059\u308b\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u6a2a\u5e45\u306f4\u30d0\u30a4\u30c8\u533a\u5207\u308a\u306e\u305f\u3081\u8abf\u6574 inStep = inWidth * inChannel; if( (inStep % 4) != 0){ inStep = inStep + (4 - inStep %4); } outStep = width * inChannel; if( (outStep % 4) != 0){ outStep = outStep + (4 - outStep %4); } // \u30eb\u30fc\u30d7\u4e2d\u306bif\u6587\u3092\u66f8\u304f\u3068\u9045\u3044\u305f\u3081\u30eb\u30fc\u30d7\u524d\u306b\u30d3\u30c3\u30c8\u6570\u306e\u6761\u4ef6\u5206\u5c90 switch(inChannel){ case 1: // 8bit\u753b\u50cf for(i = 0; i < height; ++i){ inY = (double)i / mag; // \u5165\u529b\u753b\u50cf\u306e\u9ad8\u3055\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b if((int)inY >= inHeight - 1){ --inY; } inYa[0] = 1 + inY - (int)inY; inYa[1] = inY - (int)inY; inYa[2] = (int)inY + 1 - inY; inYa[3] = (int)inY + 2 - inY; inYa[0] = calcH(inYa[0], KEISU_A); inYa[1] = calcH(inYa[1], KEISU_A); inYa[2] = calcH(inYa[2], KEISU_A); inYa[3] = calcH(inYa[3], KEISU_A); if(inYa[0] < 0 && inYa[0] > -0.001){ inYa[0] = 0.0; } if(inYa[1] < 0 && inYa[1] > -0.001){ inYa[1] = 0.0; } if(inYa[2] < 0 && inYa[2] > -0.001){ inYa[2] = 0.0; } if(inYa[3] < 0 && inYa[3] > -0.001){ inYa[3] = 0.0; } if(inYa[0] > 1.0){ inYa[0] = 1.0; } if(inYa[1] > 1.0){ inYa[1] = 1.0; } if(inYa[2] > 1.0){ inYa[2] = 1.0; } if(inYa[3] > 1.0){ inYa[3] = 1.0; } if(inY >= 1.0){ indexY[0] = ((int)inY - 1) * inStep; } else { indexY[0] = (int)inY * inStep; } indexY[1] = (int)inY * inStep; indexY[2] = ((int)inY + 1) * inStep; indexY[3] = ((int)inY + 2) * inStep; for(j = 0; j < width; ++j){ // \u5165\u529b\u753b\u50cf\u306e\u5e45\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b inX = (double)j / mag; if((int)inX >= inWidth - 1){ --inX; } inXa[0] = 1 + inX - (int)inX; inXa[1] = inX - (int)inX; inXa[2] = (int)inX + 1 - inX; inXa[3] = (int)inX + 2 - inX; inXa[0] = calcH(inXa[0], KEISU_A); inXa[1] = calcH(inXa[1], KEISU_A); inXa[2] = calcH(inXa[2], KEISU_A); inXa[3] = calcH(inXa[3], KEISU_A); if(inXa[0] < 0 && inXa[0] > -0.001){ inXa[0] = 0.0; } if(inXa[1] < 0 && inXa[1] > -0.001){ inXa[1] = 0.0; } if(inXa[2] < 0 && inXa[2] > -0.001){ inXa[2] = 0.0; } if(inXa[3] < 0 && inXa[3] > -0.001){ inXa[3] = 0.0; } if(inXa[0] > 1.0){ inXa[0] = 1.0; } if(inXa[1] > 1.0){ inXa[1] = 1.0; } if(inXa[2] > 1.0){ inXa[2] = 1.0; } if(inXa[3] > 1.0){ inXa[3] = 1.0; } if(inX >= 1.0){ indexX[0] = (int)(inX - 1) * inChannel; } else { indexX[0] = (int)inX * inChannel; } indexX[1] = (int)inX * inChannel; indexX[2] = (int)(inX + 1) * inChannel; indexX[3] = (int)(inX + 2) * inChannel; tmp = (inYa[0] * (inXa[0] * in[indexY[0] + indexX[0]] + inXa[1] * in[indexY[0] +indexX[1]] + inXa[2] * in[indexY[0] +indexX[2]] + inXa[3] * in[indexY[0] +indexX[3]]) + inYa[1] * (inXa[0] * in[indexY[1] + indexX[0]] + inXa[1] * in[indexY[1] +indexX[1]] + inXa[2] * in[indexY[1] +indexX[2]] + inXa[3] * in[indexY[1] +indexX[3]]) + inYa[2] * (inXa[0] * in[indexY[2] + indexX[0]] + inXa[1] * in[indexY[2] +indexX[1]] + inXa[2] * in[indexY[2] +indexX[2]] + inXa[3] * in[indexY[2] +indexX[3]]) + inYa[3] * (inXa[0] * in[indexY[3] + indexX[0]] + inXa[1] * in[indexY[3] +indexX[1]] + inXa[2] * in[indexY[3] +indexX[2]] + inXa[3] * in[indexY[3] +indexX[3]])); if(tmp > 255.0){ tmp = 255; } else if(tmp < 0.0){ tmp = 0; } out[i * outStep + j] = tmp; } } break; case 3: break; case 4: // 32bit\u753b\u50cf break; default: break; } }","title":"OpenCV\u4e0e\u57fa\u7840\u6570\u5b57\u56fe\u50cf\u5904\u7406\u7cfb\u52175-\u51e0\u4f55\u53d8\u6362"},{"location":"content/cv/5-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#_1","text":"\u4eff\u5c04\u53d8\u6362=\u7ebf\u6027\u53d8\u6362+\u5e73\u79fb\u529f\u80fd \u4eff\u5c04\u53d8\u6362\u77e9\u9635 $$ A = \\begin{pmatrix} a11 & a12 &a13\\ a21 &a22 & a23 \\0 & 0 & 1 \\end{pmatrix} $$ \u5e73\u79fbT\uff0c\u7f29\u653eS\uff0c\u65cb\u8f6cR $$ T = \\begin{pmatrix} 1 & 0 &t_x\\ 0 &1 & t_y \\0 & 0 & 1 \\end{pmatrix} $$ $$ S = \\begin{pmatrix} s_x & 0 &0\\ 0 &s_y & 0 \\0 & 0 & 1 \\end{pmatrix} $$ $$ R = \\begin{pmatrix} cos\\theta & -sin\\theta &0 \\sin\\theta &cos\\theta & 0 \\0 & 0 & 1 \\end{pmatrix} $$ \u5404\u79cd\u65cb\u8f6c\u53d8\u6362 C\u8bed\u8a00\u5b9e\u73b0","title":"\u4eff\u5c04\u53d8\u6362"},{"location":"content/cv/5-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#_2","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/5-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#opencv","text":"getAffineTransform warpAffine \u4ee5\u4e0a\u90fd\u662f\u77e5\u9053\u53d8\u6362\u524d\u5750\u6807\u6c42\u53d8\u6362\u540e\u7684\u5750\u6807\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u53d8\u6362\u524d\u7684\u5750\u6807\u548c\u53d8\u6362\u540e\u7684\u5750\u6807\uff0c\u60f3\u6c42\u51fa\u4eff\u5c04\u53d8\u6362\u77e9\u9635\uff0c\u53ef\u4ee5\u901a\u8fc7\u89e3\u65b9\u7a0b\u6cd5\u6216\u77e9\u9635\u6cd5\u3002 \u7531\u4e8e\u4eff\u5c04\u53d8\u6362\u77e9\u9635\u67096\u4e2a\u672a\u77e5\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u4e09\u7ec4\u5750\u6807\u5217\u51fa\u516d\u4e2a\u65b9\u7a0b\u5373\u53ef\u3002 // \u7b2c\u4e00\u79cd\u65b9\u6cd5 Point2f src1[] = {Pointy2f(0, 0), Point2f(200, 0), Point2f(0, 200)}; Point2f dst1[] = {Pointy2f(0, 0), Point2f(100, 0), Point2f(0, 100)}; // \u7b2c\u4e8c\u79cd\u65b9\u6cd5 Mat src2 = (Mat_<float>(3, 2) << 0, 0, 200, 0, 0, 200); Mat dst2 = (Mat_<float>(3, 2) << 0, 0, 100, 0, 0, 100); Mat A = getAffineTransform(src1, dst1); \u5bf9\u4e8e\u77e9\u9635\u6cd5\u6c42\u89e3\uff0c\u4eff\u5c04\u53d8\u6362\u77e9\u9635\u662f\u5e73\u79fb\u4eff\u5c04\u77e9\u9635\u4e58\u4ee5\u7f29\u653e\u4eff\u5c04\u77e9\u9635 $$ \\begin{pmatrix} \\tilde x \\ \\tilde y \\ 1 \\end{pmatrix} = TS \\begin{pmatrix} x \\ y \\ 1 \\end{pmatrix} $$ Calculates coefficients of affine transformation which maps $x_i,y_i) \\to (u_i,v_i), (i=1,2,3)$ /* ui = c00*xi + c01*yi + c02 * vi = c10*xi + c11*yi + c12 * * Coefficients are calculated by solving linear system: * / x0 y0 1 0 0 0 \\ /c00\\ /u0\\ * | x1 y1 1 0 0 0 | |c01| |u1| * | x2 y2 1 0 0 0 | |c02| |u2| * | 0 0 0 x0 y0 1 | |c10| |v0| * | 0 0 0 x1 y1 1 | |c11| |v1| * \\ 0 0 0 x2 y2 1 / |c12| |v2| * * where: * cij - matrix coefficients */ [\u5b8c\u6574\u6e90\u7801]https://gist.github.com/seaside2mm/b5f0c383e9bb19fca11b35b03f5bf6c9","title":"OpenCV\u6e90\u7801\u5206\u6790"},{"location":"content/cv/5-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#python","text":"\u524d\u9762\u8bb2\u5b8c\u4e86\u4eff\u5c04\u53d8\u6362\u548c\u53cc\u7ebf\u6027\u63d2\u503c\uff0c\u6211\u4eec\u6574\u7406\u4e00\u4e0b\uff1a \u4eff\u5c04\u53d8\u6362\u662f\u6211\u4eec\u7684\u76ee\u7684\uff0c\u53cc\u7ebf\u6027\u63d2\u503c\u662f\u5e2e\u52a9\u6211\u4eec\u5728\u56fe\u50cf\u4e0a\u5b9e\u73b0\u4eff\u5c04\u53d8\u6362\u3002 \u5728\u5199\u4ee3\u7801\u524d\uff0c\u7406\u4e00\u4e0b\u5728\u56fe\u7247\u4e0a\u505a\u4eff\u5c04\u53d8\u6362\u7684\u601d\u8def\uff0c\u901a\u5e38\u5206\u4e3a3\u4e2a\u6b65\u9aa4\uff1a \u9996\u5148\uff0c\u521b\u5efa\u91c7\u6837\u7f51\u683c(sampling grid)\u3002\u7f51\u683c\u548c\u8f93\u5165\u7279\u5f81\u6620\u5c04\u76f8\u540c\u7a7a\u95f4\u5927\u5c0f\u7684\u68cb\u76d8\u7f51\u683c(\u6807\u6ce8\u5404\u4e2a\u5750\u6807\u70b9\uff0c\u7528\u4e8e\u5b58\u50a8\u4eff\u5c04\u53d8\u6362\u540e\u7684\u5750\u6807\u70b9) \u5176\u6b21\uff0c\u5c06\u4eff\u5c04\u8f6c\u6362\u5e94\u7528\u4e8e\u4e0a\u6b65\u751f\u6210\u7684sampling grid\uff0c\u5f97\u5230\u5b9e\u9645\u7684\u91c7\u6837\u5750\u6807 \u6700\u540e\uff0c\u4f7f\u7528\u53cc\u7ebf\u6027\u63d2\u503c\u6280\u672f\u4ece\u539f\u59cb\u56fe\u7247\u4e0a\u6309\u7167\u5b9e\u9645\u91c7\u6837\u5750\u6807\u91c7\u6837\u5f97\u5230\u6700\u7ec8\u7ed3\u679c \u5b8c\u6574\u6848\u4f8b\u4ee3\u7801","title":"python\u6848\u4f8b\u5b9e\u73b0"},{"location":"content/cv/5-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#_3","text":"\u5982\u679c\u7269\u4f53\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u53d1\u751f\u65cb\u8f6c\uff0c\u8fd9\u79cd\u53d8\u6362\u901a\u5e38\u6210\u4e3a\u6295\u5f71\u53d8\u6362\u3002\u7531\u4e8e\u53ef\u80fd\u51fa\u73b0\u9634\u5f71\u6216\u8005\u906e\u6321\uff0c\u6240\u4ee5\u6295\u5f71\u53d8\u6362\u5f88\u96be\u4fee\u6b63\u3002\u4f46\u662f\u5982\u679c\u7269\u4f53\u662f\u5e73\u9762\u7684\uff0c\u90a3\u4e48\u5f88\u5bb9\u6613\u901a\u8fc7\u4e8c\u7ef4\u6295\u5f71\u53d8\u6362\u5bf9\u6b64\u7269\u4f53\u4e09\u7ef4\u53d8\u6362\u8fdb\u884c\u6a21\u578b\u5316\uff0c\u8fd9\u5c31\u662f\u4e13\u7528\u7684\u4e8c\u7ef4\u6295\u5f71\u53d8\u6362\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u8868\u8ff0\uff1a $$ \\begin{pmatrix} \\tilde x \\ \\tilde y \\ 1 \\end{pmatrix} = \\begin{pmatrix} a11 & a12 &a13\\ a21 &a22 & a23 \\a31 & a32 & a33 \\end{pmatrix} \\begin{pmatrix} x \\ y \\ 1 \\end{pmatrix} $$","title":"\u6295\u5f71\u53d8\u6362"},{"location":"content/cv/5-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#_4","text":"getPerspectiveTransform\u3002 warpPerspective","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/5-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#c","text":"/*\u30b5\u30f3\u30d7\u30eb\u306e\u5c04\u5f71\u5909\u63db\u7528\u306e\u884c\u5217\u306f\u3001\u4ee5\u4e0b\u306e4\u70b9\u306e\u5ea7\u6a19\u5909\u63db\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 (0, 0)\u2192(0, 0) (640, 0)\u2192(580, 25) (0, 480)\u2192(0, 480) (640, 480)\u2192(600, 400) \u30d0\u30a4\u30ea\u30cb\u30a2\u88dc\u9593\u3092\u4f7f\u7528\u3057\u3001\u7aef\u306f\u51e6\u7406\u3057\u3066\u3044\u307e\u305b\u3093\u3002*/ void homography(unsigned char *out, unsigned char *in, int inHeight, int inWidth, int inChannel, double *ht){ int i, j; int index; double tmp, tmpX, tmpY; int floorX, floorY; int inX, inY; int widthStep; widthStep = inWidth * inChannel; if(widthStep % 4 != 0){ widthStep = widthStep + 4 - widthStep % 4; } for(i = 0; i < inHeight; ++i){ for(j = 0; j < inWidth; ++j){ tmp = j * ht[6] + i * ht[7] + 1.0; tmpX = (j * ht[0] + i * ht[1] + ht[2]) / tmp; tmpY = (j * ht[3] + i * ht[4] + ht[5]) / tmp; floorX = (int)tmpX; floorY = (int)tmpY; if(tmpX > 1 && tmpX < (inWidth - 1) && tmpY > 1 && tmpY < (inHeight - 1)){ // \u5de6\u4e0a + \u53f3\u4e0a + \u5de6\u4e0b + \u53f3\u4e0b index = i * widthStep + j; out[index] = (floorX + 1.0 - tmpX) * (floorY + 1.0 - tmpY) * (double)in[floorY * widthStep + floorX] + (tmpX - floorX) * (floorY + 1.0 - tmpY) * (double)in[floorY * widthStep + (floorX + 1)] + (floorX + 1.0 - tmpX) * (tmpY - floorY) * (double)in[(floorY + 1) * widthStep + floorX] + (tmpX - floorX) * (tmpY - floorY) * (double)in[(floorY + 1) * widthStep + floorX + 1]; } } } }","title":"c\u8bed\u8a00\u5b9e\u73b0"},{"location":"content/cv/5-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#_5","text":"\u901a\u5e38\u901a\u8fc7\u6781\u5750\u6807\u53d8\u5316\u6821\u6b63\u56fe\u50cf\u4e2d\u7684\u5706\u5f62\u7269\u4f53\u6216\u5305\u542b\u5728\u5706\u73af\u4e2d\u7684\u7269\u4f53\u3002","title":"\u6781\u5750\u6807\u53d8\u6362\u3002"},{"location":"content/cv/5-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#_6","text":"\u81ea\u52a8\u88c1\u526a\u56fe\u50cf\u5e76\u53d8\u6362\u89c6\u56fe\u3002 void NearestNeighbor(unsigned char *out, unsigned char *in, int inHeight, int inWidth, int inChannel, double mag){ int height; int width; int outStep; int inStep; int i, j; height = (int)((double)inHeight * mag); width = (int)((double)inWidth * mag); // OpenCV\u3067\u4f7f\u7528\u3059\u308b\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u6a2a\u5e45\u306f4\u30d0\u30a4\u30c8\u533a\u5207\u308a\u306e\u305f\u3081\u8abf\u6574 inStep = inWidth * inChannel; if( (inStep % 4) != 0){ inStep = inStep + (4 - inStep %4); } outStep = width * inChannel; if( (outStep % 4) != 0){ outStep = outStep + (4 - outStep %4); } // \u30eb\u30fc\u30d7\u4e2d\u306bif\u6587\u3092\u66f8\u304f\u3068\u9045\u3044\u305f\u3081\u30eb\u30fc\u30d7\u524d\u306b\u30d3\u30c3\u30c8\u6570\u306e\u6761\u4ef6\u5206\u5c90 switch(inChannel){ case 1: // 8bit\u753b\u50cf for(i = 0; i < height; ++i){ for(j = 0; j < width; ++j){ out[i * outStep + j] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag)]; } } break; case 3: // 24bit\u753b\u50cf for(i = 0; i < height; ++i){ for(j = 0; j < width; ++j){ out[i * outStep + j * 3] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 3]; out[i * outStep + j * 3 + 1] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 3 + 1]; out[i * outStep + j * 3 + 2] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 3 + 2]; } } break; case 4: // 32bit\u753b\u50cf for(i = 0; i < height; ++i){ for(j = 0; j < width; ++j){ out[i * outStep + j * 4] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 4]; out[i * outStep + j * 4 + 1] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 4 + 1]; out[i * outStep + j * 4 + 2] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 4 + 2]; out[i * outStep + j * 4 + 3] = in[(int)((double)i/mag) * inStep + (int)((double)j/mag) * 4 + 3]; } } break; default: break; } } /* in : \u6a2a\u306f4\u30d0\u30a4\u30c8 */ void Bilinear(unsigned char *out, unsigned char *in, int inHeight, int inWidth, int inChannel, double mag){ int height; int width; int outStep; int inStep; int i, j; double inX, inY; height = (int)((double)inHeight * mag); width = (int)((double)inWidth * mag); // OpenCV\u3067\u4f7f\u7528\u3059\u308b\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u6a2a\u5e45\u306f4\u30d0\u30a4\u30c8\u533a\u5207\u308a\u306e\u305f\u3081\u8abf\u6574 inStep = inWidth * inChannel; if( (inStep % 4) != 0){ inStep = inStep + (4 - inStep %4); } outStep = width * inChannel; if( (outStep % 4) != 0){ outStep = outStep + (4 - outStep %4); } // \u30eb\u30fc\u30d7\u4e2d\u306bif\u6587\u3092\u66f8\u304f\u3068\u9045\u3044\u305f\u3081\u30eb\u30fc\u30d7\u524d\u306b\u30d3\u30c3\u30c8\u6570\u306e\u6761\u4ef6\u5206\u5c90 switch(inChannel){ case 1: // 8bit\u753b\u50cf for(i = 0; i < height; ++i){ inY = (double)i / mag; // \u5165\u529b\u753b\u50cf\u306e\u9ad8\u3055\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b if((int)inY >= inHeight){ --inY; } for(j = 0; j < width; ++j){ // \u5165\u529b\u753b\u50cf\u306e\u5e45\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b inX = (double)j / mag; if((int)inX >= inWidth){ --inX; } out[i * outStep + j] = (unsigned char)(((int)inX + 1 - inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + (int)inX] + (inX - (int)inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + (int)inX + 1] + ((int)inX + 1 - inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + (int)inX] + (inX - (int)inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + (int)inX + 1]); } } break; case 3: // 24bit\u753b\u50cf for(i = 0; i < height; ++i){ inY = (double)i / mag; // \u5165\u529b\u753b\u50cf\u306e\u9ad8\u3055\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b if((int)inY >= inHeight){ --inY; } for(j = 0; j < width; ++j){ // \u5165\u529b\u753b\u50cf\u306e\u5e45\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b inX = (double)j / mag; if((int)inX >= inWidth){ --inX; } out[i * outStep + j * 3] = (unsigned char)(((int)inX + 1 - inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + (int)inX * 3] + (inX - (int)inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + ((int)inX + 1) * 3] + ((int)inX + 1 - inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + (int)inX * 3] + (inX - (int)inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + ((int)inX + 1) * 3]); out[i * outStep + j * 3 + 1] = (unsigned char)(((int)inX + 1 - inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + (int)inX * 3 + 1] + (inX - (int)inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + ((int)inX + 1) * 3 + 1] + ((int)inX + 1 - inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + (int)inX * 3 + 1] + (inX - (int)inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + ((int)inX + 1) * 3 + 1]); out[i * outStep + j * 3 + 2] = (unsigned char)(((int)inX + 1 - inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + (int)inX * 3 + 2] + (inX - (int)inX) * ((int)inY + 1 - inY) * (double)in[(int)inY * inStep + ((int)inX + 1) * 3 + 2] + ((int)inX + 1 - inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + (int)inX * 3 + 2] + (inX - (int)inX) * (inY - (int)inY) * (double)in[((int)inY + 1) * inStep + ((int)inX + 1) * 3 + 2]); } } break; case 4: // 32bit\u753b\u50cf break; default: break; } } /*\u30d0\u30a4\u30ad\u30e5\u30fc\u30d3\u30c3\u30af \u30d0\u30a4\u30ad\u30e5\u30fc\u30d3\u30c3\u30af\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 \u753b\u50cf\u306e\u7aef\u306e\u51e6\u7406\u306f\u672a\u5b9f\u88c5\u3067\u3059\u3002 \u901f\u5ea6\u3001\u7c21\u6f54\u3055\u306a\u3069\u5ea6\u5916\u8996\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u5b9f\u88c5\u3057\u305f\u7248\u3067\u3059\u3002*/ #define KEISU_A -1.0 double calcH(double inValue, double aValue){ double tmpValue = abs(inValue); double outValue; if(tmpValue <= 1){ outValue = (aValue + 2.0) * tmpValue * tmpValue * tmpValue - (aValue + 3.0) * tmpValue * tmpValue + 1.0; } else if(tmpValue <= 2){ outValue = aValue * tmpValue * tmpValue * tmpValue - 5 * aValue * tmpValue * tmpValue + 8.0 * aValue * tmpValue - 4.0 * aValue; } else { outValue = 0.0; } return outValue; } double calcH(double inValue){ double outValue = calcH(inValue, -1.0); return outValue; } /* in : \u6a2a\u306f4\u30d0\u30a4\u30c8 */ void Bicubic(unsigned char *out, unsigned char *in, int inHeight, int inWidth, int inChannel, double mag){ int height; int width; int outStep; int inStep; int i, j; double inX, inY; double inXa[4], inYa[4]; double hx[4], hy[4]; int indexY[4]; int indexX[4]; double tmp; height = (int)((double)inHeight * mag); width = (int)((double)inWidth * mag); // OpenCV\u3067\u4f7f\u7528\u3059\u308b\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u6a2a\u5e45\u306f4\u30d0\u30a4\u30c8\u533a\u5207\u308a\u306e\u305f\u3081\u8abf\u6574 inStep = inWidth * inChannel; if( (inStep % 4) != 0){ inStep = inStep + (4 - inStep %4); } outStep = width * inChannel; if( (outStep % 4) != 0){ outStep = outStep + (4 - outStep %4); } // \u30eb\u30fc\u30d7\u4e2d\u306bif\u6587\u3092\u66f8\u304f\u3068\u9045\u3044\u305f\u3081\u30eb\u30fc\u30d7\u524d\u306b\u30d3\u30c3\u30c8\u6570\u306e\u6761\u4ef6\u5206\u5c90 switch(inChannel){ case 1: // 8bit\u753b\u50cf for(i = 0; i < height; ++i){ inY = (double)i / mag; // \u5165\u529b\u753b\u50cf\u306e\u9ad8\u3055\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b if((int)inY >= inHeight - 1){ --inY; } inYa[0] = 1 + inY - (int)inY; inYa[1] = inY - (int)inY; inYa[2] = (int)inY + 1 - inY; inYa[3] = (int)inY + 2 - inY; inYa[0] = calcH(inYa[0], KEISU_A); inYa[1] = calcH(inYa[1], KEISU_A); inYa[2] = calcH(inYa[2], KEISU_A); inYa[3] = calcH(inYa[3], KEISU_A); if(inYa[0] < 0 && inYa[0] > -0.001){ inYa[0] = 0.0; } if(inYa[1] < 0 && inYa[1] > -0.001){ inYa[1] = 0.0; } if(inYa[2] < 0 && inYa[2] > -0.001){ inYa[2] = 0.0; } if(inYa[3] < 0 && inYa[3] > -0.001){ inYa[3] = 0.0; } if(inYa[0] > 1.0){ inYa[0] = 1.0; } if(inYa[1] > 1.0){ inYa[1] = 1.0; } if(inYa[2] > 1.0){ inYa[2] = 1.0; } if(inYa[3] > 1.0){ inYa[3] = 1.0; } if(inY >= 1.0){ indexY[0] = ((int)inY - 1) * inStep; } else { indexY[0] = (int)inY * inStep; } indexY[1] = (int)inY * inStep; indexY[2] = ((int)inY + 1) * inStep; indexY[3] = ((int)inY + 2) * inStep; for(j = 0; j < width; ++j){ // \u5165\u529b\u753b\u50cf\u306e\u5e45\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b inX = (double)j / mag; if((int)inX >= inWidth - 1){ --inX; } inXa[0] = 1 + inX - (int)inX; inXa[1] = inX - (int)inX; inXa[2] = (int)inX + 1 - inX; inXa[3] = (int)inX + 2 - inX; inXa[0] = calcH(inXa[0], KEISU_A); inXa[1] = calcH(inXa[1], KEISU_A); inXa[2] = calcH(inXa[2], KEISU_A); inXa[3] = calcH(inXa[3], KEISU_A); if(inXa[0] < 0 && inXa[0] > -0.001){ inXa[0] = 0.0; } if(inXa[1] < 0 && inXa[1] > -0.001){ inXa[1] = 0.0; } if(inXa[2] < 0 && inXa[2] > -0.001){ inXa[2] = 0.0; } if(inXa[3] < 0 && inXa[3] > -0.001){ inXa[3] = 0.0; } if(inXa[0] > 1.0){ inXa[0] = 1.0; } if(inXa[1] > 1.0){ inXa[1] = 1.0; } if(inXa[2] > 1.0){ inXa[2] = 1.0; } if(inXa[3] > 1.0){ inXa[3] = 1.0; } if(inX >= 1.0){ indexX[0] = (int)(inX - 1) * inChannel; } else { indexX[0] = (int)inX * inChannel; } indexX[1] = (int)inX * inChannel; indexX[2] = (int)(inX + 1) * inChannel; indexX[3] = (int)(inX + 2) * inChannel; tmp = (inYa[0] * (inXa[0] * in[indexY[0] + indexX[0]] + inXa[1] * in[indexY[0] +indexX[1]] + inXa[2] * in[indexY[0] +indexX[2]] + inXa[3] * in[indexY[0] +indexX[3]]) + inYa[1] * (inXa[0] * in[indexY[1] + indexX[0]] + inXa[1] * in[indexY[1] +indexX[1]] + inXa[2] * in[indexY[1] +indexX[2]] + inXa[3] * in[indexY[1] +indexX[3]]) + inYa[2] * (inXa[0] * in[indexY[2] + indexX[0]] + inXa[1] * in[indexY[2] +indexX[1]] + inXa[2] * in[indexY[2] +indexX[2]] + inXa[3] * in[indexY[2] +indexX[3]]) + inYa[3] * (inXa[0] * in[indexY[3] + indexX[0]] + inXa[1] * in[indexY[3] +indexX[1]] + inXa[2] * in[indexY[3] +indexX[2]] + inXa[3] * in[indexY[3] +indexX[3]])); if(tmp > 255.0){ tmp = 255; } else if(tmp < 0.0){ tmp = 0; } out[i * outStep + j] = tmp; } } break; case 3: break; case 4: // 32bit\u753b\u50cf break; default: break; } }","title":"\u9879\u76ee"},{"location":"content/cv/agwn/","text":"\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0 \u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0(Additive white Gaussian noise\uff0cAWGN)\u5728\u901a\u4fe1\u9886\u57df\u4e2d\u6307\u7684\u662f\u4e00\u79cd\u529f\u7387\u8c31\u51fd\u6570\u662f\u5e38\u6570(\u5373\u767d\u566a\u58f0), \u4e14\u5e45\u5ea6\u670d\u4ece \u9ad8\u65af\u5206\u5e03 \u7684\u566a\u58f0\u4fe1\u53f7. \u8fd9\u7c7b\u566a\u58f0\u901a\u5e38\u6765\u81ea\u611f\u5149\u5143\u4ef6, \u4e14\u65e0\u6cd5\u907f\u514d. \u52a0\u566a numpy \u4e2d\u4f7f\u7528 numpy.random.normal() \u51fd\u6570\u751f\u6210\u6b63\u6001\u5206\u5e03\u6570\u636e. import numpy as np import matplotlib.pyplot as plt # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u6b63\u6001\u5206\u5e03\u6570\u636e data = np.random.normal(0, 64, 1024 * 8) # \u5728 plt \u4e2d\u753b\u51fa\u76f4\u65b9\u56fe plt.hist(data, 256, normed=1) plt.show() \u4e3a\u56fe\u50cf\u6dfb\u52a0\u9ad8\u65af\u767d\u566a\u58f0. \u6ce8\u610f\u5230\u6dfb\u52a0\u5b8c\u566a\u58f0\u7684\u56fe\u50cf, \u50cf\u7d20\u503c\u53ef\u80fd\u4f4e\u4e8e 0 \u6216\u9ad8\u4e8e 255, \u6b64\u65f6\u5e94\u8be5\u5bf9\u8f6c\u6362\u540e\u7684\u56fe\u50cf\u505a\u4e00\u6b21\u5bf9\u6bd4\u62c9\u4f38. import PIL.Image import scipy.misc import numpy as np def convert_2d(r): # \u6dfb\u52a0\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0 s = r + np.random.normal(0, 64, r.shape) if np.min(s) >= 0 and np.max(s) <= 255: return s # \u5bf9\u6bd4\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u52a0\u566a\u540e\u7684\u56fe\u50cf \u53bb\u566a \u8003\u8651\u4e00\u5e45\u5c06\u566a\u58f0 $\\eta(x, y)$ \u52a0\u5165\u5230\u539f\u59cb\u56fe\u50cf $f(x, y)$ \u5f62\u6210\u7684\u5e26\u6709\u566a\u58f0\u7684\u56fe\u50cf $g(x, y)$, \u5373: $$ g(x, y) = f(x, y) + \\eta(x, y) $$ \u8fd9\u91cc\u5047\u8bbe\u6bcf\u4e2a\u5750\u6807\u70b9 $(x, y)$ \u4e0a\u7684\u566a\u58f0\u90fd\u4e0d\u76f8\u5173\u4e14\u5747\u503c\u4e3a 0. \u6211\u4eec\u5904\u7406\u7684\u76ee\u6807\u5c31\u662f\u901a\u8fc7\u4eba\u4e3a\u52a0\u5165\u4e00\u7cfb\u5217\u566a\u58f0\u56fe\u50cf $g_i(x, y)$ \u6765\u51cf\u5c11\u566a\u58f0.\u5982\u679c\u5bf9 K \u5e45\u5e26\u6709\u4e0d\u540c\u566a\u58f0\u7684\u56fe\u50cf\u53d6\u5e73\u5747\u503c, \u5373 $$ \\bar g(x, y) = \\frac{1}{K}\\sum_{i=1}^Kg_i(x, y) = f(x, y) + \\frac{1}{K}\\sum_{i=1}^K\\eta_i(x, y) $$ \u5f53 K \u8db3\u591f\u5927\u65f6, $\\frac{1}{K}\\sum_{i=1}^K\\eta_i(x, y)$ \u8d8b\u5411\u4e8e 0, \u56e0\u6b64 $$ \\bar g(x, y) = f(x, y) $$ \u4e0b\u9762\u5c1d\u8bd5\u5bf9\u4e0a\u8ff0\u56fe\u7247\u53d6 K=128 \u8fdb\u884c\u53bb\u566a import PIL.Image import scipy.misc import numpy as np def convert_2d(r): # \u6dfb\u52a0\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0 s = r + np.random.normal(0, 64, r.shape) if np.min(s) >= 0 and np.max(s) <= 255: return s # \u5bf9\u6bd4\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) k = 128 im_converted_mat = np.zeros(im_mat.shape) for i in range(k): im_converted_mat += convert_3d(im_mat) im_converted_mat = im_converted_mat / k im_converted_mat = im_converted_mat - np.full(im_converted_mat.shape, np.min(im_converted_mat)) im_converted_mat = im_converted_mat * 255 / np.max(im_converted_mat) im_converted_mat = im_converted_mat.astype(np.uint8) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u53bb\u566a\u540e\u7684\u56fe\u50cf \u53ef\u4ee5\u770b\u5230\u53bb\u566a\u540e\u7684\u56fe\u50cf\u5df2\u7ecf\u5341\u5206\u63a5\u8fd1\u539f\u59cb\u56fe\u50cf\u4e86. \u8bfb\u8005\u53ef\u4ee5\u81ea\u7531\u9009\u53d6 K=4, K=16 \u7b49\u4e0d\u540c\u503c\u67e5\u770b\u53bb\u566a\u6548\u679c.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0\u4e0e\u53bb\u566a"},{"location":"content/cv/agwn/#_1","text":"\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0(Additive white Gaussian noise\uff0cAWGN)\u5728\u901a\u4fe1\u9886\u57df\u4e2d\u6307\u7684\u662f\u4e00\u79cd\u529f\u7387\u8c31\u51fd\u6570\u662f\u5e38\u6570(\u5373\u767d\u566a\u58f0), \u4e14\u5e45\u5ea6\u670d\u4ece \u9ad8\u65af\u5206\u5e03 \u7684\u566a\u58f0\u4fe1\u53f7. \u8fd9\u7c7b\u566a\u58f0\u901a\u5e38\u6765\u81ea\u611f\u5149\u5143\u4ef6, \u4e14\u65e0\u6cd5\u907f\u514d.","title":"\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0"},{"location":"content/cv/agwn/#_2","text":"numpy \u4e2d\u4f7f\u7528 numpy.random.normal() \u51fd\u6570\u751f\u6210\u6b63\u6001\u5206\u5e03\u6570\u636e. import numpy as np import matplotlib.pyplot as plt # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u6b63\u6001\u5206\u5e03\u6570\u636e data = np.random.normal(0, 64, 1024 * 8) # \u5728 plt \u4e2d\u753b\u51fa\u76f4\u65b9\u56fe plt.hist(data, 256, normed=1) plt.show() \u4e3a\u56fe\u50cf\u6dfb\u52a0\u9ad8\u65af\u767d\u566a\u58f0. \u6ce8\u610f\u5230\u6dfb\u52a0\u5b8c\u566a\u58f0\u7684\u56fe\u50cf, \u50cf\u7d20\u503c\u53ef\u80fd\u4f4e\u4e8e 0 \u6216\u9ad8\u4e8e 255, \u6b64\u65f6\u5e94\u8be5\u5bf9\u8f6c\u6362\u540e\u7684\u56fe\u50cf\u505a\u4e00\u6b21\u5bf9\u6bd4\u62c9\u4f38. import PIL.Image import scipy.misc import numpy as np def convert_2d(r): # \u6dfb\u52a0\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0 s = r + np.random.normal(0, 64, r.shape) if np.min(s) >= 0 and np.max(s) <= 255: return s # \u5bf9\u6bd4\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u52a0\u566a\u540e\u7684\u56fe\u50cf","title":"\u52a0\u566a"},{"location":"content/cv/agwn/#_3","text":"\u8003\u8651\u4e00\u5e45\u5c06\u566a\u58f0 $\\eta(x, y)$ \u52a0\u5165\u5230\u539f\u59cb\u56fe\u50cf $f(x, y)$ \u5f62\u6210\u7684\u5e26\u6709\u566a\u58f0\u7684\u56fe\u50cf $g(x, y)$, \u5373: $$ g(x, y) = f(x, y) + \\eta(x, y) $$ \u8fd9\u91cc\u5047\u8bbe\u6bcf\u4e2a\u5750\u6807\u70b9 $(x, y)$ \u4e0a\u7684\u566a\u58f0\u90fd\u4e0d\u76f8\u5173\u4e14\u5747\u503c\u4e3a 0. \u6211\u4eec\u5904\u7406\u7684\u76ee\u6807\u5c31\u662f\u901a\u8fc7\u4eba\u4e3a\u52a0\u5165\u4e00\u7cfb\u5217\u566a\u58f0\u56fe\u50cf $g_i(x, y)$ \u6765\u51cf\u5c11\u566a\u58f0.\u5982\u679c\u5bf9 K \u5e45\u5e26\u6709\u4e0d\u540c\u566a\u58f0\u7684\u56fe\u50cf\u53d6\u5e73\u5747\u503c, \u5373 $$ \\bar g(x, y) = \\frac{1}{K}\\sum_{i=1}^Kg_i(x, y) = f(x, y) + \\frac{1}{K}\\sum_{i=1}^K\\eta_i(x, y) $$ \u5f53 K \u8db3\u591f\u5927\u65f6, $\\frac{1}{K}\\sum_{i=1}^K\\eta_i(x, y)$ \u8d8b\u5411\u4e8e 0, \u56e0\u6b64 $$ \\bar g(x, y) = f(x, y) $$ \u4e0b\u9762\u5c1d\u8bd5\u5bf9\u4e0a\u8ff0\u56fe\u7247\u53d6 K=128 \u8fdb\u884c\u53bb\u566a import PIL.Image import scipy.misc import numpy as np def convert_2d(r): # \u6dfb\u52a0\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0 s = r + np.random.normal(0, 64, r.shape) if np.min(s) >= 0 and np.max(s) <= 255: return s # \u5bf9\u6bd4\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) k = 128 im_converted_mat = np.zeros(im_mat.shape) for i in range(k): im_converted_mat += convert_3d(im_mat) im_converted_mat = im_converted_mat / k im_converted_mat = im_converted_mat - np.full(im_converted_mat.shape, np.min(im_converted_mat)) im_converted_mat = im_converted_mat * 255 / np.max(im_converted_mat) im_converted_mat = im_converted_mat.astype(np.uint8) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u53bb\u566a\u540e\u7684\u56fe\u50cf \u53ef\u4ee5\u770b\u5230\u53bb\u566a\u540e\u7684\u56fe\u50cf\u5df2\u7ecf\u5341\u5206\u63a5\u8fd1\u539f\u59cb\u56fe\u50cf\u4e86. \u8bfb\u8005\u53ef\u4ee5\u81ea\u7531\u9009\u53d6 K=4, K=16 \u7b49\u4e0d\u540c\u503c\u67e5\u770b\u53bb\u566a\u6548\u679c.","title":"\u53bb\u566a"},{"location":"content/cv/ascii/","text":"\u6548\u679c\u5c55\u793a \u6539\u53d8\u8272\u5f69\u6a21\u5f0f\u81f3\u7070\u5ea6\u56fe \u5b57\u7b26\u753b\u7684\u7b2c\u4e00\u6b65\u662f\u5c06\u5f69\u8272\u56fe\u7247\u8f6c\u53d8\u4e3a\u7070\u5ea6\u56fe. \u5bf9\u4e8e\u5f69\u8272\u8f6c\u7070\u5ea6\u56fe, \u6709\u4e00\u4e2a\u8457\u540d\u516c\u5f0f ITU-R 601-2 luma. \u56e0\u4e3a\u4eba\u773c\u5bf9 RGB \u989c\u8272\u7684\u611f\u77e5\u5e76\u4e0d\u76f8\u540c, \u6240\u4ee5\u8f6c\u6362\u7684\u65f6\u5019\u9700\u8981\u7ed9\u4e88\u4e0d\u540c\u7684\u6743\u91cd: L = R * 299/1000 + G * 587/1000 + B * 114/1000 \u5728 PIL \u4e2d, \u4f7f\u7528 .convert('F') \u5c06\u4efb\u610f\u56fe\u50cf\u8f6c\u6362\u4e3a 256 \u9636\u7070\u5ea6\u56fe. import PIL.Image im = PIL.Image.open('/img/jp.jpg') im = im.convert('F') \u56fe\u50cf\u5747\u503c \u56fe\u50cf\u5747\u503c\u5373\u56fe\u50cf\u7684\u4e3b\u9898\u8272. \u5728 PIL \u4e2d, \u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u83b7\u53d6\u56fe\u50cf\u5747\u503c: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean print(mean) # [98.61, 97.29, 100.91, 255.0], \u6bcf\u4e00\u9879\u5206\u522b\u4ee3\u8868 RGBA \u5b57\u7b26\u4ecb\u7ecd \u5b57\u7b26\u5360\u7a7a\u6bd4 : \u5728\u5355\u4e2a\u5b57\u7b26\u7684\u663e\u793a\u8303\u56f4\u5185, \u586b\u5145\u50cf\u7d20\u70b9\u7684\u4e2a\u6570\u4e0e\u603b\u50cf\u7d20\u70b9\u7684\u6bd4\u503c. \u8fd9\u91cc\u4f7f\u7528 # , = , - , \u7a7a\u683c \u56db\u4e2a\u5360\u7a7a\u6bd4\u9010\u6b65\u4e0b\u964d\u7684 ASCII \u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u753b\u7684\u57fa\u7840\u5143\u7d20. \u540c\u65f6\u7ea6\u5b9a\u7070\u5ea6\u9ad8\u4e8e\u5747\u503c\u7684\u50cf\u7d20\u70b9\u91c7\u7528 # \u4e0e = , \u7070\u5ea6\u4f4e\u4e8e\u5747\u503c\u7684\u50cf\u7d20\u70b9\u91c7\u7528 - , \u7a7a\u683c . \u5b57\u7b26\u5bbd\u9ad8\u6bd4 : 14 \u53f7\u5b57\u4f53\u5927\u5c0f\u7684\u5bbd\u9ad8\u6bd4\u4e3a 8:14. \u56e0\u6b64\u5047\u8bbe\u9700\u8981\u5c06 100x100 \u7684\u56fe\u7247\u8f6c\u6362\u4e3a\u7531 14 \u53f7\u5b57\u4f53\u5927\u5c0f\u7684 # , = , - , \u7a7a\u683c \u6784\u6210\u7684\u5b57\u7b26\u753b, \u5219\u9700\u8981\u4f7f\u7528 100x100 \u4e2a\u5b57\u7b26\u586b\u5145\u81f3\u5927\u5c0f\u4e3a 800x1400 \u7684\u753b\u5e03\u4e0a. \u5728\u753b\u5377\u4e0a\u5199\u4e00\u9996\u8bd7 \u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u65b0\u5efa\u4e00\u526f\u56fe\u50cf, \u5e76\u5728\u56fe\u50cf\u4e0a\u4e66\u5199\u540d\u8bd7\u4f5c \"The Zen of Python\" import PIL.Image import PIL.ImageDraw import PIL.ImageFont zen = \"\"\"The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!\"\"\" font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.new('RGB', (552, 294), '#FFFFFF') dr = PIL.ImageDraw.Draw(im) dr.text((0, 0), zen, '#000000', font) im.show() \u6700\u7ec8\u80fd\u5f97\u5230\u5982\u4e0b\u4e00\u526f\u767d\u5e95\u9ed1\u5b57\u7684\u56fe\u7247 \u5408\u5e76\u4ee3\u7801 \u5bf9\u4e0a\u8ff0\u6280\u5de7\u7684\u7b80\u5355\u7ec4\u5408, \u5f88\u5bb9\u6613\u4fbf\u80fd\u5f97\u5230\u5982\u4e0b\u5b57\u7b26\u753b\u751f\u6210\u65b9\u6848, \u8fd0\u884c\u4e0b\u9762\u7684\u7a0b\u5e8f\u4f1a\u6253\u5f00\u4e00\u4e2a\u56fe\u7247\u9884\u89c8\u7a97\u53e3\u663e\u793a\u751f\u6210\u7684\u5b57\u7b26\u753b\u56fe\u50cf import PIL.Image import PIL.ImageDraw import PIL.ImageFont import PIL.ImageStat font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.open('/img/jp.jpg') im = im.convert('F') size = im.size rx = im.size[0] ry = int(rx / size[0] * size[1] * 8 / 14) im = im.resize((rx, ry), PIL.Image.NEAREST) mean = PIL.ImageStat.Stat(im).mean[0] words = [] for y in range(im.size[1]): for x in range(im.size[0]): p = im.getpixel((x, y)) if p < mean / 2: c = '#' elif mean / 2 <= p < mean: c = '=' elif mean <= p < mean + (255 - mean) / 2: c = '-' elif mean + (255 - mean) / 2 <= p: c = ' ' else: raise ValueError(p) words.append(c) words.append('\\n') im.close() im = PIL.Image.new('RGB', (im.size[0] * 8, im.size[1] * 14), '#FFFFFF') dr = PIL.ImageDraw.Draw(im) dr.text((0, 0), ''.join(words), '#000000', font) im = im.resize(size, PIL.Image.LANCZOS) im.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u5b57\u7b26\u753b"},{"location":"content/cv/ascii/#_1","text":"","title":"\u6548\u679c\u5c55\u793a"},{"location":"content/cv/ascii/#_2","text":"\u5b57\u7b26\u753b\u7684\u7b2c\u4e00\u6b65\u662f\u5c06\u5f69\u8272\u56fe\u7247\u8f6c\u53d8\u4e3a\u7070\u5ea6\u56fe. \u5bf9\u4e8e\u5f69\u8272\u8f6c\u7070\u5ea6\u56fe, \u6709\u4e00\u4e2a\u8457\u540d\u516c\u5f0f ITU-R 601-2 luma. \u56e0\u4e3a\u4eba\u773c\u5bf9 RGB \u989c\u8272\u7684\u611f\u77e5\u5e76\u4e0d\u76f8\u540c, \u6240\u4ee5\u8f6c\u6362\u7684\u65f6\u5019\u9700\u8981\u7ed9\u4e88\u4e0d\u540c\u7684\u6743\u91cd: L = R * 299/1000 + G * 587/1000 + B * 114/1000 \u5728 PIL \u4e2d, \u4f7f\u7528 .convert('F') \u5c06\u4efb\u610f\u56fe\u50cf\u8f6c\u6362\u4e3a 256 \u9636\u7070\u5ea6\u56fe. import PIL.Image im = PIL.Image.open('/img/jp.jpg') im = im.convert('F')","title":"\u6539\u53d8\u8272\u5f69\u6a21\u5f0f\u81f3\u7070\u5ea6\u56fe"},{"location":"content/cv/ascii/#_3","text":"\u56fe\u50cf\u5747\u503c\u5373\u56fe\u50cf\u7684\u4e3b\u9898\u8272. \u5728 PIL \u4e2d, \u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u83b7\u53d6\u56fe\u50cf\u5747\u503c: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean print(mean) # [98.61, 97.29, 100.91, 255.0], \u6bcf\u4e00\u9879\u5206\u522b\u4ee3\u8868 RGBA","title":"\u56fe\u50cf\u5747\u503c"},{"location":"content/cv/ascii/#_4","text":"\u5b57\u7b26\u5360\u7a7a\u6bd4 : \u5728\u5355\u4e2a\u5b57\u7b26\u7684\u663e\u793a\u8303\u56f4\u5185, \u586b\u5145\u50cf\u7d20\u70b9\u7684\u4e2a\u6570\u4e0e\u603b\u50cf\u7d20\u70b9\u7684\u6bd4\u503c. \u8fd9\u91cc\u4f7f\u7528 # , = , - , \u7a7a\u683c \u56db\u4e2a\u5360\u7a7a\u6bd4\u9010\u6b65\u4e0b\u964d\u7684 ASCII \u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u753b\u7684\u57fa\u7840\u5143\u7d20. \u540c\u65f6\u7ea6\u5b9a\u7070\u5ea6\u9ad8\u4e8e\u5747\u503c\u7684\u50cf\u7d20\u70b9\u91c7\u7528 # \u4e0e = , \u7070\u5ea6\u4f4e\u4e8e\u5747\u503c\u7684\u50cf\u7d20\u70b9\u91c7\u7528 - , \u7a7a\u683c . \u5b57\u7b26\u5bbd\u9ad8\u6bd4 : 14 \u53f7\u5b57\u4f53\u5927\u5c0f\u7684\u5bbd\u9ad8\u6bd4\u4e3a 8:14. \u56e0\u6b64\u5047\u8bbe\u9700\u8981\u5c06 100x100 \u7684\u56fe\u7247\u8f6c\u6362\u4e3a\u7531 14 \u53f7\u5b57\u4f53\u5927\u5c0f\u7684 # , = , - , \u7a7a\u683c \u6784\u6210\u7684\u5b57\u7b26\u753b, \u5219\u9700\u8981\u4f7f\u7528 100x100 \u4e2a\u5b57\u7b26\u586b\u5145\u81f3\u5927\u5c0f\u4e3a 800x1400 \u7684\u753b\u5e03\u4e0a.","title":"\u5b57\u7b26\u4ecb\u7ecd"},{"location":"content/cv/ascii/#_5","text":"\u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u65b0\u5efa\u4e00\u526f\u56fe\u50cf, \u5e76\u5728\u56fe\u50cf\u4e0a\u4e66\u5199\u540d\u8bd7\u4f5c \"The Zen of Python\" import PIL.Image import PIL.ImageDraw import PIL.ImageFont zen = \"\"\"The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!\"\"\" font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.new('RGB', (552, 294), '#FFFFFF') dr = PIL.ImageDraw.Draw(im) dr.text((0, 0), zen, '#000000', font) im.show() \u6700\u7ec8\u80fd\u5f97\u5230\u5982\u4e0b\u4e00\u526f\u767d\u5e95\u9ed1\u5b57\u7684\u56fe\u7247","title":"\u5728\u753b\u5377\u4e0a\u5199\u4e00\u9996\u8bd7"},{"location":"content/cv/ascii/#_6","text":"\u5bf9\u4e0a\u8ff0\u6280\u5de7\u7684\u7b80\u5355\u7ec4\u5408, \u5f88\u5bb9\u6613\u4fbf\u80fd\u5f97\u5230\u5982\u4e0b\u5b57\u7b26\u753b\u751f\u6210\u65b9\u6848, \u8fd0\u884c\u4e0b\u9762\u7684\u7a0b\u5e8f\u4f1a\u6253\u5f00\u4e00\u4e2a\u56fe\u7247\u9884\u89c8\u7a97\u53e3\u663e\u793a\u751f\u6210\u7684\u5b57\u7b26\u753b\u56fe\u50cf import PIL.Image import PIL.ImageDraw import PIL.ImageFont import PIL.ImageStat font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.open('/img/jp.jpg') im = im.convert('F') size = im.size rx = im.size[0] ry = int(rx / size[0] * size[1] * 8 / 14) im = im.resize((rx, ry), PIL.Image.NEAREST) mean = PIL.ImageStat.Stat(im).mean[0] words = [] for y in range(im.size[1]): for x in range(im.size[0]): p = im.getpixel((x, y)) if p < mean / 2: c = '#' elif mean / 2 <= p < mean: c = '=' elif mean <= p < mean + (255 - mean) / 2: c = '-' elif mean + (255 - mean) / 2 <= p: c = ' ' else: raise ValueError(p) words.append(c) words.append('\\n') im.close() im = PIL.Image.new('RGB', (im.size[0] * 8, im.size[1] * 14), '#FFFFFF') dr = PIL.ImageDraw.Draw(im) dr.text((0, 0), ''.join(words), '#000000', font) im = im.resize(size, PIL.Image.LANCZOS) im.show()","title":"\u5408\u5e76\u4ee3\u7801"},{"location":"content/cv/bit/","text":"\u4f4d\u56fe\u5207\u5272 \u8bbe\u4e00\u5e45\u7070\u5ea6\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u90fd\u7531 8 \u6bd4\u7279\u8868\u793a, \u5219\u56fe\u50cf\u8f6c\u6362\u4e3a\u7531 8 \u5f20 1 \u6bd4\u7279\u5e73\u9762\u7ec4\u6210, \u5176\u8303\u56f4\u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u7684\u4f4d\u5e73\u9762 0 \u5230\u6700\u9ad8\u6709\u6548\u4f4d\u7684\u4f4d\u5e73\u9762 7. \u5728 8 \u6bd4\u7279\u5b57\u8282\u4e2d, \u5e73\u9762 0 \u5305\u542b\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u6700\u4f4e\u6709\u6548\u4f4d, \u800c\u5e73\u9762 7 \u5219\u5305\u542b\u6700\u9ad8\u6709\u6548\u4f4d. \u8f83\u9ad8\u9636\u4f4d(\u5c24\u5176\u662f\u524d 4 \u4f4d)\u5305\u542b\u4e86\u5927\u591a\u6570\u5728\u89c6\u89c9\u4e0a\u5f88\u91cd\u8981\u7684\u6570\u636e. \u4ee3\u7801\u5b9e\u73b0 import PIL.Image import scipy.misc import numpy as np flat = 7 def convert_2d(r): s = np.empty(r.shape, dtype=np.uint8) for j in range(r.shape[0]): for i in range(r.shape[1]): bits = bin(r[j][i])[2:].rjust(8, '0') fill = int(bits[-flat - 1]) s[j][i] = 255 if fill else 0 return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) im_conveted_mat = convert_2d(im_mat) im_conveted = PIL.Image.fromarray(im_conveted_mat) im_conveted.show() \u5b9e\u9a8c\u7ed3\u679c \u539f\u56fe \u7b2c 7 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 6 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 5 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 4 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 3 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 2 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 1 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 0 \u4e2a\u4f4d\u5e73\u9762","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u4f4d\u56fe\u5207\u5272"},{"location":"content/cv/bit/#_1","text":"\u8bbe\u4e00\u5e45\u7070\u5ea6\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u90fd\u7531 8 \u6bd4\u7279\u8868\u793a, \u5219\u56fe\u50cf\u8f6c\u6362\u4e3a\u7531 8 \u5f20 1 \u6bd4\u7279\u5e73\u9762\u7ec4\u6210, \u5176\u8303\u56f4\u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u7684\u4f4d\u5e73\u9762 0 \u5230\u6700\u9ad8\u6709\u6548\u4f4d\u7684\u4f4d\u5e73\u9762 7. \u5728 8 \u6bd4\u7279\u5b57\u8282\u4e2d, \u5e73\u9762 0 \u5305\u542b\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u6700\u4f4e\u6709\u6548\u4f4d, \u800c\u5e73\u9762 7 \u5219\u5305\u542b\u6700\u9ad8\u6709\u6548\u4f4d. \u8f83\u9ad8\u9636\u4f4d(\u5c24\u5176\u662f\u524d 4 \u4f4d)\u5305\u542b\u4e86\u5927\u591a\u6570\u5728\u89c6\u89c9\u4e0a\u5f88\u91cd\u8981\u7684\u6570\u636e.","title":"\u4f4d\u56fe\u5207\u5272"},{"location":"content/cv/bit/#_2","text":"import PIL.Image import scipy.misc import numpy as np flat = 7 def convert_2d(r): s = np.empty(r.shape, dtype=np.uint8) for j in range(r.shape[0]): for i in range(r.shape[1]): bits = bin(r[j][i])[2:].rjust(8, '0') fill = int(bits[-flat - 1]) s[j][i] = 255 if fill else 0 return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) im_conveted_mat = convert_2d(im_mat) im_conveted = PIL.Image.fromarray(im_conveted_mat) im_conveted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/bit/#_3","text":"\u539f\u56fe \u7b2c 7 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 6 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 5 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 4 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 3 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 2 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 1 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 0 \u4e2a\u4f4d\u5e73\u9762","title":"\u5b9e\u9a8c\u7ed3\u679c"},{"location":"content/cv/channel/","text":"\u6570\u5b57\u56fe\u50cf\u7684\u672c\u8d28 \u6570\u5b57\u56fe\u50cf\u7684\u672c\u8d28\u662f\u4e00\u4e2a\u591a\u7ef4\u77e9\u9635 . \u4ee5\u4e00\u5f20 480x270 \u7684 RGB \u8272\u5f69\u7a7a\u95f4\u56fe\u50cf\u4e3a\u4f8b, \u7f16\u5199\u5982\u4e0b\u4ee3\u7801 import scipy.misc mat = scipy.misc.imread('/img/jp.jpg') print(mat.shape) # (270, 480, 3) \u8bf4\u660e\u8fd9\u4e2a\u56fe\u50cf\u6709 270 \u884c, 480 \u5217, \u4ee5\u53ca\u5728\u8272\u5f69\u4e0a\u6709 3 \u4e2a\u5206\u91cf. \u8fdb\u4e00\u6b65\u5206\u89e3\u8be5\u56fe\u7247\u5f97\u5230 R, G, B \u4e09\u4e2a\u901a\u9053\u5206\u91cf: import PIL.Image im = PIL.Image.open('/img/jp.jpg') r, g, b = im.split() r.show() g.show() b.show() \u5f97\u5230\u5982\u4e0b\u4e09\u5f20\u56fe\u7247, \u6bcf\u4e2a\u5206\u91cf\u5355\u72ec\u62ff\u51fa\u6765\u90fd\u662f\u4e00\u4e2a [270, 480, 1] \u7684\u77e9\u9635 R \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: G \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: B \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: \u5982\u4f60\u6240\u89c1, \u5b83\u4eec\u5e76\u4e0d\u662f\u5f69\u8272\u7684\uff0c\u800c\u662f\u4e00\u5e45\u7070\u5ea6\u56fe\u50cf \u4ea4\u6362\u901a\u9053 \u5982\u679c\u6211\u4eec\u4ea4\u6362\u4e00\u4e0b\u5206\u91cf\u653e\u7f6e\u7684\u987a\u5e8f, \u628a B \u5206\u91cf\u653e\u8fdb\u7ea2\u8272\u901a\u9053\u91cc, \u628a G \u5206\u91cf\u653e\u8fdb\u7eff\u8272\u901a\u9053\u91cc, R \u5206\u91cf\u653e\u8fdb\u84dd\u8272\u901a\u9053\u91cc, \u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u4e00\u526f\u56fe\u50cf: import PIL.Image im = PIL.Image.open('/img/jp.jpg') r, g, b = im.split() im = PIL.Image.merge('RGB', (b, g, r)) im.show() \u9664\u4e86\u4ea4\u6362\u901a\u9053\u987a\u5e8f\u5916, \u751a\u81f3\u53ef\u4ee5\u4f20\u5165\u81ea\u5df1\u5b9a\u4e49\u7684\u901a\u9053\u5206\u91cf import PIL.Image im = PIL.Image.open('/img/jp.jpg') _, g, b = im.split() # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 r \u901a\u9053\u5206\u91cf, \u6ce8\u610f mode \u503c\u4e3a 'L' r = PIL.Image.new('L', im.size, color=255) im = PIL.Image.merge('RGB', (r, g, b)) im.show() \u554a, \u6211\u7684\u773c\u775b \u5b66\u4e60\u901a\u9053\u7684\u73b0\u5b9e\u610f\u4e49 \u4f5c\u8005\u5728\u529e\u7406\u793e\u4fdd\u5361\u7684\u65f6\u5019, \u8981\u6c42\u7535\u5b50\u8bc1\u4ef6\u7167\u4e3a\u767d\u8272\u80cc\u666f\u5e55\u5e03, \u4f46\u4f5c\u8005\u53ea\u6709\u84dd\u8272\u80cc\u666f\u5e55\u5e03\u7684\u7535\u5b50\u7167. \u4f5c\u4e3a\u4e00\u4e2a\u61d2\u4eba, \u65e2\u4e0d\u60f3\u53bb\u91cd\u65b0\u62cd\u7167\u53c8\u4e0d\u60f3\u4e0b\u8f7dphotoshop, \u6240\u4ee5\u5c31\u7406\u6240\u5f53\u7136\u7684\u5bf9\u7167\u7247\u7684\u84dd\u8272\u901a\u9053\u52a8\u8d77\u4e86\u624b\u811a.","title":"\u6570\u5b57\u56fe\u50cf\u7684\u672c\u8d28"},{"location":"content/cv/channel/#_1","text":"\u6570\u5b57\u56fe\u50cf\u7684\u672c\u8d28\u662f\u4e00\u4e2a\u591a\u7ef4\u77e9\u9635 . \u4ee5\u4e00\u5f20 480x270 \u7684 RGB \u8272\u5f69\u7a7a\u95f4\u56fe\u50cf\u4e3a\u4f8b, \u7f16\u5199\u5982\u4e0b\u4ee3\u7801 import scipy.misc mat = scipy.misc.imread('/img/jp.jpg') print(mat.shape) # (270, 480, 3) \u8bf4\u660e\u8fd9\u4e2a\u56fe\u50cf\u6709 270 \u884c, 480 \u5217, \u4ee5\u53ca\u5728\u8272\u5f69\u4e0a\u6709 3 \u4e2a\u5206\u91cf. \u8fdb\u4e00\u6b65\u5206\u89e3\u8be5\u56fe\u7247\u5f97\u5230 R, G, B \u4e09\u4e2a\u901a\u9053\u5206\u91cf: import PIL.Image im = PIL.Image.open('/img/jp.jpg') r, g, b = im.split() r.show() g.show() b.show() \u5f97\u5230\u5982\u4e0b\u4e09\u5f20\u56fe\u7247, \u6bcf\u4e2a\u5206\u91cf\u5355\u72ec\u62ff\u51fa\u6765\u90fd\u662f\u4e00\u4e2a [270, 480, 1] \u7684\u77e9\u9635 R \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: G \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: B \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: \u5982\u4f60\u6240\u89c1, \u5b83\u4eec\u5e76\u4e0d\u662f\u5f69\u8272\u7684\uff0c\u800c\u662f\u4e00\u5e45\u7070\u5ea6\u56fe\u50cf","title":"\u6570\u5b57\u56fe\u50cf\u7684\u672c\u8d28"},{"location":"content/cv/channel/#_2","text":"\u5982\u679c\u6211\u4eec\u4ea4\u6362\u4e00\u4e0b\u5206\u91cf\u653e\u7f6e\u7684\u987a\u5e8f, \u628a B \u5206\u91cf\u653e\u8fdb\u7ea2\u8272\u901a\u9053\u91cc, \u628a G \u5206\u91cf\u653e\u8fdb\u7eff\u8272\u901a\u9053\u91cc, R \u5206\u91cf\u653e\u8fdb\u84dd\u8272\u901a\u9053\u91cc, \u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u4e00\u526f\u56fe\u50cf: import PIL.Image im = PIL.Image.open('/img/jp.jpg') r, g, b = im.split() im = PIL.Image.merge('RGB', (b, g, r)) im.show() \u9664\u4e86\u4ea4\u6362\u901a\u9053\u987a\u5e8f\u5916, \u751a\u81f3\u53ef\u4ee5\u4f20\u5165\u81ea\u5df1\u5b9a\u4e49\u7684\u901a\u9053\u5206\u91cf import PIL.Image im = PIL.Image.open('/img/jp.jpg') _, g, b = im.split() # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 r \u901a\u9053\u5206\u91cf, \u6ce8\u610f mode \u503c\u4e3a 'L' r = PIL.Image.new('L', im.size, color=255) im = PIL.Image.merge('RGB', (r, g, b)) im.show() \u554a, \u6211\u7684\u773c\u775b","title":"\u4ea4\u6362\u901a\u9053"},{"location":"content/cv/channel/#_3","text":"\u4f5c\u8005\u5728\u529e\u7406\u793e\u4fdd\u5361\u7684\u65f6\u5019, \u8981\u6c42\u7535\u5b50\u8bc1\u4ef6\u7167\u4e3a\u767d\u8272\u80cc\u666f\u5e55\u5e03, \u4f46\u4f5c\u8005\u53ea\u6709\u84dd\u8272\u80cc\u666f\u5e55\u5e03\u7684\u7535\u5b50\u7167. \u4f5c\u4e3a\u4e00\u4e2a\u61d2\u4eba, \u65e2\u4e0d\u60f3\u53bb\u91cd\u65b0\u62cd\u7167\u53c8\u4e0d\u60f3\u4e0b\u8f7dphotoshop, \u6240\u4ee5\u5c31\u7406\u6240\u5f53\u7136\u7684\u5bf9\u7167\u7247\u7684\u84dd\u8272\u901a\u9053\u52a8\u8d77\u4e86\u624b\u811a.","title":"\u5b66\u4e60\u901a\u9053\u7684\u73b0\u5b9e\u610f\u4e49"},{"location":"content/cv/complementary_and_invert_color/","text":"\u8865\u8272 import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) im_converted_mat = np.zeros_like(im_mat, dtype=np.uint8) for x in range(im_mat.shape[0]): for y in range(im_mat.shape[1]): # \u8865\u8272\u7684\u516c\u5f0f\u662f max(r, g, b) + min(r, g, b) - [r, g, b] maxrgb = im_mat[x][y].max() minrgb = im_mat[x][y].min() im_converted_mat[x][y] = (int(maxrgb) + int(minrgb)) * np.ones(3) - im_mat[x][y] im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u53cd\u8272 import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) # \u53cd\u8272\u7684\u516c\u5f0f\u662f [255, 255, 255] - [r, g, b] im_converted_mat = np.ones_like(im_mat) * 255 - im_mat im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u8865\u8272\u548c\u53cd\u8272"},{"location":"content/cv/complementary_and_invert_color/#_1","text":"import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) im_converted_mat = np.zeros_like(im_mat, dtype=np.uint8) for x in range(im_mat.shape[0]): for y in range(im_mat.shape[1]): # \u8865\u8272\u7684\u516c\u5f0f\u662f max(r, g, b) + min(r, g, b) - [r, g, b] maxrgb = im_mat[x][y].max() minrgb = im_mat[x][y].min() im_converted_mat[x][y] = (int(maxrgb) + int(minrgb)) * np.ones(3) - im_mat[x][y] im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u8865\u8272"},{"location":"content/cv/complementary_and_invert_color/#_2","text":"import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) # \u53cd\u8272\u7684\u516c\u5f0f\u662f [255, 255, 255] - [r, g, b] im_converted_mat = np.ones_like(im_mat) * 255 - im_mat im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u53cd\u8272"},{"location":"content/cv/contrast/","text":"[toc] \u56fe\u50cf\u57fa\u7840\u6982\u5ff5 \u8d28\u91cf \u5bf9\u6bd4\u5ea6 \u53cd\u6620\u4e00\u5e45\u56fe\u50cf\u4e2d\u7070\u5ea6\u65b9\u5dee\u7684\u5927\u5c0f \u5bf9\u6bd4\u5ea6=\u6700\u5927\u7070\u5ea6\u503c/\u6700\u5c0f\u7070\u5ea6\u503c \u8bc4\u4ef7\u65b9\u6cd5 \u56fe\u50cf\u7684\u63cf\u8ff0 \u77e9\u9635\uff08matrices\uff09 \u94fe\u8868\uff08chains\uff09 \u63cf\u8ff0\u76ee\u6807\u7269\u4f53\u7684\u8fb9\u754c \u62d3\u6251\u7ed3\u6784\uff08Topological data structures\uff09 \u63cf\u8ff0\u4e00\u7ec4\u56fe\u5f62\u53ca\u5176\u76f8\u4e92\u5173\u7cfb \u5173\u7cfb\u7ed3\u6784\uff08Relational structures\uff09 \u56fe\u50cf\u7684\u77e9\u9635\u7279\u6027 \u8ddd\u79bb\u2014\u63cf\u8ff0\u56fe\u50cf\u4e2d\u50cf\u7d20\u4e4b\u95f4\u7684\u8ddd\u79bb \u50cf\u7d20\u7684\u90bb\u57df\u2014\u63cf\u8ff0\u4e0e\u50cf\u7d20\u76f8\u90bb\u7684\u5176\u4ed6\u50cf\u7d20 \u56fe\u50cf\u7684\u7edf\u8ba1\u7279\u6027 \u57fa\u672c\u8fd0\u7b97 \u56fe\u50cf\u7684\u50cf\u7d20\u7ea7\u8fd0\u7b97 \u70b9\u8fd0\u7b97 \u7ebf\u6027\u70b9\u8fd0\u7b97 $$ I_{out} ( x, y ) = a \\cdot I_{in}( x, y ) + b $$ a=1\uff0cb=0 a<0 |a|>1 |a|<1 b>0 b<0 \u6052\u7b49 \u9ed1\u767d\u53cd\u8f6c \u589e\u52a0\u5bf9\u6bd4\u5ea6 \u51cf\u5c0f\u5bf9\u6bd4\u5ea6 \u589e\u52a0\u4eae\u5ea6 \u51cf\u5c0f\u4eae\u5ea6 \u975e\u7ebf\u6027\u70b9\u8fd0\u7b97 $$ f ( I ( x, y ) ) = I ( x, y ) + C \\cdot I ( x, y ) \\cdot ( I ( x, y )\\cdot m \u2212 I ( x, y ) ) $$ C>0 C<0 \u589e\u5f3a\u4e2d\u95f4\u90e8\u5206\u4eae\u5ea6 \u51cf\u5c0f\u4e2d\u95f4\u90e8\u5206\u4eae\u5ea6 \u6620\u5c04\u8868\u70b9\u8fd0\u7b97 \u70b9\u8fd0\u7b97\u7279\u70b9 \u70b9\u8fd0\u7b97\u9488\u5bf9\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u7070\u5ea6\uff0c\u72ec\u7acb\u5730\u8fdb\u884c\u7070 \u5ea6\u503c\u7684\u6539\u53d8 \u8f93\u51fa\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u7070\u5ea6\u503c\uff0c\u4ec5\u53d6\u51b3\u4e8e\u76f8\u5e94\u8f93\u5165\u50cf\u7d20\u70b9\u7684\u503c \u70b9\u8fd0\u7b97\u4e0d\u6539\u53d8\u56fe\u50cf\u5185\u7684\u7a7a\u95f4\u5173 \u4ece\u50cf\u7d20\u5230\u50cf\u7d20\u7684\u64cd\u4f5c \u70b9\u8fd0\u7b97\u53ef\u5b8c\u5168\u7531\u7070\u5ea6\u53d8\u6362\u51fd\u6570\u6216\u7070\u5ea6\u6620\u5c04\u8868\u786e\u5b9a \u5b9e\u4f8b\u2014\u2014\u201c\u5bf9\u6bd4\u5ea6\u589e\u5f3a\u3001\u5bf9\u6bd4\u5ea6\u62c9\u4f38\u3001\u7070\u5ea6\u53d8\u6362\u201d \u4ee3\u6570\u8fd0\u7b97 \u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u3001\u9664\u6cd5 \u903b\u8f91\u8fd0\u7b97 \u6c42\u53cd\u3001\u5f02\u6216\u3001\u6216\u3001\u4e0e \u56fe\u50cf\u7684\u7a7a\u57df\u53d8\u6362 \u5728\u56fe\u50cf\u7a7a\u95f4\uff0c\u5bf9\u56fe\u50cf\u7684\u5f62\u72b6\u3001\u50cf\u7d20\u503c\u7b49\u8fdb\u884c \u53d8\u5316\u3001\u6620\u5c04\u7b49\u5904\u7406 \u51e0\u4f55\u53d8\u6362 \u6539\u53d8\u56fe\u50cf\u7684\u5f62\u72b6 \u57fa\u672c\u53d8\u6362 \u009a \u7070\u5ea6\u63d2\u503c \u591a\u9879\u5f0f\u53d8\u6362 \u7531\u7ebf\u6027\u53d8\u6362\u786e\u5b9a\u7684\u56fe\u50cf\u7684\u5e73\u79fb\u3001\u7f29\u653e\u3001\u65cb\u8f6c\u3001\u955c\u50cf\u4e0e \u9519\u5207 \u4f2a\u4eff\u5c04\u53d8\u6362\u2014\u2014\u53cc\u7ebf\u6027\u51e0\u4f55\u53d8\u6362 \u4efb\u610f\u53d8\u5f62\u53d8\u6362\u2014\u2014\u975e\u7ebf\u6027\u51e0\u4f55\u53d8\u6362 \u900f\u89c6\u53d8\u6362 \u57fa\u672c\u51e0\u4f55\u53d8\u6362\u7684\u7279\u5f81 \u00bf \u5750\u6807\u7a7a\u95f4\u7684\u53d8\u5316 :\u8303\u56f4\u53d1\u751f\u53d8\u5316 :\u5927\u5c0f\u53d1\u751f\u53d8\u5316 \u00bf \u50cf\u7d20\u503c\u7684\u53d8\u5316 :\u50cf\u7d20\u503c\u4e0d\u53d1\u751f\u53d8\u5316\u2014\u2014\u4f4d\u7f6e\u6539\u53d8 :\u50cf\u7d20\u503c\u53d1\u751f\u53d8\u5316\u2014\u2014\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u53d8\u5f62\u53d8\u6362 \u79bb\u6563\u51e0\u4f55\u53d8\u6362\u7684\u8ba1\u7b97\u95ee\u9898 \u00bf \u7a7a\u95f4\u5750\u6807 :\u5411\u524d\u6620\u5c04\u6cd5 :\u5411\u540e\u6620\u5c04\u6cd5 \u00bf \u50cf\u7d20\u503c\u8ba1\u7b97\u2014\u2014\u7070\u5ea6\u63d2\u503c\uff08\u91cd\u91c7\u6837\uff09 :\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5 :\u53cc\u7ebf\u6027\u63d2\u503c\uff08\u4e00\u9636\u63d2\u503c\uff09 :\u9ad8\u9636\u63d2\u503c \u975e\u51e0\u4f55\u53d8\u6362 \u6539\u53d8\u56fe\u50cf\u50cf\u7d20\u503c \u009a \u6a21\u677f\u8fd0\u7b97 \u009a \u7070\u5ea6\u53d8\u6362 \u009a \u76f4\u65b9\u56fe\u53d8\u6362 \u76f4\u65b9\u56fe \u76f4\u65b9\u56fe\u53d8\u6362 \u57fa\u672c\u7406\u8bba \u76f4\u65b9\u56fe\u5747\u8861","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u5bf9\u6bd4\u589e\u5f3a"},{"location":"content/cv/contrast/#_1","text":"","title":"\u56fe\u50cf\u57fa\u7840\u6982\u5ff5"},{"location":"content/cv/contrast/#_2","text":"","title":"\u8d28\u91cf"},{"location":"content/cv/contrast/#_3","text":"\u53cd\u6620\u4e00\u5e45\u56fe\u50cf\u4e2d\u7070\u5ea6\u65b9\u5dee\u7684\u5927\u5c0f \u5bf9\u6bd4\u5ea6=\u6700\u5927\u7070\u5ea6\u503c/\u6700\u5c0f\u7070\u5ea6\u503c","title":"\u5bf9\u6bd4\u5ea6"},{"location":"content/cv/contrast/#_4","text":"","title":"\u8bc4\u4ef7\u65b9\u6cd5"},{"location":"content/cv/contrast/#_5","text":"\u77e9\u9635\uff08matrices\uff09 \u94fe\u8868\uff08chains\uff09 \u63cf\u8ff0\u76ee\u6807\u7269\u4f53\u7684\u8fb9\u754c \u62d3\u6251\u7ed3\u6784\uff08Topological data structures\uff09 \u63cf\u8ff0\u4e00\u7ec4\u56fe\u5f62\u53ca\u5176\u76f8\u4e92\u5173\u7cfb \u5173\u7cfb\u7ed3\u6784\uff08Relational structures\uff09","title":"\u56fe\u50cf\u7684\u63cf\u8ff0"},{"location":"content/cv/contrast/#_6","text":"\u8ddd\u79bb\u2014\u63cf\u8ff0\u56fe\u50cf\u4e2d\u50cf\u7d20\u4e4b\u95f4\u7684\u8ddd\u79bb \u50cf\u7d20\u7684\u90bb\u57df\u2014\u63cf\u8ff0\u4e0e\u50cf\u7d20\u76f8\u90bb\u7684\u5176\u4ed6\u50cf\u7d20","title":"\u56fe\u50cf\u7684\u77e9\u9635\u7279\u6027"},{"location":"content/cv/contrast/#_7","text":"","title":"\u56fe\u50cf\u7684\u7edf\u8ba1\u7279\u6027"},{"location":"content/cv/contrast/#_8","text":"","title":"\u57fa\u672c\u8fd0\u7b97"},{"location":"content/cv/contrast/#_9","text":"","title":"\u56fe\u50cf\u7684\u50cf\u7d20\u7ea7\u8fd0\u7b97"},{"location":"content/cv/contrast/#_10","text":"\u7ebf\u6027\u70b9\u8fd0\u7b97 $$ I_{out} ( x, y ) = a \\cdot I_{in}( x, y ) + b $$ a=1\uff0cb=0 a<0 |a|>1 |a|<1 b>0 b<0 \u6052\u7b49 \u9ed1\u767d\u53cd\u8f6c \u589e\u52a0\u5bf9\u6bd4\u5ea6 \u51cf\u5c0f\u5bf9\u6bd4\u5ea6 \u589e\u52a0\u4eae\u5ea6 \u51cf\u5c0f\u4eae\u5ea6 \u975e\u7ebf\u6027\u70b9\u8fd0\u7b97 $$ f ( I ( x, y ) ) = I ( x, y ) + C \\cdot I ( x, y ) \\cdot ( I ( x, y )\\cdot m \u2212 I ( x, y ) ) $$ C>0 C<0 \u589e\u5f3a\u4e2d\u95f4\u90e8\u5206\u4eae\u5ea6 \u51cf\u5c0f\u4e2d\u95f4\u90e8\u5206\u4eae\u5ea6 \u6620\u5c04\u8868\u70b9\u8fd0\u7b97 \u70b9\u8fd0\u7b97\u7279\u70b9 \u70b9\u8fd0\u7b97\u9488\u5bf9\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u7070\u5ea6\uff0c\u72ec\u7acb\u5730\u8fdb\u884c\u7070 \u5ea6\u503c\u7684\u6539\u53d8 \u8f93\u51fa\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u7070\u5ea6\u503c\uff0c\u4ec5\u53d6\u51b3\u4e8e\u76f8\u5e94\u8f93\u5165\u50cf\u7d20\u70b9\u7684\u503c \u70b9\u8fd0\u7b97\u4e0d\u6539\u53d8\u56fe\u50cf\u5185\u7684\u7a7a\u95f4\u5173 \u4ece\u50cf\u7d20\u5230\u50cf\u7d20\u7684\u64cd\u4f5c \u70b9\u8fd0\u7b97\u53ef\u5b8c\u5168\u7531\u7070\u5ea6\u53d8\u6362\u51fd\u6570\u6216\u7070\u5ea6\u6620\u5c04\u8868\u786e\u5b9a \u5b9e\u4f8b\u2014\u2014\u201c\u5bf9\u6bd4\u5ea6\u589e\u5f3a\u3001\u5bf9\u6bd4\u5ea6\u62c9\u4f38\u3001\u7070\u5ea6\u53d8\u6362\u201d","title":"\u70b9\u8fd0\u7b97"},{"location":"content/cv/contrast/#_11","text":"\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u3001\u9664\u6cd5","title":"\u4ee3\u6570\u8fd0\u7b97"},{"location":"content/cv/contrast/#_12","text":"\u6c42\u53cd\u3001\u5f02\u6216\u3001\u6216\u3001\u4e0e","title":"\u903b\u8f91\u8fd0\u7b97"},{"location":"content/cv/contrast/#_13","text":"\u5728\u56fe\u50cf\u7a7a\u95f4\uff0c\u5bf9\u56fe\u50cf\u7684\u5f62\u72b6\u3001\u50cf\u7d20\u503c\u7b49\u8fdb\u884c \u53d8\u5316\u3001\u6620\u5c04\u7b49\u5904\u7406","title":"\u56fe\u50cf\u7684\u7a7a\u57df\u53d8\u6362"},{"location":"content/cv/contrast/#_14","text":"\u6539\u53d8\u56fe\u50cf\u7684\u5f62\u72b6 \u57fa\u672c\u53d8\u6362 \u009a \u7070\u5ea6\u63d2\u503c","title":"\u51e0\u4f55\u53d8\u6362"},{"location":"content/cv/contrast/#_15","text":"\u7531\u7ebf\u6027\u53d8\u6362\u786e\u5b9a\u7684\u56fe\u50cf\u7684\u5e73\u79fb\u3001\u7f29\u653e\u3001\u65cb\u8f6c\u3001\u955c\u50cf\u4e0e \u9519\u5207 \u4f2a\u4eff\u5c04\u53d8\u6362\u2014\u2014\u53cc\u7ebf\u6027\u51e0\u4f55\u53d8\u6362 \u4efb\u610f\u53d8\u5f62\u53d8\u6362\u2014\u2014\u975e\u7ebf\u6027\u51e0\u4f55\u53d8\u6362","title":"\u591a\u9879\u5f0f\u53d8\u6362"},{"location":"content/cv/contrast/#_16","text":"\u57fa\u672c\u51e0\u4f55\u53d8\u6362\u7684\u7279\u5f81 \u00bf \u5750\u6807\u7a7a\u95f4\u7684\u53d8\u5316 :\u8303\u56f4\u53d1\u751f\u53d8\u5316 :\u5927\u5c0f\u53d1\u751f\u53d8\u5316 \u00bf \u50cf\u7d20\u503c\u7684\u53d8\u5316 :\u50cf\u7d20\u503c\u4e0d\u53d1\u751f\u53d8\u5316\u2014\u2014\u4f4d\u7f6e\u6539\u53d8 :\u50cf\u7d20\u503c\u53d1\u751f\u53d8\u5316\u2014\u2014\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u53d8\u5f62\u53d8\u6362 \u79bb\u6563\u51e0\u4f55\u53d8\u6362\u7684\u8ba1\u7b97\u95ee\u9898 \u00bf \u7a7a\u95f4\u5750\u6807 :\u5411\u524d\u6620\u5c04\u6cd5 :\u5411\u540e\u6620\u5c04\u6cd5 \u00bf \u50cf\u7d20\u503c\u8ba1\u7b97\u2014\u2014\u7070\u5ea6\u63d2\u503c\uff08\u91cd\u91c7\u6837\uff09 :\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5 :\u53cc\u7ebf\u6027\u63d2\u503c\uff08\u4e00\u9636\u63d2\u503c\uff09 :\u9ad8\u9636\u63d2\u503c","title":"\u900f\u89c6\u53d8\u6362"},{"location":"content/cv/contrast/#_17","text":"\u6539\u53d8\u56fe\u50cf\u50cf\u7d20\u503c \u009a \u6a21\u677f\u8fd0\u7b97 \u009a \u7070\u5ea6\u53d8\u6362 \u009a \u76f4\u65b9\u56fe\u53d8\u6362","title":"\u975e\u51e0\u4f55\u53d8\u6362"},{"location":"content/cv/contrast/#_18","text":"","title":"\u76f4\u65b9\u56fe"},{"location":"content/cv/contrast/#_19","text":"\u57fa\u672c\u7406\u8bba","title":"\u76f4\u65b9\u56fe\u53d8\u6362"},{"location":"content/cv/contrast/#_20","text":"","title":"\u76f4\u65b9\u56fe\u5747\u8861"},{"location":"content/cv/contrast_tensile/","text":"\u5bf9\u6bd4\u62c9\u4f38 \u4f4e\u5bf9\u6bd4\u5ea6\u7684\u56fe\u50cf\u53ef\u7531\u7167\u660e\u4e0d\u8db3, \u6210\u50cf\u4f20\u611f\u5668\u52a8\u6001\u8303\u56f4\u592a\u5c0f, \u751a\u81f3\u5728\u56fe\u50cf\u83b7\u53d6\u8fc7\u7a0b\u4e2d\u900f\u955c\u5149\u5708\u8bbe\u7f6e\u9519\u8bef\u5f15\u8d77. \u5bf9\u6bd4\u62c9\u4f38\u7684\u601d\u60f3\u662f\u63d0\u9ad8\u56fe\u50cf\u5904\u7406\u65f6\u7070\u5ea6\u7ea7\u7684\u52a8\u6001\u8303\u56f4. \u8f6c\u6362\u51fd\u6570 $$ T(x) = (x - r_{min})(r_{max} - r_{min}) \\cdot 255 $$ \u8be5\u51fd\u6570\u5c06\u539f\u56fe\u50cf $[r_{min}, r_{max}]$ \u7684\u50cf\u7d20\u53d6\u503c\u8303\u56f4\u62c9\u4f38\u81f3 $[0, 255]$. \u4ee3\u7801\u5b9e\u73b0 import PIL.Image import scipy.misc import numpy as np def convert_2d(r): rmin = np.min(r) rmax = np.max(r) if rmin == rmax: return r s = np.empty(r.shape, dtype=np.uint8) for j in range(r.shape[0]): for i in range(r.shape[1]): s[j][i] = (r[j][i] - rmin) / (rmax - rmin) * 255 return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u5bf9\u6bd4\u62c9\u4f38"},{"location":"content/cv/contrast_tensile/#_1","text":"\u4f4e\u5bf9\u6bd4\u5ea6\u7684\u56fe\u50cf\u53ef\u7531\u7167\u660e\u4e0d\u8db3, \u6210\u50cf\u4f20\u611f\u5668\u52a8\u6001\u8303\u56f4\u592a\u5c0f, \u751a\u81f3\u5728\u56fe\u50cf\u83b7\u53d6\u8fc7\u7a0b\u4e2d\u900f\u955c\u5149\u5708\u8bbe\u7f6e\u9519\u8bef\u5f15\u8d77. \u5bf9\u6bd4\u62c9\u4f38\u7684\u601d\u60f3\u662f\u63d0\u9ad8\u56fe\u50cf\u5904\u7406\u65f6\u7070\u5ea6\u7ea7\u7684\u52a8\u6001\u8303\u56f4.","title":"\u5bf9\u6bd4\u62c9\u4f38"},{"location":"content/cv/contrast_tensile/#_2","text":"$$ T(x) = (x - r_{min})(r_{max} - r_{min}) \\cdot 255 $$ \u8be5\u51fd\u6570\u5c06\u539f\u56fe\u50cf $[r_{min}, r_{max}]$ \u7684\u50cf\u7d20\u53d6\u503c\u8303\u56f4\u62c9\u4f38\u81f3 $[0, 255]$.","title":"\u8f6c\u6362\u51fd\u6570"},{"location":"content/cv/contrast_tensile/#_3","text":"import PIL.Image import scipy.misc import numpy as np def convert_2d(r): rmin = np.min(r) rmax = np.max(r) if rmin == rmax: return r s = np.empty(r.shape, dtype=np.uint8) for j in range(r.shape[0]): for i in range(r.shape[1]): s[j][i] = (r[j][i] - rmin) / (rmax - rmin) * 255 return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/frequency_filter/","text":"\u5085\u91cc\u53f6\u53d8\u6362 \u5085\u91cc\u53f6\u53d8\u6362(Fourier transform)\u662f\u4e00\u79cd\u7ebf\u6027\u7684\u79ef\u5206\u53d8\u6362, \u5e38\u5728\u5c06\u4fe1\u53f7\u5728\u65f6\u57df(\u6216\u7a7a\u57df)\u548c\u9891\u57df\u4e4b\u95f4\u53d8\u6362\u65f6\u4f7f\u7528, \u5728\u7269\u7406\u5b66\u548c\u5de5\u7a0b\u5b66\u4e2d\u6709\u8bb8\u591a\u5e94\u7528. \u56e0\u5176\u57fa\u672c\u601d\u60f3\u9996\u5148\u7531\u6cd5\u56fd\u5b66\u8005\u7ea6\u745f\u592b\u00b7\u5085\u91cc\u53f6\u7cfb\u7edf\u5730\u63d0\u51fa, \u6240\u4ee5\u4ee5\u5176\u540d\u5b57\u6765\u547d\u540d\u4ee5\u793a\u7eaa\u5ff5. \u7ecf\u8fc7\u5085\u91cc\u53f6\u53d8\u6362\u800c\u751f\u6210\u7684\u51fd\u6570 $\\hat f$ \u79f0\u4f5c\u539f\u51fd\u6570 $f$ \u7684\u5085\u91cc\u53f6\u53d8\u6362\u3001\u4ea6\u6216\u5176\u9891\u8c31. \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b, \u5085\u91cc\u53f6\u53d8\u6362\u662f\u53ef\u9006\u7684, \u5373\u53ef\u901a\u8fc7 $\\hat f$ \u5f97\u5230\u5176\u539f\u51fd\u6570 $f$ .\u901a\u5e38\u60c5\u51b5\u4e0b, $f$ \u662f\u5b9e\u6570\u51fd\u6570, \u800c $\\hat f$ \u5219\u662f\u590d\u6570\u51fd\u6570, \u7528\u4e00\u4e2a\u590d\u6570\u6765\u8868\u793a\u632f\u5e45\u548c\u76f8\u4f4d. \u5085\u91cc\u53f6\u53d8\u6362\u5c06\u51fd\u6570\u7684\u65f6\u57df(\u7ea2\u8272)\u4e0e\u9891\u57df(\u84dd\u8272)\u76f8\u5173\u8054. \u9891\u8c31\u4e2d\u7684\u4e0d\u540c\u6210\u5206\u9891\u7387\u5728\u9891\u57df\u4e2d\u4ee5\u5cf0\u503c\u5f62\u5f0f\u8868\u793a: \u9891\u57df\u4e2d\u7684\u6ee4\u6ce2\u57fa\u7840 \u5c06 M * N \u5927\u5c0f\u7684\u56fe\u50cf\u6269\u5c55\u5230 2M * 2N, \u591a\u4f59\u50cf\u7d20\u4ee5 0 \u586b\u5145 \u7528 $(-1)^{M+N}$ \u4e58\u4ee5\u8f93\u5165\u56fe\u50cf\u8fdb\u884c\u4e2d\u5fc3\u53d8\u6362 \u8ba1\u7b97\u56fe\u50cf\u7684 DFT, \u5373 $F(u, v)$ \u7528\u6ee4\u6ce2\u5668\u51fd\u6570 $H(u, v)$ \u4e58\u4ee5 $F(u, v)$ \u8ba1\u7b97 4 \u4e2d\u7ed3\u679c\u7684\u53cd DFT \u5f97\u5230 5 \u4e2d\u7ed3\u679c\u7684\u5b9e\u90e8 \u7528 $(-1)^{M+N}$ \u4e58\u4ee5 6 \u4e2d\u7684\u7ed3\u679c \u63d0\u53d6 7 \u4e2d\u7ed3\u679c\u5de6\u4e0a\u8c61\u9650 $M * N$ \u5927\u5c0f\u7684\u533a\u57df $F(u, v)$ \u7684\u4e2d\u5fc3\u90e8\u5206\u4e3a\u4f4e\u9891\u4fe1\u53f7, \u8fb9\u7f18\u90e8\u5206\u4e3a\u9ad8\u9891\u4fe1\u53f7. \u9ad8\u9891\u4fe1\u53f7\u4fdd\u5b58\u4e86\u56fe\u50cf\u7684 \u7ec6\u8282 . $H(u, v)$ \u4e5f\u88ab\u79f0\u4e3a\u6ee4\u6ce2\u5668. \u8f93\u51fa\u56fe\u50cf\u7684\u5085\u91cc\u53f6\u53d8\u6362\u4e3a: $$ G(u, v) = F(u, v)H(u, v) $$ $H$ \u4e0e $F$ \u7684\u76f8\u4e58\u6d89\u53ca\u4e8c\u7ef4\u51fd\u6570, \u5e76\u5728\u9010\u5143\u7d20\u7684\u57fa\u7840\u4e0a\u5b9a\u4e49. \u5373: $H$ \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e58\u4ee5 $F$ \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20, $H$ \u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e58\u4ee5 $F$ \u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20, \u4ee5\u6b64\u7c7b\u63a8. \u76f8\u5173\u4ee3\u7801 # \u56fe\u50cf\u7684\u5085\u91cc\u53f6\u53d8\u6362\u4e0e\u53cd\u53d8\u6362 import numpy as np import scipy.misc import PIL.Image import matplotlib.pyplot as plt im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) rows, cols = im_mat.shape # \u6269\u5c55 M * N \u56fe\u50cf\u5230 2M * 2N im_mat_ext = np.zeros((rows * 2, cols * 2)) for i in range(rows): for j in range(cols): im_mat_ext[i][j] = im_mat[i][j] # \u5085\u91cc\u53f6\u53d8\u6362 im_mat_fu = np.fft.fft2(im_mat_ext) # \u5c06\u4f4e\u9891\u4fe1\u53f7\u79fb\u690d\u4e2d\u95f4, \u7b49\u6548\u4e8e\u5728\u65f6\u57df\u4e0a\u5bf9 f(x, y) \u4e58\u4ee5 (-1)^(m + n) im_mat_fu = np.fft.fftshift(im_mat_fu) # \u663e\u793a\u539f\u56fe plt.subplot(121) plt.imshow(im_mat, 'gray') plt.title('original') plt.subplot(122) # \u5728\u663e\u793a\u9891\u7387\u8c31\u4e4b\u524d, \u5bf9\u9891\u7387\u8c31\u53d6\u5b9e\u90e8\u5e76\u8fdb\u884c\u5bf9\u6570\u53d8\u6362 plt.imshow(np.log(np.abs(im_mat_fu)), 'gray') plt.title('fourier') plt.show() # \u5085\u91cc\u53f6\u53cd\u53d8\u6362 im_converted_mat = np.fft.ifft2(np.fft.ifftshift(im_mat_fu)) # \u5f97\u5230\u5085\u91cc\u53f6\u53cd\u53d8\u6362\u7ed3\u679c\u7684\u5b9e\u90e8 im_converted_mat = np.abs(im_converted_mat) # \u63d0\u53d6\u5de6\u4e0a\u8c61\u9650 im_converted_mat = im_converted_mat[0:rows, 0:cols] # \u663e\u793a\u56fe\u50cf im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u56fe\u50cf\u4e0e\u5176\u9891\u7387\u8c31\u56fe\u50cf:","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u9891\u57df\u6ee4\u6ce2\u57fa\u7840"},{"location":"content/cv/frequency_filter/#_1","text":"\u5085\u91cc\u53f6\u53d8\u6362(Fourier transform)\u662f\u4e00\u79cd\u7ebf\u6027\u7684\u79ef\u5206\u53d8\u6362, \u5e38\u5728\u5c06\u4fe1\u53f7\u5728\u65f6\u57df(\u6216\u7a7a\u57df)\u548c\u9891\u57df\u4e4b\u95f4\u53d8\u6362\u65f6\u4f7f\u7528, \u5728\u7269\u7406\u5b66\u548c\u5de5\u7a0b\u5b66\u4e2d\u6709\u8bb8\u591a\u5e94\u7528. \u56e0\u5176\u57fa\u672c\u601d\u60f3\u9996\u5148\u7531\u6cd5\u56fd\u5b66\u8005\u7ea6\u745f\u592b\u00b7\u5085\u91cc\u53f6\u7cfb\u7edf\u5730\u63d0\u51fa, \u6240\u4ee5\u4ee5\u5176\u540d\u5b57\u6765\u547d\u540d\u4ee5\u793a\u7eaa\u5ff5. \u7ecf\u8fc7\u5085\u91cc\u53f6\u53d8\u6362\u800c\u751f\u6210\u7684\u51fd\u6570 $\\hat f$ \u79f0\u4f5c\u539f\u51fd\u6570 $f$ \u7684\u5085\u91cc\u53f6\u53d8\u6362\u3001\u4ea6\u6216\u5176\u9891\u8c31. \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b, \u5085\u91cc\u53f6\u53d8\u6362\u662f\u53ef\u9006\u7684, \u5373\u53ef\u901a\u8fc7 $\\hat f$ \u5f97\u5230\u5176\u539f\u51fd\u6570 $f$ .\u901a\u5e38\u60c5\u51b5\u4e0b, $f$ \u662f\u5b9e\u6570\u51fd\u6570, \u800c $\\hat f$ \u5219\u662f\u590d\u6570\u51fd\u6570, \u7528\u4e00\u4e2a\u590d\u6570\u6765\u8868\u793a\u632f\u5e45\u548c\u76f8\u4f4d. \u5085\u91cc\u53f6\u53d8\u6362\u5c06\u51fd\u6570\u7684\u65f6\u57df(\u7ea2\u8272)\u4e0e\u9891\u57df(\u84dd\u8272)\u76f8\u5173\u8054. \u9891\u8c31\u4e2d\u7684\u4e0d\u540c\u6210\u5206\u9891\u7387\u5728\u9891\u57df\u4e2d\u4ee5\u5cf0\u503c\u5f62\u5f0f\u8868\u793a:","title":"\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"content/cv/frequency_filter/#_2","text":"\u5c06 M * N \u5927\u5c0f\u7684\u56fe\u50cf\u6269\u5c55\u5230 2M * 2N, \u591a\u4f59\u50cf\u7d20\u4ee5 0 \u586b\u5145 \u7528 $(-1)^{M+N}$ \u4e58\u4ee5\u8f93\u5165\u56fe\u50cf\u8fdb\u884c\u4e2d\u5fc3\u53d8\u6362 \u8ba1\u7b97\u56fe\u50cf\u7684 DFT, \u5373 $F(u, v)$ \u7528\u6ee4\u6ce2\u5668\u51fd\u6570 $H(u, v)$ \u4e58\u4ee5 $F(u, v)$ \u8ba1\u7b97 4 \u4e2d\u7ed3\u679c\u7684\u53cd DFT \u5f97\u5230 5 \u4e2d\u7ed3\u679c\u7684\u5b9e\u90e8 \u7528 $(-1)^{M+N}$ \u4e58\u4ee5 6 \u4e2d\u7684\u7ed3\u679c \u63d0\u53d6 7 \u4e2d\u7ed3\u679c\u5de6\u4e0a\u8c61\u9650 $M * N$ \u5927\u5c0f\u7684\u533a\u57df $F(u, v)$ \u7684\u4e2d\u5fc3\u90e8\u5206\u4e3a\u4f4e\u9891\u4fe1\u53f7, \u8fb9\u7f18\u90e8\u5206\u4e3a\u9ad8\u9891\u4fe1\u53f7. \u9ad8\u9891\u4fe1\u53f7\u4fdd\u5b58\u4e86\u56fe\u50cf\u7684 \u7ec6\u8282 . $H(u, v)$ \u4e5f\u88ab\u79f0\u4e3a\u6ee4\u6ce2\u5668. \u8f93\u51fa\u56fe\u50cf\u7684\u5085\u91cc\u53f6\u53d8\u6362\u4e3a: $$ G(u, v) = F(u, v)H(u, v) $$ $H$ \u4e0e $F$ \u7684\u76f8\u4e58\u6d89\u53ca\u4e8c\u7ef4\u51fd\u6570, \u5e76\u5728\u9010\u5143\u7d20\u7684\u57fa\u7840\u4e0a\u5b9a\u4e49. \u5373: $H$ \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e58\u4ee5 $F$ \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20, $H$ \u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e58\u4ee5 $F$ \u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20, \u4ee5\u6b64\u7c7b\u63a8.","title":"\u9891\u57df\u4e2d\u7684\u6ee4\u6ce2\u57fa\u7840"},{"location":"content/cv/frequency_filter/#_3","text":"# \u56fe\u50cf\u7684\u5085\u91cc\u53f6\u53d8\u6362\u4e0e\u53cd\u53d8\u6362 import numpy as np import scipy.misc import PIL.Image import matplotlib.pyplot as plt im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) rows, cols = im_mat.shape # \u6269\u5c55 M * N \u56fe\u50cf\u5230 2M * 2N im_mat_ext = np.zeros((rows * 2, cols * 2)) for i in range(rows): for j in range(cols): im_mat_ext[i][j] = im_mat[i][j] # \u5085\u91cc\u53f6\u53d8\u6362 im_mat_fu = np.fft.fft2(im_mat_ext) # \u5c06\u4f4e\u9891\u4fe1\u53f7\u79fb\u690d\u4e2d\u95f4, \u7b49\u6548\u4e8e\u5728\u65f6\u57df\u4e0a\u5bf9 f(x, y) \u4e58\u4ee5 (-1)^(m + n) im_mat_fu = np.fft.fftshift(im_mat_fu) # \u663e\u793a\u539f\u56fe plt.subplot(121) plt.imshow(im_mat, 'gray') plt.title('original') plt.subplot(122) # \u5728\u663e\u793a\u9891\u7387\u8c31\u4e4b\u524d, \u5bf9\u9891\u7387\u8c31\u53d6\u5b9e\u90e8\u5e76\u8fdb\u884c\u5bf9\u6570\u53d8\u6362 plt.imshow(np.log(np.abs(im_mat_fu)), 'gray') plt.title('fourier') plt.show() # \u5085\u91cc\u53f6\u53cd\u53d8\u6362 im_converted_mat = np.fft.ifft2(np.fft.ifftshift(im_mat_fu)) # \u5f97\u5230\u5085\u91cc\u53f6\u53cd\u53d8\u6362\u7ed3\u679c\u7684\u5b9e\u90e8 im_converted_mat = np.abs(im_converted_mat) # \u63d0\u53d6\u5de6\u4e0a\u8c61\u9650 im_converted_mat = im_converted_mat[0:rows, 0:cols] # \u663e\u793a\u56fe\u50cf im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u56fe\u50cf\u4e0e\u5176\u9891\u7387\u8c31\u56fe\u50cf:","title":"\u76f8\u5173\u4ee3\u7801"},{"location":"content/cv/frequency_filter_br_bp/","text":"\u5e26\u963b\u548c\u5e26\u901a\u6ee4\u6ce2 \u5e26\u963b\u6ee4\u6ce2\u5668(BR)\u4f20\u9012\u51fd\u6570: \\ \u7406\u60f3 \u5df4\u7279\u6c83\u65af \u9ad8\u65af H $$H(u, v) = \\begin{cases} 0 & D_0 - \\frac{W}{2} \\le D \\le D_0 + \\frac{W}{2} \\\\ 1 & \\text else \\end{cases}$$ $$H(u, v) = \\frac{1}{1 + [\\frac{DW}{D^2 - D_0^2}]^{2n}}$$ $$H(u, v) = 1 - e^-[\\frac{D^2 - D_0^2}{DW}]^2$$ \u5176\u4e2d $W$ \u662f\u5e26\u5bbd, $D$ \u662f $D(u, v)$ \u8ddd\u79bb\u6ee4\u6ce2\u4e2d\u5fc3\u7684\u8ddd\u79bb, $D_0$ \u662f\u622a\u6b62\u9891\u7387, $n$ \u662f\u5df4\u7279\u6c83\u65af\u6ee4\u6ce2\u5668\u7684\u9636\u6570. \u4e00\u4e2a\u5e26\u901a\u6ee4\u6ce2\u5668(BP) \u7684\u4f20\u9012\u51fd\u6570\u662f $$ H_{BP}(u, v) = 1 - H_{BR}(u, v) $$","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u9891\u57df\u6ee4\u6ce2-\u5e26\u963b\u548c\u5e26\u901a\u6ee4\u6ce2"},{"location":"content/cv/frequency_filter_br_bp/#_1","text":"\u5e26\u963b\u6ee4\u6ce2\u5668(BR)\u4f20\u9012\u51fd\u6570: \\ \u7406\u60f3 \u5df4\u7279\u6c83\u65af \u9ad8\u65af H $$H(u, v) = \\begin{cases} 0 & D_0 - \\frac{W}{2} \\le D \\le D_0 + \\frac{W}{2} \\\\ 1 & \\text else \\end{cases}$$ $$H(u, v) = \\frac{1}{1 + [\\frac{DW}{D^2 - D_0^2}]^{2n}}$$ $$H(u, v) = 1 - e^-[\\frac{D^2 - D_0^2}{DW}]^2$$ \u5176\u4e2d $W$ \u662f\u5e26\u5bbd, $D$ \u662f $D(u, v)$ \u8ddd\u79bb\u6ee4\u6ce2\u4e2d\u5fc3\u7684\u8ddd\u79bb, $D_0$ \u662f\u622a\u6b62\u9891\u7387, $n$ \u662f\u5df4\u7279\u6c83\u65af\u6ee4\u6ce2\u5668\u7684\u9636\u6570. \u4e00\u4e2a\u5e26\u901a\u6ee4\u6ce2\u5668(BP) \u7684\u4f20\u9012\u51fd\u6570\u662f $$ H_{BP}(u, v) = 1 - H_{BR}(u, v) $$","title":"\u5e26\u963b\u548c\u5e26\u901a\u6ee4\u6ce2"},{"location":"content/cv/frequency_filter_hpf/","text":"\u9ad8\u901a\u6ee4\u6ce2 \u5728 \u4f4e\u901a\u6ee4\u6ce2 \u4e2d\u6211\u4eec\u8bf4\u660e\u4e86\u901a\u8fc7\u8870\u51cf\u56fe\u50cf\u5085\u91cc\u53f6\u53d8\u6362\u7684\u9ad8\u9891\u4fe1\u53f7\u53ef\u4ee5\u5e73\u6ed1\u56fe\u50cf. \u56e0\u4e3a\u8fb9\u7f18\u548c\u5176\u4ed6\u7070\u5ea6\u6025\u5267\u53d8\u5316\u7684\u533a\u57df\u4e0e\u9ad8\u9891\u5206\u91cf\u6709\u5173, \u6240\u4ee5\u56fe\u50cf\u7684\u9510\u5316\u53ef\u4ee5\u901a\u8fc7\u5728\u9891\u7387\u57df\u7684\u9ad8\u901a\u6ee4\u6ce2\u5b9e\u73b0. \u4e00\u4e2a\u9ad8\u901a\u6ee4\u6ce2\u5668\u662f\u4ece\u7ed9\u5b9a\u7684\u4f4e\u901a\u6ee4\u6ce2\u5668\u7528\u4e0b\u5f0f\u5f97\u5230: $$ H_{HP}(u, v) = 1 - H_{LP}(u, v) $$ \u5176\u4e2d $H_{LP}(u, v)$ \u662f\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u4f20\u9012\u51fd\u6570. \u540c\u6837\u7684, \u9ad8\u901a\u6ee4\u6ce2\u5668\u4e5f\u6709\u7406\u60f3(IHPF), \u5df4\u7279\u6c83\u65af(BHPF)\u548c\u9ad8\u65af\u9ad8\u901a\u6ee4\u6ce2\u5668(GHPF). \u4e09\u79cd\u9ad8\u901a\u6ee4\u6ce2\u5668\u4f20\u9012\u51fd\u6570\u5982\u4e0b\u8868\u6240\u793a: \\ \u7406\u60f3 \u5df4\u7279\u6c83\u65af \u9ad8\u65af H $$H(u, v) = \\begin{cases} 0 & D(u, v) \\le D_0 \\\\ 1 & D(u, v) > D_0 \\\\ \\end{cases}$$ $$H(u, v) = \\frac{1}{1 + [D_0 / D(u, v)]^{2n}}$$ $$H(u, v) = 1 - e^{-D^2(u, v) / 2D_0^2}$$ \u5b9e\u9a8c\u7ed3\u679c \u4f7f\u7528 $n=2$ \u9636, \u622a\u6b62\u9891\u7387\u4e3a 20 \u7684\u5df4\u7279\u6c83\u65af\u9ad8\u901a\u6ee4\u6ce2\u5668\u5904\u7406\u540e\u7684\u7ed3\u679c\u5982\u4e0b: # \u5b9e\u9a8c\u4ee3\u7801 import numpy as np import PIL.Image import scipy.misc def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 20 d0 = 20 # 2 \u9636\u5df4\u7279\u6c83\u65af n = 2 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 if duv == 0: h[u][v] = 0 else: h[u][v] = 1 / ((1 + (d0 / duv)) ** (2*n)) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u9891\u57df\u6ee4\u6ce2-\u9ad8\u901a\u6ee4\u6ce2"},{"location":"content/cv/frequency_filter_hpf/#_1","text":"\u5728 \u4f4e\u901a\u6ee4\u6ce2 \u4e2d\u6211\u4eec\u8bf4\u660e\u4e86\u901a\u8fc7\u8870\u51cf\u56fe\u50cf\u5085\u91cc\u53f6\u53d8\u6362\u7684\u9ad8\u9891\u4fe1\u53f7\u53ef\u4ee5\u5e73\u6ed1\u56fe\u50cf. \u56e0\u4e3a\u8fb9\u7f18\u548c\u5176\u4ed6\u7070\u5ea6\u6025\u5267\u53d8\u5316\u7684\u533a\u57df\u4e0e\u9ad8\u9891\u5206\u91cf\u6709\u5173, \u6240\u4ee5\u56fe\u50cf\u7684\u9510\u5316\u53ef\u4ee5\u901a\u8fc7\u5728\u9891\u7387\u57df\u7684\u9ad8\u901a\u6ee4\u6ce2\u5b9e\u73b0. \u4e00\u4e2a\u9ad8\u901a\u6ee4\u6ce2\u5668\u662f\u4ece\u7ed9\u5b9a\u7684\u4f4e\u901a\u6ee4\u6ce2\u5668\u7528\u4e0b\u5f0f\u5f97\u5230: $$ H_{HP}(u, v) = 1 - H_{LP}(u, v) $$ \u5176\u4e2d $H_{LP}(u, v)$ \u662f\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u4f20\u9012\u51fd\u6570. \u540c\u6837\u7684, \u9ad8\u901a\u6ee4\u6ce2\u5668\u4e5f\u6709\u7406\u60f3(IHPF), \u5df4\u7279\u6c83\u65af(BHPF)\u548c\u9ad8\u65af\u9ad8\u901a\u6ee4\u6ce2\u5668(GHPF). \u4e09\u79cd\u9ad8\u901a\u6ee4\u6ce2\u5668\u4f20\u9012\u51fd\u6570\u5982\u4e0b\u8868\u6240\u793a: \\ \u7406\u60f3 \u5df4\u7279\u6c83\u65af \u9ad8\u65af H $$H(u, v) = \\begin{cases} 0 & D(u, v) \\le D_0 \\\\ 1 & D(u, v) > D_0 \\\\ \\end{cases}$$ $$H(u, v) = \\frac{1}{1 + [D_0 / D(u, v)]^{2n}}$$ $$H(u, v) = 1 - e^{-D^2(u, v) / 2D_0^2}$$","title":"\u9ad8\u901a\u6ee4\u6ce2"},{"location":"content/cv/frequency_filter_hpf/#_2","text":"\u4f7f\u7528 $n=2$ \u9636, \u622a\u6b62\u9891\u7387\u4e3a 20 \u7684\u5df4\u7279\u6c83\u65af\u9ad8\u901a\u6ee4\u6ce2\u5668\u5904\u7406\u540e\u7684\u7ed3\u679c\u5982\u4e0b: # \u5b9e\u9a8c\u4ee3\u7801 import numpy as np import PIL.Image import scipy.misc def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 20 d0 = 20 # 2 \u9636\u5df4\u7279\u6c83\u65af n = 2 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 if duv == 0: h[u][v] = 0 else: h[u][v] = 1 / ((1 + (d0 / duv)) ** (2*n)) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u5b9e\u9a8c\u7ed3\u679c"},{"location":"content/cv/frequency_filter_lpf/","text":"\u4f4e\u901a\u6ee4\u6ce2 \u4e00\u5e45\u56fe\u50cf\u7684\u8fb9\u7f18\u548c\u5176\u4ed6\u5c16\u9510\u7684\u7070\u5ea6\u8f6c\u6362\u5bf9\u5176\u5085\u91cc\u53f6\u53d8\u6362\u7684\u9ad8\u9891\u4fe1\u53f7\u6709\u8d21\u732e. \u56e0\u6b64, \u5728\u9891\u57df\u5e73\u6ed1(\u6a21\u7cca)\u53ef\u901a\u8fc7\u5bf9\u9ad8\u9891\u4fe1\u53f7\u7684\u8870\u51cf\u6765\u8fbe\u5230. \u56e0\u4e3a $F(u, v)$ \u7684\u4e2d\u5fc3\u90e8\u5206\u4e3a\u4f4e\u9891\u4fe1\u53f7, \u8fb9\u7f18\u90e8\u5206\u4e3a\u9ad8\u9891\u4fe1\u53f7, \u5982\u679c\u5c06 $F(u, v)$ \u8fb9\u7f18\u90e8\u5206\u5c4f\u853d, \u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u8fdb\u884c\u4e86\u4f4e\u901a\u6ee4\u6ce2. \u8003\u8651\u4e09\u79cd\u6ee4\u6ce2\u5668: \u7406\u60f3\u6ee4\u6ce2\u5668, \u5df4\u7279\u6c83\u65af\u6ee4\u6ce2\u5668\u548c\u9ad8\u65af\u6ee4\u6ce2\u5668. \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668 \u5728\u4ee5\u539f\u70b9\u4e3a\u5706\u5fc3, $D_0$ \u4e3a\u534a\u5f84\u7684\u5706\u5185, \u65e0\u8870\u51cf\u7684\u901a\u8fc7\u6240\u6709\u9891\u7387, \u800c\u5728\u8be5\u5706\u5916\u963b\u65ad\u6240\u6709\u9891\u7387\u7684\u6ee4\u6ce2\u5668\u79f0\u4e3a\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668(ILPF). \u5b83\u7531\u4e0b\u9762\u7684\u51fd\u6570\u6240\u51b3\u5b9a: $$ H(u, v) = \\begin{cases} 1 & D(u, v) < D_0 \\\\ 0 & D(u, v) >= D_0 \\end{cases} $$ \u5176\u4e2d, $D_0$ \u4e3a\u4e00\u4e2a\u6b63\u5e38\u6570(\u79f0\u4e3a\u622a\u6b62\u9891\u7387), $D(u, v)$ \u662f\u9891\u7387\u57df\u4e2d\u5fc3\u70b9 $(u, v)$ \u4e0e\u9891\u7387\u77e9\u5f62\u4e2d\u5fc3\u7684\u8ddd\u79bb. # \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u4ee3\u7801\u5b9e\u73b0 import numpy as np import PIL.Image import scipy.misc def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = duv < d0 s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u5982\u4e0a\u56fe\u6240\u793a, \u4f7f\u7528\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u53ef\u4ee5\u770b\u5230\u660e\u663e\u7684\u632f\u94c3\u72b6\u6ce2\u7eb9, \u56e0\u6b64\u5e94\u7528\u4e2d\u5f88\u5c11\u91c7\u7528\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668. \u5df4\u7279\u6c83\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668 \u622a\u6b62\u9891\u7387\u4f4d\u4e8e\u8ddd\u539f\u70b9 $D_0$ \u5904\u7684 n \u9636\u5df4\u7279\u6c83\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668(BLPF)\u7684\u4f20\u9012\u51fd\u6570\u4e3a $$ H(u, v) = \\frac{1}{1 + [D(u, v) / D_0]^{2n}} $$ \u4e0e ILPF \u4e0d\u540c, BLPF \u4f20\u9012\u51fd\u6570\u5e76\u6ca1\u6709\u5728\u901a\u8fc7\u9891\u7387\u4e0e\u6ee4\u9664\u9891\u7387\u4e4b\u95f4\u7ed9\u51fa\u660e\u663e\u622a\u6b62\u7684\u5c16\u9510\u7684\u4e0d\u8fde\u7eed\u6027. \u5bf9\u4e8e\u5177\u6709\u5e73\u6ed1\u4f20\u9012\u51fd\u6570\u7684\u6ee4\u6ce2\u5668, \u53ef\u5728\u8fd9\u6837\u4e00\u70b9\u4e0a\u5b9a\u4e49\u622a\u6b62\u9891\u7387, \u5373\u4f7f $H(u, v)$ \u4e0b\u964d\u4e3a\u5176\u6700\u5927\u503c\u7684\u67d0\u4e2a\u767e\u5206\u6bd4\u7684\u70b9(\u5982 50%). # \u5c06\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684 convert_2d \u51fd\u6570\u4fee\u6539\u4e00\u4e0b def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # 2 \u9636\u5df4\u7279\u6c83\u65af n = 2 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = 1 / ((1 + (duv / d0)) ** (2*n)) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) \u5f52\u529f\u4e8e\u8fd9\u79cd\u6ee4\u6ce2\u5668\u5728\u4f4e\u9891\u5230\u9ad8\u9891\u4e4b\u95f4\u7684\u5e73\u6ed1\u8fc7\u6e21, BLPF \u6ca1\u6709\u4ea7\u751f\u53ef\u89c1\u7684\u632f\u94c3\u6548\u679c. \u9ad8\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668 \u9ad8\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668(GLPF)\u7684\u4f20\u9012\u51fd\u6570\u4e3a $$ H(u, v) = e^{-D^2(u, v) / 2D_0^2} $$ \u5176\u4e2d, $D_0$ \u662f\u622a\u6b62\u9891\u7387, \u5f53 $D(u, v) = D_0$ \u65f6\u5019, GLPF \u4e0b\u964d\u5230\u6700\u5927\u503c\u7684 0.607 \u5904. # \u5c06\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684 convert_2d \u51fd\u6570\u4fee\u6539\u4e00\u4e0b def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = np.e ** (-duv**2 / d0 ** 2) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8)","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u9891\u57df\u6ee4\u6ce2-\u4f4e\u901a\u6ee4\u6ce2"},{"location":"content/cv/frequency_filter_lpf/#_1","text":"\u4e00\u5e45\u56fe\u50cf\u7684\u8fb9\u7f18\u548c\u5176\u4ed6\u5c16\u9510\u7684\u7070\u5ea6\u8f6c\u6362\u5bf9\u5176\u5085\u91cc\u53f6\u53d8\u6362\u7684\u9ad8\u9891\u4fe1\u53f7\u6709\u8d21\u732e. \u56e0\u6b64, \u5728\u9891\u57df\u5e73\u6ed1(\u6a21\u7cca)\u53ef\u901a\u8fc7\u5bf9\u9ad8\u9891\u4fe1\u53f7\u7684\u8870\u51cf\u6765\u8fbe\u5230. \u56e0\u4e3a $F(u, v)$ \u7684\u4e2d\u5fc3\u90e8\u5206\u4e3a\u4f4e\u9891\u4fe1\u53f7, \u8fb9\u7f18\u90e8\u5206\u4e3a\u9ad8\u9891\u4fe1\u53f7, \u5982\u679c\u5c06 $F(u, v)$ \u8fb9\u7f18\u90e8\u5206\u5c4f\u853d, \u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u8fdb\u884c\u4e86\u4f4e\u901a\u6ee4\u6ce2. \u8003\u8651\u4e09\u79cd\u6ee4\u6ce2\u5668: \u7406\u60f3\u6ee4\u6ce2\u5668, \u5df4\u7279\u6c83\u65af\u6ee4\u6ce2\u5668\u548c\u9ad8\u65af\u6ee4\u6ce2\u5668.","title":"\u4f4e\u901a\u6ee4\u6ce2"},{"location":"content/cv/frequency_filter_lpf/#_2","text":"\u5728\u4ee5\u539f\u70b9\u4e3a\u5706\u5fc3, $D_0$ \u4e3a\u534a\u5f84\u7684\u5706\u5185, \u65e0\u8870\u51cf\u7684\u901a\u8fc7\u6240\u6709\u9891\u7387, \u800c\u5728\u8be5\u5706\u5916\u963b\u65ad\u6240\u6709\u9891\u7387\u7684\u6ee4\u6ce2\u5668\u79f0\u4e3a\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668(ILPF). \u5b83\u7531\u4e0b\u9762\u7684\u51fd\u6570\u6240\u51b3\u5b9a: $$ H(u, v) = \\begin{cases} 1 & D(u, v) < D_0 \\\\ 0 & D(u, v) >= D_0 \\end{cases} $$ \u5176\u4e2d, $D_0$ \u4e3a\u4e00\u4e2a\u6b63\u5e38\u6570(\u79f0\u4e3a\u622a\u6b62\u9891\u7387), $D(u, v)$ \u662f\u9891\u7387\u57df\u4e2d\u5fc3\u70b9 $(u, v)$ \u4e0e\u9891\u7387\u77e9\u5f62\u4e2d\u5fc3\u7684\u8ddd\u79bb. # \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u4ee3\u7801\u5b9e\u73b0 import numpy as np import PIL.Image import scipy.misc def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = duv < d0 s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u5982\u4e0a\u56fe\u6240\u793a, \u4f7f\u7528\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u53ef\u4ee5\u770b\u5230\u660e\u663e\u7684\u632f\u94c3\u72b6\u6ce2\u7eb9, \u56e0\u6b64\u5e94\u7528\u4e2d\u5f88\u5c11\u91c7\u7528\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668.","title":"\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668"},{"location":"content/cv/frequency_filter_lpf/#_3","text":"\u622a\u6b62\u9891\u7387\u4f4d\u4e8e\u8ddd\u539f\u70b9 $D_0$ \u5904\u7684 n \u9636\u5df4\u7279\u6c83\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668(BLPF)\u7684\u4f20\u9012\u51fd\u6570\u4e3a $$ H(u, v) = \\frac{1}{1 + [D(u, v) / D_0]^{2n}} $$ \u4e0e ILPF \u4e0d\u540c, BLPF \u4f20\u9012\u51fd\u6570\u5e76\u6ca1\u6709\u5728\u901a\u8fc7\u9891\u7387\u4e0e\u6ee4\u9664\u9891\u7387\u4e4b\u95f4\u7ed9\u51fa\u660e\u663e\u622a\u6b62\u7684\u5c16\u9510\u7684\u4e0d\u8fde\u7eed\u6027. \u5bf9\u4e8e\u5177\u6709\u5e73\u6ed1\u4f20\u9012\u51fd\u6570\u7684\u6ee4\u6ce2\u5668, \u53ef\u5728\u8fd9\u6837\u4e00\u70b9\u4e0a\u5b9a\u4e49\u622a\u6b62\u9891\u7387, \u5373\u4f7f $H(u, v)$ \u4e0b\u964d\u4e3a\u5176\u6700\u5927\u503c\u7684\u67d0\u4e2a\u767e\u5206\u6bd4\u7684\u70b9(\u5982 50%). # \u5c06\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684 convert_2d \u51fd\u6570\u4fee\u6539\u4e00\u4e0b def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # 2 \u9636\u5df4\u7279\u6c83\u65af n = 2 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = 1 / ((1 + (duv / d0)) ** (2*n)) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) \u5f52\u529f\u4e8e\u8fd9\u79cd\u6ee4\u6ce2\u5668\u5728\u4f4e\u9891\u5230\u9ad8\u9891\u4e4b\u95f4\u7684\u5e73\u6ed1\u8fc7\u6e21, BLPF \u6ca1\u6709\u4ea7\u751f\u53ef\u89c1\u7684\u632f\u94c3\u6548\u679c.","title":"\u5df4\u7279\u6c83\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668"},{"location":"content/cv/frequency_filter_lpf/#_4","text":"\u9ad8\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668(GLPF)\u7684\u4f20\u9012\u51fd\u6570\u4e3a $$ H(u, v) = e^{-D^2(u, v) / 2D_0^2} $$ \u5176\u4e2d, $D_0$ \u662f\u622a\u6b62\u9891\u7387, \u5f53 $D(u, v) = D_0$ \u65f6\u5019, GLPF \u4e0b\u964d\u5230\u6700\u5927\u503c\u7684 0.607 \u5904. # \u5c06\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684 convert_2d \u51fd\u6570\u4fee\u6539\u4e00\u4e0b def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = np.e ** (-duv**2 / d0 ** 2) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8)","title":"\u9ad8\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668"},{"location":"content/cv/histogram_equalization/","text":"\u76f4\u65b9\u56fe\u5747\u8861\u5316 \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5904\u7406\u7684\u4e2d\u5fc3\u601d\u60f3\u662f\u628a\u539f\u59cb\u56fe\u50cf\u7684\u7070\u5ea6\u76f4\u65b9\u56fe\u4ece\u6bd4\u8f83\u96c6\u4e2d\u7684\u67d0\u4e2a\u7070\u5ea6\u533a\u95f4\u53d8\u6210\u5728\u5168\u90e8\u7070\u5ea6\u8303\u56f4\u5185\u7684\u5747\u5300\u5206\u5e03. \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5c31\u662f\u5bf9\u56fe\u50cf\u8fdb\u884c\u975e\u7ebf\u6027\u62c9\u4f38, \u91cd\u65b0\u5206\u914d\u56fe\u50cf\u50cf\u7d20\u503c, \u4f7f\u4e00\u5b9a\u7070\u5ea6\u8303\u56f4\u5185\u7684\u50cf\u7d20\u6570\u91cf\u5927\u81f4\u76f8\u540c. \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5c31\u662f\u628a\u7ed9\u5b9a\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u5206\u5e03\u6539\u53d8\u6210\"\u5747\u5300\"\u5206\u5e03\u76f4\u65b9\u56fe\u5206\u5e03. \u5047\u8bbe\u8f93\u5165\u662f\u4e00\u5f20 8 \u6bd4\u7279\u7070\u5ea6\u56fe(\u5373\u7070\u5ea6\u7ea7\u4e3a 0 \u81f3 255), \u5219\u4efb\u610f\u7070\u5ea6\u7ea7\u7684\u6982\u7387\u51fd\u6570\u4e3a $$ P(r_k) = n_k/n, k \\in 0-255 $$ \u5176\u4e2d $n_k$ \u4e3a\u7070\u5ea6\u7ea7\u4e3a k \u7684\u50cf\u7d20\u4e2a\u6570, n \u4e3a\u603b\u50cf\u7d20\u4e2a\u6570. \u8bbe\u8f6c\u6362\u51fd\u6570\u4e3a T, \u5219 $$ s_k = T(r_k) = 255 \\sum_{j=0}^k\\frac{n_j}{n} $$ \u4ee3\u7801\u5b9e\u73b0 import matplotlib.pyplot as plt import numpy as np import PIL.Image import scipy.misc def convert_2d(r): x = np.zeros([256]) for i in range(r.shape[0]): for j in range(r.shape[1]): x[r[i][j]] += 1 x = x / r.size sum_x = np.zeros([256]) for i, _ in enumerate(x): sum_x[i] = sum(x[:i]) s = np.empty(r.shape, dtype=np.uint8) for i in range(r.shape[0]): for j in range(r.shape[1]): s[i][j] = 255 * sum_x[r[i][j]] return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) # \u663e\u793a\u8f93\u5165\u76f4\u65b9\u56fe plt.hist(im_mat.reshape([im_mat.size]), 256, normed=1) plt.show() im_converted_mat = convert_2d(im_mat) # \u663e\u793a\u8f93\u51fa\u76f4\u65b9\u56fe plt.hist(im_converted_mat.reshape([im_converted_mat.size]), 256, normed=1) plt.show() im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u5b9e\u9a8c\u7ed3\u679c \u539f\u59cb\u76f4\u65b9\u56fe \u76f4\u65b9\u56fe\u5747\u8861\u5316\u540e\u7684\u76f4\u65b9\u56fe, \u53ef\u4ee5\u770b\u5230\u56fe\u50cf\u5206\u5e03\u53d8\u5f97\u5747\u5300","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u76f4\u65b9\u56fe\u5747\u8861\u5316"},{"location":"content/cv/histogram_equalization/#_1","text":"\u76f4\u65b9\u56fe\u5747\u8861\u5316\u5904\u7406\u7684\u4e2d\u5fc3\u601d\u60f3\u662f\u628a\u539f\u59cb\u56fe\u50cf\u7684\u7070\u5ea6\u76f4\u65b9\u56fe\u4ece\u6bd4\u8f83\u96c6\u4e2d\u7684\u67d0\u4e2a\u7070\u5ea6\u533a\u95f4\u53d8\u6210\u5728\u5168\u90e8\u7070\u5ea6\u8303\u56f4\u5185\u7684\u5747\u5300\u5206\u5e03. \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5c31\u662f\u5bf9\u56fe\u50cf\u8fdb\u884c\u975e\u7ebf\u6027\u62c9\u4f38, \u91cd\u65b0\u5206\u914d\u56fe\u50cf\u50cf\u7d20\u503c, \u4f7f\u4e00\u5b9a\u7070\u5ea6\u8303\u56f4\u5185\u7684\u50cf\u7d20\u6570\u91cf\u5927\u81f4\u76f8\u540c. \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5c31\u662f\u628a\u7ed9\u5b9a\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u5206\u5e03\u6539\u53d8\u6210\"\u5747\u5300\"\u5206\u5e03\u76f4\u65b9\u56fe\u5206\u5e03. \u5047\u8bbe\u8f93\u5165\u662f\u4e00\u5f20 8 \u6bd4\u7279\u7070\u5ea6\u56fe(\u5373\u7070\u5ea6\u7ea7\u4e3a 0 \u81f3 255), \u5219\u4efb\u610f\u7070\u5ea6\u7ea7\u7684\u6982\u7387\u51fd\u6570\u4e3a $$ P(r_k) = n_k/n, k \\in 0-255 $$ \u5176\u4e2d $n_k$ \u4e3a\u7070\u5ea6\u7ea7\u4e3a k \u7684\u50cf\u7d20\u4e2a\u6570, n \u4e3a\u603b\u50cf\u7d20\u4e2a\u6570. \u8bbe\u8f6c\u6362\u51fd\u6570\u4e3a T, \u5219 $$ s_k = T(r_k) = 255 \\sum_{j=0}^k\\frac{n_j}{n} $$","title":"\u76f4\u65b9\u56fe\u5747\u8861\u5316"},{"location":"content/cv/histogram_equalization/#_2","text":"import matplotlib.pyplot as plt import numpy as np import PIL.Image import scipy.misc def convert_2d(r): x = np.zeros([256]) for i in range(r.shape[0]): for j in range(r.shape[1]): x[r[i][j]] += 1 x = x / r.size sum_x = np.zeros([256]) for i, _ in enumerate(x): sum_x[i] = sum(x[:i]) s = np.empty(r.shape, dtype=np.uint8) for i in range(r.shape[0]): for j in range(r.shape[1]): s[i][j] = 255 * sum_x[r[i][j]] return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) # \u663e\u793a\u8f93\u5165\u76f4\u65b9\u56fe plt.hist(im_mat.reshape([im_mat.size]), 256, normed=1) plt.show() im_converted_mat = convert_2d(im_mat) # \u663e\u793a\u8f93\u51fa\u76f4\u65b9\u56fe plt.hist(im_converted_mat.reshape([im_converted_mat.size]), 256, normed=1) plt.show() im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/histogram_equalization/#_3","text":"\u539f\u59cb\u76f4\u65b9\u56fe \u76f4\u65b9\u56fe\u5747\u8861\u5316\u540e\u7684\u76f4\u65b9\u56fe, \u53ef\u4ee5\u770b\u5230\u56fe\u50cf\u5206\u5e03\u53d8\u5f97\u5747\u5300","title":"\u5b9e\u9a8c\u7ed3\u679c"},{"location":"content/cv/macaron_color/","text":"\u9a6c\u5361\u9f99\u8272 \u8ba9\u4eba\u770b\u4e86\u975e\u5e38\u8212\u670d\u7684 10 \u79cd\u989c\u8272, \u636e\u8bf4\u6765\u81ea\u9a6c\u5361\u9f99. \u6536\u85cf\u8bb0\u5f55\u4e00\u4e0b\u4ee5\u5907\u4e0d\u65f6\u4e4b\u9700, \u8fd9\u5341\u79cd\u989c\u8272\u5206\u522b\u662f: #19CAAD #19CAAD #8CC7B5 #8CC7B5 #A0EEE1 #A0EEE1 #BEE7E9 #BEE7E9 #BEEDC7 #BEEDC7 #D6D5B7 #D6D5B7 #D1BA74 #D1BA74 #E6CEAC #E6CEAC #ECAD9E #ECAD9E #F4606C #F4606C","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u9a6c\u5361\u9f99\u8272"},{"location":"content/cv/macaron_color/#_1","text":"\u8ba9\u4eba\u770b\u4e86\u975e\u5e38\u8212\u670d\u7684 10 \u79cd\u989c\u8272, \u636e\u8bf4\u6765\u81ea\u9a6c\u5361\u9f99. \u6536\u85cf\u8bb0\u5f55\u4e00\u4e0b\u4ee5\u5907\u4e0d\u65f6\u4e4b\u9700, \u8fd9\u5341\u79cd\u989c\u8272\u5206\u522b\u662f: #19CAAD #19CAAD #8CC7B5 #8CC7B5 #A0EEE1 #A0EEE1 #BEE7E9 #BEE7E9 #BEEDC7 #BEEDC7 #D6D5B7 #D6D5B7 #D1BA74 #D1BA74 #E6CEAC #E6CEAC #ECAD9E #ECAD9E #F4606C #F4606C","title":"\u9a6c\u5361\u9f99\u8272"},{"location":"content/cv/mean/","text":"\u56fe\u50cf\u5747\u503c \u5728 PIL \u4e2d, \u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u83b7\u53d6\u56fe\u50cf\u5747\u503c: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean print(mean) # [98.61, 97.29, 100.91, 255.0], \u6bcf\u4e00\u9879\u5206\u522b\u4ee3\u8868 RGBA \u56fe\u50cf\u5747\u503c\u5728\u4ee5\u4e0b\u65b9\u9762\u6709\u91cd\u8981\u610f\u4e49: \u7279\u5f81\u6807\u51c6\u5316 . \u5bf9\u4e8e\u56fe\u50cf, \u9010\u50cf\u7d20\u51cf\u53bb\u5747\u503c, \u8fd9\u79cd\u5f52\u4e00\u5316\u53ef\u4ee5\u79fb\u9664\u56fe\u50cf\u7684\u5e73\u5747\u4eae\u5ea6\u503c. \u5f88\u591a\u60c5\u51b5\u4e0b\u6211\u4eec\u5bf9\u56fe\u50cf\u7684\u7167\u5ea6\u5e76\u4e0d\u611f\u5174\u8da3, \u800c\u66f4\u591a\u5730\u5173\u6ce8\u5176\u5185\u5bb9, \u8fd9\u65f6\u5bf9\u6bcf\u4e2a \u6570\u636e\u70b9\u79fb\u9664\u50cf\u7d20\u7684\u5747\u503c\u662f\u6709\u610f\u4e49\u7684. \u6ce8\u610f: \u867d\u7136\u8be5\u65b9\u6cd5\u5e7f\u6cdb\u5730\u5e94\u7528\u4e8e\u56fe\u50cf, \u4f46\u5728\u5904\u7406\u5f69\u8272\u56fe\u50cf\u65f6\u9700\u8981\u683c\u5916\u5c0f\u5fc3, \u5177\u4f53\u6765\u8bf4, \u662f\u56e0\u4e3a\u4e0d\u540c\u8272\u5f69\u901a\u9053\u4e2d\u7684\u50cf\u7d20\u5e76\u4e0d\u90fd\u5b58\u5728\u5e73\u7a33\u7279\u6027. \u5728 \u56fe\u50cf\u5904\u7406-\u5b57\u7b26\u753b \u4e00\u6587\u4e2d\u6709\u4f7f\u7528\u4f8b\u7a0b. \u5747\u503c\u6ee4\u6ce2 . \u5747\u503c\u6ee4\u6ce2\u662f\u5178\u578b\u7684\u7ebf\u6027\u6ee4\u6ce2\u7b97\u6cd5, \u5b83\u662f\u6307\u5728\u56fe\u50cf\u4e0a\u5bf9\u76ee\u6807\u50cf\u7d20\u7ed9\u4e00\u4e2a\u6a21\u677f, \u8be5\u6a21\u677f\u5305\u62ec\u4e86\u5176\u5468\u56f4\u7684\u4e34\u8fd1\u50cf\u7d20(\u4ee5\u76ee\u6807\u8c61\u7d20\u4e3a\u4e2d\u5fc3\u7684\u5468\u56f48\u4e2a\u50cf\u7d20, \u6784\u6210 \u4e00\u4e2a\u6ee4\u6ce2\u6a21\u677f, \u5373\u53bb\u6389\u76ee\u6807\u50cf\u7d20\u672c\u8eab), \u518d\u7528\u6a21\u677f\u4e2d\u7684\u5168\u4f53\u50cf\u7d20\u7684\u5e73\u5747\u503c\u6765\u4ee3\u66ff\u539f\u6765\u50cf\u7d20\u503c. \u4e3b\u9898\u8272\u63d0\u53d6 . \u50cf windows10, \u90e8\u5206\u5b9a\u5236\u5316 android \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6839\u636e\u684c\u9762\u80cc\u666f\u81ea\u52a8\u66f4\u6539\u7cfb\u7edf\u4e3b\u9898\u8272.","title":"\u56fe\u50cf\u5747\u503c"},{"location":"content/cv/mean/#_1","text":"\u5728 PIL \u4e2d, \u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u83b7\u53d6\u56fe\u50cf\u5747\u503c: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean print(mean) # [98.61, 97.29, 100.91, 255.0], \u6bcf\u4e00\u9879\u5206\u522b\u4ee3\u8868 RGBA \u56fe\u50cf\u5747\u503c\u5728\u4ee5\u4e0b\u65b9\u9762\u6709\u91cd\u8981\u610f\u4e49: \u7279\u5f81\u6807\u51c6\u5316 . \u5bf9\u4e8e\u56fe\u50cf, \u9010\u50cf\u7d20\u51cf\u53bb\u5747\u503c, \u8fd9\u79cd\u5f52\u4e00\u5316\u53ef\u4ee5\u79fb\u9664\u56fe\u50cf\u7684\u5e73\u5747\u4eae\u5ea6\u503c. \u5f88\u591a\u60c5\u51b5\u4e0b\u6211\u4eec\u5bf9\u56fe\u50cf\u7684\u7167\u5ea6\u5e76\u4e0d\u611f\u5174\u8da3, \u800c\u66f4\u591a\u5730\u5173\u6ce8\u5176\u5185\u5bb9, \u8fd9\u65f6\u5bf9\u6bcf\u4e2a \u6570\u636e\u70b9\u79fb\u9664\u50cf\u7d20\u7684\u5747\u503c\u662f\u6709\u610f\u4e49\u7684. \u6ce8\u610f: \u867d\u7136\u8be5\u65b9\u6cd5\u5e7f\u6cdb\u5730\u5e94\u7528\u4e8e\u56fe\u50cf, \u4f46\u5728\u5904\u7406\u5f69\u8272\u56fe\u50cf\u65f6\u9700\u8981\u683c\u5916\u5c0f\u5fc3, \u5177\u4f53\u6765\u8bf4, \u662f\u56e0\u4e3a\u4e0d\u540c\u8272\u5f69\u901a\u9053\u4e2d\u7684\u50cf\u7d20\u5e76\u4e0d\u90fd\u5b58\u5728\u5e73\u7a33\u7279\u6027. \u5728 \u56fe\u50cf\u5904\u7406-\u5b57\u7b26\u753b \u4e00\u6587\u4e2d\u6709\u4f7f\u7528\u4f8b\u7a0b. \u5747\u503c\u6ee4\u6ce2 . \u5747\u503c\u6ee4\u6ce2\u662f\u5178\u578b\u7684\u7ebf\u6027\u6ee4\u6ce2\u7b97\u6cd5, \u5b83\u662f\u6307\u5728\u56fe\u50cf\u4e0a\u5bf9\u76ee\u6807\u50cf\u7d20\u7ed9\u4e00\u4e2a\u6a21\u677f, \u8be5\u6a21\u677f\u5305\u62ec\u4e86\u5176\u5468\u56f4\u7684\u4e34\u8fd1\u50cf\u7d20(\u4ee5\u76ee\u6807\u8c61\u7d20\u4e3a\u4e2d\u5fc3\u7684\u5468\u56f48\u4e2a\u50cf\u7d20, \u6784\u6210 \u4e00\u4e2a\u6ee4\u6ce2\u6a21\u677f, \u5373\u53bb\u6389\u76ee\u6807\u50cf\u7d20\u672c\u8eab), \u518d\u7528\u6a21\u677f\u4e2d\u7684\u5168\u4f53\u50cf\u7d20\u7684\u5e73\u5747\u503c\u6765\u4ee3\u66ff\u539f\u6765\u50cf\u7d20\u503c. \u4e3b\u9898\u8272\u63d0\u53d6 . \u50cf windows10, \u90e8\u5206\u5b9a\u5236\u5316 android \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6839\u636e\u684c\u9762\u80cc\u666f\u81ea\u52a8\u66f4\u6539\u7cfb\u7edf\u4e3b\u9898\u8272.","title":"\u56fe\u50cf\u5747\u503c"},{"location":"content/cv/noise/","text":"\u4e00\u4e9b\u91cd\u8981\u566a\u58f0\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u9ad8\u65af\u566a\u58f0 $$ p(z) = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-(z - \\bar z)^2 / 2\\sigma^2} $$ \u5176\u4e2d $z$ \u8868\u793a\u7070\u5ea6\u503c, $\\bar z$ \u8868\u793a $z$ \u7684\u5747\u503c, $\\sigma$ \u8868\u793a $z$ \u7684\u6807\u51c6\u5dee. \u5f53 $z$ \u670d\u4ece\u9ad8\u65af\u5206\u5e03\u65f6, \u5176\u503c\u6709 68% \u843d\u5728\u8303\u56f4 $[(\\bar z - \\sigma), (\\bar z + \\sigma)]$ \u5185, \u6709 95% \u843d\u5728\u8303\u56f4 $[(\\bar z - 2\\sigma), (\\bar z + 2\\sigma)]$ \u5185, \u745e\u5229\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{2}{b}(z-a)e^{-(z-a)^2 / b} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = a + \\sqrt{\\pi b/4}$, $\\sigma^2 = \\frac{b(4-\\pi)}{4}$ \u4f3d\u9a6c(\u7231\u5c14\u5170)\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{a^bz^{b-1}}{(b-1)!}e^{-az} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{b}{a}$, $\\sigma^2 = \\frac{b}{a^2}$ \u6307\u6570\u566a\u58f0 $$ p(z) = \\begin{cases} ae^{-az} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{1}{a}$, $\\sigma^2 = \\frac{1}{a^2}$ \u5747\u5300\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{1}{b-a} & a \\le z \\le b \\\\ 0 & \\text else \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{a+b}{2}$, $\\sigma^2 = \\frac{(b-a)^2}{12}$ \u8109\u51b2(\u6912\u76d0)\u566a\u58f0 $$ p(z) = \\begin{cases} P_a & z = a \\\\ P_b & z = b \\\\ 1-P_a-P_b & \\text else \\end{cases} $$ \u5982\u679c b > a, \u5219\u7070\u5ea6\u7ea7 b \u5728\u56fe\u50cf\u4e2d\u5c06\u663e\u793a\u4e00\u4e2a\u4eae\u70b9, \u53cd\u4e4b, \u7070\u5ea6\u7ea7 a \u5728\u56fe\u50cf\u4e2d\u5c06\u663e\u793a\u4e00\u4e2a\u6697\u70b9. \u82e5 $P_a$ \u6216 $P_b$ \u4e3a 0, \u5219\u8109\u51b2\u566a\u58f0\u79f0\u4e3a \u5355\u6781\u8109\u51b2 . \u5982\u679c $P_a$ \u548c $P_b$ \u4e24\u8005\u5747\u4e0d\u4e3a 0, \u5c24\u5176\u662f\u5b83\u4eec\u8fd1\u4f3c\u76f8\u7b49\u65f6, \u79f0 \u53cc\u6781\u8109\u51b2 , \u4e5f\u79f0\u4e3a \u6912\u76d0\u8109\u51b2 (\u56e0\u4e3a\u56fe\u50cf\u9177\u4f3c\u88ab\u968f\u673a\u6492\u4e86\u80e1\u6912\u9897\u7c92\u548c\u76d0\u7c89\u9897\u7c92). \u4f7f\u7528 numpy.random \u751f\u6210\u6307\u5b9a\u7c7b\u578b\u7684\u566a\u58f0 import matplotlib.pyplot as plt import numpy as np # \u9ad8\u65af\u566a\u58f0: \u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 x1 = np.random.normal(loc=0, scale=64, size=(256, 256)) # \u745e\u5229\u566a\u58f0: (2 / b) ** 0.5 \u4e3a 1 x2 = np.random.rayleigh(scale=64, size=(256, 256)) # \u4f3d\u9a6c\u566a\u58f0: (b-1) / a \u4e3a 2, \u653e\u5927 32 \u500d x3 = np.random.gamma(shape=2, scale=32, size=(256, 256)) # \u6307\u6570\u566a\u58f0: a = 1/32 x4 = np.random.exponential(scale=32, size=(256, 256)) # \u5747\u5300\u566a\u58f0 x5 = np.random.uniform(low=0, high=1.0, size=(256, 256)) # \u8109\u51b2\u566a\u58f0 x6 = np.random.random_integers(low=0.1, high=2.0, size=(256, 256)) for i, x in enumerate([x1, x2, x3, x4, x5, x6]): ax = plt.subplot(23 * 10 + i + 1) ax.hist(x.reshape(x.size), 64, normed=True) ax.set_yticks([]) ax.set_xticks([]) plt.show() \u8f93\u51fa\u7ed3\u679c: \u4f7f\u7528\u566a\u58f0\u9000\u5316\u539f\u56fe \u4ee3\u7801\u5927\u81f4\u4e0e \u6570\u5b57\u56fe\u50cf\u5904\u7406-\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0\u4e0e\u53bb\u566a \u4e00\u81f4.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u566a\u58f0"},{"location":"content/cv/noise/#_1","text":"\u9ad8\u65af\u566a\u58f0 $$ p(z) = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-(z - \\bar z)^2 / 2\\sigma^2} $$ \u5176\u4e2d $z$ \u8868\u793a\u7070\u5ea6\u503c, $\\bar z$ \u8868\u793a $z$ \u7684\u5747\u503c, $\\sigma$ \u8868\u793a $z$ \u7684\u6807\u51c6\u5dee. \u5f53 $z$ \u670d\u4ece\u9ad8\u65af\u5206\u5e03\u65f6, \u5176\u503c\u6709 68% \u843d\u5728\u8303\u56f4 $[(\\bar z - \\sigma), (\\bar z + \\sigma)]$ \u5185, \u6709 95% \u843d\u5728\u8303\u56f4 $[(\\bar z - 2\\sigma), (\\bar z + 2\\sigma)]$ \u5185, \u745e\u5229\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{2}{b}(z-a)e^{-(z-a)^2 / b} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = a + \\sqrt{\\pi b/4}$, $\\sigma^2 = \\frac{b(4-\\pi)}{4}$ \u4f3d\u9a6c(\u7231\u5c14\u5170)\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{a^bz^{b-1}}{(b-1)!}e^{-az} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{b}{a}$, $\\sigma^2 = \\frac{b}{a^2}$ \u6307\u6570\u566a\u58f0 $$ p(z) = \\begin{cases} ae^{-az} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{1}{a}$, $\\sigma^2 = \\frac{1}{a^2}$ \u5747\u5300\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{1}{b-a} & a \\le z \\le b \\\\ 0 & \\text else \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{a+b}{2}$, $\\sigma^2 = \\frac{(b-a)^2}{12}$ \u8109\u51b2(\u6912\u76d0)\u566a\u58f0 $$ p(z) = \\begin{cases} P_a & z = a \\\\ P_b & z = b \\\\ 1-P_a-P_b & \\text else \\end{cases} $$ \u5982\u679c b > a, \u5219\u7070\u5ea6\u7ea7 b \u5728\u56fe\u50cf\u4e2d\u5c06\u663e\u793a\u4e00\u4e2a\u4eae\u70b9, \u53cd\u4e4b, \u7070\u5ea6\u7ea7 a \u5728\u56fe\u50cf\u4e2d\u5c06\u663e\u793a\u4e00\u4e2a\u6697\u70b9. \u82e5 $P_a$ \u6216 $P_b$ \u4e3a 0, \u5219\u8109\u51b2\u566a\u58f0\u79f0\u4e3a \u5355\u6781\u8109\u51b2 . \u5982\u679c $P_a$ \u548c $P_b$ \u4e24\u8005\u5747\u4e0d\u4e3a 0, \u5c24\u5176\u662f\u5b83\u4eec\u8fd1\u4f3c\u76f8\u7b49\u65f6, \u79f0 \u53cc\u6781\u8109\u51b2 , \u4e5f\u79f0\u4e3a \u6912\u76d0\u8109\u51b2 (\u56e0\u4e3a\u56fe\u50cf\u9177\u4f3c\u88ab\u968f\u673a\u6492\u4e86\u80e1\u6912\u9897\u7c92\u548c\u76d0\u7c89\u9897\u7c92).","title":"\u4e00\u4e9b\u91cd\u8981\u566a\u58f0\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570"},{"location":"content/cv/noise/#numpyrandom","text":"import matplotlib.pyplot as plt import numpy as np # \u9ad8\u65af\u566a\u58f0: \u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 x1 = np.random.normal(loc=0, scale=64, size=(256, 256)) # \u745e\u5229\u566a\u58f0: (2 / b) ** 0.5 \u4e3a 1 x2 = np.random.rayleigh(scale=64, size=(256, 256)) # \u4f3d\u9a6c\u566a\u58f0: (b-1) / a \u4e3a 2, \u653e\u5927 32 \u500d x3 = np.random.gamma(shape=2, scale=32, size=(256, 256)) # \u6307\u6570\u566a\u58f0: a = 1/32 x4 = np.random.exponential(scale=32, size=(256, 256)) # \u5747\u5300\u566a\u58f0 x5 = np.random.uniform(low=0, high=1.0, size=(256, 256)) # \u8109\u51b2\u566a\u58f0 x6 = np.random.random_integers(low=0.1, high=2.0, size=(256, 256)) for i, x in enumerate([x1, x2, x3, x4, x5, x6]): ax = plt.subplot(23 * 10 + i + 1) ax.hist(x.reshape(x.size), 64, normed=True) ax.set_yticks([]) ax.set_xticks([]) plt.show() \u8f93\u51fa\u7ed3\u679c:","title":"\u4f7f\u7528 numpy.random \u751f\u6210\u6307\u5b9a\u7c7b\u578b\u7684\u566a\u58f0"},{"location":"content/cv/noise/#_2","text":"\u4ee3\u7801\u5927\u81f4\u4e0e \u6570\u5b57\u56fe\u50cf\u5904\u7406-\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0\u4e0e\u53bb\u566a \u4e00\u81f4.","title":"\u4f7f\u7528\u566a\u58f0\u9000\u5316\u539f\u56fe"},{"location":"content/cv/pil_image/","text":"\u5408\u5e76\u56fe\u50cf \u5408\u5e76\u56fe\u50cf\u53ef\u4ee5\u4f7f\u7528 PIL.Image.alpha_composite , PIL.Image.blend \u548c PIL.Image.composite , \u8fd9\u91cc\u7b80\u5355\u6f14\u793a\u4e0b\u7b2c\u4e00\u79cd\u65b9\u5f0f: import PIL.Image import numpy as np im = PIL.Image.open('jp.jpg') im = im.convert('RGBA') mask_mat = np.zeros((im.size[1], im.size[0], 4), dtype=np.uint8) mask_mat[:, :, 0] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0xFF mask_mat[:, :, 1] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0xCC mask_mat[:, :, 2] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0x33 mask_mat[:, :, 3] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 80 mask = PIL.Image.fromarray(mask_mat) # \u4e3a\u539f\u56fe\u50cf\u6dfb\u52a0 (0xFF, 0xCC, 0x33, 80) \u7684\u8499\u7248 im = PIL.Image.alpha_composite(im, mask) im.show() \u5bf9\u6bcf\u4e2a\u50cf\u7d20\u70b9\u8fdb\u884c\u64cd\u4f5c PIL.Image.eval \u5c06\u6307\u5b9a\u7684\u51fd\u6570\u5e94\u7528\u5728\u56fe\u50cf\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u4e4b\u4e0a. import PIL.Image im = PIL.Image.open('jp.jpg') # \u4f7f\u7528 lambda x: 255-x \u53d6\u53cd\u8272 im = PIL.Image.eval(im, lambda x: 255-x) im.show() \u5206\u79bb\u4e0e\u5408\u5e76\u901a\u9053 import PIL.Image im = PIL.Image.open('jp.jpg') # \u5206\u79bb\u6bcf\u4e2a\u901a\u9053, \u8fd4\u56de Image \u5143\u7ec4 r, g, b = im.split() # \u5408\u5e76\u591a\u4e2a\u901a\u9053, \u53c2\u6570 Image \u5143\u7ec4 im = PIL.Image.merge('RGB', (r, g, b)) # \u5982\u679c\u4f60\u53ea\u671f\u671b\u83b7\u5f97\u4e00\u4e2a\u901a\u9053\u7684 Image, \u5219\u53ef\u4ee5\u4f7f\u7528 getchannel() r = im.getchannel('R') r.show() # \u83b7\u53d6\u56fe\u50cf\u50cf\u7d20\u6570\u636e mat = list(im.getdata()) print(mat[0]) # (84, 70, 59) # \u83b7\u53d6\u56fe\u50cf\u4e00\u4e2a\u901a\u9053\u7684\u50cf\u7d20\u6570\u636e mat = list(im.getdata(0)) print(mat[0]) # 84 \u521b\u5efa\u65b0\u7684\u56fe\u50cf import PIL.Image im = PIL.Image.new('RGB', (480, 270), color=(0xFF, 0xCC, 0x33)) im.show() \u83b7\u53d6\u4e0e\u66f4\u65b0\u50cf\u7d20\u70b9 \u4f7f\u7528\u4e24\u4e2a\u65b9\u6cd5: getpixel \u4e0e putpixel . import PIL.Image im = PIL.Image.open('jp.jpg') # \u83b7\u53d6\u5176\u4e2d\u4e00\u4e2a\u50cf\u7d20\u70b9 print(im.getpixel((40, 40))) # (87, 84, 77) # \u66f4\u65b0\u5176\u4e2d\u4e00\u4e2a\u50cf\u7d20\u70b9 im.putpixel((40, 40), (0, 0, 0)) \u76f4\u65b9\u56fe import matplotlib.pyplot as plt import numpy as np import PIL.Image im = PIL.Image.open('jp.jpg') im = im.convert('L') ax = plt.subplot() ax.bar(np.arange(0, 256), im.histogram()) plt.show() \u5e94\u7528\u6ee4\u6ce2\u5668 import PIL.Image import PIL.ImageFilter im = PIL.Image.open('jp.jpg') im = im.filter(PIL.ImageFilter.GaussianBlur) # \u9ad8\u65af\u6ee4\u6ce2 im.show() \u5c5e\u6027 import PIL.Image im = PIL.Image.open('jp.jpg') print(im.filename) # jp.jpg print(im.format) # JPEG print(im.mode) # RGB print(im.size) # (480, 270) print(im.width) # 480 print(im.height) # 270 print(im.palette) # None print(im.info) # {'jfif': 257, 'jfif_version': (1, 1), 'jfif_unit': 0, 'jfif_density': (1, 1)}","title":"Pil image"},{"location":"content/cv/pil_image/#_1","text":"\u5408\u5e76\u56fe\u50cf\u53ef\u4ee5\u4f7f\u7528 PIL.Image.alpha_composite , PIL.Image.blend \u548c PIL.Image.composite , \u8fd9\u91cc\u7b80\u5355\u6f14\u793a\u4e0b\u7b2c\u4e00\u79cd\u65b9\u5f0f: import PIL.Image import numpy as np im = PIL.Image.open('jp.jpg') im = im.convert('RGBA') mask_mat = np.zeros((im.size[1], im.size[0], 4), dtype=np.uint8) mask_mat[:, :, 0] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0xFF mask_mat[:, :, 1] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0xCC mask_mat[:, :, 2] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0x33 mask_mat[:, :, 3] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 80 mask = PIL.Image.fromarray(mask_mat) # \u4e3a\u539f\u56fe\u50cf\u6dfb\u52a0 (0xFF, 0xCC, 0x33, 80) \u7684\u8499\u7248 im = PIL.Image.alpha_composite(im, mask) im.show()","title":"\u5408\u5e76\u56fe\u50cf"},{"location":"content/cv/pil_image/#_2","text":"PIL.Image.eval \u5c06\u6307\u5b9a\u7684\u51fd\u6570\u5e94\u7528\u5728\u56fe\u50cf\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u4e4b\u4e0a. import PIL.Image im = PIL.Image.open('jp.jpg') # \u4f7f\u7528 lambda x: 255-x \u53d6\u53cd\u8272 im = PIL.Image.eval(im, lambda x: 255-x) im.show()","title":"\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u70b9\u8fdb\u884c\u64cd\u4f5c"},{"location":"content/cv/pil_image/#_3","text":"import PIL.Image im = PIL.Image.open('jp.jpg') # \u5206\u79bb\u6bcf\u4e2a\u901a\u9053, \u8fd4\u56de Image \u5143\u7ec4 r, g, b = im.split() # \u5408\u5e76\u591a\u4e2a\u901a\u9053, \u53c2\u6570 Image \u5143\u7ec4 im = PIL.Image.merge('RGB', (r, g, b)) # \u5982\u679c\u4f60\u53ea\u671f\u671b\u83b7\u5f97\u4e00\u4e2a\u901a\u9053\u7684 Image, \u5219\u53ef\u4ee5\u4f7f\u7528 getchannel() r = im.getchannel('R') r.show() # \u83b7\u53d6\u56fe\u50cf\u50cf\u7d20\u6570\u636e mat = list(im.getdata()) print(mat[0]) # (84, 70, 59) # \u83b7\u53d6\u56fe\u50cf\u4e00\u4e2a\u901a\u9053\u7684\u50cf\u7d20\u6570\u636e mat = list(im.getdata(0)) print(mat[0]) # 84","title":"\u5206\u79bb\u4e0e\u5408\u5e76\u901a\u9053"},{"location":"content/cv/pil_image/#_4","text":"import PIL.Image im = PIL.Image.new('RGB', (480, 270), color=(0xFF, 0xCC, 0x33)) im.show()","title":"\u521b\u5efa\u65b0\u7684\u56fe\u50cf"},{"location":"content/cv/pil_image/#_5","text":"\u4f7f\u7528\u4e24\u4e2a\u65b9\u6cd5: getpixel \u4e0e putpixel . import PIL.Image im = PIL.Image.open('jp.jpg') # \u83b7\u53d6\u5176\u4e2d\u4e00\u4e2a\u50cf\u7d20\u70b9 print(im.getpixel((40, 40))) # (87, 84, 77) # \u66f4\u65b0\u5176\u4e2d\u4e00\u4e2a\u50cf\u7d20\u70b9 im.putpixel((40, 40), (0, 0, 0))","title":"\u83b7\u53d6\u4e0e\u66f4\u65b0\u50cf\u7d20\u70b9"},{"location":"content/cv/pil_image/#_6","text":"import matplotlib.pyplot as plt import numpy as np import PIL.Image im = PIL.Image.open('jp.jpg') im = im.convert('L') ax = plt.subplot() ax.bar(np.arange(0, 256), im.histogram()) plt.show()","title":"\u76f4\u65b9\u56fe"},{"location":"content/cv/pil_image/#_7","text":"import PIL.Image import PIL.ImageFilter im = PIL.Image.open('jp.jpg') im = im.filter(PIL.ImageFilter.GaussianBlur) # \u9ad8\u65af\u6ee4\u6ce2 im.show()","title":"\u5e94\u7528\u6ee4\u6ce2\u5668"},{"location":"content/cv/pil_image/#_8","text":"import PIL.Image im = PIL.Image.open('jp.jpg') print(im.filename) # jp.jpg print(im.format) # JPEG print(im.mode) # RGB print(im.size) # (480, 270) print(im.width) # 480 print(im.height) # 270 print(im.palette) # None print(im.info) # {'jfif': 257, 'jfif_version': (1, 1), 'jfif_unit': 0, 'jfif_density': (1, 1)}","title":"\u5c5e\u6027"},{"location":"content/cv/pil_imagechops/","text":"PIL.ImageChops \u5305\u542b\u4e00\u7cfb\u5217\u7684\u56fe\u50cf\u7b97\u672f\u64cd\u4f5c. \u52a0\u6cd5 import PIL.Image import PIL.ImageChops im1 = PIL.Image.new('RGB', (480, 270), (0, 255, 0)) im2 = PIL.Image.new('RGB', (480, 270), (255, 0, 0)) # out = ((image1 + image2) / scale + offset) im = PIL.ImageChops.add(im1, im2) im.show() # out = ((image1 + image2) % MAX) im = PIL.ImageChops.add_modulo(im1, im2) im.show() \u51cf\u6cd5 # out = ((image1 - image2) / scale + offset) im = PIL.ImageChops.subtract(im1, im2) im.show() # out = ((image1 - image2) % MAX) im = PIL.ImageChops.subtract_modulo(im1, im2) im.show() \u4e58\u6cd5 # out = image1 * image2 / MAX im = PIL.ImageChops.multiply(im1, im2) im.show() \u6700\u5927\u503c # out = max(image1, image2) im = PIL.ImageChops.lighter(im1, im2) im.show() \u6700\u5c0f\u503c # out = min(image1, image2) im = PIL.ImageChops.darker(im1, im2) im.show() \u5dee\u5f02 # out = abs(image1 - image2) im = PIL.ImageChops.difference(im1, im2) im.show() \u53cd\u8272 # out = MAX - image im = PIL.ImageChops.invert(im1) im.show() \u903b\u8f91\u64cd\u4f5c # out = ((image1 and image2) % MAX) im = PIL.ImageChops.logical_and(im1, im2) im.show() # out = ((image1 or image2) % MAX) im = PIL.ImageChops.logical_or(im1, im2) im.show() \u903b\u8f91\u64cd\u4f5c\u7684\u53c2\u6570\u56fe\u50cf\u6a21\u5f0f\u5fc5\u987b\u662f 1 .","title":"Pil imagechops"},{"location":"content/cv/pil_imagechops/#_1","text":"import PIL.Image import PIL.ImageChops im1 = PIL.Image.new('RGB', (480, 270), (0, 255, 0)) im2 = PIL.Image.new('RGB', (480, 270), (255, 0, 0)) # out = ((image1 + image2) / scale + offset) im = PIL.ImageChops.add(im1, im2) im.show() # out = ((image1 + image2) % MAX) im = PIL.ImageChops.add_modulo(im1, im2) im.show()","title":"\u52a0\u6cd5"},{"location":"content/cv/pil_imagechops/#_2","text":"# out = ((image1 - image2) / scale + offset) im = PIL.ImageChops.subtract(im1, im2) im.show() # out = ((image1 - image2) % MAX) im = PIL.ImageChops.subtract_modulo(im1, im2) im.show()","title":"\u51cf\u6cd5"},{"location":"content/cv/pil_imagechops/#_3","text":"# out = image1 * image2 / MAX im = PIL.ImageChops.multiply(im1, im2) im.show()","title":"\u4e58\u6cd5"},{"location":"content/cv/pil_imagechops/#_4","text":"# out = max(image1, image2) im = PIL.ImageChops.lighter(im1, im2) im.show()","title":"\u6700\u5927\u503c"},{"location":"content/cv/pil_imagechops/#_5","text":"# out = min(image1, image2) im = PIL.ImageChops.darker(im1, im2) im.show()","title":"\u6700\u5c0f\u503c"},{"location":"content/cv/pil_imagechops/#_6","text":"# out = abs(image1 - image2) im = PIL.ImageChops.difference(im1, im2) im.show()","title":"\u5dee\u5f02"},{"location":"content/cv/pil_imagechops/#_7","text":"# out = MAX - image im = PIL.ImageChops.invert(im1) im.show()","title":"\u53cd\u8272"},{"location":"content/cv/pil_imagechops/#_8","text":"# out = ((image1 and image2) % MAX) im = PIL.ImageChops.logical_and(im1, im2) im.show() # out = ((image1 or image2) % MAX) im = PIL.ImageChops.logical_or(im1, im2) im.show() \u903b\u8f91\u64cd\u4f5c\u7684\u53c2\u6570\u56fe\u50cf\u6a21\u5f0f\u5fc5\u987b\u662f 1 .","title":"\u903b\u8f91\u64cd\u4f5c"},{"location":"content/cv/pil_imagecolor/","text":"PIL.ImageColor \u5305\u542b\u4e24\u4e2a\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u989c\u8272\u503c\u7684\u51fd\u6570 getrgb() \u4e0e getcolor() . import PIL.ImageColor # getrgb(color) \u8fd4\u56de (red, green, blue[, alpha]) print(PIL.ImageColor.getrgb('#FFCC33')) print(PIL.ImageColor.getrgb('rgb(255, 204, 51)')) print(PIL.ImageColor.getrgb('rgb(100%,0%,0%)')) print(PIL.ImageColor.getrgb('hsl(0,100%,50%)')) # \u989c\u8272\u540d\u79f0\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165, \u5141\u8bb8\u7684\u540d\u79f0\u5b9a\u4e49\u5728 PIL.ImageColor.colormap \u4e2d print(PIL.ImageColor.getrgb('pink')) # getcolor(color, mode) \u8fd4\u56de (graylevel [, alpha]) \u6216 (red, green, blue[, alpha]) print(PIL.ImageColor.getcolor('#FFCC33', 'L'))","title":"Pil imagecolor"},{"location":"content/cv/pil_imagedraw/","text":"PIL.ImageDraw \u63d0\u4f9b\u7b80\u5355\u7684 2D \u7ed8\u56fe\u529f\u80fd. \u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u521b\u5efa\u65b0\u7684\u56fe\u50cf\u6216\u4fee\u6539\u5df2\u6709\u7684\u56fe\u50cf. \u7ed8\u5236\u7ebf\u6bb5 import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.line((0, 0) + im.size, fill='#FFFFFF') draw.line((0, im.size[1], im.size[0], 0), fill='#FFFFFF') im.show() \u7ed8\u5236\u79bb\u6563\u7684\u70b9 draw.point([(x1, y1), (x2, y2), (x3, y3)...], fill='#FFFFFF') \u7ed8\u5236\u5706\u5f27 PIL.ImageDraw.Draw.arc \u65b9\u6cd5\u53ef\u4ee5\u5728\u7ed9\u5b9a\u7684\u77e9\u5f62\u9009\u6846\u5185\u7ed8\u5236\u4e00\u6bb5(\u5185\u5207)\u5706\u5f27. \u7ed8\u5236\u8d77\u70b9\u4e3a 3 \u70b9\u949f\u4f4d\u7f6e. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.arc((100, 50, 379, 219), 0, 180, fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.chord \u65b9\u6cd5\u4e0e PIL.ImageDraw.Draw.arc \u7c7b\u4f3c, \u4e0d\u540c\u7684\u662f\u4f1a\u586b\u5145\u5706\u5f27. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.chord((100, 50, 379, 219), 0, 180, fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.ellipse \u65b9\u6cd5\u7ed8\u5236\u5e76\u586b\u5145\u692d\u5706. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.ellipse((100, 50, 379, 219), fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.pieslice \u65b9\u6cd5\u7ed8\u5236\u5e76\u586b\u5145\u6247\u5f62. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.pieslice((100, 50, 379, 219), 0, 90, fill='#FFFFFF') im.show() \u7ed8\u5236\u77e9\u5f62 import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.rectangle((100, 50, 379, 219), fill='#FFFFFF') im.show() \u7ed8\u5236\u591a\u8fb9\u5f62 import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.polygon([(100, 50), (380, 50), (240, 250)], fill='#FFFFFF') im.show() \u7ed8\u5236\u6587\u5b57 import PIL.Image import PIL.ImageDraw import PIL.ImageFont font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) print(draw.textsize('Hello World!', font)) # (96, 10), \u8fd4\u56de\u5b57\u7b26\u4e32\u5c06\u8981\u5360\u7528\u7684\u50cf\u7d20\u533a\u57df\u5927\u5c0f draw.text((192, 130), 'Hello World!', '#FFFFFF', font) im.show() \u4e0e draw.text \u7c7b\u4f3c\u7684\u8fd8\u6709\u4e00\u4e2a draw.multiline_text \u65b9\u6cd5, \u4e0d\u591a\u505a\u4ecb\u7ecd.","title":"Pil imagedraw"},{"location":"content/cv/pil_imagedraw/#_1","text":"import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.line((0, 0) + im.size, fill='#FFFFFF') draw.line((0, im.size[1], im.size[0], 0), fill='#FFFFFF') im.show()","title":"\u7ed8\u5236\u7ebf\u6bb5"},{"location":"content/cv/pil_imagedraw/#_2","text":"draw.point([(x1, y1), (x2, y2), (x3, y3)...], fill='#FFFFFF')","title":"\u7ed8\u5236\u79bb\u6563\u7684\u70b9"},{"location":"content/cv/pil_imagedraw/#_3","text":"PIL.ImageDraw.Draw.arc \u65b9\u6cd5\u53ef\u4ee5\u5728\u7ed9\u5b9a\u7684\u77e9\u5f62\u9009\u6846\u5185\u7ed8\u5236\u4e00\u6bb5(\u5185\u5207)\u5706\u5f27. \u7ed8\u5236\u8d77\u70b9\u4e3a 3 \u70b9\u949f\u4f4d\u7f6e. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.arc((100, 50, 379, 219), 0, 180, fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.chord \u65b9\u6cd5\u4e0e PIL.ImageDraw.Draw.arc \u7c7b\u4f3c, \u4e0d\u540c\u7684\u662f\u4f1a\u586b\u5145\u5706\u5f27. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.chord((100, 50, 379, 219), 0, 180, fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.ellipse \u65b9\u6cd5\u7ed8\u5236\u5e76\u586b\u5145\u692d\u5706. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.ellipse((100, 50, 379, 219), fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.pieslice \u65b9\u6cd5\u7ed8\u5236\u5e76\u586b\u5145\u6247\u5f62. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.pieslice((100, 50, 379, 219), 0, 90, fill='#FFFFFF') im.show()","title":"\u7ed8\u5236\u5706\u5f27"},{"location":"content/cv/pil_imagedraw/#_4","text":"import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.rectangle((100, 50, 379, 219), fill='#FFFFFF') im.show()","title":"\u7ed8\u5236\u77e9\u5f62"},{"location":"content/cv/pil_imagedraw/#_5","text":"import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.polygon([(100, 50), (380, 50), (240, 250)], fill='#FFFFFF') im.show()","title":"\u7ed8\u5236\u591a\u8fb9\u5f62"},{"location":"content/cv/pil_imagedraw/#_6","text":"import PIL.Image import PIL.ImageDraw import PIL.ImageFont font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) print(draw.textsize('Hello World!', font)) # (96, 10), \u8fd4\u56de\u5b57\u7b26\u4e32\u5c06\u8981\u5360\u7528\u7684\u50cf\u7d20\u533a\u57df\u5927\u5c0f draw.text((192, 130), 'Hello World!', '#FFFFFF', font) im.show() \u4e0e draw.text \u7c7b\u4f3c\u7684\u8fd8\u6709\u4e00\u4e2a draw.multiline_text \u65b9\u6cd5, \u4e0d\u591a\u505a\u4ecb\u7ecd.","title":"\u7ed8\u5236\u6587\u5b57"},{"location":"content/cv/pil_imageenhance/","text":"PIL.ImageEnhance \u5305\u542b\u4e00\u7cfb\u5217\u7684\u56fe\u50cf\u589e\u5f3a\u7b97\u6cd5. \u8272\u5f69\u5e73\u8861\u5ea6 PIL.ImageEnhance.Color import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Color(im) # \u4ece\u7070\u5ea6\u56fe\u9010\u6e10\u6062\u590d\u5230\u539f\u56fe for i in range(11): enhancer.enhance(i / 10.0).show() \u5bf9\u6bd4\u5ea6 PIL.ImageEnhance.Contrast import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Contrast(im) enhancer.enhance(0.5).show() enhancer.enhance(2.0).show() \u4eae\u5ea6 PIL.ImageEnhance.Brightness import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Brightness(im) enhancer.enhance(0.5).show() enhancer.enhance(2.0).show() \u9510\u5316 PIL.ImageEnhance.Sharpness import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Sharpness(im) # \u4f4e\u4e8e 1 \u65f6\u6a21\u7cca, \u9ad8\u4e8e 1 \u65f6\u9510\u5316 enhancer.enhance(0.5).show() enhancer.enhance(2.0).show()","title":"Pil imageenhance"},{"location":"content/cv/pil_imageenhance/#_1","text":"PIL.ImageEnhance.Color import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Color(im) # \u4ece\u7070\u5ea6\u56fe\u9010\u6e10\u6062\u590d\u5230\u539f\u56fe for i in range(11): enhancer.enhance(i / 10.0).show()","title":"\u8272\u5f69\u5e73\u8861\u5ea6"},{"location":"content/cv/pil_imageenhance/#_2","text":"PIL.ImageEnhance.Contrast import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Contrast(im) enhancer.enhance(0.5).show() enhancer.enhance(2.0).show()","title":"\u5bf9\u6bd4\u5ea6"},{"location":"content/cv/pil_imageenhance/#_3","text":"PIL.ImageEnhance.Brightness import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Brightness(im) enhancer.enhance(0.5).show() enhancer.enhance(2.0).show()","title":"\u4eae\u5ea6"},{"location":"content/cv/pil_imageenhance/#_4","text":"PIL.ImageEnhance.Sharpness import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Sharpness(im) # \u4f4e\u4e8e 1 \u65f6\u6a21\u7cca, \u9ad8\u4e8e 1 \u65f6\u9510\u5316 enhancer.enhance(0.5).show() enhancer.enhance(2.0).show()","title":"\u9510\u5316"},{"location":"content/cv/pil_imageops/","text":"PIL.ImageOps \u5305\u542b\u4e00\u4e9b\u9884\u5b9a\u4e49\u7684\u56fe\u50cf\u5904\u7406\u64cd\u4f5c, \u5927\u591a\u6570\u53ea\u5de5\u4f5c\u4e8e L \u548c RGB \u6a21\u5f0f\u4e0b. \u81ea\u52a8\u8c03\u6574\u5bf9\u6bd4\u5ea6 im = PIL.ImageOps.autocontrast(image, cutoff=0, ignore=None) \u8be5\u51fd\u6570\u8ba1\u7b97\u56fe\u50cf\u7684\u76f4\u65b9\u56fe, \u79fb\u9664\u6700\u5927\u548c\u6700\u5c0f\u7684 cutoff \u767e\u5206\u6bd4\u50cf\u7d20, \u5e76\u5c06\u50cf\u7d20\u8303\u56f4\u62c9\u4f38\u5230 0 - 255. \u7070\u5ea6\u56fe\u7740\u8272 im = PIL.ImageOps.colorize(image, black, white) \u7740\u8272\u4e00\u5e45\u7070\u5ea6\u56fe. \u53c2\u6570\u4e2d\u7684 black \u548c white \u9700\u8981\u4e3a RGB \u989c\u8272. \u79fb\u9664\u6216\u6dfb\u52a0\u6307\u5b9a\u50cf\u7d20\u7684\u8fb9\u6846 # \u79fb\u9664\u8fb9\u6846 im = PIL.ImageOps.crop(image, border=0) # \u6dfb\u52a0\u8fb9\u6846 im = PIL.ImageOps.expand(image, border=0, fill=0) \u79fb\u9664\u56fe\u50cf\u4e0a\u4e0b\u5de6\u53f3 border \u50cf\u7d20. \u76f4\u65b9\u56fe\u5747\u8861\u5316 im = PIL.ImageOps.equalize(image, mask=None) \u7ffb\u8f6c\u56fe\u50cf # \u4e0a\u4e0b\u7ffb\u8f6c im = PIL.ImageOps.flip(image) # \u5de6\u53f3\u7ffb\u8f6c im = PIL.ImageIps.mirror(image) \u53cd\u8272 im = PIL.ImageOps.invert(image) \u964d\u4f4e\u989c\u8272\u4f4d\u6570 im = PIL.ImageOps.posterize(image, bits) bits \u4e3a\u6bcf\u4e2a\u901a\u9053\u4fdd\u7559\u7684\u989c\u8272\u4f4d\u6570, \u8303\u56f4 (1-8).","title":"Pil imageops"},{"location":"content/cv/pil_imageops/#_1","text":"im = PIL.ImageOps.autocontrast(image, cutoff=0, ignore=None) \u8be5\u51fd\u6570\u8ba1\u7b97\u56fe\u50cf\u7684\u76f4\u65b9\u56fe, \u79fb\u9664\u6700\u5927\u548c\u6700\u5c0f\u7684 cutoff \u767e\u5206\u6bd4\u50cf\u7d20, \u5e76\u5c06\u50cf\u7d20\u8303\u56f4\u62c9\u4f38\u5230 0 - 255.","title":"\u81ea\u52a8\u8c03\u6574\u5bf9\u6bd4\u5ea6"},{"location":"content/cv/pil_imageops/#_2","text":"im = PIL.ImageOps.colorize(image, black, white) \u7740\u8272\u4e00\u5e45\u7070\u5ea6\u56fe. \u53c2\u6570\u4e2d\u7684 black \u548c white \u9700\u8981\u4e3a RGB \u989c\u8272.","title":"\u7070\u5ea6\u56fe\u7740\u8272"},{"location":"content/cv/pil_imageops/#_3","text":"# \u79fb\u9664\u8fb9\u6846 im = PIL.ImageOps.crop(image, border=0) # \u6dfb\u52a0\u8fb9\u6846 im = PIL.ImageOps.expand(image, border=0, fill=0) \u79fb\u9664\u56fe\u50cf\u4e0a\u4e0b\u5de6\u53f3 border \u50cf\u7d20.","title":"\u79fb\u9664\u6216\u6dfb\u52a0\u6307\u5b9a\u50cf\u7d20\u7684\u8fb9\u6846"},{"location":"content/cv/pil_imageops/#_4","text":"im = PIL.ImageOps.equalize(image, mask=None)","title":"\u76f4\u65b9\u56fe\u5747\u8861\u5316"},{"location":"content/cv/pil_imageops/#_5","text":"# \u4e0a\u4e0b\u7ffb\u8f6c im = PIL.ImageOps.flip(image) # \u5de6\u53f3\u7ffb\u8f6c im = PIL.ImageIps.mirror(image)","title":"\u7ffb\u8f6c\u56fe\u50cf"},{"location":"content/cv/pil_imageops/#_6","text":"im = PIL.ImageOps.invert(image)","title":"\u53cd\u8272"},{"location":"content/cv/pil_imageops/#_7","text":"im = PIL.ImageOps.posterize(image, bits) bits \u4e3a\u6bcf\u4e2a\u901a\u9053\u4fdd\u7559\u7684\u989c\u8272\u4f4d\u6570, \u8303\u56f4 (1-8).","title":"\u964d\u4f4e\u989c\u8272\u4f4d\u6570"},{"location":"content/cv/pil_tutorial_overview/","text":"PIL \u5e93\u6982\u89c8 PIL\u5e93\u6559\u7a0b \u7cfb\u5217\u5927\u90e8\u5206\u7ffb\u8bd1\u81ea\u5b98\u65b9\u6587\u6863: https://pillow.readthedocs.io , \u4f7f\u7528\u7684 PIL \u7248\u672c\u53f7\u4e3a 4.3.x . \u4f7f\u7528 Image \u5bf9\u8c61 import PIL.Image im = PIL.Image.open('jp.jpg') im.show() \u4fdd\u5b58\u56fe\u50cf im.save('jp.png') PIL \u5728\u4fdd\u5b58\u56fe\u50cf\u65f6, \u4f1a\u81ea\u52a8\u6839\u636e\u6587\u4ef6\u540e\u7f00\u540d\u8fdb\u884c\u683c\u5f0f\u8f6c\u5316. \u7f29\u7565\u56fe im.thumbnail((160, 120)) im.show() thumbnail \u65b9\u6cd5\u4f1a\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u7f29\u7565\u56fe. \u6b64\u65b9\u6cd5\u4fee\u6539\u56fe\u50cf\u4e3a\u672c\u8eab\u7684\u7f29\u7565\u56fe\u7248\u672c, \u7f29\u7565\u56fe\u4e0d\u5927\u4e8e\u7ed9\u5b9a\u5927\u5c0f. \u5c5e\u6027 print(im.format, im.size, im.mode) # JPEG (960, 540) RGB \u88c1\u526a, \u7c98\u8d34\u4e0e\u5408\u5e76\u56fe\u50cf # \u88c1\u526a box = (100, 100, 400, 400) region = im.crop(box) # \u65cb\u8f6c\u88c1\u526a\u7684\u56fe\u50cf, \u5e76\u7c98\u8d34\u56de\u539f\u4f4d\u7f6e region = region.transpose(PIL.Image.ROTATE_180) im.paste(region, box) im.show() \u5f53\u5c06\u5b50\u56fe\u50cf\u7c98\u8d34\u81f3\u7236\u539f\u56fe\u65f6, \u5b50\u56fe\u50cf\u7684\u5927\u5c0f\u5fc5\u987b\u4e0e\u7ed9\u5b9a\u533a\u57df\u5b8c\u5168\u5339\u914d. \u6b64\u5916, \u8be5\u533a\u57df\u4e0d\u80fd\u6269\u5c55\u5230\u7236\u56fe\u50cf\u4e4b\u5916. \u4f46\u662f, \u5b50\u56fe\u50cf\u548c\u7236\u56fe\u50cf\u7684\u6a21\u5f0f(mode)\u4e0d\u9700\u8981\u5339\u914d. \u5728\u7c98\u8d34\u4e4b\u524d, \u5b50\u56fe\u50cf\u4f1a\u81ea\u52a8\u8f6c\u6362\u81f3\u7236\u56fe\u50cf\u7684\u6a21\u5f0f. \u6eda\u52a8\u56fe\u50cf def roll(image, delta): \"\"\"Roll an image sideways. \"\"\" xsize, ysize = image.size delta = delta % xsize if delta == 0: return image part1 = image.crop((0, 0, delta, ysize)) part2 = image.crop((delta, 0, xsize, ysize)) part1.load() part2.load() image.paste(part2, (0, 0, xsize - delta, ysize)) image.paste(part1, (xsize - delta, 0, xsize, ysize)) return image roll(im, 100).show() \u8bf7\u6ce8\u610f, \u5f53\u4ece crop() \u64cd\u4f5c\u4e2d\u5c06\u5176\u7c98\u8d34\u56de\u65f6, \u5c06\u9996\u5148\u8c03\u7528 load() . \u8fd9\u662f\u56e0\u4e3a\u88c1\u526a\u662f\u4e00\u4e2a\u60f0\u6027\u64cd\u4f5c. \u5982\u679c\u672a\u8c03\u7528 load() , \u5219\u5728\u7c98\u8d34\u547d\u4ee4\u4e2d\u4f7f\u7528\u56fe\u50cf\u4e4b\u524d, \u5c06\u4e0d\u4f1a\u6267\u884c\u88c1\u526a\u64cd\u4f5c. \u8fd9\u5c06\u610f\u5473\u7740 part1 \u5c06\u4ece\u5df2\u7531\u7b2c\u4e00\u4e2a\u7c98\u8d34\u4fee\u6539\u7684\u56fe\u50cf\u7248\u672c\u4e2d\u88c1\u526a\u51fa\u6765. \u5206\u79bb\u4e0e\u5408\u5e76\u901a\u9053 r, g, b = im.split() im = PIL.Image.merge('RGB', (b, g, r)) im.show() \u7b80\u5355\u51e0\u4f55\u53d8\u6362 out = im.resize((128, 128)) out = im.rotate(45) # degrees counter-clockwise resize \u4e0e rotate \u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 Image \u5bf9\u8c61. \u6a21\u5f0f\u8f6c\u6362 out = im.convert(mode='L') \u53ef\u9009\u7684\u6a21\u5f0f\u5305\u62ec: 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) CMYK (4x8-bit pixels, color separation) YCbCr (3x8-bit pixels, color video format) Note that this refers to the JPEG, and not the ITU-R BT.2020, standard LAB (3x8-bit pixels, the L*a*b color space) HSV (3x8-bit pixels, Hue, Saturation, Value color space) I (32-bit signed integer pixels) F (32-bit floating point pixels) \u6ee4\u955c import PIL.ImageFilter out = im.filter(PIL.ImageFilter.DETAIL) \u53ef\u9009\u7684\u6ee4\u955c\u5305\u62ec: BLUR CONTOUR DETAIL EDGE_ENHANCE EDGE_ENHANCE_MORE EMBOSS FIND_EDGES SMOOTH SMOOTH_MORE SHARPEN \u50cf\u7d20\u64cd\u4f5c \u4f7f\u7528 point() \u65b9\u6cd5\u5bf9\u56fe\u50cf\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u505a\u76f8\u5e94\u64cd\u4f5c. # \u53cd\u8272: \u6240\u6709\u50cf\u7d20\u70b9 i \u4f1a\u88ab 255 - i \u66ff\u6362 out = im.point(lambda i: 255-i) out.show() \u56fe\u50cf\u589e\u5f3a import PIL.ImageEnhance # \u5bf9\u6bd4\u5ea6\u8c03\u6574 enh = PIL.ImageEnhance.Contrast(im) enh.enhance(1.3).show() \u8bfb\u53d6 GIF \u52a8\u753b im = PIL.Image.open('sample.gif') im.seek(20) im.show() \u4f7f\u7528\u8fed\u4ee3\u5668\u8bfb\u53d6 import PIL.ImageSequence im = PIL.Image.open('sample.gif') for frame in PIL.ImageSequence.Iterator(im): print(frame) \u5173\u4e8e\u8bfb\u53d6\u56fe\u50cf\u7684\u66f4\u591a\u8bf4\u660e \u5927\u591a\u6570\u65f6\u5019, \u901a\u8fc7\u4f20\u5165\u6587\u4ef6\u540d\u81f3 open() \u51fd\u6570\u8bfb\u53d6\u4e00\u5f20\u56fe\u50cf. \u4f46\u540c\u65f6\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u65b9\u5f0f\u8bfb\u53d6\u56fe\u50cf: import io import PIL.Image import numpy as np # \u4ece fp \u4e2d\u8bfb\u53d6 with open('jp.jpg', 'rb') as fp: im = PIL.Image.open(fp) # \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6 im = PIL.Image.open(io.StringIO('...')) # \u4ece\u77e9\u9635\u4e2d\u8bfb\u53d6 im = PIL.Image.fromarray(255 * np.ones((100, 100))) \u91c7\u6837\u5668 PIL \u652f\u6301\u5982\u4e0b 6 \u79cd\u91c7\u6837\u5668, \u5747\u4f4d\u4e8e PIL.Image \u5305\u5185. NEAREST BOX BILINEAR HAMMING BICUBIC LANCZOS \u663e\u793a\u56fe\u50cf \u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d, \u4f7f\u7528 im.show() \u53ef\u4ee5\u65b9\u4fbf\u7684\u5c55\u793a\u56fe\u50cf, \u4f46\u540c\u65f6\u4e5f\u53ef\u4ee5\u501f\u52a9\u4e00\u4e9b\u5176\u4ed6\u65b9\u5f0f\u5c55\u793a\u56fe\u50cf, \u5982 matplotlib \u548c opencv import PIL.Image im = PIL.Image.new('RGB', (480, 270), color=(0xFF, 0xCC, 0x33)) im.show() import matplotlib.pyplot as plt plt.imshow(im) plt.axis('off') plt.show() import cv2 import scipy.misc cv2.imshow(\"im\", scipy.misc.fromimage(im)) cv2.waitKey(0) cv2.destroyAllWindows()","title":"PIL \u5e93\u6982\u89c8"},{"location":"content/cv/pil_tutorial_overview/#pil","text":"PIL\u5e93\u6559\u7a0b \u7cfb\u5217\u5927\u90e8\u5206\u7ffb\u8bd1\u81ea\u5b98\u65b9\u6587\u6863: https://pillow.readthedocs.io , \u4f7f\u7528\u7684 PIL \u7248\u672c\u53f7\u4e3a 4.3.x .","title":"PIL \u5e93\u6982\u89c8"},{"location":"content/cv/pil_tutorial_overview/#image","text":"import PIL.Image im = PIL.Image.open('jp.jpg') im.show()","title":"\u4f7f\u7528 Image \u5bf9\u8c61"},{"location":"content/cv/pil_tutorial_overview/#_1","text":"im.save('jp.png') PIL \u5728\u4fdd\u5b58\u56fe\u50cf\u65f6, \u4f1a\u81ea\u52a8\u6839\u636e\u6587\u4ef6\u540e\u7f00\u540d\u8fdb\u884c\u683c\u5f0f\u8f6c\u5316.","title":"\u4fdd\u5b58\u56fe\u50cf"},{"location":"content/cv/pil_tutorial_overview/#_2","text":"im.thumbnail((160, 120)) im.show() thumbnail \u65b9\u6cd5\u4f1a\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u7f29\u7565\u56fe. \u6b64\u65b9\u6cd5\u4fee\u6539\u56fe\u50cf\u4e3a\u672c\u8eab\u7684\u7f29\u7565\u56fe\u7248\u672c, \u7f29\u7565\u56fe\u4e0d\u5927\u4e8e\u7ed9\u5b9a\u5927\u5c0f.","title":"\u7f29\u7565\u56fe"},{"location":"content/cv/pil_tutorial_overview/#_3","text":"print(im.format, im.size, im.mode) # JPEG (960, 540) RGB","title":"\u5c5e\u6027"},{"location":"content/cv/pil_tutorial_overview/#_4","text":"# \u88c1\u526a box = (100, 100, 400, 400) region = im.crop(box) # \u65cb\u8f6c\u88c1\u526a\u7684\u56fe\u50cf, \u5e76\u7c98\u8d34\u56de\u539f\u4f4d\u7f6e region = region.transpose(PIL.Image.ROTATE_180) im.paste(region, box) im.show() \u5f53\u5c06\u5b50\u56fe\u50cf\u7c98\u8d34\u81f3\u7236\u539f\u56fe\u65f6, \u5b50\u56fe\u50cf\u7684\u5927\u5c0f\u5fc5\u987b\u4e0e\u7ed9\u5b9a\u533a\u57df\u5b8c\u5168\u5339\u914d. \u6b64\u5916, \u8be5\u533a\u57df\u4e0d\u80fd\u6269\u5c55\u5230\u7236\u56fe\u50cf\u4e4b\u5916. \u4f46\u662f, \u5b50\u56fe\u50cf\u548c\u7236\u56fe\u50cf\u7684\u6a21\u5f0f(mode)\u4e0d\u9700\u8981\u5339\u914d. \u5728\u7c98\u8d34\u4e4b\u524d, \u5b50\u56fe\u50cf\u4f1a\u81ea\u52a8\u8f6c\u6362\u81f3\u7236\u56fe\u50cf\u7684\u6a21\u5f0f.","title":"\u88c1\u526a, \u7c98\u8d34\u4e0e\u5408\u5e76\u56fe\u50cf"},{"location":"content/cv/pil_tutorial_overview/#_5","text":"def roll(image, delta): \"\"\"Roll an image sideways. \"\"\" xsize, ysize = image.size delta = delta % xsize if delta == 0: return image part1 = image.crop((0, 0, delta, ysize)) part2 = image.crop((delta, 0, xsize, ysize)) part1.load() part2.load() image.paste(part2, (0, 0, xsize - delta, ysize)) image.paste(part1, (xsize - delta, 0, xsize, ysize)) return image roll(im, 100).show() \u8bf7\u6ce8\u610f, \u5f53\u4ece crop() \u64cd\u4f5c\u4e2d\u5c06\u5176\u7c98\u8d34\u56de\u65f6, \u5c06\u9996\u5148\u8c03\u7528 load() . \u8fd9\u662f\u56e0\u4e3a\u88c1\u526a\u662f\u4e00\u4e2a\u60f0\u6027\u64cd\u4f5c. \u5982\u679c\u672a\u8c03\u7528 load() , \u5219\u5728\u7c98\u8d34\u547d\u4ee4\u4e2d\u4f7f\u7528\u56fe\u50cf\u4e4b\u524d, \u5c06\u4e0d\u4f1a\u6267\u884c\u88c1\u526a\u64cd\u4f5c. \u8fd9\u5c06\u610f\u5473\u7740 part1 \u5c06\u4ece\u5df2\u7531\u7b2c\u4e00\u4e2a\u7c98\u8d34\u4fee\u6539\u7684\u56fe\u50cf\u7248\u672c\u4e2d\u88c1\u526a\u51fa\u6765.","title":"\u6eda\u52a8\u56fe\u50cf"},{"location":"content/cv/pil_tutorial_overview/#_6","text":"r, g, b = im.split() im = PIL.Image.merge('RGB', (b, g, r)) im.show()","title":"\u5206\u79bb\u4e0e\u5408\u5e76\u901a\u9053"},{"location":"content/cv/pil_tutorial_overview/#_7","text":"out = im.resize((128, 128)) out = im.rotate(45) # degrees counter-clockwise resize \u4e0e rotate \u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 Image \u5bf9\u8c61.","title":"\u7b80\u5355\u51e0\u4f55\u53d8\u6362"},{"location":"content/cv/pil_tutorial_overview/#_8","text":"out = im.convert(mode='L') \u53ef\u9009\u7684\u6a21\u5f0f\u5305\u62ec: 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) CMYK (4x8-bit pixels, color separation) YCbCr (3x8-bit pixels, color video format) Note that this refers to the JPEG, and not the ITU-R BT.2020, standard LAB (3x8-bit pixels, the L*a*b color space) HSV (3x8-bit pixels, Hue, Saturation, Value color space) I (32-bit signed integer pixels) F (32-bit floating point pixels)","title":"\u6a21\u5f0f\u8f6c\u6362"},{"location":"content/cv/pil_tutorial_overview/#_9","text":"import PIL.ImageFilter out = im.filter(PIL.ImageFilter.DETAIL) \u53ef\u9009\u7684\u6ee4\u955c\u5305\u62ec: BLUR CONTOUR DETAIL EDGE_ENHANCE EDGE_ENHANCE_MORE EMBOSS FIND_EDGES SMOOTH SMOOTH_MORE SHARPEN","title":"\u6ee4\u955c"},{"location":"content/cv/pil_tutorial_overview/#_10","text":"\u4f7f\u7528 point() \u65b9\u6cd5\u5bf9\u56fe\u50cf\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u505a\u76f8\u5e94\u64cd\u4f5c. # \u53cd\u8272: \u6240\u6709\u50cf\u7d20\u70b9 i \u4f1a\u88ab 255 - i \u66ff\u6362 out = im.point(lambda i: 255-i) out.show()","title":"\u50cf\u7d20\u64cd\u4f5c"},{"location":"content/cv/pil_tutorial_overview/#_11","text":"import PIL.ImageEnhance # \u5bf9\u6bd4\u5ea6\u8c03\u6574 enh = PIL.ImageEnhance.Contrast(im) enh.enhance(1.3).show()","title":"\u56fe\u50cf\u589e\u5f3a"},{"location":"content/cv/pil_tutorial_overview/#gif","text":"im = PIL.Image.open('sample.gif') im.seek(20) im.show() \u4f7f\u7528\u8fed\u4ee3\u5668\u8bfb\u53d6 import PIL.ImageSequence im = PIL.Image.open('sample.gif') for frame in PIL.ImageSequence.Iterator(im): print(frame)","title":"\u8bfb\u53d6 GIF \u52a8\u753b"},{"location":"content/cv/pil_tutorial_overview/#_12","text":"\u5927\u591a\u6570\u65f6\u5019, \u901a\u8fc7\u4f20\u5165\u6587\u4ef6\u540d\u81f3 open() \u51fd\u6570\u8bfb\u53d6\u4e00\u5f20\u56fe\u50cf. \u4f46\u540c\u65f6\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u65b9\u5f0f\u8bfb\u53d6\u56fe\u50cf: import io import PIL.Image import numpy as np # \u4ece fp \u4e2d\u8bfb\u53d6 with open('jp.jpg', 'rb') as fp: im = PIL.Image.open(fp) # \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6 im = PIL.Image.open(io.StringIO('...')) # \u4ece\u77e9\u9635\u4e2d\u8bfb\u53d6 im = PIL.Image.fromarray(255 * np.ones((100, 100)))","title":"\u5173\u4e8e\u8bfb\u53d6\u56fe\u50cf\u7684\u66f4\u591a\u8bf4\u660e"},{"location":"content/cv/pil_tutorial_overview/#_13","text":"PIL \u652f\u6301\u5982\u4e0b 6 \u79cd\u91c7\u6837\u5668, \u5747\u4f4d\u4e8e PIL.Image \u5305\u5185. NEAREST BOX BILINEAR HAMMING BICUBIC LANCZOS","title":"\u91c7\u6837\u5668"},{"location":"content/cv/pil_tutorial_overview/#_14","text":"\u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d, \u4f7f\u7528 im.show() \u53ef\u4ee5\u65b9\u4fbf\u7684\u5c55\u793a\u56fe\u50cf, \u4f46\u540c\u65f6\u4e5f\u53ef\u4ee5\u501f\u52a9\u4e00\u4e9b\u5176\u4ed6\u65b9\u5f0f\u5c55\u793a\u56fe\u50cf, \u5982 matplotlib \u548c opencv import PIL.Image im = PIL.Image.new('RGB', (480, 270), color=(0xFF, 0xCC, 0x33)) im.show() import matplotlib.pyplot as plt plt.imshow(im) plt.axis('off') plt.show() import cv2 import scipy.misc cv2.imshow(\"im\", scipy.misc.fromimage(im)) cv2.waitKey(0) cv2.destroyAllWindows()","title":"\u663e\u793a\u56fe\u50cf"},{"location":"content/cv/resize_bicubic/","text":"\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5 \u53cc\u4e09\u6b21\u63d2\u503c\u6cd5\u901a\u5e38\u5e94\u7528\u5728\u56fe\u50cf\u653e\u5927\u4e2d. \u76f8\u6bd4\u4e8e\u53cc\u7ebf\u6027\u7b97\u6cd5, \u5b83\u5728\u653e\u5927\u540e\u4fdd\u7559\u4e86\u66f4\u597d\u7684\u7ec6\u8282. \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d, \u51fd\u6570 $f$ \u5728\u70b9 $(x, y)$ \u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u77e9\u5f62\u7f51\u683c\u4e2d\u6700\u8fd1\u7684\u5341\u516d\u4e2a\u91c7\u6837\u70b9\u7684\u52a0\u6743\u5e73\u5747\u5f97\u5230, \u5728\u8fd9\u91cc\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u591a\u9879\u5f0f\u63d2\u503c\u4e09\u6b21\u51fd\u6570, \u6bcf\u4e2a\u65b9\u5411\u4f7f\u7528\u4e00\u4e2a. \u673a\u7406 \u5148\u4e86\u89e3\u4e0b\u4e09\u6b21\u63d2\u503c\u7b97\u6cd5\u5728\u5904\u7406\u4e00\u7ef4\u6570\u636e\u65f6\u7684\u8fc7\u7a0b.\u5047\u8bbe\u5df2\u77e5\u4e00\u4e2a\u4e00\u7ef4\u77e9\u9635: $$ A = [10, 20, 20, 10] $$ \u8be5\u77e9\u9635\u4e0b\u6807\u4ece -1 \u5f00\u59cb, \u5373 $A[-1] = 10$, $A[0] = A[1] = 20$, $A[2] = 10$, \u5982\u679c\u6211\u4eec\u5e0c\u671b(\u8fd1\u4f3c)\u5f97\u5230 A[0.5] \u7684\u7ed3\u679c, \u90a3\u4e48\u53ef\u4ee5\u9996\u5148\u5047\u8bbe\u6709\u4e00\u4e2a \u57fa\u4e8e\u8ddd\u79bb\u7684\u6743\u91cd\u51fd\u6570 $W$, \u5bb9\u6613\u5f97\u5230 $$ A[0.5] = W(-1.5)A[-1] + W(-0.5)A[0] + W(0.5)A[1] + W(1.5)A[2] $$ \u5373\u5bf9\u4e8e\u4e00\u7ef4\u77e9\u9635, \u4efb\u610f\u70b9\u7684\u503c\u6709\u5982\u4e0b\u8868\u8fbe\u5f0f: $$P(x) = \\sum_{i=-1}^2W(x-i)$$ \u6269\u5c55\u5230\u4e8c\u7ef4\u77e9\u9635: $$P(x, y) = \\sum_{i=-1}^2\\sum_{j=-1}^2W(x-i)W(y-j)$$ \u6743\u91cd\u51fd\u6570 \u5728\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5\u4e2d, \u6743\u91cd\u51fd\u6570 $W$ \u901a\u5e38\u4e3a: $$ W(x) = \\begin{cases} (a+2)|x|^3 - (a+3)|x|^2 + 1 & |x| \\le 1 \\\\ a|x|^3 - 5a|x|^2 + 8a|x|-4a & 1 < |x| < 2 \\\\ 0 & |x| \\ge 2 \\end{cases} $$ \u5728\u53cc\u4e09\u6b21\u63d2\u503c\u7b97\u6cd5\u4e2d, $a$ \u5e38\u53d6 -0.5 \u6216 -0.75. \u56e0\u6b64\u82e5\u5c06 $W$ \u4ee3\u5165, \u53ef\u5f97\u4e0a\u8ff0\u5217\u9898 $A[0.5]=21.25$. $W$ \u5728 [-2, 2] \u533a\u95f4\u4e0a\u7684\u51fd\u6570\u56fe\u50cf\u5982\u4e0b\u56fe\u6240\u793a: \u4ee3\u7801\u5b9e\u73b0 import numpy as np import PIL.Image import scipy.misc def get_item(arr, *args): indexes = [] for i, entry in enumerate(args): index = entry if index < 0: index = abs(index) - 1 if index >= arr.shape[i]: index = arr.shape[i] - index % arr.shape[i] - 1 indexes.append(index) r = arr for index in indexes: r = r[index] return r def get_w(x): a = -0.5 absx = abs(x) if absx <= 1: return (a + 2) * absx**3 - (a + 3) * absx ** 2 + 1 elif 1 < absx < 2: return a * absx**3 - 5 * a * absx**2 + 8 * a * absx - 4 * a else: return 0 im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_mat_resized = np.empty((270, 480, im_mat.shape[2]), dtype=np.uint8) for r in range(im_mat_resized.shape[0]): for c in range(im_mat_resized.shape[1]): rr = (r + 1) / im_mat_resized.shape[0] * im_mat.shape[0] - 1 cc = (c + 1) / im_mat_resized.shape[1] * im_mat.shape[1] - 1 rr_int = int(rr) cc_int = int(cc) sum_p = np.empty(im_mat.shape[2]) for j in range(rr_int - 1, rr_int + 3): for i in range(cc_int - 1, cc_int + 3): w = get_w(rr - j) * get_w(cc - i) p = get_item(im_mat, j, i) * w sum_p += p for i, entry in enumerate(sum_p): sum_p[i] = min(max(entry, 0), 255) im_mat_resized[r][c] = sum_p im_resized = PIL.Image.fromarray(im_mat_resized) im_resized.show() \u4e0a\u8ff0\u4ee3\u7801\u672a\u7ecf\u4f18\u5316, \u5728\u653e\u5927\u56fe\u7247\u81f3 2160*3840 \u65f6\u53ef\u80fd\u9700\u8981\u82b1\u8d39\u8d85\u8fc7 1 \u5c0f\u65f6\u5728\u6211\u7684 xeon cpu \u4e0a.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7f29\u653e-\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5"},{"location":"content/cv/resize_bicubic/#_1","text":"\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5\u901a\u5e38\u5e94\u7528\u5728\u56fe\u50cf\u653e\u5927\u4e2d. \u76f8\u6bd4\u4e8e\u53cc\u7ebf\u6027\u7b97\u6cd5, \u5b83\u5728\u653e\u5927\u540e\u4fdd\u7559\u4e86\u66f4\u597d\u7684\u7ec6\u8282. \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d, \u51fd\u6570 $f$ \u5728\u70b9 $(x, y)$ \u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u77e9\u5f62\u7f51\u683c\u4e2d\u6700\u8fd1\u7684\u5341\u516d\u4e2a\u91c7\u6837\u70b9\u7684\u52a0\u6743\u5e73\u5747\u5f97\u5230, \u5728\u8fd9\u91cc\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u591a\u9879\u5f0f\u63d2\u503c\u4e09\u6b21\u51fd\u6570, \u6bcf\u4e2a\u65b9\u5411\u4f7f\u7528\u4e00\u4e2a.","title":"\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5"},{"location":"content/cv/resize_bicubic/#_2","text":"\u5148\u4e86\u89e3\u4e0b\u4e09\u6b21\u63d2\u503c\u7b97\u6cd5\u5728\u5904\u7406\u4e00\u7ef4\u6570\u636e\u65f6\u7684\u8fc7\u7a0b.\u5047\u8bbe\u5df2\u77e5\u4e00\u4e2a\u4e00\u7ef4\u77e9\u9635: $$ A = [10, 20, 20, 10] $$ \u8be5\u77e9\u9635\u4e0b\u6807\u4ece -1 \u5f00\u59cb, \u5373 $A[-1] = 10$, $A[0] = A[1] = 20$, $A[2] = 10$, \u5982\u679c\u6211\u4eec\u5e0c\u671b(\u8fd1\u4f3c)\u5f97\u5230 A[0.5] \u7684\u7ed3\u679c, \u90a3\u4e48\u53ef\u4ee5\u9996\u5148\u5047\u8bbe\u6709\u4e00\u4e2a \u57fa\u4e8e\u8ddd\u79bb\u7684\u6743\u91cd\u51fd\u6570 $W$, \u5bb9\u6613\u5f97\u5230 $$ A[0.5] = W(-1.5)A[-1] + W(-0.5)A[0] + W(0.5)A[1] + W(1.5)A[2] $$ \u5373\u5bf9\u4e8e\u4e00\u7ef4\u77e9\u9635, \u4efb\u610f\u70b9\u7684\u503c\u6709\u5982\u4e0b\u8868\u8fbe\u5f0f: $$P(x) = \\sum_{i=-1}^2W(x-i)$$ \u6269\u5c55\u5230\u4e8c\u7ef4\u77e9\u9635: $$P(x, y) = \\sum_{i=-1}^2\\sum_{j=-1}^2W(x-i)W(y-j)$$","title":"\u673a\u7406"},{"location":"content/cv/resize_bicubic/#_3","text":"\u5728\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5\u4e2d, \u6743\u91cd\u51fd\u6570 $W$ \u901a\u5e38\u4e3a: $$ W(x) = \\begin{cases} (a+2)|x|^3 - (a+3)|x|^2 + 1 & |x| \\le 1 \\\\ a|x|^3 - 5a|x|^2 + 8a|x|-4a & 1 < |x| < 2 \\\\ 0 & |x| \\ge 2 \\end{cases} $$ \u5728\u53cc\u4e09\u6b21\u63d2\u503c\u7b97\u6cd5\u4e2d, $a$ \u5e38\u53d6 -0.5 \u6216 -0.75. \u56e0\u6b64\u82e5\u5c06 $W$ \u4ee3\u5165, \u53ef\u5f97\u4e0a\u8ff0\u5217\u9898 $A[0.5]=21.25$. $W$ \u5728 [-2, 2] \u533a\u95f4\u4e0a\u7684\u51fd\u6570\u56fe\u50cf\u5982\u4e0b\u56fe\u6240\u793a:","title":"\u6743\u91cd\u51fd\u6570"},{"location":"content/cv/resize_bicubic/#_4","text":"import numpy as np import PIL.Image import scipy.misc def get_item(arr, *args): indexes = [] for i, entry in enumerate(args): index = entry if index < 0: index = abs(index) - 1 if index >= arr.shape[i]: index = arr.shape[i] - index % arr.shape[i] - 1 indexes.append(index) r = arr for index in indexes: r = r[index] return r def get_w(x): a = -0.5 absx = abs(x) if absx <= 1: return (a + 2) * absx**3 - (a + 3) * absx ** 2 + 1 elif 1 < absx < 2: return a * absx**3 - 5 * a * absx**2 + 8 * a * absx - 4 * a else: return 0 im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_mat_resized = np.empty((270, 480, im_mat.shape[2]), dtype=np.uint8) for r in range(im_mat_resized.shape[0]): for c in range(im_mat_resized.shape[1]): rr = (r + 1) / im_mat_resized.shape[0] * im_mat.shape[0] - 1 cc = (c + 1) / im_mat_resized.shape[1] * im_mat.shape[1] - 1 rr_int = int(rr) cc_int = int(cc) sum_p = np.empty(im_mat.shape[2]) for j in range(rr_int - 1, rr_int + 3): for i in range(cc_int - 1, cc_int + 3): w = get_w(rr - j) * get_w(cc - i) p = get_item(im_mat, j, i) * w sum_p += p for i, entry in enumerate(sum_p): sum_p[i] = min(max(entry, 0), 255) im_mat_resized[r][c] = sum_p im_resized = PIL.Image.fromarray(im_mat_resized) im_resized.show() \u4e0a\u8ff0\u4ee3\u7801\u672a\u7ecf\u4f18\u5316, \u5728\u653e\u5927\u56fe\u7247\u81f3 2160*3840 \u65f6\u53ef\u80fd\u9700\u8981\u82b1\u8d39\u8d85\u8fc7 1 \u5c0f\u65f6\u5728\u6211\u7684 xeon cpu \u4e0a.","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/resize_bilinear/","text":"\u53cc\u7ebf\u6027\u7b97\u6cd5 \u53cc\u7ebf\u6027\u63d2\u503c\u6cd5\u4e0e\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5\u7c7b\u4f3c, \u4e0d\u540c\u70b9\u662f\u53d6\u539f\u56fe\u50cf\u4e2d\u8ddd\u79bb\u76ee\u6807\u50cf\u7d20\u70b9\u6700\u8fd1\u7684 4 \u4e2a\u70b9, \u5e76\u5bf9\u8fd9 4 \u4e2a\u70b9\u4e0e\u5176\u5bf9\u5e94\u6743\u503c\u7684\u4e58\u79ef\u6c42\u548c, \u83b7\u5f97\u6700\u7ec8\u50cf\u7d20\u503c. \u5982\u4e0b\u56fe: \u76ee\u6807\u70b9\u4e3a $P$, \u8ddd\u79bb $P$ \u6700\u8fd1\u7684\u56db\u4e2a\u70b9\u4e3a $Q_{11}$, $Q_{12}$, $Q_{21}$, $Q_{22}$, \u4e0e $P$ \u56f4\u6210\u7684\u9762\u79ef\u4e3a $S_{11}$, $S_{12}$, $S_{21}$, $S_{22}$, \u5206\u522b\u4ee5\u9ec4, \u7ea2, \u9752, \u6a59\u6807\u51fa. \u7531\u4e8e $S_{11} + S_{12} + S_{21} + S_{22} = 1$, \u56e0\u6b64\u6700\u7ec8\u6c42\u5f97\u7684 $P$ \u7684\u50cf\u7d20\u503c\u4e3a $$ P = Q_{11} \\times S_{22} + Q_{12} \\times S_{21} + Q_{21} \\times S_{12} + Q_{22} \\times S_{11} $$ \u4ee3\u7801\u5b9e\u73b0 \u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97, \u4e0b\u8ff0\u7a0b\u5e8f\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u77e9\u9635\u8fdb\u884c\u64cd\u4f5c. import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_mat_resized = np.empty((270, 480, im_mat.shape[2]), dtype=np.uint8) for r in range(im_mat_resized.shape[0]): for c in range(im_mat_resized.shape[1]): rr = (r + 1) / im_mat_resized.shape[0] * im_mat.shape[0] - 1 cc = (c + 1) / im_mat_resized.shape[1] * im_mat.shape[1] - 1 rr_int = int(rr) cc_int = int(cc) if rr == rr_int and cc == cc_int: p = im_mat[rr_int][cc_int] elif rr == rr_int: p = im_mat[rr_int][cc_int] * (cc_int + 1 - cc) + im_mat[rr_int][cc_int + 1] * (cc - cc_int) elif cc == cc_int: p = im_mat[rr_int][cc_int] * (rr_int + 1 - rr) + im_mat[rr_int + 1][cc_int] * (rr - rr_int) else: p11 = (rr_int, cc_int) p12 = (rr_int, cc_int + 1) p21 = (rr_int + 1, cc_int) p22 = (rr_int + 1, cc_int + 1) dr1 = rr - rr_int dr2 = rr_int + 1 - rr dc1 = cc - cc_int dc2 = cc_int + 1 - cc w11 = dr2 * dc2 w12 = dr2 * dc1 w21 = dr1 * dc2 w22 = dr1 * dc1 p = im_mat[p11[0]][p11[1]] * w11 + im_mat[p21[0]][p21[1]] * w12 + \\ im_mat[p12[0]][p12[1]] * w21 + im_mat[p22[0]][p22[1]] * w22 im_mat_resized[r][c] = p im_resized = PIL.Image.fromarray(im_mat_resized) im_resized.show() \u4f18\u5316 \u8be6\u89c1 https://en.wikipedia.org/wiki/Bilinear_interpolation","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7f29\u653e-\u53cc\u7ebf\u6027\u7b97\u6cd5"},{"location":"content/cv/resize_bilinear/#_1","text":"\u53cc\u7ebf\u6027\u63d2\u503c\u6cd5\u4e0e\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5\u7c7b\u4f3c, \u4e0d\u540c\u70b9\u662f\u53d6\u539f\u56fe\u50cf\u4e2d\u8ddd\u79bb\u76ee\u6807\u50cf\u7d20\u70b9\u6700\u8fd1\u7684 4 \u4e2a\u70b9, \u5e76\u5bf9\u8fd9 4 \u4e2a\u70b9\u4e0e\u5176\u5bf9\u5e94\u6743\u503c\u7684\u4e58\u79ef\u6c42\u548c, \u83b7\u5f97\u6700\u7ec8\u50cf\u7d20\u503c. \u5982\u4e0b\u56fe: \u76ee\u6807\u70b9\u4e3a $P$, \u8ddd\u79bb $P$ \u6700\u8fd1\u7684\u56db\u4e2a\u70b9\u4e3a $Q_{11}$, $Q_{12}$, $Q_{21}$, $Q_{22}$, \u4e0e $P$ \u56f4\u6210\u7684\u9762\u79ef\u4e3a $S_{11}$, $S_{12}$, $S_{21}$, $S_{22}$, \u5206\u522b\u4ee5\u9ec4, \u7ea2, \u9752, \u6a59\u6807\u51fa. \u7531\u4e8e $S_{11} + S_{12} + S_{21} + S_{22} = 1$, \u56e0\u6b64\u6700\u7ec8\u6c42\u5f97\u7684 $P$ \u7684\u50cf\u7d20\u503c\u4e3a $$ P = Q_{11} \\times S_{22} + Q_{12} \\times S_{21} + Q_{21} \\times S_{12} + Q_{22} \\times S_{11} $$","title":"\u53cc\u7ebf\u6027\u7b97\u6cd5"},{"location":"content/cv/resize_bilinear/#_2","text":"\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97, \u4e0b\u8ff0\u7a0b\u5e8f\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u77e9\u9635\u8fdb\u884c\u64cd\u4f5c. import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_mat_resized = np.empty((270, 480, im_mat.shape[2]), dtype=np.uint8) for r in range(im_mat_resized.shape[0]): for c in range(im_mat_resized.shape[1]): rr = (r + 1) / im_mat_resized.shape[0] * im_mat.shape[0] - 1 cc = (c + 1) / im_mat_resized.shape[1] * im_mat.shape[1] - 1 rr_int = int(rr) cc_int = int(cc) if rr == rr_int and cc == cc_int: p = im_mat[rr_int][cc_int] elif rr == rr_int: p = im_mat[rr_int][cc_int] * (cc_int + 1 - cc) + im_mat[rr_int][cc_int + 1] * (cc - cc_int) elif cc == cc_int: p = im_mat[rr_int][cc_int] * (rr_int + 1 - rr) + im_mat[rr_int + 1][cc_int] * (rr - rr_int) else: p11 = (rr_int, cc_int) p12 = (rr_int, cc_int + 1) p21 = (rr_int + 1, cc_int) p22 = (rr_int + 1, cc_int + 1) dr1 = rr - rr_int dr2 = rr_int + 1 - rr dc1 = cc - cc_int dc2 = cc_int + 1 - cc w11 = dr2 * dc2 w12 = dr2 * dc1 w21 = dr1 * dc2 w22 = dr1 * dc1 p = im_mat[p11[0]][p11[1]] * w11 + im_mat[p21[0]][p21[1]] * w12 + \\ im_mat[p12[0]][p12[1]] * w21 + im_mat[p22[0]][p22[1]] * w22 im_mat_resized[r][c] = p im_resized = PIL.Image.fromarray(im_mat_resized) im_resized.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/resize_bilinear/#_3","text":"\u8be6\u89c1 https://en.wikipedia.org/wiki/Bilinear_interpolation","title":"\u4f18\u5316"},{"location":"content/cv/resize_nearst/","text":"\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5 \u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d, \u56fe\u50cf\u7f29\u653e\u6307\u7684\u662f\u901a\u8fc7\u589e\u52a0\u6216\u53bb\u6389\u50cf\u7d20\u6765\u6539\u53d8\u56fe\u7247\u7684\u5c3a\u5bf8. \u7531\u4e8e\u8981\u5728\u6548\u7387\u548c\u56fe\u50cf\u8d28\u91cf\u6bd4\u5982\u5e73\u6ed1\u5ea6\u548c\u6e05\u6670\u5ea6\u4e4b\u95f4\u505a\u6298\u8877, \u56fe\u50cf\u7f29\u653e\u5e76\u4e0d\u662f\u4e2a\u5e73\u5eb8\u7684\u8fc7\u7a0b. \u5f53\u56fe\u50cf\u5c3a\u5bf8\u589e\u5927\u7684\u65f6\u5019, \u7ec4\u6210\u56fe\u50cf\u7684\u50cf\u7d20\u4e5f\u8d8a\u6765\u8d8a\u5927, \u56fe\u50cf\u770b\u4e0a\u53bb\u5c31\u53d8\"\u67d4\u548c\"\u4e86. \u800c\u7f29\u5c0f\u56fe\u50cf\u7684\u65f6\u5019, \u56fe\u50cf\u5c31\u53d8\u5f97\u5e73\u6ed1\u548c\u6e05\u6670\u4e86. \u672c\u6587\u4ecb\u7ecd\u6700\u7b80\u5355\u7684 \u6700\u8fd1\u90bb\u63d2\u503c\u6cd5(Nearest-neighbor interpolation) . \u539f\u7406 \u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u662f\u5c06\u76ee\u6807\u56fe\u50cf\u5404\u70b9\u7684\u50cf\u7d20\u503c\u8bbe\u4e3a\u539f\u56fe\u50cf\u4e2d\u4e0e\u5176\u6700\u8fd1\u7684\u70b9. \u5047\u8bbe\u539f\u56fe\u7684\u5927\u5c0f\u4e3a (w0, h0) , \u5750\u6807\u4ee5 (x0, y0) \u63cf\u8ff0, \u7f29\u653e\u540e\u7684\u56fe\u50cf\u5927\u5c0f\u4e3a (w1, h1) , \u5750\u6807\u4ee5 (x1, y1) \u63cf\u8ff0, \u5219\u6709 $$ \\begin{cases} \\frac{x_1 + 1}{x_0 + 1} = \\frac{w_1}{w_0} \\\\ \\frac{y_1 + 1}{y_0 + 1} = \\frac{h_1}{h_0} \\end{cases} $$ \u4ee3\u7801\u5b9e\u73b0 import PIL.Image im = PIL.Image.open('/img/jp.jpg') im_resized = PIL.Image.new(im.mode, (480, 270)) for r in range(im_resized.size[1]): for c in range(im_resized.size[0]): rr = round((r+1) / im_resized.size[1] * im.size[1]) - 1 cc = round((c+1) / im_resized.size[0] * im.size[0]) - 1 im_resized.putpixel((c, r), im.getpixel((cc, rr))) im_resized.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7f29\u653e-\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5"},{"location":"content/cv/resize_nearst/#_1","text":"\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d, \u56fe\u50cf\u7f29\u653e\u6307\u7684\u662f\u901a\u8fc7\u589e\u52a0\u6216\u53bb\u6389\u50cf\u7d20\u6765\u6539\u53d8\u56fe\u7247\u7684\u5c3a\u5bf8. \u7531\u4e8e\u8981\u5728\u6548\u7387\u548c\u56fe\u50cf\u8d28\u91cf\u6bd4\u5982\u5e73\u6ed1\u5ea6\u548c\u6e05\u6670\u5ea6\u4e4b\u95f4\u505a\u6298\u8877, \u56fe\u50cf\u7f29\u653e\u5e76\u4e0d\u662f\u4e2a\u5e73\u5eb8\u7684\u8fc7\u7a0b. \u5f53\u56fe\u50cf\u5c3a\u5bf8\u589e\u5927\u7684\u65f6\u5019, \u7ec4\u6210\u56fe\u50cf\u7684\u50cf\u7d20\u4e5f\u8d8a\u6765\u8d8a\u5927, \u56fe\u50cf\u770b\u4e0a\u53bb\u5c31\u53d8\"\u67d4\u548c\"\u4e86. \u800c\u7f29\u5c0f\u56fe\u50cf\u7684\u65f6\u5019, \u56fe\u50cf\u5c31\u53d8\u5f97\u5e73\u6ed1\u548c\u6e05\u6670\u4e86. \u672c\u6587\u4ecb\u7ecd\u6700\u7b80\u5355\u7684 \u6700\u8fd1\u90bb\u63d2\u503c\u6cd5(Nearest-neighbor interpolation) .","title":"\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5"},{"location":"content/cv/resize_nearst/#_2","text":"\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u662f\u5c06\u76ee\u6807\u56fe\u50cf\u5404\u70b9\u7684\u50cf\u7d20\u503c\u8bbe\u4e3a\u539f\u56fe\u50cf\u4e2d\u4e0e\u5176\u6700\u8fd1\u7684\u70b9. \u5047\u8bbe\u539f\u56fe\u7684\u5927\u5c0f\u4e3a (w0, h0) , \u5750\u6807\u4ee5 (x0, y0) \u63cf\u8ff0, \u7f29\u653e\u540e\u7684\u56fe\u50cf\u5927\u5c0f\u4e3a (w1, h1) , \u5750\u6807\u4ee5 (x1, y1) \u63cf\u8ff0, \u5219\u6709 $$ \\begin{cases} \\frac{x_1 + 1}{x_0 + 1} = \\frac{w_1}{w_0} \\\\ \\frac{y_1 + 1}{y_0 + 1} = \\frac{h_1}{h_0} \\end{cases} $$","title":"\u539f\u7406"},{"location":"content/cv/resize_nearst/#_3","text":"import PIL.Image im = PIL.Image.open('/img/jp.jpg') im_resized = PIL.Image.new(im.mode, (480, 270)) for r in range(im_resized.size[1]): for c in range(im_resized.size[0]): rr = round((r+1) / im_resized.size[1] * im.size[1]) - 1 cc = round((c+1) / im_resized.size[0] * im.size[0]) - 1 im_resized.putpixel((c, r), im.getpixel((cc, rr))) im_resized.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/resize_nearst_ghost/","text":"\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u7684\u5e7d\u7075\u4e8b\u4ef6 \u5f53\u901a\u8fc7\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u5bf9\u56fe\u7247\u8fdb\u884c\u7f29\u653e\u7684\u65f6\u5019, \u76ee\u6807\u56fe\u50cf\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6765\u6e90\u4e8e\u539f\u56fe\u50cf\u7684\u5bf9\u5e94\u4f4d\u7f6e\u50cf\u7d20 . \u8fd9\u53ef\u80fd\u4f1a\u9020\u6210\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c.\u8003\u8651\u5982\u4e0b\u56fe\u7247, \u8be5\u56fe\u50cf\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u522b, \u4f46\u5bf9\u8be5\u56fe\u50cf\u8fdb\u884c\u7f29\u653e\u65f6: import PIL.Image im = PIL.Image.open('/img/jp_ghost.bmp') im = im.resize((im.size[0] // 2, im.size[1] // 2), PIL.Image.NEAREST) im.show() \u957f\u5bbd\u5747\u7f29\u653e 1/2 \u540e\u7684\u56fe\u7247\u5982\u4e0b: \u539f\u56fe\u53d8\u6210\u4e86\u4e00\u5f20\u989c\u8272\u4e3a (99, 97, 101) \u7684\u7eaf\u8272\u56fe\u7247. \u5206\u6790 \u5728\u4f7f\u7528\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u7f29\u653e\u7684\u65f6\u5019, \u539f\u56fe\u4e2d\u7279\u5b9a\u7684\u50cf\u7d20\u70b9\u5c06\u7ec4\u5408\u6210\u65b0\u7684\u56fe\u7247. \u56e0\u6b64\u53ea\u9700\u8981\u63a7\u5236\u539f\u56fe\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\u7684\u50cf\u7d20\u70b9, \u5c31\u80fd\u63a7\u5236\u7f29\u653e\u540e\u751f\u6210\u7684\u56fe\u50cf. \u5c06\u539f\u56fe\u653e\u5927, \u89c2\u5bdf\u5230\u5982\u4e0b\u7ed3\u6784, \u53ef\u4ee5\u770b\u5230\u5927\u91cf\u89c4\u5219\u6392\u5217\u7684 (99, 97, 101) \u50cf\u7d20\u70b9\u8986\u76d6\u4e86\u6574\u4e2a\u539f\u56fe. \u5f53\u7f29\u653e\u81f3 1/2 \u65f6, \u8fd9\u4e9b\u50cf\u7d20\u70b9\u88ab\u53d6\u51fa\u5e76\u7ec4\u5408\u6210\u4e86\u65b0\u7684\u56fe\u50cf. \u5176\u4e2d (99, 97, 101) \u662f\u539f\u56fe\u7684 \u56fe\u50cf\u5747\u503c . \u6ce8: \u751f\u6210\u5e7d\u7075\u56fe\u7247\u7684\u4ee3\u7801\u5982\u4e0b: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean mean = tuple(int(e) for e in mean) for x in range(im.size[0] // 2): for y in range(im.size[1] // 2): im.putpixel((2 * x + 1, 2 * y + 1), mean) im.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7f29\u653e-\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5\u7684\u5e7d\u7075\u4e8b\u4ef6"},{"location":"content/cv/resize_nearst_ghost/#_1","text":"\u5f53\u901a\u8fc7\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u5bf9\u56fe\u7247\u8fdb\u884c\u7f29\u653e\u7684\u65f6\u5019, \u76ee\u6807\u56fe\u50cf\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6765\u6e90\u4e8e\u539f\u56fe\u50cf\u7684\u5bf9\u5e94\u4f4d\u7f6e\u50cf\u7d20 . \u8fd9\u53ef\u80fd\u4f1a\u9020\u6210\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c.\u8003\u8651\u5982\u4e0b\u56fe\u7247, \u8be5\u56fe\u50cf\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u522b, \u4f46\u5bf9\u8be5\u56fe\u50cf\u8fdb\u884c\u7f29\u653e\u65f6: import PIL.Image im = PIL.Image.open('/img/jp_ghost.bmp') im = im.resize((im.size[0] // 2, im.size[1] // 2), PIL.Image.NEAREST) im.show() \u957f\u5bbd\u5747\u7f29\u653e 1/2 \u540e\u7684\u56fe\u7247\u5982\u4e0b: \u539f\u56fe\u53d8\u6210\u4e86\u4e00\u5f20\u989c\u8272\u4e3a (99, 97, 101) \u7684\u7eaf\u8272\u56fe\u7247.","title":"\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u7684\u5e7d\u7075\u4e8b\u4ef6"},{"location":"content/cv/resize_nearst_ghost/#_2","text":"\u5728\u4f7f\u7528\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u7f29\u653e\u7684\u65f6\u5019, \u539f\u56fe\u4e2d\u7279\u5b9a\u7684\u50cf\u7d20\u70b9\u5c06\u7ec4\u5408\u6210\u65b0\u7684\u56fe\u7247. \u56e0\u6b64\u53ea\u9700\u8981\u63a7\u5236\u539f\u56fe\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\u7684\u50cf\u7d20\u70b9, \u5c31\u80fd\u63a7\u5236\u7f29\u653e\u540e\u751f\u6210\u7684\u56fe\u50cf. \u5c06\u539f\u56fe\u653e\u5927, \u89c2\u5bdf\u5230\u5982\u4e0b\u7ed3\u6784, \u53ef\u4ee5\u770b\u5230\u5927\u91cf\u89c4\u5219\u6392\u5217\u7684 (99, 97, 101) \u50cf\u7d20\u70b9\u8986\u76d6\u4e86\u6574\u4e2a\u539f\u56fe. \u5f53\u7f29\u653e\u81f3 1/2 \u65f6, \u8fd9\u4e9b\u50cf\u7d20\u70b9\u88ab\u53d6\u51fa\u5e76\u7ec4\u5408\u6210\u4e86\u65b0\u7684\u56fe\u50cf. \u5176\u4e2d (99, 97, 101) \u662f\u539f\u56fe\u7684 \u56fe\u50cf\u5747\u503c . \u6ce8: \u751f\u6210\u5e7d\u7075\u56fe\u7247\u7684\u4ee3\u7801\u5982\u4e0b: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean mean = tuple(int(e) for e in mean) for x in range(im.size[0] // 2): for y in range(im.size[1] // 2): im.putpixel((2 * x + 1, 2 * y + 1), mean) im.show()","title":"\u5206\u6790"},{"location":"content/cv/safe_color/","text":"216 \u5b89\u5168\u8272 \u867d\u7136\u76ee\u524d\u663e\u793a\u5668, \u663e\u5361\u63d0\u4f9b 24 \u6bd4\u7279\u7684 RGB \u56fe\u50cf\u7684\u5408\u7406\u7684\u5f69\u8272\u518d\u73b0, \u4f46\u4eca\u5929\u6240\u7528\u7684\u7cfb\u7edf\u5f88\u591a\u4ecd\u7136\u5c40\u9650\u4e8e 256 \u79cd\u989c\u8272. \u989c\u8272\u7684\u663e\u793a\u4e0e\u89c2\u5bdf\u8005\u786c\u4ef6\u65e0\u5173\u662f\u975e\u5e38\u91cd\u8981\u7684, \u8fd9\u79cd\u989c\u8272\u5b50\u96c6\u79f0\u4e3a \u5b89\u5168\u8272 . \u5176\u4e2d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u662f 216 \u79cd\u5b89\u5168\u8272. \u5b89\u5168\u8272\u8981\u6c42 RGB \u4e09\u4e2a\u901a\u9053\u5206\u91cf\u53ea\u80fd\u7531 0x00 , 0x33 , 0x66 , 0x99 , 0xCC , 0xFF \u6784\u6210, \u56e0\u6b64\u603b\u8ba1 $$6^3 = 216$$ \u79cd\u989c\u8272.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u5b89\u5168\u8272"},{"location":"content/cv/safe_color/#216","text":"\u867d\u7136\u76ee\u524d\u663e\u793a\u5668, \u663e\u5361\u63d0\u4f9b 24 \u6bd4\u7279\u7684 RGB \u56fe\u50cf\u7684\u5408\u7406\u7684\u5f69\u8272\u518d\u73b0, \u4f46\u4eca\u5929\u6240\u7528\u7684\u7cfb\u7edf\u5f88\u591a\u4ecd\u7136\u5c40\u9650\u4e8e 256 \u79cd\u989c\u8272. \u989c\u8272\u7684\u663e\u793a\u4e0e\u89c2\u5bdf\u8005\u786c\u4ef6\u65e0\u5173\u662f\u975e\u5e38\u91cd\u8981\u7684, \u8fd9\u79cd\u989c\u8272\u5b50\u96c6\u79f0\u4e3a \u5b89\u5168\u8272 . \u5176\u4e2d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u662f 216 \u79cd\u5b89\u5168\u8272. \u5b89\u5168\u8272\u8981\u6c42 RGB \u4e09\u4e2a\u901a\u9053\u5206\u91cf\u53ea\u80fd\u7531 0x00 , 0x33 , 0x66 , 0x99 , 0xCC , 0xFF \u6784\u6210, \u56e0\u6b64\u603b\u8ba1 $$6^3 = 216$$ \u79cd\u989c\u8272.","title":"216 \u5b89\u5168\u8272"},{"location":"content/cv/spatial_filter/","text":"\u7a7a\u95f4\u6ee4\u6ce2\u57fa\u7840 \u67d0\u4e9b\u90bb\u57df\u5904\u7406\u5de5\u4f5c\u662f\u64cd\u4f5c\u90bb\u57df\u7684\u56fe\u50cf\u50cf\u7d20\u503c\u4ee5\u53ca\u76f8\u5e94\u7684\u4e0e\u90bb\u57df\u6709\u76f8\u540c\u7ef4\u6570\u7684\u5b50\u56fe\u50cf\u7684\u503c. \u8fd9\u4e9b\u5b50\u56fe\u50cf\u53ef\u4ee5\u88ab\u79f0\u4e3a \u6ee4\u6ce2\u5668 , \u63a9\u6a21 , \u6838 , \u6a21\u677f \u6216 \u7a97\u53e3 . \u5728\u6ee4\u6ce2\u5668\u5b50\u56fe\u50cf\u4e2d\u7684\u503c\u662f\u7cfb\u6570, \u800c\u4e0d\u662f\u50cf\u7d20\u503c. \u7a7a\u95f4\u6ee4\u6ce2\u7684\u673a\u7406\u5c31\u662f\u5728\u5f85\u5904\u7406\u56fe\u50cf\u4e0a\u9010\u70b9\u5730\u79fb\u52a8\u63a9\u6a21. \u5728\u6bcf\u4e00\u70b9, \u6ee4\u6ce2\u5668\u7684\u54cd\u5e94\u901a\u8fc7\u4e8b\u5148\u5b9a\u4e49\u7684\u5173\u7cfb\u6765\u8ba1\u7b97. \u5bf9\u4e8e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2, \u5176\u76f8\u5e94\u7531\u6ee4\u6ce2\u5668\u7cfb\u6570\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u626b\u8fc7\u533a\u57df\u7684\u76f8\u5e94\u50cf\u7d20\u503c\u7684\u4e58\u79ef\u4e4b\u548c\u7ed9\u51fa. \u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5904\u7406\u7ecf\u5e38\u88ab\u79f0\u4e3a\"\u63a9\u6a21\u4e0e\u56fe\u50cf\u7684\u5377\u79ef\", \u7c7b\u4f3c\u7684, \u6ee4\u6ce2\u6a21\u677f\u6709\u65f6\u4e5f\u6210\u4e3a\"\u5377\u79ef\u6a21\u677f\", \"\u5377\u79ef\u6838\" \u4e00\u8bcd\u4e5f\u5e38\u7528\u4e8e\u6b64. \u5b9e\u73b0\u7a7a\u95f4\u6ee4\u6ce2\u90bb\u57df\u5904\u7406\u65f6\u7684\u4e00\u4e2a\u91cd\u8981\u8003\u8651\u56e0\u7d20\u5c31\u662f \u6ee4\u6ce2\u4e2d\u5fc3\u9760\u8fd1\u56fe\u50cf\u8f6e\u5eca\u65f6\u53d1\u751f\u7684\u60c5\u51b5 . \u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u5927\u5c0f\u4e3a n * n \u7684\u65b9\u5f62\u63a9\u6a21, \u5f53\u63a9\u6a21\u4e2d\u5fc3\u8ddd\u79bb\u56fe\u50cf\u8fb9\u7f18\u4e3a (n-1)/2 \u4e2a\u50cf\u7d20\u65f6, \u8be5\u63a9\u6a21\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0e\u56fe\u50cf\u8f6e\u5ed3\u76f8\u91cd\u5408. \u5982\u679c\u63a9\u6a21\u7684\u4e2d\u5fc3\u7ee7\u7eed\u5411\u56fe\u50cf\u8fb9\u7f18\u9760\u8fd1,\u90a3\u4e48\u63a9\u6a21\u7684\u884c\u6216\u5217\u5c31\u4f1a\u5904\u4e8e\u56fe\u50cf\u5e73\u9762\u4e4b\u5916. \u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u8fd9\u79cd\u95ee\u9898. \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5c06\u63a9\u6a21\u4e2d\u5fc3\u70b9\u7684\u79fb\u52a8\u8303\u56f4\u9650\u5236\u5728\u8ddd\u79bb\u56fe\u50cf\u8fb9\u7f18\u4e0d\u5c0f\u4e8e (n-1)/2\u4e2a\u50cf\u7d20\u5904. \u8fd9\u79cd\u505a\u6cd5\u5c06\u4f7f\u5904\u7406\u540e\u7684\u56fe\u50cf\u6bd4\u539f\u59cb\u56fe\u50cf\u7a0d\u5c0f, \u4f46\u6ee4\u6ce2\u540e\u7684\u56fe\u50cf\u4e2d\u7684\u6240\u6709\u50cf\u7d20\u70b9\u90fd\u7531\u6574\u4e2a\u63a9\u6a21\u5904\u7406. \u5982\u679c\u8981\u6c42\u5904\u7406\u540e\u7684\u8f93\u51fa\u56fe\u50cf\u4e0e\u539f\u59cb\u56fe\u50cf\u4e00\u6837\u5927, \u90a3\u4e48\u6240\u91c7\u7528\u7684\u5178\u578b\u65b9\u6cd5\u662f, \u7528\u5168\u90e8\u5305\u542b\u4e8e\u56fe\u50cf\u4e2d\u7684\u63a9\u6a21\u90e8\u5206\u6ee4\u6ce2\u6240\u6709\u50cf\u7d20. \u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5, \u56fe\u50cf\u9760\u8fd1\u8fb9\u7f18\u90e8\u5206\u7684\u50cf\u7d20\u5e26\u5c06\u7528\u90e8\u5206\u6ee4\u6ce2\u63a9\u6a21\u6765\u5904\u7406. \u53e6\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u5728\u56fe\u50cf\u8fb9\u7f18\u4ee5\u5916\u518d\u8865\u4e0a\u4e00\u884c\u548c\u4e00\u5217\u7070\u5ea6\u4e3a\u96f6\u7684\u50cf\u7d20\u70b9(\u5176\u7070\u5ea6\u4e5f\u53ef\u4ee5\u4e3a\u5176\u4ed6\u5e38\u503c), \u6216\u8005\u5c06\u8fb9\u7f18\u590d\u5236\u8865\u5728\u56fe\u50cf\u4e4b\u5916. \u8865\u4e0a\u7684\u90a3\u90e8\u5206\u7ecf\u8fc7\u5904\u7406\u540e\u53bb\u9664. \u8fd9\u79cd\u65b9\u6cd5\u4fdd\u6301\u4e86\u5904\u73b0\u540e\u7684\u56fe\u50cf\u5f13\u539f\u59cb\u56fe\u50cf\u5c3a\u5bf8\u5927\u5c0f\u76f8\u7b49, \u4f46\u662f\u8865\u5728\u9760\u8fd1\u56fe\u50cf\u8fb9\u7f18\u7684\u90e8\u5206\u4f1a\u5e26\u6765\u4e0d\u826f\u5f71\u54cd, \u8fd9\u79cd\u5f71\u54cd\u968f\u7740\u63a9\u6a21\u5c3a\u5bf8\u7684\u589e\u52a0\u800c\u589e\u5927. \u603b\u4e4b, \u83b7\u5f97\u6700\u4f73\u6ee4\u6ce2\u6548\u679c\u7684\u60df\u4e00\u65b9\u6cd5\u662f\u4f7f\u6ee4\u6ce2\u63a9\u6a21\u5c6e\u5fc3\u8ddd\u539f\u56fe\u50cf\u8fb9\u7f18\u7684\u8ddd\u79bb\u4e0d\u5c0f\u4e8e (n-1)/2 \u4e2a\u50cf\u7d20.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7a7a\u95f4\u6ee4\u6ce2\u57fa\u7840"},{"location":"content/cv/spatial_filter/#_1","text":"\u67d0\u4e9b\u90bb\u57df\u5904\u7406\u5de5\u4f5c\u662f\u64cd\u4f5c\u90bb\u57df\u7684\u56fe\u50cf\u50cf\u7d20\u503c\u4ee5\u53ca\u76f8\u5e94\u7684\u4e0e\u90bb\u57df\u6709\u76f8\u540c\u7ef4\u6570\u7684\u5b50\u56fe\u50cf\u7684\u503c. \u8fd9\u4e9b\u5b50\u56fe\u50cf\u53ef\u4ee5\u88ab\u79f0\u4e3a \u6ee4\u6ce2\u5668 , \u63a9\u6a21 , \u6838 , \u6a21\u677f \u6216 \u7a97\u53e3 . \u5728\u6ee4\u6ce2\u5668\u5b50\u56fe\u50cf\u4e2d\u7684\u503c\u662f\u7cfb\u6570, \u800c\u4e0d\u662f\u50cf\u7d20\u503c. \u7a7a\u95f4\u6ee4\u6ce2\u7684\u673a\u7406\u5c31\u662f\u5728\u5f85\u5904\u7406\u56fe\u50cf\u4e0a\u9010\u70b9\u5730\u79fb\u52a8\u63a9\u6a21. \u5728\u6bcf\u4e00\u70b9, \u6ee4\u6ce2\u5668\u7684\u54cd\u5e94\u901a\u8fc7\u4e8b\u5148\u5b9a\u4e49\u7684\u5173\u7cfb\u6765\u8ba1\u7b97. \u5bf9\u4e8e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2, \u5176\u76f8\u5e94\u7531\u6ee4\u6ce2\u5668\u7cfb\u6570\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u626b\u8fc7\u533a\u57df\u7684\u76f8\u5e94\u50cf\u7d20\u503c\u7684\u4e58\u79ef\u4e4b\u548c\u7ed9\u51fa. \u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5904\u7406\u7ecf\u5e38\u88ab\u79f0\u4e3a\"\u63a9\u6a21\u4e0e\u56fe\u50cf\u7684\u5377\u79ef\", \u7c7b\u4f3c\u7684, \u6ee4\u6ce2\u6a21\u677f\u6709\u65f6\u4e5f\u6210\u4e3a\"\u5377\u79ef\u6a21\u677f\", \"\u5377\u79ef\u6838\" \u4e00\u8bcd\u4e5f\u5e38\u7528\u4e8e\u6b64. \u5b9e\u73b0\u7a7a\u95f4\u6ee4\u6ce2\u90bb\u57df\u5904\u7406\u65f6\u7684\u4e00\u4e2a\u91cd\u8981\u8003\u8651\u56e0\u7d20\u5c31\u662f \u6ee4\u6ce2\u4e2d\u5fc3\u9760\u8fd1\u56fe\u50cf\u8f6e\u5eca\u65f6\u53d1\u751f\u7684\u60c5\u51b5 . \u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u5927\u5c0f\u4e3a n * n \u7684\u65b9\u5f62\u63a9\u6a21, \u5f53\u63a9\u6a21\u4e2d\u5fc3\u8ddd\u79bb\u56fe\u50cf\u8fb9\u7f18\u4e3a (n-1)/2 \u4e2a\u50cf\u7d20\u65f6, \u8be5\u63a9\u6a21\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0e\u56fe\u50cf\u8f6e\u5ed3\u76f8\u91cd\u5408. \u5982\u679c\u63a9\u6a21\u7684\u4e2d\u5fc3\u7ee7\u7eed\u5411\u56fe\u50cf\u8fb9\u7f18\u9760\u8fd1,\u90a3\u4e48\u63a9\u6a21\u7684\u884c\u6216\u5217\u5c31\u4f1a\u5904\u4e8e\u56fe\u50cf\u5e73\u9762\u4e4b\u5916. \u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u8fd9\u79cd\u95ee\u9898. \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5c06\u63a9\u6a21\u4e2d\u5fc3\u70b9\u7684\u79fb\u52a8\u8303\u56f4\u9650\u5236\u5728\u8ddd\u79bb\u56fe\u50cf\u8fb9\u7f18\u4e0d\u5c0f\u4e8e (n-1)/2\u4e2a\u50cf\u7d20\u5904. \u8fd9\u79cd\u505a\u6cd5\u5c06\u4f7f\u5904\u7406\u540e\u7684\u56fe\u50cf\u6bd4\u539f\u59cb\u56fe\u50cf\u7a0d\u5c0f, \u4f46\u6ee4\u6ce2\u540e\u7684\u56fe\u50cf\u4e2d\u7684\u6240\u6709\u50cf\u7d20\u70b9\u90fd\u7531\u6574\u4e2a\u63a9\u6a21\u5904\u7406. \u5982\u679c\u8981\u6c42\u5904\u7406\u540e\u7684\u8f93\u51fa\u56fe\u50cf\u4e0e\u539f\u59cb\u56fe\u50cf\u4e00\u6837\u5927, \u90a3\u4e48\u6240\u91c7\u7528\u7684\u5178\u578b\u65b9\u6cd5\u662f, \u7528\u5168\u90e8\u5305\u542b\u4e8e\u56fe\u50cf\u4e2d\u7684\u63a9\u6a21\u90e8\u5206\u6ee4\u6ce2\u6240\u6709\u50cf\u7d20. \u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5, \u56fe\u50cf\u9760\u8fd1\u8fb9\u7f18\u90e8\u5206\u7684\u50cf\u7d20\u5e26\u5c06\u7528\u90e8\u5206\u6ee4\u6ce2\u63a9\u6a21\u6765\u5904\u7406. \u53e6\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u5728\u56fe\u50cf\u8fb9\u7f18\u4ee5\u5916\u518d\u8865\u4e0a\u4e00\u884c\u548c\u4e00\u5217\u7070\u5ea6\u4e3a\u96f6\u7684\u50cf\u7d20\u70b9(\u5176\u7070\u5ea6\u4e5f\u53ef\u4ee5\u4e3a\u5176\u4ed6\u5e38\u503c), \u6216\u8005\u5c06\u8fb9\u7f18\u590d\u5236\u8865\u5728\u56fe\u50cf\u4e4b\u5916. \u8865\u4e0a\u7684\u90a3\u90e8\u5206\u7ecf\u8fc7\u5904\u7406\u540e\u53bb\u9664. \u8fd9\u79cd\u65b9\u6cd5\u4fdd\u6301\u4e86\u5904\u73b0\u540e\u7684\u56fe\u50cf\u5f13\u539f\u59cb\u56fe\u50cf\u5c3a\u5bf8\u5927\u5c0f\u76f8\u7b49, \u4f46\u662f\u8865\u5728\u9760\u8fd1\u56fe\u50cf\u8fb9\u7f18\u7684\u90e8\u5206\u4f1a\u5e26\u6765\u4e0d\u826f\u5f71\u54cd, \u8fd9\u79cd\u5f71\u54cd\u968f\u7740\u63a9\u6a21\u5c3a\u5bf8\u7684\u589e\u52a0\u800c\u589e\u5927. \u603b\u4e4b, \u83b7\u5f97\u6700\u4f73\u6ee4\u6ce2\u6548\u679c\u7684\u60df\u4e00\u65b9\u6cd5\u662f\u4f7f\u6ee4\u6ce2\u63a9\u6a21\u5c6e\u5fc3\u8ddd\u539f\u56fe\u50cf\u8fb9\u7f18\u7684\u8ddd\u79bb\u4e0d\u5c0f\u4e8e (n-1)/2 \u4e2a\u50cf\u7d20.","title":"\u7a7a\u95f4\u6ee4\u6ce2\u57fa\u7840"},{"location":"content/cv/spatial_filter_gaussian_blur/","text":"\u9ad8\u65af\u6a21\u7cca \u9ad8\u65af\u6a21\u7cca(\u82f1\u8bed: Gaussian Blur), \u4e5f\u53eb\u9ad8\u65af\u5e73\u6ed1, \u662f\u5728 Adobe Photoshop, GIMP \u4ee5\u53ca Paint.NET \u7b49\u56fe\u50cf\u5904\u7406\u8f6f\u4ef6\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u5904\u7406\u6548\u679c, \u901a\u5e38\u7528\u5b83\u6765\u51cf\u5c11\u56fe\u50cf\u566a\u58f0\u4ee5\u53ca\u964d\u4f4e\u7ec6\u8282\u5c42\u6b21. \u8fd9\u79cd\u6a21\u7cca\u6280\u672f\u751f\u6210\u7684\u56fe\u50cf, \u5176\u89c6\u89c9\u6548\u679c\u5c31\u50cf\u662f\u7ecf\u8fc7\u4e00\u4e2a\u534a\u900f\u660e\u5c4f\u5e55\u5728\u89c2\u5bdf\u56fe\u50cf, \u8fd9\u4e0e\u955c\u5934\u7126\u5916\u6210\u50cf\u6548\u679c\u6563\u666f\u4ee5\u53ca\u666e\u901a\u7167\u660e\u9634\u5f71\u4e2d\u7684\u6548\u679c\u90fd\u660e\u663e\u4e0d\u540c. \u9ad8\u65af\u5e73\u6ed1\u4e5f\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u7b97\u6cd5\u4e2d\u7684\u9884\u5148\u5904\u7406\u9636\u6bb5, \u4ee5\u589e\u5f3a\u56fe\u50cf\u5728\u4e0d\u540c\u6bd4\u4f8b\u5927\u5c0f\u4e0b\u7684\u56fe\u50cf\u6548\u679c(\u53c2\u89c1\u5c3a\u5ea6\u7a7a\u95f4\u8868\u793a\u4ee5\u53ca\u5c3a\u5ea6\u7a7a\u95f4\u5b9e\u73b0). \u4ece\u6570\u5b66\u7684\u89d2\u5ea6\u6765\u770b, \u56fe\u50cf\u7684\u9ad8\u65af\u6a21\u7cca\u8fc7\u7a0b\u5c31\u662f\u56fe\u50cf\u4e0e\u6b63\u6001\u5206\u5e03\u505a\u5377\u79ef. \u7531\u4e8e\u6b63\u6001\u5206\u5e03\u53c8\u53eb\u4f5c\u9ad8\u65af\u5206\u5e03, \u6240\u4ee5\u8fd9\u9879\u6280\u672f\u5c31\u53eb\u4f5c\u9ad8\u65af\u6a21\u7cca. \u56fe\u50cf\u4e0e\u5706\u5f62\u65b9\u6846\u6a21\u7cca\u505a\u5377\u79ef\u5c06\u4f1a\u751f\u6210\u66f4\u52a0\u7cbe\u786e\u7684\u7126\u5916\u6210\u50cf\u6548\u679c. \u7531\u4e8e\u9ad8\u65af\u51fd\u6570\u7684\u5085\u7acb\u53f6\u53d8\u6362\u662f\u53e6\u5916\u4e00\u4e2a\u9ad8\u65af\u51fd\u6570, \u6240\u4ee5\u9ad8\u65af\u6a21\u7cca\u5bf9\u4e8e\u56fe\u50cf\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u4f4e\u901a\u6ee4\u6ce2\u5668. \u6548\u679c\u5c55\u793a \u673a\u7406 \u9ad8\u65af\u6a21\u7cca\u662f\u4e00\u79cd\u56fe\u50cf\u6a21\u7cca\u6ee4\u6ce2\u5668, \u5b83\u7528\u6b63\u6001\u5206\u5e03\u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u53d8\u6362. N\u7ef4\u7a7a\u95f4\u6b63\u6001\u5206\u5e03\u65b9\u7a0b\u4e3a $$ G(r) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}^N}e^{-r^2 / 2\\sigma^2} $$ \u5728\u4e8c\u7ef4\u7a7a\u95f4\u5b9a\u4e49\u4e3a $$ G(r) = \\frac{1}{2\\pi\\sigma^2}e^{-(u^2 + v^2) / 2\\sigma^2} $$ \u5176\u4e2d r \u662f\u6a21\u7cca\u534a\u5f84 $r^2 = u^2 + v^2$, \u03c3 \u662f\u6b63\u6001\u5206\u5e03\u7684\u6807\u51c6\u504f\u5dee. \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d, \u8fd9\u4e2a\u516c\u5f0f\u751f\u6210\u7684\u66f2\u9762\u7684\u7b49\u9ad8\u7ebf\u662f\u4ece\u4e2d\u5fc3\u5f00\u59cb\u5448\u6b63\u6001\u5206\u5e03\u7684\u540c\u5fc3\u5706. \u5206\u5e03\u4e0d\u4e3a\u96f6\u7684\u50cf\u7d20\u7ec4\u6210\u7684\u5377\u79ef\u77e9\u9635\u4e0e\u539f\u59cb\u56fe\u50cf\u505a\u53d8\u6362. \u6bcf\u4e2a\u50cf\u7d20\u7684\u503c\u90fd\u662f\u5468\u56f4\u76f8\u90bb\u50cf\u7d20\u503c\u7684\u52a0\u6743\u5e73\u5747. \u539f\u59cb\u50cf\u7d20\u7684\u503c\u6709\u6700\u5927\u7684\u9ad8\u65af\u5206\u5e03\u503c, \u6240\u4ee5\u6709\u6700\u5927\u7684\u6743\u91cd, \u76f8\u90bb\u50cf\u7d20\u968f\u7740\u8ddd\u79bb\u539f\u59cb\u50cf\u7d20\u8d8a\u6765\u8d8a\u8fdc, \u5176\u6743\u91cd\u4e5f\u8d8a\u6765\u8d8a\u5c0f. \u8fd9\u6837\u8fdb\u884c\u6a21\u7cca\u5904\u7406\u6bd4\u5176\u5b83\u7684\u5747\u8861\u6a21\u7cca\u6ee4\u6ce2\u5668\u66f4\u9ad8\u5730\u4fdd\u7559\u4e86\u8fb9\u7f18\u6548\u679c. \u03c3 \u503c\u4ecb\u7ecd \u5c3a\u5ea6\u53c2\u6570 \u03c3 \u51b3\u5b9a\u4e86\u5206\u5e03\u5e45\u5ea6, \u4ee5\u4e0b\u662f\u4e0d\u540c\u5c3a\u5ea6\u53c2\u6570 \u03c3 \u7684\u4e00\u7ef4\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u56fe\u50cf, \u5728\u9ad8\u65af\u6a21\u7cca\u5904\u7406\u4e2d, \u03c3 \u5e38\u53d6 1.5. \u6807\u51c6\u6b63\u6001\u5206\u5e03\u662f\u4f4d\u7f6e\u53c2\u6570 \u03bc = 0, \u5c3a\u5ea6\u53c2\u6570 \u03c3 = 1 \u7684\u6b63\u6001\u5206\u5e03 \u6743\u91cd\u77e9\u9635 \u6839\u636e\u5b9a\u4e49, \u5199\u51fa\u4e8c\u7ef4\u6b63\u6001\u5206\u5e03\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4ee3\u7801\u8868\u8fbe\u5f0f: import math def get_cv(r, sigma): return 1 / (2 * math.pi * sigma ** 2) * math.exp((-r**2) / (2 * sigma ** 2)) \u53d6 \u03c3 = 1.5, \u5e76\u5047\u5b9a\u4e2d\u5fc3\u5750\u6807\u4e3a (0, 0), \u4ee3\u5165\u516c\u5f0f, \u5219\u5bb9\u6613\u5f97\u5230\u5305\u542b\u4e2d\u5fc3\u5750\u6807\u5728\u5185\u7684 25(\u5373: \u6a21\u7cca\u534a\u5f84 r=2) \u4e2a\u5750\u6807\u7684\u6743\u91cd\u4e3a [[ 0.01195525 0.02328564 0.02908025 0.02328564 0.01195525] [ 0.02328564 0.04535423 0.05664058 0.04535423 0.02328564] [ 0.02908025 0.05664058 0.07073553 0.05664058 0.02908025] [ 0.02328564 0.04535423 0.05664058 0.04535423 0.02328564] [ 0.01195525 0.02328564 0.02908025 0.02328564 0.01195525]] \u5176\u6743\u91cd\u603b\u548c\u7b49\u4e8e 0.82914190, \u6211\u4eec\u9700\u8981\u5176\u6743\u91cd\u548c\u4e3a 1, \u56e0\u6b64\u6bcf\u4e00\u9879\u9664\u4ee5 0.82914190 \u540e\u5f97\u5230 [[ 0.01441882 0.02808402 0.0350727 0.02808402 0.01441882] [ 0.02808402 0.05470021 0.06831229 0.05470021 0.02808402] [ 0.0350727 0.06831229 0.08531173 0.06831229 0.0350727 ] [ 0.02808402 0.05470021 0.06831229 0.05470021 0.02808402] [ 0.01441882 0.02808402 0.0350727 0.02808402 0.01441882]] \u5047\u8bbe\u73b0\u5728\u6709 25 \u4e2a\u50cf\u7d20\u70b9, \u6bcf\u4e2a\u50cf\u7d20\u70b9\u90fd\u662f (0~255) \u7684\u7070\u5ea6\u503c, \u4e2d\u5fc3\u5750\u6807\u7070\u5ea6\u503c\u4e3a 200, \u5176\u4f59\u5750\u6807\u7070\u5ea6\u503c\u5747\u4e3a 10: [[ 10 10 10 10 10] [ 10 10 10 10 10] [ 10 10 200 10 10] [ 10 10 10 10 10] [ 10 10 10 10 10]] \u6bcf\u4e2a\u50cf\u7d20\u5206\u522b\u4e58\u4ee5\u6743\u91cd\u77e9\u9635, \u5f97\u5230 [[ 0.14418818 0.28084023 0.35072701 0.28084023 0.14418818] [ 0.28084023 0.54700208 0.68312293 0.54700208 0.28084023] [ 0.35072701 0.68312293 17.06234604 0.68312293 0.35072701] [ 0.28084023 0.54700208 0.68312293 0.54700208 0.28084023] [ 0.14418818 0.28084023 0.35072701 0.28084023 0.14418818]] \u5bf9\u8be5\u77e9\u9635\u6c42\u548c, \u5f97\u5230 sum = 26, \u5373\u9ad8\u65af\u6a21\u7cca\u540e, \u4e2d\u5fc3\u5750\u6807\u7684\u7070\u5ea6\u503c\u4e3a 26. \u53ef\u4ee5\u770b\u5230, \u76f8\u6bd4\u539f\u5148 200 \u7684\u7070\u5ea6\u503c, \u9ad8\u65af\u6a21\u7cca\u540e\u7684\u7070\u5ea6\u503c\u4e0e\"\u5468\u56f4\u50cf\u7d20\"\u7684\u566a\u58f0\u4ee5\u53ca\u7ec6\u8282\u5c42\u6b21\u964d\u4f4e\u4e86, \u4ea6\u5373\"\u6a21\u7cca\"\u4e86. \u5982\u679c\u5bf9 RGB \u4e09\u4e2a\u901a\u9053\u5206\u522b\u8fdb\u884c\u9ad8\u65af\u6a21\u7cca\u5728\u5408\u5e76\u5904\u7406, \u5c31\u80fd\u5f97\u5230\u6a21\u7cca\u540e\u7684\u56fe\u50cf\u4e86 \u4ee3\u7801\u5b9e\u73b0 import math import numpy as np import PIL.Image import PIL.ImageFilter import scipy.misc import scipy.signal # \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 def get_cv(r, sigma): return 1 / (2 * math.pi * sigma ** 2) * math.exp((-r**2) / (2 * sigma ** 2)) # \u9ad8\u65af\u6ee4\u6ce2\u63a9\u6a21 def get_window(): # \u6a21\u7cca\u534a\u5f84\u4e3a 2, sigma \u4e3a 1.5 radius, sigma = 2, 1.5 window = np.zeros((radius * 2 + 1, radius * 2 + 1)) for i in range(-radius, radius + 1): for j in range(-radius, radius + 1): r = (i ** 2 + j ** 2) ** 0.5 window[i + radius][j + radius] = get_cv(r, sigma) return window / np.sum(window) def convert_2d(r): window = get_window() s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() PIL \u7248\u672c\u4ee3\u7801\u5bf9\u5e94\u5982\u4e0b: import PIL.Image import PIL.ImageFilter im = PIL.Image.open('/img/jp.jpg') im = im.filter(PIL.ImageFilter.GaussianBlur(radius=2)) im.show() \u7b97\u6cd5\u5c42\u9762\u53ef\u884c\u7684\u4f18\u5316\u9879: \u7ebf\u6027\u53ef\u5206\u6027 . \u4e8c\u7ef4\u77e9\u9635\u53d8\u6362\u5f97\u5230\u7684\u6548\u679c\u53ef\u4ee5\u901a\u8fc7\u5728\u6c34\u5e73\u65b9\u5411\u8fdb\u884c\u4e00\u7ef4\u9ad8\u65af\u77e9\u9635\u53d8\u6362\u52a0\u4e0a\u7ad6\u76f4\u65b9\u5411\u7684\u4e00\u7ef4\u9ad8\u65af\u77e9\u9635\u53d8\u6362\u5f97\u5230. \u4ece\u8ba1\u7b97\u7684\u89d2\u5ea6\u6765\u770b, \u8fd9\u6837\u53ea\u9700\u8981 O(n \u00d7 M \u00d7 N) + O(m \u00d7 M \u00d7 N) \u6b21\u8ba1\u7b97\uff0c\u800c\u4e0d\u53ef\u5206\u7684\u77e9\u9635\u5219\u9700\u8981 O(m x n x M x N) \u6b21\u8ba1\u7b97. \u7a7a\u95f4\u6362\u65f6\u95f4 . \u6a21\u7cca\u534a\u5f84\u4e3a 2 \u7684\u6743\u91cd\u8868\u4ec5\u6709 6 \u4e2a\u53ef\u9009\u6743\u503c, \u4e14\u56fe\u50cf\u7070\u5ea6\u503c\u4ec5\u6709 256 \u79cd. \u56e0\u6b64\u53ea\u9700\u9884\u5148\u8ba1\u7b97 6 * 256 = 1536 \u6b21\u4e58\u6cd5\u8ba1\u7b97, \u4e4b\u540e\u7684\u6240\u6709\u4e58\u6cd5\u8ba1\u7b97\u5c31\u90fd\u80fd\u8f6c\u6362\u4e3a O(1) \u7684\u67e5\u8868. \u4f7f\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u7531\u4f18\u5316\u524d\u7684 25 \u6b21\u4e58\u6cd5\u8ba1\u7b97 + 24 \u6b21\u52a0\u6cd5\u8ba1\u7b97\u51cf\u5c11\u4e3a 24 \u6b21\u52a0\u6cd5\u8ba1\u7b97. \u76f8\u5173\u94fe\u63a5 \u6570\u5b66-\u65b9\u5dee\u4e0e\u6807\u51c6\u5dee \u6570\u5b66-\u6b63\u6001\u5206\u5e03","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7a7a\u95f4\u6ee4\u6ce2-\u9ad8\u65af\u6ee4\u6ce2"},{"location":"content/cv/spatial_filter_gaussian_blur/#_1","text":"\u9ad8\u65af\u6a21\u7cca(\u82f1\u8bed: Gaussian Blur), \u4e5f\u53eb\u9ad8\u65af\u5e73\u6ed1, \u662f\u5728 Adobe Photoshop, GIMP \u4ee5\u53ca Paint.NET \u7b49\u56fe\u50cf\u5904\u7406\u8f6f\u4ef6\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u5904\u7406\u6548\u679c, \u901a\u5e38\u7528\u5b83\u6765\u51cf\u5c11\u56fe\u50cf\u566a\u58f0\u4ee5\u53ca\u964d\u4f4e\u7ec6\u8282\u5c42\u6b21. \u8fd9\u79cd\u6a21\u7cca\u6280\u672f\u751f\u6210\u7684\u56fe\u50cf, \u5176\u89c6\u89c9\u6548\u679c\u5c31\u50cf\u662f\u7ecf\u8fc7\u4e00\u4e2a\u534a\u900f\u660e\u5c4f\u5e55\u5728\u89c2\u5bdf\u56fe\u50cf, \u8fd9\u4e0e\u955c\u5934\u7126\u5916\u6210\u50cf\u6548\u679c\u6563\u666f\u4ee5\u53ca\u666e\u901a\u7167\u660e\u9634\u5f71\u4e2d\u7684\u6548\u679c\u90fd\u660e\u663e\u4e0d\u540c. \u9ad8\u65af\u5e73\u6ed1\u4e5f\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u7b97\u6cd5\u4e2d\u7684\u9884\u5148\u5904\u7406\u9636\u6bb5, \u4ee5\u589e\u5f3a\u56fe\u50cf\u5728\u4e0d\u540c\u6bd4\u4f8b\u5927\u5c0f\u4e0b\u7684\u56fe\u50cf\u6548\u679c(\u53c2\u89c1\u5c3a\u5ea6\u7a7a\u95f4\u8868\u793a\u4ee5\u53ca\u5c3a\u5ea6\u7a7a\u95f4\u5b9e\u73b0). \u4ece\u6570\u5b66\u7684\u89d2\u5ea6\u6765\u770b, \u56fe\u50cf\u7684\u9ad8\u65af\u6a21\u7cca\u8fc7\u7a0b\u5c31\u662f\u56fe\u50cf\u4e0e\u6b63\u6001\u5206\u5e03\u505a\u5377\u79ef. \u7531\u4e8e\u6b63\u6001\u5206\u5e03\u53c8\u53eb\u4f5c\u9ad8\u65af\u5206\u5e03, \u6240\u4ee5\u8fd9\u9879\u6280\u672f\u5c31\u53eb\u4f5c\u9ad8\u65af\u6a21\u7cca. \u56fe\u50cf\u4e0e\u5706\u5f62\u65b9\u6846\u6a21\u7cca\u505a\u5377\u79ef\u5c06\u4f1a\u751f\u6210\u66f4\u52a0\u7cbe\u786e\u7684\u7126\u5916\u6210\u50cf\u6548\u679c. \u7531\u4e8e\u9ad8\u65af\u51fd\u6570\u7684\u5085\u7acb\u53f6\u53d8\u6362\u662f\u53e6\u5916\u4e00\u4e2a\u9ad8\u65af\u51fd\u6570, \u6240\u4ee5\u9ad8\u65af\u6a21\u7cca\u5bf9\u4e8e\u56fe\u50cf\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u4f4e\u901a\u6ee4\u6ce2\u5668.","title":"\u9ad8\u65af\u6a21\u7cca"},{"location":"content/cv/spatial_filter_gaussian_blur/#_2","text":"","title":"\u6548\u679c\u5c55\u793a"},{"location":"content/cv/spatial_filter_gaussian_blur/#_3","text":"\u9ad8\u65af\u6a21\u7cca\u662f\u4e00\u79cd\u56fe\u50cf\u6a21\u7cca\u6ee4\u6ce2\u5668, \u5b83\u7528\u6b63\u6001\u5206\u5e03\u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u53d8\u6362. N\u7ef4\u7a7a\u95f4\u6b63\u6001\u5206\u5e03\u65b9\u7a0b\u4e3a $$ G(r) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}^N}e^{-r^2 / 2\\sigma^2} $$ \u5728\u4e8c\u7ef4\u7a7a\u95f4\u5b9a\u4e49\u4e3a $$ G(r) = \\frac{1}{2\\pi\\sigma^2}e^{-(u^2 + v^2) / 2\\sigma^2} $$ \u5176\u4e2d r \u662f\u6a21\u7cca\u534a\u5f84 $r^2 = u^2 + v^2$, \u03c3 \u662f\u6b63\u6001\u5206\u5e03\u7684\u6807\u51c6\u504f\u5dee. \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d, \u8fd9\u4e2a\u516c\u5f0f\u751f\u6210\u7684\u66f2\u9762\u7684\u7b49\u9ad8\u7ebf\u662f\u4ece\u4e2d\u5fc3\u5f00\u59cb\u5448\u6b63\u6001\u5206\u5e03\u7684\u540c\u5fc3\u5706. \u5206\u5e03\u4e0d\u4e3a\u96f6\u7684\u50cf\u7d20\u7ec4\u6210\u7684\u5377\u79ef\u77e9\u9635\u4e0e\u539f\u59cb\u56fe\u50cf\u505a\u53d8\u6362. \u6bcf\u4e2a\u50cf\u7d20\u7684\u503c\u90fd\u662f\u5468\u56f4\u76f8\u90bb\u50cf\u7d20\u503c\u7684\u52a0\u6743\u5e73\u5747. \u539f\u59cb\u50cf\u7d20\u7684\u503c\u6709\u6700\u5927\u7684\u9ad8\u65af\u5206\u5e03\u503c, \u6240\u4ee5\u6709\u6700\u5927\u7684\u6743\u91cd, \u76f8\u90bb\u50cf\u7d20\u968f\u7740\u8ddd\u79bb\u539f\u59cb\u50cf\u7d20\u8d8a\u6765\u8d8a\u8fdc, \u5176\u6743\u91cd\u4e5f\u8d8a\u6765\u8d8a\u5c0f. \u8fd9\u6837\u8fdb\u884c\u6a21\u7cca\u5904\u7406\u6bd4\u5176\u5b83\u7684\u5747\u8861\u6a21\u7cca\u6ee4\u6ce2\u5668\u66f4\u9ad8\u5730\u4fdd\u7559\u4e86\u8fb9\u7f18\u6548\u679c.","title":"\u673a\u7406"},{"location":"content/cv/spatial_filter_gaussian_blur/#_4","text":"\u5c3a\u5ea6\u53c2\u6570 \u03c3 \u51b3\u5b9a\u4e86\u5206\u5e03\u5e45\u5ea6, \u4ee5\u4e0b\u662f\u4e0d\u540c\u5c3a\u5ea6\u53c2\u6570 \u03c3 \u7684\u4e00\u7ef4\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u56fe\u50cf, \u5728\u9ad8\u65af\u6a21\u7cca\u5904\u7406\u4e2d, \u03c3 \u5e38\u53d6 1.5. \u6807\u51c6\u6b63\u6001\u5206\u5e03\u662f\u4f4d\u7f6e\u53c2\u6570 \u03bc = 0, \u5c3a\u5ea6\u53c2\u6570 \u03c3 = 1 \u7684\u6b63\u6001\u5206\u5e03","title":"\u03c3 \u503c\u4ecb\u7ecd"},{"location":"content/cv/spatial_filter_gaussian_blur/#_5","text":"\u6839\u636e\u5b9a\u4e49, \u5199\u51fa\u4e8c\u7ef4\u6b63\u6001\u5206\u5e03\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4ee3\u7801\u8868\u8fbe\u5f0f: import math def get_cv(r, sigma): return 1 / (2 * math.pi * sigma ** 2) * math.exp((-r**2) / (2 * sigma ** 2)) \u53d6 \u03c3 = 1.5, \u5e76\u5047\u5b9a\u4e2d\u5fc3\u5750\u6807\u4e3a (0, 0), \u4ee3\u5165\u516c\u5f0f, \u5219\u5bb9\u6613\u5f97\u5230\u5305\u542b\u4e2d\u5fc3\u5750\u6807\u5728\u5185\u7684 25(\u5373: \u6a21\u7cca\u534a\u5f84 r=2) \u4e2a\u5750\u6807\u7684\u6743\u91cd\u4e3a [[ 0.01195525 0.02328564 0.02908025 0.02328564 0.01195525] [ 0.02328564 0.04535423 0.05664058 0.04535423 0.02328564] [ 0.02908025 0.05664058 0.07073553 0.05664058 0.02908025] [ 0.02328564 0.04535423 0.05664058 0.04535423 0.02328564] [ 0.01195525 0.02328564 0.02908025 0.02328564 0.01195525]] \u5176\u6743\u91cd\u603b\u548c\u7b49\u4e8e 0.82914190, \u6211\u4eec\u9700\u8981\u5176\u6743\u91cd\u548c\u4e3a 1, \u56e0\u6b64\u6bcf\u4e00\u9879\u9664\u4ee5 0.82914190 \u540e\u5f97\u5230 [[ 0.01441882 0.02808402 0.0350727 0.02808402 0.01441882] [ 0.02808402 0.05470021 0.06831229 0.05470021 0.02808402] [ 0.0350727 0.06831229 0.08531173 0.06831229 0.0350727 ] [ 0.02808402 0.05470021 0.06831229 0.05470021 0.02808402] [ 0.01441882 0.02808402 0.0350727 0.02808402 0.01441882]] \u5047\u8bbe\u73b0\u5728\u6709 25 \u4e2a\u50cf\u7d20\u70b9, \u6bcf\u4e2a\u50cf\u7d20\u70b9\u90fd\u662f (0~255) \u7684\u7070\u5ea6\u503c, \u4e2d\u5fc3\u5750\u6807\u7070\u5ea6\u503c\u4e3a 200, \u5176\u4f59\u5750\u6807\u7070\u5ea6\u503c\u5747\u4e3a 10: [[ 10 10 10 10 10] [ 10 10 10 10 10] [ 10 10 200 10 10] [ 10 10 10 10 10] [ 10 10 10 10 10]] \u6bcf\u4e2a\u50cf\u7d20\u5206\u522b\u4e58\u4ee5\u6743\u91cd\u77e9\u9635, \u5f97\u5230 [[ 0.14418818 0.28084023 0.35072701 0.28084023 0.14418818] [ 0.28084023 0.54700208 0.68312293 0.54700208 0.28084023] [ 0.35072701 0.68312293 17.06234604 0.68312293 0.35072701] [ 0.28084023 0.54700208 0.68312293 0.54700208 0.28084023] [ 0.14418818 0.28084023 0.35072701 0.28084023 0.14418818]] \u5bf9\u8be5\u77e9\u9635\u6c42\u548c, \u5f97\u5230 sum = 26, \u5373\u9ad8\u65af\u6a21\u7cca\u540e, \u4e2d\u5fc3\u5750\u6807\u7684\u7070\u5ea6\u503c\u4e3a 26. \u53ef\u4ee5\u770b\u5230, \u76f8\u6bd4\u539f\u5148 200 \u7684\u7070\u5ea6\u503c, \u9ad8\u65af\u6a21\u7cca\u540e\u7684\u7070\u5ea6\u503c\u4e0e\"\u5468\u56f4\u50cf\u7d20\"\u7684\u566a\u58f0\u4ee5\u53ca\u7ec6\u8282\u5c42\u6b21\u964d\u4f4e\u4e86, \u4ea6\u5373\"\u6a21\u7cca\"\u4e86. \u5982\u679c\u5bf9 RGB \u4e09\u4e2a\u901a\u9053\u5206\u522b\u8fdb\u884c\u9ad8\u65af\u6a21\u7cca\u5728\u5408\u5e76\u5904\u7406, \u5c31\u80fd\u5f97\u5230\u6a21\u7cca\u540e\u7684\u56fe\u50cf\u4e86","title":"\u6743\u91cd\u77e9\u9635"},{"location":"content/cv/spatial_filter_gaussian_blur/#_6","text":"import math import numpy as np import PIL.Image import PIL.ImageFilter import scipy.misc import scipy.signal # \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 def get_cv(r, sigma): return 1 / (2 * math.pi * sigma ** 2) * math.exp((-r**2) / (2 * sigma ** 2)) # \u9ad8\u65af\u6ee4\u6ce2\u63a9\u6a21 def get_window(): # \u6a21\u7cca\u534a\u5f84\u4e3a 2, sigma \u4e3a 1.5 radius, sigma = 2, 1.5 window = np.zeros((radius * 2 + 1, radius * 2 + 1)) for i in range(-radius, radius + 1): for j in range(-radius, radius + 1): r = (i ** 2 + j ** 2) ** 0.5 window[i + radius][j + radius] = get_cv(r, sigma) return window / np.sum(window) def convert_2d(r): window = get_window() s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() PIL \u7248\u672c\u4ee3\u7801\u5bf9\u5e94\u5982\u4e0b: import PIL.Image import PIL.ImageFilter im = PIL.Image.open('/img/jp.jpg') im = im.filter(PIL.ImageFilter.GaussianBlur(radius=2)) im.show() \u7b97\u6cd5\u5c42\u9762\u53ef\u884c\u7684\u4f18\u5316\u9879: \u7ebf\u6027\u53ef\u5206\u6027 . \u4e8c\u7ef4\u77e9\u9635\u53d8\u6362\u5f97\u5230\u7684\u6548\u679c\u53ef\u4ee5\u901a\u8fc7\u5728\u6c34\u5e73\u65b9\u5411\u8fdb\u884c\u4e00\u7ef4\u9ad8\u65af\u77e9\u9635\u53d8\u6362\u52a0\u4e0a\u7ad6\u76f4\u65b9\u5411\u7684\u4e00\u7ef4\u9ad8\u65af\u77e9\u9635\u53d8\u6362\u5f97\u5230. \u4ece\u8ba1\u7b97\u7684\u89d2\u5ea6\u6765\u770b, \u8fd9\u6837\u53ea\u9700\u8981 O(n \u00d7 M \u00d7 N) + O(m \u00d7 M \u00d7 N) \u6b21\u8ba1\u7b97\uff0c\u800c\u4e0d\u53ef\u5206\u7684\u77e9\u9635\u5219\u9700\u8981 O(m x n x M x N) \u6b21\u8ba1\u7b97. \u7a7a\u95f4\u6362\u65f6\u95f4 . \u6a21\u7cca\u534a\u5f84\u4e3a 2 \u7684\u6743\u91cd\u8868\u4ec5\u6709 6 \u4e2a\u53ef\u9009\u6743\u503c, \u4e14\u56fe\u50cf\u7070\u5ea6\u503c\u4ec5\u6709 256 \u79cd. \u56e0\u6b64\u53ea\u9700\u9884\u5148\u8ba1\u7b97 6 * 256 = 1536 \u6b21\u4e58\u6cd5\u8ba1\u7b97, \u4e4b\u540e\u7684\u6240\u6709\u4e58\u6cd5\u8ba1\u7b97\u5c31\u90fd\u80fd\u8f6c\u6362\u4e3a O(1) \u7684\u67e5\u8868. \u4f7f\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u7531\u4f18\u5316\u524d\u7684 25 \u6b21\u4e58\u6cd5\u8ba1\u7b97 + 24 \u6b21\u52a0\u6cd5\u8ba1\u7b97\u51cf\u5c11\u4e3a 24 \u6b21\u52a0\u6cd5\u8ba1\u7b97.","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/spatial_filter_gaussian_blur/#_7","text":"\u6570\u5b66-\u65b9\u5dee\u4e0e\u6807\u51c6\u5dee \u6570\u5b66-\u6b63\u6001\u5206\u5e03","title":"\u76f8\u5173\u94fe\u63a5"},{"location":"content/cv/spatial_filter_mean/","text":"\u7a7a\u95f4\u6ee4\u6ce2-\u5747\u503c\u6ee4\u6ce2 \u5747\u503c\u6ee4\u6ce2\u5668\u7684\u8f93\u51fa\u662f\u5305\u542b\u5728\u6ee4\u6ce2\u63a9\u6a21\u9886\u57df\u5185\u50cf\u7d20\u7684\u7b80\u5355\u5e73\u5747\u503c. \u5747\u503c\u6ee4\u6ce2\u5668\u6700\u5e38\u7528\u7684\u76ee\u7684\u5c31\u662f\u51cf\u566a. \u7136\u800c, \u56fe\u50cf\u8fb9\u7f18\u4e5f\u662f\u7531\u56fe\u50cf\u7070\u5ea6\u5c16\u9510\u53d8\u5316\u5e26\u6765\u7684\u7279\u6027, \u6240\u4ee5\u5747\u503c\u6ee4\u6ce2\u8fd8\u662f\u5b58\u5728\u4e0d\u5e0c\u671b\u7684\u8fb9\u7f18\u6a21\u7cca\u8d1f\u9762\u6548\u5e94. \u5747\u503c\u6ee4\u6ce2\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u5e94\u7528, \u4e3a\u4e86\u5bf9\u611f\u5174\u8da3\u7684\u56fe\u50cf\u5f97\u51fa\u4e00\u4e2a\u7c97\u7565\u63cf\u8ff0\u800c\u6a21\u7cca\u4e00\u5e45\u56fe\u50cf. \u8fd9\u6837, \u90a3\u4e9b\u8f83\u5c0f\u7269\u4f53\u7684\u5f3a\u5ea6\u4e0e\u80cc\u666f\u63c9\u5408\u5728\u4e00\u8d77\u4e86, \u8f83\u5927\u7269\u4f53\u53d8\u5f97\u50cf\u6591\u70b9\u800c\u6613\u4e8e\u68c0\u6d4b.\u63a9\u6a21\u7684\u5927\u5c0f\u7531\u5373\u5c06\u878d\u5165\u80cc\u666f\u4e2d\u7684\u7269\u4f53\u5c3a\u5bf8\u51b3\u5b9a. \u4ee3\u7801\u5b9e\u73b0 \u4f7f\u7528\u4e00\u4e2a 3*3 \u5747\u503c\u6ee4\u6ce2\u5668\u5904\u7406\u56fe\u50cf import numpy as np import PIL.Image import scipy.misc import scipy.signal def convert_2d(r): n = 3 # 3*3 \u6ee4\u6ce2\u5668, \u6bcf\u4e2a\u7cfb\u6570\u90fd\u662f 1/9 window = np.ones((n, n)) / n ** 2 # \u4f7f\u7528\u6ee4\u6ce2\u5668\u5377\u79ef\u56fe\u50cf # mode = same \u8868\u793a\u8f93\u51fa\u5c3a\u5bf8\u7b49\u4e8e\u8f93\u5165\u5c3a\u5bf8 # boundary \u8868\u793a\u91c7\u7528\u5bf9\u79f0\u8fb9\u754c\u6761\u4ef6\u5904\u7406\u56fe\u50cf\u8fb9\u7f18 s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7a7a\u95f4\u6ee4\u6ce2-\u5747\u503c\u6ee4\u6ce2"},{"location":"content/cv/spatial_filter_mean/#-","text":"\u5747\u503c\u6ee4\u6ce2\u5668\u7684\u8f93\u51fa\u662f\u5305\u542b\u5728\u6ee4\u6ce2\u63a9\u6a21\u9886\u57df\u5185\u50cf\u7d20\u7684\u7b80\u5355\u5e73\u5747\u503c. \u5747\u503c\u6ee4\u6ce2\u5668\u6700\u5e38\u7528\u7684\u76ee\u7684\u5c31\u662f\u51cf\u566a. \u7136\u800c, \u56fe\u50cf\u8fb9\u7f18\u4e5f\u662f\u7531\u56fe\u50cf\u7070\u5ea6\u5c16\u9510\u53d8\u5316\u5e26\u6765\u7684\u7279\u6027, \u6240\u4ee5\u5747\u503c\u6ee4\u6ce2\u8fd8\u662f\u5b58\u5728\u4e0d\u5e0c\u671b\u7684\u8fb9\u7f18\u6a21\u7cca\u8d1f\u9762\u6548\u5e94. \u5747\u503c\u6ee4\u6ce2\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u5e94\u7528, \u4e3a\u4e86\u5bf9\u611f\u5174\u8da3\u7684\u56fe\u50cf\u5f97\u51fa\u4e00\u4e2a\u7c97\u7565\u63cf\u8ff0\u800c\u6a21\u7cca\u4e00\u5e45\u56fe\u50cf. \u8fd9\u6837, \u90a3\u4e9b\u8f83\u5c0f\u7269\u4f53\u7684\u5f3a\u5ea6\u4e0e\u80cc\u666f\u63c9\u5408\u5728\u4e00\u8d77\u4e86, \u8f83\u5927\u7269\u4f53\u53d8\u5f97\u50cf\u6591\u70b9\u800c\u6613\u4e8e\u68c0\u6d4b.\u63a9\u6a21\u7684\u5927\u5c0f\u7531\u5373\u5c06\u878d\u5165\u80cc\u666f\u4e2d\u7684\u7269\u4f53\u5c3a\u5bf8\u51b3\u5b9a.","title":"\u7a7a\u95f4\u6ee4\u6ce2-\u5747\u503c\u6ee4\u6ce2"},{"location":"content/cv/spatial_filter_mean/#_1","text":"\u4f7f\u7528\u4e00\u4e2a 3*3 \u5747\u503c\u6ee4\u6ce2\u5668\u5904\u7406\u56fe\u50cf import numpy as np import PIL.Image import scipy.misc import scipy.signal def convert_2d(r): n = 3 # 3*3 \u6ee4\u6ce2\u5668, \u6bcf\u4e2a\u7cfb\u6570\u90fd\u662f 1/9 window = np.ones((n, n)) / n ** 2 # \u4f7f\u7528\u6ee4\u6ce2\u5668\u5377\u79ef\u56fe\u50cf # mode = same \u8868\u793a\u8f93\u51fa\u5c3a\u5bf8\u7b49\u4e8e\u8f93\u5165\u5c3a\u5bf8 # boundary \u8868\u793a\u91c7\u7528\u5bf9\u79f0\u8fb9\u754c\u6761\u4ef6\u5904\u7406\u56fe\u50cf\u8fb9\u7f18 s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/spatial_filter_medium/","text":"\u4e2d\u503c\u6ee4\u6ce2 \u4e2d\u503c\u6ee4\u6ce2\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5668, \u5b83\u7684\u54cd\u5e94\u57fa\u4e8e\u56fe\u50cf\u6ee4\u6ce2\u5668\u5305\u56f4\u7684\u56fe\u50cf\u533a\u57df\u4e2d\u50cf\u7d20\u7684\u7edf\u8ba1\u6392\u5e8f, \u7136\u540e\u7531\u7edf\u8ba1\u6392\u5e8f\u7ed3\u679c\u7684\u503c\u4ee3\u66ff\u4e2d\u5fc3\u50cf\u7d20\u7684\u503c. \u4e2d\u503c\u6ee4\u6ce2\u5668\u5c06\u5176\u50cf\u7d20\u90bb\u57df\u5185\u7684\u7070\u5ea6\u4e2d\u503c\u4ee3\u66ff\u4ee3\u66ff\u8be5\u50cf\u7d20\u7684\u503c. \u4e2d\u503c\u6ee4\u6ce2\u5668\u7684\u4f7f\u7528\u975e\u5e38\u666e\u904d, \u8fd9\u662f\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u5b9a\u7c7b\u578b\u7684\u968f\u673a\u566a\u58f0, \u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f18\u79c0\u7684\u53bb\u566a\u80fd\u529b, \u6bd4\u5c0f\u5c3a\u5bf8\u7684\u5747\u503c\u6ee4\u6ce2\u5668\u6a21\u7cca\u7a0b\u5ea6\u660e\u663e\u8981\u4f4e. \u4e2d\u503c\u6ee4\u6ce2\u5668\u5bf9\u5904\u7406\u8109\u51b2\u566a\u58f0(\u4e5f\u79f0\u6912\u76d0\u566a\u58f0)\u975e\u5e38\u6709\u6548, \u56e0\u4e3a\u8be5\u566a\u58f0\u662f\u4ee5\u9ed1\u767d\u70b9\u53e0\u52a0\u5728\u56fe\u50cf\u4e0a\u9762\u7684. \u4e0e\u4e2d\u503c\u6ee4\u6ce2\u76f8\u4f3c\u7684\u8fd8\u6709\u6700\u5927\u503c\u6ee4\u6ce2\u5668\u548c\u6700\u5c0f\u503c\u6ee4\u6ce2\u5668. \u4ee3\u7801\u5b9e\u73b0 10 * 10 \u7684\u4e2d\u503c\u6ee4\u6ce2\u5668\u5b9e\u73b0 import numpy as np import PIL.Image import scipy.misc import scipy.ndimage def convert_2d(r): n = 10 s = scipy.ndimage.median_filter(r, (n, n)) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u6548\u679c\u5c55\u793a \u4e2d\u503c\u6ee4\u6ce2\u80fd\u4ea7\u751f\u7c7b\u4f3c\u6cb9\u5f69\u4e00\u6837\u7684\u6548\u679c, \u5982\u4e0b\u662f\u4f7f\u7528 10 * 10 \u4e2d\u503c\u6ee4\u6ce2\u5668\u5904\u7406\u540e\u7684\u56fe\u50cf \u5982\u4e0b\u662f\u4f7f\u7528\u4e2d\u503c\u6ee4\u6ce2\u53bb\u9664\u6912\u76d0\u566a\u58f0\u7684\u793a\u4f8b. \u4ece\u5de6\u81f3\u53f3\u5206\u522b\u4e3a \u539f\u59cb\u56fe\u50cf , \u52a0\u5165 \u6912\u76d0\u566a\u58f0 \u540e\u7684\u56fe\u50cf, \u5747\u503c\u6ee4\u6ce2 \u540e\u7684\u56fe\u50cf\u4e0e \u4e2d\u503c\u6ee4\u6ce2 \u540e\u7684\u56fe\u50cf","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7a7a\u95f4\u6ee4\u6ce2-\u4e2d\u503c\u6ee4\u6ce2"},{"location":"content/cv/spatial_filter_medium/#_1","text":"\u4e2d\u503c\u6ee4\u6ce2\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5668, \u5b83\u7684\u54cd\u5e94\u57fa\u4e8e\u56fe\u50cf\u6ee4\u6ce2\u5668\u5305\u56f4\u7684\u56fe\u50cf\u533a\u57df\u4e2d\u50cf\u7d20\u7684\u7edf\u8ba1\u6392\u5e8f, \u7136\u540e\u7531\u7edf\u8ba1\u6392\u5e8f\u7ed3\u679c\u7684\u503c\u4ee3\u66ff\u4e2d\u5fc3\u50cf\u7d20\u7684\u503c. \u4e2d\u503c\u6ee4\u6ce2\u5668\u5c06\u5176\u50cf\u7d20\u90bb\u57df\u5185\u7684\u7070\u5ea6\u4e2d\u503c\u4ee3\u66ff\u4ee3\u66ff\u8be5\u50cf\u7d20\u7684\u503c. \u4e2d\u503c\u6ee4\u6ce2\u5668\u7684\u4f7f\u7528\u975e\u5e38\u666e\u904d, \u8fd9\u662f\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u5b9a\u7c7b\u578b\u7684\u968f\u673a\u566a\u58f0, \u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f18\u79c0\u7684\u53bb\u566a\u80fd\u529b, \u6bd4\u5c0f\u5c3a\u5bf8\u7684\u5747\u503c\u6ee4\u6ce2\u5668\u6a21\u7cca\u7a0b\u5ea6\u660e\u663e\u8981\u4f4e. \u4e2d\u503c\u6ee4\u6ce2\u5668\u5bf9\u5904\u7406\u8109\u51b2\u566a\u58f0(\u4e5f\u79f0\u6912\u76d0\u566a\u58f0)\u975e\u5e38\u6709\u6548, \u56e0\u4e3a\u8be5\u566a\u58f0\u662f\u4ee5\u9ed1\u767d\u70b9\u53e0\u52a0\u5728\u56fe\u50cf\u4e0a\u9762\u7684. \u4e0e\u4e2d\u503c\u6ee4\u6ce2\u76f8\u4f3c\u7684\u8fd8\u6709\u6700\u5927\u503c\u6ee4\u6ce2\u5668\u548c\u6700\u5c0f\u503c\u6ee4\u6ce2\u5668.","title":"\u4e2d\u503c\u6ee4\u6ce2"},{"location":"content/cv/spatial_filter_medium/#_2","text":"10 * 10 \u7684\u4e2d\u503c\u6ee4\u6ce2\u5668\u5b9e\u73b0 import numpy as np import PIL.Image import scipy.misc import scipy.ndimage def convert_2d(r): n = 10 s = scipy.ndimage.median_filter(r, (n, n)) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/spatial_filter_medium/#_3","text":"\u4e2d\u503c\u6ee4\u6ce2\u80fd\u4ea7\u751f\u7c7b\u4f3c\u6cb9\u5f69\u4e00\u6837\u7684\u6548\u679c, \u5982\u4e0b\u662f\u4f7f\u7528 10 * 10 \u4e2d\u503c\u6ee4\u6ce2\u5668\u5904\u7406\u540e\u7684\u56fe\u50cf \u5982\u4e0b\u662f\u4f7f\u7528\u4e2d\u503c\u6ee4\u6ce2\u53bb\u9664\u6912\u76d0\u566a\u58f0\u7684\u793a\u4f8b. \u4ece\u5de6\u81f3\u53f3\u5206\u522b\u4e3a \u539f\u59cb\u56fe\u50cf , \u52a0\u5165 \u6912\u76d0\u566a\u58f0 \u540e\u7684\u56fe\u50cf, \u5747\u503c\u6ee4\u6ce2 \u540e\u7684\u56fe\u50cf\u4e0e \u4e2d\u503c\u6ee4\u6ce2 \u540e\u7684\u56fe\u50cf","title":"\u6548\u679c\u5c55\u793a"},{"location":"content/cv/spatial_filter_sharpening/","text":"\u9510\u5316\u6ee4\u6ce2 \u5728\u6570\u5b66\u4e2d, \u5fae\u5206\u662f\u5bf9\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u5316\u7387\u7684\u4e00\u79cd\u7ebf\u6027\u63cf\u8ff0. \u5fae\u5206\u53ef\u4ee5\u8fd1\u4f3c\u5730\u63cf\u8ff0\u5f53\u51fd\u6570\u81ea\u53d8\u91cf\u7684\u53d6\u503c\u4f5c\u8db3\u591f\u5c0f\u7684\u6539\u53d8\u65f6, \u51fd\u6570\u7684\u503c\u662f\u600e\u6837\u6539\u53d8\u7684. \u6700\u7b80\u5355\u7684\u5404\u5411\u540c\u6027\u5fae\u5206\u7b97\u5b50\u662f\u62c9\u666e\u62c9\u65af\u7b97\u5b50. \u4e00\u4e2a\u4e8c\u5143\u56fe\u50cf\u51fd\u6570 $f(x, y)$ \u7684\u62c9\u666e\u62c9\u65af\u53d8\u6362\u5b9a\u4e49\u4e3a $$ \\bigtriangledown ^2f = \\frac{\\partial ^2f}{\\partial x^2} + \\frac{\\partial ^ 2f}{\\partial y^2} $$ \u56e0\u4e3a\u4efb\u610f\u9636\u5fae\u5206\u90fd\u662f\u7ebf\u6027\u64cd\u4f5c, \u6240\u4ee5\u62c9\u666e\u62c9\u65af\u53d8\u6362\u4e5f\u662f\u4e00\u4e2a\u7ebf\u6027\u64cd\u4f5c. \u4e3a\u4e86\u66f4\u9002\u5408\u4e8e\u56fe\u50cf\u5904\u7406, \u8fd9\u4e00\u65b9\u7a0b\u5fc5\u987b\u8868\u73b0\u4e3a\u79bb\u6563\u5f62\u5f0f. \u8003\u8651\u5230\u6709\u4e24\u4e2a\u53d8\u91cf, \u56e0\u6b64, \u6211\u4eec\u5728 x \u65b9\u5411\u4e0a\u5bf9\u4e8c\u9636\u504f\u5fae\u5206\u91c7\u7528\u4e0b\u5217\u5b9a\u4e49: $$ \\frac{\\partial ^2f}{\\partial x^2} = f(x+1, y) + f(x-1, y) -2f(x, y) $$ \u7c7b\u4f3c\u7684, \u5728 y \u65b9\u5411\u4e0a\u4e3a $$ \\frac{\\partial ^2f}{\\partial y^2} = f(x, y+1) + f(x, y-1) -2f(x, y) $$ \u56e0\u6b64 $$ \\bigtriangledown ^2f = f(x+1, y) + f(x-1, y) + f(x, y+1) + f(x, y-1) -4f(x, y) $$ \u56e0\u6b64, \u6267\u884c\u8fd9\u4e00\u65b0\u5b9a\u4e49\u7684\u63a9\u819c\u5982\u4e0b $$ \\begin{bmatrix} 0 & 1 & 0 \\\\ 1 & -4 & 1\\\\ 0 & 1 & 0 \\end{bmatrix} $$ \u7531\u4e8e\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u662f\u4e00\u79cd\u5fae\u5206\u7b97\u5b50, \u5b83\u7684\u5e94\u7528\u5f3a\u8c03\u56fe\u50cf\u4e2d\u7070\u5ea6\u7684\u7a81\u53d8\u548c\u964d\u4f4e\u7070\u5ea6\u6162\u53d8\u5316\u7684\u533a\u57df. \u8fd9\u5c06\u4ea7\u751f\u4e00\u5e45\u628a\u56fe\u50cf\u4e2d\u7684\u6d45\u7070\u8272\u8fb9\u7ebf\u548c\u7a81\u53d8\u70b9\u53e0\u52a0\u5230\u6697\u80cc\u666f\u4e2d\u7684\u56fe\u50cf. \u5c06\u539f\u59cb\u56fe\u50cf\u548c\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u53e0\u52a0\u5728\u4e00\u8d77\u7684\u7b80\u5355\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u62c9\u666e\u62c9\u65af\u9510\u5316\u540e\u7684\u6548\u679c, \u540c\u65f6\u53c8\u80fd\u590d\u539f\u80cc\u666f\u4fe1\u606f. \u9664\u4e0a\u8ff0\u7684\u6df9\u819c\u5916, \u5e38\u89c1\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u8fd8\u6709 $$ \\begin{bmatrix} 0 & -1 & 0 \\\\ -1 & 4 & -1\\\\ 0 & -1 & 0 \\end{bmatrix} $$ $$ \\begin{bmatrix} -1 & -1 & -1 \\\\ -1 & 8 & -1\\\\ -1 & -1 & -1 \\end{bmatrix} $$ $$ \\begin{bmatrix} 1 & 1 & 1 \\\\ 1 & -8 & 1\\\\ 1 & 1 & 1 \\end{bmatrix} $$ \u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\u7684\u57fa\u672c\u8868\u793a\u65b9\u6cd5\u5982\u4e0b $$ g(x, y)= \\begin{cases} f(x, y) - \\bigtriangledown ^2f(x, y) & \\text{\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u4e2d\u5fc3\u7cfb\u6570\u4e3a\u8d1f} \\\\ f(x, y) + \\bigtriangledown ^2f(x, y) & \\text{\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u4e2d\u5fc3\u7cfb\u6570\u4e3a\u6b63} \\end{cases} $$ \u4ee3\u7801\u5b9e\u73b0 \u5728\u673a\u7406\u4e2d, \u6211\u4eec\u9996\u5148\u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u8fc7\u6ee4\u56fe\u50cf, \u7136\u540e, \u4ece\u539f\u56fe\u50cf\u4e2d\u51cf\u53bb\u8be5\u56fe\u50cf. \u4f46\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d, \u901a\u5e38\u4f7f\u7528\u5355\u4e00\u63a9\u819c\u626b\u63cf\u6765\u5b9e\u73b0. \u5047\u8bbe\u4f7f\u7528 2 \u53f7\u62c9\u666e\u62c9\u65af\u7b97\u5b50, \u4ee3\u5165\u673a\u7406\u6700\u540e\u4e00\u6b65, \u5f97\u5230 $$ g(x, y) = f(x, y) - \\bigtriangledown ^2f(x, y) = 5f(x, y) - [f(x+1, y) + f(x-1, y) + f(x, y+1) + f(x, y-1)] $$ \u56e0\u6b64, $g(x, y)$ \u53ef\u4ee5\u89c6\u4e3a $f(x, y)$ \u7ecf\u8fc7 $$ \\begin{bmatrix} 0 & -1 & 0 \\\\ -1 & 5 & -1\\\\ 0 & -1 & 0 \\end{bmatrix} $$ \u8fc7\u6ee4\u5f97\u5230. import numpy as np import PIL.Image import scipy.misc import scipy.signal def convert_2d(r): # \u6ee4\u6ce2\u63a9\u6a21 window = np.array([ [0, -1, 0], [-1, 5, -1], [0, -1, 0] ]) s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') # \u50cf\u7d20\u503c\u5982\u679c\u5927\u4e8e 255 \u5219\u53d6 255, \u5c0f\u4e8e 0 \u5219\u53d6 0 for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(0, s[i][j]), 255) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u6548\u679c\u5c55\u793a \u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5bf9\u56fe\u50cf\u8fdb\u884c\u6ee4\u6ce2, \u5f97\u5230\u56fe\u50cf\u50cf\u7d20\u7a81\u53d8\u90e8\u5206(\u8fb9\u7f18)\u4fe1\u606f \u5c06\u7ecf\u8fc7\u62c9\u666e\u62c9\u65af\u8fc7\u6ee4\u7684\u56fe\u50cf\u4e0e\u539f\u56fe\u53e0\u52a0, \u5c31\u80fd\u5f97\u5230\u539f\u56fe\u7684\u9510\u5316","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7a7a\u95f4\u6ee4\u6ce2-\u9510\u5316\u6ee4\u6ce2"},{"location":"content/cv/spatial_filter_sharpening/#_1","text":"\u5728\u6570\u5b66\u4e2d, \u5fae\u5206\u662f\u5bf9\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u5316\u7387\u7684\u4e00\u79cd\u7ebf\u6027\u63cf\u8ff0. \u5fae\u5206\u53ef\u4ee5\u8fd1\u4f3c\u5730\u63cf\u8ff0\u5f53\u51fd\u6570\u81ea\u53d8\u91cf\u7684\u53d6\u503c\u4f5c\u8db3\u591f\u5c0f\u7684\u6539\u53d8\u65f6, \u51fd\u6570\u7684\u503c\u662f\u600e\u6837\u6539\u53d8\u7684. \u6700\u7b80\u5355\u7684\u5404\u5411\u540c\u6027\u5fae\u5206\u7b97\u5b50\u662f\u62c9\u666e\u62c9\u65af\u7b97\u5b50. \u4e00\u4e2a\u4e8c\u5143\u56fe\u50cf\u51fd\u6570 $f(x, y)$ \u7684\u62c9\u666e\u62c9\u65af\u53d8\u6362\u5b9a\u4e49\u4e3a $$ \\bigtriangledown ^2f = \\frac{\\partial ^2f}{\\partial x^2} + \\frac{\\partial ^ 2f}{\\partial y^2} $$ \u56e0\u4e3a\u4efb\u610f\u9636\u5fae\u5206\u90fd\u662f\u7ebf\u6027\u64cd\u4f5c, \u6240\u4ee5\u62c9\u666e\u62c9\u65af\u53d8\u6362\u4e5f\u662f\u4e00\u4e2a\u7ebf\u6027\u64cd\u4f5c. \u4e3a\u4e86\u66f4\u9002\u5408\u4e8e\u56fe\u50cf\u5904\u7406, \u8fd9\u4e00\u65b9\u7a0b\u5fc5\u987b\u8868\u73b0\u4e3a\u79bb\u6563\u5f62\u5f0f. \u8003\u8651\u5230\u6709\u4e24\u4e2a\u53d8\u91cf, \u56e0\u6b64, \u6211\u4eec\u5728 x \u65b9\u5411\u4e0a\u5bf9\u4e8c\u9636\u504f\u5fae\u5206\u91c7\u7528\u4e0b\u5217\u5b9a\u4e49: $$ \\frac{\\partial ^2f}{\\partial x^2} = f(x+1, y) + f(x-1, y) -2f(x, y) $$ \u7c7b\u4f3c\u7684, \u5728 y \u65b9\u5411\u4e0a\u4e3a $$ \\frac{\\partial ^2f}{\\partial y^2} = f(x, y+1) + f(x, y-1) -2f(x, y) $$ \u56e0\u6b64 $$ \\bigtriangledown ^2f = f(x+1, y) + f(x-1, y) + f(x, y+1) + f(x, y-1) -4f(x, y) $$ \u56e0\u6b64, \u6267\u884c\u8fd9\u4e00\u65b0\u5b9a\u4e49\u7684\u63a9\u819c\u5982\u4e0b $$ \\begin{bmatrix} 0 & 1 & 0 \\\\ 1 & -4 & 1\\\\ 0 & 1 & 0 \\end{bmatrix} $$ \u7531\u4e8e\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u662f\u4e00\u79cd\u5fae\u5206\u7b97\u5b50, \u5b83\u7684\u5e94\u7528\u5f3a\u8c03\u56fe\u50cf\u4e2d\u7070\u5ea6\u7684\u7a81\u53d8\u548c\u964d\u4f4e\u7070\u5ea6\u6162\u53d8\u5316\u7684\u533a\u57df. \u8fd9\u5c06\u4ea7\u751f\u4e00\u5e45\u628a\u56fe\u50cf\u4e2d\u7684\u6d45\u7070\u8272\u8fb9\u7ebf\u548c\u7a81\u53d8\u70b9\u53e0\u52a0\u5230\u6697\u80cc\u666f\u4e2d\u7684\u56fe\u50cf. \u5c06\u539f\u59cb\u56fe\u50cf\u548c\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u53e0\u52a0\u5728\u4e00\u8d77\u7684\u7b80\u5355\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u62c9\u666e\u62c9\u65af\u9510\u5316\u540e\u7684\u6548\u679c, \u540c\u65f6\u53c8\u80fd\u590d\u539f\u80cc\u666f\u4fe1\u606f. \u9664\u4e0a\u8ff0\u7684\u6df9\u819c\u5916, \u5e38\u89c1\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u8fd8\u6709 $$ \\begin{bmatrix} 0 & -1 & 0 \\\\ -1 & 4 & -1\\\\ 0 & -1 & 0 \\end{bmatrix} $$ $$ \\begin{bmatrix} -1 & -1 & -1 \\\\ -1 & 8 & -1\\\\ -1 & -1 & -1 \\end{bmatrix} $$ $$ \\begin{bmatrix} 1 & 1 & 1 \\\\ 1 & -8 & 1\\\\ 1 & 1 & 1 \\end{bmatrix} $$ \u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\u7684\u57fa\u672c\u8868\u793a\u65b9\u6cd5\u5982\u4e0b $$ g(x, y)= \\begin{cases} f(x, y) - \\bigtriangledown ^2f(x, y) & \\text{\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u4e2d\u5fc3\u7cfb\u6570\u4e3a\u8d1f} \\\\ f(x, y) + \\bigtriangledown ^2f(x, y) & \\text{\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u4e2d\u5fc3\u7cfb\u6570\u4e3a\u6b63} \\end{cases} $$","title":"\u9510\u5316\u6ee4\u6ce2"},{"location":"content/cv/spatial_filter_sharpening/#_2","text":"\u5728\u673a\u7406\u4e2d, \u6211\u4eec\u9996\u5148\u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u8fc7\u6ee4\u56fe\u50cf, \u7136\u540e, \u4ece\u539f\u56fe\u50cf\u4e2d\u51cf\u53bb\u8be5\u56fe\u50cf. \u4f46\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d, \u901a\u5e38\u4f7f\u7528\u5355\u4e00\u63a9\u819c\u626b\u63cf\u6765\u5b9e\u73b0. \u5047\u8bbe\u4f7f\u7528 2 \u53f7\u62c9\u666e\u62c9\u65af\u7b97\u5b50, \u4ee3\u5165\u673a\u7406\u6700\u540e\u4e00\u6b65, \u5f97\u5230 $$ g(x, y) = f(x, y) - \\bigtriangledown ^2f(x, y) = 5f(x, y) - [f(x+1, y) + f(x-1, y) + f(x, y+1) + f(x, y-1)] $$ \u56e0\u6b64, $g(x, y)$ \u53ef\u4ee5\u89c6\u4e3a $f(x, y)$ \u7ecf\u8fc7 $$ \\begin{bmatrix} 0 & -1 & 0 \\\\ -1 & 5 & -1\\\\ 0 & -1 & 0 \\end{bmatrix} $$ \u8fc7\u6ee4\u5f97\u5230. import numpy as np import PIL.Image import scipy.misc import scipy.signal def convert_2d(r): # \u6ee4\u6ce2\u63a9\u6a21 window = np.array([ [0, -1, 0], [-1, 5, -1], [0, -1, 0] ]) s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') # \u50cf\u7d20\u503c\u5982\u679c\u5927\u4e8e 255 \u5219\u53d6 255, \u5c0f\u4e8e 0 \u5219\u53d6 0 for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(0, s[i][j]), 255) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/spatial_filter_sharpening/#_3","text":"\u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5bf9\u56fe\u50cf\u8fdb\u884c\u6ee4\u6ce2, \u5f97\u5230\u56fe\u50cf\u50cf\u7d20\u7a81\u53d8\u90e8\u5206(\u8fb9\u7f18)\u4fe1\u606f \u5c06\u7ecf\u8fc7\u62c9\u666e\u62c9\u65af\u8fc7\u6ee4\u7684\u56fe\u50cf\u4e0e\u539f\u56fe\u53e0\u52a0, \u5c31\u80fd\u5f97\u5230\u539f\u56fe\u7684\u9510\u5316","title":"\u6548\u679c\u5c55\u793a"},{"location":"content/cv/sub/","text":"\u56fe\u50cf\u51cf\u6cd5 \u4e24\u5e45\u56fe\u50cf $f(x, y)$ \u4e0e $h(x, y)$ \u7684\u5dee\u5f02\u8868\u793a\u4e3a: $$ g(x, y) = f(x, y) - h(x, y) $$ \u56fe\u50cf\u7684\u5dee\u5f02\u662f\u901a\u8fc7\u8ba1\u7b97\u8fd9\u4e24\u5e45\u56fe\u50cf\u6240\u6709\u5bf9\u5e94\u50cf\u7d20\u70b9\u7684\u5dee\u800c\u5f97\u51fa\u7684. \u51cf\u6cd5\u5904\u7406\u6700\u4e3b\u8981\u7684\u4f5c\u7528\u5c31\u662f\u589e\u5f3a\u4e24\u5e45\u56fe\u50cf\u7684\u5dee\u5f02. \u5728\u5dee\u503c\u56fe\u50cf\u4e2d, \u50cf\u7d20\u6700\u5c0f\u53d6\u503c\u4e3a -255, \u6700\u5927\u53d6\u503c\u4e3a 255. \u56e0\u6b64, \u663e\u793a\u8fd9\u4e00\u56fe\u50cf\u9700\u8981\u67d0\u79cd\u6807\u5ea6. \u9996\u5148, \u63d0\u53d6\u6700\u5c0f\u5dee\u503c, \u5e76\u4e14\u628a\u5b83\u7684\u8d1f\u503c\u52a0\u5230\u63d2\u503c\u56fe\u50cf\u7684\u6240\u6709\u50cf\u7d20\u4e2d, \u7136\u540e, \u901a\u8fc7 255/Max \u503c\u53bb\u4e58\u6bcf\u4e2a\u50cf\u7d20(\u5176\u4e2d Max \u4e3a\u6539\u8fdb\u7684\u5dee\u503c\u56fe\u50cf\u4e2d\u6700\u5927\u50cf\u7d20\u53d6\u503c)\u5c06\u56fe\u50cf\u4e2d\u6240\u6709\u50cf\u7d20\u6807\u5b9a\u5230 0 \u5230 255 \u8303\u56f4\u4e2d. \u6ce8\u610f\u4e8b\u9879 \u5728 numpy \u4e2d\u56fe\u50cf\u5b58\u50a8\u7c7b\u578b\u662f uint8, \u8303\u56f4\u662f 0-255, \u5982\u679c\u56fe\u50cf\u76f8\u51cf\u540e\u5f97\u5230\u8d1f\u503c, \u5c31\u4f1a\u622a\u53d6\u4e3a 0 \u503c. \u56e0\u6b64\u5904\u7406\u5dee\u503c\u56fe\u50cf\u65f6\u9700\u8981\u5c06\u6570\u636e\u4ee5 float \u4fdd\u5b58. \u5904\u7406\u5b8c\u6210\u540e\u518d\u8f6c\u6362\u4e3a uint8. \u4ee3\u7801\u5b9e\u73b0 # \u53d6\u5f97\u539f\u56fe\u4e0e\u5176\u9ad8\u65af\u6a21\u7cca\u56fe\u50cf\u7684\u5dee\u503c\u56fe\u50cf import PIL.Image import PIL.ImageFilter import scipy.misc import numpy as np def convert_2d(r, h): # \u77e9\u9635\u51cf\u6cd5 s = r - h if np.min(s) >= 0 and np.max(s) <= 255: return s # \u7ebf\u6027\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r, h): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] hh = h[:, :, d] ss = convert_2d(rr, hh) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) # \u9ad8\u65af\u6a21\u7cca im_converted = im.filter(PIL.ImageFilter.GaussianBlur(radius=2)) im_converted_mat = scipy.misc.fromimage(im_converted) im_sub_mat = convert_3d(im_mat, im_converted_mat) im_sub = PIL.Image.fromarray(im_sub_mat) im_sub.show() \u8f93\u51fa\u7ed3\u679c","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u56fe\u50cf\u51cf\u6cd5"},{"location":"content/cv/sub/#_1","text":"\u4e24\u5e45\u56fe\u50cf $f(x, y)$ \u4e0e $h(x, y)$ \u7684\u5dee\u5f02\u8868\u793a\u4e3a: $$ g(x, y) = f(x, y) - h(x, y) $$ \u56fe\u50cf\u7684\u5dee\u5f02\u662f\u901a\u8fc7\u8ba1\u7b97\u8fd9\u4e24\u5e45\u56fe\u50cf\u6240\u6709\u5bf9\u5e94\u50cf\u7d20\u70b9\u7684\u5dee\u800c\u5f97\u51fa\u7684. \u51cf\u6cd5\u5904\u7406\u6700\u4e3b\u8981\u7684\u4f5c\u7528\u5c31\u662f\u589e\u5f3a\u4e24\u5e45\u56fe\u50cf\u7684\u5dee\u5f02. \u5728\u5dee\u503c\u56fe\u50cf\u4e2d, \u50cf\u7d20\u6700\u5c0f\u53d6\u503c\u4e3a -255, \u6700\u5927\u53d6\u503c\u4e3a 255. \u56e0\u6b64, \u663e\u793a\u8fd9\u4e00\u56fe\u50cf\u9700\u8981\u67d0\u79cd\u6807\u5ea6. \u9996\u5148, \u63d0\u53d6\u6700\u5c0f\u5dee\u503c, \u5e76\u4e14\u628a\u5b83\u7684\u8d1f\u503c\u52a0\u5230\u63d2\u503c\u56fe\u50cf\u7684\u6240\u6709\u50cf\u7d20\u4e2d, \u7136\u540e, \u901a\u8fc7 255/Max \u503c\u53bb\u4e58\u6bcf\u4e2a\u50cf\u7d20(\u5176\u4e2d Max \u4e3a\u6539\u8fdb\u7684\u5dee\u503c\u56fe\u50cf\u4e2d\u6700\u5927\u50cf\u7d20\u53d6\u503c)\u5c06\u56fe\u50cf\u4e2d\u6240\u6709\u50cf\u7d20\u6807\u5b9a\u5230 0 \u5230 255 \u8303\u56f4\u4e2d.","title":"\u56fe\u50cf\u51cf\u6cd5"},{"location":"content/cv/sub/#_2","text":"\u5728 numpy \u4e2d\u56fe\u50cf\u5b58\u50a8\u7c7b\u578b\u662f uint8, \u8303\u56f4\u662f 0-255, \u5982\u679c\u56fe\u50cf\u76f8\u51cf\u540e\u5f97\u5230\u8d1f\u503c, \u5c31\u4f1a\u622a\u53d6\u4e3a 0 \u503c. \u56e0\u6b64\u5904\u7406\u5dee\u503c\u56fe\u50cf\u65f6\u9700\u8981\u5c06\u6570\u636e\u4ee5 float \u4fdd\u5b58. \u5904\u7406\u5b8c\u6210\u540e\u518d\u8f6c\u6362\u4e3a uint8.","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"content/cv/sub/#_3","text":"# \u53d6\u5f97\u539f\u56fe\u4e0e\u5176\u9ad8\u65af\u6a21\u7cca\u56fe\u50cf\u7684\u5dee\u503c\u56fe\u50cf import PIL.Image import PIL.ImageFilter import scipy.misc import numpy as np def convert_2d(r, h): # \u77e9\u9635\u51cf\u6cd5 s = r - h if np.min(s) >= 0 and np.max(s) <= 255: return s # \u7ebf\u6027\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r, h): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] hh = h[:, :, d] ss = convert_2d(rr, hh) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) # \u9ad8\u65af\u6a21\u7cca im_converted = im.filter(PIL.ImageFilter.GaussianBlur(radius=2)) im_converted_mat = scipy.misc.fromimage(im_converted) im_sub_mat = convert_3d(im_mat, im_converted_mat) im_sub = PIL.Image.fromarray(im_sub_mat) im_sub.show() \u8f93\u51fa\u7ed3\u679c","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/cv/watermark/","text":"\u7b80\u5355\u53ef\u89c1\u6c34\u5370 \u7b80\u5355\u53ef\u89c1\u6c34\u5370\u53ef\u7531\u5982\u4e0b\u516c\u5f0f\u751f\u6210 $$ f_w = (1 - \\alpha)f + \\alpha w $$ \u5176\u4e2d $\\alpha$ \u63a7\u5236\u6c34\u5370\u548c\u886c\u5e95\u7684\u76f8\u5bf9\u53ef\u89c1\u6027, $f$ \u4e3a\u886c\u5e95, $w$ \u4e3a\u6c34\u5370\u56fe\u7247. \u7279\u522b\u7684, \u5f53 $w$ \u4e3a RGBA \u6a21\u5f0f\u65f6, \u53c2\u4e0e\u8ba1\u7b97\u7684 $\\alpha$ \u9700\u8981\u4e58\u4ee5\u6c34\u5370\u7684 A \u901a\u9053\u4e0e 255 \u7684\u6bd4\u503c. import PIL.Image import scipy.misc im = scipy.misc.imread('/img/jp.jpg', mode='RGBA') im_water = scipy.misc.imread('/img/watermark.jpg', mode='RGBA') for x in range(im_water.shape[0]): for y in range(im_water.shape[1]): a = 0.3 * im_water[x][y][-1] / 255 im[x][y][0:3] = (1 - a) * im[x][y][0:3] + a * im_water[x][y][0:3] PIL.Image.fromarray(im).show() \u4ee5\u4e0b\u56fe\u7247\u662f\u4e0a\u8ff0\u4ee3\u7801\u4f7f\u7528 $\\alpha=0.3$ \u7684\u8fd0\u884c\u7ed3\u679c, \u5176\u4e2d\u5de6\u4e0a\u89d2\u4e3a\u6c34\u5370\u56fe\u7247. LSB \u4e0d\u53ef\u89c1\u6c34\u5370 \u5728 \u6570\u5b57\u56fe\u50cf\u5904\u7406-\u4f4d\u56fe\u5207\u5272 \u4e00\u6587\u4e2d, \u5df2\u7ecf\u77e5\u6653\u4e86 8 \u6bd4\u7279\u4f4d\u56fe\u50cf\u7684\u6700\u4f4e\u9636\u6bd4\u7279\u5bf9\u4eba\u773c\u611f\u77e5\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd, \u56e0\u6b64, \u53ef\u4ee5\u5c06\u6c34\u5370\u56fe\u50cf\u7684\u9ad8\u9636\u6bd4\u7279\u4f4d\"\u63d2\u5165\"\u5728\u886c\u5e95\u7684\u4f4e\u9636\u6bd4\u7279\u4f4d\u4e2d. $$ f_w = 4(\\frac{f}{4}) + \\frac{w}{64} $$ \u4e0a\u8ff0\u516c\u5f0f\u5c06\u539f\u56fe\u4f7f\u7528\u65e0\u7b26\u53f7\u6574\u6570\u9664\u4ee5 4 \u5e76\u4e58\u4ee5 4, \u6765\u7f6e\u6700\u4f4e\u4e24\u4e2a\u6bd4\u7279\u4f4d\u4e3a 0, \u5e76\u7528 64 \u9664 $w$, \u5c06 $w$ \u7684\u4e24\u4e2a\u6700\u9ad8\u6bd4\u7279\u4f4d\u79fb\u5230\u886c\u5e95\u7684\u6700\u4f4e\u6bd4\u7279\u4f4d\u4e0a. import PIL.Image import numpy as np import scipy.misc im = scipy.misc.imread('/img/jp.jpg', mode='RGBA') im_water = scipy.misc.imread('/img/water.jpg', mode='RGBA') # LSB \u6c34\u5370\u7684\u7b2c\u4e00\u6b65\u662f\u6ee4\u9664\u886c\u5e95\u6700\u540e 2 \u4e2a\u4f4e\u9636\u6bd4\u7279\u4f4d im = im // 4 * 4 for x in range(im_water.shape[0]): for y in range(im_water.shape[1]): im[x][y] += im_water[x][y] // 64 # \u663e\u793a\u52a0\u6c34\u5370\u540e\u7684\u56fe\u50cf PIL.Image.fromarray(im.astype(np.uint8)).show() im = im % 4 / 3 * 255 # \u663e\u793a\u63d0\u53d6\u7684\u6c34\u5370\u56fe\u50cf PIL.Image.fromarray(im.astype(np.uint8)).show() \u663e\u793a\u52a0\u6c34\u5370\u540e\u7684\u56fe\u50cf \u663e\u793a\u63d0\u53d6\u7684\u6c34\u5370\u56fe\u50cf \u8981\u8bf4\u660e\u7684\u662f, LSB \u6c34\u5370\u975e\u5e38\u8106\u5f31, \u8bf8\u5982\u88c1\u526a, \u65cb\u8f6c, \u7f29\u653e, \u56fe\u50cf\u538b\u7f29\u7b49\u64cd\u4f5c\u53ef\u4ee5\u8f7b\u6613\u7834\u574f\u8be5\u6c34\u5370.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u6c34\u5370"},{"location":"content/cv/watermark/#_1","text":"\u7b80\u5355\u53ef\u89c1\u6c34\u5370\u53ef\u7531\u5982\u4e0b\u516c\u5f0f\u751f\u6210 $$ f_w = (1 - \\alpha)f + \\alpha w $$ \u5176\u4e2d $\\alpha$ \u63a7\u5236\u6c34\u5370\u548c\u886c\u5e95\u7684\u76f8\u5bf9\u53ef\u89c1\u6027, $f$ \u4e3a\u886c\u5e95, $w$ \u4e3a\u6c34\u5370\u56fe\u7247. \u7279\u522b\u7684, \u5f53 $w$ \u4e3a RGBA \u6a21\u5f0f\u65f6, \u53c2\u4e0e\u8ba1\u7b97\u7684 $\\alpha$ \u9700\u8981\u4e58\u4ee5\u6c34\u5370\u7684 A \u901a\u9053\u4e0e 255 \u7684\u6bd4\u503c. import PIL.Image import scipy.misc im = scipy.misc.imread('/img/jp.jpg', mode='RGBA') im_water = scipy.misc.imread('/img/watermark.jpg', mode='RGBA') for x in range(im_water.shape[0]): for y in range(im_water.shape[1]): a = 0.3 * im_water[x][y][-1] / 255 im[x][y][0:3] = (1 - a) * im[x][y][0:3] + a * im_water[x][y][0:3] PIL.Image.fromarray(im).show() \u4ee5\u4e0b\u56fe\u7247\u662f\u4e0a\u8ff0\u4ee3\u7801\u4f7f\u7528 $\\alpha=0.3$ \u7684\u8fd0\u884c\u7ed3\u679c, \u5176\u4e2d\u5de6\u4e0a\u89d2\u4e3a\u6c34\u5370\u56fe\u7247.","title":"\u7b80\u5355\u53ef\u89c1\u6c34\u5370"},{"location":"content/cv/watermark/#lsb","text":"\u5728 \u6570\u5b57\u56fe\u50cf\u5904\u7406-\u4f4d\u56fe\u5207\u5272 \u4e00\u6587\u4e2d, \u5df2\u7ecf\u77e5\u6653\u4e86 8 \u6bd4\u7279\u4f4d\u56fe\u50cf\u7684\u6700\u4f4e\u9636\u6bd4\u7279\u5bf9\u4eba\u773c\u611f\u77e5\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd, \u56e0\u6b64, \u53ef\u4ee5\u5c06\u6c34\u5370\u56fe\u50cf\u7684\u9ad8\u9636\u6bd4\u7279\u4f4d\"\u63d2\u5165\"\u5728\u886c\u5e95\u7684\u4f4e\u9636\u6bd4\u7279\u4f4d\u4e2d. $$ f_w = 4(\\frac{f}{4}) + \\frac{w}{64} $$ \u4e0a\u8ff0\u516c\u5f0f\u5c06\u539f\u56fe\u4f7f\u7528\u65e0\u7b26\u53f7\u6574\u6570\u9664\u4ee5 4 \u5e76\u4e58\u4ee5 4, \u6765\u7f6e\u6700\u4f4e\u4e24\u4e2a\u6bd4\u7279\u4f4d\u4e3a 0, \u5e76\u7528 64 \u9664 $w$, \u5c06 $w$ \u7684\u4e24\u4e2a\u6700\u9ad8\u6bd4\u7279\u4f4d\u79fb\u5230\u886c\u5e95\u7684\u6700\u4f4e\u6bd4\u7279\u4f4d\u4e0a. import PIL.Image import numpy as np import scipy.misc im = scipy.misc.imread('/img/jp.jpg', mode='RGBA') im_water = scipy.misc.imread('/img/water.jpg', mode='RGBA') # LSB \u6c34\u5370\u7684\u7b2c\u4e00\u6b65\u662f\u6ee4\u9664\u886c\u5e95\u6700\u540e 2 \u4e2a\u4f4e\u9636\u6bd4\u7279\u4f4d im = im // 4 * 4 for x in range(im_water.shape[0]): for y in range(im_water.shape[1]): im[x][y] += im_water[x][y] // 64 # \u663e\u793a\u52a0\u6c34\u5370\u540e\u7684\u56fe\u50cf PIL.Image.fromarray(im.astype(np.uint8)).show() im = im % 4 / 3 * 255 # \u663e\u793a\u63d0\u53d6\u7684\u6c34\u5370\u56fe\u50cf PIL.Image.fromarray(im.astype(np.uint8)).show() \u663e\u793a\u52a0\u6c34\u5370\u540e\u7684\u56fe\u50cf \u663e\u793a\u63d0\u53d6\u7684\u6c34\u5370\u56fe\u50cf \u8981\u8bf4\u660e\u7684\u662f, LSB \u6c34\u5370\u975e\u5e38\u8106\u5f31, \u8bf8\u5982\u88c1\u526a, \u65cb\u8f6c, \u7f29\u653e, \u56fe\u50cf\u538b\u7f29\u7b49\u64cd\u4f5c\u53ef\u4ee5\u8f7b\u6613\u7834\u574f\u8be5\u6c34\u5370.","title":"LSB \u4e0d\u53ef\u89c1\u6c34\u5370"},{"location":"content/daze/dlib/face_clustering/","text":"\u4eba\u8138\u805a\u7c7b \u4eba\u8138\u805a\u7c7b\u5c5e\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60. \u5f53\u4f60\u6709\u8bb8\u591a\u672a\u6807\u8bb0\u7684\u5f85\u5206\u7c7b\u7684\u7167\u7247\u65f6, \u4f7f\u7528\u4eba\u8138\u805a\u7c7b\u662f\u975e\u5e38\u6709\u7528\u7684. \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_clustering.py. \u5f85\u5206\u7c7b\u76ee\u5f55\u4e0b\u6709\u4e24\u5f20\u795e\u4ed9\u7684\u8096\u50cf\u548c\u4e24\u5f20\u89c2\u6d77\u7684\u8096\u50cf, \u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u53ef\u4ee5\u5c06\u795e\u4ed9\u548c\u89c2\u6d77\u5206\u5f00. import os import sys import dlib import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' face_rec_model_path = 'dlib_face_recognition_resnet_model_v1.dat' faces_folder_path = sys.argv[1] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) facerec = dlib.face_recognition_model_v1(face_rec_model_path) face_results = [] for entry in os.scandir(faces_folder_path): print(f'Processing file: {entry.path}') img = skimage.io.imread(entry.path) dets = detector(img, 1) print(\"Number of faces detected: {}\".format(len(dets))) for k, d in enumerate(dets): shape = sp(img, d) face_descriptor = facerec.compute_face_descriptor(img, shape) face_results.append({ 'path': entry.path, 'det': d, 'shape': shape, 'descriptor': face_descriptor }) labels = dlib.chinese_whispers_clustering([e['descriptor'] for e in face_results], 0.5) num_classes = len(set(labels)) print(\"Number of clusters: {}\".format(num_classes)) for i, r in enumerate(face_results): r['label'] = labels[i] for e in face_results: path = e['path'] d = e['det'] det = [d.top(), d.left(), d.bottom(), d.right()] label = e['label'] print(label, path, det) \u6267\u884c\u7ed3\u679c $ python3 run.py face_tests/ Processing file: face_tests/crystal_01.jpg Number of faces detected: 1 Processing file: face_tests/crystal_02.jpg Number of faces detected: 1 Processing file: face_tests/obama_01.jpg Number of faces detected: 1 Processing file: face_tests/obama_02.jpg Number of faces detected: 1 Number of clusters: 2 0 face_tests/crystal_01.jpg [116, 201, 270, 356] 0 face_tests/crystal_02.jpg [64, 236, 219, 390] 1 face_tests/obama_01.jpg [38, 146, 113, 220] 1 face_tests/obama_02.jpg [63, 71, 138, 146]","title":"Dlib-\u4eba\u8138\u805a\u7c7b"},{"location":"content/daze/dlib/face_clustering/#_1","text":"\u4eba\u8138\u805a\u7c7b\u5c5e\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60. \u5f53\u4f60\u6709\u8bb8\u591a\u672a\u6807\u8bb0\u7684\u5f85\u5206\u7c7b\u7684\u7167\u7247\u65f6, \u4f7f\u7528\u4eba\u8138\u805a\u7c7b\u662f\u975e\u5e38\u6709\u7528\u7684. \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_clustering.py. \u5f85\u5206\u7c7b\u76ee\u5f55\u4e0b\u6709\u4e24\u5f20\u795e\u4ed9\u7684\u8096\u50cf\u548c\u4e24\u5f20\u89c2\u6d77\u7684\u8096\u50cf, \u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u53ef\u4ee5\u5c06\u795e\u4ed9\u548c\u89c2\u6d77\u5206\u5f00. import os import sys import dlib import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' face_rec_model_path = 'dlib_face_recognition_resnet_model_v1.dat' faces_folder_path = sys.argv[1] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) facerec = dlib.face_recognition_model_v1(face_rec_model_path) face_results = [] for entry in os.scandir(faces_folder_path): print(f'Processing file: {entry.path}') img = skimage.io.imread(entry.path) dets = detector(img, 1) print(\"Number of faces detected: {}\".format(len(dets))) for k, d in enumerate(dets): shape = sp(img, d) face_descriptor = facerec.compute_face_descriptor(img, shape) face_results.append({ 'path': entry.path, 'det': d, 'shape': shape, 'descriptor': face_descriptor }) labels = dlib.chinese_whispers_clustering([e['descriptor'] for e in face_results], 0.5) num_classes = len(set(labels)) print(\"Number of clusters: {}\".format(num_classes)) for i, r in enumerate(face_results): r['label'] = labels[i] for e in face_results: path = e['path'] d = e['det'] det = [d.top(), d.left(), d.bottom(), d.right()] label = e['label'] print(label, path, det) \u6267\u884c\u7ed3\u679c $ python3 run.py face_tests/ Processing file: face_tests/crystal_01.jpg Number of faces detected: 1 Processing file: face_tests/crystal_02.jpg Number of faces detected: 1 Processing file: face_tests/obama_01.jpg Number of faces detected: 1 Processing file: face_tests/obama_02.jpg Number of faces detected: 1 Number of clusters: 2 0 face_tests/crystal_01.jpg [116, 201, 270, 356] 0 face_tests/crystal_02.jpg [64, 236, 219, 390] 1 face_tests/obama_01.jpg [38, 146, 113, 220] 1 face_tests/obama_02.jpg [63, 71, 138, 146]","title":"\u4eba\u8138\u805a\u7c7b"},{"location":"content/daze/dlib/face_detect/","text":"\u4eba\u8138\u68c0\u6d4b dlib \u81ea\u5e26\u4eba\u8138\u68c0\u6d4b\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_detector.py. \u7531\u4e8e\u673a\u5668\u6ca1\u6709 GUI \u754c\u9762, \u56e0\u6b64\u6211\u7b80\u5355\u4fee\u6539\u4e86\u4e0b, \u53ef\u4ee5\u5c06\u68c0\u6d4b\u7ed3\u679c\u4fdd\u5b58\u5728\u672c\u5730. import sys import dlib import skimage.draw import skimage.io load_name = sys.argv[1] save_name = sys.argv[2] detector = dlib.get_frontal_face_detector() img = skimage.io.imread(load_name) dets = detector(img, 1) print('Number of faces detected: {}'.format(len(dets))) for d in dets: r0, c0, r1, c1 = d.top(), d.left(), d.bottom(), d.right() print('Detection {}'.format([(r0, c0), (r1, c1)])) skimage.draw.set_color(img, skimage.draw.line(r0, c0, r0, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r0, c1, r1, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c1, r1, c0), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c0, r0, c0), (255, 0, 0)) skimage.io.imsave(save_name, img) # \u6267\u884c\u811a\u672c $ python3 face_detector.py obama.jpg obama_face.jpg \u539f\u56fe: \u4eba\u8138:","title":"Dlib-\u4eba\u8138\u68c0\u6d4b"},{"location":"content/daze/dlib/face_detect/#_1","text":"dlib \u81ea\u5e26\u4eba\u8138\u68c0\u6d4b\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_detector.py. \u7531\u4e8e\u673a\u5668\u6ca1\u6709 GUI \u754c\u9762, \u56e0\u6b64\u6211\u7b80\u5355\u4fee\u6539\u4e86\u4e0b, \u53ef\u4ee5\u5c06\u68c0\u6d4b\u7ed3\u679c\u4fdd\u5b58\u5728\u672c\u5730. import sys import dlib import skimage.draw import skimage.io load_name = sys.argv[1] save_name = sys.argv[2] detector = dlib.get_frontal_face_detector() img = skimage.io.imread(load_name) dets = detector(img, 1) print('Number of faces detected: {}'.format(len(dets))) for d in dets: r0, c0, r1, c1 = d.top(), d.left(), d.bottom(), d.right() print('Detection {}'.format([(r0, c0), (r1, c1)])) skimage.draw.set_color(img, skimage.draw.line(r0, c0, r0, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r0, c1, r1, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c1, r1, c0), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c0, r0, c0), (255, 0, 0)) skimage.io.imsave(save_name, img) # \u6267\u884c\u811a\u672c $ python3 face_detector.py obama.jpg obama_face.jpg \u539f\u56fe: \u4eba\u8138:","title":"\u4eba\u8138\u68c0\u6d4b"},{"location":"content/daze/dlib/face_landmark/","text":"\u4eba\u8138\u6807\u6ce8 dlib \u81ea\u5e26\u4eba\u8138\u6807\u6ce8\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_landmark_detection.py. import sys import dlib import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' load_name = sys.argv[1] save_name = sys.argv[2] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) img = skimage.io.imread(load_name) dets = detector(img, 1) print('Number of faces detected: {}'.format(len(dets))) for i, d in enumerate(dets): r0, c0, r1, c1 = d.top(), d.left(), d.bottom(), d.right() print(i, 'Detection {}'.format([(r0, c0), (r1, c1)])) skimage.draw.set_color(img, skimage.draw.line(r0, c0, r0, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r0, c1, r1, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c1, r1, c0), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c0, r0, c0), (255, 0, 0)) shape = [(p.x, p.y) for p in sp(img, d).parts()] print('Part 0: {}, Part 1: {} ...'.format(shape[0], shape[1])) for i, pos in enumerate(shape): skimage.draw.set_color(img, skimage.draw.circle(pos[1], pos[0], 2), (0, 255, 0)) skimage.io.imsave(save_name, img) # \u5728\u4f7f\u7528\u8be5\u811a\u672c\u524d, \u9700\u8981\u5148\u4e0b\u8f7d\u9884\u8bad\u7ec3\u6743\u91cd $ wget http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2 $ bunzip2 shape_predictor_68_face_landmarks.dat.bz2 # \u6267\u884c\u811a\u672c, \u4fdd\u5b58\u7ed3\u679c\u81f3 obama_landmark.jpg $ python3 face_landmark_detection.py obama.jpg obama_landmark.jpg","title":"Dlib-\u4eba\u8138\u6807\u6ce8"},{"location":"content/daze/dlib/face_landmark/#_1","text":"dlib \u81ea\u5e26\u4eba\u8138\u6807\u6ce8\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_landmark_detection.py. import sys import dlib import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' load_name = sys.argv[1] save_name = sys.argv[2] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) img = skimage.io.imread(load_name) dets = detector(img, 1) print('Number of faces detected: {}'.format(len(dets))) for i, d in enumerate(dets): r0, c0, r1, c1 = d.top(), d.left(), d.bottom(), d.right() print(i, 'Detection {}'.format([(r0, c0), (r1, c1)])) skimage.draw.set_color(img, skimage.draw.line(r0, c0, r0, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r0, c1, r1, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c1, r1, c0), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c0, r0, c0), (255, 0, 0)) shape = [(p.x, p.y) for p in sp(img, d).parts()] print('Part 0: {}, Part 1: {} ...'.format(shape[0], shape[1])) for i, pos in enumerate(shape): skimage.draw.set_color(img, skimage.draw.circle(pos[1], pos[0], 2), (0, 255, 0)) skimage.io.imsave(save_name, img) # \u5728\u4f7f\u7528\u8be5\u811a\u672c\u524d, \u9700\u8981\u5148\u4e0b\u8f7d\u9884\u8bad\u7ec3\u6743\u91cd $ wget http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2 $ bunzip2 shape_predictor_68_face_landmarks.dat.bz2 # \u6267\u884c\u811a\u672c, \u4fdd\u5b58\u7ed3\u679c\u81f3 obama_landmark.jpg $ python3 face_landmark_detection.py obama.jpg obama_landmark.jpg","title":"\u4eba\u8138\u6807\u6ce8"},{"location":"content/daze/dlib/face_recognition/","text":"\u4eba\u8138\u8bc6\u522b dlib \u81ea\u5e26\u4eba\u8138\u8bc6\u522b\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_recognition.py. \u5728\u4e0a\u4e00\u7bc7\u4e2d\u5df2\u7ecf\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u5230\u4eba\u8138\u7279\u5f81\u70b9, \u4eba\u8138\u8bc6\u522b\u7684\u57fa\u672c\u7684\u6b65\u9aa4\u4e3a: \u5c06\u7279\u5f81\u70b9\u7f16\u7801\u4e3a\u7279\u5f81\u77e9\u9635, \u5e76\u8ba1\u7b97\u4e24\u4e2a\u7279\u5f81\u77e9\u9635\u4e4b\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb, \u5f53\u8ddd\u79bb\u5c0f\u4e8e\u6307\u5b9a\u9608\u503c\u65f6, \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba. dlib \u4e2d\u7684\u4e00\u4e9b\u6ce8\u91ca\u89e3\u91ca\u4e86\u8fd9\u4e00\u5207(\u5927\u81f4\u662f\u5c06\u4eba\u8138\u7279\u5f81\u70b9\u7f16\u7801\u4e3a 128 \u7ef4\u5411\u91cf, \u5982\u679c\u4e24\u7279\u5f81\u5411\u91cf\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb < 0.6 \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba). # This example shows how to use dlib's face recognition tool. This tool maps # an image of a human face to a 128 dimensional vector space where images of # the same person are near to each other and images from different people are # far apart. Therefore, you can perform face recognition by mapping faces to # the 128D space and then checking if their Euclidean distance is small # enough. # # When using a distance threshold of 0.6, the dlib model obtains an accuracy # of 99.38% on the standard LFW face recognition benchmark, which is # comparable to other state-of-the-art methods for face recognition as of # February 2017. This accuracy means that, when presented with a pair of face # images, the tool will correctly identify if the pair belongs to the same # person or is from different people 99.38% of the time. # # Finally, for an in-depth discussion of how dlib's tool works you should # refer to the C++ example program dnn_face_recognition_ex.cpp and the # attendant documentation referenced therein. \u4e0b\u9762\u6765\u6d4b\u8bd5\u4e0b, \u4e0b\u8f7d\u9884\u8bad\u7ec3\u6743\u91cd\u5e76\u7f16\u5199\u5982\u4e0b\u4ee3\u7801 $ wget http://dlib.net/files/dlib_face_recognition_resnet_model_v1.dat.bz2 $ bunzip2 dlib_face_recognition_resnet_model_v1.dat.bz2 import sys import dlib import numpy as np import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' face_rec_model_path = 'dlib_face_recognition_resnet_model_v1.dat' load_name_0 = sys.argv[1] load_name_1 = sys.argv[2] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) facerec = dlib.face_recognition_model_v1(face_rec_model_path) def get_descriptor(load_name): img = skimage.io.imread(load_name) dets = detector(img, 1) assert len(dets) == 1 shape = sp(img, dets[0]) face_descriptor = facerec.compute_face_descriptor(img, shape) face_descriptor = np.array(face_descriptor) assert face_descriptor.shape == (128,) return face_descriptor x0 = get_descriptor(load_name_0) x1 = get_descriptor(load_name_1) # \u8ba1\u7b97\u4e24\u4e2a\u7279\u5f81\u77e9\u9635\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb d, \u5f53 d < 0.6 \u65f6, \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba d = np.linalg.norm(x0 - x1) print('distance', d) \u62ff\u4e24\u5f20\u795e\u4ed9\u7684\u8138\u6d4b\u8bd5\u4e00\u4e0b: \u7ed3\u679c\u662f 0.333517042672, \u662f\u540c\u4e00\u4e2a\u4eba\u6ca1\u9519(\u957f\u8212\u4e00\u53e3\u6c14). \u53c2\u8003 [1] \u7ef4\u57fa: \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb https://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB","title":"Dlib-\u4eba\u8138\u8bc6\u522b"},{"location":"content/daze/dlib/face_recognition/#_1","text":"dlib \u81ea\u5e26\u4eba\u8138\u8bc6\u522b\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_recognition.py. \u5728\u4e0a\u4e00\u7bc7\u4e2d\u5df2\u7ecf\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u5230\u4eba\u8138\u7279\u5f81\u70b9, \u4eba\u8138\u8bc6\u522b\u7684\u57fa\u672c\u7684\u6b65\u9aa4\u4e3a: \u5c06\u7279\u5f81\u70b9\u7f16\u7801\u4e3a\u7279\u5f81\u77e9\u9635, \u5e76\u8ba1\u7b97\u4e24\u4e2a\u7279\u5f81\u77e9\u9635\u4e4b\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb, \u5f53\u8ddd\u79bb\u5c0f\u4e8e\u6307\u5b9a\u9608\u503c\u65f6, \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba. dlib \u4e2d\u7684\u4e00\u4e9b\u6ce8\u91ca\u89e3\u91ca\u4e86\u8fd9\u4e00\u5207(\u5927\u81f4\u662f\u5c06\u4eba\u8138\u7279\u5f81\u70b9\u7f16\u7801\u4e3a 128 \u7ef4\u5411\u91cf, \u5982\u679c\u4e24\u7279\u5f81\u5411\u91cf\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb < 0.6 \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba). # This example shows how to use dlib's face recognition tool. This tool maps # an image of a human face to a 128 dimensional vector space where images of # the same person are near to each other and images from different people are # far apart. Therefore, you can perform face recognition by mapping faces to # the 128D space and then checking if their Euclidean distance is small # enough. # # When using a distance threshold of 0.6, the dlib model obtains an accuracy # of 99.38% on the standard LFW face recognition benchmark, which is # comparable to other state-of-the-art methods for face recognition as of # February 2017. This accuracy means that, when presented with a pair of face # images, the tool will correctly identify if the pair belongs to the same # person or is from different people 99.38% of the time. # # Finally, for an in-depth discussion of how dlib's tool works you should # refer to the C++ example program dnn_face_recognition_ex.cpp and the # attendant documentation referenced therein. \u4e0b\u9762\u6765\u6d4b\u8bd5\u4e0b, \u4e0b\u8f7d\u9884\u8bad\u7ec3\u6743\u91cd\u5e76\u7f16\u5199\u5982\u4e0b\u4ee3\u7801 $ wget http://dlib.net/files/dlib_face_recognition_resnet_model_v1.dat.bz2 $ bunzip2 dlib_face_recognition_resnet_model_v1.dat.bz2 import sys import dlib import numpy as np import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' face_rec_model_path = 'dlib_face_recognition_resnet_model_v1.dat' load_name_0 = sys.argv[1] load_name_1 = sys.argv[2] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) facerec = dlib.face_recognition_model_v1(face_rec_model_path) def get_descriptor(load_name): img = skimage.io.imread(load_name) dets = detector(img, 1) assert len(dets) == 1 shape = sp(img, dets[0]) face_descriptor = facerec.compute_face_descriptor(img, shape) face_descriptor = np.array(face_descriptor) assert face_descriptor.shape == (128,) return face_descriptor x0 = get_descriptor(load_name_0) x1 = get_descriptor(load_name_1) # \u8ba1\u7b97\u4e24\u4e2a\u7279\u5f81\u77e9\u9635\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb d, \u5f53 d < 0.6 \u65f6, \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba d = np.linalg.norm(x0 - x1) print('distance', d) \u62ff\u4e24\u5f20\u795e\u4ed9\u7684\u8138\u6d4b\u8bd5\u4e00\u4e0b: \u7ed3\u679c\u662f 0.333517042672, \u662f\u540c\u4e00\u4e2a\u4eba\u6ca1\u9519(\u957f\u8212\u4e00\u53e3\u6c14).","title":"\u4eba\u8138\u8bc6\u522b"},{"location":"content/daze/dlib/face_recognition/#_2","text":"[1] \u7ef4\u57fa: \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb https://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB","title":"\u53c2\u8003"},{"location":"content/daze/dlib/install/","text":"dlib \u662f\u4e00\u4e2a\u5305\u542b\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u548c\u5de5\u5177\u7684 c++ \u5e93. \u5b89\u88c5 $ git clone --depth=1 https://github.com/davisking/dlib.git $ cd dlib $ mkdir build; cd build; cmake .. ; cmake --build . # \u5b89\u88c5 python API $ python setup.py install \u8be6\u7ec6\u8bf7\u81f3 https://github.com/davisking/dlib \u9605\u8bfb\u5b98\u65b9\u6587\u6863. \u8bb0\u5f55\u4e00: dlib Python API \u9700\u8981 boost.python \u652f\u6301 \u7b80\u800c\u8a00\u4e4b, \u524d\u5f80 http://www.boost.org/ \u4e0b\u8f7d boost \u540e, \u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5\u5373\u53ef, \u6ce8\u610f\u4f7f\u7528 --with-python \u914d\u7f6e python \u53ef\u6267\u884c\u6587\u4ef6, \u5b89\u88c5\u811a\u672c\u4f1a\u81ea\u52a8\u5bfb\u627e python \u7684\u5b89\u88c5\u76ee\u5f55. $ ./bootstrap.sh --prefix=/usr/local/boost --with-python=python3 --with-libraries=python # CPLUS_INCLUDE_PATH \u503c\u4e3a pyconfig.h \u6240\u5728\u8def\u5f84 $ CPLUS_INCLUDE_PATH=/usr/local/python/include/python3.6m ./b2 $ ./b2 install \u5b89\u88c5\u5b8c\u6bd5\u540e\u5728 ~/.bash_profile \u4e2d\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf export PATH=$PATH:/usr/local/boost/include export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/boost/lib \u8bb0\u5f55\u4e8c: \u5185\u5b58\u8fc7\u5c0f\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25 c++: internal compiler error: Killed (program cc1plus) Please submit a full bug report, with preprocessed source if appropriate. See <http://bugzilla.redhat.com/bugzilla> for instructions. gmake[2]: *** [CMakeFiles/dlib_.dir/src/vector.cpp.o] Error 4 gmake[1]: *** [CMakeFiles/dlib_.dir/all] Error 2 gmake: *** [all] Error 2 error: cmake build failed! \u6d4b\u8bd5\u65f6 1G \u5185\u5b58\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25, \u4f7f\u7528\u989d\u5916\u7684 1G swap \u540e\u91cd\u65b0\u7f16\u8bd1\u89e3\u51b3\u95ee\u9898: $ dd if=/dev/zero of=/data/swap bs=64M count=16 $ chmod 0600 /data/swap $ mkswap /data/swap $ swapon /data/swap","title":"Dlib-\u5b89\u88c5"},{"location":"content/daze/dlib/install/#_1","text":"$ git clone --depth=1 https://github.com/davisking/dlib.git $ cd dlib $ mkdir build; cd build; cmake .. ; cmake --build . # \u5b89\u88c5 python API $ python setup.py install \u8be6\u7ec6\u8bf7\u81f3 https://github.com/davisking/dlib \u9605\u8bfb\u5b98\u65b9\u6587\u6863. \u8bb0\u5f55\u4e00: dlib Python API \u9700\u8981 boost.python \u652f\u6301 \u7b80\u800c\u8a00\u4e4b, \u524d\u5f80 http://www.boost.org/ \u4e0b\u8f7d boost \u540e, \u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5\u5373\u53ef, \u6ce8\u610f\u4f7f\u7528 --with-python \u914d\u7f6e python \u53ef\u6267\u884c\u6587\u4ef6, \u5b89\u88c5\u811a\u672c\u4f1a\u81ea\u52a8\u5bfb\u627e python \u7684\u5b89\u88c5\u76ee\u5f55. $ ./bootstrap.sh --prefix=/usr/local/boost --with-python=python3 --with-libraries=python # CPLUS_INCLUDE_PATH \u503c\u4e3a pyconfig.h \u6240\u5728\u8def\u5f84 $ CPLUS_INCLUDE_PATH=/usr/local/python/include/python3.6m ./b2 $ ./b2 install \u5b89\u88c5\u5b8c\u6bd5\u540e\u5728 ~/.bash_profile \u4e2d\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf export PATH=$PATH:/usr/local/boost/include export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/boost/lib \u8bb0\u5f55\u4e8c: \u5185\u5b58\u8fc7\u5c0f\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25 c++: internal compiler error: Killed (program cc1plus) Please submit a full bug report, with preprocessed source if appropriate. See <http://bugzilla.redhat.com/bugzilla> for instructions. gmake[2]: *** [CMakeFiles/dlib_.dir/src/vector.cpp.o] Error 4 gmake[1]: *** [CMakeFiles/dlib_.dir/all] Error 2 gmake: *** [all] Error 2 error: cmake build failed! \u6d4b\u8bd5\u65f6 1G \u5185\u5b58\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25, \u4f7f\u7528\u989d\u5916\u7684 1G swap \u540e\u91cd\u65b0\u7f16\u8bd1\u89e3\u51b3\u95ee\u9898: $ dd if=/dev/zero of=/data/swap bs=64M count=16 $ chmod 0600 /data/swap $ mkswap /data/swap $ swapon /data/swap","title":"\u5b89\u88c5"},{"location":"content/daze/ga/evolve/","text":"\u9057\u4f20\u7b97\u6cd5: \u5185\u5b58\u4e2d\u7684\u8fdb\u5316 \u8fd9\u662f\u4e2a\u771f\u5b9e\u7684\u6545\u4e8b. \u4ece\u524d\u5728\u6d77\u5cb8\u8fb9\u6709\u4e00\u7fa4\u6247\u8d1d\u5728\u60a0\u54c9\u6e38\u54c9\u5730\u751f\u6d3b\u7e41\u884d\u7740. \u5b83\u4eec\u81ea\u7136\u662f\u8863\u98df\u4e0d\u6101, \u8fde\u623f\u5b50\u4e5f\u6709\u4e86\u7740\u843d. \u5b83\u4eec\u62c5\u5fe7\u7684\u53ea\u6709\u4e00\u4ef6\u4e8b: \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4, \u603b\u6709\u4e00\u4e2a\u4eba\u6765\u6316\u8d70\u5b83\u4eec\u4e4b\u4e2d\u7684\u4e00\u90e8\u5206. \u5f53\u7136\u5566, \u6316\u56de\u53bb\u5e72\u4ec0\u4e48\u8fd9\u5927\u5bb6\u90fd\u77e5\u9053. \u4f46\u6247\u8d1d\u4eec\u4e0d\u77e5\u9053\u7684\u662f, \u8fd9\u4eba\u7684\u5bb6\u65cf\u56fe\u817e\u662f Firefox \u7684\u56fe\u6807, \u6240\u4ee5\u4ed6\u603b\u662f\u9009\u62e9\u90a3\u4e9b\u8d1d\u58f3\u82b1\u7eb9\u957f\u5f97\u6bd4\u8f83\u4e0d\u50cf Firefox \u56fe\u6807\u7684\u6247\u8d1d. \u8fd9\u79cd\u72b6\u51b5\u6301\u7eed\u4e86\u597d\u51e0\u5341\u4e07\u4ee3. \u5927\u5bb6\u5e94\u8be5\u4e5f\u731c\u5230\u6247\u8d1d\u4eec\u8eab\u4e0a\u53d1\u751f\u4ec0\u4e48\u4e8b\u60c5\u4e86: \u5b83\u4eec\u7684\u8d1d\u58f3\u4e0a\u90fd\u5370\u7740\u5f88\u50cf Firefox \u56fe\u6807\u7684\u56fe\u6848. \u89e3\u6790 \u4e0a\u8ff0\u6545\u4e8b\u662f\u4e00\u4e2a\u9057\u4f20\u7b97\u6cd5\u7684\u4e00\u90e8\u5206. \u4e0b\u9762, \u5c31\u6765\u5b9e\u73b0\u8fd9\u4e2a\u9057\u4f20\u7b97\u6cd5. \u5047\u8bbe\u6bcf\u4e2a\u6247\u8d1d\u5747\u7531 100 \u4e2a\u534a\u900f\u660e\u4e14\u989c\u8272\u968f\u673a\u7684\u4e09\u89d2\u5f62\u7ec4\u6210: \u51b3\u7b56\u53d8\u91cf: 100 \u4e2a\u534a\u900f\u660e\u4e09\u89d2\u5f62, \u6bcf\u4e2a\u4e09\u89d2\u5f62\u7684\u5c5e\u6027\u5305\u62ec: \u4e09\u4e2a\u9876\u70b9\u7684\u5750\u6807, \u900f\u660e\u5ea6(0 - 0.45), \u989c\u8272. \u4e2a\u4f53\u8bc4\u4ef7\u65b9\u6cd5: 100 \u4e2a\u534a\u900f\u660e\u4e09\u89d2\u5f62\u7ec4\u5408\u6210\u800c\u6210\u7684\u56fe\u6848\u4e0e Firefox \u56fe\u6807\u8fdb\u884c\u9010\u50cf\u7d20\u6bd4\u5bf9, \u5e76\u7528\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u51cf\u53bb\u9010\u50cf\u7d20\u5411\u91cf\u8ddd\u79bb\u7684\u548c\u4f5c\u4e3a\u4e2a\u4f53\u9002\u5e94\u5ea6 \u9009\u62e9\u7b97\u5b50: \u8f6e\u76d8\u9009\u62e9 + \u6700\u4f18\u4fdd\u7559\u7b56\u7565 \u4ea4\u53c9\u7b97\u5b50: \u5355\u70b9\u4ea4\u53c9 \u53d8\u5f02\u7b97\u5b50: \u7b49\u4f4d\u53d8\u5f02 \u8fd0\u884c\u53c2\u6570: \u8fed\u4ee3 12000 \u6b21, \u79cd\u7fa4\u5927\u5c0f 80, \u4ea4\u53c9\u6982\u7387 0.6, \u53d8\u5f02\u6982\u7387 0.008 \u4ee3\u7801\u5b9e\u73b0 \u4e0b\u9762\u7528 Python \u5b9e\u73b0\u4e0a\u8ff0\u6545\u4e8b. import copy import os import os.path import numpy as np import skimage.draw import skimage.io import skimage.transform control_im_path = 'firefox.jpg' save_dir = '/tmp/img' class Base: def __init__(self, r, c, color, alpha): self.r = r self.c = c self.color = color self.alpha = alpha class Gene: def __init__(self): self.base = [] def copy(self): return copy.deepcopy(self) class GA: def __init__(self): self.pop_size = 80 self.dna_size = 100 self.max_iter = 3000 self.pc = 0.6 self.pm = 0.008 im = skimage.io.imread(control_im_path) if im.shape[2] == 4: im = skimage.color.rgba2rgb(im) im = (255 * im).astype(np.uint8) self.control_im = skimage.transform.resize( im, (128, 128), mode='reflect', preserve_range=True).astype(np.uint8) def decode(self, per): im = np.ones(self.control_im.shape, dtype=np.uint8) * 255 for e in per.base: rr, cc = skimage.draw.polygon(e.r, e.c) skimage.draw.set_color(im, (rr, cc), e.color, e.alpha) return im def perfit(self, per): im = self.decode(per) assert im.shape == self.control_im.shape # \u4e09\u7ef4\u77e9\u9635\u7684\u6b27\u5f0f\u8ddd\u79bb d = np.linalg.norm(np.where(self.control_im > im, self.control_im - im, im - self.control_im)) # \u4f7f\u7528\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u51cf\u53bb\u6b27\u5f0f\u8ddd\u79bb # \u6b64\u5904\u8be5\u6570\u4e3a (self.control_im.size * ((3 * 255 ** 2) ** 0.5) ** 2) ** 0.5 return (self.control_im.size * 195075) ** 0.5 - d def getfit(self, pop): fit = np.zeros(self.pop_size) for i, per in enumerate(pop): fit[i] = self.perfit(per) return fit def genpop(self): pop = [] for _ in range(self.pop_size): per = Gene() for _ in range(self.dna_size): r = np.random.randint(0, self.control_im.shape[0], 3, dtype=np.uint8) c = np.random.randint(0, self.control_im.shape[1], 3, dtype=np.uint8) color = np.random.randint(0, 256, 3) alpha = np.random.random() * 0.45 per.base.append(Base(r, c, color, alpha)) pop.append(per) return pop def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.01 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) son = [] for i in idx: son.append(pop[i].copy()) return son def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a.base[p:], b.base[p:] = b.base[p:], a.base[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): for per in pop: for base in per.base: if np.random.random() < self.pm: base.r = np.random.randint(0, self.control_im.shape[0], 3, dtype=np.uint8) base.c = np.random.randint(0, self.control_im.shape[1], 3, dtype=np.uint8) base.color = np.random.randint(0, 256, 3) base.alpha = np.random.random() * 0.45 return pop def evolve(self): pop = self.genpop() pop_fit = self.getfit(pop) for _ in range(self.max_iter): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() for i, (pop, fit) in enumerate(ga.optret(ga.evolve)()): j = np.argmax(fit) per = pop[j] per_fit = ga.perfit(per) print(f'{i:0>5} {per_fit}') skimage.io.imsave(os.path.join(save_dir, f'{i:0>5}.jpg'), ga.decode(per)) \u6267\u884c\u4e0a\u8ff0\u4ee3\u7801, \u8bb0\u5f97\u4fee\u6539 control_im_path \u4e0e save_dir \u4e3a\u53ef\u7528\u5730\u5740. \u4e0d\u7528\u4e00\u4f1a, \u5c31\u80fd\u5728 save_dir \u4e2d\u89c1\u5230\u6bcf\u4e00\u4ee3\u6700\u4f18\u4e2a\u4f53\u4e86. \u5f53\u7136, \u8dd1\u5b8c 3000 \u4ee3\u8fd8\u662f\u9700\u8981\u4e00\u70b9\u65f6\u95f4\u7684(\u5927\u7ea6\u534a\u5929~). \u540e\u8bb0 \u5b9e\u9645\u4e0a, \u5728\u751f\u6d3b\u548c\u751f\u4ea7\u4e2d, \u5f88\u591a\u65f6\u5019\u5e76\u4e0d\u9700\u8981\u5f97\u5230\u4e00\u4e2a\u5b8c\u7f8e\u7684\u7b54\u6848; \u800c\u5f88\u591a\u95ee\u9898\u5982\u679c\u8981\u5f97\u5230\u5b8c\u7f8e\u7684\u7b54\u6848\u7684\u8bdd, \u9700\u8981\u5f88\u5927\u91cf\u7684\u8ba1\u7b97. \u6240\u4ee5, \u56e0\u4e3a \u9057\u4f20\u7b97\u6cd5\u80fd\u5728\u76f8\u5bf9\u8f83\u77ed\u7684\u65f6\u95f4\u5185\u7ed9\u51fa\u4e00\u4e2a\u8db3\u591f\u597d\u80fd\u51d1\u5408\u7684\u7b54\u6848 , \u5b83\u4ece\u95ee\u4e16\u4f0a\u59cb\u5c31\u8d8a\u6765\u8d8a\u53d7\u5230\u5927\u5bb6\u7684\u91cd\u89c6, \u5bf9\u5b83\u7684\u7814\u7a76\u4e5f\u662f\u65b9\u5174\u672a\u827e. \u5f53\u7136, \u5b83\u4e5f\u6709\u7f3a\u70b9, \u6bd4\u5982\u8bf4\u65e9\u671f\u7684\u4f18\u52bf\u57fa\u56e0\u53ef\u80fd\u4f1a\u5f88\u5feb\u901a\u8fc7\u4ea4\u6362\u57fa\u56e0\u7684\u9014\u5f84\u6563\u64ad\u5230\u6574\u4e2a\u79cd\u7fa4\u4e2d, \u8fd9\u6837\u6709\u53ef\u80fd\u5bfc\u81f4\u65e9\u719f(premature), \u4e5f\u5c31\u662f\u8bf4\u6574\u4e2a\u79cd\u7fa4\u7684\u57fa\u56e0\u8fc7\u65e9\u540c\u4e00\u5316, \u5f97\u4e0d\u5230\u8db3\u591f\u597d\u7684\u7ed3\u679c. \u8fd9\u4e2a\u95ee\u9898\u662f\u96be\u4ee5\u5b8c\u5168\u907f\u514d\u7684. \u5176\u5b9e, \u901a\u8fc7\u5fae\u8c03\u53c2\u6570\u548c\u7e41\u884d\u3001\u53d8\u5f02\u3001\u6dd8\u6c70\u3001\u7ec8\u6b62\u7684\u4ee3\u7801, \u6211\u4eec\u6709\u53ef\u80fd\u5f97\u5230\u66f4\u6709\u6548\u7684\u7b97\u6cd5. \u9057\u4f20\u7b97\u6cd5\u53ea\u662f\u4e00\u4e2a\u6846\u67b6, \u91cc\u8fb9\u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u95ee\u9898\u8fdb\u884c\u8c03\u6574, \u8fd9\u4e5f\u662f\u5b83\u80fd\u5728\u8bb8\u591a\u95ee\u9898\u4e0a\u6d3e\u4e0a\u7528\u573a\u7684\u4e00\u4e2a\u539f\u56e0. \u50cf\u8fd9\u6837\u53ef\u4ee5\u9002\u5e94\u5f88\u591a\u95ee\u9898\u7684\u7b97\u6cd5\u8fd8\u6709\u6a21\u62df\u9000\u706b\u7b97\u6cd5, \u7c92\u5b50\u7fa4\u7b97\u6cd5, \u8681\u7fa4\u7b97\u6cd5, \u7981\u5fcc\u641c\u7d22\u7b49\u7b49, \u7edf\u79f0\u4e3a\u5143\u542f\u53d1\u5f0f\u7b97\u6cd5(Meta-heuristic algorithms). \u53e6\u5916, \u57fa\u4e8e\u81ea\u7136\u6f14\u5316\u8fc7\u7a0b\u7684\u7b97\u6cd5\u9664\u4e86\u5728\u8fd9\u91cc\u8bf4\u5230\u7684\u9057\u4f20\u7b97\u6cd5\u4ee5\u5916, \u8fd8\u6709\u66f4\u5e7f\u6cdb\u7684\u7fa4\u4f53\u9057\u4f20\u7b97\u6cd5\u548c\u9057\u4f20\u7f16\u7a0b\u7b49, \u5b83\u4eec\u80fd\u89e3\u51b3\u5f88\u591a\u68d8\u624b\u7684\u95ee\u9898. \u8fd9\u4e5f\u4ece\u4e00\u4e2a\u4fa7\u9762\u8bf4\u660e, \u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u4e00\u4e2a\u667a\u80fd\u624d\u80fd\u5f97\u5230\u4e00\u4e2a\u6784\u9020\u7cbe\u5de7\u7684\u7cfb\u7edf. \u53c2\u8003 [1] \u65b9\u5f26: \u9057\u4f20\u7b97\u6cd5: \u5185\u5b58\u4e2d\u7684\u8fdb\u5316 http://songshuhui.net/archives/10462","title":"\u9057\u4f20\u7b97\u6cd5-\u751f\u7269\u8fdb\u5316\u6a21\u62df"},{"location":"content/daze/ga/evolve/#_1","text":"\u8fd9\u662f\u4e2a\u771f\u5b9e\u7684\u6545\u4e8b. \u4ece\u524d\u5728\u6d77\u5cb8\u8fb9\u6709\u4e00\u7fa4\u6247\u8d1d\u5728\u60a0\u54c9\u6e38\u54c9\u5730\u751f\u6d3b\u7e41\u884d\u7740. \u5b83\u4eec\u81ea\u7136\u662f\u8863\u98df\u4e0d\u6101, \u8fde\u623f\u5b50\u4e5f\u6709\u4e86\u7740\u843d. \u5b83\u4eec\u62c5\u5fe7\u7684\u53ea\u6709\u4e00\u4ef6\u4e8b: \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4, \u603b\u6709\u4e00\u4e2a\u4eba\u6765\u6316\u8d70\u5b83\u4eec\u4e4b\u4e2d\u7684\u4e00\u90e8\u5206. \u5f53\u7136\u5566, \u6316\u56de\u53bb\u5e72\u4ec0\u4e48\u8fd9\u5927\u5bb6\u90fd\u77e5\u9053. \u4f46\u6247\u8d1d\u4eec\u4e0d\u77e5\u9053\u7684\u662f, \u8fd9\u4eba\u7684\u5bb6\u65cf\u56fe\u817e\u662f Firefox \u7684\u56fe\u6807, \u6240\u4ee5\u4ed6\u603b\u662f\u9009\u62e9\u90a3\u4e9b\u8d1d\u58f3\u82b1\u7eb9\u957f\u5f97\u6bd4\u8f83\u4e0d\u50cf Firefox \u56fe\u6807\u7684\u6247\u8d1d. \u8fd9\u79cd\u72b6\u51b5\u6301\u7eed\u4e86\u597d\u51e0\u5341\u4e07\u4ee3. \u5927\u5bb6\u5e94\u8be5\u4e5f\u731c\u5230\u6247\u8d1d\u4eec\u8eab\u4e0a\u53d1\u751f\u4ec0\u4e48\u4e8b\u60c5\u4e86: \u5b83\u4eec\u7684\u8d1d\u58f3\u4e0a\u90fd\u5370\u7740\u5f88\u50cf Firefox \u56fe\u6807\u7684\u56fe\u6848.","title":"\u9057\u4f20\u7b97\u6cd5: \u5185\u5b58\u4e2d\u7684\u8fdb\u5316"},{"location":"content/daze/ga/evolve/#_2","text":"\u4e0a\u8ff0\u6545\u4e8b\u662f\u4e00\u4e2a\u9057\u4f20\u7b97\u6cd5\u7684\u4e00\u90e8\u5206. \u4e0b\u9762, \u5c31\u6765\u5b9e\u73b0\u8fd9\u4e2a\u9057\u4f20\u7b97\u6cd5. \u5047\u8bbe\u6bcf\u4e2a\u6247\u8d1d\u5747\u7531 100 \u4e2a\u534a\u900f\u660e\u4e14\u989c\u8272\u968f\u673a\u7684\u4e09\u89d2\u5f62\u7ec4\u6210: \u51b3\u7b56\u53d8\u91cf: 100 \u4e2a\u534a\u900f\u660e\u4e09\u89d2\u5f62, \u6bcf\u4e2a\u4e09\u89d2\u5f62\u7684\u5c5e\u6027\u5305\u62ec: \u4e09\u4e2a\u9876\u70b9\u7684\u5750\u6807, \u900f\u660e\u5ea6(0 - 0.45), \u989c\u8272. \u4e2a\u4f53\u8bc4\u4ef7\u65b9\u6cd5: 100 \u4e2a\u534a\u900f\u660e\u4e09\u89d2\u5f62\u7ec4\u5408\u6210\u800c\u6210\u7684\u56fe\u6848\u4e0e Firefox \u56fe\u6807\u8fdb\u884c\u9010\u50cf\u7d20\u6bd4\u5bf9, \u5e76\u7528\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u51cf\u53bb\u9010\u50cf\u7d20\u5411\u91cf\u8ddd\u79bb\u7684\u548c\u4f5c\u4e3a\u4e2a\u4f53\u9002\u5e94\u5ea6 \u9009\u62e9\u7b97\u5b50: \u8f6e\u76d8\u9009\u62e9 + \u6700\u4f18\u4fdd\u7559\u7b56\u7565 \u4ea4\u53c9\u7b97\u5b50: \u5355\u70b9\u4ea4\u53c9 \u53d8\u5f02\u7b97\u5b50: \u7b49\u4f4d\u53d8\u5f02 \u8fd0\u884c\u53c2\u6570: \u8fed\u4ee3 12000 \u6b21, \u79cd\u7fa4\u5927\u5c0f 80, \u4ea4\u53c9\u6982\u7387 0.6, \u53d8\u5f02\u6982\u7387 0.008","title":"\u89e3\u6790"},{"location":"content/daze/ga/evolve/#_3","text":"\u4e0b\u9762\u7528 Python \u5b9e\u73b0\u4e0a\u8ff0\u6545\u4e8b. import copy import os import os.path import numpy as np import skimage.draw import skimage.io import skimage.transform control_im_path = 'firefox.jpg' save_dir = '/tmp/img' class Base: def __init__(self, r, c, color, alpha): self.r = r self.c = c self.color = color self.alpha = alpha class Gene: def __init__(self): self.base = [] def copy(self): return copy.deepcopy(self) class GA: def __init__(self): self.pop_size = 80 self.dna_size = 100 self.max_iter = 3000 self.pc = 0.6 self.pm = 0.008 im = skimage.io.imread(control_im_path) if im.shape[2] == 4: im = skimage.color.rgba2rgb(im) im = (255 * im).astype(np.uint8) self.control_im = skimage.transform.resize( im, (128, 128), mode='reflect', preserve_range=True).astype(np.uint8) def decode(self, per): im = np.ones(self.control_im.shape, dtype=np.uint8) * 255 for e in per.base: rr, cc = skimage.draw.polygon(e.r, e.c) skimage.draw.set_color(im, (rr, cc), e.color, e.alpha) return im def perfit(self, per): im = self.decode(per) assert im.shape == self.control_im.shape # \u4e09\u7ef4\u77e9\u9635\u7684\u6b27\u5f0f\u8ddd\u79bb d = np.linalg.norm(np.where(self.control_im > im, self.control_im - im, im - self.control_im)) # \u4f7f\u7528\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u51cf\u53bb\u6b27\u5f0f\u8ddd\u79bb # \u6b64\u5904\u8be5\u6570\u4e3a (self.control_im.size * ((3 * 255 ** 2) ** 0.5) ** 2) ** 0.5 return (self.control_im.size * 195075) ** 0.5 - d def getfit(self, pop): fit = np.zeros(self.pop_size) for i, per in enumerate(pop): fit[i] = self.perfit(per) return fit def genpop(self): pop = [] for _ in range(self.pop_size): per = Gene() for _ in range(self.dna_size): r = np.random.randint(0, self.control_im.shape[0], 3, dtype=np.uint8) c = np.random.randint(0, self.control_im.shape[1], 3, dtype=np.uint8) color = np.random.randint(0, 256, 3) alpha = np.random.random() * 0.45 per.base.append(Base(r, c, color, alpha)) pop.append(per) return pop def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.01 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) son = [] for i in idx: son.append(pop[i].copy()) return son def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a.base[p:], b.base[p:] = b.base[p:], a.base[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): for per in pop: for base in per.base: if np.random.random() < self.pm: base.r = np.random.randint(0, self.control_im.shape[0], 3, dtype=np.uint8) base.c = np.random.randint(0, self.control_im.shape[1], 3, dtype=np.uint8) base.color = np.random.randint(0, 256, 3) base.alpha = np.random.random() * 0.45 return pop def evolve(self): pop = self.genpop() pop_fit = self.getfit(pop) for _ in range(self.max_iter): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() for i, (pop, fit) in enumerate(ga.optret(ga.evolve)()): j = np.argmax(fit) per = pop[j] per_fit = ga.perfit(per) print(f'{i:0>5} {per_fit}') skimage.io.imsave(os.path.join(save_dir, f'{i:0>5}.jpg'), ga.decode(per)) \u6267\u884c\u4e0a\u8ff0\u4ee3\u7801, \u8bb0\u5f97\u4fee\u6539 control_im_path \u4e0e save_dir \u4e3a\u53ef\u7528\u5730\u5740. \u4e0d\u7528\u4e00\u4f1a, \u5c31\u80fd\u5728 save_dir \u4e2d\u89c1\u5230\u6bcf\u4e00\u4ee3\u6700\u4f18\u4e2a\u4f53\u4e86. \u5f53\u7136, \u8dd1\u5b8c 3000 \u4ee3\u8fd8\u662f\u9700\u8981\u4e00\u70b9\u65f6\u95f4\u7684(\u5927\u7ea6\u534a\u5929~).","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/ga/evolve/#_4","text":"\u5b9e\u9645\u4e0a, \u5728\u751f\u6d3b\u548c\u751f\u4ea7\u4e2d, \u5f88\u591a\u65f6\u5019\u5e76\u4e0d\u9700\u8981\u5f97\u5230\u4e00\u4e2a\u5b8c\u7f8e\u7684\u7b54\u6848; \u800c\u5f88\u591a\u95ee\u9898\u5982\u679c\u8981\u5f97\u5230\u5b8c\u7f8e\u7684\u7b54\u6848\u7684\u8bdd, \u9700\u8981\u5f88\u5927\u91cf\u7684\u8ba1\u7b97. \u6240\u4ee5, \u56e0\u4e3a \u9057\u4f20\u7b97\u6cd5\u80fd\u5728\u76f8\u5bf9\u8f83\u77ed\u7684\u65f6\u95f4\u5185\u7ed9\u51fa\u4e00\u4e2a\u8db3\u591f\u597d\u80fd\u51d1\u5408\u7684\u7b54\u6848 , \u5b83\u4ece\u95ee\u4e16\u4f0a\u59cb\u5c31\u8d8a\u6765\u8d8a\u53d7\u5230\u5927\u5bb6\u7684\u91cd\u89c6, \u5bf9\u5b83\u7684\u7814\u7a76\u4e5f\u662f\u65b9\u5174\u672a\u827e. \u5f53\u7136, \u5b83\u4e5f\u6709\u7f3a\u70b9, \u6bd4\u5982\u8bf4\u65e9\u671f\u7684\u4f18\u52bf\u57fa\u56e0\u53ef\u80fd\u4f1a\u5f88\u5feb\u901a\u8fc7\u4ea4\u6362\u57fa\u56e0\u7684\u9014\u5f84\u6563\u64ad\u5230\u6574\u4e2a\u79cd\u7fa4\u4e2d, \u8fd9\u6837\u6709\u53ef\u80fd\u5bfc\u81f4\u65e9\u719f(premature), \u4e5f\u5c31\u662f\u8bf4\u6574\u4e2a\u79cd\u7fa4\u7684\u57fa\u56e0\u8fc7\u65e9\u540c\u4e00\u5316, \u5f97\u4e0d\u5230\u8db3\u591f\u597d\u7684\u7ed3\u679c. \u8fd9\u4e2a\u95ee\u9898\u662f\u96be\u4ee5\u5b8c\u5168\u907f\u514d\u7684. \u5176\u5b9e, \u901a\u8fc7\u5fae\u8c03\u53c2\u6570\u548c\u7e41\u884d\u3001\u53d8\u5f02\u3001\u6dd8\u6c70\u3001\u7ec8\u6b62\u7684\u4ee3\u7801, \u6211\u4eec\u6709\u53ef\u80fd\u5f97\u5230\u66f4\u6709\u6548\u7684\u7b97\u6cd5. \u9057\u4f20\u7b97\u6cd5\u53ea\u662f\u4e00\u4e2a\u6846\u67b6, \u91cc\u8fb9\u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u95ee\u9898\u8fdb\u884c\u8c03\u6574, \u8fd9\u4e5f\u662f\u5b83\u80fd\u5728\u8bb8\u591a\u95ee\u9898\u4e0a\u6d3e\u4e0a\u7528\u573a\u7684\u4e00\u4e2a\u539f\u56e0. \u50cf\u8fd9\u6837\u53ef\u4ee5\u9002\u5e94\u5f88\u591a\u95ee\u9898\u7684\u7b97\u6cd5\u8fd8\u6709\u6a21\u62df\u9000\u706b\u7b97\u6cd5, \u7c92\u5b50\u7fa4\u7b97\u6cd5, \u8681\u7fa4\u7b97\u6cd5, \u7981\u5fcc\u641c\u7d22\u7b49\u7b49, \u7edf\u79f0\u4e3a\u5143\u542f\u53d1\u5f0f\u7b97\u6cd5(Meta-heuristic algorithms). \u53e6\u5916, \u57fa\u4e8e\u81ea\u7136\u6f14\u5316\u8fc7\u7a0b\u7684\u7b97\u6cd5\u9664\u4e86\u5728\u8fd9\u91cc\u8bf4\u5230\u7684\u9057\u4f20\u7b97\u6cd5\u4ee5\u5916, \u8fd8\u6709\u66f4\u5e7f\u6cdb\u7684\u7fa4\u4f53\u9057\u4f20\u7b97\u6cd5\u548c\u9057\u4f20\u7f16\u7a0b\u7b49, \u5b83\u4eec\u80fd\u89e3\u51b3\u5f88\u591a\u68d8\u624b\u7684\u95ee\u9898. \u8fd9\u4e5f\u4ece\u4e00\u4e2a\u4fa7\u9762\u8bf4\u660e, \u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u4e00\u4e2a\u667a\u80fd\u624d\u80fd\u5f97\u5230\u4e00\u4e2a\u6784\u9020\u7cbe\u5de7\u7684\u7cfb\u7edf.","title":"\u540e\u8bb0"},{"location":"content/daze/ga/evolve/#_5","text":"[1] \u65b9\u5f26: \u9057\u4f20\u7b97\u6cd5: \u5185\u5b58\u4e2d\u7684\u8fdb\u5316 http://songshuhui.net/archives/10462","title":"\u53c2\u8003"},{"location":"content/daze/ga/fooled_nn/","text":"\u611a\u5f04\u795e\u7ecf\u7f51\u7edc \u672c\u6587\u7075\u611f\u6765\u81ea\u4e8e\u4e0a\u4e00\u7bc7 \u751f\u7269\u8fdb\u5316\u6a21\u62df . \u795e\u7ecf\u7f51\u7edc\u5f53\u524d\u5df2\u7ecf\u80fd\u8bc6\u522b\u5404\u79cd\u56fe\u50cf, \u7f51\u7edc\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u8303\u56f4\u4e3a 0 \u81f3 1 \u7684\u7f6e\u4fe1\u5ea6(confidence) \u8868\u660e\u5b83\u6709\u591a\u5c11\u628a\u63e1\u8ba4\u4e3a\u8fd9\u5f20\u56fe\u7247\u5c5e\u4e8e\u67d0\u4e00\u5206\u7c7b. \u901a\u8fc7\u5c06\u795e\u7ecf\u7f51\u7edc\u7684\u7f6e\u4fe1\u5ea6\u4f5c\u4e3a\u9057\u4f20\u7b97\u6cd5\u7684\u9002\u5e94\u5ea6, \u53ef\u4ee5\u5f88\u5bb9\u6613\u751f\u6210\u4eba\u773c\u65e0\u6cd5\u8fa8\u8ba4, \u800c\u795e\u7ecf\u7f51\u7edc\u5374\u6709 99.99% \u7684\u628a\u63e1\u8ba4\u4e3a\u662f\u67d0\u4e00\u5206\u7c7b\u7684\u56fe\u50cf(\u4f8b\u5982, \u5c06\u4e00\u5f20\u5145\u6ee1\u65e0\u610f\u4e49\u566a\u70b9\u7684\u56fe\u50cf\u4ee5 99.99% \u7684\u7f6e\u4fe1\u5ea6\u5206\u7c7b\u4e3a\u72ee\u5b50). \u5728 2014 \u5e74\u5df2\u7ecf\u6709\u7814\u7a76\u8005\u7814\u7a76\u8be5\u65b9\u9762\u7684\u77e5\u8bc6, \u8bba\u6587\u5730\u5740\u662f: Deep Neural Networks are Easily Fooled:High Confidence Predictions for Unrecognizable Images . \u9664\u4e86\u4f7f\u7528\u968f\u673a\u566a\u70b9\u611a\u5f04\u795e\u7ecf\u7f51\u7edc\u4e4b\u5916, \u6587\u7ae0\u4e2d\u8fd8\u7814\u7a76\u4e86\u5982\u4f55\u901a\u8fc7\u5fae\u8c03\u50cf\u7d20\u70b9, \u5f97\u5230\u4e00\u5f20\u6807\u7b7e\u4e3a\u56fe\u4e66\u9986\u7684\u72ee\u5b50. \u5176\u5b9e\u7c7b\u4f3c\u7684\u7814\u7a76\u8fd8\u6709\u5f88\u591a, \u6bd4\u5982 All it takes to steal your face is a special pair of glasses \u5c31\u5b9e\u73b0\u4e86\u901a\u8fc7\u4f69\u6234\u4e00\u526f\u7279\u6b8a\u773c\u955c, \u8ba9\u4eba\u8138\u8bc6\u522b\u7cfb\u7edf\u5c06\u4f60\u8bef\u8ba4\u4e3a\u662f\u4ed6\u4eba. \u672c\u6587\u76ee\u7684\u662f\u611a\u5f04\u4e00\u4e2a\u624b\u5199\u6570\u5b57\u8bc6\u522b\u7f51\u7edc. \u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc \u8fd9\u91cc\u4f7f\u7528 keras \u6765\u8bad\u7ec3\u6211\u4eec\u7684\u624b\u5199\u6570\u5b57\u8bc6\u522b\u6a21\u578b. \u76f4\u63a5\u7528\u5b98\u65b9 examples \u91cc\u7684\u8bad\u7ec3\u4ee3\u7801: https://github.com/keras-team/keras/blob/master/examples/mnist_mlp.py , \u8bb0\u5f97\u5728\u539f\u59cb\u4ee3\u7801\u6700\u540e\u52a0\u4e0a model.save_weights('mnist_mlp.h5') \u6765\u4fdd\u5b58\u6a21\u578b\u5230\u672c\u5730. keras \u5728\u8be5\u6a21\u578b\u4e0a\u7ed9\u51fa\u7684\u6d4b\u8bd5\u7cbe\u5ea6\u662f 98.40% . \u5728\u5b8c\u6210\u8bad\u7ec3\u540e, \u968f\u673a\u751f\u6210\u4e00\u4e2a 28 * 28 \u7684\u56fe\u7247\u6d4b\u8bd5\u4e00\u4e0b\u8be5\u6a21\u578b: import keras.losses import keras.models import keras.optimizers import numpy as np model = keras.models.Sequential() model.add(keras.layers.core.Dense(512, activation='relu', input_shape=(784, ))) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(512, activation='relu')) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(10, activation='softmax')) model.compile( loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.RMSprop(), metrics=['accuracy'] ) model.load_weights('mnist_mlp.h5') def predict(x): assert x.shape == (784, ) y = model.predict(np.array([x]), verbose=0) return y[0] x = np.random.randint(0, 2, size=784, dtype=np.bool) r = predict(x) print(r) \u8f93\u51fa\u5982\u4e0b: [ 7.09424297e-09 0.00000000e+00 7.83010735e-04 0.00000000e+00 0.00000000e+00 3.43550600e-14 9.99216914e-01 2.81605187e-19 2.40218861e-36 2.99693766e-28] \u5f00\u59cb\u8c03\u620f \u4ee3\u7801\u548c\u524d\u51e0\u7ae0\u57fa\u672c\u4e00\u6837, \u552f\u4e00\u4e0d\u540c\u662f\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u4f5c\u4e3a\u9057\u4f20\u7b97\u6cd5\u7684\u9002\u5e94\u5ea6\u8ba1\u7b97\u51fd\u6570. \u4e0b\u793a\u7b97\u6cd5\u4f1a\u521d\u59cb\u5316 80 \u5f20 28*28 \u7684\u56fe\u7247, \u5e76\u5c06\u6570\u636e\u4f20\u5165\u795e\u7ecf\u7f51\u7edc\u8ba1\u7b97\u6bcf\u5f20\u56fe\u7247\u5728\u67d0\u4e2a\u6570\u5b57\u4e0a\u7684\u5f97\u5206, \u5982\u679c\u5728\u67d0\u4e00\u8f6e, \u7fa4\u4f53\u4e2d\u6700\u4f18\u79c0\u7684\u4e2a\u4f53\u5f97\u5206\u8d85\u8fc7 0.99, \u5219\u7ed3\u675f\u8fdb\u5316, \u5e76\u4fdd\u5b58\u8be5\u6700\u4f18\u4e2a\u4f53. import os import os.path import keras.losses import keras.models import keras.optimizers import numpy as np import skimage.draw import skimage.io import skimage.transform model = keras.models.Sequential() model.add(keras.layers.core.Dense(512, activation='relu', input_shape=(784, ))) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(512, activation='relu')) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(10, activation='softmax')) model.compile( loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.RMSprop(), metrics=['accuracy'] ) model.load_weights('mnist_mlp.h5') class GA: def __init__(self, aim): self.aim = aim self.pop_size = 80 self.dna_size = 28 * 28 self.max_iter = 500 self.pc = 0.6 self.pm = 0.008 def perfit(self, per): y = model.predict(np.array([per]), verbose=0) return y[0][self.aim] def getfit(self, pop): fit = np.zeros(self.pop_size) for i, per in enumerate(pop): fit[i] = self.perfit(per) return fit def genpop(self): return np.random.choice(np.array([0, 1]), (self.pop_size, self.dna_size)).astype(np.bool) def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.01 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) return pop[idx] def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = self.genpop() pop_fit = self.getfit(pop) for _ in range(self.max_iter): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit save_dir = 'mnist_ga_fooled' for n in range(10): ga = GA(n) for i, (pop, fit) in enumerate(ga.optret(ga.evolve)()): j = np.argmax(fit) per = pop[j] per_fit = fit[j] print(f'{n} {per_fit}') if per_fit > 0.99: skimage.io.imsave(os.path.join(save_dir, f'{n}.bmp'), per.reshape((28, 28)) * 255) break \u5728\u76ee\u5f55 mnist_ga_fooled \u4e0b\u4fdd\u5b58\u4e86\u6700\u7ec8\u751f\u6210\u7684\u6570\u5b57 0-9 \u7684\u56fe\u7247, \u6bcf\u5f20\u56fe\u7247\u5728\u5bf9\u5e94\u5206\u7c7b\u5668\u4e0b\u90fd\u6709 99% \u4ee5\u4e0a\u7684\u6982\u7387. \u4e0b\u793a\u56fe\u7247\u4ece\u5de6\u81f3\u53f3\u5206\u522b\u4e3a\u6570\u5b57 0 \u81f3 9. \u771f\u662f\u6709\u8da3.","title":"\u9057\u4f20\u7b97\u6cd5-\u611a\u5f04\u795e\u7ecf\u7f51\u7edc"},{"location":"content/daze/ga/fooled_nn/#_1","text":"\u672c\u6587\u7075\u611f\u6765\u81ea\u4e8e\u4e0a\u4e00\u7bc7 \u751f\u7269\u8fdb\u5316\u6a21\u62df . \u795e\u7ecf\u7f51\u7edc\u5f53\u524d\u5df2\u7ecf\u80fd\u8bc6\u522b\u5404\u79cd\u56fe\u50cf, \u7f51\u7edc\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u8303\u56f4\u4e3a 0 \u81f3 1 \u7684\u7f6e\u4fe1\u5ea6(confidence) \u8868\u660e\u5b83\u6709\u591a\u5c11\u628a\u63e1\u8ba4\u4e3a\u8fd9\u5f20\u56fe\u7247\u5c5e\u4e8e\u67d0\u4e00\u5206\u7c7b. \u901a\u8fc7\u5c06\u795e\u7ecf\u7f51\u7edc\u7684\u7f6e\u4fe1\u5ea6\u4f5c\u4e3a\u9057\u4f20\u7b97\u6cd5\u7684\u9002\u5e94\u5ea6, \u53ef\u4ee5\u5f88\u5bb9\u6613\u751f\u6210\u4eba\u773c\u65e0\u6cd5\u8fa8\u8ba4, \u800c\u795e\u7ecf\u7f51\u7edc\u5374\u6709 99.99% \u7684\u628a\u63e1\u8ba4\u4e3a\u662f\u67d0\u4e00\u5206\u7c7b\u7684\u56fe\u50cf(\u4f8b\u5982, \u5c06\u4e00\u5f20\u5145\u6ee1\u65e0\u610f\u4e49\u566a\u70b9\u7684\u56fe\u50cf\u4ee5 99.99% \u7684\u7f6e\u4fe1\u5ea6\u5206\u7c7b\u4e3a\u72ee\u5b50). \u5728 2014 \u5e74\u5df2\u7ecf\u6709\u7814\u7a76\u8005\u7814\u7a76\u8be5\u65b9\u9762\u7684\u77e5\u8bc6, \u8bba\u6587\u5730\u5740\u662f: Deep Neural Networks are Easily Fooled:High Confidence Predictions for Unrecognizable Images . \u9664\u4e86\u4f7f\u7528\u968f\u673a\u566a\u70b9\u611a\u5f04\u795e\u7ecf\u7f51\u7edc\u4e4b\u5916, \u6587\u7ae0\u4e2d\u8fd8\u7814\u7a76\u4e86\u5982\u4f55\u901a\u8fc7\u5fae\u8c03\u50cf\u7d20\u70b9, \u5f97\u5230\u4e00\u5f20\u6807\u7b7e\u4e3a\u56fe\u4e66\u9986\u7684\u72ee\u5b50. \u5176\u5b9e\u7c7b\u4f3c\u7684\u7814\u7a76\u8fd8\u6709\u5f88\u591a, \u6bd4\u5982 All it takes to steal your face is a special pair of glasses \u5c31\u5b9e\u73b0\u4e86\u901a\u8fc7\u4f69\u6234\u4e00\u526f\u7279\u6b8a\u773c\u955c, \u8ba9\u4eba\u8138\u8bc6\u522b\u7cfb\u7edf\u5c06\u4f60\u8bef\u8ba4\u4e3a\u662f\u4ed6\u4eba. \u672c\u6587\u76ee\u7684\u662f\u611a\u5f04\u4e00\u4e2a\u624b\u5199\u6570\u5b57\u8bc6\u522b\u7f51\u7edc.","title":"\u611a\u5f04\u795e\u7ecf\u7f51\u7edc"},{"location":"content/daze/ga/fooled_nn/#_2","text":"\u8fd9\u91cc\u4f7f\u7528 keras \u6765\u8bad\u7ec3\u6211\u4eec\u7684\u624b\u5199\u6570\u5b57\u8bc6\u522b\u6a21\u578b. \u76f4\u63a5\u7528\u5b98\u65b9 examples \u91cc\u7684\u8bad\u7ec3\u4ee3\u7801: https://github.com/keras-team/keras/blob/master/examples/mnist_mlp.py , \u8bb0\u5f97\u5728\u539f\u59cb\u4ee3\u7801\u6700\u540e\u52a0\u4e0a model.save_weights('mnist_mlp.h5') \u6765\u4fdd\u5b58\u6a21\u578b\u5230\u672c\u5730. keras \u5728\u8be5\u6a21\u578b\u4e0a\u7ed9\u51fa\u7684\u6d4b\u8bd5\u7cbe\u5ea6\u662f 98.40% . \u5728\u5b8c\u6210\u8bad\u7ec3\u540e, \u968f\u673a\u751f\u6210\u4e00\u4e2a 28 * 28 \u7684\u56fe\u7247\u6d4b\u8bd5\u4e00\u4e0b\u8be5\u6a21\u578b: import keras.losses import keras.models import keras.optimizers import numpy as np model = keras.models.Sequential() model.add(keras.layers.core.Dense(512, activation='relu', input_shape=(784, ))) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(512, activation='relu')) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(10, activation='softmax')) model.compile( loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.RMSprop(), metrics=['accuracy'] ) model.load_weights('mnist_mlp.h5') def predict(x): assert x.shape == (784, ) y = model.predict(np.array([x]), verbose=0) return y[0] x = np.random.randint(0, 2, size=784, dtype=np.bool) r = predict(x) print(r) \u8f93\u51fa\u5982\u4e0b: [ 7.09424297e-09 0.00000000e+00 7.83010735e-04 0.00000000e+00 0.00000000e+00 3.43550600e-14 9.99216914e-01 2.81605187e-19 2.40218861e-36 2.99693766e-28]","title":"\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc"},{"location":"content/daze/ga/fooled_nn/#_3","text":"\u4ee3\u7801\u548c\u524d\u51e0\u7ae0\u57fa\u672c\u4e00\u6837, \u552f\u4e00\u4e0d\u540c\u662f\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u4f5c\u4e3a\u9057\u4f20\u7b97\u6cd5\u7684\u9002\u5e94\u5ea6\u8ba1\u7b97\u51fd\u6570. \u4e0b\u793a\u7b97\u6cd5\u4f1a\u521d\u59cb\u5316 80 \u5f20 28*28 \u7684\u56fe\u7247, \u5e76\u5c06\u6570\u636e\u4f20\u5165\u795e\u7ecf\u7f51\u7edc\u8ba1\u7b97\u6bcf\u5f20\u56fe\u7247\u5728\u67d0\u4e2a\u6570\u5b57\u4e0a\u7684\u5f97\u5206, \u5982\u679c\u5728\u67d0\u4e00\u8f6e, \u7fa4\u4f53\u4e2d\u6700\u4f18\u79c0\u7684\u4e2a\u4f53\u5f97\u5206\u8d85\u8fc7 0.99, \u5219\u7ed3\u675f\u8fdb\u5316, \u5e76\u4fdd\u5b58\u8be5\u6700\u4f18\u4e2a\u4f53. import os import os.path import keras.losses import keras.models import keras.optimizers import numpy as np import skimage.draw import skimage.io import skimage.transform model = keras.models.Sequential() model.add(keras.layers.core.Dense(512, activation='relu', input_shape=(784, ))) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(512, activation='relu')) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(10, activation='softmax')) model.compile( loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.RMSprop(), metrics=['accuracy'] ) model.load_weights('mnist_mlp.h5') class GA: def __init__(self, aim): self.aim = aim self.pop_size = 80 self.dna_size = 28 * 28 self.max_iter = 500 self.pc = 0.6 self.pm = 0.008 def perfit(self, per): y = model.predict(np.array([per]), verbose=0) return y[0][self.aim] def getfit(self, pop): fit = np.zeros(self.pop_size) for i, per in enumerate(pop): fit[i] = self.perfit(per) return fit def genpop(self): return np.random.choice(np.array([0, 1]), (self.pop_size, self.dna_size)).astype(np.bool) def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.01 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) return pop[idx] def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = self.genpop() pop_fit = self.getfit(pop) for _ in range(self.max_iter): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit save_dir = 'mnist_ga_fooled' for n in range(10): ga = GA(n) for i, (pop, fit) in enumerate(ga.optret(ga.evolve)()): j = np.argmax(fit) per = pop[j] per_fit = fit[j] print(f'{n} {per_fit}') if per_fit > 0.99: skimage.io.imsave(os.path.join(save_dir, f'{n}.bmp'), per.reshape((28, 28)) * 255) break \u5728\u76ee\u5f55 mnist_ga_fooled \u4e0b\u4fdd\u5b58\u4e86\u6700\u7ec8\u751f\u6210\u7684\u6570\u5b57 0-9 \u7684\u56fe\u7247, \u6bcf\u5f20\u56fe\u7247\u5728\u5bf9\u5e94\u5206\u7c7b\u5668\u4e0b\u90fd\u6709 99% \u4ee5\u4e0a\u7684\u6982\u7387. \u4e0b\u793a\u56fe\u7247\u4ece\u5de6\u81f3\u53f3\u5206\u522b\u4e3a\u6570\u5b57 0 \u81f3 9. \u771f\u662f\u6709\u8da3.","title":"\u5f00\u59cb\u8c03\u620f"},{"location":"content/daze/ga/sga/","text":"\u9057\u4f20\u7b97\u6cd5\u7b80\u8ff0 \u9057\u4f20\u7b97\u6cd5(\u82f1\u8bed: Genetic Algorithm (GA)) \u662f\u8ba1\u7b97\u6570\u5b66\u4e2d\u7528\u4e8e\u89e3\u51b3\u6700\u4f73\u5316\u7684\u641c\u7d22\u7b97\u6cd5, \u662f\u8fdb\u5316\u7b97\u6cd5\u7684\u4e00\u79cd. \u8fdb\u5316\u7b97\u6cd5\u6700\u521d\u662f\u501f\u9274\u4e86\u8fdb\u5316\u751f\u7269\u5b66\u4e2d\u7684\u4e00\u4e9b\u73b0\u8c61\u800c\u53d1\u5c55\u8d77\u6765\u7684, \u8fd9\u4e9b\u73b0\u8c61\u5305\u62ec\u9057\u4f20, \u7a81\u53d8, \u81ea\u7136\u9009\u62e9\u4ee5\u53ca\u6742\u4ea4\u7b49. \u9057\u4f20\u7b97\u6cd5\u901a\u5e38\u5b9e\u73b0\u65b9\u5f0f\u4e3a\u4e00\u79cd\u8ba1\u7b97\u673a\u6a21\u62df. \u5bf9\u4e8e\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898, \u4e00\u5b9a\u6570\u91cf\u7684\u5019\u9009\u89e3(\u79f0\u4e3a\u4e2a\u4f53)\u53ef\u62bd\u8c61\u8868\u793a\u4e3a\u67d3\u8272\u4f53, \u4f7f\u79cd\u7fa4\u5411\u66f4\u597d\u7684\u89e3\u8fdb\u5316. \u4f20\u7edf\u4e0a, \u89e3\u7528\u4e8c\u8fdb\u5236\u8868\u793a(\u5373 0 \u548c 1 \u7684\u4e32), \u4f46\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u8868\u793a\u65b9\u6cd5. \u8fdb\u5316\u4ece\u5b8c\u5168\u968f\u673a\u4e2a\u4f53\u7684\u79cd\u7fa4\u5f00\u59cb, \u4e4b\u540e\u4e00\u4ee3\u4e00\u4ee3\u53d1\u751f. \u5728\u6bcf\u4e00\u4ee3\u4e2d\u8bc4\u4ef7\u6574\u4e2a\u79cd\u7fa4\u7684\u9002\u5e94\u5ea6, \u4ece\u5f53\u524d\u79cd\u7fa4\u4e2d\u968f\u673a\u5730\u9009\u62e9\u591a\u4e2a\u4e2a\u4f53(\u57fa\u4e8e\u5b83\u4eec\u7684\u9002\u5e94\u5ea6), \u901a\u8fc7\u81ea\u7136\u9009\u62e9\u548c\u7a81\u53d8\u4ea7\u751f\u65b0\u7684\u751f\u547d\u79cd\u7fa4, \u8be5\u79cd\u7fa4\u5728\u7b97\u6cd5\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\u4e2d\u6210\u4e3a\u5f53\u524d\u79cd\u7fa4. \u9009\u62e9(select): \u6839\u636e\u5404\u4e2a\u4e2a\u4f53\u7684\u9002\u5e94\u5ea6, \u6309\u7167\u4e00\u5b9a\u89c4\u5219\u6216\u65b9\u6cd5, \u4ece\u7b2c t \u4ee3\u4e2a\u4f53 P(t) \u4e2d\u9009\u53d6\u4e00\u4e9b\u4f18\u826f\u4e2a\u4f53\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3 P(t+1) \u4e2d \u4ea4\u53c9(crossover): \u5c06\u7fa4\u4f53 P(t) \u5185\u7684\u4e2a\u4f53\u968f\u673a\u642d\u914d\u6210\u5bf9, \u5bf9\u6bcf\u4e00\u4e2a\u4e2a\u4f53, \u4ee5\u4e00\u5b9a\u6982\u7387 pc \u4ea4\u6362\u5b83\u4eec\u4e4b\u95f4\u7684\u90e8\u5206\u67d3\u8272\u4f53 \u53d8\u5f02(mutate): \u5bf9\u7fa4\u4f53 P(t) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e2a\u4f53, \u4ee5\u67d0\u4e00\u6982\u7387 pm \u6539\u53d8\u67d0\u4e00\u4e2a\u6216\u67d0\u4e00\u4e9b\u57fa\u56e0\u5ea7\u4e0a\u7684\u57fa\u56e0\u503c\u4e3a\u5176\u4ed6\u7684\u7b49\u4f4d\u57fa\u56e0 \u9057\u4f20\u7b97\u6cd5\u7684\u8fd0\u7b97\u8fc7\u7a0b: \u7fa4\u4f53 P(t) -> \u9009\u62e9\u8fd0\u7b97 -> \u4ea4\u53c9\u8fd0\u7b97 -> \u53d8\u5f02\u8fd0\u7b97 -> \u7fa4\u4f53 P(t+1) -> \u89e3\u7801 -> \u89e3\u96c6\u5408 -> \u4e2a\u4f53\u8bc4\u4ef7 \u57fa\u672c\u9057\u4f20\u7b97\u6cd5(SGA)\u7684\u6784\u6210\u8981\u7d20 \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u63d0\u4f9b\u4e09\u4e2a\u7b97\u5b50: \u9009\u62e9, \u4ea4\u53c9\u548c\u53d8\u5f02 \u67d3\u8272\u4f53\u7f16\u7801\u65b9\u6cd5: \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u4f7f\u7528\u56fa\u5b9a\u957f\u5ea6\u7684\u4e8c\u8fdb\u5236\u7b26\u53f7\u4e32\u8868\u793a\u7fa4\u4f53\u4e2d\u7684\u4e2a\u4f53, \u5176\u7b49\u4f4d\u57fa\u56e0\u7531 0, 1 \u7ec4\u6210. \u521d\u59cb\u7fa4\u4f53\u4e2d\u7684\u6bcf\u4e2a\u4e2a\u4f53\u7684\u57fa\u56e0\u503c\u53ef\u7528\u5747\u5300\u5206\u5e03\u7684\u968f\u673a\u6570\u4ea7\u751f. \u4e2a\u4f53\u9002\u5e94\u5ea6\u8bc4\u4ef7: \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u6309\u4e0e\u4e2a\u4f53\u9002\u5e94\u5ea6\u6210\u6b63\u6bd4\u7684\u6982\u7387\u6765\u51b3\u5b9a\u5f53\u524d\u7fa4\u4f53\u4e2d\u6bcf\u4e2a\u4e2a\u4f53\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7fa4\u4f53\u4e2d\u7684\u673a\u4f1a\u7684\u591a\u5c11. \u4e3a\u6b63\u786e\u8ba1\u7b97\u8fd9\u4e2a\u6982\u7387, \u8fd9\u8981\u6c42\u4e2a\u4f53\u9002\u5e94\u5ea6\u5927\u4e8e\u7b49\u4e8e 0. \u9057\u4f20\u7b97\u5b50 \u9009\u62e9\u7b97\u5b50\u4f7f\u7528\u6bd4\u4f8b\u9009\u62e9\u7b97\u5b50 \u4ea4\u53c9\u7b97\u5b50\u4f7f\u7528\u5355\u70b9\u4ea4\u53c9\u7b97\u5b50 \u53d8\u5f02\u7b97\u5b50\u4f7f\u7528\u57fa\u672c\u4f4d\u53d8\u5f02\u7b97\u5b50\u6216\u5747\u5300\u53d8\u5f02\u7b97\u5b50 \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u7684\u8fd0\u884c\u53c2\u6570 M: \u79cd\u7fa4\u5927\u5c0f, \u4e00\u822c\u53d6 20-100 T: \u7ec8\u6b62\u8fdb\u5316\u4ee3\u6570, \u4e00\u822c\u53d6 100-500 PC: \u4ea4\u53c9\u6982\u7387, \u4e00\u822c\u53d6 0.4-0.99 PM: \u53d8\u5f02\u6982\u7387, \u4e00\u822c\u53d6 0.0001-0.1 \u6bd4\u4f8b\u9009\u62e9\u7b97\u5b50 \u4e2a\u4f53\u88ab\u9009\u4e2d\u5e76\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u6982\u7387\u4e0e\u5176\u9002\u5e94\u5ea6\u5927\u5c0f\u6210\u6b63\u6bd4, \u5176\u8fd0\u7b97\u8fc7\u7a0b\u4e3a \u8ba1\u7b97\u7fa4\u4f53\u4e2d\u6240\u6709\u4e2a\u4f53\u7684\u9002\u5e94\u5ea6\u603b\u548c \u8ba1\u7b97\u6bcf\u4e2a\u4e2a\u4f53\u7684\u76f8\u5bf9\u9002\u5e94\u5ea6\u5927\u5c0f, \u5b83\u5373\u4e3a\u5404\u4e2a\u4e2a\u4f53\u88ab\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u6982\u7387 \u786e\u5b9a\u88ab\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u4e2a\u4f53 \u5355\u70b9\u4ea4\u53c9\u7b97\u5b50 \u5355\u70b9\u4ea4\u53c9\u7b97\u5b50\u662f\u6700\u57fa\u672c\u7684\u4ea4\u53c9\u7b97\u5b50, \u5176\u8fd0\u7b97\u8fc7\u7a0b\u4e3a \u5bf9\u7fa4\u4f53\u4e2d\u7684\u4e2a\u4f53\u8fdb\u884c\u4e24\u4e24\u968f\u673a\u914d\u5bf9 \u5bf9\u6bcf\u4e00\u5bf9\u914d\u5bf9\u7684\u4e2a\u4f53, \u8bbe\u7f6e\u5176\u67d0\u4e00\u57fa\u56e0\u5ea7\u4e4b\u540e\u7684\u4f4d\u7f6e\u4e3a\u4ea4\u53c9\u70b9 \u4f9d\u8bbe\u5b9a\u4ea4\u53c9\u6982\u7387, \u4ea4\u6362\u4ea4\u53c9\u70b9\u4e4b\u540e\u7684\u57fa\u56e0, \u4ece\u800c\u4ea7\u751f\u4e24\u4e2a\u65b0\u7684\u4e2a\u4f53 \u5355\u70b9\u4ea4\u53c9\u793a\u610f\u8fd0\u7b97\u5982\u4e0b: A: 10110111|00 crossover A': 10110111|11 B: 00011100|11 --------> B': 00011100|00 \u57fa\u672c\u4f4d\u53d8\u5f02\u7b97\u5b50 \u4f9d\u7167\u53d8\u5f02\u6982\u7387, \u5c06\u57fa\u56e0\u5ea7\u4e0a\u7684\u57fa\u56e0\u53d8\u4e3a\u968f\u673a\u7b49\u4f4d\u57fa\u56e0 \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u5728\u51fd\u6570\u4f18\u5316\u65b9\u9762\u7684\u5e94\u7528\u4e3e\u4f8b \u4f8b : \u6c42 $f(x)=sin(10x) \\times x + cos(2x) \\times x$ \u5728 [0, 5] \u533a\u95f4\u5185\u7684\u6700\u5927\u503c. \u89e3 : \u786e\u5b9a\u51b3\u7b56\u53d8\u91cf\u548c\u7ea6\u675f\u6761\u4ef6 \u786e\u5b9a\u4f18\u5316\u6a21\u578b \u786e\u5b9a\u7f16\u7801\u65b9\u5f0f. \u6b64\u5904\u4f7f\u7528 10 \u4f4d\u4e8c\u8fdb\u5236\u7f16\u7801\u8868\u793a $x \\in [0, 5]$ \u8303\u56f4 \u786e\u5b9a\u89e3\u7801\u65b9\u5f0f. \u5373\u5982\u4f55\u5c06 10 \u4f4d\u4e8c\u8fdb\u5236\u7f16\u7801\u8fd8\u539f\u4e3a\u53d8\u91cf $x$ \u786e\u5b9a\u4e2a\u4f53\u8bc4\u4ef7\u65b9\u6cd5. \u6b64\u5904\u76f4\u63a5\u4f7f\u7528 $f(x)$ \u4f5c\u4e3a\u4e2a\u4f53\u9002\u5e94\u5ea6\u8bc4\u4ef7. \u8bbe\u8ba1\u9057\u4f20\u7b97\u5b50 \u8bbe\u5b9a\u9057\u4f20\u7b97\u5b50\u8fd0\u884c\u53c2\u6570 Python \u5b9e\u73b0: import matplotlib.animation import matplotlib.pyplot as plt import numpy as np plt.style.use('seaborn') class GA: def __init__(self): self.pop_size = 80 self.max_iter = 20 self.pc = 0.6 self.pm = 0.001 self.dna_size = 10 self.x_bound = [0, 5] def f(self, x): return np.sin(10 * x) * x + np.cos(2 * x) * x def encode(self, x): a = x / (self.x_bound[1] - self.x_bound[0]) * (2 ** self.dna_size - 1) a = int(a) return np.array(list(np.binary_repr(a).zfill(self.dna_size))).astype(np.uint8) def decode(self, per): return per.dot(1 << np.arange(self.dna_size)[::-1]) / (2**self.dna_size - 1) * self.x_bound[1] def perfit(self, per): x = self.decode(per) return self.f(x) def getfit(self, pop): x = self.decode(pop) r = self.f(x) return r def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.001 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) pop = pop[idx] return pop def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = np.random.randint(2, size=(self.pop_size, self.dna_size)) pop_fit = self.getfit(pop) yield pop, pop_fit for _ in range(self.max_iter - 1): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() gaiter = ga.evolve() fig, ax = plt.subplots() ax.set_xlim(-0.2, 5.2) ax.set_ylim(-10, 7.5) x = np.linspace(*ga.x_bound, 200) ax.plot(x, ga.f(x)) sca = ax.scatter([], [], s=200, c='#CF6FC1', alpha=0.5) def update(*args): pop, _ = next(gaiter) fx = ga.decode(pop) fv = ga.f(fx) sca.set_offsets(np.column_stack((fx, fv))) # plt.savefig(f'/tmp/img/{args[0]+1:0>2}.png') ani = matplotlib.animation.FuncAnimation(fig, update, interval=200, repeat=False) plt.show()","title":"\u9057\u4f20\u7b97\u6cd5-\u7b80\u5355\u9057\u4f20\u7b97\u6cd5"},{"location":"content/daze/ga/sga/#_1","text":"\u9057\u4f20\u7b97\u6cd5(\u82f1\u8bed: Genetic Algorithm (GA)) \u662f\u8ba1\u7b97\u6570\u5b66\u4e2d\u7528\u4e8e\u89e3\u51b3\u6700\u4f73\u5316\u7684\u641c\u7d22\u7b97\u6cd5, \u662f\u8fdb\u5316\u7b97\u6cd5\u7684\u4e00\u79cd. \u8fdb\u5316\u7b97\u6cd5\u6700\u521d\u662f\u501f\u9274\u4e86\u8fdb\u5316\u751f\u7269\u5b66\u4e2d\u7684\u4e00\u4e9b\u73b0\u8c61\u800c\u53d1\u5c55\u8d77\u6765\u7684, \u8fd9\u4e9b\u73b0\u8c61\u5305\u62ec\u9057\u4f20, \u7a81\u53d8, \u81ea\u7136\u9009\u62e9\u4ee5\u53ca\u6742\u4ea4\u7b49. \u9057\u4f20\u7b97\u6cd5\u901a\u5e38\u5b9e\u73b0\u65b9\u5f0f\u4e3a\u4e00\u79cd\u8ba1\u7b97\u673a\u6a21\u62df. \u5bf9\u4e8e\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898, \u4e00\u5b9a\u6570\u91cf\u7684\u5019\u9009\u89e3(\u79f0\u4e3a\u4e2a\u4f53)\u53ef\u62bd\u8c61\u8868\u793a\u4e3a\u67d3\u8272\u4f53, \u4f7f\u79cd\u7fa4\u5411\u66f4\u597d\u7684\u89e3\u8fdb\u5316. \u4f20\u7edf\u4e0a, \u89e3\u7528\u4e8c\u8fdb\u5236\u8868\u793a(\u5373 0 \u548c 1 \u7684\u4e32), \u4f46\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u8868\u793a\u65b9\u6cd5. \u8fdb\u5316\u4ece\u5b8c\u5168\u968f\u673a\u4e2a\u4f53\u7684\u79cd\u7fa4\u5f00\u59cb, \u4e4b\u540e\u4e00\u4ee3\u4e00\u4ee3\u53d1\u751f. \u5728\u6bcf\u4e00\u4ee3\u4e2d\u8bc4\u4ef7\u6574\u4e2a\u79cd\u7fa4\u7684\u9002\u5e94\u5ea6, \u4ece\u5f53\u524d\u79cd\u7fa4\u4e2d\u968f\u673a\u5730\u9009\u62e9\u591a\u4e2a\u4e2a\u4f53(\u57fa\u4e8e\u5b83\u4eec\u7684\u9002\u5e94\u5ea6), \u901a\u8fc7\u81ea\u7136\u9009\u62e9\u548c\u7a81\u53d8\u4ea7\u751f\u65b0\u7684\u751f\u547d\u79cd\u7fa4, \u8be5\u79cd\u7fa4\u5728\u7b97\u6cd5\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\u4e2d\u6210\u4e3a\u5f53\u524d\u79cd\u7fa4. \u9009\u62e9(select): \u6839\u636e\u5404\u4e2a\u4e2a\u4f53\u7684\u9002\u5e94\u5ea6, \u6309\u7167\u4e00\u5b9a\u89c4\u5219\u6216\u65b9\u6cd5, \u4ece\u7b2c t \u4ee3\u4e2a\u4f53 P(t) \u4e2d\u9009\u53d6\u4e00\u4e9b\u4f18\u826f\u4e2a\u4f53\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3 P(t+1) \u4e2d \u4ea4\u53c9(crossover): \u5c06\u7fa4\u4f53 P(t) \u5185\u7684\u4e2a\u4f53\u968f\u673a\u642d\u914d\u6210\u5bf9, \u5bf9\u6bcf\u4e00\u4e2a\u4e2a\u4f53, \u4ee5\u4e00\u5b9a\u6982\u7387 pc \u4ea4\u6362\u5b83\u4eec\u4e4b\u95f4\u7684\u90e8\u5206\u67d3\u8272\u4f53 \u53d8\u5f02(mutate): \u5bf9\u7fa4\u4f53 P(t) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e2a\u4f53, \u4ee5\u67d0\u4e00\u6982\u7387 pm \u6539\u53d8\u67d0\u4e00\u4e2a\u6216\u67d0\u4e00\u4e9b\u57fa\u56e0\u5ea7\u4e0a\u7684\u57fa\u56e0\u503c\u4e3a\u5176\u4ed6\u7684\u7b49\u4f4d\u57fa\u56e0 \u9057\u4f20\u7b97\u6cd5\u7684\u8fd0\u7b97\u8fc7\u7a0b: \u7fa4\u4f53 P(t) -> \u9009\u62e9\u8fd0\u7b97 -> \u4ea4\u53c9\u8fd0\u7b97 -> \u53d8\u5f02\u8fd0\u7b97 -> \u7fa4\u4f53 P(t+1) -> \u89e3\u7801 -> \u89e3\u96c6\u5408 -> \u4e2a\u4f53\u8bc4\u4ef7","title":"\u9057\u4f20\u7b97\u6cd5\u7b80\u8ff0"},{"location":"content/daze/ga/sga/#sga","text":"\u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u63d0\u4f9b\u4e09\u4e2a\u7b97\u5b50: \u9009\u62e9, \u4ea4\u53c9\u548c\u53d8\u5f02 \u67d3\u8272\u4f53\u7f16\u7801\u65b9\u6cd5: \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u4f7f\u7528\u56fa\u5b9a\u957f\u5ea6\u7684\u4e8c\u8fdb\u5236\u7b26\u53f7\u4e32\u8868\u793a\u7fa4\u4f53\u4e2d\u7684\u4e2a\u4f53, \u5176\u7b49\u4f4d\u57fa\u56e0\u7531 0, 1 \u7ec4\u6210. \u521d\u59cb\u7fa4\u4f53\u4e2d\u7684\u6bcf\u4e2a\u4e2a\u4f53\u7684\u57fa\u56e0\u503c\u53ef\u7528\u5747\u5300\u5206\u5e03\u7684\u968f\u673a\u6570\u4ea7\u751f. \u4e2a\u4f53\u9002\u5e94\u5ea6\u8bc4\u4ef7: \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u6309\u4e0e\u4e2a\u4f53\u9002\u5e94\u5ea6\u6210\u6b63\u6bd4\u7684\u6982\u7387\u6765\u51b3\u5b9a\u5f53\u524d\u7fa4\u4f53\u4e2d\u6bcf\u4e2a\u4e2a\u4f53\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7fa4\u4f53\u4e2d\u7684\u673a\u4f1a\u7684\u591a\u5c11. \u4e3a\u6b63\u786e\u8ba1\u7b97\u8fd9\u4e2a\u6982\u7387, \u8fd9\u8981\u6c42\u4e2a\u4f53\u9002\u5e94\u5ea6\u5927\u4e8e\u7b49\u4e8e 0. \u9057\u4f20\u7b97\u5b50 \u9009\u62e9\u7b97\u5b50\u4f7f\u7528\u6bd4\u4f8b\u9009\u62e9\u7b97\u5b50 \u4ea4\u53c9\u7b97\u5b50\u4f7f\u7528\u5355\u70b9\u4ea4\u53c9\u7b97\u5b50 \u53d8\u5f02\u7b97\u5b50\u4f7f\u7528\u57fa\u672c\u4f4d\u53d8\u5f02\u7b97\u5b50\u6216\u5747\u5300\u53d8\u5f02\u7b97\u5b50 \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u7684\u8fd0\u884c\u53c2\u6570 M: \u79cd\u7fa4\u5927\u5c0f, \u4e00\u822c\u53d6 20-100 T: \u7ec8\u6b62\u8fdb\u5316\u4ee3\u6570, \u4e00\u822c\u53d6 100-500 PC: \u4ea4\u53c9\u6982\u7387, \u4e00\u822c\u53d6 0.4-0.99 PM: \u53d8\u5f02\u6982\u7387, \u4e00\u822c\u53d6 0.0001-0.1 \u6bd4\u4f8b\u9009\u62e9\u7b97\u5b50 \u4e2a\u4f53\u88ab\u9009\u4e2d\u5e76\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u6982\u7387\u4e0e\u5176\u9002\u5e94\u5ea6\u5927\u5c0f\u6210\u6b63\u6bd4, \u5176\u8fd0\u7b97\u8fc7\u7a0b\u4e3a \u8ba1\u7b97\u7fa4\u4f53\u4e2d\u6240\u6709\u4e2a\u4f53\u7684\u9002\u5e94\u5ea6\u603b\u548c \u8ba1\u7b97\u6bcf\u4e2a\u4e2a\u4f53\u7684\u76f8\u5bf9\u9002\u5e94\u5ea6\u5927\u5c0f, \u5b83\u5373\u4e3a\u5404\u4e2a\u4e2a\u4f53\u88ab\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u6982\u7387 \u786e\u5b9a\u88ab\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u4e2a\u4f53 \u5355\u70b9\u4ea4\u53c9\u7b97\u5b50 \u5355\u70b9\u4ea4\u53c9\u7b97\u5b50\u662f\u6700\u57fa\u672c\u7684\u4ea4\u53c9\u7b97\u5b50, \u5176\u8fd0\u7b97\u8fc7\u7a0b\u4e3a \u5bf9\u7fa4\u4f53\u4e2d\u7684\u4e2a\u4f53\u8fdb\u884c\u4e24\u4e24\u968f\u673a\u914d\u5bf9 \u5bf9\u6bcf\u4e00\u5bf9\u914d\u5bf9\u7684\u4e2a\u4f53, \u8bbe\u7f6e\u5176\u67d0\u4e00\u57fa\u56e0\u5ea7\u4e4b\u540e\u7684\u4f4d\u7f6e\u4e3a\u4ea4\u53c9\u70b9 \u4f9d\u8bbe\u5b9a\u4ea4\u53c9\u6982\u7387, \u4ea4\u6362\u4ea4\u53c9\u70b9\u4e4b\u540e\u7684\u57fa\u56e0, \u4ece\u800c\u4ea7\u751f\u4e24\u4e2a\u65b0\u7684\u4e2a\u4f53 \u5355\u70b9\u4ea4\u53c9\u793a\u610f\u8fd0\u7b97\u5982\u4e0b: A: 10110111|00 crossover A': 10110111|11 B: 00011100|11 --------> B': 00011100|00 \u57fa\u672c\u4f4d\u53d8\u5f02\u7b97\u5b50 \u4f9d\u7167\u53d8\u5f02\u6982\u7387, \u5c06\u57fa\u56e0\u5ea7\u4e0a\u7684\u57fa\u56e0\u53d8\u4e3a\u968f\u673a\u7b49\u4f4d\u57fa\u56e0","title":"\u57fa\u672c\u9057\u4f20\u7b97\u6cd5(SGA)\u7684\u6784\u6210\u8981\u7d20"},{"location":"content/daze/ga/sga/#_2","text":"\u4f8b : \u6c42 $f(x)=sin(10x) \\times x + cos(2x) \\times x$ \u5728 [0, 5] \u533a\u95f4\u5185\u7684\u6700\u5927\u503c. \u89e3 : \u786e\u5b9a\u51b3\u7b56\u53d8\u91cf\u548c\u7ea6\u675f\u6761\u4ef6 \u786e\u5b9a\u4f18\u5316\u6a21\u578b \u786e\u5b9a\u7f16\u7801\u65b9\u5f0f. \u6b64\u5904\u4f7f\u7528 10 \u4f4d\u4e8c\u8fdb\u5236\u7f16\u7801\u8868\u793a $x \\in [0, 5]$ \u8303\u56f4 \u786e\u5b9a\u89e3\u7801\u65b9\u5f0f. \u5373\u5982\u4f55\u5c06 10 \u4f4d\u4e8c\u8fdb\u5236\u7f16\u7801\u8fd8\u539f\u4e3a\u53d8\u91cf $x$ \u786e\u5b9a\u4e2a\u4f53\u8bc4\u4ef7\u65b9\u6cd5. \u6b64\u5904\u76f4\u63a5\u4f7f\u7528 $f(x)$ \u4f5c\u4e3a\u4e2a\u4f53\u9002\u5e94\u5ea6\u8bc4\u4ef7. \u8bbe\u8ba1\u9057\u4f20\u7b97\u5b50 \u8bbe\u5b9a\u9057\u4f20\u7b97\u5b50\u8fd0\u884c\u53c2\u6570 Python \u5b9e\u73b0: import matplotlib.animation import matplotlib.pyplot as plt import numpy as np plt.style.use('seaborn') class GA: def __init__(self): self.pop_size = 80 self.max_iter = 20 self.pc = 0.6 self.pm = 0.001 self.dna_size = 10 self.x_bound = [0, 5] def f(self, x): return np.sin(10 * x) * x + np.cos(2 * x) * x def encode(self, x): a = x / (self.x_bound[1] - self.x_bound[0]) * (2 ** self.dna_size - 1) a = int(a) return np.array(list(np.binary_repr(a).zfill(self.dna_size))).astype(np.uint8) def decode(self, per): return per.dot(1 << np.arange(self.dna_size)[::-1]) / (2**self.dna_size - 1) * self.x_bound[1] def perfit(self, per): x = self.decode(per) return self.f(x) def getfit(self, pop): x = self.decode(pop) r = self.f(x) return r def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.001 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) pop = pop[idx] return pop def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = np.random.randint(2, size=(self.pop_size, self.dna_size)) pop_fit = self.getfit(pop) yield pop, pop_fit for _ in range(self.max_iter - 1): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() gaiter = ga.evolve() fig, ax = plt.subplots() ax.set_xlim(-0.2, 5.2) ax.set_ylim(-10, 7.5) x = np.linspace(*ga.x_bound, 200) ax.plot(x, ga.f(x)) sca = ax.scatter([], [], s=200, c='#CF6FC1', alpha=0.5) def update(*args): pop, _ = next(gaiter) fx = ga.decode(pop) fv = ga.f(fx) sca.set_offsets(np.column_stack((fx, fv))) # plt.savefig(f'/tmp/img/{args[0]+1:0>2}.png') ani = matplotlib.animation.FuncAnimation(fig, update, interval=200, repeat=False) plt.show()","title":"\u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u5728\u51fd\u6570\u4f18\u5316\u65b9\u9762\u7684\u5e94\u7528\u4e3e\u4f8b"},{"location":"content/daze/ga/sga_optret/","text":"\u6700\u4f18\u4fdd\u7559\u7b56\u7565 \u6700\u4f18\u4fdd\u7559\u7b56\u7565\u6307 \u5c06\u7fa4\u4f53\u4e2d\u6700\u4f18\u7684\u4e00\u90e8\u5206\u4e2a\u4f53\u4e0d\u7ecf\u8fc7\u9009\u62e9, \u4ea4\u53c9\u548c\u53d8\u5f02\u64cd\u4f5c, \u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u4ee3 , \u4ee5\u907f\u514d\u4f18\u79c0\u4e2a\u4f53\u635f\u5931. \u6700\u4f18\u4fdd\u7559\u7b56\u7565\u7684\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b: \u627e\u51fa\u5f53\u524d\u7fa4\u4f53\u4e2d\u9002\u5e94\u5ea6\u6700\u9ad8\u548c\u6700\u4f4e\u7684\u4e2a\u4f53 \u82e5\u5f53\u524d\u7fa4\u4f53\u4e2d\u6700\u4f18\u4e2a\u4f53\u6bd4\u5386\u53f2\u6700\u4f18\u4e2a\u4f53\u9002\u5e94\u5ea6\u8fd8\u9ad8, \u5219\u4ee5\u5f53\u524d\u7fa4\u4f53\u6700\u4f18\u4e2a\u4f53\u4f5c\u4e3a\u5386\u53f2\u6700\u4f18\u4e2a\u4f53; \u5426\u5219\u4f7f\u7528\u5386\u53f2\u6700\u4f18\u4e2a\u4f53\u66ff\u6362\u5f53\u524d\u7fa4\u4f53\u6700\u5dee\u4e2a\u4f53 \u6267\u884c\u540e\u7eed\u9057\u4f20\u7b97\u5b50(\u9009\u62e9, \u4ea4\u53c9, \u53d8\u5f02\u7b49) \u4ee3\u7801\u5b9e\u73b0 \u590d\u5236\u4e0a\u8282\u4ee3\u7801, \u589e\u52a0\u4f5c\u7528\u4e8e evolve \u51fd\u6570\u7684 optret \u88c5\u9970\u5668 \u8c03\u6574\u79cd\u7fa4\u5927\u5c0f\u4e3a 4, \u53d8\u5f02\u6982\u7387\u4e3a 0.5 import matplotlib.animation import matplotlib.pyplot as plt import numpy as np plt.style.use('seaborn') class GA: def __init__(self): self.pop_size = 4 self.max_iter = 20 self.pc = 0.6 self.pm = 0.5 self.dna_size = 10 self.x_bound = [0, 5] def f(self, x): return np.sin(10 * x) * x + np.cos(2 * x) * x def encode(self, x): a = x / (self.x_bound[1] - self.x_bound[0]) * (2 ** self.dna_size - 1) a = int(a) return np.array(list(np.binary_repr(a).zfill(self.dna_size))).astype(np.uint8) def decode(self, per): return per.dot(1 << np.arange(self.dna_size)[::-1]) / (2**self.dna_size - 1) * self.x_bound[1] def perfit(self, per): x = self.decode(per) return self.f(x) def getfit(self, pop): x = self.decode(pop) r = self.f(x) return r def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.001 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) pop = pop[idx] return pop def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = np.random.randint(2, size=(self.pop_size, self.dna_size)) pop_fit = self.getfit(pop) yield pop, pop_fit for _ in range(self.max_iter - 1): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() gaiter = ga.optret(ga.evolve)() fig, ax = plt.subplots() ax.set_xlim(-0.2, 5.2) ax.set_ylim(-10, 7.5) x = np.linspace(*ga.x_bound, 200) ax.plot(x, ga.f(x)) sca1 = ax.scatter([], [], s=200, c='#CF6FC1', alpha=0.5) sca2 = ax.scatter([], [], s=300, c='#ED8826', alpha=0.5) def update(*args): pop, _ = next(gaiter) fx = ga.decode(pop) fv = ga.f(fx) i = np.argmax(fv) sca1.set_offsets(np.column_stack((fx, fv))) sca2.set_offsets(np.column_stack(([fx[i]], fv[i]))) # plt.savefig(f'/tmp/img/{args[0]+1:0>2}.png') ani = matplotlib.animation.FuncAnimation(fig, update, interval=200, repeat=False) plt.show()","title":"\u9057\u4f20\u7b97\u6cd5-\u6700\u4f18\u4fdd\u7559\u7b56\u7565"},{"location":"content/daze/ga/sga_optret/#_1","text":"\u6700\u4f18\u4fdd\u7559\u7b56\u7565\u6307 \u5c06\u7fa4\u4f53\u4e2d\u6700\u4f18\u7684\u4e00\u90e8\u5206\u4e2a\u4f53\u4e0d\u7ecf\u8fc7\u9009\u62e9, \u4ea4\u53c9\u548c\u53d8\u5f02\u64cd\u4f5c, \u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u4ee3 , \u4ee5\u907f\u514d\u4f18\u79c0\u4e2a\u4f53\u635f\u5931. \u6700\u4f18\u4fdd\u7559\u7b56\u7565\u7684\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b: \u627e\u51fa\u5f53\u524d\u7fa4\u4f53\u4e2d\u9002\u5e94\u5ea6\u6700\u9ad8\u548c\u6700\u4f4e\u7684\u4e2a\u4f53 \u82e5\u5f53\u524d\u7fa4\u4f53\u4e2d\u6700\u4f18\u4e2a\u4f53\u6bd4\u5386\u53f2\u6700\u4f18\u4e2a\u4f53\u9002\u5e94\u5ea6\u8fd8\u9ad8, \u5219\u4ee5\u5f53\u524d\u7fa4\u4f53\u6700\u4f18\u4e2a\u4f53\u4f5c\u4e3a\u5386\u53f2\u6700\u4f18\u4e2a\u4f53; \u5426\u5219\u4f7f\u7528\u5386\u53f2\u6700\u4f18\u4e2a\u4f53\u66ff\u6362\u5f53\u524d\u7fa4\u4f53\u6700\u5dee\u4e2a\u4f53 \u6267\u884c\u540e\u7eed\u9057\u4f20\u7b97\u5b50(\u9009\u62e9, \u4ea4\u53c9, \u53d8\u5f02\u7b49)","title":"\u6700\u4f18\u4fdd\u7559\u7b56\u7565"},{"location":"content/daze/ga/sga_optret/#_2","text":"\u590d\u5236\u4e0a\u8282\u4ee3\u7801, \u589e\u52a0\u4f5c\u7528\u4e8e evolve \u51fd\u6570\u7684 optret \u88c5\u9970\u5668 \u8c03\u6574\u79cd\u7fa4\u5927\u5c0f\u4e3a 4, \u53d8\u5f02\u6982\u7387\u4e3a 0.5 import matplotlib.animation import matplotlib.pyplot as plt import numpy as np plt.style.use('seaborn') class GA: def __init__(self): self.pop_size = 4 self.max_iter = 20 self.pc = 0.6 self.pm = 0.5 self.dna_size = 10 self.x_bound = [0, 5] def f(self, x): return np.sin(10 * x) * x + np.cos(2 * x) * x def encode(self, x): a = x / (self.x_bound[1] - self.x_bound[0]) * (2 ** self.dna_size - 1) a = int(a) return np.array(list(np.binary_repr(a).zfill(self.dna_size))).astype(np.uint8) def decode(self, per): return per.dot(1 << np.arange(self.dna_size)[::-1]) / (2**self.dna_size - 1) * self.x_bound[1] def perfit(self, per): x = self.decode(per) return self.f(x) def getfit(self, pop): x = self.decode(pop) r = self.f(x) return r def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.001 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) pop = pop[idx] return pop def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = np.random.randint(2, size=(self.pop_size, self.dna_size)) pop_fit = self.getfit(pop) yield pop, pop_fit for _ in range(self.max_iter - 1): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() gaiter = ga.optret(ga.evolve)() fig, ax = plt.subplots() ax.set_xlim(-0.2, 5.2) ax.set_ylim(-10, 7.5) x = np.linspace(*ga.x_bound, 200) ax.plot(x, ga.f(x)) sca1 = ax.scatter([], [], s=200, c='#CF6FC1', alpha=0.5) sca2 = ax.scatter([], [], s=300, c='#ED8826', alpha=0.5) def update(*args): pop, _ = next(gaiter) fx = ga.decode(pop) fv = ga.f(fx) i = np.argmax(fv) sca1.set_offsets(np.column_stack((fx, fv))) sca2.set_offsets(np.column_stack(([fx[i]], fv[i]))) # plt.savefig(f'/tmp/img/{args[0]+1:0>2}.png') ani = matplotlib.animation.FuncAnimation(fig, update, interval=200, repeat=False) plt.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/game_of_life/overview/","text":"Conway's Game of Life \u5eb7\u5a01\u751f\u547d\u6e38\u620f(Conway's Game of Life), \u53c8\u79f0\u5eb7\u5a01\u751f\u547d\u68cb, \u662f\u82f1\u56fd\u6570\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u4f55\u987f\u00b7\u5eb7\u5a01\u57281970\u5e74\u53d1\u660e\u7684\u7ec6\u80de\u81ea\u52a8\u673a. \u53ef\u4ee5\u968f\u65f6\u521b\u5efa\u6216\u9500\u6bc1\u4e00\u4e2a\u7ec6\u80de, \u53ea\u9700\u8981\u8f7b\u70b9\u68cb\u76d8\u5bf9\u5e94\u7684\u7f51\u683c. \u70b9\u51fb \u968f\u673a \u6309\u94ae, \u5c06\u4ee5 \u6c64 \u6a21\u5f0f\u5f00\u59cb\u6e38\u620f. \u8be5\u6a21\u5f0f\u4e0b\u7ec6\u80de\u5c06\u4ee5\u7ea6\u5b9a\u7684\u6982\u7387\u968f\u673a\u521d\u59cb\u5316\u5728\u68cb\u76d8\u4e0a. \u89c4\u5219 \u751f\u547d\u6e38\u620f\u4e2d, \u5bf9\u4e8e\u4efb\u610f\u7ec6\u80de, \u89c4\u5219\u5982\u4e0b: \u6bcf\u4e2a\u7ec6\u80de\u6709\u4e24\u79cd\u72b6\u6001: \u5b58\u6d3b\u6216\u6b7b\u4ea1, \u6bcf\u4e2a\u7ec6\u80de\u4e0e\u4ee5\u81ea\u8eab\u4e3a\u4e2d\u5fc3\u7684\u5468\u56f4\u516b\u683c\u7ec6\u80de\u4ea7\u751f\u4e92\u52a8. \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u4f4e\u4e8e2\u4e2a(\u4e0d\u5305\u542b2\u4e2a)\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u6b7b\u4ea1\u72b6\u6001.(\u6a21\u62df\u751f\u547d\u6570\u91cf\u7a00\u5c11) \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67092\u4e2a\u62163\u4e2a\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u4fdd\u6301\u539f\u6837. \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67093\u4e2a\u4ee5\u4e0a\u7684\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u6b7b\u4ea1\u72b6\u6001.(\u6a21\u62df\u751f\u547d\u6570\u91cf\u8fc7\u591a) \u5f53\u524d\u7ec6\u80de\u4e3a\u6b7b\u4ea1\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67093\u4e2a\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u5b58\u6d3b\u72b6\u6001.(\u6a21\u62df\u7e41\u6b96) \u53ef\u4ee5\u628a\u6700\u521d\u7684\u7ec6\u80de\u7ed3\u6784\u5b9a\u4e49\u4e3a\u79cd\u5b50, \u5f53\u6240\u6709\u5728\u79cd\u5b50\u4e2d\u7684\u7ec6\u80de\u540c\u65f6\u88ab\u4ee5\u4e0a\u89c4\u5219\u5904\u7406\u540e, \u53ef\u4ee5\u5f97\u5230\u7b2c\u4e00\u4ee3\u7ec6\u80de\u56fe. \u6309\u89c4\u5219\u7ee7\u7eed\u5904\u7406\u5f53\u524d\u7684\u7ec6\u80de\u56fe, \u53ef\u4ee5\u5f97\u5230\u4e0b\u4e00\u4ee3\u7684\u7ec6\u80de\u56fe, \u5468\u800c\u590d\u59cb. \u6982\u8ff0 \u751f\u547d\u6e38\u620f\u662f\u4e00\u4e2a\u96f6\u73a9\u5bb6\u6e38\u620f. \u5b83\u5305\u62ec\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u5f62\u4e16\u754c, \u8fd9\u4e2a\u4e16\u754c\u4e2d\u7684\u6bcf\u4e2a\u65b9\u683c\u5c45\u4f4f\u7740\u4e00\u4e2a\u6d3b\u7740\u7684\u6216\u6b7b\u4e86\u7684\u7ec6\u80de. \u4e00\u4e2a\u7ec6\u80de\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u751f\u6b7b\u53d6\u51b3\u4e8e\u76f8\u90bb\u516b\u4e2a\u65b9\u683c\u4e2d\u6d3b\u7740\u7684\u6216\u6b7b\u4e86\u7684\u7ec6\u80de\u7684\u6570\u91cf. \u5982\u679c\u76f8\u90bb\u65b9\u683c\u6d3b\u7740\u7684\u7ec6\u80de\u6570\u91cf\u8fc7\u591a, \u8fd9\u4e2a\u7ec6\u80de\u4f1a\u56e0\u4e3a\u8d44\u6e90\u532e\u4e4f\u800c\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u6b7b\u53bb; \u76f8\u53cd, \u5982\u679c\u5468\u56f4\u6d3b\u7ec6\u80de\u8fc7\u5c11, \u8fd9\u4e2a\u7ec6\u80de\u4f1a\u56e0\u592a\u5b64\u5355\u800c\u6b7b\u53bb. \u5b9e\u9645\u4e2d, \u73a9\u5bb6\u53ef\u4ee5\u8bbe\u5b9a\u5468\u56f4\u6d3b\u7ec6\u80de\u7684\u6570\u76ee\u600e\u6837\u65f6\u624d\u9002\u5b9c\u8be5\u7ec6\u80de\u7684\u751f\u5b58. \u5982\u679c\u8fd9\u4e2a\u6570\u76ee\u8bbe\u5b9a\u8fc7\u9ad8, \u4e16\u754c\u4e2d\u7684\u5927\u90e8\u5206\u7ec6\u80de\u4f1a\u56e0\u4e3a\u627e\u4e0d\u5230\u592a\u591a\u7684\u6d3b\u7684\u90bb\u5c45\u800c\u6b7b\u53bb, \u76f4\u5230\u6574\u4e2a\u4e16\u754c\u90fd\u6ca1\u6709\u751f\u547d; \u5982\u679c\u8fd9\u4e2a\u6570\u76ee\u8bbe\u5b9a\u8fc7\u4f4e, \u4e16\u754c\u4e2d\u53c8\u4f1a\u88ab\u751f\u547d\u5145\u6ee1\u800c\u6ca1\u6709\u4ec0\u4e48\u53d8\u5316. \u5b9e\u9645\u4e2d, \u8fd9\u4e2a\u6570\u76ee\u4e00\u822c\u9009\u53d62\u6216\u80053; \u8fd9\u6837\u6574\u4e2a\u751f\u547d\u4e16\u754c\u624d\u4e0d\u81f3\u4e8e\u592a\u8fc7\u8352\u51c9\u6216\u62e5\u6324, \u800c\u662f\u4e00\u79cd\u52a8\u6001\u7684\u5e73\u8861. \u8fd9\u6837\u7684\u8bdd, \u6e38\u620f\u7684\u89c4\u5219\u5c31\u662f: \u5f53\u4e00\u4e2a\u65b9\u683c\u5468\u56f4\u67092\u62163\u4e2a\u6d3b\u7ec6\u80de\u65f6, \u65b9\u683c\u4e2d\u7684\u6d3b\u7ec6\u80de\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u7ee7\u7eed\u5b58\u6d3b; \u5373\u4f7f\u8fd9\u4e2a\u65f6\u523b\u65b9\u683c\u4e2d\u6ca1\u6709\u6d3b\u7ec6\u80de, \u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u4e5f\u4f1a\"\u8bde\u751f\"\u6d3b\u7ec6\u80de. \u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d, \u8fd8\u53ef\u4ee5\u8bbe\u5b9a\u4e00\u4e9b\u66f4\u52a0\u590d\u6742\u7684\u89c4\u5219, \u4f8b\u5982\u5f53\u524d\u65b9\u683c\u7684\u72b6\u51b5\u4e0d\u4ec5\u7531\u7236\u4e00\u4ee3\u51b3\u5b9a, \u800c\u4e14\u8fd8\u8003\u8651\u7956\u7236\u4e00\u4ee3\u7684\u60c5\u51b5. \u73a9\u5bb6\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u8fd9\u4e2a\u4e16\u754c\u7684\"\u4e0a\u5e1d\", \u968f\u610f\u8bbe\u5b9a\u67d0\u4e2a\u65b9\u683c\u7ec6\u80de\u7684\u6b7b\u6d3b, \u4ee5\u89c2\u5bdf\u5bf9\u4e16\u754c\u7684\u5f71\u54cd. \u5728\u6e38\u620f\u7684\u8fdb\u884c\u4e2d, \u6742\u4e71\u65e0\u5e8f\u7684\u7ec6\u80de\u4f1a\u9010\u6e10\u6f14\u5316\u51fa\u5404\u79cd\u7cbe\u81f4\u3001\u6709\u5f62\u7684\u7ed3\u6784; \u8fd9\u4e9b\u7ed3\u6784\u5f80\u5f80\u6709\u5f88\u597d\u7684\u5bf9\u79f0\u6027, \u800c\u4e14\u6bcf\u4e00\u4ee3\u90fd\u5728\u53d8\u5316\u5f62\u72b6. \u4e00\u4e9b\u5f62\u72b6\u5df2\u7ecf\u9501\u5b9a, \u4e0d\u4f1a\u9010\u4ee3\u53d8\u5316. \u6709\u65f6, \u4e00\u4e9b\u5df2\u7ecf\u6210\u5f62\u7684\u7ed3\u6784\u4f1a\u56e0\u4e3a\u4e00\u4e9b\u65e0\u5e8f\u7ec6\u80de\u7684\"\u5165\u4fb5\"\u800c\u88ab\u7834\u574f. \u4f46\u662f\u5f62\u72b6\u548c\u79e9\u5e8f\u7ecf\u5e38\u80fd\u4ece\u6742\u4e71\u4e2d\u4ea7\u751f\u51fa\u6765. \u53c2\u8003 [1] \u7ef4\u57fa: \u5eb7\u5a01\u751f\u547d\u6e38\u620f https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life [2] \u7ef4\u57fa: \u7ec6\u80de\u81ea\u52a8\u673a https://zh.wikipedia.org/wiki/%E7%B4%B0%E8%83%9E%E8%87%AA%E5%8B%95%E6%A9%9F","title":"\u751f\u547d\u6e38\u620f"},{"location":"content/daze/game_of_life/overview/#conways-game-of-life","text":"\u5eb7\u5a01\u751f\u547d\u6e38\u620f(Conway's Game of Life), \u53c8\u79f0\u5eb7\u5a01\u751f\u547d\u68cb, \u662f\u82f1\u56fd\u6570\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u4f55\u987f\u00b7\u5eb7\u5a01\u57281970\u5e74\u53d1\u660e\u7684\u7ec6\u80de\u81ea\u52a8\u673a. \u53ef\u4ee5\u968f\u65f6\u521b\u5efa\u6216\u9500\u6bc1\u4e00\u4e2a\u7ec6\u80de, \u53ea\u9700\u8981\u8f7b\u70b9\u68cb\u76d8\u5bf9\u5e94\u7684\u7f51\u683c. \u70b9\u51fb \u968f\u673a \u6309\u94ae, \u5c06\u4ee5 \u6c64 \u6a21\u5f0f\u5f00\u59cb\u6e38\u620f. \u8be5\u6a21\u5f0f\u4e0b\u7ec6\u80de\u5c06\u4ee5\u7ea6\u5b9a\u7684\u6982\u7387\u968f\u673a\u521d\u59cb\u5316\u5728\u68cb\u76d8\u4e0a.","title":"Conway's Game of Life"},{"location":"content/daze/game_of_life/overview/#_1","text":"\u751f\u547d\u6e38\u620f\u4e2d, \u5bf9\u4e8e\u4efb\u610f\u7ec6\u80de, \u89c4\u5219\u5982\u4e0b: \u6bcf\u4e2a\u7ec6\u80de\u6709\u4e24\u79cd\u72b6\u6001: \u5b58\u6d3b\u6216\u6b7b\u4ea1, \u6bcf\u4e2a\u7ec6\u80de\u4e0e\u4ee5\u81ea\u8eab\u4e3a\u4e2d\u5fc3\u7684\u5468\u56f4\u516b\u683c\u7ec6\u80de\u4ea7\u751f\u4e92\u52a8. \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u4f4e\u4e8e2\u4e2a(\u4e0d\u5305\u542b2\u4e2a)\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u6b7b\u4ea1\u72b6\u6001.(\u6a21\u62df\u751f\u547d\u6570\u91cf\u7a00\u5c11) \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67092\u4e2a\u62163\u4e2a\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u4fdd\u6301\u539f\u6837. \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67093\u4e2a\u4ee5\u4e0a\u7684\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u6b7b\u4ea1\u72b6\u6001.(\u6a21\u62df\u751f\u547d\u6570\u91cf\u8fc7\u591a) \u5f53\u524d\u7ec6\u80de\u4e3a\u6b7b\u4ea1\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67093\u4e2a\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u5b58\u6d3b\u72b6\u6001.(\u6a21\u62df\u7e41\u6b96) \u53ef\u4ee5\u628a\u6700\u521d\u7684\u7ec6\u80de\u7ed3\u6784\u5b9a\u4e49\u4e3a\u79cd\u5b50, \u5f53\u6240\u6709\u5728\u79cd\u5b50\u4e2d\u7684\u7ec6\u80de\u540c\u65f6\u88ab\u4ee5\u4e0a\u89c4\u5219\u5904\u7406\u540e, \u53ef\u4ee5\u5f97\u5230\u7b2c\u4e00\u4ee3\u7ec6\u80de\u56fe. \u6309\u89c4\u5219\u7ee7\u7eed\u5904\u7406\u5f53\u524d\u7684\u7ec6\u80de\u56fe, \u53ef\u4ee5\u5f97\u5230\u4e0b\u4e00\u4ee3\u7684\u7ec6\u80de\u56fe, \u5468\u800c\u590d\u59cb.","title":"\u89c4\u5219"},{"location":"content/daze/game_of_life/overview/#_2","text":"\u751f\u547d\u6e38\u620f\u662f\u4e00\u4e2a\u96f6\u73a9\u5bb6\u6e38\u620f. \u5b83\u5305\u62ec\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u5f62\u4e16\u754c, \u8fd9\u4e2a\u4e16\u754c\u4e2d\u7684\u6bcf\u4e2a\u65b9\u683c\u5c45\u4f4f\u7740\u4e00\u4e2a\u6d3b\u7740\u7684\u6216\u6b7b\u4e86\u7684\u7ec6\u80de. \u4e00\u4e2a\u7ec6\u80de\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u751f\u6b7b\u53d6\u51b3\u4e8e\u76f8\u90bb\u516b\u4e2a\u65b9\u683c\u4e2d\u6d3b\u7740\u7684\u6216\u6b7b\u4e86\u7684\u7ec6\u80de\u7684\u6570\u91cf. \u5982\u679c\u76f8\u90bb\u65b9\u683c\u6d3b\u7740\u7684\u7ec6\u80de\u6570\u91cf\u8fc7\u591a, \u8fd9\u4e2a\u7ec6\u80de\u4f1a\u56e0\u4e3a\u8d44\u6e90\u532e\u4e4f\u800c\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u6b7b\u53bb; \u76f8\u53cd, \u5982\u679c\u5468\u56f4\u6d3b\u7ec6\u80de\u8fc7\u5c11, \u8fd9\u4e2a\u7ec6\u80de\u4f1a\u56e0\u592a\u5b64\u5355\u800c\u6b7b\u53bb. \u5b9e\u9645\u4e2d, \u73a9\u5bb6\u53ef\u4ee5\u8bbe\u5b9a\u5468\u56f4\u6d3b\u7ec6\u80de\u7684\u6570\u76ee\u600e\u6837\u65f6\u624d\u9002\u5b9c\u8be5\u7ec6\u80de\u7684\u751f\u5b58. \u5982\u679c\u8fd9\u4e2a\u6570\u76ee\u8bbe\u5b9a\u8fc7\u9ad8, \u4e16\u754c\u4e2d\u7684\u5927\u90e8\u5206\u7ec6\u80de\u4f1a\u56e0\u4e3a\u627e\u4e0d\u5230\u592a\u591a\u7684\u6d3b\u7684\u90bb\u5c45\u800c\u6b7b\u53bb, \u76f4\u5230\u6574\u4e2a\u4e16\u754c\u90fd\u6ca1\u6709\u751f\u547d; \u5982\u679c\u8fd9\u4e2a\u6570\u76ee\u8bbe\u5b9a\u8fc7\u4f4e, \u4e16\u754c\u4e2d\u53c8\u4f1a\u88ab\u751f\u547d\u5145\u6ee1\u800c\u6ca1\u6709\u4ec0\u4e48\u53d8\u5316. \u5b9e\u9645\u4e2d, \u8fd9\u4e2a\u6570\u76ee\u4e00\u822c\u9009\u53d62\u6216\u80053; \u8fd9\u6837\u6574\u4e2a\u751f\u547d\u4e16\u754c\u624d\u4e0d\u81f3\u4e8e\u592a\u8fc7\u8352\u51c9\u6216\u62e5\u6324, \u800c\u662f\u4e00\u79cd\u52a8\u6001\u7684\u5e73\u8861. \u8fd9\u6837\u7684\u8bdd, \u6e38\u620f\u7684\u89c4\u5219\u5c31\u662f: \u5f53\u4e00\u4e2a\u65b9\u683c\u5468\u56f4\u67092\u62163\u4e2a\u6d3b\u7ec6\u80de\u65f6, \u65b9\u683c\u4e2d\u7684\u6d3b\u7ec6\u80de\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u7ee7\u7eed\u5b58\u6d3b; \u5373\u4f7f\u8fd9\u4e2a\u65f6\u523b\u65b9\u683c\u4e2d\u6ca1\u6709\u6d3b\u7ec6\u80de, \u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u4e5f\u4f1a\"\u8bde\u751f\"\u6d3b\u7ec6\u80de. \u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d, \u8fd8\u53ef\u4ee5\u8bbe\u5b9a\u4e00\u4e9b\u66f4\u52a0\u590d\u6742\u7684\u89c4\u5219, \u4f8b\u5982\u5f53\u524d\u65b9\u683c\u7684\u72b6\u51b5\u4e0d\u4ec5\u7531\u7236\u4e00\u4ee3\u51b3\u5b9a, \u800c\u4e14\u8fd8\u8003\u8651\u7956\u7236\u4e00\u4ee3\u7684\u60c5\u51b5. \u73a9\u5bb6\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u8fd9\u4e2a\u4e16\u754c\u7684\"\u4e0a\u5e1d\", \u968f\u610f\u8bbe\u5b9a\u67d0\u4e2a\u65b9\u683c\u7ec6\u80de\u7684\u6b7b\u6d3b, \u4ee5\u89c2\u5bdf\u5bf9\u4e16\u754c\u7684\u5f71\u54cd. \u5728\u6e38\u620f\u7684\u8fdb\u884c\u4e2d, \u6742\u4e71\u65e0\u5e8f\u7684\u7ec6\u80de\u4f1a\u9010\u6e10\u6f14\u5316\u51fa\u5404\u79cd\u7cbe\u81f4\u3001\u6709\u5f62\u7684\u7ed3\u6784; \u8fd9\u4e9b\u7ed3\u6784\u5f80\u5f80\u6709\u5f88\u597d\u7684\u5bf9\u79f0\u6027, \u800c\u4e14\u6bcf\u4e00\u4ee3\u90fd\u5728\u53d8\u5316\u5f62\u72b6. \u4e00\u4e9b\u5f62\u72b6\u5df2\u7ecf\u9501\u5b9a, \u4e0d\u4f1a\u9010\u4ee3\u53d8\u5316. \u6709\u65f6, \u4e00\u4e9b\u5df2\u7ecf\u6210\u5f62\u7684\u7ed3\u6784\u4f1a\u56e0\u4e3a\u4e00\u4e9b\u65e0\u5e8f\u7ec6\u80de\u7684\"\u5165\u4fb5\"\u800c\u88ab\u7834\u574f. \u4f46\u662f\u5f62\u72b6\u548c\u79e9\u5e8f\u7ecf\u5e38\u80fd\u4ece\u6742\u4e71\u4e2d\u4ea7\u751f\u51fa\u6765.","title":"\u6982\u8ff0"},{"location":"content/daze/game_of_life/overview/#_3","text":"[1] \u7ef4\u57fa: \u5eb7\u5a01\u751f\u547d\u6e38\u620f https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life [2] \u7ef4\u57fa: \u7ec6\u80de\u81ea\u52a8\u673a https://zh.wikipedia.org/wiki/%E7%B4%B0%E8%83%9E%E8%87%AA%E5%8B%95%E6%A9%9F","title":"\u53c2\u8003"},{"location":"content/daze/math/huffman/","text":"Huffman Coding(\u970d\u592b\u66fc\u7f16\u7801, \u54c8\u592b\u66fc\u7f16\u7801, \u8d6b\u592b\u66fc\u7f16\u7801) \u970d\u592b\u66fc\u6811\u53c8\u79f0\u6700\u4f18\u4e8c\u53c9\u6811\uff0c\u662f\u4e00\u79cd\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u4e8c\u53c9\u6811. \u5e7f\u4e49\u5b9a\u4e49: \u7ed9\u51fa\u4e00\u7ec4\u7b26\u53f7(symbol)\u548c\u5176\u5bf9\u5e94\u7684\u6743\u91cd\u503c(weight), \u5176\u6743\u91cd\u901a\u5e38\u8868\u793a\u6210\u6982\u7387(%), \u6c42\u4e00\u7ec4\u4e8c\u5143\u7684\u524d\u7f6e\u7801, \u5176\u4e8c\u5143\u7801\u7684\u957f\u5ea6\u4e3a\u6700\u77ed. \u673a\u7406 \u4e00\u5f00\u59cb\uff0c\u6240\u6709\u7684\u8282\u70b9\u90fd\u662f\u7ec8\u7aef\u8282\u70b9(Leaf), \u8282\u70b9\u5185\u6709\u4e09\u4e2a\u5b57\u6bb5: \u7b26\u53f7(symbol) \u6743\u91cd(p) \u6307\u5411\u7236\u8282\u70b9\u7684\u94fe\u63a5(parent) \u800c\u975e\u7ec8\u7aef\u8282\u70b9(Node)\u5185\u6709\u56db\u4e2a\u5b57\u6bb5: \u6743\u91cd(p) \u6307\u5411\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u94fe\u63a5(l & r) \u6307\u5411\u7236\u8282\u70b9\u7684\u94fe\u63a5(parent) \u5b9e\u73b0\u970d\u592b\u66fc\u6811\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u79cd, \u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7b80\u5355\u8fbe\u6210\u8fd9\u4e2a\u8fc7\u7a0b, \u7ed9\u4e0e\u6743\u91cd\u8f83\u4f4e\u7684\u7b26\u53f7\u8f83\u9ad8\u7684\u4f18\u5148\u7ea7, \u7b97\u6cd5\u5982\u4e0b: \u628a n \u4e2a\u7ec8\u7aef\u8282\u70b9(Leaf)\u52a0\u5165\u4f18\u5148\u961f\u5217, \u5219 n \u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u4f18\u5148\u6743 $P_i, 1 \\le i \\le n$ \u5982\u679c\u961f\u5217\u5185\u7684\u8282\u70b9\u6570 > 1, \u5219: \u4ece\u961f\u5217\u4e2d\u79fb\u9664\u4e24\u4e2a\u6700\u5c0f\u7684 $P_i$ \u8282\u70b9 \u4ea7\u751f\u4e00\u4e2a\u65b0\u8282\u70b9, \u6b64\u8282\u70b9\u4e3a 1 \u4e4b\u79fb\u9664\u8282\u70b9\u4e4b\u7236\u8282\u70b9, \u800c\u6b64\u8282\u70b9\u7684\u6743\u91cd\u503c\u4e3a 1 \u4e24\u8282\u70b9\u4e4b\u6743\u91cd\u548c \u628a 2 \u4ea7\u751f\u4e4b\u8282\u70b9\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d \u6700\u540e\u5728\u4f18\u5148\u961f\u5217\u91cc\u7684\u70b9\u4e3a\u6811\u7684\u6839\u8282\u70b9(root) \u4ee3\u7801\u5b9e\u73b0 import heapq class Leaf: def __init__(self, p, symbol): self.p = p self.symbol = symbol self.parent = None def __lt__(self, other): return self.p < other.p class Node: def __init__(self, l=None, r=None): self.l = l self.r = r self.parent = None if l: l.parent = self if r: r.parent = self def __lt__(self, other): return self.p < other.p @property def p(self): p = 0 if self.l: p += self.l.p if self.r: p += self.r.p return p # \u83b7\u53d6\u970d\u592b\u66fc\u7f16\u7801\u8868 def codebook(self): data = {} for i, entry in enumerate([self.l, self.r]): if entry is None: continue if isinstance(entry, Leaf): data[entry.symbol] = str(i) else: for s, code in entry.codebook().items(): data[s] = str(i) + code return data class Tree: def __init__(self, items): page = [] for item, p in items: heapq.heappush(page, Leaf(p, item)) for _ in range(len(page) - 1): a = heapq.heappop(page) b = heapq.heappop(page) heapq.heappush(page, Node(a, b)) self.root = page[0] self.codebook = self.root.codebook if __name__ == '__main__': import collections tree = Tree(collections.Counter(open(__file__, 'rb').read()).items()) print(tree.codebook()) # {99: '000000', 44: '000001', ..., 32: '11'} \u53c2\u8003 [1] \u7ef4\u57fa: \u970d\u592b\u66fc\u7f16\u7801 https://zh.wikipedia.org/zh/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81","title":"Math-\u970d\u592b\u66fc\u7f16\u7801"},{"location":"content/daze/math/huffman/#huffman-coding","text":"\u970d\u592b\u66fc\u6811\u53c8\u79f0\u6700\u4f18\u4e8c\u53c9\u6811\uff0c\u662f\u4e00\u79cd\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u4e8c\u53c9\u6811. \u5e7f\u4e49\u5b9a\u4e49: \u7ed9\u51fa\u4e00\u7ec4\u7b26\u53f7(symbol)\u548c\u5176\u5bf9\u5e94\u7684\u6743\u91cd\u503c(weight), \u5176\u6743\u91cd\u901a\u5e38\u8868\u793a\u6210\u6982\u7387(%), \u6c42\u4e00\u7ec4\u4e8c\u5143\u7684\u524d\u7f6e\u7801, \u5176\u4e8c\u5143\u7801\u7684\u957f\u5ea6\u4e3a\u6700\u77ed.","title":"Huffman Coding(\u970d\u592b\u66fc\u7f16\u7801, \u54c8\u592b\u66fc\u7f16\u7801, \u8d6b\u592b\u66fc\u7f16\u7801)"},{"location":"content/daze/math/huffman/#_1","text":"\u4e00\u5f00\u59cb\uff0c\u6240\u6709\u7684\u8282\u70b9\u90fd\u662f\u7ec8\u7aef\u8282\u70b9(Leaf), \u8282\u70b9\u5185\u6709\u4e09\u4e2a\u5b57\u6bb5: \u7b26\u53f7(symbol) \u6743\u91cd(p) \u6307\u5411\u7236\u8282\u70b9\u7684\u94fe\u63a5(parent) \u800c\u975e\u7ec8\u7aef\u8282\u70b9(Node)\u5185\u6709\u56db\u4e2a\u5b57\u6bb5: \u6743\u91cd(p) \u6307\u5411\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u94fe\u63a5(l & r) \u6307\u5411\u7236\u8282\u70b9\u7684\u94fe\u63a5(parent) \u5b9e\u73b0\u970d\u592b\u66fc\u6811\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u79cd, \u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7b80\u5355\u8fbe\u6210\u8fd9\u4e2a\u8fc7\u7a0b, \u7ed9\u4e0e\u6743\u91cd\u8f83\u4f4e\u7684\u7b26\u53f7\u8f83\u9ad8\u7684\u4f18\u5148\u7ea7, \u7b97\u6cd5\u5982\u4e0b: \u628a n \u4e2a\u7ec8\u7aef\u8282\u70b9(Leaf)\u52a0\u5165\u4f18\u5148\u961f\u5217, \u5219 n \u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u4f18\u5148\u6743 $P_i, 1 \\le i \\le n$ \u5982\u679c\u961f\u5217\u5185\u7684\u8282\u70b9\u6570 > 1, \u5219: \u4ece\u961f\u5217\u4e2d\u79fb\u9664\u4e24\u4e2a\u6700\u5c0f\u7684 $P_i$ \u8282\u70b9 \u4ea7\u751f\u4e00\u4e2a\u65b0\u8282\u70b9, \u6b64\u8282\u70b9\u4e3a 1 \u4e4b\u79fb\u9664\u8282\u70b9\u4e4b\u7236\u8282\u70b9, \u800c\u6b64\u8282\u70b9\u7684\u6743\u91cd\u503c\u4e3a 1 \u4e24\u8282\u70b9\u4e4b\u6743\u91cd\u548c \u628a 2 \u4ea7\u751f\u4e4b\u8282\u70b9\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d \u6700\u540e\u5728\u4f18\u5148\u961f\u5217\u91cc\u7684\u70b9\u4e3a\u6811\u7684\u6839\u8282\u70b9(root)","title":"\u673a\u7406"},{"location":"content/daze/math/huffman/#_2","text":"import heapq class Leaf: def __init__(self, p, symbol): self.p = p self.symbol = symbol self.parent = None def __lt__(self, other): return self.p < other.p class Node: def __init__(self, l=None, r=None): self.l = l self.r = r self.parent = None if l: l.parent = self if r: r.parent = self def __lt__(self, other): return self.p < other.p @property def p(self): p = 0 if self.l: p += self.l.p if self.r: p += self.r.p return p # \u83b7\u53d6\u970d\u592b\u66fc\u7f16\u7801\u8868 def codebook(self): data = {} for i, entry in enumerate([self.l, self.r]): if entry is None: continue if isinstance(entry, Leaf): data[entry.symbol] = str(i) else: for s, code in entry.codebook().items(): data[s] = str(i) + code return data class Tree: def __init__(self, items): page = [] for item, p in items: heapq.heappush(page, Leaf(p, item)) for _ in range(len(page) - 1): a = heapq.heappop(page) b = heapq.heappop(page) heapq.heappush(page, Node(a, b)) self.root = page[0] self.codebook = self.root.codebook if __name__ == '__main__': import collections tree = Tree(collections.Counter(open(__file__, 'rb').read()).items()) print(tree.codebook()) # {99: '000000', 44: '000001', ..., 32: '11'}","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/math/huffman/#_3","text":"[1] \u7ef4\u57fa: \u970d\u592b\u66fc\u7f16\u7801 https://zh.wikipedia.org/zh/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81","title":"\u53c2\u8003"},{"location":"content/daze/math/kelly_formula/","text":"\u51ef\u5229\u516c\u5f0f \u5728\u6982\u7387\u8bba\u4e2d, \u51ef\u5229\u516c\u5f0f(Kelly criterion), \u4e5f\u79f0\u51ef\u5229\u65b9\u7a0b\u5f0f, \u662f\u4e00\u4e2a\u7528\u4ee5\u4f7f\u7279\u5b9a\u8d4c\u5c40\u4e2d, \u62e5\u6709\u6b63\u671f\u671b\u503c\u4e4b\u91cd\u590d\u884c\u4e3a\u957f\u671f\u589e\u957f\u7387\u6700\u5927\u5316\u7684\u516c\u5f0f, \u7531\u7ea6\u7ff0\u00b7\u62c9\u91cc\u00b7\u51ef\u5229\u4e8e1956\u5e74\u5728<\u8d1d\u5c14\u7cfb\u7edf\u6280\u672f\u671f\u520a>\u4e2d\u53d1\u8868, \u53ef\u7528\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u6b21\u6e38\u620f\u4e2d\u5e94\u6295\u6ce8\u7684\u8d44\u91d1\u6bd4\u4f8b. \u9664\u53ef\u5c06\u957f\u671f\u589e\u957f\u7387\u6700\u5927\u5316\u5916, \u6b64\u65b9\u7a0b\u5f0f\u4e0d\u5141\u8bb8\u5728\u4efb\u4f55\u8d4c\u5c40\u4e2d, \u6709\u5931\u53bb\u5168\u90e8\u73b0\u6709\u8d44\u91d1\u7684\u53ef\u80fd, \u56e0\u6b64\u6709\u4e0d\u5b58\u5728\u7834\u4ea7\u7591\u8651\u7684\u4f18\u70b9 . \u65b9\u7a0b\u5f0f\u5047\u8bbe\u8d27\u5e01\u4e0e\u8d4c\u5c40\u53ef\u65e0\u7a77\u5206\u5272, \u800c\u53ea\u8981\u8d44\u91d1\u8db3\u591f\u591a, \u5728\u5b9e\u9645\u5e94\u7528\u4e0a\u4e0d\u6210\u95ee\u9898. $$ f^* = \\frac{pb - q}{b} = \\frac{p(b+1) - 1}{b} $$ \u5176\u4e2d $f^*$ \u4e3a\u73b0\u6709\u8d44\u91d1\u5e94\u8fdb\u884c\u4e0b\u6b21\u6295\u6ce8\u7684\u6bd4\u4f8b $b$ \u4e3a\u6295\u6ce8\u53ef\u5f97\u7684\u8d54\u7387(\u4e0d\u542b\u672c\u91d1) $p$ \u4e3a\u83b7\u80dc\u7387 $q$ \u4e3a\u843d\u8d25\u7387\uff0c\u5373 $1 - p$ \u4e3e\u4f8b\u800c\u8a00, \u82e5\u4e00\u8d4c\u535a\u670960%\u7684\u83b7\u80dc\u7387(p = 0.6, q = 0.4), \u800c\u8d4c\u5ba2\u5728\u8d62\u5f97\u8d4c\u5c40\u65f6, \u53ef\u83b7\u5f97\u4e00\u8d54\u4e00\u7684\u8d54\u7387(b = 1), \u5219\u8d4c\u5ba2\u5e94\u5728\u6bcf\u6b21\u673a\u4f1a\u4e2d\u4e0b\u6ce8\u73b0\u6709\u8d44\u91d1\u768420%(f* = 0.2), \u4ee5\u6700\u5927\u5316\u8d44\u91d1\u7684\u957f\u671f\u589e\u957f\u7387. \u5982\u679c\u8d54\u7387\u6ca1\u6709\u4f18\u52bf, \u5373 b = q / p, \u90a3\u4e48\u516c\u5f0f\u5efa\u8bae\u4e0d\u4e0b\u6ce8. \u5982\u679c\u8d54\u7387\u662f\u8d1f\u7684, \u5373b < q / p, \u516c\u5f0f\u7684\u7ed3\u679c\u662f\u8d1f\u7684, \u4e5f\u5c31\u662f\u6697\u793a\u5e94\u8be5\u4e0b\u6ce8\u5230\u53e6\u5916\u4e00\u8fb9. \u51ef\u5229\u516c\u5f0f\u6700\u521d\u4e3aAT&T\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7269\u7406\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u62c9\u91cc\u00b7\u51ef\u5229\u6839\u636e\u540c\u50da\u514b\u52b3\u5fb7\u00b7\u827e\u5c14\u4f0d\u5fb7\u00b7\u9999\u519c\u4e8e\u957f\u9014\u7535\u8bdd\u7ebf\u566a\u58f0\u4e0a\u7684\u7814\u7a76\u6240\u5efa\u7acb. \u51ef\u5229\u8bf4\u660e\u9999\u519c\u7684\u4fe1\u606f\u8ad6\u8981\u5982\u4f55\u5e94\u7528\u4e8e\u4e00\u540d\u62e5\u6709\u5185\u7ebf\u6d88\u606f\u7684\u8d4c\u5f92\u5728\u8d4c\u9a6c\u65f6\u7684\u95ee\u9898. \u8d4c\u5f92\u5e0c\u671b\u51b3\u5b9a\u6700\u4f73\u7684\u8d4c\u91d1\u989d, \u800c\u4ed6\u7684\u5185\u7ebf\u6d88\u606f\u4e0d\u9700\u5b8c\u7f8e(\u65e0\u566a\u58f0), \u5373\u53ef\u8ba9\u4ed6\u62e5\u6709\u6709\u7528\u7684\u4f18\u52bf. \u51ef\u5229\u7684\u516c\u5f0f\u968f\u540e\u88ab\u9999\u519c\u7684\u53e6\u4e00\u540d\u540c\u50da\u7231\u5fb7\u534e\u00b7\u7d22\u666e\u5e94\u7528\u4e8e\u4e8c\u5341\u4e00\u70b9\u548c\u80a1\u7968\u5e02\u573a\u4e2d. \u53c2\u8003 [1] \u7ef4\u57fa: \u51ef\u5229\u516c\u5f0f https://en.wikipedia.org/wiki/Kelly_criterion","title":"Math-\u51ef\u5229\u516c\u5f0f"},{"location":"content/daze/math/kelly_formula/#_1","text":"\u5728\u6982\u7387\u8bba\u4e2d, \u51ef\u5229\u516c\u5f0f(Kelly criterion), \u4e5f\u79f0\u51ef\u5229\u65b9\u7a0b\u5f0f, \u662f\u4e00\u4e2a\u7528\u4ee5\u4f7f\u7279\u5b9a\u8d4c\u5c40\u4e2d, \u62e5\u6709\u6b63\u671f\u671b\u503c\u4e4b\u91cd\u590d\u884c\u4e3a\u957f\u671f\u589e\u957f\u7387\u6700\u5927\u5316\u7684\u516c\u5f0f, \u7531\u7ea6\u7ff0\u00b7\u62c9\u91cc\u00b7\u51ef\u5229\u4e8e1956\u5e74\u5728<\u8d1d\u5c14\u7cfb\u7edf\u6280\u672f\u671f\u520a>\u4e2d\u53d1\u8868, \u53ef\u7528\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u6b21\u6e38\u620f\u4e2d\u5e94\u6295\u6ce8\u7684\u8d44\u91d1\u6bd4\u4f8b. \u9664\u53ef\u5c06\u957f\u671f\u589e\u957f\u7387\u6700\u5927\u5316\u5916, \u6b64\u65b9\u7a0b\u5f0f\u4e0d\u5141\u8bb8\u5728\u4efb\u4f55\u8d4c\u5c40\u4e2d, \u6709\u5931\u53bb\u5168\u90e8\u73b0\u6709\u8d44\u91d1\u7684\u53ef\u80fd, \u56e0\u6b64\u6709\u4e0d\u5b58\u5728\u7834\u4ea7\u7591\u8651\u7684\u4f18\u70b9 . \u65b9\u7a0b\u5f0f\u5047\u8bbe\u8d27\u5e01\u4e0e\u8d4c\u5c40\u53ef\u65e0\u7a77\u5206\u5272, \u800c\u53ea\u8981\u8d44\u91d1\u8db3\u591f\u591a, \u5728\u5b9e\u9645\u5e94\u7528\u4e0a\u4e0d\u6210\u95ee\u9898. $$ f^* = \\frac{pb - q}{b} = \\frac{p(b+1) - 1}{b} $$ \u5176\u4e2d $f^*$ \u4e3a\u73b0\u6709\u8d44\u91d1\u5e94\u8fdb\u884c\u4e0b\u6b21\u6295\u6ce8\u7684\u6bd4\u4f8b $b$ \u4e3a\u6295\u6ce8\u53ef\u5f97\u7684\u8d54\u7387(\u4e0d\u542b\u672c\u91d1) $p$ \u4e3a\u83b7\u80dc\u7387 $q$ \u4e3a\u843d\u8d25\u7387\uff0c\u5373 $1 - p$ \u4e3e\u4f8b\u800c\u8a00, \u82e5\u4e00\u8d4c\u535a\u670960%\u7684\u83b7\u80dc\u7387(p = 0.6, q = 0.4), \u800c\u8d4c\u5ba2\u5728\u8d62\u5f97\u8d4c\u5c40\u65f6, \u53ef\u83b7\u5f97\u4e00\u8d54\u4e00\u7684\u8d54\u7387(b = 1), \u5219\u8d4c\u5ba2\u5e94\u5728\u6bcf\u6b21\u673a\u4f1a\u4e2d\u4e0b\u6ce8\u73b0\u6709\u8d44\u91d1\u768420%(f* = 0.2), \u4ee5\u6700\u5927\u5316\u8d44\u91d1\u7684\u957f\u671f\u589e\u957f\u7387. \u5982\u679c\u8d54\u7387\u6ca1\u6709\u4f18\u52bf, \u5373 b = q / p, \u90a3\u4e48\u516c\u5f0f\u5efa\u8bae\u4e0d\u4e0b\u6ce8. \u5982\u679c\u8d54\u7387\u662f\u8d1f\u7684, \u5373b < q / p, \u516c\u5f0f\u7684\u7ed3\u679c\u662f\u8d1f\u7684, \u4e5f\u5c31\u662f\u6697\u793a\u5e94\u8be5\u4e0b\u6ce8\u5230\u53e6\u5916\u4e00\u8fb9. \u51ef\u5229\u516c\u5f0f\u6700\u521d\u4e3aAT&T\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7269\u7406\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u62c9\u91cc\u00b7\u51ef\u5229\u6839\u636e\u540c\u50da\u514b\u52b3\u5fb7\u00b7\u827e\u5c14\u4f0d\u5fb7\u00b7\u9999\u519c\u4e8e\u957f\u9014\u7535\u8bdd\u7ebf\u566a\u58f0\u4e0a\u7684\u7814\u7a76\u6240\u5efa\u7acb. \u51ef\u5229\u8bf4\u660e\u9999\u519c\u7684\u4fe1\u606f\u8ad6\u8981\u5982\u4f55\u5e94\u7528\u4e8e\u4e00\u540d\u62e5\u6709\u5185\u7ebf\u6d88\u606f\u7684\u8d4c\u5f92\u5728\u8d4c\u9a6c\u65f6\u7684\u95ee\u9898. \u8d4c\u5f92\u5e0c\u671b\u51b3\u5b9a\u6700\u4f73\u7684\u8d4c\u91d1\u989d, \u800c\u4ed6\u7684\u5185\u7ebf\u6d88\u606f\u4e0d\u9700\u5b8c\u7f8e(\u65e0\u566a\u58f0), \u5373\u53ef\u8ba9\u4ed6\u62e5\u6709\u6709\u7528\u7684\u4f18\u52bf. \u51ef\u5229\u7684\u516c\u5f0f\u968f\u540e\u88ab\u9999\u519c\u7684\u53e6\u4e00\u540d\u540c\u50da\u7231\u5fb7\u534e\u00b7\u7d22\u666e\u5e94\u7528\u4e8e\u4e8c\u5341\u4e00\u70b9\u548c\u80a1\u7968\u5e02\u573a\u4e2d.","title":"\u51ef\u5229\u516c\u5f0f"},{"location":"content/daze/math/kelly_formula/#_2","text":"[1] \u7ef4\u57fa: \u51ef\u5229\u516c\u5f0f https://en.wikipedia.org/wiki/Kelly_criterion","title":"\u53c2\u8003"},{"location":"content/daze/math/normal_distribution/","text":"\u6b63\u6001\u5206\u5e03 \u6b63\u6001\u5206\u5e03(Normal distribution) \u53c8\u540d\u9ad8\u65af\u5206\u5e03(Gaussian distribution), \u662f\u4e00\u4e2a\u5728\u6570\u5b66, \u7269\u7406\u53ca\u5de5\u7a0b\u7b49\u9886\u57df\u90fd\u975e\u5e38\u91cd\u8981\u7684\u6982\u7387\u5206\u5e03, \u7531\u4e8e\u8fd9\u4e2a\u5206\u5e03\u51fd\u6570\u5177\u6709\u5f88\u591a\u975e\u5e38\u6f02\u4eae\u7684\u6027\u8d28, \u4f7f\u5f97\u5176\u5728\u8bf8\u591a\u6d89\u53ca\u7edf\u8ba1\u79d1\u5b66\u79bb\u6563\u79d1\u5b66\u7b49\u9886\u57df\u7684\u8bb8\u591a\u65b9\u9762\u90fd\u6709\u7740\u91cd\u5927\u7684\u5f71\u54cd\u529b. \u82e5\u968f\u673a\u53d8\u91cf X \u670d\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u4e3a \u03bc, \u5c3a\u5ea6\u53c2\u6570\u4e3a \u03c3 \u7684\u6982\u7387\u5206\u5e03, \u8bb0\u4e3a: $X \\sim N(\\mu, \\sigma)$, \u5219\u5176\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a: $$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} $$ \u6b63\u6001\u5206\u5e03\u7684\u6570\u5b66\u671f\u671b\u503c\u6216\u671f\u671b\u503c $\\mu$ \u7b49\u4e8e\u4f4d\u7f6e\u53c2\u6570, \u51b3\u5b9a\u4e86\u5206\u5e03\u7684\u4f4d\u7f6e; \u5176\u65b9\u5dee $\\sigma^2$ \u7684\u5f00\u5e73\u65b9\u6216\u6807\u51c6\u5dee $\\sigma$ \u7b49\u4e8e\u5c3a\u5ea6\u53c2\u6570, \u51b3\u5b9a\u4e86\u5206\u5e03\u7684\u5e45\u5ea6. \u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u66f2\u7ebf\u5448\u949f\u5f62, \u56e0\u6b64\u4eba\u4eec\u53c8\u7ecf\u5e38\u79f0\u4e4b\u4e3a\u949f\u5f62\u66f2\u7ebf. \u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u662f\u4f4d\u7f6e\u53c2\u6570 $\\mu = 0$, \u5c3a\u5ea6\u53c2\u6570 $\\sigma^2=1$ \u7684\u6b63\u6001\u5206\u5e03. \u5206\u5e03\u89c4\u5219 \u5728\u5b9e\u9645\u5e94\u7528\u4e0a, \u5e38\u8003\u8651\u4e00\u7ec4\u6570\u636e\u5177\u6709\u8fd1\u4f3c\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5206\u5e03. \u82e5\u5176\u5047\u8bbe\u6b63\u786e, \u5219\u7ea6 68% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u6709 1 \u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4, \u7ea6 95% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u6709 2 \u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4, \u4ee5\u53ca\u7ea6 99.7% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u67093\u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4. \u79f0\u4e3a\"68-95-99.7\u6cd5\u5219\". \u8ba1\u7b97\u6570\u636e\u5728\u67d0\u4e2a\u533a\u95f4\u7684\u6982\u7387 \u67e5\u8868\u6cd5 \u76f8\u5173\u51fd\u6570 import math # \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4ee3\u7801\u8868\u793a def gaussian_distribution_probability_density(x, sigma=1, mu=0): return 1 / (sigma * (2 * math.pi) ** 0.5) * math.e ** (- (x - mu) * 2 / (2 * sigma**2)) import numpy.random # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 1, \u5927\u5c0f 1024 \u7684\u4e00\u7ef4\u77e9\u9635\u6570\u5217 data = numpy.random.normal(0, 1, size=1024) print(data) # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 1, \u5927\u5c0f 32 * 32 \u7684\u4e8c\u7ef4\u77e9\u9635\u6570\u5217 data = numpy.random.normal(0, 1, size=(32, 32)) print(data)","title":"Math-\u6b63\u6001\u5206\u5e03"},{"location":"content/daze/math/normal_distribution/#_1","text":"\u6b63\u6001\u5206\u5e03(Normal distribution) \u53c8\u540d\u9ad8\u65af\u5206\u5e03(Gaussian distribution), \u662f\u4e00\u4e2a\u5728\u6570\u5b66, \u7269\u7406\u53ca\u5de5\u7a0b\u7b49\u9886\u57df\u90fd\u975e\u5e38\u91cd\u8981\u7684\u6982\u7387\u5206\u5e03, \u7531\u4e8e\u8fd9\u4e2a\u5206\u5e03\u51fd\u6570\u5177\u6709\u5f88\u591a\u975e\u5e38\u6f02\u4eae\u7684\u6027\u8d28, \u4f7f\u5f97\u5176\u5728\u8bf8\u591a\u6d89\u53ca\u7edf\u8ba1\u79d1\u5b66\u79bb\u6563\u79d1\u5b66\u7b49\u9886\u57df\u7684\u8bb8\u591a\u65b9\u9762\u90fd\u6709\u7740\u91cd\u5927\u7684\u5f71\u54cd\u529b. \u82e5\u968f\u673a\u53d8\u91cf X \u670d\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u4e3a \u03bc, \u5c3a\u5ea6\u53c2\u6570\u4e3a \u03c3 \u7684\u6982\u7387\u5206\u5e03, \u8bb0\u4e3a: $X \\sim N(\\mu, \\sigma)$, \u5219\u5176\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a: $$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} $$ \u6b63\u6001\u5206\u5e03\u7684\u6570\u5b66\u671f\u671b\u503c\u6216\u671f\u671b\u503c $\\mu$ \u7b49\u4e8e\u4f4d\u7f6e\u53c2\u6570, \u51b3\u5b9a\u4e86\u5206\u5e03\u7684\u4f4d\u7f6e; \u5176\u65b9\u5dee $\\sigma^2$ \u7684\u5f00\u5e73\u65b9\u6216\u6807\u51c6\u5dee $\\sigma$ \u7b49\u4e8e\u5c3a\u5ea6\u53c2\u6570, \u51b3\u5b9a\u4e86\u5206\u5e03\u7684\u5e45\u5ea6. \u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u66f2\u7ebf\u5448\u949f\u5f62, \u56e0\u6b64\u4eba\u4eec\u53c8\u7ecf\u5e38\u79f0\u4e4b\u4e3a\u949f\u5f62\u66f2\u7ebf. \u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u662f\u4f4d\u7f6e\u53c2\u6570 $\\mu = 0$, \u5c3a\u5ea6\u53c2\u6570 $\\sigma^2=1$ \u7684\u6b63\u6001\u5206\u5e03.","title":"\u6b63\u6001\u5206\u5e03"},{"location":"content/daze/math/normal_distribution/#_2","text":"\u5728\u5b9e\u9645\u5e94\u7528\u4e0a, \u5e38\u8003\u8651\u4e00\u7ec4\u6570\u636e\u5177\u6709\u8fd1\u4f3c\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5206\u5e03. \u82e5\u5176\u5047\u8bbe\u6b63\u786e, \u5219\u7ea6 68% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u6709 1 \u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4, \u7ea6 95% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u6709 2 \u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4, \u4ee5\u53ca\u7ea6 99.7% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u67093\u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4. \u79f0\u4e3a\"68-95-99.7\u6cd5\u5219\".","title":"\u5206\u5e03\u89c4\u5219"},{"location":"content/daze/math/normal_distribution/#_3","text":"\u67e5\u8868\u6cd5","title":"\u8ba1\u7b97\u6570\u636e\u5728\u67d0\u4e2a\u533a\u95f4\u7684\u6982\u7387"},{"location":"content/daze/math/normal_distribution/#_4","text":"import math # \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4ee3\u7801\u8868\u793a def gaussian_distribution_probability_density(x, sigma=1, mu=0): return 1 / (sigma * (2 * math.pi) ** 0.5) * math.e ** (- (x - mu) * 2 / (2 * sigma**2)) import numpy.random # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 1, \u5927\u5c0f 1024 \u7684\u4e00\u7ef4\u77e9\u9635\u6570\u5217 data = numpy.random.normal(0, 1, size=1024) print(data) # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 1, \u5927\u5c0f 32 * 32 \u7684\u4e8c\u7ef4\u77e9\u9635\u6570\u5217 data = numpy.random.normal(0, 1, size=(32, 32)) print(data)","title":"\u76f8\u5173\u51fd\u6570"},{"location":"content/daze/math/variance_and_sd/","text":"\u65b9\u5dee\u4e0e\u6807\u51c6\u5dee \u65b9\u5dee(Variance) , \u5e94\u7528\u6570\u5b66\u91cc\u7684\u4e13\u6709\u540d\u8bcd. \u5728\u6982\u7387\u8bba\u548c\u7edf\u8ba1\u5b66\u4e2d, \u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u65b9\u5dee\u63cf\u8ff0\u7684\u662f\u5b83\u7684\u79bb\u6563\u7a0b\u5ea6, \u4e5f\u5c31\u662f\u8be5\u53d8\u91cf\u79bb\u5176\u671f\u671b\u503c\u7684\u8ddd\u79bb. \u4e00\u4e2a\u5b9e\u968f\u673a\u53d8\u91cf\u7684\u65b9\u5dee\u4e5f\u79f0\u4e3a\u5b83\u7684\u4e8c\u9636\u77e9\u6216\u4e8c\u9636\u4e2d\u5fc3\u52a8\u5dee, \u6070\u5de7\u4e5f\u662f\u5b83\u7684\u4e8c\u9636\u7d2f\u79ef\u91cf. \u8fd9\u91cc\u628a\u590d\u6742\u8bf4\u767d\u4e86, \u5c31\u662f\u5c06\u5404\u4e2a\u8bef\u5dee\u5c06\u4e4b\u5e73\u65b9(\u800c\u975e\u53d6\u7edd\u5bf9\u503c), \u4f7f\u4e4b\u80af\u5b9a\u4e3a\u6b63\u6570, \u76f8\u52a0\u4e4b\u540e\u518d\u9664\u4ee5\u603b\u6570, \u900f\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u7b97\u51fa\u5404\u4e2a\u6570\u636e\u5206\u5e03\u4e0e\u96f6\u6563(\u76f8\u5bf9\u4e2d\u5fc3\u70b9)\u7684\u7a0b\u5ea6. \u7ee7\u7eed\u5ef6\u4f38\u7684\u8bdd, \u65b9\u5dee\u7684\u7b97\u672f\u5e73\u65b9\u6839\u79f0\u4e3a\u8be5\u968f\u673a\u53d8\u91cf\u7684 \u6807\u51c6\u5dee(Standard Deviation, SD) (\u6b64\u4e3a\u76f8\u5bf9\u5404\u4e2a\u6570\u636e\u70b9\u95f4). \u516c\u5f0f \u65b9\u5dee $\\sigma^2 = \\frac{1}{N}\\sum_{i=1}^N(x_i - \\mu)^2$, \u5176\u4e2d $mu$ \u4e3a\u5e73\u5747\u503c $\\bar x$, \u5176\u8868\u8fbe\u5f0f\u5c55\u5f00\u540e\u53ef\u8bb0\u4e3a: \"\u5e73\u65b9\u7684\u5e73\u5747\" \u51cf\u53bb \"\u5e73\u5747\u7684\u5e73\u65b9\" \u6807\u51c6\u5dee $\\sigma$ \u4e3a\u65b9\u5dee\u7684\u7b97\u6570\u5e73\u65b9\u6839. \u76f8\u5173\u51fd\u6570 import numpy as np r = np.var([1, 2, 3, 4]) print(r) # \u65b9\u5dee, 1.25 r = np.std([1, 2, 3, 4]) print(r) # \u6807\u51c6\u5dee, 1.118 r = np.var([[1, 2], [3, 4]], axis=0) print(r) # \u4e8c\u7ef4\u77e9\u9635\u6309\u5217\u65b9\u5dee, [1, 1]","title":"Math-\u65b9\u5dee\u4e0e\u6807\u51c6\u5dee"},{"location":"content/daze/math/variance_and_sd/#_1","text":"\u65b9\u5dee(Variance) , \u5e94\u7528\u6570\u5b66\u91cc\u7684\u4e13\u6709\u540d\u8bcd. \u5728\u6982\u7387\u8bba\u548c\u7edf\u8ba1\u5b66\u4e2d, \u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u65b9\u5dee\u63cf\u8ff0\u7684\u662f\u5b83\u7684\u79bb\u6563\u7a0b\u5ea6, \u4e5f\u5c31\u662f\u8be5\u53d8\u91cf\u79bb\u5176\u671f\u671b\u503c\u7684\u8ddd\u79bb. \u4e00\u4e2a\u5b9e\u968f\u673a\u53d8\u91cf\u7684\u65b9\u5dee\u4e5f\u79f0\u4e3a\u5b83\u7684\u4e8c\u9636\u77e9\u6216\u4e8c\u9636\u4e2d\u5fc3\u52a8\u5dee, \u6070\u5de7\u4e5f\u662f\u5b83\u7684\u4e8c\u9636\u7d2f\u79ef\u91cf. \u8fd9\u91cc\u628a\u590d\u6742\u8bf4\u767d\u4e86, \u5c31\u662f\u5c06\u5404\u4e2a\u8bef\u5dee\u5c06\u4e4b\u5e73\u65b9(\u800c\u975e\u53d6\u7edd\u5bf9\u503c), \u4f7f\u4e4b\u80af\u5b9a\u4e3a\u6b63\u6570, \u76f8\u52a0\u4e4b\u540e\u518d\u9664\u4ee5\u603b\u6570, \u900f\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u7b97\u51fa\u5404\u4e2a\u6570\u636e\u5206\u5e03\u4e0e\u96f6\u6563(\u76f8\u5bf9\u4e2d\u5fc3\u70b9)\u7684\u7a0b\u5ea6. \u7ee7\u7eed\u5ef6\u4f38\u7684\u8bdd, \u65b9\u5dee\u7684\u7b97\u672f\u5e73\u65b9\u6839\u79f0\u4e3a\u8be5\u968f\u673a\u53d8\u91cf\u7684 \u6807\u51c6\u5dee(Standard Deviation, SD) (\u6b64\u4e3a\u76f8\u5bf9\u5404\u4e2a\u6570\u636e\u70b9\u95f4).","title":"\u65b9\u5dee\u4e0e\u6807\u51c6\u5dee"},{"location":"content/daze/math/variance_and_sd/#_2","text":"\u65b9\u5dee $\\sigma^2 = \\frac{1}{N}\\sum_{i=1}^N(x_i - \\mu)^2$, \u5176\u4e2d $mu$ \u4e3a\u5e73\u5747\u503c $\\bar x$, \u5176\u8868\u8fbe\u5f0f\u5c55\u5f00\u540e\u53ef\u8bb0\u4e3a: \"\u5e73\u65b9\u7684\u5e73\u5747\" \u51cf\u53bb \"\u5e73\u5747\u7684\u5e73\u65b9\" \u6807\u51c6\u5dee $\\sigma$ \u4e3a\u65b9\u5dee\u7684\u7b97\u6570\u5e73\u65b9\u6839.","title":"\u516c\u5f0f"},{"location":"content/daze/math/variance_and_sd/#_3","text":"import numpy as np r = np.var([1, 2, 3, 4]) print(r) # \u65b9\u5dee, 1.25 r = np.std([1, 2, 3, 4]) print(r) # \u6807\u51c6\u5dee, 1.118 r = np.var([[1, 2], [3, 4]], axis=0) print(r) # \u4e8c\u7ef4\u77e9\u9635\u6309\u5217\u65b9\u5dee, [1, 1]","title":"\u76f8\u5173\u51fd\u6570"},{"location":"content/daze/ml/fasttext/","text":"fastText fastText \u662f facebook \u4e8e 2016 \u5e74\u5f00\u6e90\u51fa\u6765\u7684\u8fdb\u884c\u8bcd\u4e0e\u5e8f\u5217\u5206\u7c7b\u7684\u6a21\u578b. \u5b83\u7684\u7279\u70b9\u662f\u975e\u5e38\u5feb! \u5728 CPU \u4e0a\u53ef\u4ee5\u8f7b\u677e\u8fbe\u5230\u6bcf\u79d2\u51e0\u5343\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u901f\u5ea6. \u8bcd\u5411\u91cf\u8868\u5f81 fastText \u62e5\u6709\u8bcd\u888b\u7279\u5f81\u4e0e N-gram \u7279\u5f81. \u5bf9\u4e8e\u4e00\u4e2a\u6837\u672c, \u6bd4\u5982 \"\u6211\u7231\u4f60\", \u5b83\u7684\u8bcd\u888b\u7279\u5f81\u4e3a\u65e0\u987a\u5e8f\u7684 [\"\u6211\", \"\u7231\", \"\u4f60\"], \u4f46\u8981\u6ce8\u610f\u7684\u662f, \"\u4f60\u7231\u6211\" \u7684\u8bcd\u888b\u7279\u5f81\u4e5f\u4e3a\u65e0\u987a\u5e8f\u7684 [\"\u4f60\", \"\u7231\", \"\u6211\"]. \u5982\u679c\u52a0\u5165 2-gram \u7279\u5f81, \u90a3\u4e48 \"\u6211\u7231\u4f60\" \u7684\u7279\u5f81\u4e3a [\"\u6211\", \"\u7231\", \"\u4f60\", \"\u6211\u7231\", \"\u7231\u4f60\"], \u800c \"\u4f60\u7231\u6211\" \u7684\u7279\u5f81\u53d8\u4e3a [\"\u4f60\", \"\u7231\", \"\u6211\", \"\u4f60\u7231\", \"\u7231\u6211\"], \u56e0\u6b64\u53ef\u4ee5\u533a\u5206\u4e24\u4e2a\u6837\u672c. \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u6211\u4eec\u9700\u8981\u8fc7\u6ee4\u6389\u4f4e\u9891\u7684 N-gram. \u4e00\u822c\u800c\u8a00, N-grams \u53d6 [1-5]. \u4f7f\u7528 keras \u5b9e\u73b0 fastText \u6a21\u578b https://github.com/facebookresearch/fastText/blob/master/tutorials/supervised-learning.md \u4e2d\u6709\u5173\u4e8e fastText \u9879\u76ee\u7684\u4f7f\u7528\u4f8b\u7a0b. \u5904\u7406\u4f7f\u7528\u5b98\u65b9\u5de5\u5177\u5916, \u53ef\u4ee5\u4f7f\u7528 keras \u5b9e\u73b0 fastText \u6a21\u578b. \u4e0b\u9762\u5c06\u5b8c\u6210\u4e00\u4e2a Imdb \u60c5\u611f\u4e8c\u5206\u7c7b. \u4f8b\u7a0b\u6570\u636e\u96c6\u4e0b\u8f7d: Large Movie Review Dataset \u9884\u5904\u7406 import json import os import pickle import keras.preprocessing.text import numpy as np path = '/data/aclImdb' def get_data(name): basename = os.path.basename(name) _, score = basename[:-4].split('_') score = int(score) with open(name, 'r', encoding='utf-8') as f: text = f.read().replace('<br />', '') return text, score xtr, ytr, xte, yte = [], [], [], [] print('scan', os.path.join(path, 'train/pos/')) for entry in os.scandir(os.path.join(path, 'train/pos/')): x, y = get_data(entry.path) xtr.append(x) ytr.append(y) print('scan', os.path.join(path, 'train/neg/')) for entry in os.scandir(os.path.join(path, 'train/neg/')): x, y = get_data(entry.path) xtr.append(x) ytr.append(y) print('scan', os.path.join(path, 'test/pos/')) for entry in os.scandir(os.path.join(path, 'test/pos/')): x, y = get_data(entry.path) xte.append(x) yte.append(y) print('scan', os.path.join(path, 'test/neg/')) for entry in os.scandir(os.path.join(path, 'train/neg/')): x, y = get_data(entry.path) xte.append(x) yte.append(y) try: os.mkdir('res') except FileExistsError: pass print('dump res/aclimdb.json') with open('res/aclimdb.json', 'w', encoding='utf-8') as f: json.dump(((xtr, ytr), (xte, yte)), f) ytr = [1 if i > 5 else 0 for i in ytr] yte = [1 if i > 5 else 0 for i in yte] print('init tokenizer') tokenizer = keras.preprocessing.text.Tokenizer(num_words=20000) tokenizer.fit_on_texts(xtr) print('dump res/aclimdb_word_index.json') with open('res/aclimdb_word_index.json', 'w') as f: json.dump(tokenizer.word_index, f) print('dump res/aclimdb_index_word.json') with open('res/aclimdb_index_word.json', 'w') as f: json.dump({v: k for k, v in tokenizer.word_index.items()}, f) print('dump res/aclimdb_tokenizer.pkl') with open('res/aclimdb_tokenizer.pkl', 'wb') as f: pickle.dump(tokenizer, f) print('serialize xtr') xtr = tokenizer.texts_to_sequences(xtr) print('serialize xte') xte = tokenizer.texts_to_sequences(xte) print('dump res/aclimdb.npy') np.save('res/aclimdb.npy', np.array([[xtr, ytr], [xte, yte]])) \u5b9a\u4e49\u6a21\u578b\u4e0e\u5f00\u59cb\u8bad\u7ec3 import keras.callbacks import keras.layers import keras.models import keras.preprocessing.sequence import keras.preprocessing.text import numpy as np def create_ngram_set(input_list, ngram_value=2): return set(zip(*[input_list[i:] for i in range(ngram_value)])) def add_ngram(sequences, token_indice, ngram_range=2): new_sequences = [] for input_list in sequences: new_list = input_list[:] for i in range(len(new_list) - ngram_range + 1): for ngram_value in range(2, ngram_range + 1): ngram = tuple(new_list[i:i + ngram_value]) if ngram in token_indice: new_list.append(token_indice[ngram]) new_sequences.append(new_list) return new_sequences ngram_range = 1 max_features = 20000 maxlen = 400 batch_size = 32 embedding_dims = 50 epochs = 20 print('Loading data') with open('res/aclimdb.npy', 'rb') as f: (x_train, y_train), (x_test, y_test) = np.load(f) if ngram_range > 1: print('Adding {}-gram features'.format(ngram_range)) # Create set of unique n-gram from the training set. ngram_set = set() for input_list in x_train: for i in range(2, ngram_range + 1): set_of_ngram = create_ngram_set(input_list, ngram_value=i) ngram_set.update(set_of_ngram) # Dictionary mapping n-gram token to a unique integer. # Integer values are greater than max_features in order # to avoid collision with existing features. start_index = max_features + 1 token_indice = {v: k + start_index for k, v in enumerate(ngram_set)} indice_token = {token_indice[k]: k for k in token_indice} # max_features is the highest integer that could be found in the dataset. max_features = np.max(list(indice_token.keys())) + 1 # Augmenting x_train and x_test with n-grams features x_train = add_ngram(x_train, token_indice, ngram_range) x_test = add_ngram(x_test, token_indice, ngram_range) print('Average train sequence length: {}'.format(np.mean(list(map(len, x_train)), dtype=int))) print('Average test sequence length: {}'.format(np.mean(list(map(len, x_test)), dtype=int))) print('Pad sequences') x_train = keras.preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen) x_test = keras.preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen) print('Build model') model = keras.models.Sequential() model.add(keras.layers.Embedding(max_features, embedding_dims, input_length=maxlen)) model.add(keras.layers.GlobalAveragePooling1D()) model.add(keras.layers.Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit( x_train, y_train, batch_size=batch_size, epochs=epochs, callbacks=[keras.callbacks.EarlyStopping(monitor='val_loss', patience=2)], validation_data=(x_test, y_test)) model.save('res/aclimdb_model.h5') \u5728 N-gram = 1 \u65f6, \u5728 8 \u4e2a epoch \u540e\u5230\u8fbe 93% \u7684\u6d4b\u8bd5\u51c6\u786e\u5ea6; \u5728 N-gram = 2 \u65f6, \u5728 14 \u4e2a epoch \u540e\u5230\u8fbe 95% \u7684\u6d4b\u8bd5\u51c6\u786e\u5ea6.","title":"\u673a\u5668\u5b66\u4e60-\u5feb\u901f\u6587\u672c\u5206\u7c7b"},{"location":"content/daze/ml/fasttext/#fasttext","text":"fastText \u662f facebook \u4e8e 2016 \u5e74\u5f00\u6e90\u51fa\u6765\u7684\u8fdb\u884c\u8bcd\u4e0e\u5e8f\u5217\u5206\u7c7b\u7684\u6a21\u578b. \u5b83\u7684\u7279\u70b9\u662f\u975e\u5e38\u5feb! \u5728 CPU \u4e0a\u53ef\u4ee5\u8f7b\u677e\u8fbe\u5230\u6bcf\u79d2\u51e0\u5343\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u901f\u5ea6.","title":"fastText"},{"location":"content/daze/ml/fasttext/#_1","text":"fastText \u62e5\u6709\u8bcd\u888b\u7279\u5f81\u4e0e N-gram \u7279\u5f81. \u5bf9\u4e8e\u4e00\u4e2a\u6837\u672c, \u6bd4\u5982 \"\u6211\u7231\u4f60\", \u5b83\u7684\u8bcd\u888b\u7279\u5f81\u4e3a\u65e0\u987a\u5e8f\u7684 [\"\u6211\", \"\u7231\", \"\u4f60\"], \u4f46\u8981\u6ce8\u610f\u7684\u662f, \"\u4f60\u7231\u6211\" \u7684\u8bcd\u888b\u7279\u5f81\u4e5f\u4e3a\u65e0\u987a\u5e8f\u7684 [\"\u4f60\", \"\u7231\", \"\u6211\"]. \u5982\u679c\u52a0\u5165 2-gram \u7279\u5f81, \u90a3\u4e48 \"\u6211\u7231\u4f60\" \u7684\u7279\u5f81\u4e3a [\"\u6211\", \"\u7231\", \"\u4f60\", \"\u6211\u7231\", \"\u7231\u4f60\"], \u800c \"\u4f60\u7231\u6211\" \u7684\u7279\u5f81\u53d8\u4e3a [\"\u4f60\", \"\u7231\", \"\u6211\", \"\u4f60\u7231\", \"\u7231\u6211\"], \u56e0\u6b64\u53ef\u4ee5\u533a\u5206\u4e24\u4e2a\u6837\u672c. \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u6211\u4eec\u9700\u8981\u8fc7\u6ee4\u6389\u4f4e\u9891\u7684 N-gram. \u4e00\u822c\u800c\u8a00, N-grams \u53d6 [1-5].","title":"\u8bcd\u5411\u91cf\u8868\u5f81"},{"location":"content/daze/ml/fasttext/#keras-fasttext","text":"https://github.com/facebookresearch/fastText/blob/master/tutorials/supervised-learning.md \u4e2d\u6709\u5173\u4e8e fastText \u9879\u76ee\u7684\u4f7f\u7528\u4f8b\u7a0b. \u5904\u7406\u4f7f\u7528\u5b98\u65b9\u5de5\u5177\u5916, \u53ef\u4ee5\u4f7f\u7528 keras \u5b9e\u73b0 fastText \u6a21\u578b. \u4e0b\u9762\u5c06\u5b8c\u6210\u4e00\u4e2a Imdb \u60c5\u611f\u4e8c\u5206\u7c7b. \u4f8b\u7a0b\u6570\u636e\u96c6\u4e0b\u8f7d: Large Movie Review Dataset \u9884\u5904\u7406 import json import os import pickle import keras.preprocessing.text import numpy as np path = '/data/aclImdb' def get_data(name): basename = os.path.basename(name) _, score = basename[:-4].split('_') score = int(score) with open(name, 'r', encoding='utf-8') as f: text = f.read().replace('<br />', '') return text, score xtr, ytr, xte, yte = [], [], [], [] print('scan', os.path.join(path, 'train/pos/')) for entry in os.scandir(os.path.join(path, 'train/pos/')): x, y = get_data(entry.path) xtr.append(x) ytr.append(y) print('scan', os.path.join(path, 'train/neg/')) for entry in os.scandir(os.path.join(path, 'train/neg/')): x, y = get_data(entry.path) xtr.append(x) ytr.append(y) print('scan', os.path.join(path, 'test/pos/')) for entry in os.scandir(os.path.join(path, 'test/pos/')): x, y = get_data(entry.path) xte.append(x) yte.append(y) print('scan', os.path.join(path, 'test/neg/')) for entry in os.scandir(os.path.join(path, 'train/neg/')): x, y = get_data(entry.path) xte.append(x) yte.append(y) try: os.mkdir('res') except FileExistsError: pass print('dump res/aclimdb.json') with open('res/aclimdb.json', 'w', encoding='utf-8') as f: json.dump(((xtr, ytr), (xte, yte)), f) ytr = [1 if i > 5 else 0 for i in ytr] yte = [1 if i > 5 else 0 for i in yte] print('init tokenizer') tokenizer = keras.preprocessing.text.Tokenizer(num_words=20000) tokenizer.fit_on_texts(xtr) print('dump res/aclimdb_word_index.json') with open('res/aclimdb_word_index.json', 'w') as f: json.dump(tokenizer.word_index, f) print('dump res/aclimdb_index_word.json') with open('res/aclimdb_index_word.json', 'w') as f: json.dump({v: k for k, v in tokenizer.word_index.items()}, f) print('dump res/aclimdb_tokenizer.pkl') with open('res/aclimdb_tokenizer.pkl', 'wb') as f: pickle.dump(tokenizer, f) print('serialize xtr') xtr = tokenizer.texts_to_sequences(xtr) print('serialize xte') xte = tokenizer.texts_to_sequences(xte) print('dump res/aclimdb.npy') np.save('res/aclimdb.npy', np.array([[xtr, ytr], [xte, yte]])) \u5b9a\u4e49\u6a21\u578b\u4e0e\u5f00\u59cb\u8bad\u7ec3 import keras.callbacks import keras.layers import keras.models import keras.preprocessing.sequence import keras.preprocessing.text import numpy as np def create_ngram_set(input_list, ngram_value=2): return set(zip(*[input_list[i:] for i in range(ngram_value)])) def add_ngram(sequences, token_indice, ngram_range=2): new_sequences = [] for input_list in sequences: new_list = input_list[:] for i in range(len(new_list) - ngram_range + 1): for ngram_value in range(2, ngram_range + 1): ngram = tuple(new_list[i:i + ngram_value]) if ngram in token_indice: new_list.append(token_indice[ngram]) new_sequences.append(new_list) return new_sequences ngram_range = 1 max_features = 20000 maxlen = 400 batch_size = 32 embedding_dims = 50 epochs = 20 print('Loading data') with open('res/aclimdb.npy', 'rb') as f: (x_train, y_train), (x_test, y_test) = np.load(f) if ngram_range > 1: print('Adding {}-gram features'.format(ngram_range)) # Create set of unique n-gram from the training set. ngram_set = set() for input_list in x_train: for i in range(2, ngram_range + 1): set_of_ngram = create_ngram_set(input_list, ngram_value=i) ngram_set.update(set_of_ngram) # Dictionary mapping n-gram token to a unique integer. # Integer values are greater than max_features in order # to avoid collision with existing features. start_index = max_features + 1 token_indice = {v: k + start_index for k, v in enumerate(ngram_set)} indice_token = {token_indice[k]: k for k in token_indice} # max_features is the highest integer that could be found in the dataset. max_features = np.max(list(indice_token.keys())) + 1 # Augmenting x_train and x_test with n-grams features x_train = add_ngram(x_train, token_indice, ngram_range) x_test = add_ngram(x_test, token_indice, ngram_range) print('Average train sequence length: {}'.format(np.mean(list(map(len, x_train)), dtype=int))) print('Average test sequence length: {}'.format(np.mean(list(map(len, x_test)), dtype=int))) print('Pad sequences') x_train = keras.preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen) x_test = keras.preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen) print('Build model') model = keras.models.Sequential() model.add(keras.layers.Embedding(max_features, embedding_dims, input_length=maxlen)) model.add(keras.layers.GlobalAveragePooling1D()) model.add(keras.layers.Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit( x_train, y_train, batch_size=batch_size, epochs=epochs, callbacks=[keras.callbacks.EarlyStopping(monitor='val_loss', patience=2)], validation_data=(x_test, y_test)) model.save('res/aclimdb_model.h5') \u5728 N-gram = 1 \u65f6, \u5728 8 \u4e2a epoch \u540e\u5230\u8fbe 93% \u7684\u6d4b\u8bd5\u51c6\u786e\u5ea6; \u5728 N-gram = 2 \u65f6, \u5728 14 \u4e2a epoch \u540e\u5230\u8fbe 95% \u7684\u6d4b\u8bd5\u51c6\u786e\u5ea6.","title":"\u4f7f\u7528 keras \u5b9e\u73b0 fastText \u6a21\u578b"},{"location":"content/daze/ml/hog/","text":"\u5229\u7528 HOG + SVM \u8bad\u7ec3\u4e00\u4e2a\u7b80\u5355\u7684\u56fe\u50cf\u5206\u7c7b\u5668. \u9879\u76ee\u5730\u5740: https://github.com/mohanson/hogsvm HOG HOG(Histogram of Oriented Gradient: \u68af\u5ea6\u76f4\u65b9\u56fe) \u7279\u5f81\u5728\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u975e\u5e38\u6d41\u884c. \u5176\u4e3b\u8981\u601d\u60f3\u662f \u5728\u4e00\u526f\u56fe\u50cf\u4e2d, \u5c40\u90e8\u76ee\u6807\u7684\u8868\u8c61\u548c\u5f62\u72b6\u80fd\u591f\u88ab\u68af\u5ea6\u6216\u8fb9\u7f18\u7684\u65b9\u5411\u5bc6\u5ea6\u5206\u5e03\u5f88\u597d\u5730\u63cf\u8ff0(\u672c\u8d28: \u68af\u5ea6\u7684\u7edf\u8ba1\u4fe1\u606f, \u800c\u68af\u5ea6\u4e3b\u8981\u5b58\u5728\u4e8e\u8fb9\u7f18\u7684\u5730\u65b9). \u5728 https://www.learnopencv.com/histogram-of-oriented-gradients/ \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6709\u5bf9 HOG \u7b97\u6cd5\u7684\u8be6\u7ec6\u4ecb\u7ecd, \u63a8\u8350\u5b8c\u6574\u9605\u8bfb. \u63d0\u53d6\u611f\u5174\u8da3\u56fe\u50cf\u533a\u57df, \u8fdb\u884c\u7070\u5ea6\u5316 \u8ba1\u7b97 X \u65b9\u5411\u4e0e Y \u65b9\u5411\u7684\u68af\u5ea6 import numpy as np import skimage.color import skimage.io im = skimage.color.rgb2gray(skimage.io.imread('/img/jp.jpg')) gy, gx = [np.ascontiguousarray(g) for g in np.gradient(im)] \u8ba1\u7b97\u68af\u5ea6\u5e45\u503c $g$ \u548c\u65b9\u5411 $\\theta$ g = np.sqrt(gy**2 + gx**2) t = np.arctan2(gy, gx) \u5c06\u56fe\u50cf\u5206\u5272\u4e3a 8x8 \u7684 cells \u5e76\u8ba1\u7b97\u6bcf\u4e00\u4e2a cells \u7684 9-bins \u68af\u5ea6\u76f4\u65b9\u56fe. \u68af\u5ea6\u65b9\u5411\u51b3\u5b9a\u5c5e\u4e8e\u54ea\u4e2a bin, \u68af\u5ea6\u5927\u5c0f\u51b3\u5b9a bin \u7684\u9ad8\u5ea6. \u5c06\u6bcf\u76f8\u90bb\u7684 4 \u4e2a cells \u7684\u68af\u5ea6\u76f4\u65b9\u56fe\u538b\u6241\u4e3a 1 \u7ef4\u6570\u636e(9 x 1), \u4e32\u8054\u4e3a (36 x 1) \u7684\u65b0\u6570\u636e\u5e76\u8fdb\u884c\u6807\u51c6\u5316 \u4e32\u8054\u7b2c\u4e94\u6b65\u6240\u6709\u6570\u636e \u6bd4\u5982\u6709\u539f\u56fe 64 * 128, \u5219\u5782\u76f4\u65b9\u5411\u6709 8 \u4e2a cell, \u6c34\u5e73\u65b9\u5411\u6709 16 \u4e2a cell, \u6bcf\u76f8\u90bb\u56db\u4e2a cell \u7ec4\u5408\u4e3a\u4e00\u4e2a block, \u5219\u5782\u76f4\u65b9\u5411\u6709 7 \u4e2a block, \u6c34\u5e73\u65b9\u5411\u6709 15 \u4e2a block, \u56e0\u6b64\u6700\u7ec8\u6c42\u5f97\u7684 HOG \u7279\u5f81\u5411\u91cf\u6709 7 * 15 * 9 * 4 = 3780 \u7ef4\u5ea6. # \u8ba1\u7b97\u56fe\u50cf\u7684 HOG \u7279\u5f81 import matplotlib.pyplot as plt import skimage.color import skimage.data import skimage.exposure import skimage.feature image = skimage.color.rgb2gray(skimage.data.astronaut()) fg, hog_image = skimage.feature.hog(image, orientations=8, pixels_per_cell=(16, 16), cells_per_block=(1, 1), visualise=True) print('fg ndim:', len(fg)) hog_image_rescaled = skimage.exposure.rescale_intensity(hog_image, in_range=(0, 10)) _, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharex=True, sharey=True) ax1.axis('off') ax1.imshow(image, cmap='gray') ax1.set_title('Raw image') ax2.axis('off') ax2.imshow(hog_image_rescaled, cmap='gray') ax2.set_title('Histogram of Oriented Gradients') plt.show() SVM SVM(\u652f\u6301\u5411\u91cf\u673a) \u662f\u4e00\u7cfb\u5217\u53ef\u7528\u4e8e\u5206\u7c7b, \u56de\u5f52\u548c\u5f02\u5e38\u503c\u68c0\u6d4b\u7684\u6709\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5. \u5229\u7528 HOG + SVM \u53ef\u4ee5\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1. import sklearn.svm X = [[0, 0], [1, 1]] Y = [0, 1] clf = sklearn.svm.SVC() # \u8bad\u7ec3 clf.fit(X, Y) # \u9884\u6d4b p = clf.predict([[0.7, 0.7]])[0] print('predict of [0.7, 0.7]:', p) # predict of [0.7, 0.7]: 1 \u53c2\u8003 [1] \u7ef4\u57fa: \u65b9\u5411\u68af\u5ea6\u76f4\u65b9\u56fe https://zh.wikipedia.org/zh-hans/%E6%96%B9%E5%90%91%E6%A2%AF%E5%BA%A6%E7%9B%B4%E6%96%B9%E5%9B%BE [2] scikit-image: Histogram of Oriented Gradients http://scikit-image.org/docs/dev/auto_examples/features_detection/plot_hog.html [3] Learn Opencv: Histogram of Oriented Gradients https://www.learnopencv.com/histogram-of-oriented-gradients/","title":"\u673a\u5668\u5b66\u4e60-HOG"},{"location":"content/daze/ml/hog/#hog","text":"HOG(Histogram of Oriented Gradient: \u68af\u5ea6\u76f4\u65b9\u56fe) \u7279\u5f81\u5728\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u975e\u5e38\u6d41\u884c. \u5176\u4e3b\u8981\u601d\u60f3\u662f \u5728\u4e00\u526f\u56fe\u50cf\u4e2d, \u5c40\u90e8\u76ee\u6807\u7684\u8868\u8c61\u548c\u5f62\u72b6\u80fd\u591f\u88ab\u68af\u5ea6\u6216\u8fb9\u7f18\u7684\u65b9\u5411\u5bc6\u5ea6\u5206\u5e03\u5f88\u597d\u5730\u63cf\u8ff0(\u672c\u8d28: \u68af\u5ea6\u7684\u7edf\u8ba1\u4fe1\u606f, \u800c\u68af\u5ea6\u4e3b\u8981\u5b58\u5728\u4e8e\u8fb9\u7f18\u7684\u5730\u65b9). \u5728 https://www.learnopencv.com/histogram-of-oriented-gradients/ \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6709\u5bf9 HOG \u7b97\u6cd5\u7684\u8be6\u7ec6\u4ecb\u7ecd, \u63a8\u8350\u5b8c\u6574\u9605\u8bfb. \u63d0\u53d6\u611f\u5174\u8da3\u56fe\u50cf\u533a\u57df, \u8fdb\u884c\u7070\u5ea6\u5316 \u8ba1\u7b97 X \u65b9\u5411\u4e0e Y \u65b9\u5411\u7684\u68af\u5ea6 import numpy as np import skimage.color import skimage.io im = skimage.color.rgb2gray(skimage.io.imread('/img/jp.jpg')) gy, gx = [np.ascontiguousarray(g) for g in np.gradient(im)] \u8ba1\u7b97\u68af\u5ea6\u5e45\u503c $g$ \u548c\u65b9\u5411 $\\theta$ g = np.sqrt(gy**2 + gx**2) t = np.arctan2(gy, gx) \u5c06\u56fe\u50cf\u5206\u5272\u4e3a 8x8 \u7684 cells \u5e76\u8ba1\u7b97\u6bcf\u4e00\u4e2a cells \u7684 9-bins \u68af\u5ea6\u76f4\u65b9\u56fe. \u68af\u5ea6\u65b9\u5411\u51b3\u5b9a\u5c5e\u4e8e\u54ea\u4e2a bin, \u68af\u5ea6\u5927\u5c0f\u51b3\u5b9a bin \u7684\u9ad8\u5ea6. \u5c06\u6bcf\u76f8\u90bb\u7684 4 \u4e2a cells \u7684\u68af\u5ea6\u76f4\u65b9\u56fe\u538b\u6241\u4e3a 1 \u7ef4\u6570\u636e(9 x 1), \u4e32\u8054\u4e3a (36 x 1) \u7684\u65b0\u6570\u636e\u5e76\u8fdb\u884c\u6807\u51c6\u5316 \u4e32\u8054\u7b2c\u4e94\u6b65\u6240\u6709\u6570\u636e \u6bd4\u5982\u6709\u539f\u56fe 64 * 128, \u5219\u5782\u76f4\u65b9\u5411\u6709 8 \u4e2a cell, \u6c34\u5e73\u65b9\u5411\u6709 16 \u4e2a cell, \u6bcf\u76f8\u90bb\u56db\u4e2a cell \u7ec4\u5408\u4e3a\u4e00\u4e2a block, \u5219\u5782\u76f4\u65b9\u5411\u6709 7 \u4e2a block, \u6c34\u5e73\u65b9\u5411\u6709 15 \u4e2a block, \u56e0\u6b64\u6700\u7ec8\u6c42\u5f97\u7684 HOG \u7279\u5f81\u5411\u91cf\u6709 7 * 15 * 9 * 4 = 3780 \u7ef4\u5ea6. # \u8ba1\u7b97\u56fe\u50cf\u7684 HOG \u7279\u5f81 import matplotlib.pyplot as plt import skimage.color import skimage.data import skimage.exposure import skimage.feature image = skimage.color.rgb2gray(skimage.data.astronaut()) fg, hog_image = skimage.feature.hog(image, orientations=8, pixels_per_cell=(16, 16), cells_per_block=(1, 1), visualise=True) print('fg ndim:', len(fg)) hog_image_rescaled = skimage.exposure.rescale_intensity(hog_image, in_range=(0, 10)) _, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharex=True, sharey=True) ax1.axis('off') ax1.imshow(image, cmap='gray') ax1.set_title('Raw image') ax2.axis('off') ax2.imshow(hog_image_rescaled, cmap='gray') ax2.set_title('Histogram of Oriented Gradients') plt.show()","title":"HOG"},{"location":"content/daze/ml/hog/#svm","text":"SVM(\u652f\u6301\u5411\u91cf\u673a) \u662f\u4e00\u7cfb\u5217\u53ef\u7528\u4e8e\u5206\u7c7b, \u56de\u5f52\u548c\u5f02\u5e38\u503c\u68c0\u6d4b\u7684\u6709\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5. \u5229\u7528 HOG + SVM \u53ef\u4ee5\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1. import sklearn.svm X = [[0, 0], [1, 1]] Y = [0, 1] clf = sklearn.svm.SVC() # \u8bad\u7ec3 clf.fit(X, Y) # \u9884\u6d4b p = clf.predict([[0.7, 0.7]])[0] print('predict of [0.7, 0.7]:', p) # predict of [0.7, 0.7]: 1","title":"SVM"},{"location":"content/daze/ml/hog/#_1","text":"[1] \u7ef4\u57fa: \u65b9\u5411\u68af\u5ea6\u76f4\u65b9\u56fe https://zh.wikipedia.org/zh-hans/%E6%96%B9%E5%90%91%E6%A2%AF%E5%BA%A6%E7%9B%B4%E6%96%B9%E5%9B%BE [2] scikit-image: Histogram of Oriented Gradients http://scikit-image.org/docs/dev/auto_examples/features_detection/plot_hog.html [3] Learn Opencv: Histogram of Oriented Gradients https://www.learnopencv.com/histogram-of-oriented-gradients/","title":"\u53c2\u8003"},{"location":"content/daze/ml/neural_style_transfer/","text":"Neural Style Transfer Neural style \u662f\u8ba9\u673a\u5668\u6a21\u4eff\u5df2\u6709\u753b\u4f5c\u7684\u7ed8\u753b\u98ce\u683c\u6765\u628a\u4e00\u5f20\u56fe\u7247\u91cd\u65b0\u7ed8\u5236\u7684\u7b97\u6cd5. \u827a\u672f\u5bb6\u53ef\u80fd\u9700\u8981\u7528\u6bd5\u751f\u7684\u5fc3\u8840\u624d\u80fd\u521b\u9020\u51fa\u60ca\u4eba\u7684\u827a\u672f\u4f5c\u54c1, \u800c\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u4fbf\u53ef\u4ee5\u7528\u5f88\u77ed\u7684\u65f6\u95f4\u5c06\u666e\u901a\u56fe\u7247\u521b\u9020\u51fa\u5bcc\u6709\u5927\u5e08\u98ce\u683c\u7684\u753b\u4f5c. \u6548\u679c\u5c55\u793a: \u98ce\u683c\u8f6c\u79fb\u7b97\u6cd5\u53ef\u751f\u6210\u4e00\u5f20\u5177\u6709\u539f\u56fe\"\u5185\u5bb9\"\u4e0e\u53e6\u4e00\u5f20\u56fe\u7247\"\u98ce\u683c\"\u7684\u65b0\u7684\u56fe\u7247. \u6bd4\u5982, \u53ef\u4ee5\u5f88\u5bb9\u6613\u5c06\u68b5\u9ad8\u7684\"\u661f\u6708\u591c\"\u7684\u7ed8\u753b\u98ce\u683c\u8f6c\u79fb\u5230\u81ea\u5df1\u7684\u56fe\u7247\u4e0a. \u8fd9\u91cc, \u6211\u4eec\u4f7f\u7528 keras \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e0e VGG-16 \u6a21\u578b\u6765\u5b8c\u6210\u8fd9\u4e2a\u529f\u80fd. VGG-16: VGG-16 \u53c8\u79f0\u4e3a OxfordNet\uff0c\u662f\u7531\u725b\u6d25\u89c6\u89c9\u51e0\u4f55\u7ec4(Visual Geometry Group)\u5f00\u53d1\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784. \u8be5\u7f51\u7edc\u8d62\u5f97\u4e86 ILSVR(ImageNet)2014 \u7684\u51a0\u519b. \u65f6\u81f3\u4eca\u65e5, VGG \u4ecd\u7136\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u6770\u51fa\u7684\u89c6\u89c9\u6a21\u578b--\u5c3d\u7ba1\u5b83\u7684\u6027\u80fd\u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u540e\u6765\u7684 Inception \u548c ResNet \u8d85\u8fc7\u4e86. \u6267\u884c \u98ce\u683c\u8f6c\u79fb\u7b97\u6cd5\u5df2\u7ecf\u88ab\u5305\u542b\u5728 keras \u7684\u5b98\u65b9\u4f8b\u5b50\u91cc\u9762\u4e86: https://github.com/fchollet/keras/blob/master/examples/neural_style_transfer.py \u4e3a\u4e86\u4f7f\u7528\u5982\u4e0a\u7684\u4ee3\u7801, \u9996\u5148\u9700\u8981\u5b89\u88c5 keras: $ pip install keras \u5982\u679c\u5b89\u88c5\u51fa\u73b0\u4e86\u95ee\u9898, \u5efa\u8bae\u524d\u5f80 keras \u4e2d\u6587\u6587\u6863-\u5b89\u88c5 \u5bfb\u627e\u7b54\u6848. \u73b0\u5728, \u51c6\u5907\u4e24\u5f20\u56fe\u7247, \u4e00\u5f20\"\u5185\u5bb9\", \u4e00\u5f20\"\u98ce\u683c\", \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4: $ python neural_style_transfer.py path_to_your_base_image.jpg path_to_your_reference.jpg prefix_for_results \u5728\u5be1\u4eba\u7684 GTX 1070 GPU \u4e0a, \u8fd9\u53ea\u9700\u8981\u82b1\u8d39 80 \u79d2\u5de6\u53f3\u7684\u65f6\u95f4, \u800c\u5728 xeon CPU \u4e0a, \u53ef\u80fd\u9700\u8981\u82b1\u8d39\u6574\u6574\u4e00\u5929\u7684\u65f6\u95f4. \u8fd0\u884c\u6b63\u5e38\u7684\u8bdd, \u9ed8\u8ba4 10 \u6b21\u8fed\u4ee3\u540e\u5c06\u5f97\u5230\u603b\u5171 10 \u5f20\u4ece\"\u98ce\u683c\"\u4e0d\u65ad\u63a5\u8fd1\"\u5185\u5bb9\"\u7684\u56fe\u7247. \u5982\u679c\u5b89\u88c5\u6709 ffmpeg \u5de5\u5177, \u53ef\u4ee5\u5c06\u751f\u6210\u7684 10 \u5f20\u56fe\u7247\u6253\u5305\u6210\u4e00\u5f20 gif \u52a8\u6001\u56fe: $ ffmpeg -r 8 -i prefix_for_results_%d.jpg out.gif \u8fd9\u6837\u5c31\u80fd\u5f97\u5230\u672c\u7ad9\u4e3b\u9875\u4e0a\u90a3\u5f20\u70ab\u9177\u7684 gif \u56fe\u7247\u4e86.","title":"\u673a\u5668\u5b66\u4e60-\u56fe\u50cf\u98ce\u683c\u8f6c\u79fb"},{"location":"content/daze/ml/neural_style_transfer/#neural-style-transfer","text":"Neural style \u662f\u8ba9\u673a\u5668\u6a21\u4eff\u5df2\u6709\u753b\u4f5c\u7684\u7ed8\u753b\u98ce\u683c\u6765\u628a\u4e00\u5f20\u56fe\u7247\u91cd\u65b0\u7ed8\u5236\u7684\u7b97\u6cd5. \u827a\u672f\u5bb6\u53ef\u80fd\u9700\u8981\u7528\u6bd5\u751f\u7684\u5fc3\u8840\u624d\u80fd\u521b\u9020\u51fa\u60ca\u4eba\u7684\u827a\u672f\u4f5c\u54c1, \u800c\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u4fbf\u53ef\u4ee5\u7528\u5f88\u77ed\u7684\u65f6\u95f4\u5c06\u666e\u901a\u56fe\u7247\u521b\u9020\u51fa\u5bcc\u6709\u5927\u5e08\u98ce\u683c\u7684\u753b\u4f5c. \u6548\u679c\u5c55\u793a: \u98ce\u683c\u8f6c\u79fb\u7b97\u6cd5\u53ef\u751f\u6210\u4e00\u5f20\u5177\u6709\u539f\u56fe\"\u5185\u5bb9\"\u4e0e\u53e6\u4e00\u5f20\u56fe\u7247\"\u98ce\u683c\"\u7684\u65b0\u7684\u56fe\u7247. \u6bd4\u5982, \u53ef\u4ee5\u5f88\u5bb9\u6613\u5c06\u68b5\u9ad8\u7684\"\u661f\u6708\u591c\"\u7684\u7ed8\u753b\u98ce\u683c\u8f6c\u79fb\u5230\u81ea\u5df1\u7684\u56fe\u7247\u4e0a. \u8fd9\u91cc, \u6211\u4eec\u4f7f\u7528 keras \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e0e VGG-16 \u6a21\u578b\u6765\u5b8c\u6210\u8fd9\u4e2a\u529f\u80fd. VGG-16: VGG-16 \u53c8\u79f0\u4e3a OxfordNet\uff0c\u662f\u7531\u725b\u6d25\u89c6\u89c9\u51e0\u4f55\u7ec4(Visual Geometry Group)\u5f00\u53d1\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784. \u8be5\u7f51\u7edc\u8d62\u5f97\u4e86 ILSVR(ImageNet)2014 \u7684\u51a0\u519b. \u65f6\u81f3\u4eca\u65e5, VGG \u4ecd\u7136\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u6770\u51fa\u7684\u89c6\u89c9\u6a21\u578b--\u5c3d\u7ba1\u5b83\u7684\u6027\u80fd\u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u540e\u6765\u7684 Inception \u548c ResNet \u8d85\u8fc7\u4e86.","title":"Neural Style Transfer"},{"location":"content/daze/ml/neural_style_transfer/#_1","text":"\u98ce\u683c\u8f6c\u79fb\u7b97\u6cd5\u5df2\u7ecf\u88ab\u5305\u542b\u5728 keras \u7684\u5b98\u65b9\u4f8b\u5b50\u91cc\u9762\u4e86: https://github.com/fchollet/keras/blob/master/examples/neural_style_transfer.py \u4e3a\u4e86\u4f7f\u7528\u5982\u4e0a\u7684\u4ee3\u7801, \u9996\u5148\u9700\u8981\u5b89\u88c5 keras: $ pip install keras \u5982\u679c\u5b89\u88c5\u51fa\u73b0\u4e86\u95ee\u9898, \u5efa\u8bae\u524d\u5f80 keras \u4e2d\u6587\u6587\u6863-\u5b89\u88c5 \u5bfb\u627e\u7b54\u6848. \u73b0\u5728, \u51c6\u5907\u4e24\u5f20\u56fe\u7247, \u4e00\u5f20\"\u5185\u5bb9\", \u4e00\u5f20\"\u98ce\u683c\", \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4: $ python neural_style_transfer.py path_to_your_base_image.jpg path_to_your_reference.jpg prefix_for_results \u5728\u5be1\u4eba\u7684 GTX 1070 GPU \u4e0a, \u8fd9\u53ea\u9700\u8981\u82b1\u8d39 80 \u79d2\u5de6\u53f3\u7684\u65f6\u95f4, \u800c\u5728 xeon CPU \u4e0a, \u53ef\u80fd\u9700\u8981\u82b1\u8d39\u6574\u6574\u4e00\u5929\u7684\u65f6\u95f4. \u8fd0\u884c\u6b63\u5e38\u7684\u8bdd, \u9ed8\u8ba4 10 \u6b21\u8fed\u4ee3\u540e\u5c06\u5f97\u5230\u603b\u5171 10 \u5f20\u4ece\"\u98ce\u683c\"\u4e0d\u65ad\u63a5\u8fd1\"\u5185\u5bb9\"\u7684\u56fe\u7247. \u5982\u679c\u5b89\u88c5\u6709 ffmpeg \u5de5\u5177, \u53ef\u4ee5\u5c06\u751f\u6210\u7684 10 \u5f20\u56fe\u7247\u6253\u5305\u6210\u4e00\u5f20 gif \u52a8\u6001\u56fe: $ ffmpeg -r 8 -i prefix_for_results_%d.jpg out.gif \u8fd9\u6837\u5c31\u80fd\u5f97\u5230\u672c\u7ad9\u4e3b\u9875\u4e0a\u90a3\u5f20\u70ab\u9177\u7684 gif \u56fe\u7247\u4e86.","title":"\u6267\u884c"},{"location":"content/daze/rc4/overview/","text":"\u6982\u89c8 RC4 \u662f\u5bf9\u79f0\u6d41\u52a0\u5bc6\u7b97\u6cd5, \u5bc6\u6587\u4e0e\u660e\u6587\u957f\u5ea6\u5747\u7b49. \u5bc6\u94a5\u957f\u5ea6\u4e3a [1, 256]. \u8ba9\u5b83\u5982\u6b64\u5e7f\u6cdb\u5206\u5e03\u548c\u4f7f\u7528\u7684\u4e3b\u8981\u56e0\u7d20\u662f\u5b83 \u4e0d\u53ef\u601d\u8bae\u7684\u7b80\u5355\u548c\u901f\u5ea6 . RC4 \u751f\u6210\u4f2a\u968f\u673a\u6bd4\u7279\u6d41, \u5e76\u4e8e\u660e\u6587\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c. \u4e3a\u4e86\u751f\u6210\u6bd4\u7279\u6d41, \u52a0\u5bc6\u7b97\u6cd5\u4f7f\u7528\u7531\u4e24\u90e8\u5206\u7ec4\u6210\u5185\u90e8\u72b6\u6001: \u5305\u542b 1 \u81f3 255 \u7684 256 \u4f4d\u6570\u7ec4(\u79f0\u4e3a s \u76d2) 2 \u4e2a 8-bit \u7d22\u5f15(\u79f0\u4e3a i \u548c j) \u9996\u5148, \u521d\u59cb\u5316\u957f\u5ea6\u4e3a256\u7684 s \u76d2. \u7b2c\u4e00\u4e2a for \u5faa\u73af\u5c06 0 \u5230 255 \u7684\u4e92\u4e0d\u91cd\u590d\u7684\u5143\u7d20\u88c5\u5165 s \u76d2. \u7b2c\u4e8c\u4e2a for \u5faa\u73af\u6839\u636e\u5bc6\u94a5\u6253\u4e71 s \u76d2. for i from 0 to 255 S[i] := i endfor j := 0 for i from 0 to 255 j := (j + S[i] + key[i mod keylength]) mod 256 swap values of S[i] and S[j] endfor \u4e0b\u9762 i, j \u662f\u4e24\u4e2a\u6307\u9488. \u6bcf\u6536\u5230\u4e00\u4e2a\u5b57\u8282, \u5c31\u8fdb\u884c\u4e00\u6b21\u5faa\u73af. i := 0 j := 0 while GeneratingOutput: i := (i + 1) mod 256 //a j := (j + S[i]) mod 256 //b swap values of S[i] and S[j] //c k := inputByte ^ S[(S[i] + S[j]) % 256] output K endwhile \u6b64\u7b97\u6cd5\u4fdd\u8bc1\u6bcf256\u6b21\u5faa\u73af\u4e2dS\u76d2\u7684\u6bcf\u4e2a\u5143\u7d20\u81f3\u5c11\u88ab\u4ea4\u6362\u8fc7\u4e00\u6b21. \u4ee3\u7801\u5b9e\u73b0 \u4e0b\u793a python \u4ee3\u7801\u4e3b\u8981\u7ffb\u8bd1\u81ea go \u6807\u51c6\u5e93 crypto/rc4 . class KeySizeError(Exception): pass class Cipher: def __init__(self, key): assert isinstance(key, bytes) self.s = list(range(256)) self.i = 0 self.j = 0 self.key = key k = len(key) if k < 1 or k > 256: raise KeySizeError('crypto/rc4: invalid key size ' + str(k)) j = 0 for i in range(256): j = (j + self.s[i] + key[i % k]) % 256 self.s[i], self.s[j] = self.s[j], self.s[i] def __str__(self): return f'rc4.Cipher(key={self.key})' def crypto(self, src, dst): i, j = self.i, self.j for k, v in enumerate(src): i = (i + 1) % 256 j = (j + self.s[i]) % 256 self.s[i], self.s[j] = self.s[j], self.s[i] dst[k] = v ^ self.s[(self.s[i] + self.s[j]) % 256] % 256 self.i, self.j = i, j def stream(self, src, dst): c = 8192 buf = list(range(c)) while True: ctx = src.read(c) if not ctx: break n = len(ctx) self.crypto(ctx, buf) dst.write(bytes(buf[:n])) if __name__ == '__main__': c = Cipher(b'secret') src = b'The quick brown fox jumps over the lazy dog' dst = list(range(len(src))) c.crypto(src, dst) print(bytes(dst)) \u53c2\u8003 [1] \u7ef4\u57fa: RC4 https://en.wikipedia.org/wiki/RC4 [2] Go: crypto/rc4 \u6807\u51c6\u5e93 https://github.com/golang/go/blob/master/src/crypto/rc4/rc4.go","title":"\u52a0\u5bc6\u7b97\u6cd5-RC4-\u6982\u89c8"},{"location":"content/daze/rc4/overview/#_1","text":"RC4 \u662f\u5bf9\u79f0\u6d41\u52a0\u5bc6\u7b97\u6cd5, \u5bc6\u6587\u4e0e\u660e\u6587\u957f\u5ea6\u5747\u7b49. \u5bc6\u94a5\u957f\u5ea6\u4e3a [1, 256]. \u8ba9\u5b83\u5982\u6b64\u5e7f\u6cdb\u5206\u5e03\u548c\u4f7f\u7528\u7684\u4e3b\u8981\u56e0\u7d20\u662f\u5b83 \u4e0d\u53ef\u601d\u8bae\u7684\u7b80\u5355\u548c\u901f\u5ea6 . RC4 \u751f\u6210\u4f2a\u968f\u673a\u6bd4\u7279\u6d41, \u5e76\u4e8e\u660e\u6587\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c. \u4e3a\u4e86\u751f\u6210\u6bd4\u7279\u6d41, \u52a0\u5bc6\u7b97\u6cd5\u4f7f\u7528\u7531\u4e24\u90e8\u5206\u7ec4\u6210\u5185\u90e8\u72b6\u6001: \u5305\u542b 1 \u81f3 255 \u7684 256 \u4f4d\u6570\u7ec4(\u79f0\u4e3a s \u76d2) 2 \u4e2a 8-bit \u7d22\u5f15(\u79f0\u4e3a i \u548c j) \u9996\u5148, \u521d\u59cb\u5316\u957f\u5ea6\u4e3a256\u7684 s \u76d2. \u7b2c\u4e00\u4e2a for \u5faa\u73af\u5c06 0 \u5230 255 \u7684\u4e92\u4e0d\u91cd\u590d\u7684\u5143\u7d20\u88c5\u5165 s \u76d2. \u7b2c\u4e8c\u4e2a for \u5faa\u73af\u6839\u636e\u5bc6\u94a5\u6253\u4e71 s \u76d2. for i from 0 to 255 S[i] := i endfor j := 0 for i from 0 to 255 j := (j + S[i] + key[i mod keylength]) mod 256 swap values of S[i] and S[j] endfor \u4e0b\u9762 i, j \u662f\u4e24\u4e2a\u6307\u9488. \u6bcf\u6536\u5230\u4e00\u4e2a\u5b57\u8282, \u5c31\u8fdb\u884c\u4e00\u6b21\u5faa\u73af. i := 0 j := 0 while GeneratingOutput: i := (i + 1) mod 256 //a j := (j + S[i]) mod 256 //b swap values of S[i] and S[j] //c k := inputByte ^ S[(S[i] + S[j]) % 256] output K endwhile \u6b64\u7b97\u6cd5\u4fdd\u8bc1\u6bcf256\u6b21\u5faa\u73af\u4e2dS\u76d2\u7684\u6bcf\u4e2a\u5143\u7d20\u81f3\u5c11\u88ab\u4ea4\u6362\u8fc7\u4e00\u6b21.","title":"\u6982\u89c8"},{"location":"content/daze/rc4/overview/#_2","text":"\u4e0b\u793a python \u4ee3\u7801\u4e3b\u8981\u7ffb\u8bd1\u81ea go \u6807\u51c6\u5e93 crypto/rc4 . class KeySizeError(Exception): pass class Cipher: def __init__(self, key): assert isinstance(key, bytes) self.s = list(range(256)) self.i = 0 self.j = 0 self.key = key k = len(key) if k < 1 or k > 256: raise KeySizeError('crypto/rc4: invalid key size ' + str(k)) j = 0 for i in range(256): j = (j + self.s[i] + key[i % k]) % 256 self.s[i], self.s[j] = self.s[j], self.s[i] def __str__(self): return f'rc4.Cipher(key={self.key})' def crypto(self, src, dst): i, j = self.i, self.j for k, v in enumerate(src): i = (i + 1) % 256 j = (j + self.s[i]) % 256 self.s[i], self.s[j] = self.s[j], self.s[i] dst[k] = v ^ self.s[(self.s[i] + self.s[j]) % 256] % 256 self.i, self.j = i, j def stream(self, src, dst): c = 8192 buf = list(range(c)) while True: ctx = src.read(c) if not ctx: break n = len(ctx) self.crypto(ctx, buf) dst.write(bytes(buf[:n])) if __name__ == '__main__': c = Cipher(b'secret') src = b'The quick brown fox jumps over the lazy dog' dst = list(range(len(src))) c.crypto(src, dst) print(bytes(dst))","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/rc4/overview/#_3","text":"[1] \u7ef4\u57fa: RC4 https://en.wikipedia.org/wiki/RC4 [2] Go: crypto/rc4 \u6807\u51c6\u5e93 https://github.com/golang/go/blob/master/src/crypto/rc4/rc4.go","title":"\u53c2\u8003"},{"location":"content/daze/rc4/performance_testing/","text":"RC4 \u6027\u80fd\u6d4b\u8bd5 \u5728\u4f7f\u7528 python \u7248\u672c rc4 \u7b97\u6cd5\u65f6\u53d1\u73b0\u6027\u80fd\u8f83\u5dee, \u51e0\u4e4e\u65e0\u6cd5\u5b9e\u65f6\u52a0\u89e3\u5bc6\u64ad\u653e youtube \u89c6\u9891, \u56e0\u6b64\u5bf9 rc4 \u7b97\u6cd5\u505a\u4e86\u4e00\u6b21\u6027\u80fd\u6d4b\u8bd5, \u6d4b\u8bd5\u5bf9\u8c61\u662f\u81ea\u5df1\u5199\u7684 rc4 \u548c\u5176\u4ed6\u8bed\u8a00\u7248\u672c. $ dd if=/dev/urandom of=/tmp/src count=128 bs=1M \u751f\u6210\u4e00\u4e2a 128M \u7684\u6d4b\u8bd5\u6587\u4ef6. \u7f16\u5199\u5982\u4e0b\u6d4b\u8bd5\u4ee3\u7801: python import rc4 src = '/tmp/src' dst = '/tmp/dst_py' k = 'mohanson' cipher = rc4.Cipher(k.encode()) with open(src, 'rb') as r, open(dst, 'wb') as w: cipher.stream(r, w) go package main import ( \"crypto/cipher\" \"crypto/rc4\" \"io\" \"log\" \"os\" ) var ( src = \"/tmp/src\" dst = \"/tmp/dst_go\" k = \"mohanson\" ) func main() { r, err := os.Open(src) if err != nil { log.Fatalln(err) } defer r.Close() w, err := os.OpenFile(dst, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644) if err != nil { log.Fatalln(err) } defer w.Close() c, _ := rc4.NewCipher([]byte(k)) if _, err := io.Copy(w, cipher.StreamReader{S: c, R: r}); err != nil { log.Fatalln(err) } } rust [dependencies] rust-crypto = \"^0.2\" extern crate crypto; use std::fs::File; use std::io::prelude::*; use crypto::symmetriccipher::SynchronousStreamCipher; fn main() { let src = \"/tmp/src\"; let dst = \"/tmp/dst_rs\"; let k = \"mohanson\"; let mut f_src = File::open(src).unwrap(); let mut f_dst = File::create(dst).unwrap(); let mut cipher = crypto::rc4::Rc4::new(k.as_bytes()); let mut b_src = [0; 4096]; let mut b_dst = [0; 4096]; let mut n: usize; loop { n = f_src.read(&mut b_src[..]).unwrap(); if n == 0 { break; } cipher.process(&b_src[..n], &mut b_dst[..n]); f_dst.write(&b_dst[..n]).unwrap(); } } \u6d4b\u8bd5\u5c0f\u7ed3 $ time python3 main.py # 153.17s $ go build -o main main.go && time ./main # 1.34s $ cargo build --release && time ./target/main # 7.16s # \u8ba1\u7b97\u8f93\u51fa MD5 \u786e\u4fdd\u4e00\u81f4 $ md5sum /tmp/dst_* # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_py # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_go # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_rs python \u7248\u672c\u53ea\u80fd\u505a\u5230 0.836M/S \u7684\u8ba1\u7b97\u901f\u5ea6, \u6027\u80fd\u4e0e go \u76f8\u5dee 114 \u500d! \u602a\u4e0d\u5f97\u770b\u89c6\u9891\u8fd9\u4e48\u5361, \u4e0d\u80fd\u5fcd(\u4e8b\u5b9e\u4e0a\u4f5c\u8005\u5df2\u7ecf\u6295\u5165 go \u7684\u6000\u62b1)... go \u7248\u672c\u6027\u80fd\u662f rust \u7684 5.3 \u500d, \u5f88\u5927\u539f\u56e0\u5728\u4e8e go \u7248\u672c rc4 \u5176\u5b9e\u662f\u6c47\u7f16\u5b9e\u73b0(\u4e5f\u5305\u62ec\u5f88\u591a\u5176\u4ed6\u7b97\u6cd5).","title":"\u52a0\u5bc6\u7b97\u6cd5-RC4-\u6027\u80fd\u6d4b\u8bd5"},{"location":"content/daze/rc4/performance_testing/#rc4","text":"\u5728\u4f7f\u7528 python \u7248\u672c rc4 \u7b97\u6cd5\u65f6\u53d1\u73b0\u6027\u80fd\u8f83\u5dee, \u51e0\u4e4e\u65e0\u6cd5\u5b9e\u65f6\u52a0\u89e3\u5bc6\u64ad\u653e youtube \u89c6\u9891, \u56e0\u6b64\u5bf9 rc4 \u7b97\u6cd5\u505a\u4e86\u4e00\u6b21\u6027\u80fd\u6d4b\u8bd5, \u6d4b\u8bd5\u5bf9\u8c61\u662f\u81ea\u5df1\u5199\u7684 rc4 \u548c\u5176\u4ed6\u8bed\u8a00\u7248\u672c. $ dd if=/dev/urandom of=/tmp/src count=128 bs=1M \u751f\u6210\u4e00\u4e2a 128M \u7684\u6d4b\u8bd5\u6587\u4ef6. \u7f16\u5199\u5982\u4e0b\u6d4b\u8bd5\u4ee3\u7801:","title":"RC4 \u6027\u80fd\u6d4b\u8bd5"},{"location":"content/daze/rc4/performance_testing/#python","text":"import rc4 src = '/tmp/src' dst = '/tmp/dst_py' k = 'mohanson' cipher = rc4.Cipher(k.encode()) with open(src, 'rb') as r, open(dst, 'wb') as w: cipher.stream(r, w)","title":"python"},{"location":"content/daze/rc4/performance_testing/#go","text":"package main import ( \"crypto/cipher\" \"crypto/rc4\" \"io\" \"log\" \"os\" ) var ( src = \"/tmp/src\" dst = \"/tmp/dst_go\" k = \"mohanson\" ) func main() { r, err := os.Open(src) if err != nil { log.Fatalln(err) } defer r.Close() w, err := os.OpenFile(dst, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644) if err != nil { log.Fatalln(err) } defer w.Close() c, _ := rc4.NewCipher([]byte(k)) if _, err := io.Copy(w, cipher.StreamReader{S: c, R: r}); err != nil { log.Fatalln(err) } }","title":"go"},{"location":"content/daze/rc4/performance_testing/#rust","text":"[dependencies] rust-crypto = \"^0.2\" extern crate crypto; use std::fs::File; use std::io::prelude::*; use crypto::symmetriccipher::SynchronousStreamCipher; fn main() { let src = \"/tmp/src\"; let dst = \"/tmp/dst_rs\"; let k = \"mohanson\"; let mut f_src = File::open(src).unwrap(); let mut f_dst = File::create(dst).unwrap(); let mut cipher = crypto::rc4::Rc4::new(k.as_bytes()); let mut b_src = [0; 4096]; let mut b_dst = [0; 4096]; let mut n: usize; loop { n = f_src.read(&mut b_src[..]).unwrap(); if n == 0 { break; } cipher.process(&b_src[..n], &mut b_dst[..n]); f_dst.write(&b_dst[..n]).unwrap(); } }","title":"rust"},{"location":"content/daze/rc4/performance_testing/#_1","text":"$ time python3 main.py # 153.17s $ go build -o main main.go && time ./main # 1.34s $ cargo build --release && time ./target/main # 7.16s # \u8ba1\u7b97\u8f93\u51fa MD5 \u786e\u4fdd\u4e00\u81f4 $ md5sum /tmp/dst_* # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_py # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_go # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_rs python \u7248\u672c\u53ea\u80fd\u505a\u5230 0.836M/S \u7684\u8ba1\u7b97\u901f\u5ea6, \u6027\u80fd\u4e0e go \u76f8\u5dee 114 \u500d! \u602a\u4e0d\u5f97\u770b\u89c6\u9891\u8fd9\u4e48\u5361, \u4e0d\u80fd\u5fcd(\u4e8b\u5b9e\u4e0a\u4f5c\u8005\u5df2\u7ecf\u6295\u5165 go \u7684\u6000\u62b1)... go \u7248\u672c\u6027\u80fd\u662f rust \u7684 5.3 \u500d, \u5f88\u5927\u539f\u56e0\u5728\u4e8e go \u7248\u672c rc4 \u5176\u5b9e\u662f\u6c47\u7f16\u5b9e\u73b0(\u4e5f\u5305\u62ec\u5f88\u591a\u5176\u4ed6\u7b97\u6cd5).","title":"\u6d4b\u8bd5\u5c0f\u7ed3"},{"location":"content/daze/sklearn/bayes/","text":"\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u7528\u4e8e\u89e3\u51b3\u5206\u7c7b\u95ee\u9898. sklearn \u4e2d\u5b9e\u73b0\u4e86\u4e09\u79cd\u4e0d\u540c\u7684\u8d1d\u53f6\u65af\u5206\u7c7b\u5668, \u5206\u522b\u662f GaussianNB , MultinomialNB \u548c BernoulliNB . \u9ad8\u65af\u8d1d\u53f6\u65af\u5206\u7c7b\u5668 import sklearn.datasets import sklearn.naive_bayes import sklearn.metrics iris = sklearn.datasets.load_iris() gnb = sklearn.naive_bayes.GaussianNB() gnb.fit(iris.data, iris.target) y_pred = gnb.predict(iris.data) acc = sklearn.metrics.classification_report(iris.target, y_pred) print(acc) partial_fit \u5982\u679c\u8bad\u7ec3\u96c6\u6570\u636e\u8fc7\u5927, \u65e0\u6cd5\u4e00\u6b21\u6027\u8bfb\u5165\u5185\u5b58, \u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u63d0\u4f9b\u4e86 partial_fit \u51fd\u6570, \u4ee5\u8fdb\u884c\u52a8\u6001\u6570\u636e\u52a0\u8f7d, \u7528\u4e0e\u9012\u589e\u5f0f\u5b66\u4e60. \u8981\u6ce8\u610f\u7684\u662f, \u7b2c\u4e00\u6b21\u8c03\u7528 partial_fit \u65f6\u9700\u8981\u5c06 classes \u5168\u90e8\u4f20\u5165. import numpy as np import sklearn.datasets import sklearn.metrics import sklearn.naive_bayes iris = sklearn.datasets.load_iris() indices = np.arange(len(iris.data), dtype=np.int) np.random.shuffle(indices) x = iris.data[indices] y = iris.target[indices] indices = np.linspace(0, len(x), 4).astype(np.int) x1 = x[indices[0]:indices[1]] y1 = y[indices[0]:indices[1]] x2 = x[indices[1]:indices[2]] y2 = y[indices[1]:indices[2]] x3 = x[indices[2]:indices[3]] y3 = y[indices[2]:indices[3]] gnb = sklearn.naive_bayes.GaussianNB() gnb.partial_fit(x1, y1, classes=[0, 1, 2]) gnb.partial_fit(x2, y2) gnb.partial_fit(x3, y3) y_pred = gnb.predict(iris.data) acc = sklearn.metrics.classification_report(iris.target, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 50 1 0.94 0.94 0.94 50 2 0.94 0.94 0.94 50 avg / total 0.96 0.96 0.96 150","title":"sklearn-\u8d1d\u53f6\u65af\u5206\u7c7b\u5668"},{"location":"content/daze/sklearn/bayes/#_1","text":"import sklearn.datasets import sklearn.naive_bayes import sklearn.metrics iris = sklearn.datasets.load_iris() gnb = sklearn.naive_bayes.GaussianNB() gnb.fit(iris.data, iris.target) y_pred = gnb.predict(iris.data) acc = sklearn.metrics.classification_report(iris.target, y_pred) print(acc)","title":"\u9ad8\u65af\u8d1d\u53f6\u65af\u5206\u7c7b\u5668"},{"location":"content/daze/sklearn/bayes/#partial_fit","text":"\u5982\u679c\u8bad\u7ec3\u96c6\u6570\u636e\u8fc7\u5927, \u65e0\u6cd5\u4e00\u6b21\u6027\u8bfb\u5165\u5185\u5b58, \u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u63d0\u4f9b\u4e86 partial_fit \u51fd\u6570, \u4ee5\u8fdb\u884c\u52a8\u6001\u6570\u636e\u52a0\u8f7d, \u7528\u4e0e\u9012\u589e\u5f0f\u5b66\u4e60. \u8981\u6ce8\u610f\u7684\u662f, \u7b2c\u4e00\u6b21\u8c03\u7528 partial_fit \u65f6\u9700\u8981\u5c06 classes \u5168\u90e8\u4f20\u5165. import numpy as np import sklearn.datasets import sklearn.metrics import sklearn.naive_bayes iris = sklearn.datasets.load_iris() indices = np.arange(len(iris.data), dtype=np.int) np.random.shuffle(indices) x = iris.data[indices] y = iris.target[indices] indices = np.linspace(0, len(x), 4).astype(np.int) x1 = x[indices[0]:indices[1]] y1 = y[indices[0]:indices[1]] x2 = x[indices[1]:indices[2]] y2 = y[indices[1]:indices[2]] x3 = x[indices[2]:indices[3]] y3 = y[indices[2]:indices[3]] gnb = sklearn.naive_bayes.GaussianNB() gnb.partial_fit(x1, y1, classes=[0, 1, 2]) gnb.partial_fit(x2, y2) gnb.partial_fit(x3, y3) y_pred = gnb.predict(iris.data) acc = sklearn.metrics.classification_report(iris.target, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 50 1 0.94 0.94 0.94 50 2 0.94 0.94 0.94 50 avg / total 0.96 0.96 0.96 150","title":"partial_fit"},{"location":"content/daze/sklearn/cluster/","text":"\u805a\u7c7b sklearn \u5b98\u65b9\u7ed9\u51fa\u4e86\u4e00\u4efd\u5404\u79cd\u805a\u7c7b\u6a21\u578b\u9002\u7528\u573a\u666f\u548c\u8c03\u53c2\u5efa\u8bae, \u6458\u5f55\u5982\u4e0b: http://sklearn.apachecn.org/cn/0.19.0/modules/clustering.html#id2 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a k-means \u805a\u7c7b\u7684\u4f7f\u7528\u4f8b\u5b50: k-means \u7b97\u6cd5\u5c06\u4e00\u7ec4 N \u6837\u672c X \u5212\u5206\u6210 K \u4e0d\u76f8\u4ea4\u7684 clusters(\u7c07). \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5fc5\u987b\u4e8b\u524d\u8bbe\u5b9a K \u7684\u503c(\u5373\u77e5\u9053\u5f85\u5206\u7c7b\u6837\u672c\u4e2d\u7c07\u7684\u6570\u91cf). import matplotlib.pyplot as plt import sklearn.cluster import sklearn.datasets n_samples = 1500 random_state = 170 # \u968f\u673a\u751f\u6210 3 \u4e2a\u9ad8\u65af\u5206\u5e03\u7684\u7c07 x, y = sklearn.datasets.make_blobs(n_samples=n_samples, random_state=random_state) y_pred = sklearn.cluster.KMeans(n_clusters=3).fit_predict(x) plt.scatter(x[:, 0], x[:, 1], c=y_pred) plt.show()","title":"sklearn-\u805a\u7c7b"},{"location":"content/daze/sklearn/cluster/#_1","text":"sklearn \u5b98\u65b9\u7ed9\u51fa\u4e86\u4e00\u4efd\u5404\u79cd\u805a\u7c7b\u6a21\u578b\u9002\u7528\u573a\u666f\u548c\u8c03\u53c2\u5efa\u8bae, \u6458\u5f55\u5982\u4e0b: http://sklearn.apachecn.org/cn/0.19.0/modules/clustering.html#id2 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a k-means \u805a\u7c7b\u7684\u4f7f\u7528\u4f8b\u5b50: k-means \u7b97\u6cd5\u5c06\u4e00\u7ec4 N \u6837\u672c X \u5212\u5206\u6210 K \u4e0d\u76f8\u4ea4\u7684 clusters(\u7c07). \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5fc5\u987b\u4e8b\u524d\u8bbe\u5b9a K \u7684\u503c(\u5373\u77e5\u9053\u5f85\u5206\u7c7b\u6837\u672c\u4e2d\u7c07\u7684\u6570\u91cf). import matplotlib.pyplot as plt import sklearn.cluster import sklearn.datasets n_samples = 1500 random_state = 170 # \u968f\u673a\u751f\u6210 3 \u4e2a\u9ad8\u65af\u5206\u5e03\u7684\u7c07 x, y = sklearn.datasets.make_blobs(n_samples=n_samples, random_state=random_state) y_pred = sklearn.cluster.KMeans(n_clusters=3).fit_predict(x) plt.scatter(x[:, 0], x[:, 1], c=y_pred) plt.show()","title":"\u805a\u7c7b"},{"location":"content/daze/sklearn/evaluation/","text":"\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6 \u5b66\u4e60\u9884\u6d4b\u51fd\u6570\u7684\u53c2\u6570, \u5e76\u5728\u76f8\u540c\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u662f\u4e00\u79cd\u9519\u8bef\u7684\u505a\u6cd5: \u4e00\u4e2a\u4ec5\u7ed9\u51fa\u6d4b\u8bd5\u7528\u4f8b\u6807\u7b7e\u7684\u6a21\u578b\u5c06\u4f1a\u83b7\u5f97\u6781\u9ad8\u7684\u5206\u6570, \u4f46\u5bf9\u4e8e\u5c1a\u672a\u51fa\u73b0\u8fc7\u7684\u6570\u636e\u5b83\u5219\u65e0\u6cd5\u9884\u6d4b\u51fa\u4efb\u4f55\u6709\u7528\u7684\u4fe1\u606f. \u8fd9\u79cd\u60c5\u51b5\u79f0\u4e3a overfitting(\u8fc7\u62df\u5408). \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5, \u5728\u8fdb\u884c(\u76d1\u7763)\u673a\u5668\u5b66\u4e60\u5b9e\u9a8c\u65f6, \u901a\u5e38\u53d6\u51fa\u90e8\u5206\u53ef\u5229\u7528\u6570\u636e\u4f5c\u4e3a test set(\u6d4b\u8bd5\u6570\u636e\u96c6). \u5229\u7528 scikit-learn \u5305\u4e2d\u7684 train_test_split \u8f85\u52a9\u51fd\u6570\u53ef\u4ee5\u5f88\u5feb\u5730\u5c06\u5b9e\u9a8c\u6570\u636e\u96c6\u5212\u5206\u4e3a\u4efb\u4f55\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6. import sklearn.model_selection import sklearn.datasets iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.4, random_state=0) print(x_train.shape, y_train.shape, x_test.shape, y_test.shape) # (90, 4) (90,) (60, 4) (60,) \u4ea4\u53c9\u9a8c\u8bc1 \u5c06\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u673a, \u5927\u5927\u51cf\u5c11\u4e86\u53ef\u7528\u4e8e\u8bad\u7ec3\u7684\u6570\u636e\u91cf\u7684\u5927\u5c0f. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u89e3\u51b3. \u4ea4\u53c9\u9a8c\u8bc1\u5c06\u6570\u636e\u96c6\u5212\u5206\u4e3a k \u4e2a\u5b50\u96c6, \u7136\u540e\u4f7f\u7528 k-1 \u4e2a\u5b50\u96c6\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3, \u5269\u4e0b\u4e00\u4e2a\u7528\u4e8e\u6a21\u578b\u9a8c\u8bc1, \u5e76\u91cd\u590d k \u6b21. \u4ea4\u53c9\u9a8c\u8bc1\u5f97\u51fa\u7684\u6027\u80fd\u6307\u6807\u662f\u5faa\u73af\u8ba1\u7b97\u4e2d\u6bcf\u4e2a\u503c\u7684\u5e73\u5747\u503c. \u8be5\u65b9\u6cd5\u867d\u7136\u8ba1\u7b97\u4ee3\u4ef7\u5f88\u9ad8, \u4f46\u662f\u5b83\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a\u7684\u6570\u636e, \u5728\u5904\u7406\u6837\u672c\u6570\u636e\u96c6\u8f83\u5c11\u7684\u95ee\u9898(\u4f8b\u5982, \u9006\u5411\u63a8\u7406)\u65f6\u6bd4\u8f83\u6709\u4f18\u52bf. \u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728\u4f30\u8ba1\u5668\u548c\u6570\u636e\u96c6\u4e0a\u8c03\u7528 cross_val_score \u8f85\u52a9\u51fd\u6570. import sklearn.datasets import sklearn.model_selection import sklearn.svm iris = sklearn.datasets.load_iris() clf = sklearn.svm.SVC(kernel='linear', C=1) scores = sklearn.model_selection.cross_val_score(clf, iris.data, iris.target, cv=5) print('Accuracy: %0.2f (+/- %0.2f)' % (scores.mean(), scores.std() * 2)) # Accuracy: 0.98 (+/- 0.03) \u4ea4\u53c9\u9a8c\u8bc1\u7684\u4e3b\u8981\u4f5c\u7528\u5982\u4e0b: \u7528\u4e8e\u6a21\u578b\u9009\u62e9. \u5982\u8bc4\u4f30 kNN, SVM \u5728\u540c\u4e00\u6570\u636e\u96c6\u4e0b\u7684\u8868\u73b0. \u7528\u4e8e\u6a21\u578b\u8c03\u53c2. \u7528\u4e8e\u7279\u5f81\u9009\u62e9. \u5982\u8bc4\u4f30\u5e94\u4f7f\u7528\u6570\u636e\u96c6\u4e2d\u7684\u54ea\u4e9b\u7279\u5f81\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3. \u8d85\u53c2\u6570\u4e0e\u7f51\u683c\u641c\u7d22 \u8d85\u53c2\u6570, \u5373\u4e0d\u76f4\u63a5\u5728\u4f30\u8ba1\u5668\u5185\u5b66\u4e60\u7684\u53c2\u6570. \u5728 scikit-learn \u5305\u4e2d, \u5b83\u4eec\u4f5c\u4e3a\u4f30\u8ba1\u5668\u7c7b\u4e2d\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4f20\u9012. \u5178\u578b\u7684\u4f8b\u5b50\u6709: \u7528\u4e8e\u652f\u6301\u5411\u91cf\u5206\u7c7b\u5668\u7684 C, kernel \u548c gamma, \u7528\u4e8e Lasso \u7684 alpha \u7b49. sklearn.model_selection.GridSearchCV \u7f51\u683c\u641c\u7d22\u901a\u8fc7\u7a77\u5c3d\u6240\u7ed9\u51fa\u7684\u6240\u6709\u8d85\u53c2\u6570\u5019\u9009\u7684\u6392\u5217\u7ec4\u5408, \u81ea\u52a8\u9009\u62e9\u6700\u4f18\u53c2\u6570\u7ec4\u5408. \u7f51\u683c\u6cd5\u662f\u76ee\u524d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u53c2\u6570\u4f18\u5316\u65b9\u6cd5. import sklearn.datasets import sklearn.model_selection import sklearn.svm iris = sklearn.datasets.load_iris() # kernal \u53c2\u6570\u4ece ['linear', 'rbf'] \u9009\u62e9, C \u53c2\u6570\u4ece [1, 10] \u9009\u62e9, # \u56e0\u6b64\u603b\u8ba1 4 \u7ec4\u5019\u9009\u53c2\u6570 parameters = {'kernel': ('linear', 'rbf'), 'C': [1, 10]} svc = sklearn.svm.SVC() clf = sklearn.model_selection.GridSearchCV(svc, parameters) clf.fit(iris.data, iris.target) print(clf.best_params_) # \u6253\u5370\u6700\u4f18\u53c2\u6570 # {'C': 1, 'kernel': 'linear'} \u6a21\u578b\u8bc4\u4f30 \u901a\u5e38\u60c5\u51b5\u4e0b, \u4f7f\u7528\u4ee5\u4e0b\u6307\u6807\u8bc4\u4f30\u8bad\u7ec3\u540e\u7684\u6a21\u578b. \u5206\u7c7b\u6307\u6807: http://sklearn.apachecn.org/cn/0.19.0/modules/model_evaluation.html#classification-metrics","title":"sklearn-\u8bc4\u4f30"},{"location":"content/daze/sklearn/evaluation/#_1","text":"\u5b66\u4e60\u9884\u6d4b\u51fd\u6570\u7684\u53c2\u6570, \u5e76\u5728\u76f8\u540c\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u662f\u4e00\u79cd\u9519\u8bef\u7684\u505a\u6cd5: \u4e00\u4e2a\u4ec5\u7ed9\u51fa\u6d4b\u8bd5\u7528\u4f8b\u6807\u7b7e\u7684\u6a21\u578b\u5c06\u4f1a\u83b7\u5f97\u6781\u9ad8\u7684\u5206\u6570, \u4f46\u5bf9\u4e8e\u5c1a\u672a\u51fa\u73b0\u8fc7\u7684\u6570\u636e\u5b83\u5219\u65e0\u6cd5\u9884\u6d4b\u51fa\u4efb\u4f55\u6709\u7528\u7684\u4fe1\u606f. \u8fd9\u79cd\u60c5\u51b5\u79f0\u4e3a overfitting(\u8fc7\u62df\u5408). \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5, \u5728\u8fdb\u884c(\u76d1\u7763)\u673a\u5668\u5b66\u4e60\u5b9e\u9a8c\u65f6, \u901a\u5e38\u53d6\u51fa\u90e8\u5206\u53ef\u5229\u7528\u6570\u636e\u4f5c\u4e3a test set(\u6d4b\u8bd5\u6570\u636e\u96c6). \u5229\u7528 scikit-learn \u5305\u4e2d\u7684 train_test_split \u8f85\u52a9\u51fd\u6570\u53ef\u4ee5\u5f88\u5feb\u5730\u5c06\u5b9e\u9a8c\u6570\u636e\u96c6\u5212\u5206\u4e3a\u4efb\u4f55\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6. import sklearn.model_selection import sklearn.datasets iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.4, random_state=0) print(x_train.shape, y_train.shape, x_test.shape, y_test.shape) # (90, 4) (90,) (60, 4) (60,)","title":"\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6"},{"location":"content/daze/sklearn/evaluation/#_2","text":"\u5c06\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u673a, \u5927\u5927\u51cf\u5c11\u4e86\u53ef\u7528\u4e8e\u8bad\u7ec3\u7684\u6570\u636e\u91cf\u7684\u5927\u5c0f. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u89e3\u51b3. \u4ea4\u53c9\u9a8c\u8bc1\u5c06\u6570\u636e\u96c6\u5212\u5206\u4e3a k \u4e2a\u5b50\u96c6, \u7136\u540e\u4f7f\u7528 k-1 \u4e2a\u5b50\u96c6\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3, \u5269\u4e0b\u4e00\u4e2a\u7528\u4e8e\u6a21\u578b\u9a8c\u8bc1, \u5e76\u91cd\u590d k \u6b21. \u4ea4\u53c9\u9a8c\u8bc1\u5f97\u51fa\u7684\u6027\u80fd\u6307\u6807\u662f\u5faa\u73af\u8ba1\u7b97\u4e2d\u6bcf\u4e2a\u503c\u7684\u5e73\u5747\u503c. \u8be5\u65b9\u6cd5\u867d\u7136\u8ba1\u7b97\u4ee3\u4ef7\u5f88\u9ad8, \u4f46\u662f\u5b83\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a\u7684\u6570\u636e, \u5728\u5904\u7406\u6837\u672c\u6570\u636e\u96c6\u8f83\u5c11\u7684\u95ee\u9898(\u4f8b\u5982, \u9006\u5411\u63a8\u7406)\u65f6\u6bd4\u8f83\u6709\u4f18\u52bf. \u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728\u4f30\u8ba1\u5668\u548c\u6570\u636e\u96c6\u4e0a\u8c03\u7528 cross_val_score \u8f85\u52a9\u51fd\u6570. import sklearn.datasets import sklearn.model_selection import sklearn.svm iris = sklearn.datasets.load_iris() clf = sklearn.svm.SVC(kernel='linear', C=1) scores = sklearn.model_selection.cross_val_score(clf, iris.data, iris.target, cv=5) print('Accuracy: %0.2f (+/- %0.2f)' % (scores.mean(), scores.std() * 2)) # Accuracy: 0.98 (+/- 0.03) \u4ea4\u53c9\u9a8c\u8bc1\u7684\u4e3b\u8981\u4f5c\u7528\u5982\u4e0b: \u7528\u4e8e\u6a21\u578b\u9009\u62e9. \u5982\u8bc4\u4f30 kNN, SVM \u5728\u540c\u4e00\u6570\u636e\u96c6\u4e0b\u7684\u8868\u73b0. \u7528\u4e8e\u6a21\u578b\u8c03\u53c2. \u7528\u4e8e\u7279\u5f81\u9009\u62e9. \u5982\u8bc4\u4f30\u5e94\u4f7f\u7528\u6570\u636e\u96c6\u4e2d\u7684\u54ea\u4e9b\u7279\u5f81\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3.","title":"\u4ea4\u53c9\u9a8c\u8bc1"},{"location":"content/daze/sklearn/evaluation/#_3","text":"\u8d85\u53c2\u6570, \u5373\u4e0d\u76f4\u63a5\u5728\u4f30\u8ba1\u5668\u5185\u5b66\u4e60\u7684\u53c2\u6570. \u5728 scikit-learn \u5305\u4e2d, \u5b83\u4eec\u4f5c\u4e3a\u4f30\u8ba1\u5668\u7c7b\u4e2d\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4f20\u9012. \u5178\u578b\u7684\u4f8b\u5b50\u6709: \u7528\u4e8e\u652f\u6301\u5411\u91cf\u5206\u7c7b\u5668\u7684 C, kernel \u548c gamma, \u7528\u4e8e Lasso \u7684 alpha \u7b49. sklearn.model_selection.GridSearchCV \u7f51\u683c\u641c\u7d22\u901a\u8fc7\u7a77\u5c3d\u6240\u7ed9\u51fa\u7684\u6240\u6709\u8d85\u53c2\u6570\u5019\u9009\u7684\u6392\u5217\u7ec4\u5408, \u81ea\u52a8\u9009\u62e9\u6700\u4f18\u53c2\u6570\u7ec4\u5408. \u7f51\u683c\u6cd5\u662f\u76ee\u524d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u53c2\u6570\u4f18\u5316\u65b9\u6cd5. import sklearn.datasets import sklearn.model_selection import sklearn.svm iris = sklearn.datasets.load_iris() # kernal \u53c2\u6570\u4ece ['linear', 'rbf'] \u9009\u62e9, C \u53c2\u6570\u4ece [1, 10] \u9009\u62e9, # \u56e0\u6b64\u603b\u8ba1 4 \u7ec4\u5019\u9009\u53c2\u6570 parameters = {'kernel': ('linear', 'rbf'), 'C': [1, 10]} svc = sklearn.svm.SVC() clf = sklearn.model_selection.GridSearchCV(svc, parameters) clf.fit(iris.data, iris.target) print(clf.best_params_) # \u6253\u5370\u6700\u4f18\u53c2\u6570 # {'C': 1, 'kernel': 'linear'}","title":"\u8d85\u53c2\u6570\u4e0e\u7f51\u683c\u641c\u7d22"},{"location":"content/daze/sklearn/evaluation/#_4","text":"\u901a\u5e38\u60c5\u51b5\u4e0b, \u4f7f\u7528\u4ee5\u4e0b\u6307\u6807\u8bc4\u4f30\u8bad\u7ec3\u540e\u7684\u6a21\u578b. \u5206\u7c7b\u6307\u6807: http://sklearn.apachecn.org/cn/0.19.0/modules/model_evaluation.html#classification-metrics","title":"\u6a21\u578b\u8bc4\u4f30"},{"location":"content/daze/sklearn/knn/","text":"kNN \u7b97\u6cd5 k \u8fd1\u90bb\u6cd5 (k-Nearest Neighbor, kNN) \u662f\u673a\u5668\u5b66\u4e60\u6240\u6709\u7b97\u6cd5\u4e2d\u7406\u8bba\u6700\u7b80\u5355, \u6700\u597d\u7406\u89e3\u7684\u7b97\u6cd5. \u5b83\u662f\u4e00\u79cd\u57fa\u672c\u7684\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5, \u5b83\u7684\u8f93\u5165\u4e3a\u5b9e\u4f8b\u7684\u7279\u5f81\u5411\u91cf, \u901a\u8fc7\u8ba1\u7b97\u65b0\u6570\u636e\u4e0e\u8bad\u7ec3\u6570\u636e\u7279\u5f81\u503c\u4e4b\u95f4\u7684\u8ddd\u79bb, \u7136\u540e\u9009\u53d6 k(k>=1) \u4e2a\u8ddd\u79bb\u6700\u8fd1\u7684\u90bb\u5c45\u8fdb\u884c\u5206\u7c7b\u5224\u65ad(\u6295\u7968\u6cd5)\u6216\u8005\u56de\u5f52. \u5982\u679c k=1, \u90a3\u4e48\u65b0\u6570\u636e\u88ab\u7b80\u5355\u5730\u5206\u914d\u7ed9\u5176\u8fd1\u90bb\u7684\u7c7b. \u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898: \u8f93\u51fa\u4e3a\u5b9e\u4f8b\u7684\u7c7b\u522b. \u5206\u7c7b\u65f6, \u5bf9\u4e8e\u65b0\u7684\u5b9e\u4f8b, \u6839\u636e\u5176 k \u4e2a\u6700\u8fd1\u90bb\u7684\u8bad\u7ec3\u5b9e\u4f8b\u7684\u7c7b\u522b, \u901a\u8fc7\u591a\u6570\u8868\u51b3\u7b49\u65b9\u5f0f\u8fdb\u884c\u9884\u6d4b. \u5bf9\u4e8e\u56de\u5f52\u95ee\u9898: \u8f93\u51fa\u4e3a\u5b9e\u4f8b\u7684\u503c. \u56de\u5f52\u65f6, \u5bf9\u4e8e\u65b0\u7684\u5b9e\u4f8b, \u53d6\u5176 k \u4e2a\u6700\u8fd1\u90bb\u7684\u8bad\u7ec3\u5b9e\u4f8b\u7684\u5e73\u5747\u503c\u4e3a\u9884\u6d4b\u503c. k \u8fd1\u90bb\u6cd5\u5206\u7c7b\u7684\u76f4\u89c2\u7406\u89e3: \u7ed9\u5b9a\u4e00\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6, \u5bf9\u4e8e\u65b0\u7684\u8f93\u4eba\u5b9e\u4f8b, \u5728\u8bad\u7ec3\u96c6\u4e2d\u627e\u5230\u4e0e\u8be5\u5b9e\u4f8b\u6700\u90bb\u8fd1\u7684 k \u4e2a\u5b9e\u4f8b. \u8fd9 k \u4e2a\u5b9e\u4f8b\u7684\u591a\u6570\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\u522b, \u5219\u8be5\u8f93\u4eba\u5b9e\u4f8b\u5c31\u5212\u5206\u4e3a\u8fd9\u4e2a\u7c7b\u522b. k \u8fd1\u90bb\u6cd5\u4e0d\u5177\u6709\u663e\u5f0f\u7684\u5b66\u4e60\u8fc7\u7a0b, \u5b83\u662f\u76f4\u63a5\u9884\u6d4b. \u5b9e\u9645\u4e0a\u5b83\u662f\u5229\u7528\u8bad\u7ec3\u6570\u636e\u96c6\u5bf9\u7279\u5f81\u5411\u91cf\u7a7a\u95f4\u8fdb\u884c\u5212\u5206, \u5e76\u4e14\u4f5c\u4e3a\u5176\u5206\u7c7b\u7684\"\u6a21\u578b\". k \u8fd1\u90bb\u7b97\u6cd5\u4f8b\u5b50. \u6d4b\u8bd5\u6837\u672c(\u7eff\u8272\u5706\u5f62)\u5e94\u5f52\u5165\u8981\u4e48\u662f\u7b2c\u4e00\u7c7b\u7684\u84dd\u8272\u65b9\u5f62\u6216\u662f\u7b2c\u4e8c\u7c7b\u7684\u7ea2\u8272\u4e09\u89d2\u5f62. \u5982\u679c k=3(\u5b9e\u7ebf\u5706\u5708) \u5b83\u88ab\u5206\u914d\u7ed9\u7b2c\u4e8c\u7c7b, \u56e0\u4e3a\u6709 2 \u4e2a\u4e09\u89d2\u5f62\u548c\u53ea\u6709 1 \u4e2a\u6b63\u65b9\u5f62\u5728\u5185\u4fa7\u5706\u5708\u4e4b\u5185. \u5982\u679c k=5(\u865a\u7ebf\u5706\u5708) \u5b83\u88ab\u5206\u914d\u5230\u7b2c\u4e00\u7c7b(3 \u4e2a\u6b63\u65b9\u5f62\u4e0e 2 \u4e2a\u4e09\u89d2\u5f62\u5728\u5916\u4fa7\u5706\u5708\u4e4b\u5185). \u8ddd\u79bb\u5ea6\u91cf kNN \u7b97\u6cd5\u8981\u6c42\u6570\u636e\u7684\u6240\u6709\u7279\u5f81\u90fd\u53ef\u4ee5\u505a\u53ef\u6bd4\u8f83\u7684\u91cf\u5316. \u4e3a\u4e86\u516c\u5e73, \u6837\u672c\u53c2\u6570\u5fc5\u987b\u505a\u4e00\u4e9b\u5f52\u4e00\u5316\u5904\u7406. \u7279\u5f81\u7a7a\u95f4\u4e2d\u4e24\u4e2a\u5b9e\u4f8b\u70b9\u7684\u8ddd\u79bb\u662f\u4e24\u4e2a\u5b9e\u4f8b\u70b9\u76f8\u4f3c\u5ea6\u7684\u53cd\u6620. \u4e00\u822c\u53d6\u6b27\u5f0f\u8ddd\u79bb. np \u4e2d\u4f7f\u7528 np.linalg.norm(x1 - x2) \u8ba1\u7b97\u6b27\u5f0f\u8ddd\u79bb. \u5206\u7c7b \u5b9e\u73b0\u4e00\u4e2a k=3 \u7684\u624b\u5199\u6570\u5b57\u5206\u7c7b\u5668, \u6700\u540e\u7684\u6d4b\u8bd5\u7cbe\u5ea6\u8fbe\u5230 97%. import numpy as np import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.neighbors digits = sklearn.datasets.load_digits() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( digits.data, digits.target, test_size=0.25, random_state=0, stratify=digits.target) print('x_train.shape', x_train.shape) print('y_train.shape', y_train.shape) def classify(x_train, y_train, k, x): sources = np.empty(y_train.shape) for i, e in enumerate(x_train): d = np.linalg.norm(e - x) # \u6b27\u5f0f\u8ddd\u79bb sources[i] = d indices = np.argsort(sources)[:k] knn = {} for i in indices: l = y_train[i] if l in knn: knn[l] += 1 else: knn[l] = 1 return max(knn) y_pred = np.empty(y_test.shape) for i, e in enumerate(x_test): y_pred[i] = classify(x_train, y_train, 3, e) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 45 1 0.98 0.96 0.97 46 2 0.98 0.98 0.98 44 3 0.93 0.93 0.93 46 4 1.00 0.96 0.98 45 5 0.98 0.98 0.98 46 6 0.98 1.00 0.99 45 7 1.00 1.00 1.00 45 8 0.95 0.91 0.93 43 9 0.88 0.96 0.91 45 avg / total 0.97 0.97 0.97 450 \u539f\u59cb kNN \u5b9e\u73b0\u7684\u641c\u7d22\u65b9\u5f0f\u7b80\u5355\u7c97\u66b4: \u7ebf\u6027\u626b\u63cf. \u901a\u8fc7\u8ba1\u7b97\u8f93\u5165\u6837\u672c\u4e0e\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u8ddd\u79bb, \u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684 k \u4e2a\u70b9. \u5f53\u8bad\u7ec3\u6570\u636e\u8f83\u5927\u65f6, \u975e\u5e38\u8017\u8d39\u65f6\u95f4. sklean \u4e2d\u5b9e\u73b0\u4e86\u4e09\u79cd\u641c\u7d22\u65b9\u5f0f, \u5206\u522b\u662f BallTree , KDTree , brute-force . KDTree \u662f\u4e00\u9897\u4e8c\u53c9\u6811, BallTree \u662f KDTree \u7684\u4f18\u5316\u7248\u672c, \u800c brute-force \u5c31\u662f\u539f\u59cb\u7684\u66b4\u529b\u7ebf\u6027\u626b\u63cf. \u8fd9\u91cc\u8981\u7740\u91cd\u8bf4\u660e\u7684\u662f, KDTree \u4e0e BallTree \u867d\u7136\u4f18\u5316\u4e86\u641c\u7d22\u901f\u5ea6, \u4f46\u727a\u7272\u4e86\u7cbe\u786e\u5ea6. \u56e0\u6b64\u5bf9\u4e8e\u5c0f\u6570\u636e\u96c6(\u5982 n < 30), \u4f7f\u7528 brute-force \u4ecd\u7136\u662f\u4e00\u4e2a\u6700\u4f73\u9009\u62e9. \u4f7f\u7528 sklearn \u63d0\u4f9b\u7684\u4ee3\u7801\u4f7f\u7528\u8fc7\u7a0b\u5982\u4e0b: import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.neighbors digits = sklearn.datasets.load_digits() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( digits.data, digits.target, test_size=0.25, random_state=0, stratify=digits.target) # \u53c2\u6570 algorithm \u53ef\u4ee5\u662f ['auto', 'ball_tree', 'kd_tree', 'brute'] \u5176\u4e2d\u7684\u4e00\u4e2a # \u6b64\u5904\u4f7f\u7528\u9ed8\u8ba4\u503c 'auto' # \u53c2\u6570 weights \u53ef\u4ee5\u662f ['uniform', 'distance'] \u5176\u4e2d\u7684\u4e00\u4e2a. # uniform \u4e3a\u6bcf\u4e2a\u8fd1\u90bb\u5206\u914d\u7edf\u4e00\u7684\u6743\u91cd, \u800c distance \u5206\u914d\u6743\u91cd\u4e0e\u67e5\u8be2\u70b9\u7684\u8ddd\u79bb\u6210\u53cd\u6bd4. # \u6b64\u5904\u4f7f\u7528\u9ed8\u8ba4\u503c 'uniform' nbrs = sklearn.neighbors.KNeighborsClassifier(n_neighbors=3) nbrs.fit(x_train, y_train) y_pred = nbrs.predict(x_test) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) \u56de\u5f52 import numpy as np import matplotlib.pyplot as plt import sklearn.neighbors plt.style.use('seaborn') np.random.seed(0) X = np.sort(5 * np.random.rand(40, 1), axis=0) T = np.linspace(0, 5, 500)[:, np.newaxis] y = np.sin(X).ravel() # Add noise to targets y[::5] += 1 * (0.5 - np.random.rand(8)) n_neighbors = 5 for i, weights in enumerate(['uniform', 'distance']): knn = sklearn.neighbors.KNeighborsRegressor(n_neighbors, weights=weights) y_ = knn.fit(X, y).predict(T) plt.subplot(2, 1, i + 1) plt.scatter(X, y, c='k', label='data') plt.plot(T, y_, c='g', label='prediction') plt.axis('tight') plt.legend() plt.title(\"KNeighborsRegressor (k = %i, weights = '%s')\" % (n_neighbors, weights)) plt.show() \u53c2\u8003 [1] wiki: \u6700\u8fd1\u90bb\u5c45\u6cd5 https://zh.wikipedia.org/wiki/%E6%9C%80%E8%BF%91%E9%84%B0%E5%B1%85%E6%B3%95 [2] \u534e\u6821\u4e13/\u738b\u6b63\u6797: Python\u5927\u6218\u673a\u5668\u5b66\u4e60.\u7b2c\u56db\u7ae0.k \u8fd1\u90bb\u6cd5 [3] sklearn: \u6700\u8fd1\u90bb http://sklearn.apachecn.org/cn/0.19.0/modules/neighbors.html","title":"sklearn-kNN"},{"location":"content/daze/sklearn/knn/#knn","text":"k \u8fd1\u90bb\u6cd5 (k-Nearest Neighbor, kNN) \u662f\u673a\u5668\u5b66\u4e60\u6240\u6709\u7b97\u6cd5\u4e2d\u7406\u8bba\u6700\u7b80\u5355, \u6700\u597d\u7406\u89e3\u7684\u7b97\u6cd5. \u5b83\u662f\u4e00\u79cd\u57fa\u672c\u7684\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5, \u5b83\u7684\u8f93\u5165\u4e3a\u5b9e\u4f8b\u7684\u7279\u5f81\u5411\u91cf, \u901a\u8fc7\u8ba1\u7b97\u65b0\u6570\u636e\u4e0e\u8bad\u7ec3\u6570\u636e\u7279\u5f81\u503c\u4e4b\u95f4\u7684\u8ddd\u79bb, \u7136\u540e\u9009\u53d6 k(k>=1) \u4e2a\u8ddd\u79bb\u6700\u8fd1\u7684\u90bb\u5c45\u8fdb\u884c\u5206\u7c7b\u5224\u65ad(\u6295\u7968\u6cd5)\u6216\u8005\u56de\u5f52. \u5982\u679c k=1, \u90a3\u4e48\u65b0\u6570\u636e\u88ab\u7b80\u5355\u5730\u5206\u914d\u7ed9\u5176\u8fd1\u90bb\u7684\u7c7b. \u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898: \u8f93\u51fa\u4e3a\u5b9e\u4f8b\u7684\u7c7b\u522b. \u5206\u7c7b\u65f6, \u5bf9\u4e8e\u65b0\u7684\u5b9e\u4f8b, \u6839\u636e\u5176 k \u4e2a\u6700\u8fd1\u90bb\u7684\u8bad\u7ec3\u5b9e\u4f8b\u7684\u7c7b\u522b, \u901a\u8fc7\u591a\u6570\u8868\u51b3\u7b49\u65b9\u5f0f\u8fdb\u884c\u9884\u6d4b. \u5bf9\u4e8e\u56de\u5f52\u95ee\u9898: \u8f93\u51fa\u4e3a\u5b9e\u4f8b\u7684\u503c. \u56de\u5f52\u65f6, \u5bf9\u4e8e\u65b0\u7684\u5b9e\u4f8b, \u53d6\u5176 k \u4e2a\u6700\u8fd1\u90bb\u7684\u8bad\u7ec3\u5b9e\u4f8b\u7684\u5e73\u5747\u503c\u4e3a\u9884\u6d4b\u503c. k \u8fd1\u90bb\u6cd5\u5206\u7c7b\u7684\u76f4\u89c2\u7406\u89e3: \u7ed9\u5b9a\u4e00\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6, \u5bf9\u4e8e\u65b0\u7684\u8f93\u4eba\u5b9e\u4f8b, \u5728\u8bad\u7ec3\u96c6\u4e2d\u627e\u5230\u4e0e\u8be5\u5b9e\u4f8b\u6700\u90bb\u8fd1\u7684 k \u4e2a\u5b9e\u4f8b. \u8fd9 k \u4e2a\u5b9e\u4f8b\u7684\u591a\u6570\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\u522b, \u5219\u8be5\u8f93\u4eba\u5b9e\u4f8b\u5c31\u5212\u5206\u4e3a\u8fd9\u4e2a\u7c7b\u522b. k \u8fd1\u90bb\u6cd5\u4e0d\u5177\u6709\u663e\u5f0f\u7684\u5b66\u4e60\u8fc7\u7a0b, \u5b83\u662f\u76f4\u63a5\u9884\u6d4b. \u5b9e\u9645\u4e0a\u5b83\u662f\u5229\u7528\u8bad\u7ec3\u6570\u636e\u96c6\u5bf9\u7279\u5f81\u5411\u91cf\u7a7a\u95f4\u8fdb\u884c\u5212\u5206, \u5e76\u4e14\u4f5c\u4e3a\u5176\u5206\u7c7b\u7684\"\u6a21\u578b\". k \u8fd1\u90bb\u7b97\u6cd5\u4f8b\u5b50. \u6d4b\u8bd5\u6837\u672c(\u7eff\u8272\u5706\u5f62)\u5e94\u5f52\u5165\u8981\u4e48\u662f\u7b2c\u4e00\u7c7b\u7684\u84dd\u8272\u65b9\u5f62\u6216\u662f\u7b2c\u4e8c\u7c7b\u7684\u7ea2\u8272\u4e09\u89d2\u5f62. \u5982\u679c k=3(\u5b9e\u7ebf\u5706\u5708) \u5b83\u88ab\u5206\u914d\u7ed9\u7b2c\u4e8c\u7c7b, \u56e0\u4e3a\u6709 2 \u4e2a\u4e09\u89d2\u5f62\u548c\u53ea\u6709 1 \u4e2a\u6b63\u65b9\u5f62\u5728\u5185\u4fa7\u5706\u5708\u4e4b\u5185. \u5982\u679c k=5(\u865a\u7ebf\u5706\u5708) \u5b83\u88ab\u5206\u914d\u5230\u7b2c\u4e00\u7c7b(3 \u4e2a\u6b63\u65b9\u5f62\u4e0e 2 \u4e2a\u4e09\u89d2\u5f62\u5728\u5916\u4fa7\u5706\u5708\u4e4b\u5185).","title":"kNN \u7b97\u6cd5"},{"location":"content/daze/sklearn/knn/#_1","text":"kNN \u7b97\u6cd5\u8981\u6c42\u6570\u636e\u7684\u6240\u6709\u7279\u5f81\u90fd\u53ef\u4ee5\u505a\u53ef\u6bd4\u8f83\u7684\u91cf\u5316. \u4e3a\u4e86\u516c\u5e73, \u6837\u672c\u53c2\u6570\u5fc5\u987b\u505a\u4e00\u4e9b\u5f52\u4e00\u5316\u5904\u7406. \u7279\u5f81\u7a7a\u95f4\u4e2d\u4e24\u4e2a\u5b9e\u4f8b\u70b9\u7684\u8ddd\u79bb\u662f\u4e24\u4e2a\u5b9e\u4f8b\u70b9\u76f8\u4f3c\u5ea6\u7684\u53cd\u6620. \u4e00\u822c\u53d6\u6b27\u5f0f\u8ddd\u79bb. np \u4e2d\u4f7f\u7528 np.linalg.norm(x1 - x2) \u8ba1\u7b97\u6b27\u5f0f\u8ddd\u79bb.","title":"\u8ddd\u79bb\u5ea6\u91cf"},{"location":"content/daze/sklearn/knn/#_2","text":"\u5b9e\u73b0\u4e00\u4e2a k=3 \u7684\u624b\u5199\u6570\u5b57\u5206\u7c7b\u5668, \u6700\u540e\u7684\u6d4b\u8bd5\u7cbe\u5ea6\u8fbe\u5230 97%. import numpy as np import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.neighbors digits = sklearn.datasets.load_digits() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( digits.data, digits.target, test_size=0.25, random_state=0, stratify=digits.target) print('x_train.shape', x_train.shape) print('y_train.shape', y_train.shape) def classify(x_train, y_train, k, x): sources = np.empty(y_train.shape) for i, e in enumerate(x_train): d = np.linalg.norm(e - x) # \u6b27\u5f0f\u8ddd\u79bb sources[i] = d indices = np.argsort(sources)[:k] knn = {} for i in indices: l = y_train[i] if l in knn: knn[l] += 1 else: knn[l] = 1 return max(knn) y_pred = np.empty(y_test.shape) for i, e in enumerate(x_test): y_pred[i] = classify(x_train, y_train, 3, e) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 45 1 0.98 0.96 0.97 46 2 0.98 0.98 0.98 44 3 0.93 0.93 0.93 46 4 1.00 0.96 0.98 45 5 0.98 0.98 0.98 46 6 0.98 1.00 0.99 45 7 1.00 1.00 1.00 45 8 0.95 0.91 0.93 43 9 0.88 0.96 0.91 45 avg / total 0.97 0.97 0.97 450 \u539f\u59cb kNN \u5b9e\u73b0\u7684\u641c\u7d22\u65b9\u5f0f\u7b80\u5355\u7c97\u66b4: \u7ebf\u6027\u626b\u63cf. \u901a\u8fc7\u8ba1\u7b97\u8f93\u5165\u6837\u672c\u4e0e\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u8ddd\u79bb, \u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684 k \u4e2a\u70b9. \u5f53\u8bad\u7ec3\u6570\u636e\u8f83\u5927\u65f6, \u975e\u5e38\u8017\u8d39\u65f6\u95f4. sklean \u4e2d\u5b9e\u73b0\u4e86\u4e09\u79cd\u641c\u7d22\u65b9\u5f0f, \u5206\u522b\u662f BallTree , KDTree , brute-force . KDTree \u662f\u4e00\u9897\u4e8c\u53c9\u6811, BallTree \u662f KDTree \u7684\u4f18\u5316\u7248\u672c, \u800c brute-force \u5c31\u662f\u539f\u59cb\u7684\u66b4\u529b\u7ebf\u6027\u626b\u63cf. \u8fd9\u91cc\u8981\u7740\u91cd\u8bf4\u660e\u7684\u662f, KDTree \u4e0e BallTree \u867d\u7136\u4f18\u5316\u4e86\u641c\u7d22\u901f\u5ea6, \u4f46\u727a\u7272\u4e86\u7cbe\u786e\u5ea6. \u56e0\u6b64\u5bf9\u4e8e\u5c0f\u6570\u636e\u96c6(\u5982 n < 30), \u4f7f\u7528 brute-force \u4ecd\u7136\u662f\u4e00\u4e2a\u6700\u4f73\u9009\u62e9. \u4f7f\u7528 sklearn \u63d0\u4f9b\u7684\u4ee3\u7801\u4f7f\u7528\u8fc7\u7a0b\u5982\u4e0b: import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.neighbors digits = sklearn.datasets.load_digits() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( digits.data, digits.target, test_size=0.25, random_state=0, stratify=digits.target) # \u53c2\u6570 algorithm \u53ef\u4ee5\u662f ['auto', 'ball_tree', 'kd_tree', 'brute'] \u5176\u4e2d\u7684\u4e00\u4e2a # \u6b64\u5904\u4f7f\u7528\u9ed8\u8ba4\u503c 'auto' # \u53c2\u6570 weights \u53ef\u4ee5\u662f ['uniform', 'distance'] \u5176\u4e2d\u7684\u4e00\u4e2a. # uniform \u4e3a\u6bcf\u4e2a\u8fd1\u90bb\u5206\u914d\u7edf\u4e00\u7684\u6743\u91cd, \u800c distance \u5206\u914d\u6743\u91cd\u4e0e\u67e5\u8be2\u70b9\u7684\u8ddd\u79bb\u6210\u53cd\u6bd4. # \u6b64\u5904\u4f7f\u7528\u9ed8\u8ba4\u503c 'uniform' nbrs = sklearn.neighbors.KNeighborsClassifier(n_neighbors=3) nbrs.fit(x_train, y_train) y_pred = nbrs.predict(x_test) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc)","title":"\u5206\u7c7b"},{"location":"content/daze/sklearn/knn/#_3","text":"import numpy as np import matplotlib.pyplot as plt import sklearn.neighbors plt.style.use('seaborn') np.random.seed(0) X = np.sort(5 * np.random.rand(40, 1), axis=0) T = np.linspace(0, 5, 500)[:, np.newaxis] y = np.sin(X).ravel() # Add noise to targets y[::5] += 1 * (0.5 - np.random.rand(8)) n_neighbors = 5 for i, weights in enumerate(['uniform', 'distance']): knn = sklearn.neighbors.KNeighborsRegressor(n_neighbors, weights=weights) y_ = knn.fit(X, y).predict(T) plt.subplot(2, 1, i + 1) plt.scatter(X, y, c='k', label='data') plt.plot(T, y_, c='g', label='prediction') plt.axis('tight') plt.legend() plt.title(\"KNeighborsRegressor (k = %i, weights = '%s')\" % (n_neighbors, weights)) plt.show()","title":"\u56de\u5f52"},{"location":"content/daze/sklearn/knn/#_4","text":"[1] wiki: \u6700\u8fd1\u90bb\u5c45\u6cd5 https://zh.wikipedia.org/wiki/%E6%9C%80%E8%BF%91%E9%84%B0%E5%B1%85%E6%B3%95 [2] \u534e\u6821\u4e13/\u738b\u6b63\u6797: Python\u5927\u6218\u673a\u5668\u5b66\u4e60.\u7b2c\u56db\u7ae0.k \u8fd1\u90bb\u6cd5 [3] sklearn: \u6700\u8fd1\u90bb http://sklearn.apachecn.org/cn/0.19.0/modules/neighbors.html","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/manifold/","text":"\u6d41\u5f62\u5b66\u4e60 \u6d41\u5f62\u5b66\u4e60\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u964d\u7ef4\u65b9\u6cd5. \u5176\u7b97\u6cd5\u57fa\u4e8e\u7684\u601d\u60f3\u662f: \u8bb8\u591a\u6570\u636e\u96c6\u7684\u7ef4\u5ea6\u8fc7\u9ad8\u53ea\u662f\u7531\u4eba\u4e3a\u5bfc\u81f4\u7684. \u9ad8\u7ef4\u6570\u636e\u96c6\u4f1a\u975e\u5e38\u96be\u4ee5\u53ef\u89c6\u5316. \u867d\u7136\u53ef\u4ee5\u7ed8\u5236\u4e24\u7ef4\u6216\u4e09\u7ef4\u7684\u6570\u636e\u6765\u663e\u793a\u6570\u636e\u7684\u56fa\u6709\u7ed3\u6784, \u4f46\u4e0e\u4e4b\u7b49\u6548\u7684\u9ad8\u7ef4\u56fe\u4e0d\u592a\u76f4\u89c2. \u4e3a\u4e86\u5e2e\u52a9\u6570\u636e\u96c6\u7ed3\u6784\u7684\u53ef\u89c6\u5316, \u5fc5\u987b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u964d\u4f4e\u7ef4\u5ea6. \u901a\u8fc7\u5bf9\u6570\u636e\u7684\u968f\u673a\u6295\u5f71\u6765\u5b9e\u73b0\u964d\u7ef4\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5. \u867d\u7136\u8fd9\u6837\u505a\u80fd\u5b9e\u73b0\u6570\u636e\u7ed3\u6784\u4e00\u5b9a\u7a0b\u5ea6\u7684\u53ef\u89c6\u5316, \u4f46\u968f\u673a\u9009\u62e9\u6295\u5f71\u4ecd\u6709\u8bb8\u591a\u6709\u5f85\u6539\u8fdb\u4e4b\u5904. \u5728\u968f\u673a\u6295\u5f71\u4e2d, \u6570\u636e\u4e2d\u66f4\u6709\u8da3\u7684\u7ed3\u6784\u5f88\u53ef\u80fd\u4f1a\u4e22\u5931. \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898, \u4e00\u4e9b\u76d1\u7763\u548c\u65e0\u76d1\u7763\u7684\u7ebf\u6027\u964d\u7ef4\u6846\u67b6\u88ab\u8bbe\u8ba1\u51fa\u6765, \u5982\u4e3b\u6210\u5206\u5206\u6790(PCA), \u72ec\u7acb\u6210\u5206\u5206\u6790, \u7ebf\u6027\u5224\u522b\u5206\u6790\u7b49. \u8fd9\u4e9b\u7b97\u6cd5\u5b9a\u4e49\u4e86\u660e\u786e\u7684\u89c4\u5b9a\u6765\u9009\u62e9\u6570\u636e\u7684\"\u6709\u8da3\u7684\"\u7ebf\u6027\u6295\u5f71. \u5b83\u4eec\u867d\u7136\u5f3a\u5927, \u4f46\u662f\u4f1a\u7ecf\u5e38\u9519\u5931\u6570\u636e\u4e2d\u91cd\u8981\u7684\u975e\u7ebf\u6027\u7ed3\u6784. \u6d41\u5f62\u5b66\u4e60\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u5c06\u7ebf\u6027\u6846\u67b6(\u5982PCA)\u63a8\u5e7f\u4e3a\u5bf9\u6570\u636e\u4e2d\u975e\u7ebf\u6027\u7ed3\u6784\u654f\u611f\u7684\u5c1d\u8bd5. \u867d\u7136\u5b58\u5728\u76d1\u7763\u53d8\u91cf, \u4f46\u662f\u5178\u578b\u7684\u6d41\u5f62\u5b66\u4e60\u95ee\u9898\u662f\u65e0\u76d1\u7763\u7684: \u5b83\u4ece\u6570\u636e\u672c\u8eab\u5b66\u4e60\u6570\u636e\u7684\u9ad8\u7ef4\u7ed3\u6784, \u800c\u4e0d\u4f7f\u7528\u9884\u5b9a\u7684\u5206\u7c7b. \u901a\u8fc7\u6d41\u5f62\u5b66\u4e60\u6765\u5b9e\u73b0\u964d\u7ef4\u7684\u65b9\u6cd5\u6709\u5f88\u591a, \u5176\u57fa\u672c\u601d\u60f3\u4e5f\u7c7b\u4f3c: \u5047\u8bbe\u6570\u636e\u5728\u9ad8\u7ef4\u5177\u6709\u67d0\u79cd\u7ed3\u6784\u7279\u5f81, \u5e0c\u671b\u964d\u5230\u4f4e\u7ef4\u540e, \u4ecd\u80fd\u4fdd\u6301\u8be5\u7ed3\u6784 . \u6bd4\u8f83\u5e38\u89c1\u7684\u6709: \u5c40\u90e8\u6539\u7ebf\u5d4c\u5165. \u5047\u8bbe\u6570\u636e\u4e2d\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u7531\u5176\u8fd1\u90bb\u7684\u51e0\u4e2a\u70b9\u91cd\u6784\u51fa\u6765. \u964d\u5230\u4f4e\u7ef4, \u4f7f\u6837\u672c\u4ecd\u80fd\u4fdd\u6301\u539f\u6765\u7684\u91cd\u6784\u5173\u7cfb, \u4e14\u91cd\u6784\u7cfb\u6570\u4e5f\u4e00\u6837. \u62c9\u666e\u62c9\u65af\u7279\u5f81\u6620\u5c04. \u5c06\u6570\u636e\u6620\u5c04\u5230\u4f4e\u7ef4, \u4e14\u4fdd\u6301\u70b9\u4e4b\u95f4\u7684(\u76f8\u4f3c\u5ea6)\u8ddd\u79bb\u5173\u7cfb. \u5373\u5728\u539f\u7a7a\u95f4\u4e2d\u76f8\u8ddd\u8f83\u8fdc\u7684\u70b9, \u6295\u5f71\u5230\u4f4e\u7ef4\u7a7a\u95f4\u4e2d, \u5e0c\u671b\u5b83\u4eec\u4e4b\u95f4\u4ecd\u76f8\u8ddd\u8f83\u8fdc. \u53cd\u4e4b\u4ea6\u7136. \u5c40\u90e8\u4fdd\u6301\u6295\u5f71 \u7b49\u8ddd\u6620\u5c04 \u4ee3\u7801\u5b9e\u73b0 sklearn \u5b9e\u73b0\u4e86\u591a\u79cd\u6d41\u5f62\u5b66\u4e60, \u8fd9\u91cc\u4ee5\u624b\u5199\u6570\u5b57\u6570\u636e\u96c6\u4e3a\u4f8b, \u5c55\u793a\u6d41\u5f62\u5b66\u4e60\u7b97\u6cd5\u5728\u8be5\u6570\u636e\u96c6\u4e0b\u7684\u6548\u679c. import os import matplotlib.pyplot as plt import numpy as np import sklearn.datasets import sklearn.decomposition import sklearn.discriminant_analysis import sklearn.ensemble import sklearn.manifold import sklearn.random_projection savedir = '/tmp/manifold' if not os.path.exists(savedir): os.mkdir(savedir) digits = sklearn.datasets.load_digits(n_class=6) x = digits.data y = digits.target n_neighbors = 30 def plot_embedding(x, title): x_min, x_max = np.min(x, 0), np.max(x, 0) x = (x - x_min) / (x_max - x_min) plt.figure() c = ['red', 'blue', 'lime', 'black', 'yellow', 'purple'] for l in range(6): p = x[y == l] plt.scatter(p[:, 0], p[:, 1], s=25, c=c[l], alpha=0.5, label=str(l)) plt.legend(loc='lower right') plt.xticks([]) plt.yticks([]) plt.title(title) p = os.path.normpath(os.path.join(savedir, title.replace(' ', '_') + '.png')) print(f'Savefig to {p}') plt.savefig(p) n_img_per_row = 20 img = np.zeros((10 * n_img_per_row, 10 * n_img_per_row)) for i in range(n_img_per_row): ix = 10 * i + 1 for j in range(n_img_per_row): iy = 10 * j + 1 img[ix:ix + 8, iy:iy + 8] = x[i * n_img_per_row + j].reshape((8, 8)) plt.imshow(img, cmap=plt.cm.binary) plt.xticks([]) plt.yticks([]) plt.title('Selection from digits') plt.savefig(os.path.join(savedir, 'Selection_from_digits.png')) print('Computing random projection') rp = sklearn.random_projection.SparseRandomProjection(n_components=2, random_state=42) x_projected = rp.fit_transform(x) plot_embedding(x_projected, 'Random Projection') print('Computing PCA projection') x_pca = sklearn.decomposition.TruncatedSVD(n_components=2).fit_transform(x) plot_embedding(x_pca, 'Principal Components projection') print('Computing Linear Discriminant Analysis projection') x2 = x.copy() x2.flat[::x.shape[1] + 1] += 0.01 # Make X invertible x_lda = sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=2).fit_transform(x2, y) plot_embedding(x_lda, 'Linear Discriminant projection') print('Computing Isomap embedding') x_iso = sklearn.manifold.Isomap(n_neighbors, n_components=2).fit_transform(x) plot_embedding(x_iso, 'Isomap projection') print('Computing LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='standard') x_lle = clf.fit_transform(x) plot_embedding(x_lle, 'Locally Linear Embedding') print('Computing modified LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='modified') x_mlle = clf.fit_transform(x) plot_embedding(x_mlle, 'Modified Locally Linear Embedding') print('Computing Hessian LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='hessian') x_hlle = clf.fit_transform(x) plot_embedding(x_hlle, 'Hessian Locally Linear Embedding') print('Computing LTSA embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='ltsa') x_ltsa = clf.fit_transform(x) plot_embedding(x_ltsa, 'Local Tangent Space Alignment') print('Computing MDS embedding') clf = sklearn.manifold.MDS(n_components=2, n_init=1, max_iter=100) x_mds = clf.fit_transform(x) plot_embedding(x_mds, 'MDS embedding') print('Computing Totally Random Trees embedding') hasher = sklearn.ensemble.RandomTreesEmbedding(n_estimators=200, random_state=0, max_depth=5) x_transformed = hasher.fit_transform(x) pca = sklearn.decomposition.TruncatedSVD(n_components=2) x_reduced = pca.fit_transform(x_transformed) plot_embedding(x_reduced, 'Random forest embedding') print('Computing Spectral embedding') embedder = sklearn.manifold.SpectralEmbedding(n_components=2, random_state=0, eigen_solver='arpack') x_se = embedder.fit_transform(x) plot_embedding(x_se, 'Spectral embedding') print('Computing t-SNE embedding') tsne = sklearn.manifold.TSNE(n_components=2, init='pca', random_state=0) x_tsne = tsne.fit_transform(x) plot_embedding(x_tsne, 't-SNE embedding') \u5173\u4e8e\u7ef4\u5ea6 \u8bb8\u591a\u6570\u636e\u96c6\u7684\u7ef4\u5ea6\u8fc7\u9ad8\u53ea\u662f\u7531\u4eba\u4e3a\u5bfc\u81f4\u7684 . \u6bd4\u5982\u4e8c\u7ef4\u5e73\u9762\u4e0a\u6709\u4e00\u4e2a\u5706, \u4e3a\u4e86\u8868\u793a\u8fd9\u4e2a\u5706, \u6211\u4eec\u5f15\u5165\u4e86 x \u4e0e y \u4e24\u4e2a\u53d8\u91cf, \u56e0\u6b64\u8fd9\u4e2a\u5706\u7531\u4e00\u5806\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\u6784\u6210. \u663e\u7136\u5982\u679c\u7528\u4e8c\u7ef4\u5750\u6807\u6765\u8868\u793a, \u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u8ba9\u8fd9\u4e2a\u4e8c\u7ef4\u5750\u6807\u7cfb\u7684\u6240\u6709\u70b9\u90fd\u662f\u8fd9\u4e2a\u5706\u4e0a\u7684\u70b9. \u4e5f\u5c31\u662f\u8bf4, \u7528\u4e8c\u7ef4\u5750\u6807\u6765\u8868\u793a\u8fd9\u4e2a\u5706\u5176\u5b9e\u662f\u6709\u5197\u4f59\u7684. \u6211\u4eec\u5e0c\u671b, \u5982\u679c\u80fd\u5efa\u7acb\u67d0\u4e00\u79cd\u63cf\u8ff0\u65b9\u6cd5, \u8ba9\u8fd9\u4e2a\u63cf\u8ff0\u65b9\u6cd5\u6240\u786e\u5b9a\u7684\u6240\u6709\u70b9\u7684\u96c6\u5408\u90fd\u80fd\u5728\u5706\u4e0a, \u751a\u81f3\u80fd\u8fde\u7eed\u4e0d\u95f4\u65ad\u5730\u8868\u793a\u5706\u4e0a\u7684\u70b9. \u5bf9\u4e8e\u5706\u6765\u8bf4, \u90a3\u5c31\u662f\u4f7f\u7528\u7528\u6781\u5750\u6807\u8868\u793a, \u5728\u6781\u5750\u6807\u7684\u8868\u793a\u65b9\u6cd5\u4e0b, \u5706\u5fc3\u5728\u539f\u70b9\u7684\u5706, \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u5c31\u80fd\u786e\u5b9a: \u534a\u5f84. \u5f53\u4f60\u8fde\u7eed\u6539\u53d8\u534a\u5f84\u7684\u5927\u5c0f, \u5c31\u80fd\u4ea7\u751f\u8fde\u7eed\u4e0d\u65ad\u7684\"\u80fd\u88ab\u8f6c\u6362\u6210\u4e8c\u7ef4\u5750\u6807\u8868\u793a\"\u7684\u5706. \u6240\u4ee5\u8bf4, \u5b9e\u9645\u4e0a \u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5706\u5c31\u662f\u4e00\u4e2a\u4e00\u7ef4\u6d41\u5f62 . \u53c2\u8003 [1] sklearn: \u6d41\u5f62\u5b66\u4e60 http://sklearn.apachecn.org/cn/0.19.0/modules/manifold.html","title":"sklearn-\u6d41\u5f62\u5b66\u4e60"},{"location":"content/daze/sklearn/manifold/#_1","text":"\u6d41\u5f62\u5b66\u4e60\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u964d\u7ef4\u65b9\u6cd5. \u5176\u7b97\u6cd5\u57fa\u4e8e\u7684\u601d\u60f3\u662f: \u8bb8\u591a\u6570\u636e\u96c6\u7684\u7ef4\u5ea6\u8fc7\u9ad8\u53ea\u662f\u7531\u4eba\u4e3a\u5bfc\u81f4\u7684. \u9ad8\u7ef4\u6570\u636e\u96c6\u4f1a\u975e\u5e38\u96be\u4ee5\u53ef\u89c6\u5316. \u867d\u7136\u53ef\u4ee5\u7ed8\u5236\u4e24\u7ef4\u6216\u4e09\u7ef4\u7684\u6570\u636e\u6765\u663e\u793a\u6570\u636e\u7684\u56fa\u6709\u7ed3\u6784, \u4f46\u4e0e\u4e4b\u7b49\u6548\u7684\u9ad8\u7ef4\u56fe\u4e0d\u592a\u76f4\u89c2. \u4e3a\u4e86\u5e2e\u52a9\u6570\u636e\u96c6\u7ed3\u6784\u7684\u53ef\u89c6\u5316, \u5fc5\u987b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u964d\u4f4e\u7ef4\u5ea6. \u901a\u8fc7\u5bf9\u6570\u636e\u7684\u968f\u673a\u6295\u5f71\u6765\u5b9e\u73b0\u964d\u7ef4\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5. \u867d\u7136\u8fd9\u6837\u505a\u80fd\u5b9e\u73b0\u6570\u636e\u7ed3\u6784\u4e00\u5b9a\u7a0b\u5ea6\u7684\u53ef\u89c6\u5316, \u4f46\u968f\u673a\u9009\u62e9\u6295\u5f71\u4ecd\u6709\u8bb8\u591a\u6709\u5f85\u6539\u8fdb\u4e4b\u5904. \u5728\u968f\u673a\u6295\u5f71\u4e2d, \u6570\u636e\u4e2d\u66f4\u6709\u8da3\u7684\u7ed3\u6784\u5f88\u53ef\u80fd\u4f1a\u4e22\u5931. \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898, \u4e00\u4e9b\u76d1\u7763\u548c\u65e0\u76d1\u7763\u7684\u7ebf\u6027\u964d\u7ef4\u6846\u67b6\u88ab\u8bbe\u8ba1\u51fa\u6765, \u5982\u4e3b\u6210\u5206\u5206\u6790(PCA), \u72ec\u7acb\u6210\u5206\u5206\u6790, \u7ebf\u6027\u5224\u522b\u5206\u6790\u7b49. \u8fd9\u4e9b\u7b97\u6cd5\u5b9a\u4e49\u4e86\u660e\u786e\u7684\u89c4\u5b9a\u6765\u9009\u62e9\u6570\u636e\u7684\"\u6709\u8da3\u7684\"\u7ebf\u6027\u6295\u5f71. \u5b83\u4eec\u867d\u7136\u5f3a\u5927, \u4f46\u662f\u4f1a\u7ecf\u5e38\u9519\u5931\u6570\u636e\u4e2d\u91cd\u8981\u7684\u975e\u7ebf\u6027\u7ed3\u6784. \u6d41\u5f62\u5b66\u4e60\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u5c06\u7ebf\u6027\u6846\u67b6(\u5982PCA)\u63a8\u5e7f\u4e3a\u5bf9\u6570\u636e\u4e2d\u975e\u7ebf\u6027\u7ed3\u6784\u654f\u611f\u7684\u5c1d\u8bd5. \u867d\u7136\u5b58\u5728\u76d1\u7763\u53d8\u91cf, \u4f46\u662f\u5178\u578b\u7684\u6d41\u5f62\u5b66\u4e60\u95ee\u9898\u662f\u65e0\u76d1\u7763\u7684: \u5b83\u4ece\u6570\u636e\u672c\u8eab\u5b66\u4e60\u6570\u636e\u7684\u9ad8\u7ef4\u7ed3\u6784, \u800c\u4e0d\u4f7f\u7528\u9884\u5b9a\u7684\u5206\u7c7b. \u901a\u8fc7\u6d41\u5f62\u5b66\u4e60\u6765\u5b9e\u73b0\u964d\u7ef4\u7684\u65b9\u6cd5\u6709\u5f88\u591a, \u5176\u57fa\u672c\u601d\u60f3\u4e5f\u7c7b\u4f3c: \u5047\u8bbe\u6570\u636e\u5728\u9ad8\u7ef4\u5177\u6709\u67d0\u79cd\u7ed3\u6784\u7279\u5f81, \u5e0c\u671b\u964d\u5230\u4f4e\u7ef4\u540e, \u4ecd\u80fd\u4fdd\u6301\u8be5\u7ed3\u6784 . \u6bd4\u8f83\u5e38\u89c1\u7684\u6709: \u5c40\u90e8\u6539\u7ebf\u5d4c\u5165. \u5047\u8bbe\u6570\u636e\u4e2d\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u7531\u5176\u8fd1\u90bb\u7684\u51e0\u4e2a\u70b9\u91cd\u6784\u51fa\u6765. \u964d\u5230\u4f4e\u7ef4, \u4f7f\u6837\u672c\u4ecd\u80fd\u4fdd\u6301\u539f\u6765\u7684\u91cd\u6784\u5173\u7cfb, \u4e14\u91cd\u6784\u7cfb\u6570\u4e5f\u4e00\u6837. \u62c9\u666e\u62c9\u65af\u7279\u5f81\u6620\u5c04. \u5c06\u6570\u636e\u6620\u5c04\u5230\u4f4e\u7ef4, \u4e14\u4fdd\u6301\u70b9\u4e4b\u95f4\u7684(\u76f8\u4f3c\u5ea6)\u8ddd\u79bb\u5173\u7cfb. \u5373\u5728\u539f\u7a7a\u95f4\u4e2d\u76f8\u8ddd\u8f83\u8fdc\u7684\u70b9, \u6295\u5f71\u5230\u4f4e\u7ef4\u7a7a\u95f4\u4e2d, \u5e0c\u671b\u5b83\u4eec\u4e4b\u95f4\u4ecd\u76f8\u8ddd\u8f83\u8fdc. \u53cd\u4e4b\u4ea6\u7136. \u5c40\u90e8\u4fdd\u6301\u6295\u5f71 \u7b49\u8ddd\u6620\u5c04","title":"\u6d41\u5f62\u5b66\u4e60"},{"location":"content/daze/sklearn/manifold/#_2","text":"sklearn \u5b9e\u73b0\u4e86\u591a\u79cd\u6d41\u5f62\u5b66\u4e60, \u8fd9\u91cc\u4ee5\u624b\u5199\u6570\u5b57\u6570\u636e\u96c6\u4e3a\u4f8b, \u5c55\u793a\u6d41\u5f62\u5b66\u4e60\u7b97\u6cd5\u5728\u8be5\u6570\u636e\u96c6\u4e0b\u7684\u6548\u679c. import os import matplotlib.pyplot as plt import numpy as np import sklearn.datasets import sklearn.decomposition import sklearn.discriminant_analysis import sklearn.ensemble import sklearn.manifold import sklearn.random_projection savedir = '/tmp/manifold' if not os.path.exists(savedir): os.mkdir(savedir) digits = sklearn.datasets.load_digits(n_class=6) x = digits.data y = digits.target n_neighbors = 30 def plot_embedding(x, title): x_min, x_max = np.min(x, 0), np.max(x, 0) x = (x - x_min) / (x_max - x_min) plt.figure() c = ['red', 'blue', 'lime', 'black', 'yellow', 'purple'] for l in range(6): p = x[y == l] plt.scatter(p[:, 0], p[:, 1], s=25, c=c[l], alpha=0.5, label=str(l)) plt.legend(loc='lower right') plt.xticks([]) plt.yticks([]) plt.title(title) p = os.path.normpath(os.path.join(savedir, title.replace(' ', '_') + '.png')) print(f'Savefig to {p}') plt.savefig(p) n_img_per_row = 20 img = np.zeros((10 * n_img_per_row, 10 * n_img_per_row)) for i in range(n_img_per_row): ix = 10 * i + 1 for j in range(n_img_per_row): iy = 10 * j + 1 img[ix:ix + 8, iy:iy + 8] = x[i * n_img_per_row + j].reshape((8, 8)) plt.imshow(img, cmap=plt.cm.binary) plt.xticks([]) plt.yticks([]) plt.title('Selection from digits') plt.savefig(os.path.join(savedir, 'Selection_from_digits.png')) print('Computing random projection') rp = sklearn.random_projection.SparseRandomProjection(n_components=2, random_state=42) x_projected = rp.fit_transform(x) plot_embedding(x_projected, 'Random Projection') print('Computing PCA projection') x_pca = sklearn.decomposition.TruncatedSVD(n_components=2).fit_transform(x) plot_embedding(x_pca, 'Principal Components projection') print('Computing Linear Discriminant Analysis projection') x2 = x.copy() x2.flat[::x.shape[1] + 1] += 0.01 # Make X invertible x_lda = sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=2).fit_transform(x2, y) plot_embedding(x_lda, 'Linear Discriminant projection') print('Computing Isomap embedding') x_iso = sklearn.manifold.Isomap(n_neighbors, n_components=2).fit_transform(x) plot_embedding(x_iso, 'Isomap projection') print('Computing LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='standard') x_lle = clf.fit_transform(x) plot_embedding(x_lle, 'Locally Linear Embedding') print('Computing modified LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='modified') x_mlle = clf.fit_transform(x) plot_embedding(x_mlle, 'Modified Locally Linear Embedding') print('Computing Hessian LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='hessian') x_hlle = clf.fit_transform(x) plot_embedding(x_hlle, 'Hessian Locally Linear Embedding') print('Computing LTSA embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='ltsa') x_ltsa = clf.fit_transform(x) plot_embedding(x_ltsa, 'Local Tangent Space Alignment') print('Computing MDS embedding') clf = sklearn.manifold.MDS(n_components=2, n_init=1, max_iter=100) x_mds = clf.fit_transform(x) plot_embedding(x_mds, 'MDS embedding') print('Computing Totally Random Trees embedding') hasher = sklearn.ensemble.RandomTreesEmbedding(n_estimators=200, random_state=0, max_depth=5) x_transformed = hasher.fit_transform(x) pca = sklearn.decomposition.TruncatedSVD(n_components=2) x_reduced = pca.fit_transform(x_transformed) plot_embedding(x_reduced, 'Random forest embedding') print('Computing Spectral embedding') embedder = sklearn.manifold.SpectralEmbedding(n_components=2, random_state=0, eigen_solver='arpack') x_se = embedder.fit_transform(x) plot_embedding(x_se, 'Spectral embedding') print('Computing t-SNE embedding') tsne = sklearn.manifold.TSNE(n_components=2, init='pca', random_state=0) x_tsne = tsne.fit_transform(x) plot_embedding(x_tsne, 't-SNE embedding')","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/sklearn/manifold/#_3","text":"\u8bb8\u591a\u6570\u636e\u96c6\u7684\u7ef4\u5ea6\u8fc7\u9ad8\u53ea\u662f\u7531\u4eba\u4e3a\u5bfc\u81f4\u7684 . \u6bd4\u5982\u4e8c\u7ef4\u5e73\u9762\u4e0a\u6709\u4e00\u4e2a\u5706, \u4e3a\u4e86\u8868\u793a\u8fd9\u4e2a\u5706, \u6211\u4eec\u5f15\u5165\u4e86 x \u4e0e y \u4e24\u4e2a\u53d8\u91cf, \u56e0\u6b64\u8fd9\u4e2a\u5706\u7531\u4e00\u5806\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\u6784\u6210. \u663e\u7136\u5982\u679c\u7528\u4e8c\u7ef4\u5750\u6807\u6765\u8868\u793a, \u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u8ba9\u8fd9\u4e2a\u4e8c\u7ef4\u5750\u6807\u7cfb\u7684\u6240\u6709\u70b9\u90fd\u662f\u8fd9\u4e2a\u5706\u4e0a\u7684\u70b9. \u4e5f\u5c31\u662f\u8bf4, \u7528\u4e8c\u7ef4\u5750\u6807\u6765\u8868\u793a\u8fd9\u4e2a\u5706\u5176\u5b9e\u662f\u6709\u5197\u4f59\u7684. \u6211\u4eec\u5e0c\u671b, \u5982\u679c\u80fd\u5efa\u7acb\u67d0\u4e00\u79cd\u63cf\u8ff0\u65b9\u6cd5, \u8ba9\u8fd9\u4e2a\u63cf\u8ff0\u65b9\u6cd5\u6240\u786e\u5b9a\u7684\u6240\u6709\u70b9\u7684\u96c6\u5408\u90fd\u80fd\u5728\u5706\u4e0a, \u751a\u81f3\u80fd\u8fde\u7eed\u4e0d\u95f4\u65ad\u5730\u8868\u793a\u5706\u4e0a\u7684\u70b9. \u5bf9\u4e8e\u5706\u6765\u8bf4, \u90a3\u5c31\u662f\u4f7f\u7528\u7528\u6781\u5750\u6807\u8868\u793a, \u5728\u6781\u5750\u6807\u7684\u8868\u793a\u65b9\u6cd5\u4e0b, \u5706\u5fc3\u5728\u539f\u70b9\u7684\u5706, \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u5c31\u80fd\u786e\u5b9a: \u534a\u5f84. \u5f53\u4f60\u8fde\u7eed\u6539\u53d8\u534a\u5f84\u7684\u5927\u5c0f, \u5c31\u80fd\u4ea7\u751f\u8fde\u7eed\u4e0d\u65ad\u7684\"\u80fd\u88ab\u8f6c\u6362\u6210\u4e8c\u7ef4\u5750\u6807\u8868\u793a\"\u7684\u5706. \u6240\u4ee5\u8bf4, \u5b9e\u9645\u4e0a \u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5706\u5c31\u662f\u4e00\u4e2a\u4e00\u7ef4\u6d41\u5f62 .","title":"\u5173\u4e8e\u7ef4\u5ea6"},{"location":"content/daze/sklearn/manifold/#_4","text":"[1] sklearn: \u6d41\u5f62\u5b66\u4e60 http://sklearn.apachecn.org/cn/0.19.0/modules/manifold.html","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/overview/","text":"\u6982\u89c8 scikit-learn \u662f\u57fa\u4e8e Python \u8bed\u8a00\u7684\u673a\u5668\u5b66\u4e60\u5de5\u5177. \u7b80\u5355\u9ad8\u6548\u7684\u6570\u636e\u6316\u6398\u548c\u6570\u636e\u5206\u6790\u5de5\u5177 \u53ef\u4f9b\u5927\u5bb6\u5728\u5404\u79cd\u73af\u5883\u4e2d\u91cd\u590d\u4f7f\u7528 \u5efa\u7acb\u5728 NumPy \uff0cSciPy \u548c matplotlib \u4e0a \u5f00\u6e90\uff0c\u53ef\u5546\u4e1a\u4f7f\u7528 - BSD\u8bb8\u53ef\u8bc1 \u4e00\u822c\u6765\u8bf4, \u4e00\u4e2a\u5b66\u4e60\u95ee\u9898\u901a\u5e38\u4f1a\u8003\u8651\u4e00\u7cfb\u5217 n \u4e2a\u6837\u672c\u6570\u636e, \u7136\u540e\u5c1d\u8bd5\u9884\u6d4b\u672a\u77e5\u6570\u636e\u7684\u5c5e\u6027. \u5982\u679c\u6bcf\u4e2a\u6837\u672c\u662f\u591a\u4e2a\u5c5e\u6027\u7684\u6570\u636e(\u6bd4\u5982\u8bf4\u662f\u4e00\u4e2a\u591a\u7ef4\u8bb0\u5f55), \u5c31\u8bf4\u5b83\u6709\u8bb8\u591a\"\u5c5e\u6027\", \u6216\u79f0 features(\u7279\u5f81). \u6211\u4eec\u53ef\u4ee5\u5c06\u5b66\u4e60\u95ee\u9898\u5206\u4e3a\u51e0\u5927\u7c7b: \u76d1\u7763\u5b66\u4e60 , \u5176\u4e2d\u6570\u636e\u5e26\u6709\u4e00\u4e2a\u9644\u52a0\u5c5e\u6027, \u5373\u6211\u4eec\u60f3\u8981\u9884\u6d4b\u7684\u7ed3\u679c\u503c. \u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u662f: \u5206\u7c7b : \u6837\u672c\u5c5e\u4e8e\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u7c7b, \u6211\u4eec\u60f3\u4ece\u5df2\u7ecf\u6807\u8bb0\u7684\u6570\u636e\u4e2d\u5b66\u4e60\u5982\u4f55\u9884\u6d4b\u672a\u6807\u8bb0\u6570\u636e\u7684\u7c7b\u522b. \u5206\u7c7b\u95ee\u9898\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u624b\u5199\u6570\u5b57\u8bc6\u522b, \u5176\u76ee\u7684\u662f\u5c06\u6bcf\u4e2a\u8f93\u5165\u5411\u91cf\u5206\u914d\u7ed9\u6709\u9650\u6570\u76ee\u7684\u79bb\u6563\u7c7b\u522b\u4e4b\u4e00. \u6211\u4eec\u901a\u5e38\u628a\u5206\u7c7b\u89c6\u4f5c\u76d1\u7763\u5b66\u4e60\u7684\u4e00\u4e2a\u79bb\u6563\u5f62\u5f0f(\u533a\u522b\u4e8e\u8fde\u7eed\u5f62\u5f0f), \u4ece\u6709\u9650\u7684\u7c7b\u522b\u4e2d, \u7ed9\u6bcf\u4e2a\u6837\u672c\u8d34\u4e0a\u6b63\u786e\u7684\u6807\u7b7e. \u56de\u5f52 : \u5982\u679c\u671f\u671b\u7684\u8f93\u51fa\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u8fde\u7eed\u53d8\u91cf\u7ec4\u6210, \u5219\u8be5\u4efb\u52a1\u79f0\u4e3a\u56de\u5f52. \u56de\u5f52\u95ee\u9898\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u9884\u6d4b\u9c91\u9c7c\u7684\u957f\u5ea6\u662f\u5176\u5e74\u9f84\u548c\u4f53\u91cd\u7684\u51fd\u6570. \u65e0\u76d1\u7763\u5b66\u4e60 , \u5176\u4e2d\u8bad\u7ec3\u6570\u636e\u7531\u6ca1\u6709\u4efb\u4f55\u76f8\u5e94\u76ee\u6807\u503c\u7684\u4e00\u7ec4\u8f93\u5165\u5411\u91cf x \u7ec4\u6210. \u8fd9\u79cd\u95ee\u9898\u7684\u76ee\u6807\u53ef\u80fd\u662f\u5728\u6570\u636e\u4e2d\u53d1\u73b0\u5f7c\u6b64\u7c7b\u4f3c\u7684\u793a\u4f8b\u6240\u805a\u6210\u7684\u7ec4, \u8fd9\u79cd\u95ee\u9898\u79f0\u4e3a \u805a\u7c7b , \u6216\u8005, \u786e\u5b9a\u8f93\u5165\u7a7a\u95f4\u5185\u7684\u6570\u636e\u5206\u5e03, \u79f0\u4e3a \u5bc6\u5ea6\u4f30\u8ba1 , \u53c8\u6216\u4ece\u9ad8\u7ef4\u6570\u636e\u6295\u5f71\u6570\u636e\u7a7a\u95f4\u7f29\u5c0f\u5230\u4e8c\u7ef4\u6216\u4e09\u7ef4\u4ee5\u8fdb\u884c\u53ef\u89c6\u5316. \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 \u673a\u5668\u5b66\u4e60\u662f\u4ece\u6570\u636e\u7684\u5c5e\u6027\u4e2d\u5b66\u4e60, \u5e76\u5c06\u5b83\u4eec\u5e94\u7528\u5230\u65b0\u6570\u636e\u7684\u8fc7\u7a0b. \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u673a\u5668\u5b66\u4e60\u4e2d\u8bc4\u4f30\u7b97\u6cd5\u7684\u666e\u904d\u5b9e\u8df5\u662f\u628a\u6570\u636e\u5206\u5272\u6210\u8bad\u7ec3\u96c6(\u6211\u4eec\u4ece\u4e2d\u5b66\u4e60\u6570\u636e\u7684\u5c5e\u6027)\u548c\u6d4b\u8bd5\u96c6(\u6211\u4eec\u6d4b\u8bd5\u8fd9\u4e9b\u6027\u8d28). \u793a\u4f8b: \u624b\u5199\u6570\u5b57\u8bc6\u522b \u4e0b\u9762\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u624b\u5199\u6570\u5b57\u8bc6\u522b\u4f8b\u5b50\u4ecb\u7ecd sklearn \u7684\u5de5\u4f5c\u6a21\u5f0f. \u53ef\u4ee5\u770b\u5230, \u5176\u8bad\u7ec3\u8fc7\u7a0b\u4f9d\u7136\u9075\u5faa \u8f7d\u5165\u6570\u636e-\u5b9a\u4e49\u6a21\u578b-\u8bad\u7ec3-\u9884\u6d4b \u8fd9\u6837\u7684\u57fa\u672c\u89c4\u5219. import sklearn.datasets import sklearn.externals.joblib import sklearn.metrics import sklearn.svm # \u8f7d\u5165\u624b\u5199\u6570\u5b57\u8bc6\u522b\u6570\u636e, \u5e76\u5206\u5272\u4e3a\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6(9:1) digits = sklearn.datasets.load_digits() n_samples = len(digits.data) split_index = n_samples // 10 * 9 Xtr = digits.data[:split_index] Ytr = digits.target[:split_index] Xte = digits.data[split_index:] Yte = digits.target[split_index:] # \u8bad\u7ec3 clf = sklearn.svm.SVC(gamma=0.001, C=100) clf.fit(Xtr, Ytr) # \u9884\u6d4b. \u8be5\u6a21\u578b\u7cbe\u5ea6\u4e3a 0.96, \u53ec\u56de\u4e3a 0.95. Yte_pred = clf.predict(Xte) acc = sklearn.metrics.classification_report(Yte, Yte_pred) print(acc) # \u4fdd\u5b58\u6a21\u578b. \u53ef\u4ee5\u4f7f\u7528 sklearn.externals.joblib.load \u51fd\u6570\u91cd\u8f7d\u6a21\u578b. sklearn.externals.joblib.dump(clf, '/tmp/svm.pkl') \u53c2\u8003 [1] sklearn: \u4f7f\u7528 scikit-learn \u4ecb\u7ecd\u673a\u5668\u5b66\u4e60 http://sklearn.apachecn.org/cn/0.19.0/tutorial/basic/tutorial.html","title":"sklearn-\u6982\u89c8"},{"location":"content/daze/sklearn/overview/#_1","text":"scikit-learn \u662f\u57fa\u4e8e Python \u8bed\u8a00\u7684\u673a\u5668\u5b66\u4e60\u5de5\u5177. \u7b80\u5355\u9ad8\u6548\u7684\u6570\u636e\u6316\u6398\u548c\u6570\u636e\u5206\u6790\u5de5\u5177 \u53ef\u4f9b\u5927\u5bb6\u5728\u5404\u79cd\u73af\u5883\u4e2d\u91cd\u590d\u4f7f\u7528 \u5efa\u7acb\u5728 NumPy \uff0cSciPy \u548c matplotlib \u4e0a \u5f00\u6e90\uff0c\u53ef\u5546\u4e1a\u4f7f\u7528 - BSD\u8bb8\u53ef\u8bc1 \u4e00\u822c\u6765\u8bf4, \u4e00\u4e2a\u5b66\u4e60\u95ee\u9898\u901a\u5e38\u4f1a\u8003\u8651\u4e00\u7cfb\u5217 n \u4e2a\u6837\u672c\u6570\u636e, \u7136\u540e\u5c1d\u8bd5\u9884\u6d4b\u672a\u77e5\u6570\u636e\u7684\u5c5e\u6027. \u5982\u679c\u6bcf\u4e2a\u6837\u672c\u662f\u591a\u4e2a\u5c5e\u6027\u7684\u6570\u636e(\u6bd4\u5982\u8bf4\u662f\u4e00\u4e2a\u591a\u7ef4\u8bb0\u5f55), \u5c31\u8bf4\u5b83\u6709\u8bb8\u591a\"\u5c5e\u6027\", \u6216\u79f0 features(\u7279\u5f81). \u6211\u4eec\u53ef\u4ee5\u5c06\u5b66\u4e60\u95ee\u9898\u5206\u4e3a\u51e0\u5927\u7c7b: \u76d1\u7763\u5b66\u4e60 , \u5176\u4e2d\u6570\u636e\u5e26\u6709\u4e00\u4e2a\u9644\u52a0\u5c5e\u6027, \u5373\u6211\u4eec\u60f3\u8981\u9884\u6d4b\u7684\u7ed3\u679c\u503c. \u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u662f: \u5206\u7c7b : \u6837\u672c\u5c5e\u4e8e\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u7c7b, \u6211\u4eec\u60f3\u4ece\u5df2\u7ecf\u6807\u8bb0\u7684\u6570\u636e\u4e2d\u5b66\u4e60\u5982\u4f55\u9884\u6d4b\u672a\u6807\u8bb0\u6570\u636e\u7684\u7c7b\u522b. \u5206\u7c7b\u95ee\u9898\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u624b\u5199\u6570\u5b57\u8bc6\u522b, \u5176\u76ee\u7684\u662f\u5c06\u6bcf\u4e2a\u8f93\u5165\u5411\u91cf\u5206\u914d\u7ed9\u6709\u9650\u6570\u76ee\u7684\u79bb\u6563\u7c7b\u522b\u4e4b\u4e00. \u6211\u4eec\u901a\u5e38\u628a\u5206\u7c7b\u89c6\u4f5c\u76d1\u7763\u5b66\u4e60\u7684\u4e00\u4e2a\u79bb\u6563\u5f62\u5f0f(\u533a\u522b\u4e8e\u8fde\u7eed\u5f62\u5f0f), \u4ece\u6709\u9650\u7684\u7c7b\u522b\u4e2d, \u7ed9\u6bcf\u4e2a\u6837\u672c\u8d34\u4e0a\u6b63\u786e\u7684\u6807\u7b7e. \u56de\u5f52 : \u5982\u679c\u671f\u671b\u7684\u8f93\u51fa\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u8fde\u7eed\u53d8\u91cf\u7ec4\u6210, \u5219\u8be5\u4efb\u52a1\u79f0\u4e3a\u56de\u5f52. \u56de\u5f52\u95ee\u9898\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u9884\u6d4b\u9c91\u9c7c\u7684\u957f\u5ea6\u662f\u5176\u5e74\u9f84\u548c\u4f53\u91cd\u7684\u51fd\u6570. \u65e0\u76d1\u7763\u5b66\u4e60 , \u5176\u4e2d\u8bad\u7ec3\u6570\u636e\u7531\u6ca1\u6709\u4efb\u4f55\u76f8\u5e94\u76ee\u6807\u503c\u7684\u4e00\u7ec4\u8f93\u5165\u5411\u91cf x \u7ec4\u6210. \u8fd9\u79cd\u95ee\u9898\u7684\u76ee\u6807\u53ef\u80fd\u662f\u5728\u6570\u636e\u4e2d\u53d1\u73b0\u5f7c\u6b64\u7c7b\u4f3c\u7684\u793a\u4f8b\u6240\u805a\u6210\u7684\u7ec4, \u8fd9\u79cd\u95ee\u9898\u79f0\u4e3a \u805a\u7c7b , \u6216\u8005, \u786e\u5b9a\u8f93\u5165\u7a7a\u95f4\u5185\u7684\u6570\u636e\u5206\u5e03, \u79f0\u4e3a \u5bc6\u5ea6\u4f30\u8ba1 , \u53c8\u6216\u4ece\u9ad8\u7ef4\u6570\u636e\u6295\u5f71\u6570\u636e\u7a7a\u95f4\u7f29\u5c0f\u5230\u4e8c\u7ef4\u6216\u4e09\u7ef4\u4ee5\u8fdb\u884c\u53ef\u89c6\u5316. \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 \u673a\u5668\u5b66\u4e60\u662f\u4ece\u6570\u636e\u7684\u5c5e\u6027\u4e2d\u5b66\u4e60, \u5e76\u5c06\u5b83\u4eec\u5e94\u7528\u5230\u65b0\u6570\u636e\u7684\u8fc7\u7a0b. \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u673a\u5668\u5b66\u4e60\u4e2d\u8bc4\u4f30\u7b97\u6cd5\u7684\u666e\u904d\u5b9e\u8df5\u662f\u628a\u6570\u636e\u5206\u5272\u6210\u8bad\u7ec3\u96c6(\u6211\u4eec\u4ece\u4e2d\u5b66\u4e60\u6570\u636e\u7684\u5c5e\u6027)\u548c\u6d4b\u8bd5\u96c6(\u6211\u4eec\u6d4b\u8bd5\u8fd9\u4e9b\u6027\u8d28).","title":"\u6982\u89c8"},{"location":"content/daze/sklearn/overview/#_2","text":"\u4e0b\u9762\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u624b\u5199\u6570\u5b57\u8bc6\u522b\u4f8b\u5b50\u4ecb\u7ecd sklearn \u7684\u5de5\u4f5c\u6a21\u5f0f. \u53ef\u4ee5\u770b\u5230, \u5176\u8bad\u7ec3\u8fc7\u7a0b\u4f9d\u7136\u9075\u5faa \u8f7d\u5165\u6570\u636e-\u5b9a\u4e49\u6a21\u578b-\u8bad\u7ec3-\u9884\u6d4b \u8fd9\u6837\u7684\u57fa\u672c\u89c4\u5219. import sklearn.datasets import sklearn.externals.joblib import sklearn.metrics import sklearn.svm # \u8f7d\u5165\u624b\u5199\u6570\u5b57\u8bc6\u522b\u6570\u636e, \u5e76\u5206\u5272\u4e3a\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6(9:1) digits = sklearn.datasets.load_digits() n_samples = len(digits.data) split_index = n_samples // 10 * 9 Xtr = digits.data[:split_index] Ytr = digits.target[:split_index] Xte = digits.data[split_index:] Yte = digits.target[split_index:] # \u8bad\u7ec3 clf = sklearn.svm.SVC(gamma=0.001, C=100) clf.fit(Xtr, Ytr) # \u9884\u6d4b. \u8be5\u6a21\u578b\u7cbe\u5ea6\u4e3a 0.96, \u53ec\u56de\u4e3a 0.95. Yte_pred = clf.predict(Xte) acc = sklearn.metrics.classification_report(Yte, Yte_pred) print(acc) # \u4fdd\u5b58\u6a21\u578b. \u53ef\u4ee5\u4f7f\u7528 sklearn.externals.joblib.load \u51fd\u6570\u91cd\u8f7d\u6a21\u578b. sklearn.externals.joblib.dump(clf, '/tmp/svm.pkl')","title":"\u793a\u4f8b: \u624b\u5199\u6570\u5b57\u8bc6\u522b"},{"location":"content/daze/sklearn/overview/#_3","text":"[1] sklearn: \u4f7f\u7528 scikit-learn \u4ecb\u7ecd\u673a\u5668\u5b66\u4e60 http://sklearn.apachecn.org/cn/0.19.0/tutorial/basic/tutorial.html","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/svm/","text":"SVM SVM(\u652f\u6301\u5411\u91cf\u673a)\u53ef\u7528\u4e0e\u5206\u7c7b, \u56de\u5f52\u4e0e\u5f02\u5e38\u68c0\u6d4b. \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u636e\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\u800c\u8a00, \u4e00\u4e2a\u666e\u901a\u7684 SVM \u5c31\u662f\u4e00\u6761\u76f4\u7ebf\uff0c\u7528\u6765\u5b8c\u7f8e\u5212\u5206\u4e24\u7c7b. \u4f46\u662f, \u80fd\u540c\u65f6\u5212\u5206\u4e24\u7c7b\u6570\u636e\u7684\u76f4\u7ebf\u6709\u65e0\u6570\u591a\u6761, \u6211\u4eec\u9700\u8981\u7684\u662f\u6070\u597d\u5728\u4e24\u7c7b\u6570\u636e\u7684\u4e2d\u95f4, \u8ddd\u79bb\u4e24\u4e2a\u7c7b\u7684\u70b9\u4e00\u6837\u8fdc\u7684\u76f4\u7ebf. \u6211\u4eec\u79f0\u5b83\u4e3a \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762 . \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u636e\u800c\u8a00, \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u662f\u4e00\u6761\u76f4\u7ebf, \u4f46\u662f\u5bf9\u4e09\u7ef4\u6570\u636e\u800c\u8a00, \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u662f\u4e00\u4e2a\u9762(\u5373 N \u7ef4\u6570\u636e\u7684\u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u4e3a N-1 \u7ef4). \u4ec0\u4e48\u662f SVM \u5bfb\u627e\u4e00\u6761\u79bb\u82f9\u679c\u548c\u9999\u8549\u4e4b\u95f4\u8ddd\u79bb(margin)\u6700\u5927\u7684\u76f4\u7ebf. \u5176\u4e2d\u8ddd\u79bb, \u5373\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb; \u7ea6\u675f\u6761\u4ef6\u4e3a\u6240\u6709\u82f9\u679c\u548c\u9999\u8549\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb\u5927\u4e8e\u7b49\u4e8e margin. \u7528\u6570\u5b66\u8868\u8fbe\u5f0f\u8868\u793a: $$ y_i(w^Tx_i+b) \\ge 1, \\forall i $$ \u5982\u679c\u9999\u8549\u548c\u82f9\u679c\u4e0d\u80fd\u7528\u76f4\u7ebf\u5206\u5272\u5462? \u4f4e\u7ef4\u975e\u7ebf\u6027\u7684\u5206\u754c\u7ebf\u5176\u5b9e\u5728\u9ad8\u7ef4\u662f\u53ef\u4ee5\u7ebf\u6027\u5206\u5272. \u8bbe\u60f3\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5982\u679c\u6837\u672c\u5411\u91cf v \u8ddd\u79bb\u539f\u70b9(0, 0)\u7684\u8ddd\u79bb\u4e3a 1 \u4ee5\u5185\u5206\u7c7b\u88ab\u6807\u8bb0\u4e3a 0, \u5176\u4f59\u90fd\u662f1, \u540c\u6837\u662f\u5728\u4e8c\u7ef4\u7684\u60c5\u51b5\u4e0b\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u5f97, \u6b64\u65f6\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570: $$ f(x, y) = \\begin{cases} 1 & x^2+y^2 \\ge 1 \\\\ 0 & x^2+y^2<1 \\end{cases} $$ \u5373 $z=x^2+y^2$, \u6b64\u65f6\u4e8c\u7ef4\u7a7a\u95f4\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u70b9\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7ebf\u6027\u53ef\u5206. \u8fd9\u4e2a\u6784\u9020\u7684\u8fc7\u7a0b SVM \u6709\u901a\u7528\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3, \u5c31\u662f\u4f7f\u7528\u6838\u51fd\u6570\u8fdb\u884c\u6784\u9020. \u51e0\u4e2a\u5e38\u7528\u7684\u6838\u51fd\u6570\u5982\u7ebf\u6027\u6838\u51fd\u6570, \u591a\u9879\u5f0f\u6838\u51fd\u6570, \u5f84\u5411\u57fa\u6838\u51fd\u6570, \u9ad8\u65af\u6838\u51fd\u6570\u7b49. \u6838\u51fd\u6570\u7684\u76ee\u7684\u5f88\u660e\u786e: \u5c31\u662f\u5728\u5f53\u524d\u7ef4\u5ea6\u7a7a\u95f4\u4e2d\u7684\u6837\u672c\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u5c31\u4e00\u5f8b\u6620\u5c04\u5230\u9ad8\u7ef4\u4e2d\u53bb, \u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u627e\u5230\u8d85\u5e73\u9762, \u5f97\u5230\u8d85\u5e73\u9762\u65b9\u7a0b. \u800c\u5728\u66f4\u9ad8\u7ef4\u7684\u8d85\u5e73\u9762\u4e0a\u7684\u65b9\u7a0b\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u589e\u52a0\u66f4\u591a\u7684\u7ef4\u5ea6\u53d8\u91cf. \u4f8b\u5982, \u5728\u7814\u7a76\u4e8c\u7ef4\u7a7a\u95f4\u4e0a\u7684\u5411\u91cf\u5206\u7c7b\u95ee\u9898\u65f6, \u7ecf\u8fc7\u6838\u51fd\u6570\u6620\u5c04, \u6700\u540e\u5f97\u5230\u7684\u8d85\u5e73\u9762\u53d8\u6210\u4e86\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u66f2\u7ebf(\u4f46\u540c\u65f6\u4e5f\u662f\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u6b21\u65b9\u7a0b). \u5982\u679c\u9999\u8549\u548c\u82f9\u679c\u6709\u4ea4\u96c6\u5462? \u5373\u4f7f\u505a\u4e86\u5347\u7ef4, \u9999\u8549\u4e0e\u82f9\u679c\u4f9d\u7136\u4e0d\u80fd\u7ebf\u6027\u5206\u5272. \u6211\u4eec\u9700\u8981\u8c03\u6574\u6a21\u578b, \u4ee5\u4f7f\u5f97\u5728\u4fdd\u8bc1\u4e0d\u53ef\u5206\u7684\u60c5\u51b5\u4e0b, \u5c3d\u91cf\u627e\u5230\u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762. \u901a\u5e38\u72b6\u6001\u4e0b, \u4e00\u4e2a\u79bb\u7fa4\u70b9(\u53ef\u80fd\u662f\u566a\u58f0)\u53ef\u4ee5\u9020\u6210\u8d85\u5e73\u9762\u7684\u79fb\u52a8, \u95f4\u9694\u7f29\u5c0f, \u4ee5\u524d\u7684\u6a21\u578b\u5bf9\u566a\u58f0\u975e\u5e38\u654f\u611f. \u518d\u6709\u751a\u8005, \u5982\u679c\u79bb\u7fa4\u70b9\u5728\u53e6\u5916\u4e00\u4e2a\u7c7b\u4e2d, \u90a3\u4e48\u8fd9\u65f6\u5019\u5c31\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u4e86. \u8fd9\u65f6\u5019\u6211\u4eec\u5e94\u8be5\u5141\u8bb8\u4e00\u4e9b\u70b9\u6e38\u79bb\u5e76\u5728\u5728\u6a21\u578b\u4e2d\u8fdd\u80cc\u9650\u5236\u6761\u4ef6(\u51fd\u6570\u95f4\u9694\u5927\u4e8e 1). \u901a\u8fc7\u5f15\u5165 \u677e\u5f1b\u53d8\u91cf \u5141\u8bb8\u9519\u8bef\u7684\u5206\u7c7b. $$ y_i(w^Tx_i+b) \\ge 1-\\varepsilon_i, \\forall i $$ $\\varepsilon_i$ \u4e3a\u5141\u8bb8 $x_i$ \u504f\u79fb\u5206\u7c7b\u5e73\u9762\u7684\u8ddd\u79bb. \u5982\u679c\u8fd8\u6709\u68a8\u5462? \u53ef\u4ee5\u6bcf\u4e2a\u7c7b\u522b\u505a\u4e00\u6b21SVM: \u662f\u82f9\u679c\u8fd8\u662f\u4e0d\u662f\u82f9\u679c? \u662f\u9999\u8549\u8fd8\u662f\u4e0d\u662f\u9999\u8549? \u662f\u68a8\u5b50\u8fd8\u662f\u4e0d\u662f\u68a8\u5b50? \u4ece\u4e2d\u9009\u51fa\u53ef\u80fd\u6027\u6700\u5927\u7684. \u8fd9\u662f one-versus-the-rest approach . \u4e5f\u53ef\u4ee5\u4e24\u4e24\u505a\u4e00\u6b21SVM: \u662f\u82f9\u679c\u8fd8\u662f\u9999\u8549? \u662f\u9999\u8549\u8fd8\u662f\u68a8\u5b50? \u662f\u68a8\u5b50\u8fd8\u662f\u82f9\u679c? \u6700\u540e\u4e09\u4e2a\u5206\u7c7b\u5668\u6295\u7968\u51b3\u5b9a. \u8fd9\u662f one-versus-one approace . \u4ee3\u7801\u5b9e\u73b0 import matplotlib.pyplot as plt import sklearn.datasets import sklearn.svm import sklearn.metrics import sklearn.model_selection import numpy as np plt.style.use('seaborn') # \u751f\u6210 512 \u4e2a\u6570\u636e\u70b9, \u6240\u6709\u6570\u636e\u4ee5\u9ad8\u65af\u5206\u5e03\u5f62\u5f0f\u5206\u5e03\u5728\u4e24\u4e2a\u4e2d\u5fc3\u9644\u8fd1 x, y = sklearn.datasets.make_blobs(n_samples=512, centers=2, random_state=170) # \u5206\u522b\u6d4b\u8bd5\u6838\u51fd\u6570\u4e3a ['linear', 'poly', 'rbf', 'sigmoid'] for i, kernel in enumerate(['linear', 'poly', 'rbf', 'sigmoid']): plt.subplot(221 + i) clf = sklearn.svm.SVC(kernel=kernel) clf.fit(x, y) h = 0.02 x_min, x_max = x[:, 0].min() - 1, x[:, 0].max() + 1 y_min, y_max = x[:, 1].min() - 1, x[:, 1].max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) z = z.reshape(xx.shape) plt.pcolormesh(xx, yy, z, cmap='Paired', alpha=0.5) plt.scatter(x[:, 0], x[:, 1], c=y, cmap='Paired', edgecolors='k') plt.axis('off') plt.show() \u540e\u8bb0 \u6700\u8fd1\u6e10\u6e10\u611f\u5230\u529b\u4e0d\u4ece\u5fc3, \u8d8a\u6df1\u5165\u53d1\u73b0\u6d89\u53ca\u5230\u7684\u6570\u5b66\u63a8\u5bfc\u8d8a\u591a, \u5948\u4f55\u7cbe\u529b\u6709\u9650, \u5f80\u5f80\u53ea\u80fd\u6d45\u5c1d\u8f84\u6b62, \u5f88\u591a\u65f6\u5019\u66f4\u662f\u61d2\u7684\u770b. \u554a, \u6211\u5df2\u7ecf\u662f\u53ea\u5e9f\u53f6\u5b50\u4e86. \u53c2\u8003 [1] sklearn: \u652f\u6301\u5411\u91cf\u673a http://sklearn.apachecn.org/cn/0.19.0/modules/svm.html [2] \u9760\u9760\u9760\u8c31: \u652f\u6301\u5411\u91cf\u673a(SVM)\u662f\u4ec0\u4e48\u610f\u601d? https://www.zhihu.com/question/21094489/answer/117246987","title":"sklearn-SVM"},{"location":"content/daze/sklearn/svm/#svm","text":"SVM(\u652f\u6301\u5411\u91cf\u673a)\u53ef\u7528\u4e0e\u5206\u7c7b, \u56de\u5f52\u4e0e\u5f02\u5e38\u68c0\u6d4b. \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u636e\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\u800c\u8a00, \u4e00\u4e2a\u666e\u901a\u7684 SVM \u5c31\u662f\u4e00\u6761\u76f4\u7ebf\uff0c\u7528\u6765\u5b8c\u7f8e\u5212\u5206\u4e24\u7c7b. \u4f46\u662f, \u80fd\u540c\u65f6\u5212\u5206\u4e24\u7c7b\u6570\u636e\u7684\u76f4\u7ebf\u6709\u65e0\u6570\u591a\u6761, \u6211\u4eec\u9700\u8981\u7684\u662f\u6070\u597d\u5728\u4e24\u7c7b\u6570\u636e\u7684\u4e2d\u95f4, \u8ddd\u79bb\u4e24\u4e2a\u7c7b\u7684\u70b9\u4e00\u6837\u8fdc\u7684\u76f4\u7ebf. \u6211\u4eec\u79f0\u5b83\u4e3a \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762 . \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u636e\u800c\u8a00, \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u662f\u4e00\u6761\u76f4\u7ebf, \u4f46\u662f\u5bf9\u4e09\u7ef4\u6570\u636e\u800c\u8a00, \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u662f\u4e00\u4e2a\u9762(\u5373 N \u7ef4\u6570\u636e\u7684\u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u4e3a N-1 \u7ef4). \u4ec0\u4e48\u662f SVM \u5bfb\u627e\u4e00\u6761\u79bb\u82f9\u679c\u548c\u9999\u8549\u4e4b\u95f4\u8ddd\u79bb(margin)\u6700\u5927\u7684\u76f4\u7ebf. \u5176\u4e2d\u8ddd\u79bb, \u5373\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb; \u7ea6\u675f\u6761\u4ef6\u4e3a\u6240\u6709\u82f9\u679c\u548c\u9999\u8549\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb\u5927\u4e8e\u7b49\u4e8e margin. \u7528\u6570\u5b66\u8868\u8fbe\u5f0f\u8868\u793a: $$ y_i(w^Tx_i+b) \\ge 1, \\forall i $$ \u5982\u679c\u9999\u8549\u548c\u82f9\u679c\u4e0d\u80fd\u7528\u76f4\u7ebf\u5206\u5272\u5462? \u4f4e\u7ef4\u975e\u7ebf\u6027\u7684\u5206\u754c\u7ebf\u5176\u5b9e\u5728\u9ad8\u7ef4\u662f\u53ef\u4ee5\u7ebf\u6027\u5206\u5272. \u8bbe\u60f3\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5982\u679c\u6837\u672c\u5411\u91cf v \u8ddd\u79bb\u539f\u70b9(0, 0)\u7684\u8ddd\u79bb\u4e3a 1 \u4ee5\u5185\u5206\u7c7b\u88ab\u6807\u8bb0\u4e3a 0, \u5176\u4f59\u90fd\u662f1, \u540c\u6837\u662f\u5728\u4e8c\u7ef4\u7684\u60c5\u51b5\u4e0b\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u5f97, \u6b64\u65f6\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570: $$ f(x, y) = \\begin{cases} 1 & x^2+y^2 \\ge 1 \\\\ 0 & x^2+y^2<1 \\end{cases} $$ \u5373 $z=x^2+y^2$, \u6b64\u65f6\u4e8c\u7ef4\u7a7a\u95f4\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u70b9\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7ebf\u6027\u53ef\u5206. \u8fd9\u4e2a\u6784\u9020\u7684\u8fc7\u7a0b SVM \u6709\u901a\u7528\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3, \u5c31\u662f\u4f7f\u7528\u6838\u51fd\u6570\u8fdb\u884c\u6784\u9020. \u51e0\u4e2a\u5e38\u7528\u7684\u6838\u51fd\u6570\u5982\u7ebf\u6027\u6838\u51fd\u6570, \u591a\u9879\u5f0f\u6838\u51fd\u6570, \u5f84\u5411\u57fa\u6838\u51fd\u6570, \u9ad8\u65af\u6838\u51fd\u6570\u7b49. \u6838\u51fd\u6570\u7684\u76ee\u7684\u5f88\u660e\u786e: \u5c31\u662f\u5728\u5f53\u524d\u7ef4\u5ea6\u7a7a\u95f4\u4e2d\u7684\u6837\u672c\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u5c31\u4e00\u5f8b\u6620\u5c04\u5230\u9ad8\u7ef4\u4e2d\u53bb, \u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u627e\u5230\u8d85\u5e73\u9762, \u5f97\u5230\u8d85\u5e73\u9762\u65b9\u7a0b. \u800c\u5728\u66f4\u9ad8\u7ef4\u7684\u8d85\u5e73\u9762\u4e0a\u7684\u65b9\u7a0b\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u589e\u52a0\u66f4\u591a\u7684\u7ef4\u5ea6\u53d8\u91cf. \u4f8b\u5982, \u5728\u7814\u7a76\u4e8c\u7ef4\u7a7a\u95f4\u4e0a\u7684\u5411\u91cf\u5206\u7c7b\u95ee\u9898\u65f6, \u7ecf\u8fc7\u6838\u51fd\u6570\u6620\u5c04, \u6700\u540e\u5f97\u5230\u7684\u8d85\u5e73\u9762\u53d8\u6210\u4e86\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u66f2\u7ebf(\u4f46\u540c\u65f6\u4e5f\u662f\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u6b21\u65b9\u7a0b). \u5982\u679c\u9999\u8549\u548c\u82f9\u679c\u6709\u4ea4\u96c6\u5462? \u5373\u4f7f\u505a\u4e86\u5347\u7ef4, \u9999\u8549\u4e0e\u82f9\u679c\u4f9d\u7136\u4e0d\u80fd\u7ebf\u6027\u5206\u5272. \u6211\u4eec\u9700\u8981\u8c03\u6574\u6a21\u578b, \u4ee5\u4f7f\u5f97\u5728\u4fdd\u8bc1\u4e0d\u53ef\u5206\u7684\u60c5\u51b5\u4e0b, \u5c3d\u91cf\u627e\u5230\u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762. \u901a\u5e38\u72b6\u6001\u4e0b, \u4e00\u4e2a\u79bb\u7fa4\u70b9(\u53ef\u80fd\u662f\u566a\u58f0)\u53ef\u4ee5\u9020\u6210\u8d85\u5e73\u9762\u7684\u79fb\u52a8, \u95f4\u9694\u7f29\u5c0f, \u4ee5\u524d\u7684\u6a21\u578b\u5bf9\u566a\u58f0\u975e\u5e38\u654f\u611f. \u518d\u6709\u751a\u8005, \u5982\u679c\u79bb\u7fa4\u70b9\u5728\u53e6\u5916\u4e00\u4e2a\u7c7b\u4e2d, \u90a3\u4e48\u8fd9\u65f6\u5019\u5c31\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u4e86. \u8fd9\u65f6\u5019\u6211\u4eec\u5e94\u8be5\u5141\u8bb8\u4e00\u4e9b\u70b9\u6e38\u79bb\u5e76\u5728\u5728\u6a21\u578b\u4e2d\u8fdd\u80cc\u9650\u5236\u6761\u4ef6(\u51fd\u6570\u95f4\u9694\u5927\u4e8e 1). \u901a\u8fc7\u5f15\u5165 \u677e\u5f1b\u53d8\u91cf \u5141\u8bb8\u9519\u8bef\u7684\u5206\u7c7b. $$ y_i(w^Tx_i+b) \\ge 1-\\varepsilon_i, \\forall i $$ $\\varepsilon_i$ \u4e3a\u5141\u8bb8 $x_i$ \u504f\u79fb\u5206\u7c7b\u5e73\u9762\u7684\u8ddd\u79bb. \u5982\u679c\u8fd8\u6709\u68a8\u5462? \u53ef\u4ee5\u6bcf\u4e2a\u7c7b\u522b\u505a\u4e00\u6b21SVM: \u662f\u82f9\u679c\u8fd8\u662f\u4e0d\u662f\u82f9\u679c? \u662f\u9999\u8549\u8fd8\u662f\u4e0d\u662f\u9999\u8549? \u662f\u68a8\u5b50\u8fd8\u662f\u4e0d\u662f\u68a8\u5b50? \u4ece\u4e2d\u9009\u51fa\u53ef\u80fd\u6027\u6700\u5927\u7684. \u8fd9\u662f one-versus-the-rest approach . \u4e5f\u53ef\u4ee5\u4e24\u4e24\u505a\u4e00\u6b21SVM: \u662f\u82f9\u679c\u8fd8\u662f\u9999\u8549? \u662f\u9999\u8549\u8fd8\u662f\u68a8\u5b50? \u662f\u68a8\u5b50\u8fd8\u662f\u82f9\u679c? \u6700\u540e\u4e09\u4e2a\u5206\u7c7b\u5668\u6295\u7968\u51b3\u5b9a. \u8fd9\u662f one-versus-one approace .","title":"SVM"},{"location":"content/daze/sklearn/svm/#_1","text":"import matplotlib.pyplot as plt import sklearn.datasets import sklearn.svm import sklearn.metrics import sklearn.model_selection import numpy as np plt.style.use('seaborn') # \u751f\u6210 512 \u4e2a\u6570\u636e\u70b9, \u6240\u6709\u6570\u636e\u4ee5\u9ad8\u65af\u5206\u5e03\u5f62\u5f0f\u5206\u5e03\u5728\u4e24\u4e2a\u4e2d\u5fc3\u9644\u8fd1 x, y = sklearn.datasets.make_blobs(n_samples=512, centers=2, random_state=170) # \u5206\u522b\u6d4b\u8bd5\u6838\u51fd\u6570\u4e3a ['linear', 'poly', 'rbf', 'sigmoid'] for i, kernel in enumerate(['linear', 'poly', 'rbf', 'sigmoid']): plt.subplot(221 + i) clf = sklearn.svm.SVC(kernel=kernel) clf.fit(x, y) h = 0.02 x_min, x_max = x[:, 0].min() - 1, x[:, 0].max() + 1 y_min, y_max = x[:, 1].min() - 1, x[:, 1].max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) z = z.reshape(xx.shape) plt.pcolormesh(xx, yy, z, cmap='Paired', alpha=0.5) plt.scatter(x[:, 0], x[:, 1], c=y, cmap='Paired', edgecolors='k') plt.axis('off') plt.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/sklearn/svm/#_2","text":"\u6700\u8fd1\u6e10\u6e10\u611f\u5230\u529b\u4e0d\u4ece\u5fc3, \u8d8a\u6df1\u5165\u53d1\u73b0\u6d89\u53ca\u5230\u7684\u6570\u5b66\u63a8\u5bfc\u8d8a\u591a, \u5948\u4f55\u7cbe\u529b\u6709\u9650, \u5f80\u5f80\u53ea\u80fd\u6d45\u5c1d\u8f84\u6b62, \u5f88\u591a\u65f6\u5019\u66f4\u662f\u61d2\u7684\u770b. \u554a, \u6211\u5df2\u7ecf\u662f\u53ea\u5e9f\u53f6\u5b50\u4e86.","title":"\u540e\u8bb0"},{"location":"content/daze/sklearn/svm/#_3","text":"[1] sklearn: \u652f\u6301\u5411\u91cf\u673a http://sklearn.apachecn.org/cn/0.19.0/modules/svm.html [2] \u9760\u9760\u9760\u8c31: \u652f\u6301\u5411\u91cf\u673a(SVM)\u662f\u4ec0\u4e48\u610f\u601d? https://www.zhihu.com/question/21094489/answer/117246987","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/tree/","text":"\u6982\u89c8 \u51b3\u7b56\u6811(Decision Trees)\u662f\u4e00\u4e2a\u8d2a\u5fc3\u7b97\u6cd5, \u5b83\u5728\u7279\u5f81\u7a7a\u95f4\u4e0a\u6267\u884c\u9012\u5f52\u7684\u4e8c\u5143\u5206\u5272. \u51b3\u7b56\u6811\u7531\u8282\u70b9\u548c\u6709\u5411\u8fb9\u7ec4\u6210, \u5185\u90e8\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u7279\u5f81\u6216\u5c5e\u6027, \u53f6\u5b50\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u5206\u7c7b. \u51b3\u7b56\u6811\u672c\u8d28\u5c31\u662f\u4e00\u7cfb\u5217\u7684 if-then-else \u8bed\u53e5. \u6784\u5efa\u51b3\u7b56\u6811\u901a\u5e38\u5305\u542b\u4e09\u4e2a\u6b65\u9aa4: \u7279\u5f81\u9009\u62e9 \u51b3\u7b56\u6811\u751f\u6210 \u51b3\u7b56\u6811\u526a\u679d \u6784\u5efa\u51b3\u7b56\u6811\u65f6\u901a\u5e38\u5c06\u6b63\u5219\u5316\u7684\u6781\u5927\u4f3c\u7136\u51fd\u6570\u4f5c\u4e3a\u635f\u5931\u51fd\u6570, \u5176\u5b66\u4e60\u76ee\u6807\u662f\u635f\u5931\u51fd\u6570\u4e3a\u76ee\u6807\u51fd\u6570\u7684\u6700\u5c0f\u5316. \u6784\u5efa\u51b3\u7b56\u6811\u7684\u7b97\u6cd5\u901a\u5e38\u662f\u9012\u5f52\u5730\u9009\u62e9\u6700\u4f18\u7279\u5f81, \u5e76\u6839\u636e\u8be5\u7279\u5f81\u5bf9\u8bad\u7ec3\u6570\u636e\u96c6\u8fdb\u884c\u5206\u5272, \u5176\u6b65\u9aa4\u5982\u4e0b: \u6784\u5efa\u6839\u8282\u70b9\uff0c\u6240\u6709\u8bad\u7ec3\u6837\u672c\u90fd\u4f4d\u4e8e\u6839\u8282\u70b9. \u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7279\u5f81. \u901a\u8fc7\u8be5\u7279\u5f81\u5c06\u8bad\u7ec3\u6570\u636e\u5206\u5272\u6210\u5b50\u96c6, \u786e\u4fdd\u5404\u4e2a\u5b50\u96c6\u6709\u6700\u597d\u7684\u5206\u7c7b, \u4f46\u8981\u8003\u8651\u4e0b\u5217\u4e24\u79cd\u60c5\u51b5: \u82e5\u5b50\u96c6\u5df2\u80fd\u591f\u88ab\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u5219\u6784\u5efa\u53f6\u8282\u70b9, \u5e76\u5c06\u8be5\u5b50\u96c6\u5212\u5206\u5230\u5bf9\u5e94\u7684\u53f6\u8282\u70b9\u53bb \u82e5\u67d0\u4e2a\u5b50\u96c6\u4e0d\u80fd\u591f\u88ab\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u5219\u5bf9\u8be5\u5b50\u96c6\u7ee7\u7eed\u5212\u5206 \u9012\u5f52\u76f4\u81f3\u6240\u6709\u8bad\u7ec3\u6837\u672c\u90fd\u88ab\u8f83\u597d\u5730\u5206\u7c7b, \u6216\u8005\u6ca1\u6709\u5408\u9002\u7684\u7279\u5f81\u4e3a\u6b62. \u662f\u5426\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u53ef\u901a\u8fc7\u540e\u9762\u4ecb\u7ecd\u7684\u6307\u6807\u6765\u5224\u65ad. \u901a\u8fc7\u8be5\u6b65\u9aa4\u751f\u6210\u7684\u51b3\u7b56\u6811\u5bf9\u8bad\u7ec3\u6837\u672c\u6709\u5f88\u597d\u7684\u5206\u7c7b\u80fd\u529b, \u4f46\u662f\u6211\u4eec\u9700\u8981\u7684\u662f\u5bf9\u672a\u77e5\u6837\u672c\u7684\u5206\u7c7b\u80fd\u529b. \u56e0\u6b64\u901a\u5e38\u9700\u8981\u5bf9\u5df2\u751f\u6210\u7684\u51b3\u7b56\u6811\u8fdb\u884c\u526a\u679d, \u4ece\u800c\u4f7f\u5f97\u51b3\u7b56\u6811\u5177\u6709\u66f4\u597d\u7684\u6cdb\u5316\u80fd\u529b. \u526a\u679d\u8fc7\u7a0b\u662f\u53bb\u6389\u8fc7\u4e8e\u7ec6\u5206\u7684\u53f6\u8282\u70b9, \u4ece\u800c\u63d0\u9ad8\u6cdb\u5316\u80fd\u529b. \u7279\u5f81\u9009\u62e9\u4e3b\u8981\u57fa\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u6307\u6807: \u71b5, \u57fa\u5c3c\u7cfb\u6570\u548c\u65b9\u5dee. \u71b5 \u56de\u5fc6\u4e00\u4e0b\u4fe1\u606f\u8bba\u4e2d\u6709\u5173\u71b5(entropy)\u7684\u5b9a\u4e49. \u8bbe X \u662f\u4e00\u4e2a\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf, \u5176\u6982\u7387\u5206\u5e03\u4e3a $$ P(X=x_i) = p_i, i=1, 2, 3, .., n $$ \u5219\u968f\u673a\u53d8\u91cf\u7684\u71b5\u4e3a $$ H(X) = - \\sum_{i=1}^np_i \\log p_i $$ \u5176\u4e2d, log \u4ee5 2 \u4e3a\u5e95\u5e76\u5b9a\u4e49 $0 \\log 0 = 0$. \u4e3e\u4e2a\u6817\u5b50 \u4f8b: \u6709\u53d8\u91cf X, \u5b83\u53ef\u80fd\u7684\u53d6\u503c\u6709 0, 1, 2 \u4e09\u79cd, \u5176\u6982\u7387\u5206\u522b\u662f 0.25, 0.5 \u548c 0.25. \u90a3\u4e48 X \u7684\u71b5\u4e3a: $$ H(X) = -(\\frac{1}{4} \\log\\frac{1}{4} + \\frac{1}{2} \\log\\frac{1}{2} + 1/4 \\log\\frac{1}{4}) = 1.5 $$ \u5f53\u968f\u673a\u53d8\u91cf\u53ea\u6709\u4e24\u4e2a\u53d6\u503c\u65f6, \u5176\u6982\u7387\u4e0e\u71b5\u7684\u5173\u7cfb import math import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') def entropy(*c): return -sum([e * math.log2(e) if e != 0 else 0 for e in c]) p = np.linspace(0, 1, 50) h = np.empty_like(p) for i in range(50): h[i] = entropy(p[i], 1 - p[i]) plt.plot(p, h) plt.ylabel('H') plt.xlabel('P') plt.show() \u53ef\u4ee5\u770b\u5230, $P=0.5$ \u65f6, \u71b5\u6700\u5927, \u4e3a 1. \u5bf9\u4e8e\u6570\u636e\u96c6 D, \u6211\u4eec\u4f7f\u7528 $H(D)$ \u523b\u753b\u6570\u636e\u96c6 D \u7684\u71b5. \u7ed9\u5b9a\u7279\u5f81 A, \u5b9a\u4e49 \u4fe1\u606f\u589e\u76ca $g(D, A)=H(D) - H(D|A)$. \u4fe1\u606f\u589e\u76ca\u523b\u753b\u7684\u65f6\u7531\u4e8e\u7279\u5f81 A, \u4f7f\u5f97\u6570\u636e\u96c6 D \u7684\u4e0d\u786e\u5b9a\u6027\u51cf\u5c11\u7684\u7a0b\u5ea6. \u6784\u5efa\u51b3\u7b56\u6811\u65f6\u5e94\u9009\u62e9\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u7279\u5f81\u6765\u5212\u5206\u6570\u636e\u96c6. \u4f8b : \u6709\u5982\u4e0b\u6570\u636e\u96c6 D, \u6c42\u7279\u5f81 A \u7684\u4fe1\u606f\u589e\u76ca. A B Y 0 0 0 0 1 0 1 0 0 1 1 1 \u89e3 $$ \\begin{cases} H(D) = -(0.75 \\log 0.75 + 0.25 \\log 0.25) = 0.81 \\\\ H(D|A=0) = -(1 \\log 1 + 0 \\log 0) = 0 \\\\ H(D|A=1) = -(0.5 \\log 0.5 + 0.5 \\log 0.5) = 1.0 \\end{cases} $$ \u5219: $$ H(D|A) = P(A=0) * H(D|A=0) + P(A=1) * H(D|A=0) = 0.5 * 0 + 0.5 * 1.0 = 0.5 $$ \u56e0\u6b64\u7279\u5f81 A \u7684\u4fe1\u606f\u589e\u76ca\u4e3a $H(D) - H(D|A) = 0.81 - 0.5 = 0.31$ \u51b3\u7b56\u6811\u751f\u6210 \u57fa\u672c\u7684\u51b3\u7b56\u6811\u7684\u751f\u6210\u7b97\u6cd5\u4e2d, \u5178\u578b\u7684\u6709 ID3, C4.5 \u548c CART \u751f\u6210\u7b97\u6cd5, \u5b83\u4eec\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u5927\u81f4\u76f8\u4f3c. ID3 \u662f\u91c7\u7528\u7684\u4fe1\u606f\u589e\u76ca\u4f5c\u4e3a\u7279\u5f81\u9009\u62e9\u7684\u5ea6\u91cf, \u800c C4.5 \u5219\u91c7\u7528\u4fe1\u606f\u589e\u76ca\u6bd4, CART \u4e0e C4.5 \u975e\u5e38\u76f8\u4f3c, \u4f46\u5b83\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u652f\u6301\u6570\u503c\u76ee\u6807\u53d8\u91cf(\u56de\u5f52), \u5e76\u4e14\u4e0d\u8ba1\u7b97\u89c4\u5219\u96c6. ID3 \u751f\u6210\u7b97\u6cd5\u7684\u6b65\u9aa4\u5982\u4e0b: \u4f7f\u7528\u6240\u6709\u6ca1\u6709\u4f7f\u7528\u7684\u5c5e\u6027\u5e76\u8ba1\u7b97\u4e0e\u4e4b\u76f8\u5173\u7684\u4fe1\u606f\u589e\u76ca \u9009\u53d6\u5176\u4e2d\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u5c5e\u6027 \u751f\u6210\u5305\u542b\u8be5\u5c5e\u6027\u7684\u8282\u70b9 \u5b9e\u6218 sklearn \u4e2d\u6709\u4e24\u7c7b\u51b3\u7b56\u6811, \u5b83\u4eec\u5747\u91c7\u7528\u4f18\u5316\u7684 CART \u51b3\u7b56\u6811\u751f\u6210\u7b97\u6cd5. CART(\u5206\u7c7b\u56de\u5f52\u6811)\u662f\u4e00\u68f5\u4e8c\u53c9\u6811, \u4e14\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b69\u5b50, \u6240\u4ee5\u5bf9\u4e8e\u7b2c\u4e00\u68f5\u5b50\u6811\u5176\u53f6\u5b50\u8282\u70b9\u6570\u6bd4\u975e\u53f6\u5b50\u8282\u70b9\u6570\u591a1. \u6211\u9760, \u6211\u5df2\u7ecf\u5199\u4e0d\u52a8\u4e86. sklearn \u4e2d\u6709\u4e24\u7c7b\u51b3\u7b56\u6570, \u5206\u522b\u662f DecisionTreeClassifier \u548c DecisionTreeRegressor , \u5206\u522b\u7528\u4e0e\u89e3\u51b3\u5206\u7c7b\u548c\u56de\u5f52\u95ee\u9898. \u9996\u5148\u770b\u4e00\u4e0b\u5e94\u7528 DecisionTreeClassifier \u89e3\u51b3 iris \u6570\u636e\u96c6 \u5206\u7c7b : import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.tree iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.25, random_state=0, stratify=iris.target) clf = sklearn.tree.DecisionTreeClassifier() clf.fit(x_train, y_train) y_pred = clf.predict(x_test) # \u9884\u6d4b\u6837\u672c\u5206\u7c7b, \u4e5f\u53ef\u4ee5\u4f7f\u7528 predict_proba \u9884\u6d4b\u6bcf\u4e2a\u7c7b\u7684\u6982\u7387 acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 13 1 0.93 1.00 0.96 13 2 1.00 0.92 0.96 12 avg / total 0.98 0.97 0.97 38 DecisionTreeClassifier \u5305\u542b\u4e00\u7cfb\u5217\u53ef\u914d\u7f6e\u7684\u53c2\u6570, \u8be6\u7ec6\u53c2\u89c1: http://sklearn.apachecn.org/cn/0.19.0/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier \u4f7f\u7528 DecisionTreeRegressor \u89e3\u51b3 \u56de\u5f52 \u95ee\u9898. \u4e0b\u4f8b\u56de\u5f52\u4e00\u4e2a\u5e26\u6709\u968f\u673a\u566a\u58f0\u7684\u6b63\u5f26\u6ce2: import matplotlib.pyplot as plt import numpy as np import sklearn.tree rng = np.random.RandomState(1) x = np.sort(5 * rng.rand(80, 1), axis=0) y = np.sin(x).ravel() y[::5] += 3 * (0.5 - rng.rand(16)) # \u4f7f\u7528 min_samples_leaf=5 \u63a7\u5236\u53f6\u8282\u70b9\u7684\u6837\u672c\u6570\u91cf, \u9632\u6b62\u8fc7\u62df\u5408. # \u8fd9\u4e2a\u503c\u5f88\u5c0f\u65f6\u610f\u5473\u7740\u751f\u6210\u7684\u51b3\u7b56\u6811\u5c06\u4f1a\u8fc7\u62df\u5408\uff0c\u7136\u800c\u5f53\u8fd9\u4e2a\u503c\u5f88\u5927 # \u65f6\u5c06\u4f1a\u4e0d\u5229\u4e8e\u51b3\u7b56\u6811\u7684\u5bf9\u6837\u672c\u7684\u5b66\u4e60. \u6240\u4ee5\u5c1d\u8bd5 min_samples_leaf=5 \u4f5c\u4e3a\u521d\u59cb\u503c. regr = sklearn.tree.DecisionTreeRegressor(max_depth=5, min_samples_leaf=5) regr.fit(x, y) x_test = np.arange(0.0, 5.0, 0.01)[:, np.newaxis] y_test = np.sin(x_test).ravel() y_pred = regr.predict(x_test) print('Training score:', regr.score(x, y)) print('Testing score:', regr.score(x_test, y_test)) plt.figure() plt.scatter(x, y, s=20, edgecolor='black', c='darkorange', label='data') plt.plot(x_test, y_pred, color='cornflowerblue', label='max_depth=5', linewidth=2) plt.xlabel('data') plt.ylabel('target') plt.title('Decision Tree Regression') plt.legend() plt.show() Training score: 0.8062057896011524 Testing score: 0.9328689437179793 \u53ef\u89c6\u5316 \u7ecf\u8fc7\u8bad\u7ec3, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 export_graphviz \u5bfc\u51fa\u5668\u4ee5 Graphviz \u683c\u5f0f\u5bfc\u51fa\u51b3\u7b56\u6811. \u4ee5 iris \u6570\u636e\u96c6\u5206\u7c7b\u4e3a\u4f8b: sklearn.tree.export_graphviz(clf, '/tmp/clf.graphviz') \u7136\u540e\u4f7f\u7528 dot -Tpng clf.phz -o /tmp/clf.png \u83b7\u5f97 png \u683c\u5f0f\u7684\u53ef\u89c6\u5316\u56fe\u7247(\u9700\u8981\u5b89\u88c5 graphviz \u8f6f\u4ef6). \u53c2\u8003 [1] sklearn: \u51b3\u7b56\u6811 http://sklearn.apachecn.org/cn/0.19.0/modules/tree.html [2] \u534e\u6821\u4e13/\u738b\u6b63\u6797: Python\u5927\u6218\u673a\u5668\u5b66\u4e60.\u7b2c\u4e8c\u7ae0.\u51b3\u7b56\u6811 [3] wiki: ID3 algorithm https://en.wikipedia.org/wiki/ID3_algorithm","title":"sklearn-\u51b3\u7b56\u6811"},{"location":"content/daze/sklearn/tree/#_1","text":"\u51b3\u7b56\u6811(Decision Trees)\u662f\u4e00\u4e2a\u8d2a\u5fc3\u7b97\u6cd5, \u5b83\u5728\u7279\u5f81\u7a7a\u95f4\u4e0a\u6267\u884c\u9012\u5f52\u7684\u4e8c\u5143\u5206\u5272. \u51b3\u7b56\u6811\u7531\u8282\u70b9\u548c\u6709\u5411\u8fb9\u7ec4\u6210, \u5185\u90e8\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u7279\u5f81\u6216\u5c5e\u6027, \u53f6\u5b50\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u5206\u7c7b. \u51b3\u7b56\u6811\u672c\u8d28\u5c31\u662f\u4e00\u7cfb\u5217\u7684 if-then-else \u8bed\u53e5. \u6784\u5efa\u51b3\u7b56\u6811\u901a\u5e38\u5305\u542b\u4e09\u4e2a\u6b65\u9aa4: \u7279\u5f81\u9009\u62e9 \u51b3\u7b56\u6811\u751f\u6210 \u51b3\u7b56\u6811\u526a\u679d \u6784\u5efa\u51b3\u7b56\u6811\u65f6\u901a\u5e38\u5c06\u6b63\u5219\u5316\u7684\u6781\u5927\u4f3c\u7136\u51fd\u6570\u4f5c\u4e3a\u635f\u5931\u51fd\u6570, \u5176\u5b66\u4e60\u76ee\u6807\u662f\u635f\u5931\u51fd\u6570\u4e3a\u76ee\u6807\u51fd\u6570\u7684\u6700\u5c0f\u5316. \u6784\u5efa\u51b3\u7b56\u6811\u7684\u7b97\u6cd5\u901a\u5e38\u662f\u9012\u5f52\u5730\u9009\u62e9\u6700\u4f18\u7279\u5f81, \u5e76\u6839\u636e\u8be5\u7279\u5f81\u5bf9\u8bad\u7ec3\u6570\u636e\u96c6\u8fdb\u884c\u5206\u5272, \u5176\u6b65\u9aa4\u5982\u4e0b: \u6784\u5efa\u6839\u8282\u70b9\uff0c\u6240\u6709\u8bad\u7ec3\u6837\u672c\u90fd\u4f4d\u4e8e\u6839\u8282\u70b9. \u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7279\u5f81. \u901a\u8fc7\u8be5\u7279\u5f81\u5c06\u8bad\u7ec3\u6570\u636e\u5206\u5272\u6210\u5b50\u96c6, \u786e\u4fdd\u5404\u4e2a\u5b50\u96c6\u6709\u6700\u597d\u7684\u5206\u7c7b, \u4f46\u8981\u8003\u8651\u4e0b\u5217\u4e24\u79cd\u60c5\u51b5: \u82e5\u5b50\u96c6\u5df2\u80fd\u591f\u88ab\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u5219\u6784\u5efa\u53f6\u8282\u70b9, \u5e76\u5c06\u8be5\u5b50\u96c6\u5212\u5206\u5230\u5bf9\u5e94\u7684\u53f6\u8282\u70b9\u53bb \u82e5\u67d0\u4e2a\u5b50\u96c6\u4e0d\u80fd\u591f\u88ab\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u5219\u5bf9\u8be5\u5b50\u96c6\u7ee7\u7eed\u5212\u5206 \u9012\u5f52\u76f4\u81f3\u6240\u6709\u8bad\u7ec3\u6837\u672c\u90fd\u88ab\u8f83\u597d\u5730\u5206\u7c7b, \u6216\u8005\u6ca1\u6709\u5408\u9002\u7684\u7279\u5f81\u4e3a\u6b62. \u662f\u5426\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u53ef\u901a\u8fc7\u540e\u9762\u4ecb\u7ecd\u7684\u6307\u6807\u6765\u5224\u65ad. \u901a\u8fc7\u8be5\u6b65\u9aa4\u751f\u6210\u7684\u51b3\u7b56\u6811\u5bf9\u8bad\u7ec3\u6837\u672c\u6709\u5f88\u597d\u7684\u5206\u7c7b\u80fd\u529b, \u4f46\u662f\u6211\u4eec\u9700\u8981\u7684\u662f\u5bf9\u672a\u77e5\u6837\u672c\u7684\u5206\u7c7b\u80fd\u529b. \u56e0\u6b64\u901a\u5e38\u9700\u8981\u5bf9\u5df2\u751f\u6210\u7684\u51b3\u7b56\u6811\u8fdb\u884c\u526a\u679d, \u4ece\u800c\u4f7f\u5f97\u51b3\u7b56\u6811\u5177\u6709\u66f4\u597d\u7684\u6cdb\u5316\u80fd\u529b. \u526a\u679d\u8fc7\u7a0b\u662f\u53bb\u6389\u8fc7\u4e8e\u7ec6\u5206\u7684\u53f6\u8282\u70b9, \u4ece\u800c\u63d0\u9ad8\u6cdb\u5316\u80fd\u529b. \u7279\u5f81\u9009\u62e9\u4e3b\u8981\u57fa\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u6307\u6807: \u71b5, \u57fa\u5c3c\u7cfb\u6570\u548c\u65b9\u5dee.","title":"\u6982\u89c8"},{"location":"content/daze/sklearn/tree/#_2","text":"\u56de\u5fc6\u4e00\u4e0b\u4fe1\u606f\u8bba\u4e2d\u6709\u5173\u71b5(entropy)\u7684\u5b9a\u4e49. \u8bbe X \u662f\u4e00\u4e2a\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf, \u5176\u6982\u7387\u5206\u5e03\u4e3a $$ P(X=x_i) = p_i, i=1, 2, 3, .., n $$ \u5219\u968f\u673a\u53d8\u91cf\u7684\u71b5\u4e3a $$ H(X) = - \\sum_{i=1}^np_i \\log p_i $$ \u5176\u4e2d, log \u4ee5 2 \u4e3a\u5e95\u5e76\u5b9a\u4e49 $0 \\log 0 = 0$. \u4e3e\u4e2a\u6817\u5b50 \u4f8b: \u6709\u53d8\u91cf X, \u5b83\u53ef\u80fd\u7684\u53d6\u503c\u6709 0, 1, 2 \u4e09\u79cd, \u5176\u6982\u7387\u5206\u522b\u662f 0.25, 0.5 \u548c 0.25. \u90a3\u4e48 X \u7684\u71b5\u4e3a: $$ H(X) = -(\\frac{1}{4} \\log\\frac{1}{4} + \\frac{1}{2} \\log\\frac{1}{2} + 1/4 \\log\\frac{1}{4}) = 1.5 $$ \u5f53\u968f\u673a\u53d8\u91cf\u53ea\u6709\u4e24\u4e2a\u53d6\u503c\u65f6, \u5176\u6982\u7387\u4e0e\u71b5\u7684\u5173\u7cfb import math import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') def entropy(*c): return -sum([e * math.log2(e) if e != 0 else 0 for e in c]) p = np.linspace(0, 1, 50) h = np.empty_like(p) for i in range(50): h[i] = entropy(p[i], 1 - p[i]) plt.plot(p, h) plt.ylabel('H') plt.xlabel('P') plt.show() \u53ef\u4ee5\u770b\u5230, $P=0.5$ \u65f6, \u71b5\u6700\u5927, \u4e3a 1. \u5bf9\u4e8e\u6570\u636e\u96c6 D, \u6211\u4eec\u4f7f\u7528 $H(D)$ \u523b\u753b\u6570\u636e\u96c6 D \u7684\u71b5. \u7ed9\u5b9a\u7279\u5f81 A, \u5b9a\u4e49 \u4fe1\u606f\u589e\u76ca $g(D, A)=H(D) - H(D|A)$. \u4fe1\u606f\u589e\u76ca\u523b\u753b\u7684\u65f6\u7531\u4e8e\u7279\u5f81 A, \u4f7f\u5f97\u6570\u636e\u96c6 D \u7684\u4e0d\u786e\u5b9a\u6027\u51cf\u5c11\u7684\u7a0b\u5ea6. \u6784\u5efa\u51b3\u7b56\u6811\u65f6\u5e94\u9009\u62e9\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u7279\u5f81\u6765\u5212\u5206\u6570\u636e\u96c6. \u4f8b : \u6709\u5982\u4e0b\u6570\u636e\u96c6 D, \u6c42\u7279\u5f81 A \u7684\u4fe1\u606f\u589e\u76ca. A B Y 0 0 0 0 1 0 1 0 0 1 1 1 \u89e3 $$ \\begin{cases} H(D) = -(0.75 \\log 0.75 + 0.25 \\log 0.25) = 0.81 \\\\ H(D|A=0) = -(1 \\log 1 + 0 \\log 0) = 0 \\\\ H(D|A=1) = -(0.5 \\log 0.5 + 0.5 \\log 0.5) = 1.0 \\end{cases} $$ \u5219: $$ H(D|A) = P(A=0) * H(D|A=0) + P(A=1) * H(D|A=0) = 0.5 * 0 + 0.5 * 1.0 = 0.5 $$ \u56e0\u6b64\u7279\u5f81 A \u7684\u4fe1\u606f\u589e\u76ca\u4e3a $H(D) - H(D|A) = 0.81 - 0.5 = 0.31$","title":"\u71b5"},{"location":"content/daze/sklearn/tree/#_3","text":"\u57fa\u672c\u7684\u51b3\u7b56\u6811\u7684\u751f\u6210\u7b97\u6cd5\u4e2d, \u5178\u578b\u7684\u6709 ID3, C4.5 \u548c CART \u751f\u6210\u7b97\u6cd5, \u5b83\u4eec\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u5927\u81f4\u76f8\u4f3c. ID3 \u662f\u91c7\u7528\u7684\u4fe1\u606f\u589e\u76ca\u4f5c\u4e3a\u7279\u5f81\u9009\u62e9\u7684\u5ea6\u91cf, \u800c C4.5 \u5219\u91c7\u7528\u4fe1\u606f\u589e\u76ca\u6bd4, CART \u4e0e C4.5 \u975e\u5e38\u76f8\u4f3c, \u4f46\u5b83\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u652f\u6301\u6570\u503c\u76ee\u6807\u53d8\u91cf(\u56de\u5f52), \u5e76\u4e14\u4e0d\u8ba1\u7b97\u89c4\u5219\u96c6. ID3 \u751f\u6210\u7b97\u6cd5\u7684\u6b65\u9aa4\u5982\u4e0b: \u4f7f\u7528\u6240\u6709\u6ca1\u6709\u4f7f\u7528\u7684\u5c5e\u6027\u5e76\u8ba1\u7b97\u4e0e\u4e4b\u76f8\u5173\u7684\u4fe1\u606f\u589e\u76ca \u9009\u53d6\u5176\u4e2d\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u5c5e\u6027 \u751f\u6210\u5305\u542b\u8be5\u5c5e\u6027\u7684\u8282\u70b9","title":"\u51b3\u7b56\u6811\u751f\u6210"},{"location":"content/daze/sklearn/tree/#_4","text":"sklearn \u4e2d\u6709\u4e24\u7c7b\u51b3\u7b56\u6811, \u5b83\u4eec\u5747\u91c7\u7528\u4f18\u5316\u7684 CART \u51b3\u7b56\u6811\u751f\u6210\u7b97\u6cd5. CART(\u5206\u7c7b\u56de\u5f52\u6811)\u662f\u4e00\u68f5\u4e8c\u53c9\u6811, \u4e14\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b69\u5b50, \u6240\u4ee5\u5bf9\u4e8e\u7b2c\u4e00\u68f5\u5b50\u6811\u5176\u53f6\u5b50\u8282\u70b9\u6570\u6bd4\u975e\u53f6\u5b50\u8282\u70b9\u6570\u591a1. \u6211\u9760, \u6211\u5df2\u7ecf\u5199\u4e0d\u52a8\u4e86. sklearn \u4e2d\u6709\u4e24\u7c7b\u51b3\u7b56\u6570, \u5206\u522b\u662f DecisionTreeClassifier \u548c DecisionTreeRegressor , \u5206\u522b\u7528\u4e0e\u89e3\u51b3\u5206\u7c7b\u548c\u56de\u5f52\u95ee\u9898. \u9996\u5148\u770b\u4e00\u4e0b\u5e94\u7528 DecisionTreeClassifier \u89e3\u51b3 iris \u6570\u636e\u96c6 \u5206\u7c7b : import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.tree iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.25, random_state=0, stratify=iris.target) clf = sklearn.tree.DecisionTreeClassifier() clf.fit(x_train, y_train) y_pred = clf.predict(x_test) # \u9884\u6d4b\u6837\u672c\u5206\u7c7b, \u4e5f\u53ef\u4ee5\u4f7f\u7528 predict_proba \u9884\u6d4b\u6bcf\u4e2a\u7c7b\u7684\u6982\u7387 acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 13 1 0.93 1.00 0.96 13 2 1.00 0.92 0.96 12 avg / total 0.98 0.97 0.97 38 DecisionTreeClassifier \u5305\u542b\u4e00\u7cfb\u5217\u53ef\u914d\u7f6e\u7684\u53c2\u6570, \u8be6\u7ec6\u53c2\u89c1: http://sklearn.apachecn.org/cn/0.19.0/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier \u4f7f\u7528 DecisionTreeRegressor \u89e3\u51b3 \u56de\u5f52 \u95ee\u9898. \u4e0b\u4f8b\u56de\u5f52\u4e00\u4e2a\u5e26\u6709\u968f\u673a\u566a\u58f0\u7684\u6b63\u5f26\u6ce2: import matplotlib.pyplot as plt import numpy as np import sklearn.tree rng = np.random.RandomState(1) x = np.sort(5 * rng.rand(80, 1), axis=0) y = np.sin(x).ravel() y[::5] += 3 * (0.5 - rng.rand(16)) # \u4f7f\u7528 min_samples_leaf=5 \u63a7\u5236\u53f6\u8282\u70b9\u7684\u6837\u672c\u6570\u91cf, \u9632\u6b62\u8fc7\u62df\u5408. # \u8fd9\u4e2a\u503c\u5f88\u5c0f\u65f6\u610f\u5473\u7740\u751f\u6210\u7684\u51b3\u7b56\u6811\u5c06\u4f1a\u8fc7\u62df\u5408\uff0c\u7136\u800c\u5f53\u8fd9\u4e2a\u503c\u5f88\u5927 # \u65f6\u5c06\u4f1a\u4e0d\u5229\u4e8e\u51b3\u7b56\u6811\u7684\u5bf9\u6837\u672c\u7684\u5b66\u4e60. \u6240\u4ee5\u5c1d\u8bd5 min_samples_leaf=5 \u4f5c\u4e3a\u521d\u59cb\u503c. regr = sklearn.tree.DecisionTreeRegressor(max_depth=5, min_samples_leaf=5) regr.fit(x, y) x_test = np.arange(0.0, 5.0, 0.01)[:, np.newaxis] y_test = np.sin(x_test).ravel() y_pred = regr.predict(x_test) print('Training score:', regr.score(x, y)) print('Testing score:', regr.score(x_test, y_test)) plt.figure() plt.scatter(x, y, s=20, edgecolor='black', c='darkorange', label='data') plt.plot(x_test, y_pred, color='cornflowerblue', label='max_depth=5', linewidth=2) plt.xlabel('data') plt.ylabel('target') plt.title('Decision Tree Regression') plt.legend() plt.show() Training score: 0.8062057896011524 Testing score: 0.9328689437179793","title":"\u5b9e\u6218"},{"location":"content/daze/sklearn/tree/#_5","text":"\u7ecf\u8fc7\u8bad\u7ec3, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 export_graphviz \u5bfc\u51fa\u5668\u4ee5 Graphviz \u683c\u5f0f\u5bfc\u51fa\u51b3\u7b56\u6811. \u4ee5 iris \u6570\u636e\u96c6\u5206\u7c7b\u4e3a\u4f8b: sklearn.tree.export_graphviz(clf, '/tmp/clf.graphviz') \u7136\u540e\u4f7f\u7528 dot -Tpng clf.phz -o /tmp/clf.png \u83b7\u5f97 png \u683c\u5f0f\u7684\u53ef\u89c6\u5316\u56fe\u7247(\u9700\u8981\u5b89\u88c5 graphviz \u8f6f\u4ef6).","title":"\u53ef\u89c6\u5316"},{"location":"content/daze/sklearn/tree/#_6","text":"[1] sklearn: \u51b3\u7b56\u6811 http://sklearn.apachecn.org/cn/0.19.0/modules/tree.html [2] \u534e\u6821\u4e13/\u738b\u6b63\u6797: Python\u5927\u6218\u673a\u5668\u5b66\u4e60.\u7b2c\u4e8c\u7ae0.\u51b3\u7b56\u6811 [3] wiki: ID3 algorithm https://en.wikipedia.org/wiki/ID3_algorithm","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/liner_model/linear_regression/","text":"\u6982\u89c8 \u6700\u5c0f\u4e8c\u4e58\u6cd5(\u53c8\u79f0\u6700\u5c0f\u5e73\u65b9\u6cd5)\u662f\u4e00\u79cd\u6570\u5b66\u4f18\u5316\u6280\u672f. \u5b83\u901a\u8fc7\u6700\u5c0f\u5316 \u6b8b\u5dee\u5e73\u65b9\u548c \u5bfb\u627e\u6570\u636e\u7684\u6700\u4f73\u51fd\u6570\u5339\u914d. \u5229\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u53ef\u4ee5\u7b80\u4fbf\u5730\u6c42\u5f97\u672a\u77e5\u7684\u6570\u636e, \u5e76\u4f7f\u5f97\u8fd9\u4e9b\u6c42\u5f97\u7684\u6570\u636e\u4e0e\u5b9e\u9645\u6570\u636e\u4e4b\u95f4\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u4e3a\u6700\u5c0f. \u6ce8: \u771f\u5b9e\u503c\u4e0e\u9884\u6d4b\u503c\u4e4b\u95f4\u7684\u8bef\u5dee\u79f0\u4e3a\u6b8b\u5dee, \u8bef\u5dee\u7684\u5e73\u65b9\u548c\u79f0\u4e3a\u6b8b\u5dee\u5e73\u65b9\u548c \u793a\u4f8b \u4f7f\u7528 sklearn.linear_model.LinearRegression \u62df\u5408\u4e00\u7cfb\u5217\u4e00\u7ef4\u6570\u636e. import matplotlib.pyplot as plt import numpy as np import sklearn.datasets import sklearn.linear_model import sklearn.metrics diabetes = sklearn.datasets.load_diabetes() diabetes_X = diabetes.data[:, np.newaxis, 2] print('X.shape:', diabetes_X.shape) print('Y.shape:', diabetes.target.shape) diabetes_X_train = diabetes_X[:-20] diabetes_X_test = diabetes_X[-20:] diabetes_y_train = diabetes.target[:-20] diabetes_y_test = diabetes.target[-20:] regr = sklearn.linear_model.LinearRegression() regr.fit(diabetes_X_train, diabetes_y_train) print(f'w={regr.coef_}, b={regr.intercept_}') diabetes_y_pred = regr.predict(diabetes_X_test) print('Coefficients:', regr.coef_) print('Mean squared error: %.2f' % sklearn.metrics.mean_squared_error(diabetes_y_test, diabetes_y_pred)) print('Variance score: %.2f' % sklearn.metrics.r2_score(diabetes_y_test, diabetes_y_pred)) plt.style.use('seaborn') _, axes = plt.subplots(2) axes[0].scatter(diabetes_X_train, diabetes_y_train, color='red', alpha=0.5) axes[0].plot(diabetes_X_train, regr.predict(diabetes_X_train), color='blue', alpha=0.5, linewidth=3) axes[1].scatter(diabetes_X_test, diabetes_y_test, color='red', alpha=0.5) axes[1].plot(diabetes_X_test, diabetes_y_pred, color='blue', alpha=0.5, linewidth=3) plt.show() X.shape: (442, 1) Y.shape: (442,) w=[938.23786125], b=152.91886182616167 Coefficients: [938.23786125] Mean squared error: 2548.07 Variance score: 0.47 \u6ce8\u610f: \u6700\u5c0f\u4e8c\u4e58\u6cd5\u5bf9 $w$ \u7684\u4f30\u8ba1, \u662f\u57fa\u4e8e\u6a21\u578b\u4e2d\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u7684\u57fa\u672c\u5047\u8bbe\u7684, \u5373\u8f93\u5165\u5411\u91cf $x$ \u4e2d\u7684\u4efb\u610f\u4e24\u9879 $x_i$ \u548c $x_j$ \u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684. \u5982\u679c\u8f93\u5165\u77e9\u9635 $X$ \u4e2d\u5b58\u5728\u7ebf\u6027\u76f8\u5173\u6216\u8005\u8fd1\u4f3c\u7ebf\u6027\u76f8\u5173\u7684\u5217, \u90a3\u4e48\u8f93\u5165\u77e9\u9635 $X$ \u5c31\u4f1a\u53d8\u6210\u6216\u8005\u8fd1\u4f3c\u53d8\u6210\u5947\u5f02\u77e9\u9635(singular matrix). \u8fd9\u662f\u4e00\u79cd\u75c5\u6001\u77e9\u9635, \u77e9\u9635\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u53d1\u751f\u4e00\u70b9\u53d8\u52a8, \u6574\u4e2a\u77e9\u9635\u7684\u884c\u5217\u5f0f\u7684\u503c\u548c\u9006\u77e9\u9635\u90fd\u4f1a\u53d1\u751f\u5de8\u5927\u53d8\u5316. \u8fd9\u5c06\u5bfc\u81f4\u6700\u5c0f\u4e8c\u4e58\u6cd5\u5bf9\u89c2\u6d4b\u6570\u636e\u7684\u968f\u673a\u8bef\u5dee\u6781\u4e3a\u654f\u611f, \u8fdb\u800c\u4f7f\u5f97\u6700\u540e\u7684\u7ebf\u6027\u6a21\u578b\u4ea7\u751f\u975e\u5e38\u5927\u7684\u65b9\u5dee, \u8fd9\u4e2a\u5728\u6570\u5b66\u4e0a\u79f0\u4e3a \u591a\u91cd\u5171\u7ebf\u6027 (multicollinearity). \u53c2\u8003 [1] \u7ef4\u57fa: \u6700\u5c0f\u4e8c\u4e58\u6cd5 https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95 [2] \u4e8e\u6dfc: \u6700\u5c0f\u4e8c\u4e58\u6cd5?\u4e3a\u795e\u9a6c\u4e0d\u662f\u5dee\u7684\u7edd\u5bf9\u503c http://blog.sciencenet.cn/blog-430956-621997.html","title":"sklearn-\u7ebf\u6027\u6a21\u578b-\u666e\u901a\u6700\u5c0f\u4e8c\u4e58\u6cd5"},{"location":"content/daze/sklearn/liner_model/linear_regression/#_1","text":"\u6700\u5c0f\u4e8c\u4e58\u6cd5(\u53c8\u79f0\u6700\u5c0f\u5e73\u65b9\u6cd5)\u662f\u4e00\u79cd\u6570\u5b66\u4f18\u5316\u6280\u672f. \u5b83\u901a\u8fc7\u6700\u5c0f\u5316 \u6b8b\u5dee\u5e73\u65b9\u548c \u5bfb\u627e\u6570\u636e\u7684\u6700\u4f73\u51fd\u6570\u5339\u914d. \u5229\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u53ef\u4ee5\u7b80\u4fbf\u5730\u6c42\u5f97\u672a\u77e5\u7684\u6570\u636e, \u5e76\u4f7f\u5f97\u8fd9\u4e9b\u6c42\u5f97\u7684\u6570\u636e\u4e0e\u5b9e\u9645\u6570\u636e\u4e4b\u95f4\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u4e3a\u6700\u5c0f. \u6ce8: \u771f\u5b9e\u503c\u4e0e\u9884\u6d4b\u503c\u4e4b\u95f4\u7684\u8bef\u5dee\u79f0\u4e3a\u6b8b\u5dee, \u8bef\u5dee\u7684\u5e73\u65b9\u548c\u79f0\u4e3a\u6b8b\u5dee\u5e73\u65b9\u548c","title":"\u6982\u89c8"},{"location":"content/daze/sklearn/liner_model/linear_regression/#_2","text":"\u4f7f\u7528 sklearn.linear_model.LinearRegression \u62df\u5408\u4e00\u7cfb\u5217\u4e00\u7ef4\u6570\u636e. import matplotlib.pyplot as plt import numpy as np import sklearn.datasets import sklearn.linear_model import sklearn.metrics diabetes = sklearn.datasets.load_diabetes() diabetes_X = diabetes.data[:, np.newaxis, 2] print('X.shape:', diabetes_X.shape) print('Y.shape:', diabetes.target.shape) diabetes_X_train = diabetes_X[:-20] diabetes_X_test = diabetes_X[-20:] diabetes_y_train = diabetes.target[:-20] diabetes_y_test = diabetes.target[-20:] regr = sklearn.linear_model.LinearRegression() regr.fit(diabetes_X_train, diabetes_y_train) print(f'w={regr.coef_}, b={regr.intercept_}') diabetes_y_pred = regr.predict(diabetes_X_test) print('Coefficients:', regr.coef_) print('Mean squared error: %.2f' % sklearn.metrics.mean_squared_error(diabetes_y_test, diabetes_y_pred)) print('Variance score: %.2f' % sklearn.metrics.r2_score(diabetes_y_test, diabetes_y_pred)) plt.style.use('seaborn') _, axes = plt.subplots(2) axes[0].scatter(diabetes_X_train, diabetes_y_train, color='red', alpha=0.5) axes[0].plot(diabetes_X_train, regr.predict(diabetes_X_train), color='blue', alpha=0.5, linewidth=3) axes[1].scatter(diabetes_X_test, diabetes_y_test, color='red', alpha=0.5) axes[1].plot(diabetes_X_test, diabetes_y_pred, color='blue', alpha=0.5, linewidth=3) plt.show() X.shape: (442, 1) Y.shape: (442,) w=[938.23786125], b=152.91886182616167 Coefficients: [938.23786125] Mean squared error: 2548.07 Variance score: 0.47 \u6ce8\u610f: \u6700\u5c0f\u4e8c\u4e58\u6cd5\u5bf9 $w$ \u7684\u4f30\u8ba1, \u662f\u57fa\u4e8e\u6a21\u578b\u4e2d\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u7684\u57fa\u672c\u5047\u8bbe\u7684, \u5373\u8f93\u5165\u5411\u91cf $x$ \u4e2d\u7684\u4efb\u610f\u4e24\u9879 $x_i$ \u548c $x_j$ \u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684. \u5982\u679c\u8f93\u5165\u77e9\u9635 $X$ \u4e2d\u5b58\u5728\u7ebf\u6027\u76f8\u5173\u6216\u8005\u8fd1\u4f3c\u7ebf\u6027\u76f8\u5173\u7684\u5217, \u90a3\u4e48\u8f93\u5165\u77e9\u9635 $X$ \u5c31\u4f1a\u53d8\u6210\u6216\u8005\u8fd1\u4f3c\u53d8\u6210\u5947\u5f02\u77e9\u9635(singular matrix). \u8fd9\u662f\u4e00\u79cd\u75c5\u6001\u77e9\u9635, \u77e9\u9635\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u53d1\u751f\u4e00\u70b9\u53d8\u52a8, \u6574\u4e2a\u77e9\u9635\u7684\u884c\u5217\u5f0f\u7684\u503c\u548c\u9006\u77e9\u9635\u90fd\u4f1a\u53d1\u751f\u5de8\u5927\u53d8\u5316. \u8fd9\u5c06\u5bfc\u81f4\u6700\u5c0f\u4e8c\u4e58\u6cd5\u5bf9\u89c2\u6d4b\u6570\u636e\u7684\u968f\u673a\u8bef\u5dee\u6781\u4e3a\u654f\u611f, \u8fdb\u800c\u4f7f\u5f97\u6700\u540e\u7684\u7ebf\u6027\u6a21\u578b\u4ea7\u751f\u975e\u5e38\u5927\u7684\u65b9\u5dee, \u8fd9\u4e2a\u5728\u6570\u5b66\u4e0a\u79f0\u4e3a \u591a\u91cd\u5171\u7ebf\u6027 (multicollinearity).","title":"\u793a\u4f8b"},{"location":"content/daze/sklearn/liner_model/linear_regression/#_3","text":"[1] \u7ef4\u57fa: \u6700\u5c0f\u4e8c\u4e58\u6cd5 https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95 [2] \u4e8e\u6dfc: \u6700\u5c0f\u4e8c\u4e58\u6cd5?\u4e3a\u795e\u9a6c\u4e0d\u662f\u5dee\u7684\u7edd\u5bf9\u503c http://blog.sciencenet.cn/blog-430956-621997.html","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/liner_model/logistic_regression/","text":"\u903b\u8f91\u51fd\u6570 \u7ebf\u6027\u6a21\u578b\u9664\u4e86\u8fdb\u884c\u56de\u5f52, \u8fd8\u53ef\u4ee5\u8fdb\u884c\u5206\u7c7b. \u8003\u8651\u5230 $f(x, w) = w^Tx + b$ \u662f\u5728 $[-\\infty, +\\infty]$ \u4e0a\u8fde\u7eed\u7684, \u4e0d\u7b26\u5408\u6982\u7387\u7684\u53d6\u503c\u8303\u56f4 0 ~ 1, \u56e0\u6b64\u6211\u4eec\u8003\u8651\u4f7f\u7528\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b, \u6700\u7406\u60f3\u7684\u662f\u5355\u4f4d\u9636\u8dc3\u51fd\u6570: $$ P(z) = \\begin{cases} 0 & z < 0 \\\\ 0.5 & z = 0 \\\\ 1 & z > 0 \\end{cases} $$ \u4f46\u662f\u9636\u8dc3\u51fd\u6570\u4e0d\u6ee1\u8db3\u5355\u8c03\u53ef\u5bfc\u7684\u6027\u8d28, \u56e0\u6b64\u6211\u4eec\u9000\u800c\u6c42\u5176\u6b21, \u4f7f\u7528\u903b\u8f91\u51fd\u6570(\u5bf9\u6570\u6982\u7387\u51fd\u6570)\u66ff\u4ee3: $P(z) = \\frac{1}{1+e^{-z}}$ # \u903b\u8f91\u51fd\u6570\u66f2\u7ebf import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-10, 10, 100) y = 1 / (1 + np.power(np.e, -1 * x)) plt.plot(x, y, label='1 / (1 + e^-z)') plt.scatter([0], [0.5]) plt.legend(loc='lower right') plt.show() \u4ee3\u7801\u793a\u4f8b \u5728 sklearn \u4e2d, sklearn.linear_model.LogisticRegression \u5b9e\u73b0\u4e86\u903b\u8f91\u56de\u5f52\u6a21\u578b. \u4e0b\u9762\u6765\u5b9e\u73b0\u4ee5\u4e0b iris \u6570\u636e\u96c6\u7684\u5206\u7c7b. \u6ce8\u610f\u6211\u4eec\u4f7f\u7528\u4e86\u53c2\u6570 penalty='l1' \u548c solver='saga' . \u5bf9\u4e8e\u5927\u591a\u6570\u4efb\u52a1\u800c\u8a00, \u8fd9\u4e24\u4e2a\u53c2\u6570\u5747\u4e3a\u6700\u4f73\u9009\u62e9. import sklearn.datasets import sklearn.linear_model import sklearn.metrics import sklearn.model_selection iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.25, random_state=0, stratify=iris.target) regr = sklearn.linear_model.LogisticRegression(penalty='l1', solver='saga', max_iter=100) regr.fit(x_train, y_train) y_pred = regr.predict(x_test) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 13 1 1.00 1.00 1.00 13 2 1.00 1.00 1.00 12 avg / total 1.00 1.00 1.00 38","title":"sklearn-\u7ebf\u6027\u6a21\u578b-\u903b\u8f91\u56de\u5f52"},{"location":"content/daze/sklearn/liner_model/logistic_regression/#_1","text":"\u7ebf\u6027\u6a21\u578b\u9664\u4e86\u8fdb\u884c\u56de\u5f52, \u8fd8\u53ef\u4ee5\u8fdb\u884c\u5206\u7c7b. \u8003\u8651\u5230 $f(x, w) = w^Tx + b$ \u662f\u5728 $[-\\infty, +\\infty]$ \u4e0a\u8fde\u7eed\u7684, \u4e0d\u7b26\u5408\u6982\u7387\u7684\u53d6\u503c\u8303\u56f4 0 ~ 1, \u56e0\u6b64\u6211\u4eec\u8003\u8651\u4f7f\u7528\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b, \u6700\u7406\u60f3\u7684\u662f\u5355\u4f4d\u9636\u8dc3\u51fd\u6570: $$ P(z) = \\begin{cases} 0 & z < 0 \\\\ 0.5 & z = 0 \\\\ 1 & z > 0 \\end{cases} $$ \u4f46\u662f\u9636\u8dc3\u51fd\u6570\u4e0d\u6ee1\u8db3\u5355\u8c03\u53ef\u5bfc\u7684\u6027\u8d28, \u56e0\u6b64\u6211\u4eec\u9000\u800c\u6c42\u5176\u6b21, \u4f7f\u7528\u903b\u8f91\u51fd\u6570(\u5bf9\u6570\u6982\u7387\u51fd\u6570)\u66ff\u4ee3: $P(z) = \\frac{1}{1+e^{-z}}$ # \u903b\u8f91\u51fd\u6570\u66f2\u7ebf import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-10, 10, 100) y = 1 / (1 + np.power(np.e, -1 * x)) plt.plot(x, y, label='1 / (1 + e^-z)') plt.scatter([0], [0.5]) plt.legend(loc='lower right') plt.show()","title":"\u903b\u8f91\u51fd\u6570"},{"location":"content/daze/sklearn/liner_model/logistic_regression/#_2","text":"\u5728 sklearn \u4e2d, sklearn.linear_model.LogisticRegression \u5b9e\u73b0\u4e86\u903b\u8f91\u56de\u5f52\u6a21\u578b. \u4e0b\u9762\u6765\u5b9e\u73b0\u4ee5\u4e0b iris \u6570\u636e\u96c6\u7684\u5206\u7c7b. \u6ce8\u610f\u6211\u4eec\u4f7f\u7528\u4e86\u53c2\u6570 penalty='l1' \u548c solver='saga' . \u5bf9\u4e8e\u5927\u591a\u6570\u4efb\u52a1\u800c\u8a00, \u8fd9\u4e24\u4e2a\u53c2\u6570\u5747\u4e3a\u6700\u4f73\u9009\u62e9. import sklearn.datasets import sklearn.linear_model import sklearn.metrics import sklearn.model_selection iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.25, random_state=0, stratify=iris.target) regr = sklearn.linear_model.LogisticRegression(penalty='l1', solver='saga', max_iter=100) regr.fit(x_train, y_train) y_pred = regr.predict(x_test) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 13 1 1.00 1.00 1.00 13 2 1.00 1.00 1.00 12 avg / total 1.00 1.00 1.00 38","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"content/daze/sklearn/liner_model/overview/","text":"\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b \u7ebf\u6027\u6a21\u578b(Linear Model)\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u6a21\u578b, \u6307\u901a\u8fc7\u6837\u672c\u7279\u5f81\u7684\u7ebf\u6027\u7ec4\u5408\u6765\u8fdb\u884c\u9884\u6d4b\u7684\u6a21\u578b(\u5373\u56de\u5f52). \u5176\u4e2d\u76ee\u6807\u503c\u662f\u8f93\u5165\u53d8\u91cf x \u7684\u7ebf\u6027\u7ec4\u5408. \u5728\u6570\u5b66\u6982\u5ff5\u4e2d: $$ f(x, w) = w_0 + w_1x_1 + ... + w_px_p = w^Tx + b $$ \u5176\u4e2d $x=[x_1, x_2, ..., x_p]$, $w=[w_1, w_2, ..., w_p]$, $b$ \u4e3a\u5e38\u6570. \u6ce8: \u5728\u5176\u4ed6\u5730\u65b9\u4f60\u53ef\u80fd\u4f1a\u89c1\u5230 $f(x, w) = w^Tx$ \u7684\u8868\u793a, \u6b64\u65f6 $x=[1, x_1, x_2, ..., x_p]$, $w=[w_0, w_1, w_2, ..., w_p]$, \u5206\u522b\u4e3a p+1 \u7ef4\u7684 \u589e\u5e7f\u7279\u5f81\u5411\u91cf \u548c \u589e\u5e7f\u6743\u91cd\u5411\u91cf . \u5728\u7ebf\u6027\u56de\u5f52\u95ee\u9898\u4e2d, \u53ef\u4ee5\u76f4\u63a5\u7528 $f(x, w)$ \u6765\u9884\u6d4b\u8f93\u51fa\u76ee\u6807. \u4f46\u5728\u5206\u7c7b\u95ee\u9898\u4e2d, \u7531\u4e8e\u8f93\u51fa\u76ee\u6807\u662f\u4e00\u4e9b\u79bb\u6563\u7684\u6807\u7b7e\u6216\u8005\u662f\u8fd9\u4e9b\u6807\u7b7e\u7684\u540e\u9a8c\u6982\u7387\u800c $f(x, w)$ \u7684\u503c\u57df\u4e3a\u5b9e\u6570, \u56e0\u6b64\u65e0\u6cd5\u76f4\u63a5\u7528\u6765\u8fdb\u884c\u9884\u6d4b, \u9700\u8981\u5f15\u5165\u4e00\u4e2a\u975e\u7ebf\u6027\u7684 \u6fc0\u6d3b\u51fd\u6570 (Activation Function) $g$ \u6765\u9884\u6d4b\u8f93\u51fa\u76ee\u6807. \u5bf9\u4e8e\u7b80\u5355\u7684\u4e24\u5206\u7c7b\u6a21\u578b, \u6fc0\u6d3b\u51fd\u6570 $g$ \u53ef\u4ee5\u4e3a\u9636\u8dc3\u51fd\u6570: $$ g(x, w) = \\begin{cases} +1 & w^Tx+b > 0 \\\\ -1 & w^Tx+b < 0 \\end{cases} $$ \u4e0a\u8ff0\u516c\u5f0f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u4e24\u7c7b\u5206\u7c7b\u95ee\u9898\u7684\u7ebf\u6027\u51b3\u7b56\u51fd\u6570, \u5728\u9ad8\u7ef4\u7684\u7279\u5f81\u7a7a\u95f4\u4e2d, \u6240\u6709\u6ee1\u8db3 $w^Tx+b=0$ \u7684\u70b9\u7ec4\u6210\u4e00\u4e2a\u5206\u5272\u8d85\u5e73\u9762(Hyperplane). \u8fd9\u4e2a\u8d85\u5e73\u9762\u5c06\u7279\u5f81\u7a7a\u95f4\u4e00\u5206\u4e3a\u4e8c, \u5212\u5206\u6210\u4e24\u4e2a\u533a\u57df, \u6bcf\u4e2a\u533a\u57df\u5bf9\u5e94\u4e00\u4e2a\u7c7b\u522b. \u56e0\u6b64, \u8fd9\u4e2a\u5206\u5272\u8d85\u5e73\u9762\u4e5f\u79f0\u4e3a \u51b3\u7b56\u8fb9\u754c \u6216 \u51b3\u7b56\u5e73\u9762 . \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d, \u51b3\u7b56\u8fb9\u754c\u4e3a\u4e00\u4e2a\u76f4\u7ebf. \u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d, \u5206\u7c7b\u754c\u9762\u4e3a\u4e00\u4e2a\u5e73\u9762. \u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d, \u5206\u7c7b\u754c\u9762\u4e3a\u4e00\u4e2a\u8d85\u5e73\u9762. \u5bf9\u4e8e\u7ebf\u6027\u5206\u7c7b\u5668\u800c\u8a00, \u5176\u6743\u91cd\u5411\u91cf\u4e0e\u51b3\u7b56\u5e73\u9762\u6b63\u4ea4. \u5bf9\u4e8e\u7ebf\u6027\u5206\u7c7b\u6a21\u578b\u6765\u8bf4, \u4e00\u4e2a\u5173\u952e\u7684\u95ee\u9898\u662f\u5982\u4f55\u5b66\u4e60\u53c2\u6570 $w$ \u548c $b$, \u4e5f\u5c31\u662f\u5982\u4f55\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u4ee5\u53ca\u4f18\u5316\u65b9\u6cd5.","title":"sklearn-\u7ebf\u6027\u6a21\u578b-\u6982\u89c8"},{"location":"content/daze/sklearn/liner_model/overview/#_1","text":"\u7ebf\u6027\u6a21\u578b(Linear Model)\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u6a21\u578b, \u6307\u901a\u8fc7\u6837\u672c\u7279\u5f81\u7684\u7ebf\u6027\u7ec4\u5408\u6765\u8fdb\u884c\u9884\u6d4b\u7684\u6a21\u578b(\u5373\u56de\u5f52). \u5176\u4e2d\u76ee\u6807\u503c\u662f\u8f93\u5165\u53d8\u91cf x \u7684\u7ebf\u6027\u7ec4\u5408. \u5728\u6570\u5b66\u6982\u5ff5\u4e2d: $$ f(x, w) = w_0 + w_1x_1 + ... + w_px_p = w^Tx + b $$ \u5176\u4e2d $x=[x_1, x_2, ..., x_p]$, $w=[w_1, w_2, ..., w_p]$, $b$ \u4e3a\u5e38\u6570. \u6ce8: \u5728\u5176\u4ed6\u5730\u65b9\u4f60\u53ef\u80fd\u4f1a\u89c1\u5230 $f(x, w) = w^Tx$ \u7684\u8868\u793a, \u6b64\u65f6 $x=[1, x_1, x_2, ..., x_p]$, $w=[w_0, w_1, w_2, ..., w_p]$, \u5206\u522b\u4e3a p+1 \u7ef4\u7684 \u589e\u5e7f\u7279\u5f81\u5411\u91cf \u548c \u589e\u5e7f\u6743\u91cd\u5411\u91cf . \u5728\u7ebf\u6027\u56de\u5f52\u95ee\u9898\u4e2d, \u53ef\u4ee5\u76f4\u63a5\u7528 $f(x, w)$ \u6765\u9884\u6d4b\u8f93\u51fa\u76ee\u6807. \u4f46\u5728\u5206\u7c7b\u95ee\u9898\u4e2d, \u7531\u4e8e\u8f93\u51fa\u76ee\u6807\u662f\u4e00\u4e9b\u79bb\u6563\u7684\u6807\u7b7e\u6216\u8005\u662f\u8fd9\u4e9b\u6807\u7b7e\u7684\u540e\u9a8c\u6982\u7387\u800c $f(x, w)$ \u7684\u503c\u57df\u4e3a\u5b9e\u6570, \u56e0\u6b64\u65e0\u6cd5\u76f4\u63a5\u7528\u6765\u8fdb\u884c\u9884\u6d4b, \u9700\u8981\u5f15\u5165\u4e00\u4e2a\u975e\u7ebf\u6027\u7684 \u6fc0\u6d3b\u51fd\u6570 (Activation Function) $g$ \u6765\u9884\u6d4b\u8f93\u51fa\u76ee\u6807. \u5bf9\u4e8e\u7b80\u5355\u7684\u4e24\u5206\u7c7b\u6a21\u578b, \u6fc0\u6d3b\u51fd\u6570 $g$ \u53ef\u4ee5\u4e3a\u9636\u8dc3\u51fd\u6570: $$ g(x, w) = \\begin{cases} +1 & w^Tx+b > 0 \\\\ -1 & w^Tx+b < 0 \\end{cases} $$ \u4e0a\u8ff0\u516c\u5f0f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u4e24\u7c7b\u5206\u7c7b\u95ee\u9898\u7684\u7ebf\u6027\u51b3\u7b56\u51fd\u6570, \u5728\u9ad8\u7ef4\u7684\u7279\u5f81\u7a7a\u95f4\u4e2d, \u6240\u6709\u6ee1\u8db3 $w^Tx+b=0$ \u7684\u70b9\u7ec4\u6210\u4e00\u4e2a\u5206\u5272\u8d85\u5e73\u9762(Hyperplane). \u8fd9\u4e2a\u8d85\u5e73\u9762\u5c06\u7279\u5f81\u7a7a\u95f4\u4e00\u5206\u4e3a\u4e8c, \u5212\u5206\u6210\u4e24\u4e2a\u533a\u57df, \u6bcf\u4e2a\u533a\u57df\u5bf9\u5e94\u4e00\u4e2a\u7c7b\u522b. \u56e0\u6b64, \u8fd9\u4e2a\u5206\u5272\u8d85\u5e73\u9762\u4e5f\u79f0\u4e3a \u51b3\u7b56\u8fb9\u754c \u6216 \u51b3\u7b56\u5e73\u9762 . \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d, \u51b3\u7b56\u8fb9\u754c\u4e3a\u4e00\u4e2a\u76f4\u7ebf. \u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d, \u5206\u7c7b\u754c\u9762\u4e3a\u4e00\u4e2a\u5e73\u9762. \u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d, \u5206\u7c7b\u754c\u9762\u4e3a\u4e00\u4e2a\u8d85\u5e73\u9762. \u5bf9\u4e8e\u7ebf\u6027\u5206\u7c7b\u5668\u800c\u8a00, \u5176\u6743\u91cd\u5411\u91cf\u4e0e\u51b3\u7b56\u5e73\u9762\u6b63\u4ea4. \u5bf9\u4e8e\u7ebf\u6027\u5206\u7c7b\u6a21\u578b\u6765\u8bf4, \u4e00\u4e2a\u5173\u952e\u7684\u95ee\u9898\u662f\u5982\u4f55\u5b66\u4e60\u53c2\u6570 $w$ \u548c $b$, \u4e5f\u5c31\u662f\u5982\u4f55\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u4ee5\u53ca\u4f18\u5316\u65b9\u6cd5.","title":"\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b"},{"location":"content/daze/sklearn/liner_model/ridge/","text":"\u591a\u91cd\u5171\u7ebf\u6027\u7684\u6982\u5ff5 \u5bf9\u4e8e\u6a21\u578b $f(x, w) = w_0 + w_1x_1 + ... + w_px_p = w^Tx + b$ \u5176\u57fa\u672c\u5047\u8bbe\u4e4b\u4e00\u662f\u89e3\u91ca\u53d8\u91cf\u662f\u4e92\u76f8\u72ec\u7acb\u7684. \u5982\u679c\u67d0\u4e24\u4e2a\u6216\u591a\u4e2a\u89e3\u91ca\u53d8\u91cf\u4e4b\u95f4\u51fa\u73b0\u4e86\u76f8\u5173\u6027, \u5219\u79f0\u4e3a \u591a\u91cd\u5171\u7ebf\u6027 (Multicollinearity). \u5982\u679c\u5b58\u5728 $c_1x_1 + c_2x_2 + \u2026 + c_px_p=0$, \u5176\u4e2d: $c_p$ \u4e0d\u5168\u4e3a0, \u5219\u79f0\u4e3a\u89e3\u91ca\u53d8\u91cf\u95f4\u5b58\u5728 \u5b8c\u5168\u5171\u7ebf\u6027 . \u5982\u679c\u5b58\u5728 $c_1x_1 + c_2x_2 + \u2026 + c_px_p + v = 0$, $v$ \u4e3a\u968f\u673a\u8bef\u5dee\u9879, \u5219\u79f0\u4e3a \u8fd1\u4f3c\u5171\u7ebf\u6027 . \u5b8c\u5168\u5171\u7ebf\u6027\u6307: $X$ \u81f3\u5c11\u6709\u4e00\u5217\u5411\u91cf\u53ef\u7531\u5176\u4ed6\u5217\u5411\u91cf\u7ebf\u6027\u8868\u793a. \u5982 $X_2 = \\lambda X_1$, \u5219 $X_2$ \u5bf9 $Y$ \u7684\u4f5c\u7528\u53ef\u7531 $X_1$ \u66ff\u4ee3. \u6ce8\u610f: \u5b8c\u5168\u5171\u7ebf\u6027\u60c5\u51b5\u5e76\u4e0d\u591a\u89c1. \u4e00\u822c\u51fa\u73b0\u7684\u662f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7684\u5171\u7ebf\u6027, \u5373\u8fd1\u4f3c\u5171\u7ebf\u6027. \u5f15\u53d1\u591a\u91cd\u5171\u7ebf\u6027\u7684\u539f\u56e0\u4f8b\u5982\u7ecf\u6d4e\u53d8\u91cf\u76f8\u5173\u7684\u5171\u540c\u8d8b\u52bf, \u5728\u7ecf\u6d4e\u7e41\u8363\u671f, \u6536\u5165, \u6d88\u8d39, \u6295\u8d44, \u4ef7\u683c\u90fd\u8d8b\u4e8e\u589e\u957f; \u5728\u7ecf\u6d4e\u8870\u9000\u671f, \u53c8\u540c\u65f6\u8d8b\u4e8e\u4e0b\u964d. \u5cad\u56de\u5f52 \u5cad\u56de\u5f52\u901a\u8fc7\u5bf9\u7cfb\u6570\u7684\u5927\u5c0f\u65bd\u52a0\u60e9\u7f5a\u6765\u89e3\u51b3\u591a\u91cd\u5171\u7ebf\u6027\u95ee\u9898. \u5f53\u8f93\u5165\u53d8\u91cf\u5b58\u5728\u5f3a\u76f8\u5173\u6027, \u6216\u8005\u8f93\u5165\u53d8\u91cf\u8fc7\u591a, \u6211\u4eec\u4e0d\u60f3\u4e00\u4e00\u9a8c\u8bc1\u5176\u662f\u5426\u5b58\u5728\u76f8\u5173\u6027\u65f6, \u9002\u7528\u5cad\u56de\u5f52 . \u4f7f\u7528 sklearn.linear_model.Ridge \u62df\u5408\u4e00\u7cfb\u5217\u4e00\u7ef4\u6570\u636e. \u5176\u4e2d, $\\alpha$ \u662f\u63a7\u5236\u7cfb\u6570\u6536\u7f29\u91cf\u7684\u590d\u6742\u6027\u53c2\u6570: $\\alpha$ \u7684\u503c\u8d8a\u5927, \u6536\u7f29\u91cf\u8d8a\u5927, \u8fd9\u6837\u7cfb\u6570\u5bf9\u5171\u7ebf\u6027\u7684\u9c81\u68d2\u6027\u4e5f\u66f4\u5f3a. import sklearn.datasets import sklearn.linear_model import sklearn.metrics x = [ [7, 26, 6, 60], [1, 29, 15, 52], [11, 56, 8, 20], [11, 31, 8, 47], [7, 52, 6, 33], [11, 55, 9, 22], [3, 71, 17, 6], [1, 31, 22, 44], [2, 54, 18, 22], [21, 47, 4, 26], [1, 40, 23, 34], [11, 66, 9, 12] ] y = [78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7, 72.5, 93.1, 115.9, 83.8, 113.3] regr = sklearn.linear_model.Ridge(alpha=1.0) regr.fit(x, y) y_pred = regr.predict(x) print('Coefficients:', regr.coef_) print('Mean squared error: %.2f' % sklearn.metrics.mean_squared_error(y, y_pred)) print('Variance score: %.2f' % sklearn.metrics.r2_score(y, y_pred)) Coefficients: [ 1.55978657 0.58092437 0.10491954 -0.0957913 ] Mean squared error: 3.40 Variance score: 0.98","title":"sklearn-\u7ebf\u6027\u6a21\u578b-\u5cad\u56de\u5f52"},{"location":"content/daze/sklearn/liner_model/ridge/#_1","text":"\u5bf9\u4e8e\u6a21\u578b $f(x, w) = w_0 + w_1x_1 + ... + w_px_p = w^Tx + b$ \u5176\u57fa\u672c\u5047\u8bbe\u4e4b\u4e00\u662f\u89e3\u91ca\u53d8\u91cf\u662f\u4e92\u76f8\u72ec\u7acb\u7684. \u5982\u679c\u67d0\u4e24\u4e2a\u6216\u591a\u4e2a\u89e3\u91ca\u53d8\u91cf\u4e4b\u95f4\u51fa\u73b0\u4e86\u76f8\u5173\u6027, \u5219\u79f0\u4e3a \u591a\u91cd\u5171\u7ebf\u6027 (Multicollinearity). \u5982\u679c\u5b58\u5728 $c_1x_1 + c_2x_2 + \u2026 + c_px_p=0$, \u5176\u4e2d: $c_p$ \u4e0d\u5168\u4e3a0, \u5219\u79f0\u4e3a\u89e3\u91ca\u53d8\u91cf\u95f4\u5b58\u5728 \u5b8c\u5168\u5171\u7ebf\u6027 . \u5982\u679c\u5b58\u5728 $c_1x_1 + c_2x_2 + \u2026 + c_px_p + v = 0$, $v$ \u4e3a\u968f\u673a\u8bef\u5dee\u9879, \u5219\u79f0\u4e3a \u8fd1\u4f3c\u5171\u7ebf\u6027 . \u5b8c\u5168\u5171\u7ebf\u6027\u6307: $X$ \u81f3\u5c11\u6709\u4e00\u5217\u5411\u91cf\u53ef\u7531\u5176\u4ed6\u5217\u5411\u91cf\u7ebf\u6027\u8868\u793a. \u5982 $X_2 = \\lambda X_1$, \u5219 $X_2$ \u5bf9 $Y$ \u7684\u4f5c\u7528\u53ef\u7531 $X_1$ \u66ff\u4ee3. \u6ce8\u610f: \u5b8c\u5168\u5171\u7ebf\u6027\u60c5\u51b5\u5e76\u4e0d\u591a\u89c1. \u4e00\u822c\u51fa\u73b0\u7684\u662f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7684\u5171\u7ebf\u6027, \u5373\u8fd1\u4f3c\u5171\u7ebf\u6027. \u5f15\u53d1\u591a\u91cd\u5171\u7ebf\u6027\u7684\u539f\u56e0\u4f8b\u5982\u7ecf\u6d4e\u53d8\u91cf\u76f8\u5173\u7684\u5171\u540c\u8d8b\u52bf, \u5728\u7ecf\u6d4e\u7e41\u8363\u671f, \u6536\u5165, \u6d88\u8d39, \u6295\u8d44, \u4ef7\u683c\u90fd\u8d8b\u4e8e\u589e\u957f; \u5728\u7ecf\u6d4e\u8870\u9000\u671f, \u53c8\u540c\u65f6\u8d8b\u4e8e\u4e0b\u964d.","title":"\u591a\u91cd\u5171\u7ebf\u6027\u7684\u6982\u5ff5"},{"location":"content/daze/sklearn/liner_model/ridge/#_2","text":"\u5cad\u56de\u5f52\u901a\u8fc7\u5bf9\u7cfb\u6570\u7684\u5927\u5c0f\u65bd\u52a0\u60e9\u7f5a\u6765\u89e3\u51b3\u591a\u91cd\u5171\u7ebf\u6027\u95ee\u9898. \u5f53\u8f93\u5165\u53d8\u91cf\u5b58\u5728\u5f3a\u76f8\u5173\u6027, \u6216\u8005\u8f93\u5165\u53d8\u91cf\u8fc7\u591a, \u6211\u4eec\u4e0d\u60f3\u4e00\u4e00\u9a8c\u8bc1\u5176\u662f\u5426\u5b58\u5728\u76f8\u5173\u6027\u65f6, \u9002\u7528\u5cad\u56de\u5f52 . \u4f7f\u7528 sklearn.linear_model.Ridge \u62df\u5408\u4e00\u7cfb\u5217\u4e00\u7ef4\u6570\u636e. \u5176\u4e2d, $\\alpha$ \u662f\u63a7\u5236\u7cfb\u6570\u6536\u7f29\u91cf\u7684\u590d\u6742\u6027\u53c2\u6570: $\\alpha$ \u7684\u503c\u8d8a\u5927, \u6536\u7f29\u91cf\u8d8a\u5927, \u8fd9\u6837\u7cfb\u6570\u5bf9\u5171\u7ebf\u6027\u7684\u9c81\u68d2\u6027\u4e5f\u66f4\u5f3a. import sklearn.datasets import sklearn.linear_model import sklearn.metrics x = [ [7, 26, 6, 60], [1, 29, 15, 52], [11, 56, 8, 20], [11, 31, 8, 47], [7, 52, 6, 33], [11, 55, 9, 22], [3, 71, 17, 6], [1, 31, 22, 44], [2, 54, 18, 22], [21, 47, 4, 26], [1, 40, 23, 34], [11, 66, 9, 12] ] y = [78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7, 72.5, 93.1, 115.9, 83.8, 113.3] regr = sklearn.linear_model.Ridge(alpha=1.0) regr.fit(x, y) y_pred = regr.predict(x) print('Coefficients:', regr.coef_) print('Mean squared error: %.2f' % sklearn.metrics.mean_squared_error(y, y_pred)) print('Variance score: %.2f' % sklearn.metrics.r2_score(y, y_pred)) Coefficients: [ 1.55978657 0.58092437 0.10491954 -0.0957913 ] Mean squared error: 3.40 Variance score: 0.98","title":"\u5cad\u56de\u5f52"},{"location":"content/py/f_string/","text":"\u5728 python3.6 \u4f53\u9a8c\u65b0\u7684 f-string f-string \u662f python3.6 \u65b0\u589e\u7684\u529f\u80fd. \u8fd9\u91cc\u7b80\u8981\u6458\u5f55\u4e00\u4e0b f-string \u8bed\u6cd5\u907f\u514d\u9057\u5fd8. \u8bed\u6cd5 f-string \u7684\u6807\u51c6\u8bed\u6cd5\u975e\u5e38\u7b80\u5355, \u7406\u89e3\u4e3a\u5f85\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 {} \u5c06\u4f1a\u88ab\u5f53\u4f5c python \u4ee3\u7801\u6c42\u503c\u5373\u53ef. name = 'mohanson' pi = 3.14 # \u8bed\u6cd5: \u6267\u884c python \u4ee3\u7801 print(f'name: {name}') # name: mohanson print(f'name: {str.upper(name)}') # name: MOHANSON print(f'2 * pi = {2 * pi}') # 2 * pi = 6.28 # \u8bed\u6cd5: \u5bf9\u9f50 print(f'pi: {pi:0<10}') # pi: 3.14000000 print(f'pi: {pi:0>10}') # pi: 0000003.14 print(f'pi: {pi:0^10}') # pi: 0003.14000 # \u8bed\u6cd5: \u56fa\u5b9a\u6d6e\u70b9\u6570\u4f4d\u6570 print(f'pi: {pi:.1f}') # pi: 3.1 # \u8bed\u6cd5: !r, !s, !a \u66ff\u4ee3 repr(), str(), ascii() print(f'name: {name!r}') # name: 'mohanson' \u53c2\u8003 [1] Eric V.Smith: PEP 498 -- Literal String Interpolation https://www.python.org/dev/peps/pep-0498/","title":"\u5728 python3.6 \u4f53\u9a8c\u65b0\u7684 f-string"},{"location":"content/py/f_string/#python36-f-string","text":"f-string \u662f python3.6 \u65b0\u589e\u7684\u529f\u80fd. \u8fd9\u91cc\u7b80\u8981\u6458\u5f55\u4e00\u4e0b f-string \u8bed\u6cd5\u907f\u514d\u9057\u5fd8.","title":"\u5728 python3.6 \u4f53\u9a8c\u65b0\u7684 f-string"},{"location":"content/py/f_string/#_1","text":"f-string \u7684\u6807\u51c6\u8bed\u6cd5\u975e\u5e38\u7b80\u5355, \u7406\u89e3\u4e3a\u5f85\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 {} \u5c06\u4f1a\u88ab\u5f53\u4f5c python \u4ee3\u7801\u6c42\u503c\u5373\u53ef. name = 'mohanson' pi = 3.14 # \u8bed\u6cd5: \u6267\u884c python \u4ee3\u7801 print(f'name: {name}') # name: mohanson print(f'name: {str.upper(name)}') # name: MOHANSON print(f'2 * pi = {2 * pi}') # 2 * pi = 6.28 # \u8bed\u6cd5: \u5bf9\u9f50 print(f'pi: {pi:0<10}') # pi: 3.14000000 print(f'pi: {pi:0>10}') # pi: 0000003.14 print(f'pi: {pi:0^10}') # pi: 0003.14000 # \u8bed\u6cd5: \u56fa\u5b9a\u6d6e\u70b9\u6570\u4f4d\u6570 print(f'pi: {pi:.1f}') # pi: 3.1 # \u8bed\u6cd5: !r, !s, !a \u66ff\u4ee3 repr(), str(), ascii() print(f'name: {name!r}') # name: 'mohanson'","title":"\u8bed\u6cd5"},{"location":"content/py/f_string/#_2","text":"[1] Eric V.Smith: PEP 498 -- Literal String Interpolation https://www.python.org/dev/peps/pep-0498/","title":"\u53c2\u8003"},{"location":"content/py/setup/","text":"\u5b98\u65b9\u6559\u7a0b: https://packaging.python.org/tutorials/distributing-packages/ \u793a\u4f8b\u9879\u76ee: https://github.com/pypa/sampleproject \u914d\u7f6e\u8d26\u53f7 \u5728 $HOME \u4e0b\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9\u81f3 .pypirc [distutils] index-servers = pypi [pypi] username = username password = password \u521b\u5efa setup.py import setuptools setuptools.setup( name='sample', version='1.2.0', url='https://github.com/pypa/sampleproject', license='MIT', author='The Python Packaging Authority', author_email='pypa-dev@googlegroups.com', description='A sample Python project', packages=['sample'], install_requires=[ 'peppercorn', ] ) \u6253\u5305\u5e76\u53d1\u5e03 $ python setup.py sdist bdist_wheel $ python -m pip install --upgrade twine $ python -m twine upload dist/* \u63d0\u793a \u53d1\u5e03\u6a21\u5757\u4e0e\u6587\u4ef6 \u5728 setup.py \u4e2d, \u4f7f\u7528 packages=['sample'] \u4f1a\u53d1\u5e03 sample \u76ee\u5f55(\u5305), \u800c\u4f7f\u7528 py_modules=['sample'] \u4f1a\u53d1\u5e03 sample.py \u6587\u4ef6. \u5927\u591a\u6570\u60c5\u51b5\u4e0b, \u4f60\u53ef\u4ee5\u4f7f\u7528 packages=setuptools.find_packages() \u81ea\u52a8\u53d1\u73b0\u4ee3\u66ff\u624b\u52a8\u586b\u5199. \u751f\u6210\u547d\u4ee4\u884c\u7a0b\u5e8f entry_points={ 'console_scripts': [ 'sample=sample:main', ], } \u5728 setup.py \u4e2d\u914d\u7f6e\u4ee5\u4e0a\u4ee3\u7801, \u4e00\u4e2a\u540d\u4e3a sample \u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\u5c06\u5728\u5b89\u88c5\u6b64\u6a21\u5757\u540e\u751f\u6210.","title":"Setup"},{"location":"content/py/setup/#_1","text":"\u5728 $HOME \u4e0b\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9\u81f3 .pypirc [distutils] index-servers = pypi [pypi] username = username password = password","title":"\u914d\u7f6e\u8d26\u53f7"},{"location":"content/py/setup/#setuppy","text":"import setuptools setuptools.setup( name='sample', version='1.2.0', url='https://github.com/pypa/sampleproject', license='MIT', author='The Python Packaging Authority', author_email='pypa-dev@googlegroups.com', description='A sample Python project', packages=['sample'], install_requires=[ 'peppercorn', ] )","title":"\u521b\u5efa setup.py"},{"location":"content/py/setup/#_2","text":"$ python setup.py sdist bdist_wheel $ python -m pip install --upgrade twine $ python -m twine upload dist/*","title":"\u6253\u5305\u5e76\u53d1\u5e03"},{"location":"content/py/setup/#_3","text":"\u53d1\u5e03\u6a21\u5757\u4e0e\u6587\u4ef6 \u5728 setup.py \u4e2d, \u4f7f\u7528 packages=['sample'] \u4f1a\u53d1\u5e03 sample \u76ee\u5f55(\u5305), \u800c\u4f7f\u7528 py_modules=['sample'] \u4f1a\u53d1\u5e03 sample.py \u6587\u4ef6. \u5927\u591a\u6570\u60c5\u51b5\u4e0b, \u4f60\u53ef\u4ee5\u4f7f\u7528 packages=setuptools.find_packages() \u81ea\u52a8\u53d1\u73b0\u4ee3\u66ff\u624b\u52a8\u586b\u5199. \u751f\u6210\u547d\u4ee4\u884c\u7a0b\u5e8f entry_points={ 'console_scripts': [ 'sample=sample:main', ], } \u5728 setup.py \u4e2d\u914d\u7f6e\u4ee5\u4e0a\u4ee3\u7801, \u4e00\u4e2a\u540d\u4e3a sample \u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\u5c06\u5728\u5b89\u88c5\u6b64\u6a21\u5757\u540e\u751f\u6210.","title":"\u63d0\u793a"},{"location":"content/py/ctypes/overview/","text":"\u8be5\u7cfb\u5217\u6587\u7ae0\u5f88\u65e9\u5c31\u51c6\u5907\u5199\u4e86, \u4f46\u662f\u4e00\u76f4\u62d6\u7740... \u6545\u4e8b\u7684\u8d77\u56e0\u662f\u6211\u5728 windows \u4e0b rm -rf \u4e86\u81ea\u5df1\u7684\u7528\u6237\u76ee\u5f55, \u56e0\u6b64\u5728\u8be5\u8d77\u4e8b\u4ef6\u540e\u5c31\u7814\u7a76\u8d77\u6765\u5982\u4f55 rm \u7684\u65f6\u5019\u628a\u6587\u4ef6\u653e\u5165\u56de\u6536\u7ad9\u800c\u4e0d\u662f\u76f4\u63a5\u5220\u9664, windows \u63d0\u4f9b\u4e86 C++ \u7248\u672c\u7684 api \u6765\u5b9e\u73b0\u8fd9\u4e00\u9700\u6c42, \u4f46\u4f5c\u4e3a\u4e00\u4e2a\u61d2\u4eba\u6211\u5e76\u4e0d\u60f3\u73a9 C++, \u6240\u4ee5, Python \u5927\u6cd5\u597d~ Python windows \u7f16\u7a0b: \u6982\u89c8 \u5728 windows \u5e73\u53f0\u4e0b, python \u901a\u8fc7 ctypes \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u4e0e windows api \u8fdb\u884c\u4ea4\u4e92. \u5982\u4e0b\u7684\u4ee3\u7801\u5c06\u5728\u684c\u9762\u521b\u5efa\u4e00\u4e2a MessageBoxW , \u5e76\u5728\u901a\u77e5\u7684\u5185\u5bb9\u4e2d\u663e\u793a\u5f53\u524d\u65f6\u95f4. import ctypes import datetime c = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') ctypes.windll.user32.MessageBoxW(0, c, '\u67e5\u8be2\u65f6\u95f4', 1) MessageBoxW \u7684 C++ \u63a5\u53e3\u6587\u6863\u4f4d\u4e8e https://msdn.microsoft.com/en-us/library/windows/desktop/ms645505(v=vs.85).aspx , \u5982\u6587\u6863\u6240\u89c1, \u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4fee\u6539\u5305\u62ec\u6807\u9898, \u6b63\u6587, \u6309\u94ae\u548c icon \u7b49\u5728\u5185\u7684\u51e0\u4e4e\u6240\u6709\u5185\u5bb9. \u4e0e\u4e0a\u8ff0 Python \u4ee3\u7801\u7b49\u6548\u7684 C++ \u4ee3\u7801\u5982\u4e0b\u6240\u793a: #include <windows.h> #pragma comment (lib, \"User32.lib\") int WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow ){ MessageBoxW(NULL, (LPCWSTR)L\"2018-05-20 10:22:38\", (LPCWSTR)L\"\u67e5\u8be2\u65f6\u95f4\", MB_OKCANCEL); return 0; }","title":"Overview"},{"location":"content/py/ctypes/overview/#python-windows","text":"\u5728 windows \u5e73\u53f0\u4e0b, python \u901a\u8fc7 ctypes \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u4e0e windows api \u8fdb\u884c\u4ea4\u4e92. \u5982\u4e0b\u7684\u4ee3\u7801\u5c06\u5728\u684c\u9762\u521b\u5efa\u4e00\u4e2a MessageBoxW , \u5e76\u5728\u901a\u77e5\u7684\u5185\u5bb9\u4e2d\u663e\u793a\u5f53\u524d\u65f6\u95f4. import ctypes import datetime c = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') ctypes.windll.user32.MessageBoxW(0, c, '\u67e5\u8be2\u65f6\u95f4', 1) MessageBoxW \u7684 C++ \u63a5\u53e3\u6587\u6863\u4f4d\u4e8e https://msdn.microsoft.com/en-us/library/windows/desktop/ms645505(v=vs.85).aspx , \u5982\u6587\u6863\u6240\u89c1, \u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4fee\u6539\u5305\u62ec\u6807\u9898, \u6b63\u6587, \u6309\u94ae\u548c icon \u7b49\u5728\u5185\u7684\u51e0\u4e4e\u6240\u6709\u5185\u5bb9. \u4e0e\u4e0a\u8ff0 Python \u4ee3\u7801\u7b49\u6548\u7684 C++ \u4ee3\u7801\u5982\u4e0b\u6240\u793a: #include <windows.h> #pragma comment (lib, \"User32.lib\") int WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow ){ MessageBoxW(NULL, (LPCWSTR)L\"2018-05-20 10:22:38\", (LPCWSTR)L\"\u67e5\u8be2\u65f6\u95f4\", MB_OKCANCEL); return 0; }","title":"Python windows \u7f16\u7a0b: \u6982\u89c8"},{"location":"content/py/ctypes/recycle/","text":"Python windows \u7f16\u7a0b: \u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9 \u73b0\u5728\u8981\u5b9e\u73b0\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u7f16\u7a0b: \u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9. \u67e5\u9605 MSDN \u627e\u5230\u5982\u4e0b\u6587\u6863: https://msdn.microsoft.com/en-us/library/windows/desktop/bb762164(v=vs.85).aspx , \u53d1\u73b0\u6b63\u597d\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42. SHFileOperation \u51fd\u6570\u7684\u8bf4\u660e\u662f \"Copies, moves, renames, or deletes a file system object.\" \u4e0e\u4f7f\u7528 rm \u6216 os.remove \u7b49\u5220\u9664\u547d\u4ee4/\u51fd\u6570\u4e0d\u540c, \u8be5\u51fd\u6570\u7ecf\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u7684\u5c01\u88c5, \u4ed6\u4f1a\u5728\u5220\u9664\u6587\u4ef6\u65f6\u8be2\u95ee\u4f60 \"\u662f\u5426\u771f\u7684\u5220\u9664\u8be5\u6587\u4ef6\" \u6216\u5728\u590d\u5236\u6587\u4ef6\u65f6\u63d0\u9192\u4f60 \"\u6587\u4ef6\u5df2\u5b58\u5728, \u662f\u5426\u8986\u76d6\", \u5927\u90e8\u5206\u60c5\u51b5\u4e0b, \u4f60\u53ef\u4ee5\u5c06\u4ed6\u7b49\u4ef7\u4e3a\u4f60\u5728 windows \u7684\u6587\u4ef6\u7cfb\u7edf\u91cc\u6267\u884c\u67d0\u4e00\u64cd\u4f5c, \u5c31\u50cf\u4f60\u5728\u624b\u52a8\u64cd\u4f5c\u4e00\u6837. int SHFileOperation( _Inout_ LPSHFILEOPSTRUCT lpFileOp ); \u5f88\u597d! \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8be5\u8c03\u7528\u54ea\u4e2a\u51fd\u6570\u4e86. \u4f46\u73b0\u5728\u9047\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898, SHFileOperation \u7684\u53c2\u6570 lpFileOp \u65e2\u4e0d\u662f\u6211\u4eec\u719f\u77e5\u7684\u6574\u5f62, \u4e5f\u4e0d\u662f\u5b57\u7b26\u4e32, \u800c\u662f\u4e00\u4e2a\u540d\u4e3a LPSHFILEOPSTRUCT \u7684\u7ed3\u6784\u4f53: typedef struct _SHFILEOPSTRUCT { HWND hwnd; UINT wFunc; PCZZTSTR pFrom; PCZZTSTR pTo; FILEOP_FLAGS fFlags; BOOL fAnyOperationsAborted; LPVOID hNameMappings; PCTSTR lpszProgressTitle; } SHFILEOPSTRUCT, *LPSHFILEOPSTRUCT; \u4e3a\u4e86\u5728 Python \u4e2d\u8c03\u7528\u8be5\u51fd\u6570, \u6211\u4eec\u5fc5\u987b\u5b9e\u73b0 LPSHFILEOPSTRUCT \u5728 Python \u4e2d\u7684\u6620\u5c04. \u5b9a\u4e49\u4e00\u4e2a\u7c7b\u5e76\u7ee7\u627f ctypes.Structure , \u7136\u540e\u4e3a\u5176\u6dfb\u52a0 _fields_ \u5b57\u6bb5, \u5b57\u6bb5\u5185\u90e8\u662f\u6210\u5458\u540d\u4e0e\u7c7b\u578b\u7684\u5143\u7ec4. import ctypes import ctypes.wintypes class LPSHFILEOPSTRUCT(ctypes.Structure): _fields_ = [ ('hwnd', ctypes.wintypes.HWND), ('wFunc', ctypes.wintypes.UINT), ('pFrom', ctypes.wintypes.PCHAR), ('pTo', ctypes.wintypes.PCHAR), ('fFlags', ctypes.wintypes.INT), ('fAnyOperationsAborted', ctypes.wintypes.BOOL), ('hNameMappings', ctypes.wintypes.LPVOID), ('lpszProgressTitle', ctypes.wintypes.PCHAR) ] FO_DELETE = 3 FOF_SILENT = 4 FOF_NOCONFIRMATION = 16 FOF_ALLOWUNDO = 64 FOF_NOCONFIRMMKDIR = 512 FOF_NOERRORUI = 1024 FOF_NO_UI = FOF_SILENT | FOF_NOCONFIRMATION | FOF_NOERRORUI | FOF_NOCONFIRMMKDIR def rm(p): r = ctypes.windll.shell32.SHFileOperation(LPSHFILEOPSTRUCT( hwnd=0, wFunc=FO_DELETE, pFrom=ctypes.create_string_buffer(p.encode()), fFlags=FOF_ALLOWUNDO | FOF_NO_UI )) if r: raise Exception(r) \u5b8c\u6210\u4e86! \u8c03\u7528 rm() \u51fd\u6570\u5373\u53ef\u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9. \u6ce8\u610f\u4e0a\u9762\u7684\u4ee3\u7801, \u6211\u4e3a LPSHFILEOPSTRUCT \u7684 fFlags \u8bbe\u7f6e\u4e86\u51e0\u4e2a\u6807\u7b7e, \u4ee5\u5b9e\u73b0\u9759\u9ed8\u5220\u9664\u6587\u4ef6\u548c\u5220\u9664\u6587\u4ef6\u5939\u81f3\u56de\u6536\u7ad9.","title":"Python windows \u7f16\u7a0b: \u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9"},{"location":"content/py/ctypes/recycle/#python-windows","text":"\u73b0\u5728\u8981\u5b9e\u73b0\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u7f16\u7a0b: \u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9. \u67e5\u9605 MSDN \u627e\u5230\u5982\u4e0b\u6587\u6863: https://msdn.microsoft.com/en-us/library/windows/desktop/bb762164(v=vs.85).aspx , \u53d1\u73b0\u6b63\u597d\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42. SHFileOperation \u51fd\u6570\u7684\u8bf4\u660e\u662f \"Copies, moves, renames, or deletes a file system object.\" \u4e0e\u4f7f\u7528 rm \u6216 os.remove \u7b49\u5220\u9664\u547d\u4ee4/\u51fd\u6570\u4e0d\u540c, \u8be5\u51fd\u6570\u7ecf\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u7684\u5c01\u88c5, \u4ed6\u4f1a\u5728\u5220\u9664\u6587\u4ef6\u65f6\u8be2\u95ee\u4f60 \"\u662f\u5426\u771f\u7684\u5220\u9664\u8be5\u6587\u4ef6\" \u6216\u5728\u590d\u5236\u6587\u4ef6\u65f6\u63d0\u9192\u4f60 \"\u6587\u4ef6\u5df2\u5b58\u5728, \u662f\u5426\u8986\u76d6\", \u5927\u90e8\u5206\u60c5\u51b5\u4e0b, \u4f60\u53ef\u4ee5\u5c06\u4ed6\u7b49\u4ef7\u4e3a\u4f60\u5728 windows \u7684\u6587\u4ef6\u7cfb\u7edf\u91cc\u6267\u884c\u67d0\u4e00\u64cd\u4f5c, \u5c31\u50cf\u4f60\u5728\u624b\u52a8\u64cd\u4f5c\u4e00\u6837. int SHFileOperation( _Inout_ LPSHFILEOPSTRUCT lpFileOp ); \u5f88\u597d! \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8be5\u8c03\u7528\u54ea\u4e2a\u51fd\u6570\u4e86. \u4f46\u73b0\u5728\u9047\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898, SHFileOperation \u7684\u53c2\u6570 lpFileOp \u65e2\u4e0d\u662f\u6211\u4eec\u719f\u77e5\u7684\u6574\u5f62, \u4e5f\u4e0d\u662f\u5b57\u7b26\u4e32, \u800c\u662f\u4e00\u4e2a\u540d\u4e3a LPSHFILEOPSTRUCT \u7684\u7ed3\u6784\u4f53: typedef struct _SHFILEOPSTRUCT { HWND hwnd; UINT wFunc; PCZZTSTR pFrom; PCZZTSTR pTo; FILEOP_FLAGS fFlags; BOOL fAnyOperationsAborted; LPVOID hNameMappings; PCTSTR lpszProgressTitle; } SHFILEOPSTRUCT, *LPSHFILEOPSTRUCT; \u4e3a\u4e86\u5728 Python \u4e2d\u8c03\u7528\u8be5\u51fd\u6570, \u6211\u4eec\u5fc5\u987b\u5b9e\u73b0 LPSHFILEOPSTRUCT \u5728 Python \u4e2d\u7684\u6620\u5c04. \u5b9a\u4e49\u4e00\u4e2a\u7c7b\u5e76\u7ee7\u627f ctypes.Structure , \u7136\u540e\u4e3a\u5176\u6dfb\u52a0 _fields_ \u5b57\u6bb5, \u5b57\u6bb5\u5185\u90e8\u662f\u6210\u5458\u540d\u4e0e\u7c7b\u578b\u7684\u5143\u7ec4. import ctypes import ctypes.wintypes class LPSHFILEOPSTRUCT(ctypes.Structure): _fields_ = [ ('hwnd', ctypes.wintypes.HWND), ('wFunc', ctypes.wintypes.UINT), ('pFrom', ctypes.wintypes.PCHAR), ('pTo', ctypes.wintypes.PCHAR), ('fFlags', ctypes.wintypes.INT), ('fAnyOperationsAborted', ctypes.wintypes.BOOL), ('hNameMappings', ctypes.wintypes.LPVOID), ('lpszProgressTitle', ctypes.wintypes.PCHAR) ] FO_DELETE = 3 FOF_SILENT = 4 FOF_NOCONFIRMATION = 16 FOF_ALLOWUNDO = 64 FOF_NOCONFIRMMKDIR = 512 FOF_NOERRORUI = 1024 FOF_NO_UI = FOF_SILENT | FOF_NOCONFIRMATION | FOF_NOERRORUI | FOF_NOCONFIRMMKDIR def rm(p): r = ctypes.windll.shell32.SHFileOperation(LPSHFILEOPSTRUCT( hwnd=0, wFunc=FO_DELETE, pFrom=ctypes.create_string_buffer(p.encode()), fFlags=FOF_ALLOWUNDO | FOF_NO_UI )) if r: raise Exception(r) \u5b8c\u6210\u4e86! \u8c03\u7528 rm() \u51fd\u6570\u5373\u53ef\u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9. \u6ce8\u610f\u4e0a\u9762\u7684\u4ee3\u7801, \u6211\u4e3a LPSHFILEOPSTRUCT \u7684 fFlags \u8bbe\u7f6e\u4e86\u51e0\u4e2a\u6807\u7b7e, \u4ee5\u5b9e\u73b0\u9759\u9ed8\u5220\u9664\u6587\u4ef6\u548c\u5220\u9664\u6587\u4ef6\u5939\u81f3\u56de\u6536\u7ad9.","title":"Python windows \u7f16\u7a0b: \u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9"},{"location":"content/py/np/split/","text":"\u9996\u5148\u521d\u59cb\u5316\u4e00\u4e0b\u8fd0\u884c\u73af\u5883. \u5728\u8be5\u4f8b\u7a0b\u4e2d\u4f7f\u7528\u4e00\u5f20 (270, 480, 4) \u7684 RGBA \u56fe\u50cf\u4f5c\u4e3a\u539f\u6570\u636e: import skimage.io import numpy as np im = skimage.io.imread('jp.jpg') print(im.shape) # (270, 480, 4) \u56fe\u50cf\u5206\u5272\u4e0e\u5408\u5e76 # \u7eb5\u5411\u5206\u5272\u4e3a\u76f8\u7b49\u4e24\u4efd r = np.split(im, 2, axis=1) # \u5c06\u4e24\u4efd\u56fe\u50cf\u7eb5\u5411\u5408\u5e76 im = np.concatenate(r, axis=1) # \u6a2a\u5411\u5206\u5272\u4e3a\u76f8\u7b49\u4e24\u4efd r = np.split(im, 2, axis=0) # \u5c06\u4e24\u4efd\u56fe\u50cf\u6a2a\u5411\u5408\u5e76 im = np.concatenate(r, axis=0) # \u7eb5\u5411\u5206\u5272\u4e3a 0-50, 50-430, 430-480 \u4e09\u90e8\u5206 r = np.split(im, [50, 430], axis=1) \u901a\u9053\u5206\u5272\u4e0e\u5408\u5e76 # \u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u76f4\u63a5\u8bbf\u95ee RGBA \u901a\u9053 r = im[:, :, 0] g = im[:, :, 1] b = im[:, :, 2] a = im[:, :, 3] # \u6216\u8005\u4f7f\u7528 split \u51fd\u6570, \u5e76\u8c03\u7528 squeeze \u79fb\u9664\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6 splits = np.split(im, 4, axis=2) r = np.squeeze(splits[0], 2) g = np.squeeze(splits[1], 2) b = np.squeeze(splits[2], 2) a = np.squeeze(splits[3], 2) # \u4f7f\u7528 stack \u91cd\u5efa\u539f\u59cb\u56fe\u50cf im = np.stack((r, g, b, a), axis=2) # \u7f8e\u7f8e\u54d2\u5c55\u793a\u51fa\u6765 import matplotlib.pyplot as plt plt.style.use('seaborn') _, axes = plt.subplots(2, 2) axes[0][0].imshow(im) axes[0][0].axis('off') axes[0][1].imshow(r, cmap='Reds') axes[0][1].axis('off') axes[1][0].imshow(g, cmap='Greens') axes[1][0].axis('off') axes[1][1].imshow(b, cmap='Blues') axes[1][1].axis('off') plt.show()","title":"Split"},{"location":"content/py/np/split/#_1","text":"# \u7eb5\u5411\u5206\u5272\u4e3a\u76f8\u7b49\u4e24\u4efd r = np.split(im, 2, axis=1) # \u5c06\u4e24\u4efd\u56fe\u50cf\u7eb5\u5411\u5408\u5e76 im = np.concatenate(r, axis=1) # \u6a2a\u5411\u5206\u5272\u4e3a\u76f8\u7b49\u4e24\u4efd r = np.split(im, 2, axis=0) # \u5c06\u4e24\u4efd\u56fe\u50cf\u6a2a\u5411\u5408\u5e76 im = np.concatenate(r, axis=0) # \u7eb5\u5411\u5206\u5272\u4e3a 0-50, 50-430, 430-480 \u4e09\u90e8\u5206 r = np.split(im, [50, 430], axis=1)","title":"\u56fe\u50cf\u5206\u5272\u4e0e\u5408\u5e76"},{"location":"content/py/np/split/#_2","text":"# \u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u76f4\u63a5\u8bbf\u95ee RGBA \u901a\u9053 r = im[:, :, 0] g = im[:, :, 1] b = im[:, :, 2] a = im[:, :, 3] # \u6216\u8005\u4f7f\u7528 split \u51fd\u6570, \u5e76\u8c03\u7528 squeeze \u79fb\u9664\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6 splits = np.split(im, 4, axis=2) r = np.squeeze(splits[0], 2) g = np.squeeze(splits[1], 2) b = np.squeeze(splits[2], 2) a = np.squeeze(splits[3], 2) # \u4f7f\u7528 stack \u91cd\u5efa\u539f\u59cb\u56fe\u50cf im = np.stack((r, g, b, a), axis=2) # \u7f8e\u7f8e\u54d2\u5c55\u793a\u51fa\u6765 import matplotlib.pyplot as plt plt.style.use('seaborn') _, axes = plt.subplots(2, 2) axes[0][0].imshow(im) axes[0][0].axis('off') axes[0][1].imshow(r, cmap='Reds') axes[0][1].axis('off') axes[1][0].imshow(g, cmap='Greens') axes[1][0].axis('off') axes[1][1].imshow(b, cmap='Blues') axes[1][1].axis('off') plt.show()","title":"\u901a\u9053\u5206\u5272\u4e0e\u5408\u5e76"},{"location":"content/py/plt/bar/","text":"\u67f1\u72b6\u56fe import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y = np.array([0.5, 0.67, 0.71, 0.56, 0.8]) ax = plt.subplot() ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V']) # \u5728\u67f1\u72b6\u56fe\u4e0a\u6807\u8bb0 y \u8f74\u5927\u5c0f for x, y in zip(X, Y): ax.text(x, y, f'{y:.2}', ha='center', va='bottom') plt.show() \u989c\u8272 axes.bar \u51fd\u6570\u7684 color \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u989c\u8272; color \u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u989c\u8272, \u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u989c\u8272\u6570\u7ec4 ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V'], color=['pink', 'purple']) \u586b\u5145 axes.bar \u51fd\u6570\u7684 hatch \u53c2\u6570\u53ef\u4ee5\u586b\u5145\u6837\u5f0f, \u53ef\u53d6\u503c\u4e3a: / , \\ , | , - , + , x , o , O , . , * ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V'], hatch='/') \u5806\u53e0\u67f1\u72b6\u56fe \u4f7f\u7528 bottom \u53c2\u6570\u5806\u53e0\u67f1\u72b6\u56fe import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y1 = np.array([0.5, 0.67, 0.71, 0.56, 0.8]) Y2 = np.random.random(5) ax = plt.subplot() ax.bar(X, Y1, tick_label=['I', 'II', 'III', 'IV', 'V'], label='Y1') ax.bar(X, Y2, bottom=Y1, label='Y2') plt.legend() plt.show() \u67f1\u72b6\u56fe\u5e76\u5217 \u8bbe\u7f6e\u67f1\u72b6\u56fe\u7684 bar_width \u5b9e\u73b0\u67f1\u72b6\u56fe\u5e76\u5217 import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') bar_width = 0.8 / 2 X1 = np.arange(5) + 1 Y1 = np.random.random(5) X2 = X1 + bar_width Y2 = np.random.random(5) plt.bar(X1, Y1, bar_width) plt.bar(X2, Y2, bar_width) plt.xticks(X1+bar_width / 2, ['I', 'II', 'III', 'IV', 'V']) plt.show() \u6761\u72b6\u56fe \u6761\u72b6\u56fe\u4e0e\u67f1\u72b6\u56fe\u57fa\u672c\u7c7b\u4f3c. import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y = np.random.random(5) ax = plt.subplot() ax.barh(X, Y) ax.set_yticks(X) ax.set_yticklabels(['I', 'II', 'III', 'IV', 'V']) plt.show()","title":"\u67f1\u72b6\u56fe"},{"location":"content/py/plt/bar/#_1","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y = np.array([0.5, 0.67, 0.71, 0.56, 0.8]) ax = plt.subplot() ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V']) # \u5728\u67f1\u72b6\u56fe\u4e0a\u6807\u8bb0 y \u8f74\u5927\u5c0f for x, y in zip(X, Y): ax.text(x, y, f'{y:.2}', ha='center', va='bottom') plt.show()","title":"\u67f1\u72b6\u56fe"},{"location":"content/py/plt/bar/#_2","text":"axes.bar \u51fd\u6570\u7684 color \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u989c\u8272; color \u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u989c\u8272, \u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u989c\u8272\u6570\u7ec4 ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V'], color=['pink', 'purple'])","title":"\u989c\u8272"},{"location":"content/py/plt/bar/#_3","text":"axes.bar \u51fd\u6570\u7684 hatch \u53c2\u6570\u53ef\u4ee5\u586b\u5145\u6837\u5f0f, \u53ef\u53d6\u503c\u4e3a: / , \\ , | , - , + , x , o , O , . , * ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V'], hatch='/')","title":"\u586b\u5145"},{"location":"content/py/plt/bar/#_4","text":"\u4f7f\u7528 bottom \u53c2\u6570\u5806\u53e0\u67f1\u72b6\u56fe import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y1 = np.array([0.5, 0.67, 0.71, 0.56, 0.8]) Y2 = np.random.random(5) ax = plt.subplot() ax.bar(X, Y1, tick_label=['I', 'II', 'III', 'IV', 'V'], label='Y1') ax.bar(X, Y2, bottom=Y1, label='Y2') plt.legend() plt.show()","title":"\u5806\u53e0\u67f1\u72b6\u56fe"},{"location":"content/py/plt/bar/#_5","text":"\u8bbe\u7f6e\u67f1\u72b6\u56fe\u7684 bar_width \u5b9e\u73b0\u67f1\u72b6\u56fe\u5e76\u5217 import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') bar_width = 0.8 / 2 X1 = np.arange(5) + 1 Y1 = np.random.random(5) X2 = X1 + bar_width Y2 = np.random.random(5) plt.bar(X1, Y1, bar_width) plt.bar(X2, Y2, bar_width) plt.xticks(X1+bar_width / 2, ['I', 'II', 'III', 'IV', 'V']) plt.show()","title":"\u67f1\u72b6\u56fe\u5e76\u5217"},{"location":"content/py/plt/bar/#_6","text":"\u6761\u72b6\u56fe\u4e0e\u67f1\u72b6\u56fe\u57fa\u672c\u7c7b\u4f3c. import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y = np.random.random(5) ax = plt.subplot() ax.barh(X, Y) ax.set_yticks(X) ax.set_yticklabels(['I', 'II', 'III', 'IV', 'V']) plt.show()","title":"\u6761\u72b6\u56fe"},{"location":"content/py/plt/line/","text":"\u6298\u7ebf import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) plt.show() \u6298\u7ebf\u6837\u5f0f import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() # \u8bbe\u7f6e\u989c\u8272 color # \u5982\u4e0b\u7684 color \u503c\u662f\u88ab\u652f\u6301\u7684 # ========== ======== # character color # ========== ======== # 'b' blue # 'g' green # 'r' red # 'c' cyan # 'm' magenta # 'y' yellow # 'k' black # 'w' white # ========== ======== # \u53e6\u5916, \u53ef\u4ee5\u4f7f\u7528\u5168\u540d('green'), 16 \u8fdb\u5236('#008000'), RGB \u6216 RGBA \u5143\u7ec4(0,1,0,1) \u6216 # \u7070\u5ea6\u503c(0.8) # \u8bbe\u7f6e\u6837\u5f0f linestyle # ================ =============================== # character description # ================ =============================== # ``'-'`` solid line style # ``'--'`` dashed line style # ``'-.'`` dash-dot line style # ``':'`` dotted line style # ``'.'`` point marker # ``','`` pixel marker # ``'o'`` circle marker # ``'v'`` triangle_down marker # ``'^'`` triangle_up marker # ``'<'`` triangle_left marker # ``'>'`` triangle_right marker # ``'1'`` tri_down marker # ``'2'`` tri_up marker # ``'3'`` tri_left marker # ``'4'`` tri_right marker # ``'s'`` square marker # ``'p'`` pentagon marker # ``'*'`` star marker # ``'h'`` hexagon1 marker # ``'H'`` hexagon2 marker # ``'+'`` plus marker # ``'x'`` x marker # ``'D'`` diamond marker # ``'d'`` thin_diamond marker # ``'|'`` vline marker # ``'_'`` hline marker # \u8bbe\u7f6e\u66f2\u7ebf\u5bbd\u5ea6 linewidth ax.plot(x, np.sin(x), color='pink', linewidth=2, linestyle='--') plt.show() \u5750\u6807\u8303\u56f4 import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u8bbe\u7f6e x \u8f74\u5750\u6807\u5bbd\u5ea6; \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5de6\u53f3\u4f1a\u5404\u4fdd\u7559\u4e00\u5c0f\u6bb5\u7a7a\u767d\u533a\u95f4 ax.set_xlim(x.min(), x.max()) plt.show() \u586b\u5145\u66f2\u7ebf import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi*2, np.pi*2, 256) ax = plt.subplot() # \u53c2\u6570\u4ee5 .plot \u76f8\u4f3c, \u533a\u522b\u662f\u4f1a\u586b\u5145\u66f2\u7ebf\u7684\u9762\u79ef, \u586b\u5145\u5206\u754c\u7ebf\u4e3a y=c(c \u4e3a x = 0 \u65f6\u7684\u6570) # alpha \u4e3a\u900f\u660e\u5ea6 ax.fill(x, np.sin(x), alpha=0.5) # \u5f53\u9700\u8981\u81ea\u5b9a\u4e49\u5206\u754c\u7ebf\u65f6, \u4f7f\u7528 .fill_between \u51fd\u6570 ax.fill_between(x, 0, np.sin(x - np.pi / 4), alpha=0.5) plt.show() \u5750\u6807\u4f4d\u7f6e\u4e0e\u5750\u6807\u6837\u5f0f import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u79fb\u52a8\u5750\u6807\u8f74\u4e0e\u8bbe\u7f6e\u5750\u6807\u8f74\u6837\u5f0f ax.spines['bottom'].set_color('#646882') ax.spines['bottom'].set_linewidth(1) ax.spines['bottom'].set_position(('data', 0)) ax.spines['left'].set_color('#646882') ax.spines['left'].set_linewidth(1) ax.spines['left'].set_position(('data', 0)) plt.show() \u5750\u6807\u523b\u5ea6 import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u624b\u5de5\u6307\u5b9a\u5750\u6807\u8f74\u4e0a\u7684\u523b\u5ea6 ax.set_xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi]) ax.set_yticks([]) plt.show() \u51fd\u6570\u540d\u79f0 import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() # \u4e3a\u66f2\u7ebf\u6dfb\u52a0\u540d\u79f0 ax.plot(x, np.sin(x), label='sin(x)') ax.legend(loc='lower right') plt.show()","title":"\u6298\u7ebf"},{"location":"content/py/plt/line/#_1","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) plt.show()","title":"\u6298\u7ebf"},{"location":"content/py/plt/line/#_2","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() # \u8bbe\u7f6e\u989c\u8272 color # \u5982\u4e0b\u7684 color \u503c\u662f\u88ab\u652f\u6301\u7684 # ========== ======== # character color # ========== ======== # 'b' blue # 'g' green # 'r' red # 'c' cyan # 'm' magenta # 'y' yellow # 'k' black # 'w' white # ========== ======== # \u53e6\u5916, \u53ef\u4ee5\u4f7f\u7528\u5168\u540d('green'), 16 \u8fdb\u5236('#008000'), RGB \u6216 RGBA \u5143\u7ec4(0,1,0,1) \u6216 # \u7070\u5ea6\u503c(0.8) # \u8bbe\u7f6e\u6837\u5f0f linestyle # ================ =============================== # character description # ================ =============================== # ``'-'`` solid line style # ``'--'`` dashed line style # ``'-.'`` dash-dot line style # ``':'`` dotted line style # ``'.'`` point marker # ``','`` pixel marker # ``'o'`` circle marker # ``'v'`` triangle_down marker # ``'^'`` triangle_up marker # ``'<'`` triangle_left marker # ``'>'`` triangle_right marker # ``'1'`` tri_down marker # ``'2'`` tri_up marker # ``'3'`` tri_left marker # ``'4'`` tri_right marker # ``'s'`` square marker # ``'p'`` pentagon marker # ``'*'`` star marker # ``'h'`` hexagon1 marker # ``'H'`` hexagon2 marker # ``'+'`` plus marker # ``'x'`` x marker # ``'D'`` diamond marker # ``'d'`` thin_diamond marker # ``'|'`` vline marker # ``'_'`` hline marker # \u8bbe\u7f6e\u66f2\u7ebf\u5bbd\u5ea6 linewidth ax.plot(x, np.sin(x), color='pink', linewidth=2, linestyle='--') plt.show()","title":"\u6298\u7ebf\u6837\u5f0f"},{"location":"content/py/plt/line/#_3","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u8bbe\u7f6e x \u8f74\u5750\u6807\u5bbd\u5ea6; \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5de6\u53f3\u4f1a\u5404\u4fdd\u7559\u4e00\u5c0f\u6bb5\u7a7a\u767d\u533a\u95f4 ax.set_xlim(x.min(), x.max()) plt.show()","title":"\u5750\u6807\u8303\u56f4"},{"location":"content/py/plt/line/#_4","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi*2, np.pi*2, 256) ax = plt.subplot() # \u53c2\u6570\u4ee5 .plot \u76f8\u4f3c, \u533a\u522b\u662f\u4f1a\u586b\u5145\u66f2\u7ebf\u7684\u9762\u79ef, \u586b\u5145\u5206\u754c\u7ebf\u4e3a y=c(c \u4e3a x = 0 \u65f6\u7684\u6570) # alpha \u4e3a\u900f\u660e\u5ea6 ax.fill(x, np.sin(x), alpha=0.5) # \u5f53\u9700\u8981\u81ea\u5b9a\u4e49\u5206\u754c\u7ebf\u65f6, \u4f7f\u7528 .fill_between \u51fd\u6570 ax.fill_between(x, 0, np.sin(x - np.pi / 4), alpha=0.5) plt.show()","title":"\u586b\u5145\u66f2\u7ebf"},{"location":"content/py/plt/line/#_5","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u79fb\u52a8\u5750\u6807\u8f74\u4e0e\u8bbe\u7f6e\u5750\u6807\u8f74\u6837\u5f0f ax.spines['bottom'].set_color('#646882') ax.spines['bottom'].set_linewidth(1) ax.spines['bottom'].set_position(('data', 0)) ax.spines['left'].set_color('#646882') ax.spines['left'].set_linewidth(1) ax.spines['left'].set_position(('data', 0)) plt.show()","title":"\u5750\u6807\u4f4d\u7f6e\u4e0e\u5750\u6807\u6837\u5f0f"},{"location":"content/py/plt/line/#_6","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u624b\u5de5\u6307\u5b9a\u5750\u6807\u8f74\u4e0a\u7684\u523b\u5ea6 ax.set_xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi]) ax.set_yticks([]) plt.show()","title":"\u5750\u6807\u523b\u5ea6"},{"location":"content/py/plt/line/#_7","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() # \u4e3a\u66f2\u7ebf\u6dfb\u52a0\u540d\u79f0 ax.plot(x, np.sin(x), label='sin(x)') ax.legend(loc='lower right') plt.show()","title":"\u51fd\u6570\u540d\u79f0"},{"location":"content/py/plt/pie/","text":"\u997c\u56fe import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' ax = plt.subplot() ax.pie(X, labels=labels, autopct='%1.1f%%', startangle=90) plt.show() \u6b63\u5706 import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' ax = plt.subplot() ax.pie(X, labels=labels, autopct='%1.1f%%', startangle=90) # \u8bbe\u7f6e x \u8f74\u4e0e y \u8f74\u76f8\u7b49 ax.axis('equal') plt.show() \u5f3a\u8c03 import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' explode = [0, 0.1, 0, 0] ax = plt.subplot() # explode \u53c2\u6570\u53ef\u4ee5\u5f3a\u8c03\u6570\u636e ax.pie(X, explode=explode, labels=labels, autopct='%1.1f%%', startangle=90) ax.axis('equal') plt.show()","title":"\u997c\u56fe"},{"location":"content/py/plt/pie/#_1","text":"import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' ax = plt.subplot() ax.pie(X, labels=labels, autopct='%1.1f%%', startangle=90) plt.show()","title":"\u997c\u56fe"},{"location":"content/py/plt/pie/#_2","text":"import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' ax = plt.subplot() ax.pie(X, labels=labels, autopct='%1.1f%%', startangle=90) # \u8bbe\u7f6e x \u8f74\u4e0e y \u8f74\u76f8\u7b49 ax.axis('equal') plt.show()","title":"\u6b63\u5706"},{"location":"content/py/plt/pie/#_3","text":"import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' explode = [0, 0.1, 0, 0] ax = plt.subplot() # explode \u53c2\u6570\u53ef\u4ee5\u5f3a\u8c03\u6570\u636e ax.pie(X, explode=explode, labels=labels, autopct='%1.1f%%', startangle=90) ax.axis('equal') plt.show()","title":"\u5f3a\u8c03"},{"location":"content/py/plt/scatter/","text":"\u6563\u70b9\u56fe import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') ax = plt.subplot() x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) # s: \u6563\u70b9\u5927\u5c0f, \u9ed8\u8ba4 20 # c: \u989c\u8272 # alpha: \u900f\u660e\u5ea6 ax.scatter(x, y, s=50, c='#FF0000', alpha=0.5) plt.show() \u6837\u5f0f import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') ax = plt.subplot() x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) # marker: \u6563\u70b9\u6837\u5f0f. \u5168\u90e8\u53ef\u652f\u6301\u6563\u70b9\u6837\u5f0f\u89c1 matplotlib.markers \u6a21\u5757 ax.scatter(x, y, s=50, c='#FF0000', marker='+', alpha=0.5) plt.show() \u4e09\u7ef4\u5750\u6807 import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D import numpy as np plt.style.use('seaborn') ax = plt.subplot(projection='3d') x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) z = np.linspace(-np.pi, np.pi, 16) ax.scatter(x, y, z, s=50, c='#FF0000', alpha=0.5) ax.set_zlabel('Z') ax.set_ylabel('Y') ax.set_xlabel('X') plt.show()","title":"\u6563\u70b9\u56fe"},{"location":"content/py/plt/scatter/#_1","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') ax = plt.subplot() x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) # s: \u6563\u70b9\u5927\u5c0f, \u9ed8\u8ba4 20 # c: \u989c\u8272 # alpha: \u900f\u660e\u5ea6 ax.scatter(x, y, s=50, c='#FF0000', alpha=0.5) plt.show()","title":"\u6563\u70b9\u56fe"},{"location":"content/py/plt/scatter/#_2","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') ax = plt.subplot() x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) # marker: \u6563\u70b9\u6837\u5f0f. \u5168\u90e8\u53ef\u652f\u6301\u6563\u70b9\u6837\u5f0f\u89c1 matplotlib.markers \u6a21\u5757 ax.scatter(x, y, s=50, c='#FF0000', marker='+', alpha=0.5) plt.show()","title":"\u6837\u5f0f"},{"location":"content/py/plt/scatter/#_3","text":"import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D import numpy as np plt.style.use('seaborn') ax = plt.subplot(projection='3d') x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) z = np.linspace(-np.pi, np.pi, 16) ax.scatter(x, y, z, s=50, c='#FF0000', alpha=0.5) ax.set_zlabel('Z') ax.set_ylabel('Y') ax.set_xlabel('X') plt.show()","title":"\u4e09\u7ef4\u5750\u6807"},{"location":"content/py/pywasm/leb128/","text":"LEB128 LEB128(Little Endian Base 128)\u662f\u4e00\u79cd\u53d8\u957f\u4ee3\u7801\u538b\u7f29\u5f62\u5f0f, \u7528\u4e8e\u5728\u5c11\u91cf\u5b57\u8282\u4e2d\u5b58\u50a8\u4efb\u610f\u5927\u6574\u6570. LEB128 \u76ee\u524d\u88ab\u5e94\u7528\u5728 DWARF \u8c03\u8bd5\u6587\u4ef6\u683c\u5f0f\u548c WebAssembly \u4e8c\u8fdb\u5236\u7f16\u7801\u4e2d. LEB128 \u6709 2 \u4e2a\u4e0d\u540c\u7684\u7248\u672c: \u65e0\u7b26\u53f7\u7684 LEB128 \u548c\u6709\u7b26\u53f7\u7684 LEB128. \u89e3\u7801\u5668\u5fc5\u987b\u63d0\u524d\u77e5\u9053\u7f16\u7801\u503c\u662f\u65e0\u7b26\u53f7 LEB128 \u8fd8\u662f\u6709\u7b26\u53f7 LEB128. \u65e0\u7b26\u53f7 LEB128 \u8981\u4f7f\u7528\u65e0\u7b26\u53f7\u7684 LEB128 \u7f16\u7801\u65e0\u7b26\u53f7\u7684\u6570\u5b57, \u9996\u5148\u8981\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u6570\u5b57, \u7136\u540e zero extend \u6269\u5c55\u5230 7 \u4f4d\u7684\u500d\u6570(\u8fd9\u6837, \u5982\u679c\u8be5\u6570\u5b57\u4e0d\u4e3a\u96f6, \u5219\u6700\u9ad8 7 \u4f4d\u5e76\u4e0d\u5168\u4e3a 0). \u7136\u540e\u5c06\u6570\u5b57\u6309 7 \u4f4d\u5212\u5206, \u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5230\u6700\u9ad8\u6709\u6548\u4f4d\u5f00\u59cb, \u6bcf 7 \u4f4d\u6570\u7ec4\u8f93\u51fa\u4e00\u4e2a\u7f16\u7801\u5b57\u8282. \u9664\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5916, \u5728\u6bcf\u4e2a\u5b57\u8282\u4e0a\u8bbe\u7f6e\u6700\u9ad8\u6709\u6548\u4f4d. \u6570\u5b57\u96f6\u88ab\u7f16\u7801\u4e3a\u5355\u4e2a\u5b57\u8282 0x00. \u4f8b\u5982, \u4ee5\u4e0b\u662f\u65e0\u7b26\u53f7\u6570\u5b57 624485 \u7684\u7f16\u7801\u65b9\u5f0f: MSB ------------------ LSB 10011000011101100101 In raw binary 010011000011101100101 Padded to a multiple of 7 bits 0100110 0001110 1100101 Split into 7-bit groups 00100110 10001110 11100101 Add high 1 bits on all but last (most significant) group to form bytes 0x26 0x8E 0xE5 In hexadecimal > 0xE5 0x8E 0x26 Output stream (LSB to MSB) \u6709\u7b26\u53f7 LEB128 \u6709\u7b26\u53f7 LEB128 \u7f16\u7801\u4e0e\u65e0\u7b26\u53f7 LEB128 \u7f16\u7801\u8fc7\u7a0b\u7c7b\u4f3c, \u533a\u522b\u5728\u4e8e\u5728 zero extend \u540e, \u9700\u8981\u5bf9\u8f93\u51fa\u505a\u4e00\u6b21\u8865\u7801\u8fd0\u7b97. \u4f8b\u5982, -123456 \u5c06\u88ab\u7f16\u7801\u4e3a 0xC0 0xBB 0x78: MSB ------------------ LSB 11110001001000000 Binary encoding of 123456 000011110001001000000 As a 21-bit number 111100001110110111111 Negating all bits (one\u2019s complement) 111100001110111000000 Adding one (two\u2019s complement) 1111000 0111011 1000000 Split into 7-bit groups 01111000 10111011 11000000 Add high 1 bits on all but last (most significant) group to form bytes 0x78 0xBB 0xC0 In hexadecimal > 0xC0 0xBB 0x78 Output stream (LSB to MSB) \u6d4b\u8bd5\u7528\u4f8b \u65e0\u7b26\u53f7 LEB128 Number Bytes 0 0x00 624485 0xe5, 0x8e, 0x26 \u6709\u7b26\u53f7 LEB128 Number Bytes 0 0x00 624485 0xe5, 0x8e, 0x26 -123456 0xc0, 0xbb, 0x78 \u53c2\u8003 [1] \u7ef4\u57fa: LEB128 https://en.wikipedia.org/wiki/LEB128","title":"LEB128"},{"location":"content/py/pywasm/leb128/#leb128","text":"LEB128(Little Endian Base 128)\u662f\u4e00\u79cd\u53d8\u957f\u4ee3\u7801\u538b\u7f29\u5f62\u5f0f, \u7528\u4e8e\u5728\u5c11\u91cf\u5b57\u8282\u4e2d\u5b58\u50a8\u4efb\u610f\u5927\u6574\u6570. LEB128 \u76ee\u524d\u88ab\u5e94\u7528\u5728 DWARF \u8c03\u8bd5\u6587\u4ef6\u683c\u5f0f\u548c WebAssembly \u4e8c\u8fdb\u5236\u7f16\u7801\u4e2d. LEB128 \u6709 2 \u4e2a\u4e0d\u540c\u7684\u7248\u672c: \u65e0\u7b26\u53f7\u7684 LEB128 \u548c\u6709\u7b26\u53f7\u7684 LEB128. \u89e3\u7801\u5668\u5fc5\u987b\u63d0\u524d\u77e5\u9053\u7f16\u7801\u503c\u662f\u65e0\u7b26\u53f7 LEB128 \u8fd8\u662f\u6709\u7b26\u53f7 LEB128.","title":"LEB128"},{"location":"content/py/pywasm/leb128/#leb128_1","text":"\u8981\u4f7f\u7528\u65e0\u7b26\u53f7\u7684 LEB128 \u7f16\u7801\u65e0\u7b26\u53f7\u7684\u6570\u5b57, \u9996\u5148\u8981\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u6570\u5b57, \u7136\u540e zero extend \u6269\u5c55\u5230 7 \u4f4d\u7684\u500d\u6570(\u8fd9\u6837, \u5982\u679c\u8be5\u6570\u5b57\u4e0d\u4e3a\u96f6, \u5219\u6700\u9ad8 7 \u4f4d\u5e76\u4e0d\u5168\u4e3a 0). \u7136\u540e\u5c06\u6570\u5b57\u6309 7 \u4f4d\u5212\u5206, \u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5230\u6700\u9ad8\u6709\u6548\u4f4d\u5f00\u59cb, \u6bcf 7 \u4f4d\u6570\u7ec4\u8f93\u51fa\u4e00\u4e2a\u7f16\u7801\u5b57\u8282. \u9664\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5916, \u5728\u6bcf\u4e2a\u5b57\u8282\u4e0a\u8bbe\u7f6e\u6700\u9ad8\u6709\u6548\u4f4d. \u6570\u5b57\u96f6\u88ab\u7f16\u7801\u4e3a\u5355\u4e2a\u5b57\u8282 0x00. \u4f8b\u5982, \u4ee5\u4e0b\u662f\u65e0\u7b26\u53f7\u6570\u5b57 624485 \u7684\u7f16\u7801\u65b9\u5f0f: MSB ------------------ LSB 10011000011101100101 In raw binary 010011000011101100101 Padded to a multiple of 7 bits 0100110 0001110 1100101 Split into 7-bit groups 00100110 10001110 11100101 Add high 1 bits on all but last (most significant) group to form bytes 0x26 0x8E 0xE5 In hexadecimal > 0xE5 0x8E 0x26 Output stream (LSB to MSB)","title":"\u65e0\u7b26\u53f7 LEB128"},{"location":"content/py/pywasm/leb128/#leb128_2","text":"\u6709\u7b26\u53f7 LEB128 \u7f16\u7801\u4e0e\u65e0\u7b26\u53f7 LEB128 \u7f16\u7801\u8fc7\u7a0b\u7c7b\u4f3c, \u533a\u522b\u5728\u4e8e\u5728 zero extend \u540e, \u9700\u8981\u5bf9\u8f93\u51fa\u505a\u4e00\u6b21\u8865\u7801\u8fd0\u7b97. \u4f8b\u5982, -123456 \u5c06\u88ab\u7f16\u7801\u4e3a 0xC0 0xBB 0x78: MSB ------------------ LSB 11110001001000000 Binary encoding of 123456 000011110001001000000 As a 21-bit number 111100001110110111111 Negating all bits (one\u2019s complement) 111100001110111000000 Adding one (two\u2019s complement) 1111000 0111011 1000000 Split into 7-bit groups 01111000 10111011 11000000 Add high 1 bits on all but last (most significant) group to form bytes 0x78 0xBB 0xC0 In hexadecimal > 0xC0 0xBB 0x78 Output stream (LSB to MSB)","title":"\u6709\u7b26\u53f7 LEB128"},{"location":"content/py/pywasm/leb128/#_1","text":"\u65e0\u7b26\u53f7 LEB128 Number Bytes 0 0x00 624485 0xe5, 0x8e, 0x26 \u6709\u7b26\u53f7 LEB128 Number Bytes 0 0x00 624485 0xe5, 0x8e, 0x26 -123456 0xc0, 0xbb, 0x78","title":"\u6d4b\u8bd5\u7528\u4f8b"},{"location":"content/py/pywasm/leb128/#_2","text":"[1] \u7ef4\u57fa: LEB128 https://en.wikipedia.org/wiki/LEB128","title":"\u53c2\u8003"},{"location":"content/py/pywasm/overview/","text":"Pywasm: Python \u7231\u4e0a Wasm, \u7f8e\u5473\u5c1d\u9c9c! pywasm \u662f\u4e00\u4e2a\u4f7f\u7528\u7eaf Python \u5b9e\u73b0\u7684 WebAssembly \u89e3\u91ca\u5668. \u60a8\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6765\u5b89\u88c5\u5b83: $ pip3 install pywasm WebAssembly WebAssembly/wasm \u662f\u4e00\u4e2a\u53ef\u79fb\u690d, \u4f53\u79ef\u5c0f, \u52a0\u8f7d\u5feb\u5e76\u4e14\u517c\u5bb9 Web \u7684\u5168\u65b0\u683c\u5f0f. WebAssembly \u662f\u7531\u4e3b\u6d41\u6d4f\u89c8\u5668\u5382\u5546\u7ec4\u6210\u7684 W3C \u793e\u533a\u56e2\u4f53 \u5236\u5b9a\u7684\u4e00\u4e2a\u65b0\u7684\u89c4\u8303. \u9ad8\u6548: WebAssembly \u6709\u4e00\u5957\u5b8c\u6574\u7684\u8bed\u4e49, \u5b9e\u9645\u4e0a wasm \u662f\u4f53\u79ef\u5c0f\u4e14\u52a0\u8f7d\u5feb\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f, \u5176\u76ee\u6807\u5c31\u662f\u5145\u5206\u53d1\u6325\u786c\u4ef6\u80fd\u529b\u4ee5\u8fbe\u5230\u539f\u751f\u6267\u884c\u6548\u7387 \u5b89\u5168: WebAssembly \u8fd0\u884c\u5728\u4e00\u4e2a\u6c99\u7bb1\u5316\u7684\u6267\u884c\u73af\u5883\u4e2d, \u751a\u81f3\u53ef\u4ee5\u5728\u73b0\u6709\u7684 JavaScript \u865a\u62df\u673a\u4e2d\u5b9e\u73b0. \u5728 web \u73af\u5883\u4e2d, WebAssembly \u5c06\u4f1a\u4e25\u683c\u9075\u5b88\u540c\u6e90\u7b56\u7565\u4ee5\u53ca\u6d4f\u89c8\u5668\u5b89\u5168\u7b56\u7565. \u5f00\u653e: WebAssembly \u8bbe\u8ba1\u4e86\u4e00\u4e2a\u975e\u5e38\u89c4\u6574\u7684\u6587\u672c\u683c\u5f0f\u7528\u6765, \u8c03\u8bd5, \u6d4b\u8bd5, \u5b9e\u9a8c, \u4f18\u5316, \u5b66\u4e60, \u6559\u5b66\u6216\u8005\u7f16\u5199\u7a0b\u5e8f. \u53ef\u4ee5\u4ee5\u8fd9\u79cd\u6587\u672c\u683c\u5f0f\u5728web\u9875\u9762\u4e0a\u67e5\u770bwasm\u6a21\u5757\u7684\u6e90\u7801. \u6807\u51c6: WebAssembly \u5728 web \u4e2d\u88ab\u8bbe\u8ba1\u6210\u65e0\u7248\u672c, \u7279\u6027\u53ef\u6d4b\u8bd5, \u5411\u540e\u517c\u5bb9\u7684. WebAssembly \u53ef\u4ee5\u88ab JavaScript \u8c03\u7528, \u8fdb\u5165 JavaScript \u4e0a\u4e0b\u6587, \u4e5f\u53ef\u4ee5\u50cf Web API \u4e00\u6837\u8c03\u7528\u6d4f\u89c8\u5668\u7684\u529f\u80fd. \u5f53\u7136, WebAssembly \u4e0d\u4ec5\u53ef\u4ee5\u8fd0\u884c\u5728\u6d4f\u89c8\u5668\u4e0a, \u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u975eweb\u73af\u5883\u4e0b. AssemblyScript: \u4e3a wasm \u53d1\u660e\u7684\u7f16\u7a0b\u8bed\u8a00 \u76ee\u524d\u4e3a\u6b62, \u8bb8\u591a\u9ad8\u7ea7\u8bed\u8a00\u90fd\u80fd\u7f16\u8bd1\u5230 wasm. \u5176\u4e2d\u6700\u6210\u719f\u7684\u662f C \u8bed\u8a00: \u6bd5\u7adf\u5728\u8bbe\u8ba1\u5f00\u53d1\u8fc7\u7a0b\u4e2d C \u5c31\u662f wasm \u7684\u7b2c\u4e00\u76ee\u6807. \u4f46\u662f C \u6bd5\u7adf\u5bf9\u5927\u4f17\u4e0d\u592a\u53cb\u597d, \u56e0\u6b64\u5728 C \u4e4b\u4e0a\u4e00\u95e8\u65b0\u7684\u8bed\u8a00\u51fa\u73b0\u4e86, \u5b83\u5c31\u662f AssemblyScript, \u4e00\u95e8\u5bf9 TypeScript \u505a\u4e86\u51cf\u6cd5\u7684\u7f16\u7a0b\u8bed\u8a00. \u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u76ee\u5f55, \u8fdb\u5165\u8be5\u76ee\u5f55 $ npm install --save-dev assemblyscript $ npx asinit . asinit \u547d\u4ee4\u81ea\u52a8\u521b\u5efa\u5efa\u8bae\u7684\u76ee\u5f55\u7ed3\u6784\u548c\u914d\u7f6e\u6587\u4ef6, \u5305\u62ec: \u5305\u542b\u8981\u7f16\u8bd1\u4e3a WebAssembly \u6e90\u4ee3\u7801\u7684 ./assembly \u76ee\u5f55(\u4e00\u4e2a index.ts \u548c tsconfig.json) ./build \u76ee\u5f55, \u7528\u4e8e\u653e\u7f6e\u5df2\u7f16\u8bd1\u7684 WebAssembly \u4e8c\u8fdb\u5236\u6587\u4ef6 \u7136\u540e, \u6253\u5f00 ./assembly/index.ts, \u5176\u6e90\u4ee3\u7801\u662f\u4e00\u4e2a\u793a\u4f8b\u7684\u52a0\u6cd5\u51fd\u6570, \u5982\u4e0b export function add(a: i32, b: i32): i32 { return a + b; } $ npm run asbuild \u8fd0\u884c\u5982\u4e0a\u547d\u4ee4\u5c06\u7a0b\u5e8f\u7f16\u8bd1\u4e3a WebAssembly. \u4f7f\u7528\u6839\u76ee\u5f55\u4e2d\u7684 index.js \u5b9e\u4f8b\u5316\u548c\u5bfc\u51fa WebAssembly \u6a21\u5757, \u60a8\u5c06\u53ef\u4ee5\u50cf\u4efb\u4f55\u5176\u5b83\u6a21\u5757\u4e00\u6837\u4f7f\u7528\u5b83, \u5176\u663e\u7740\u533a\u522b\u5728\u4e8e, \u6a21\u5757\u5bfc\u51fa\u7684\u552f\u4e00\u503c\u662f\u6574\u6570\u548c\u6d6e\u70b9\u6570. \u5230\u76ee\u524d\u4e3a\u6b62, \u4e00\u5207\u90fd\u5f88\u597d... Run on pywasm $ vim index.py \u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u5230 index.py \u4e2d, \u4ee3\u7801\u4e2d\u505a\u4e86\u4e24\u4ef6\u4e8b: \u8f7d\u5165 wasm \u4e8c\u8fdb\u5236\u6587\u4ef6, \u5e76\u8c03\u7528\u51fd\u6570 add(10, 20) . import pywasm def env_abort(_: pywasm.Ctx): return vm = pywasm.load('./build/optimized.wasm', { 'env': { 'abort': env_abort, } }) r = vm.exec('add', [10, 20]) print(r) $ python3 index.py # 30 Bingo! \u53e6\u5916, \u672c\u6587\u4ee3\u7801\u5df2\u53d1\u5e03\u81f3 github, \u60a8\u53ef\u4ee5\u76f4\u63a5\u514b\u9686\u4ee3\u7801\u5230\u672c\u5730, \u5982\u6b64, \u5c31\u4e0d\u7528\u81ea\u5df1\u6572\u4ee3\u7801\u5566! $ git clone https://github.com/mohanson/pywasm_assemblyscript","title":"Pywasm: Python \u7231\u4e0a Wasm, \u7f8e\u5473\u5c1d\u9c9c!"},{"location":"content/py/pywasm/overview/#pywasm-python-wasm","text":"pywasm \u662f\u4e00\u4e2a\u4f7f\u7528\u7eaf Python \u5b9e\u73b0\u7684 WebAssembly \u89e3\u91ca\u5668. \u60a8\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6765\u5b89\u88c5\u5b83: $ pip3 install pywasm","title":"Pywasm: Python \u7231\u4e0a Wasm, \u7f8e\u5473\u5c1d\u9c9c!"},{"location":"content/py/pywasm/overview/#webassembly","text":"WebAssembly/wasm \u662f\u4e00\u4e2a\u53ef\u79fb\u690d, \u4f53\u79ef\u5c0f, \u52a0\u8f7d\u5feb\u5e76\u4e14\u517c\u5bb9 Web \u7684\u5168\u65b0\u683c\u5f0f. WebAssembly \u662f\u7531\u4e3b\u6d41\u6d4f\u89c8\u5668\u5382\u5546\u7ec4\u6210\u7684 W3C \u793e\u533a\u56e2\u4f53 \u5236\u5b9a\u7684\u4e00\u4e2a\u65b0\u7684\u89c4\u8303. \u9ad8\u6548: WebAssembly \u6709\u4e00\u5957\u5b8c\u6574\u7684\u8bed\u4e49, \u5b9e\u9645\u4e0a wasm \u662f\u4f53\u79ef\u5c0f\u4e14\u52a0\u8f7d\u5feb\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f, \u5176\u76ee\u6807\u5c31\u662f\u5145\u5206\u53d1\u6325\u786c\u4ef6\u80fd\u529b\u4ee5\u8fbe\u5230\u539f\u751f\u6267\u884c\u6548\u7387 \u5b89\u5168: WebAssembly \u8fd0\u884c\u5728\u4e00\u4e2a\u6c99\u7bb1\u5316\u7684\u6267\u884c\u73af\u5883\u4e2d, \u751a\u81f3\u53ef\u4ee5\u5728\u73b0\u6709\u7684 JavaScript \u865a\u62df\u673a\u4e2d\u5b9e\u73b0. \u5728 web \u73af\u5883\u4e2d, WebAssembly \u5c06\u4f1a\u4e25\u683c\u9075\u5b88\u540c\u6e90\u7b56\u7565\u4ee5\u53ca\u6d4f\u89c8\u5668\u5b89\u5168\u7b56\u7565. \u5f00\u653e: WebAssembly \u8bbe\u8ba1\u4e86\u4e00\u4e2a\u975e\u5e38\u89c4\u6574\u7684\u6587\u672c\u683c\u5f0f\u7528\u6765, \u8c03\u8bd5, \u6d4b\u8bd5, \u5b9e\u9a8c, \u4f18\u5316, \u5b66\u4e60, \u6559\u5b66\u6216\u8005\u7f16\u5199\u7a0b\u5e8f. \u53ef\u4ee5\u4ee5\u8fd9\u79cd\u6587\u672c\u683c\u5f0f\u5728web\u9875\u9762\u4e0a\u67e5\u770bwasm\u6a21\u5757\u7684\u6e90\u7801. \u6807\u51c6: WebAssembly \u5728 web \u4e2d\u88ab\u8bbe\u8ba1\u6210\u65e0\u7248\u672c, \u7279\u6027\u53ef\u6d4b\u8bd5, \u5411\u540e\u517c\u5bb9\u7684. WebAssembly \u53ef\u4ee5\u88ab JavaScript \u8c03\u7528, \u8fdb\u5165 JavaScript \u4e0a\u4e0b\u6587, \u4e5f\u53ef\u4ee5\u50cf Web API \u4e00\u6837\u8c03\u7528\u6d4f\u89c8\u5668\u7684\u529f\u80fd. \u5f53\u7136, WebAssembly \u4e0d\u4ec5\u53ef\u4ee5\u8fd0\u884c\u5728\u6d4f\u89c8\u5668\u4e0a, \u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u975eweb\u73af\u5883\u4e0b.","title":"WebAssembly"},{"location":"content/py/pywasm/overview/#assemblyscript-wasm","text":"\u76ee\u524d\u4e3a\u6b62, \u8bb8\u591a\u9ad8\u7ea7\u8bed\u8a00\u90fd\u80fd\u7f16\u8bd1\u5230 wasm. \u5176\u4e2d\u6700\u6210\u719f\u7684\u662f C \u8bed\u8a00: \u6bd5\u7adf\u5728\u8bbe\u8ba1\u5f00\u53d1\u8fc7\u7a0b\u4e2d C \u5c31\u662f wasm \u7684\u7b2c\u4e00\u76ee\u6807. \u4f46\u662f C \u6bd5\u7adf\u5bf9\u5927\u4f17\u4e0d\u592a\u53cb\u597d, \u56e0\u6b64\u5728 C \u4e4b\u4e0a\u4e00\u95e8\u65b0\u7684\u8bed\u8a00\u51fa\u73b0\u4e86, \u5b83\u5c31\u662f AssemblyScript, \u4e00\u95e8\u5bf9 TypeScript \u505a\u4e86\u51cf\u6cd5\u7684\u7f16\u7a0b\u8bed\u8a00. \u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u76ee\u5f55, \u8fdb\u5165\u8be5\u76ee\u5f55 $ npm install --save-dev assemblyscript $ npx asinit . asinit \u547d\u4ee4\u81ea\u52a8\u521b\u5efa\u5efa\u8bae\u7684\u76ee\u5f55\u7ed3\u6784\u548c\u914d\u7f6e\u6587\u4ef6, \u5305\u62ec: \u5305\u542b\u8981\u7f16\u8bd1\u4e3a WebAssembly \u6e90\u4ee3\u7801\u7684 ./assembly \u76ee\u5f55(\u4e00\u4e2a index.ts \u548c tsconfig.json) ./build \u76ee\u5f55, \u7528\u4e8e\u653e\u7f6e\u5df2\u7f16\u8bd1\u7684 WebAssembly \u4e8c\u8fdb\u5236\u6587\u4ef6 \u7136\u540e, \u6253\u5f00 ./assembly/index.ts, \u5176\u6e90\u4ee3\u7801\u662f\u4e00\u4e2a\u793a\u4f8b\u7684\u52a0\u6cd5\u51fd\u6570, \u5982\u4e0b export function add(a: i32, b: i32): i32 { return a + b; } $ npm run asbuild \u8fd0\u884c\u5982\u4e0a\u547d\u4ee4\u5c06\u7a0b\u5e8f\u7f16\u8bd1\u4e3a WebAssembly. \u4f7f\u7528\u6839\u76ee\u5f55\u4e2d\u7684 index.js \u5b9e\u4f8b\u5316\u548c\u5bfc\u51fa WebAssembly \u6a21\u5757, \u60a8\u5c06\u53ef\u4ee5\u50cf\u4efb\u4f55\u5176\u5b83\u6a21\u5757\u4e00\u6837\u4f7f\u7528\u5b83, \u5176\u663e\u7740\u533a\u522b\u5728\u4e8e, \u6a21\u5757\u5bfc\u51fa\u7684\u552f\u4e00\u503c\u662f\u6574\u6570\u548c\u6d6e\u70b9\u6570. \u5230\u76ee\u524d\u4e3a\u6b62, \u4e00\u5207\u90fd\u5f88\u597d...","title":"AssemblyScript: \u4e3a wasm \u53d1\u660e\u7684\u7f16\u7a0b\u8bed\u8a00"},{"location":"content/py/pywasm/overview/#run-on-pywasm","text":"$ vim index.py \u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u5230 index.py \u4e2d, \u4ee3\u7801\u4e2d\u505a\u4e86\u4e24\u4ef6\u4e8b: \u8f7d\u5165 wasm \u4e8c\u8fdb\u5236\u6587\u4ef6, \u5e76\u8c03\u7528\u51fd\u6570 add(10, 20) . import pywasm def env_abort(_: pywasm.Ctx): return vm = pywasm.load('./build/optimized.wasm', { 'env': { 'abort': env_abort, } }) r = vm.exec('add', [10, 20]) print(r) $ python3 index.py # 30 Bingo! \u53e6\u5916, \u672c\u6587\u4ee3\u7801\u5df2\u53d1\u5e03\u81f3 github, \u60a8\u53ef\u4ee5\u76f4\u63a5\u514b\u9686\u4ee3\u7801\u5230\u672c\u5730, \u5982\u6b64, \u5c31\u4e0d\u7528\u81ea\u5df1\u6572\u4ee3\u7801\u5566! $ git clone https://github.com/mohanson/pywasm_assemblyscript","title":"Run on pywasm"}]}