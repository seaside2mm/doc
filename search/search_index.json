{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5173\u4e8e\u4f5c\u8005 Mohanson \u53ea\u662f\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u4eba. \u8054\u7cfb\u65b9\u5f0f mail: mohanson@outlook.com. \u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898, \u8bf7\u8054\u7cfb\u6211, \u6211\u4f1a\u5c3d\u53ef\u80fd\u56de\u590d. \u5c0f\u989d\u8d5e\u52a9 \u8bb8\u53ef\u534f\u8bae CC BY-NC-SA (\u7f72\u540d-\u76f8\u540c\u65b9\u5f0f\u5171\u4eab-\u975e\u5546\u4e1a\u6027\u4f7f\u7528). \u5c3e\u5df4 \u6d59ICP\u590717002200\u53f7","title":"\u4e3b\u9875"},{"location":"#_1","text":"Mohanson \u53ea\u662f\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u4eba.","title":"\u5173\u4e8e\u4f5c\u8005"},{"location":"#_2","text":"mail: mohanson@outlook.com. \u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898, \u8bf7\u8054\u7cfb\u6211, \u6211\u4f1a\u5c3d\u53ef\u80fd\u56de\u590d.","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"#_3","text":"","title":"\u5c0f\u989d\u8d5e\u52a9"},{"location":"#_4","text":"CC BY-NC-SA (\u7f72\u540d-\u76f8\u540c\u65b9\u5f0f\u5171\u4eab-\u975e\u5546\u4e1a\u6027\u4f7f\u7528).","title":"\u8bb8\u53ef\u534f\u8bae"},{"location":"#_5","text":"\u6d59ICP\u590717002200\u53f7","title":"\u5c3e\u5df4"},{"location":"content/ahk/clicker/","text":"\u9f20\u6807\u8fde\u70b9\u5668 \u5173\u4e8e ahk \u8bed\u6cd5\u5c42\u9762\u5176\u5b9e\u5e76\u6ca1\u6709\u4ec0\u4e48\u597d\u5199\u7684, \u8fd9\u91cc\u76f4\u63a5\u4f7f\u7528\u51e0\u4e2a\u4f8b\u5b50\u6765\u6f14\u793a ahk \u7684\u529f\u80fd. \u4e0b\u9762\u811a\u672c\u7684\u529f\u80fd\u662f\u5f53\u6309\u4e0b F1 \u65f6\u9f20\u6807\u5de6\u952e\u8fde\u70b9, \u677e\u5f00 F1 \u65f6\u505c\u6b62\u8fde\u70b9. $F1:: ; \u628a F1 \u952e\u8bbe\u7f6e\u4e3a\u70ed\u952e ($ \u7b26\u53f7\u4f1a\u6709\u52a9\u4e8e\u4e0b\u9762 GetKeyState \u7684 \"P\" \u6a21\u5f0f). Loop ; \u7531\u4e8e\u6ca1\u6709\u6307\u5b9a\u6570\u5b57, \u6240\u4ee5\u8fd9\u662f\u4e2a\u65e0\u9650\u5faa\u73af, \u76f4\u5230\u9047\u5230\u5185\u90e8\u7684 \"break\" \u6216 \"return\". { if not GetKeyState(\"F1\", \"P\") ; \u5982\u679c\u6b64\u72b6\u6001\u4e3a true, \u90a3\u4e48\u7528\u6237\u5b9e\u9645\u5df2\u7ecf\u91ca\u653e\u4e86 F1 \u952e. break ; \u4e2d\u65ad\u5faa\u73af. ; \u5426\u5219 (\u7531\u4e8e\u4e0a\u9762\u6ca1\u6709 \"\u4e2d\u65ad\"), \u7ee7\u7eed\u70b9\u51fb\u9f20\u6807. Click ; \u5728\u5f53\u524d\u6307\u9488\u4f4d\u7f6e\u70b9\u51fb\u9f20\u6807\u5de6\u952e. } return","title":"AHK-\u5b9e\u73b0\u9f20\u6807\u8fde\u70b9\u5668"},{"location":"content/ahk/clicker/#_1","text":"\u5173\u4e8e ahk \u8bed\u6cd5\u5c42\u9762\u5176\u5b9e\u5e76\u6ca1\u6709\u4ec0\u4e48\u597d\u5199\u7684, \u8fd9\u91cc\u76f4\u63a5\u4f7f\u7528\u51e0\u4e2a\u4f8b\u5b50\u6765\u6f14\u793a ahk \u7684\u529f\u80fd. \u4e0b\u9762\u811a\u672c\u7684\u529f\u80fd\u662f\u5f53\u6309\u4e0b F1 \u65f6\u9f20\u6807\u5de6\u952e\u8fde\u70b9, \u677e\u5f00 F1 \u65f6\u505c\u6b62\u8fde\u70b9. $F1:: ; \u628a F1 \u952e\u8bbe\u7f6e\u4e3a\u70ed\u952e ($ \u7b26\u53f7\u4f1a\u6709\u52a9\u4e8e\u4e0b\u9762 GetKeyState \u7684 \"P\" \u6a21\u5f0f). Loop ; \u7531\u4e8e\u6ca1\u6709\u6307\u5b9a\u6570\u5b57, \u6240\u4ee5\u8fd9\u662f\u4e2a\u65e0\u9650\u5faa\u73af, \u76f4\u5230\u9047\u5230\u5185\u90e8\u7684 \"break\" \u6216 \"return\". { if not GetKeyState(\"F1\", \"P\") ; \u5982\u679c\u6b64\u72b6\u6001\u4e3a true, \u90a3\u4e48\u7528\u6237\u5b9e\u9645\u5df2\u7ecf\u91ca\u653e\u4e86 F1 \u952e. break ; \u4e2d\u65ad\u5faa\u73af. ; \u5426\u5219 (\u7531\u4e8e\u4e0a\u9762\u6ca1\u6709 \"\u4e2d\u65ad\"), \u7ee7\u7eed\u70b9\u51fb\u9f20\u6807. Click ; \u5728\u5f53\u524d\u6307\u9488\u4f4d\u7f6e\u70b9\u51fb\u9f20\u6807\u5de6\u952e. } return","title":"\u9f20\u6807\u8fde\u70b9\u5668"},{"location":"content/ahk/color/","text":"\u5c4f\u5e55\u53d6\u8272\u5668 \u5c4f\u5e55\u53d6\u8272\u5668, \u952e\u5165 F1 \u663e\u793a\u5e76\u8fd4\u56de 16 \u8fdb\u5236 RGB, \u540c\u65f6\u5c06\u7ed3\u679c\u5b58\u5165\u526a\u8d34\u677f\u5185. F1:: MouseGetPos x, y PixelGetColor rgb, x, y, RGB ToolTip %rgb% Clipboard=%rgb% ; \u5c06 16 \u8fdb\u5236\u989c\u8272\u653e\u5165\u526a\u8d34\u677f SetTimer, RemoveToolTip, 2000 ; 2 \u79d2\u540e\u53d6\u6d88\u5c55\u793a ToolTip return RemoveToolTip: SetTimer, RemoveToolTip, Off ToolTip return \u6267\u884c\u6548\u679c:","title":"AHK-\u5b9e\u73b0\u5c4f\u5e55\u53d6\u8272\u5668"},{"location":"content/ahk/color/#_1","text":"\u5c4f\u5e55\u53d6\u8272\u5668, \u952e\u5165 F1 \u663e\u793a\u5e76\u8fd4\u56de 16 \u8fdb\u5236 RGB, \u540c\u65f6\u5c06\u7ed3\u679c\u5b58\u5165\u526a\u8d34\u677f\u5185. F1:: MouseGetPos x, y PixelGetColor rgb, x, y, RGB ToolTip %rgb% Clipboard=%rgb% ; \u5c06 16 \u8fdb\u5236\u989c\u8272\u653e\u5165\u526a\u8d34\u677f SetTimer, RemoveToolTip, 2000 ; 2 \u79d2\u540e\u53d6\u6d88\u5c55\u793a ToolTip return RemoveToolTip: SetTimer, RemoveToolTip, Off ToolTip return \u6267\u884c\u6548\u679c:","title":"\u5c4f\u5e55\u53d6\u8272\u5668"},{"location":"content/ahk/longpress/","text":"\u957f\u6309 \u5224\u65ad\u6309\u952e\u662f\u5426\u957f\u6309. \u77ed\u6309 F1 \u65f6\u8f93\u51fa single, \u957f\u6309 F1 \u65f6\u8f93\u51fa lpress. F1:: KeyWait, F1, T0.3 If ErrorLevel { Send, lpress KeyWait, F1 } else { Send, single } Return","title":"AHK-\u957f\u6309"},{"location":"content/ahk/longpress/#_1","text":"\u5224\u65ad\u6309\u952e\u662f\u5426\u957f\u6309. \u77ed\u6309 F1 \u65f6\u8f93\u51fa single, \u957f\u6309 F1 \u65f6\u8f93\u51fa lpress. F1:: KeyWait, F1, T0.3 If ErrorLevel { Send, lpress KeyWait, F1 } else { Send, single } Return","title":"\u957f\u6309"},{"location":"content/ahk/loopread/","text":"\u6309\u884c\u8bfb\u53d6\u6587\u4ef6 \u9010\u884c\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u7684\u5185\u5bb9. \u5185\u7f6e\u53d8\u91cf A_LoopReadLine \u5b58\u5728\u4e8e\u4efb\u4f55\u6587\u4ef6\u8bfb\u53d6\u5faa\u73af\u4e2d. \u5b83\u5305\u542b\u4e86\u5df2\u53bb\u9664\u884c\u5c3e\u7684\u56de\u8f66\u6362\u884c\u7b26(\\r\\n)\u7684\u5f53\u524d\u884c\u5185\u5bb9. \u5982\u679c\u4e00\u4e2a\u5185\u5c42\u6587\u4ef6\u8bfb\u53d6\u5faa\u73af\u5305\u542b\u5728\u4e00\u4e2a\u5916\u5c42\u6587\u4ef6\u8bfb\u53d6\u5faa\u73af\u4e2d, \u5219\u6700\u5185\u5c42\u5faa\u73af\u7684\u6587\u4ef6\u884c\u5c06\u5177\u6709\u4f18\u5148\u6743. F1:: Loop, Read, C:\\Database Export.txt { SendRaw, %A_LoopReadLine%`n } Return","title":"AHK-\u6309\u884c\u8bfb\u53d6\u6587\u4ef6"},{"location":"content/ahk/loopread/#_1","text":"\u9010\u884c\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u7684\u5185\u5bb9. \u5185\u7f6e\u53d8\u91cf A_LoopReadLine \u5b58\u5728\u4e8e\u4efb\u4f55\u6587\u4ef6\u8bfb\u53d6\u5faa\u73af\u4e2d. \u5b83\u5305\u542b\u4e86\u5df2\u53bb\u9664\u884c\u5c3e\u7684\u56de\u8f66\u6362\u884c\u7b26(\\r\\n)\u7684\u5f53\u524d\u884c\u5185\u5bb9. \u5982\u679c\u4e00\u4e2a\u5185\u5c42\u6587\u4ef6\u8bfb\u53d6\u5faa\u73af\u5305\u542b\u5728\u4e00\u4e2a\u5916\u5c42\u6587\u4ef6\u8bfb\u53d6\u5faa\u73af\u4e2d, \u5219\u6700\u5185\u5c42\u5faa\u73af\u7684\u6587\u4ef6\u884c\u5c06\u5177\u6709\u4f18\u5148\u6743. F1:: Loop, Read, C:\\Database Export.txt { SendRaw, %A_LoopReadLine%`n } Return","title":"\u6309\u884c\u8bfb\u53d6\u6587\u4ef6"},{"location":"content/ahk/overview/","text":"AHK AutoHotkey \u662f\u9762\u5411\u666e\u901a\u7535\u8111\u7528\u6237\u7684\u81ea\u7531\u5f00\u6e90\u7684\u81ea\u52a8\u5316\u8f6f\u4ef6\u5de5\u5177, \u5b83\u8ba9\u7528\u6237\u80fd\u591f\u5feb\u6377\u6216\u81ea\u52a8\u6267\u884c\u91cd\u590d\u6027\u4efb\u52a1. \u4e0e\u540c\u7c7b\u5de5\u5177\u6bd4\u8f83(\u6bd4\u5982\u6284\u88ad\u7684 x \u952e\u7cbe\u7075), AutoHotkey \u4f53\u79ef\u5c0f\u5de7, \u8bed\u6cd5\u7b80\u660e\u4f7f\u5176\u6613\u5b66\u6613\u7528, \u540c\u65f6\u5728\u70ed\u952e, \u70ed\u5b57\u7b26\u4e32\u5b9e\u73b0\u7684\u5feb\u6377, \u9ad8\u6548(\u540c\u65f6\u4e5f\u5f3a\u5927, \u8fd9\u70b9\u5176\u4ed6\u8bed\u8a00\u4e5f\u80fd\u505a\u5230)\u65b9\u9762\u6ca1\u6709\u5176\u4ed6\u8bed\u8a00\u80fd\u8d85\u8d8a, \u4e0d\u8fc7\u7f3a\u70b9\u540c\u6837\u660e\u663e, \u5373\u6ca1\u6709\u5b98\u65b9\u81ea\u5e26\u6216\u7b2c\u4e09\u65b9\u5b9e\u73b0\u7684\u5b8c\u5584\u7684\u6807\u51c6\u5e93, \u8fd9\u6837\u9700\u8981\u5b9e\u73b0\u672a\u5185\u7f6e\u7684\u529f\u80fd\u65f6\u901a\u5e38\u9700\u8981\u76f4\u63a5\u8c03\u7528 Windows API \u6216\u5bfb\u627e\u522b\u4eba\u5c01\u88c5\u597d\u7684\u51fd\u6570(\u6ce8: \u547d\u4ee4\u884c\u547d\u4ee4\u6216 COM \u7b49\u4e0e Windows API \u5728\u529f\u80fd\u5168\u9762\u6027\u4e0a\u76f8\u5dee\u592a\u8fdc). \u6362\u53e5\u8bdd\u8bf4, \u666e\u901a\u4eba\u6781\u5bb9\u6613\u4f7f\u7528, \u4f46\u719f\u6089\u540e\u8981\u63d0\u5347\u4ee5\u5b9e\u73b0\u66f4\u5f3a\u5927\u7684\u529f\u80fd\u65f6\u56f0\u96be\u91cd\u91cd, \u8fd9\u70b9\u4ece\u5927\u91cf\u7528\u6237\u9009\u62e9\u8be5\u8bed\u8a00\u5165\u624b\u800c\u540e\u4e00\u4e9b\u9700\u6c42\u8f83\u9ad8\u7684\u7528\u6237\u5219\u8f6c\u5411\u5176\u4ed6\u8bed\u8a00\u5bb9\u6613\u770b\u7684\u51fa\u6765. \u5b89\u88c5 \u4e0b\u8f7d\u5730\u5740: https://autohotkey.com/download/ , \u9009\u62e9 Download AutoHotkey.zip, \u89e3\u538b\u6587\u4ef6. \u6ce8\u610f\u6b64\u65f6\u8fd8\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528, \u627e\u5230 Installer.ahk \u5e76\u5c06\u6b64\u6587\u4ef6\u62d6\u62fd\u81f3 AutoHotkeyU64.exe \u4e0a, \u5373\u53ef\u6253\u5f00\u5b89\u88c5\u754c\u9762. \u4e00\u8def\u4e0b\u4e00\u6b65\u5b89\u88c5\u5b8c\u6210\u540e\u5728\u76ee\u5f55\u4e0b\u751f\u6210 AutoHotKey.exe \u4e8c\u8fdb\u5236\u6587\u4ef6, \u6b64\u65f6\u5b89\u88c5\u5b8c\u6210. \u811a\u672c \u6bcf\u4e2a\u811a\u672c\u90fd\u662f\u9700\u7531\u7a0b\u5e8f AutoHotkey.exe \u6267\u884c\u7684\u5305\u542b\u547d\u4ee4\u7684\u7eaf\u6587\u672c. \u811a\u672c\u4e2d\u8fd8\u53ef\u4ee5\u5305\u542b\"\u70ed\u952e\"\u548c\"\u70ed\u5b57\u4e32\"\u6216\u8005\u751a\u81f3\u5b8c\u5168\u7531\u5b83\u4eec\u7ec4\u6210. \u4e0d\u8fc7, \u5728\u4e0d\u5305\u542b\u70ed\u952e\u548c\u70ed\u5b57\u4e32\u65f6, \u811a\u672c\u4f1a\u5728\u542f\u52a8\u540e\u4ece\u4e0a\u5f80\u4e0b\u6309\u987a\u5e8f\u6267\u884c\u5176\u4e2d\u7684\u547d\u4ee4. \u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6d4b\u8bd5\u4e00\u4e0b: \u5c06 #n::Run www.google.com \u4fdd\u5b58\u4e3a run.ahk \u5e76\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c autohotkey run.ahk , \u53ef\u4ee5\u53d1\u73b0\u6258\u76d8\u5904\u51fa\u73b0\u4e00\u4e2a\u7eff\u8272\u5c0f\u56fe\u6807, \u4f7f\u7528 Win+N \u5373\u53ef\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 google. \u53c2\u8003 [1] AutoHotKey: AutoHotKey http://ahkcn.github.io/docs/AutoHotkey.htm [2] AutoHotKey: \u547d\u4ee4\u548c\u51fd\u6570\u7d22\u5f15 http://ahkcn.github.io/docs/commands/index.htm","title":"AHK-\u6982\u89c8"},{"location":"content/ahk/overview/#ahk","text":"AutoHotkey \u662f\u9762\u5411\u666e\u901a\u7535\u8111\u7528\u6237\u7684\u81ea\u7531\u5f00\u6e90\u7684\u81ea\u52a8\u5316\u8f6f\u4ef6\u5de5\u5177, \u5b83\u8ba9\u7528\u6237\u80fd\u591f\u5feb\u6377\u6216\u81ea\u52a8\u6267\u884c\u91cd\u590d\u6027\u4efb\u52a1. \u4e0e\u540c\u7c7b\u5de5\u5177\u6bd4\u8f83(\u6bd4\u5982\u6284\u88ad\u7684 x \u952e\u7cbe\u7075), AutoHotkey \u4f53\u79ef\u5c0f\u5de7, \u8bed\u6cd5\u7b80\u660e\u4f7f\u5176\u6613\u5b66\u6613\u7528, \u540c\u65f6\u5728\u70ed\u952e, \u70ed\u5b57\u7b26\u4e32\u5b9e\u73b0\u7684\u5feb\u6377, \u9ad8\u6548(\u540c\u65f6\u4e5f\u5f3a\u5927, \u8fd9\u70b9\u5176\u4ed6\u8bed\u8a00\u4e5f\u80fd\u505a\u5230)\u65b9\u9762\u6ca1\u6709\u5176\u4ed6\u8bed\u8a00\u80fd\u8d85\u8d8a, \u4e0d\u8fc7\u7f3a\u70b9\u540c\u6837\u660e\u663e, \u5373\u6ca1\u6709\u5b98\u65b9\u81ea\u5e26\u6216\u7b2c\u4e09\u65b9\u5b9e\u73b0\u7684\u5b8c\u5584\u7684\u6807\u51c6\u5e93, \u8fd9\u6837\u9700\u8981\u5b9e\u73b0\u672a\u5185\u7f6e\u7684\u529f\u80fd\u65f6\u901a\u5e38\u9700\u8981\u76f4\u63a5\u8c03\u7528 Windows API \u6216\u5bfb\u627e\u522b\u4eba\u5c01\u88c5\u597d\u7684\u51fd\u6570(\u6ce8: \u547d\u4ee4\u884c\u547d\u4ee4\u6216 COM \u7b49\u4e0e Windows API \u5728\u529f\u80fd\u5168\u9762\u6027\u4e0a\u76f8\u5dee\u592a\u8fdc). \u6362\u53e5\u8bdd\u8bf4, \u666e\u901a\u4eba\u6781\u5bb9\u6613\u4f7f\u7528, \u4f46\u719f\u6089\u540e\u8981\u63d0\u5347\u4ee5\u5b9e\u73b0\u66f4\u5f3a\u5927\u7684\u529f\u80fd\u65f6\u56f0\u96be\u91cd\u91cd, \u8fd9\u70b9\u4ece\u5927\u91cf\u7528\u6237\u9009\u62e9\u8be5\u8bed\u8a00\u5165\u624b\u800c\u540e\u4e00\u4e9b\u9700\u6c42\u8f83\u9ad8\u7684\u7528\u6237\u5219\u8f6c\u5411\u5176\u4ed6\u8bed\u8a00\u5bb9\u6613\u770b\u7684\u51fa\u6765.","title":"AHK"},{"location":"content/ahk/overview/#_1","text":"\u4e0b\u8f7d\u5730\u5740: https://autohotkey.com/download/ , \u9009\u62e9 Download AutoHotkey.zip, \u89e3\u538b\u6587\u4ef6. \u6ce8\u610f\u6b64\u65f6\u8fd8\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528, \u627e\u5230 Installer.ahk \u5e76\u5c06\u6b64\u6587\u4ef6\u62d6\u62fd\u81f3 AutoHotkeyU64.exe \u4e0a, \u5373\u53ef\u6253\u5f00\u5b89\u88c5\u754c\u9762. \u4e00\u8def\u4e0b\u4e00\u6b65\u5b89\u88c5\u5b8c\u6210\u540e\u5728\u76ee\u5f55\u4e0b\u751f\u6210 AutoHotKey.exe \u4e8c\u8fdb\u5236\u6587\u4ef6, \u6b64\u65f6\u5b89\u88c5\u5b8c\u6210.","title":"\u5b89\u88c5"},{"location":"content/ahk/overview/#_2","text":"\u6bcf\u4e2a\u811a\u672c\u90fd\u662f\u9700\u7531\u7a0b\u5e8f AutoHotkey.exe \u6267\u884c\u7684\u5305\u542b\u547d\u4ee4\u7684\u7eaf\u6587\u672c. \u811a\u672c\u4e2d\u8fd8\u53ef\u4ee5\u5305\u542b\"\u70ed\u952e\"\u548c\"\u70ed\u5b57\u4e32\"\u6216\u8005\u751a\u81f3\u5b8c\u5168\u7531\u5b83\u4eec\u7ec4\u6210. \u4e0d\u8fc7, \u5728\u4e0d\u5305\u542b\u70ed\u952e\u548c\u70ed\u5b57\u4e32\u65f6, \u811a\u672c\u4f1a\u5728\u542f\u52a8\u540e\u4ece\u4e0a\u5f80\u4e0b\u6309\u987a\u5e8f\u6267\u884c\u5176\u4e2d\u7684\u547d\u4ee4. \u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6d4b\u8bd5\u4e00\u4e0b: \u5c06 #n::Run www.google.com \u4fdd\u5b58\u4e3a run.ahk \u5e76\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c autohotkey run.ahk , \u53ef\u4ee5\u53d1\u73b0\u6258\u76d8\u5904\u51fa\u73b0\u4e00\u4e2a\u7eff\u8272\u5c0f\u56fe\u6807, \u4f7f\u7528 Win+N \u5373\u53ef\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 google.","title":"\u811a\u672c"},{"location":"content/ahk/overview/#_3","text":"[1] AutoHotKey: AutoHotKey http://ahkcn.github.io/docs/AutoHotkey.htm [2] AutoHotKey: \u547d\u4ee4\u548c\u51fd\u6570\u7d22\u5f15 http://ahkcn.github.io/docs/commands/index.htm","title":"\u53c2\u8003"},{"location":"content/blockchain/evm/","text":"EVM \u4ecb\u7ecd Ethereum Vitual Machine(EVM) \u662f\u4ee5\u592a\u574a\u6267\u884c\u6a21\u5757\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206, \u5176\u804c\u8d23\u662f\u6267\u884c EVM Code. EVM \u4f7f\u7528\u4e86 256 \u4f4d\u957f\u5ea6\u7684\u673a\u5668\u7801, \u662f\u4e00\u79cd\u57fa\u4e8e\u5806\u6808\u7684\u865a\u62df\u673a. EVM Code \u662f\u4e00\u6bb5\u5b57\u8282\u7801, \u901a\u5e38\u4f7f\u7528 16 \u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a. \u6bd4\u5982: 0x6005600401 . \u5b83\u662f EVM \u5b9e\u9645\u6267\u884c\u7684\u4ee3\u7801. EVM Assembly \u662f EVM Code \u7684\u4eba\u7c7b\u53ef\u8bfb\u8868\u73b0\u5f62\u5f0f. \u4f8b\u5982 EVM Code 0x6005600401 \u53ef\u4ee5\u8868\u793a\u4e3a EVM Assembly: PUSH1 0x05 PUSH1 0x04 ADD \u6808 EVM \u5806\u6808\u7684\u6808\u9876\u5927\u5c0f\u662f 256 \u4f4d, \u6700\u5927\u6df1\u5ea6\u662f 1024. \u7531\u4e8e\u5806\u6808\u6570\u636e\u7ed3\u6784\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u8fdb\u884c\u64cd\u4f5c, \u56e0\u800c\u6309\u7167\u540e\u8fdb\u5148\u51fa(LIFO, Last In First Out) \u7684\u539f\u7406\u8fd0\u4f5c. \u6808\u7684\u4e24\u4e2a\u57fa\u672c\u64cd\u4f5c\u662f PUSH \u548c POP: |---------| |------------| |---------| | 0000: | | 0000: 0x42 | | 0000: | | 0001: | | 0001: | | 0001: | | . | --> PUSH 0x42 --> | . | --> POP --> | . | && Return 0x42 | . | | . | | . | | 1023: | | 1023 | | 1023: | |---------| |------------| |---------| \u57fa\u4e8e\u6808\u7684\u865a\u62df\u673a\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\u6808\u7684\u6982\u5ff5, \u865a\u62df\u673a\u5728\u8fdb\u884c\u771f\u6b63\u7684\u8fd0\u7b97\u65f6\u90fd\u662f\u76f4\u63a5\u4e0e\u64cd\u4f5c\u6570\u6808\u8fdb\u884c\u4ea4\u4e92, \u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5c\u5185\u5b58\u4e2d\u6570\u636e, \u4e5f\u5c31\u662f\u8bf4\u4e0d\u7ba1\u8fdb\u884c\u4f55\u79cd\u64cd\u4f5c\u90fd\u8981\u901a\u8fc7\u64cd\u4f5c\u6570\u6808\u6765\u8fdb\u884c, \u5373\u4f7f\u662f\u6570\u636e\u4f20\u9012\u8fd9\u79cd\u7b80\u5355\u7684\u64cd\u4f5c. \u8fd9\u6837\u505a\u7684\u76f4\u63a5\u597d\u5904\u5c31\u662f\u865a\u62df\u673a\u53ef\u4ee5\u65e0\u89c6\u5177\u4f53\u7684\u7269\u7406\u67b6\u6784, \u7279\u522b\u662f\u5bc4\u5b58\u5668. \u4f46\u7f3a\u70b9\u4e5f\u663e\u800c\u6613\u89c1, \u5c31\u662f\u901f\u5ea6\u6162, \u56e0\u4e3a\u65e0\u8bba\u4ec0\u4e48\u64cd\u4f5c\u90fd\u8981\u901a\u8fc7\u64cd\u4f5c\u6570\u6808\u8fd9\u4e00\u7ed3\u6784. \u4e34\u65f6\u5185\u5b58 CPU \u662f\u901a\u8fc7\u5bfb\u5740\u6765\u8bbf\u95ee\u5185\u5b58\u7684. 32 \u4f4d CPU \u7684\u5bfb\u5740\u5bbd\u5ea6\u662f 0 ~ 0xFFFFFFFF, \u8ba1\u7b97\u540e\u5f97\u5230\u7684\u5927\u5c0f\u662f 4G, \u4e5f\u5c31\u662f\u8bf4\u53ef\u652f\u6301\u7684\u7269\u7406\u5185\u5b58\u6700\u5927\u662f 4G. \u8fd9\u6b63\u662f\u8fd1\u5e74\u6765\u4e3a\u4ec0\u4e48\u4e0d\u65ad\u6dd8\u6c70 32 \u4f4d\u64cd\u4f5c\u7cfb\u7edf/CPU \u7684\u539f\u56e0. EVM \u7531\u4e8e\u91c7\u7528 256 \u4f4d\u6bd4\u7279\u957f\u5ea6\u673a\u5668\u7801, \u5176\u5bfb\u5740\u5bbd\u5ea6\u8fbe\u5230\u4e86\u60ca\u4eba\u7684 0 ~ 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, \u7406\u8bba\u4e0a\u53ef\u4ee5\u5bfb\u5740\u8fd1\u4e4e\u65e0\u9650\u7684\u5185\u5b58. EVM \u4e34\u65f6\u5185\u5b58\u7684\u57fa\u672c\u5355\u4f4d\u662f word : \u4e00\u4e2a word \u7684\u5927\u5c0f\u662f 256 \u4f4d(\u6216\u8005 32 byte, \u56e0\u4e3a\u5927\u591a\u6570 EVM \u5b9e\u73b0\u5747\u4f7f\u7528 byte \u6570\u7ec4\u6765\u5b9e\u73b0\u4e34\u65f6\u5185\u5b58). \u4e34\u65f6\u5185\u5b58\u7684\u5927\u5c0f\u603b\u662f word \u7684\u6574\u6570\u500d. \u4e34\u65f6\u5185\u5b58\u7684\u4e09\u4e2a\u57fa\u672c\u64cd\u4f5c\u662f Get , Set \u4e0e Expand(\u6269\u5bb9) . \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4e00\u6bb5\u957f\u5ea6\u4e3a 0xdf \u7684\u968f\u673a\u521d\u59cb\u5316\u7684\u4e34\u65f6\u5185\u5b58\u7684\u53ef\u8bfb\u5f62\u5f0f\u6765\u6f14\u793a\u8fd9\u51e0\u4e2a\u64cd\u4f5c. 00000000 60 80 60 40 52 60 04 36 10 60 49 57 60 00 35 7c |`.`@R`.6.`IW`.5|| 00000010 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 00000020 00 00 00 00 00 00 00 00 00 00 00 00 00 90 04 63 |...............c| 00000030 ff ff ff ff 16 80 63 60 fe 47 b1 14 60 4e 57 80 |......c`.G..`NW.| 00000040 63 6d 4c e6 3c 14 60 78 57 5b 60 00 80 fd 5b 34 |cmL.<.`xW[`...[4| 00000050 80 15 60 59 57 60 00 80 fd 5b 50 60 76 60 04 80 |..`YW`...[P`v`..| 00000060 36 03 81 01 90 80 80 35 90 60 20 01 90 92 91 90 |6......5.` .....| 00000070 50 50 50 60 a0 56 5b 00 5b 34 80 15 60 83 57 60 |PPP`.V[.[4..`.W`| 00000080 00 80 fd 5b 50 60 8a 60 aa 56 5b 60 40 51 80 82 |...[P`.`.V[`@Q..| 00000090 81 52 60 20 01 91 50 50 60 40 51 80 91 03 90 f3 |.R` ..PP`@Q.....| 000000a0 5b 80 60 00 81 90 55 50 50 56 5b 60 00 80 54 90 |[.`...UPPV[`..T.| 000000b0 50 90 56 00 a1 65 62 7a 7a 72 30 58 20 99 c6 6a |P.V..ebzzr0X ..j| 000000c0 25 d5 9f 0a a7 8f 7e bc 40 74 8f a1 d1 fb c3 35 |%.....~.@t.....5| 000000d0 d8 d7 80 f2 84 84 1b 30 e0 36 5a cd 96 00 29 00 |.......0.6Z...).| \u2b07 Set(0x00, 0x00..0042) \u2b07 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 |...............\"| \u2b07 Get(0x0f, 0x01) ---------> Return 42 \u2b07 Set(0xe0, 0x00..0042) // No avaliable memory! \u2b07 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 |...............\"| ........ ........ 000000e0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 |...............\"| \u6c38\u4e45\u5185\u5b58 \u6c38\u4e45\u5185\u5b58\u662f\u6301\u4e45\u5316\u5b58\u50a8\u667a\u80fd\u5408\u7ea6\u72b6\u6001\u7684\u5730\u65b9. \u6c38\u4e45\u5185\u5b58\u5341\u5206\u7c7b\u4f3c\u4e34\u65f6\u5185\u5b58, \u552f\u4e00\u533a\u522b\u662f\u5b83\u662f\u6c38\u4e45\u7684. \u5927\u591a\u6570 EVM \u5b9e\u73b0\u4f7f\u7528 KV \u6570\u636e\u5e93\u6765\u5b9e\u73b0\u6c38\u4e45\u5185\u5b58, \u5176 Key \u4e0e Value \u5927\u5c0f\u5747\u4e3a 256 \u6bd4\u7279. \u4f46\u6211\u4eec\u53ef\u4ee5\u4ee5 JSON \u683c\u5f0f\u6765\u5f62\u8c61\u5316\u7684\u8868\u73b0\u6c38\u4e45\u5185\u5b58: \u4e00\u4e2a\u90e8\u7f72\u5728 0xbd770416a3345f91e4b34576cb804a576fa48eb1 \u5730\u5740\u7684\u5408\u7ea6\u5728\u5176\u4f4d\u7f6e\u4e3a 0x0000000000000000000000000000000000000000000000000000000000000000 \u7684\u6c38\u4e45\u5185\u5b58\u4e2d\u5b58\u5165\u4e86 0x000000000000000000000000000000000000000000000000000000000000002a \u8fd9\u4e2a\u503c. { \"root\": \"df8a18a629f2fefa816a785c49431fa6f8c146045b0e33cf7782c0aa83d48e4a\", \"accounts\": { \"bd770416a3345f91e4b34576cb804a576fa48eb1\": { \"balance\": \"0\", \"nonce\": 1, \"root\": \"0x..\", \"codeHash\": \"0x..\", \"code\": \"0x..\", \"storage\": { \"0x0000000000000000000000000000000000000000000000000000000000000000\": \"0x000000000000000000000000000000000000000000000000000000000000002a\" } } } } \u64cd\u4f5c\u7801 \u64cd\u4f5c\u7801\u5c06 EVM Code \u6620\u5c04\u4e3a\u5177\u4f53\u6267\u884c\u903b\u8f91. \u4ece\u4ea4\u4e92\u5bf9\u8c61\u4e0a\u6765\u8bf4, \u64cd\u4f5c\u7801\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u51e0\u4e2a\u6709\u660e\u663e\u533a\u5206\u7684\u90e8\u5206: \u4e0e\u6808\u4ea4\u4e92\u7684\u64cd\u4f5c\u7801 \u4e0e\u4e34\u65f6\u5185\u5b58\u4ea4\u4e92\u7684\u64cd\u4f5c\u7801 \u4e0e\u6c38\u4e45\u5185\u5b58\u4ea4\u4e92\u7684\u64cd\u4f5c\u7801 \u4e0e EVM \u6267\u884c\u4e0a\u4e0b\u6587\u4ea4\u4e92\u7684\u64cd\u4f5c\u7801 \u4e0b\u9762\u7b80\u8981\u6f14\u793a\u51e0\u79cd\u64cd\u4f5c\u7801\u7684\u6267\u884c\u8fc7\u7a0b: ADD ADD \u64cd\u4f5c\u7801\u7684\u503c\u662f 0x01. \u5b83\u8868\u793a\u4ece\u6808\u4e2d POP \u4e24\u4e2a\u5143\u7d20, \u76f8\u52a0\u540e\u91cd\u65b0 PUSH \u5165\u6808. |------------| |------------| | 0000: 0x01 | | 0000: 0x02 | | 0001: 0x01 | | 0001: | | . | --> EVM Code: 0x01 --> | . | | . | | . | | 1023: | | 1023 | |------------| |------------| BALANCE BALANCE \u64cd\u4f5c\u7801\u7684\u503c\u662f 0x31. \u5b83\u8868\u793a\u4ece\u6808\u4e2d POP \u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u5730\u5740, \u4e4b\u540e\u53d6\u5f97\u8be5\u5730\u5740\u7684\u4f59\u989d, \u5e76\u5c06\u4f59\u989d PUSH \u5165\u6808. \u5047\u8bbe\u5730\u5740 0xbd770416a3345f91e4b34576cb804a576fa48eb1 \u7684\u4f59\u989d\u662f 2 Wei(\u4ee5\u592a\u5e01\u7684\u5355\u4f4d), \u5219: |--------------------------------------------------| |------------| | 0000: 0xbd770416a3345f91e4b34576cb804a576fa48eb1 | | 0000: 0x02 | | 0001: | | 0001: | | . | --> EVM Code: 0x31 --> | . | | . | | . | | 1023: | | 1023 | |--------------------------------------------------| |------------| MSTORE MSTORE \u64cd\u4f5c\u7801\u7684\u503c\u662f 0x52. \u5b83\u8868\u793a\u4ece\u6808\u4e2d POP \u4e24\u4e2a\u5143\u7d20, \u7b2c\u4e00\u4e2a\u4f5c\u4e3a\u4e34\u65f6\u5185\u5b58\u504f\u79fb\u503c, \u7b2c\u4e8c\u4e2a\u4f5c\u4e3a\u5b58\u50a8\u7684\u503c. \u5c06\u6570\u636e\u5199\u5165\u4e34\u65f6\u5185\u5b58. |----------------| |-------| | 0000: 0x00..00 | | 0000: | | 0001: 0x00..42 | | 0001: | | . | --> EVM Code: 0x52 --> | . | | . | | . | | 1023: | | 1023 | |----------------| |-------| \u4e34\u65f6\u5185\u5b58\u53d8\u5316 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 |...............\"| SSTORE SSTORE \u64cd\u4f5c\u7801\u7684\u503c\u662f 0x55. \u5b83\u8868\u793a\u4ece\u6808\u4e2d POP \u4e24\u4e2a\u5143\u7d20, \u7b2c\u4e00\u4e2a\u4f5c\u4e3a\u6c38\u4e45\u5185\u5b58\u504f\u79fb\u503c, \u7b2c\u4e8c\u4e2a\u4f5c\u4e3a\u5b58\u50a8\u7684\u503c, \u5c06\u6570\u636e\u5199\u5165\u6c38\u4e45\u5185\u5b58. \u5168\u90e8\u64cd\u4f5c\u7801\u7684\u610f\u4e49\u53ef\u53c2\u8003\u4ee5\u592a\u574a\u9ec4\u76ae\u4e66. Gas EVM \u662f\u56fe\u7075\u7b49\u4ef7\u7684, \u4e3a\u4e86\u9650\u5236\u6267\u884c\u4ea4\u6613\u6240\u9700\u7684\u5de5\u4f5c\u91cf, \u5f53 EVM \u6267\u884c\u4ea4\u6613\u65f6, Gas \u5c06\u6309\u7167\u7279\u5b9a\u89c4\u5219\u88ab\u9010\u6e10\u6d88\u8017. \u6bcf\u4e2a\u64cd\u4f5c\u7801\u90fd\u6709\u5176 Gas \u6d88\u8017\u91cf, \u65e0\u8bba\u6267\u884c\u5230\u4ec0\u4e48\u4f4d\u7f6e, \u4e00\u65e6 Gas \u88ab\u8017\u5c3d, \u5c06\u4f1a\u89e6\u53d1\u4e00\u4e2a out-of-gas \u5f02\u5e38. \u5f53\u524d\u8c03\u7528\u5e27\u6240\u505a\u7684\u6240\u6709\u72b6\u6001\u4fee\u6539\u90fd\u5c06\u88ab\u56de\u6eda. Gas \u4f9d\u636e\u64cd\u4f5c\u7801\u6267\u884c\u7684\u9884\u671f\u8d44\u6e90\u6d88\u8017\u5b9a\u4e49. \u6bd4\u5982 ADD(\u52a0\u6cd5) \u64cd\u4f5c\u7801\u6d88\u8017 2 Gas, \u800c DIV(\u9664\u6cd5) \u64cd\u4f5c\u7801\u6d88\u8017 3 Gas. \u540c\u65f6, \u5185\u5b58\u6269\u5bb9, \u6570\u636e\u62f7\u8d1d\u7b49\u64cd\u4f5c\u540c\u6837\u4f1a\u6d88\u8017 Gas, \u5e76\u4e14\u6570\u636e\u91cf\u8d8a\u5927, \u6d88\u8017 Gas \u8d8a\u591a. \u5728 EVM \u6267\u884c\u8fc7\u7a0b\u4e2d, Gas \u7684\u6263\u8d39\u662f\u5148\u4e8e\u64cd\u4f5c\u7801\u6267\u884c\u7684. \u8be6\u7ec6 Gas \u6d88\u8017\u89c4\u5219\u53ef\u53c2\u8003\u4ee5\u592a\u574a\u9ec4\u76ae\u4e66. \u4e00\u6bb5\u793a\u4f8b\u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b \u6211\u4eec\u4f7f\u7528\u4e00\u6bb5\u771f\u5b9e EVM Code, \u4eba\u5de5\u6a21\u62df EVM \u6267\u884c\u8fc7\u7a0b. EVM Code: 0x603760005360005160005560016000f3 \u7b49\u4ef7\u7684 EVM Assembly: PUSH1 0x37 PUSH1 0x00 MSTORE8 PUSH1 0x00 MLOAD PUSH1 0x00 SSTORE PUSH1 0x01 PUSH1 0x00 RETURN \u5047\u8bbe\u521d\u59cb Gas \u4e3a 100000, \u6a21\u62df\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b: PUSH1 pc=00000000 gas=100000 cost=3 PUSH1 pc=00000002 gas=99997 cost=3 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000037 MSTORE8 pc=00000004 gas=99994 cost=6 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000000 00000001 0000000000000000000000000000000000000000000000000000000000000037 Memory: 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| PUSH1 pc=00000005 gas=99988 cost=3 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| MLOAD pc=00000007 gas=99985 cost=3 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000000 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| PUSH1 pc=00000008 gas=99982 cost=3 Stack: 00000000 3700000000000000000000000000000000000000000000000000000000000000 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| SSTORE pc=00000010 gas=99979 cost=20000 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000000 00000001 3700000000000000000000000000000000000000000000000000000000000000 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| Storage: 0000000000000000000000000000000000000000000000000000000000000000: 3700000000000000000000000000000000000000000000000000000000000000 PUSH1 pc=00000011 gas=79979 cost=3 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| Storage: 0000000000000000000000000000000000000000000000000000000000000000: 3700000000000000000000000000000000000000000000000000000000000000 PUSH1 pc=00000013 gas=79976 cost=3 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000001 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| Storage: 0000000000000000000000000000000000000000000000000000000000000000: 3700000000000000000000000000000000000000000000000000000000000000 RETURN pc=00000015 gas=79973 cost=0 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000000 00000001 0000000000000000000000000000000000000000000000000000000000000001 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| Storage: 0000000000000000000000000000000000000000000000000000000000000000: 3700000000000000000000000000000000000000000000000000000000000000 Return = 37 EVM \u7684\u7f3a\u9677\u4e0e\u4e0d\u8db3 \u4ec5\u652f\u6301 256 \u4f4d\u6574\u6570, \u5bfc\u81f4\u73b0\u884c 32/64 \u4f4d CPU \u65e0\u6cd5\u76f4\u63a5\u5904\u7406 EVM Code. 256 \u4f4d\u6574\u6570\u540c\u65f6\u9020\u6210\u5927\u91cf\u7684\u6570\u636e\u5197\u4f59, \u8fd9\u4f53\u73b0\u5728\u5185\u5b58\u5bfb\u5740, Gas \u8ba1\u7b97, EVM Code \u8df3\u8f6c\u7b49\u5730\u65b9(\u4f60\u51e0\u4e4e\u4e0d\u53ef\u80fd\u7528\u5230 2^256 \u7684\u5185\u5b58\u5bfb\u5740). Gas \u6a21\u578b\u4e0a\u7684\u7ecf\u6d4e\u95ee\u9898. EVM \u9f13\u52b1\u4f4e Gas \u6d88\u8017\u7684\u4ee3\u7801, \u800c\u4e0d\u9f13\u52b1\u9ad8\u6548\u7387\u7684\u4ee3\u7801, \u8fd9\u5bfc\u81f4\u4ee5\u592a\u574a\u533a\u5757\u94fe\u4e0a\u5b58\u5728\u5927\u91cf\u6027\u80fd\u4f4e\u6548, \u5197\u4f59\u4f46 Gas \u9ad8\u6548\u7684\u4ee3\u7801. \u6bd4\u5982\u4e3a\u4e86\u5bf9\u6297\u6ea2\u51fa\u800c\u7f16\u5199\u7684 SafeMath \u4ee3\u7801, \u8fd9\u4e00\u5c0f\u6bb5\u4ee3\u7801\u88ab\u5f00\u53d1\u8005\u590d\u5236\u4e86\u65e0\u6570\u6b21\u5e76\u90e8\u7f72\u5230\u4ee5\u592a\u574a\u4e0a. JUMP/JUMPI \u6307\u4ee4\u7684\u8bbe\u8ba1\u4f7f EVM \u5b57\u8282\u7801\u51e0\u4e4e\u65e0\u6cd5\u88ab\u9759\u6001\u5206\u6790. \u53c2\u770b EIP-615 . \u53c2\u8003\u6587\u732e [1] Ethereum Yellow Paper: APPENDIX H. VIRTUAL MACHINE SPECIFICATION. P28. [2] Ethereum Yellow Paper: APPENDIX G. FEE SCHEDULE. P25.","title":"EVM"},{"location":"content/blockchain/evm/#evm","text":"Ethereum Vitual Machine(EVM) \u662f\u4ee5\u592a\u574a\u6267\u884c\u6a21\u5757\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206, \u5176\u804c\u8d23\u662f\u6267\u884c EVM Code. EVM \u4f7f\u7528\u4e86 256 \u4f4d\u957f\u5ea6\u7684\u673a\u5668\u7801, \u662f\u4e00\u79cd\u57fa\u4e8e\u5806\u6808\u7684\u865a\u62df\u673a. EVM Code \u662f\u4e00\u6bb5\u5b57\u8282\u7801, \u901a\u5e38\u4f7f\u7528 16 \u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a. \u6bd4\u5982: 0x6005600401 . \u5b83\u662f EVM \u5b9e\u9645\u6267\u884c\u7684\u4ee3\u7801. EVM Assembly \u662f EVM Code \u7684\u4eba\u7c7b\u53ef\u8bfb\u8868\u73b0\u5f62\u5f0f. \u4f8b\u5982 EVM Code 0x6005600401 \u53ef\u4ee5\u8868\u793a\u4e3a EVM Assembly: PUSH1 0x05 PUSH1 0x04 ADD","title":"EVM \u4ecb\u7ecd"},{"location":"content/blockchain/evm/#_1","text":"EVM \u5806\u6808\u7684\u6808\u9876\u5927\u5c0f\u662f 256 \u4f4d, \u6700\u5927\u6df1\u5ea6\u662f 1024. \u7531\u4e8e\u5806\u6808\u6570\u636e\u7ed3\u6784\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u8fdb\u884c\u64cd\u4f5c, \u56e0\u800c\u6309\u7167\u540e\u8fdb\u5148\u51fa(LIFO, Last In First Out) \u7684\u539f\u7406\u8fd0\u4f5c. \u6808\u7684\u4e24\u4e2a\u57fa\u672c\u64cd\u4f5c\u662f PUSH \u548c POP: |---------| |------------| |---------| | 0000: | | 0000: 0x42 | | 0000: | | 0001: | | 0001: | | 0001: | | . | --> PUSH 0x42 --> | . | --> POP --> | . | && Return 0x42 | . | | . | | . | | 1023: | | 1023 | | 1023: | |---------| |------------| |---------| \u57fa\u4e8e\u6808\u7684\u865a\u62df\u673a\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\u6808\u7684\u6982\u5ff5, \u865a\u62df\u673a\u5728\u8fdb\u884c\u771f\u6b63\u7684\u8fd0\u7b97\u65f6\u90fd\u662f\u76f4\u63a5\u4e0e\u64cd\u4f5c\u6570\u6808\u8fdb\u884c\u4ea4\u4e92, \u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5c\u5185\u5b58\u4e2d\u6570\u636e, \u4e5f\u5c31\u662f\u8bf4\u4e0d\u7ba1\u8fdb\u884c\u4f55\u79cd\u64cd\u4f5c\u90fd\u8981\u901a\u8fc7\u64cd\u4f5c\u6570\u6808\u6765\u8fdb\u884c, \u5373\u4f7f\u662f\u6570\u636e\u4f20\u9012\u8fd9\u79cd\u7b80\u5355\u7684\u64cd\u4f5c. \u8fd9\u6837\u505a\u7684\u76f4\u63a5\u597d\u5904\u5c31\u662f\u865a\u62df\u673a\u53ef\u4ee5\u65e0\u89c6\u5177\u4f53\u7684\u7269\u7406\u67b6\u6784, \u7279\u522b\u662f\u5bc4\u5b58\u5668. \u4f46\u7f3a\u70b9\u4e5f\u663e\u800c\u6613\u89c1, \u5c31\u662f\u901f\u5ea6\u6162, \u56e0\u4e3a\u65e0\u8bba\u4ec0\u4e48\u64cd\u4f5c\u90fd\u8981\u901a\u8fc7\u64cd\u4f5c\u6570\u6808\u8fd9\u4e00\u7ed3\u6784.","title":"\u6808"},{"location":"content/blockchain/evm/#_2","text":"CPU \u662f\u901a\u8fc7\u5bfb\u5740\u6765\u8bbf\u95ee\u5185\u5b58\u7684. 32 \u4f4d CPU \u7684\u5bfb\u5740\u5bbd\u5ea6\u662f 0 ~ 0xFFFFFFFF, \u8ba1\u7b97\u540e\u5f97\u5230\u7684\u5927\u5c0f\u662f 4G, \u4e5f\u5c31\u662f\u8bf4\u53ef\u652f\u6301\u7684\u7269\u7406\u5185\u5b58\u6700\u5927\u662f 4G. \u8fd9\u6b63\u662f\u8fd1\u5e74\u6765\u4e3a\u4ec0\u4e48\u4e0d\u65ad\u6dd8\u6c70 32 \u4f4d\u64cd\u4f5c\u7cfb\u7edf/CPU \u7684\u539f\u56e0. EVM \u7531\u4e8e\u91c7\u7528 256 \u4f4d\u6bd4\u7279\u957f\u5ea6\u673a\u5668\u7801, \u5176\u5bfb\u5740\u5bbd\u5ea6\u8fbe\u5230\u4e86\u60ca\u4eba\u7684 0 ~ 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, \u7406\u8bba\u4e0a\u53ef\u4ee5\u5bfb\u5740\u8fd1\u4e4e\u65e0\u9650\u7684\u5185\u5b58. EVM \u4e34\u65f6\u5185\u5b58\u7684\u57fa\u672c\u5355\u4f4d\u662f word : \u4e00\u4e2a word \u7684\u5927\u5c0f\u662f 256 \u4f4d(\u6216\u8005 32 byte, \u56e0\u4e3a\u5927\u591a\u6570 EVM \u5b9e\u73b0\u5747\u4f7f\u7528 byte \u6570\u7ec4\u6765\u5b9e\u73b0\u4e34\u65f6\u5185\u5b58). \u4e34\u65f6\u5185\u5b58\u7684\u5927\u5c0f\u603b\u662f word \u7684\u6574\u6570\u500d. \u4e34\u65f6\u5185\u5b58\u7684\u4e09\u4e2a\u57fa\u672c\u64cd\u4f5c\u662f Get , Set \u4e0e Expand(\u6269\u5bb9) . \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4e00\u6bb5\u957f\u5ea6\u4e3a 0xdf \u7684\u968f\u673a\u521d\u59cb\u5316\u7684\u4e34\u65f6\u5185\u5b58\u7684\u53ef\u8bfb\u5f62\u5f0f\u6765\u6f14\u793a\u8fd9\u51e0\u4e2a\u64cd\u4f5c. 00000000 60 80 60 40 52 60 04 36 10 60 49 57 60 00 35 7c |`.`@R`.6.`IW`.5|| 00000010 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 00000020 00 00 00 00 00 00 00 00 00 00 00 00 00 90 04 63 |...............c| 00000030 ff ff ff ff 16 80 63 60 fe 47 b1 14 60 4e 57 80 |......c`.G..`NW.| 00000040 63 6d 4c e6 3c 14 60 78 57 5b 60 00 80 fd 5b 34 |cmL.<.`xW[`...[4| 00000050 80 15 60 59 57 60 00 80 fd 5b 50 60 76 60 04 80 |..`YW`...[P`v`..| 00000060 36 03 81 01 90 80 80 35 90 60 20 01 90 92 91 90 |6......5.` .....| 00000070 50 50 50 60 a0 56 5b 00 5b 34 80 15 60 83 57 60 |PPP`.V[.[4..`.W`| 00000080 00 80 fd 5b 50 60 8a 60 aa 56 5b 60 40 51 80 82 |...[P`.`.V[`@Q..| 00000090 81 52 60 20 01 91 50 50 60 40 51 80 91 03 90 f3 |.R` ..PP`@Q.....| 000000a0 5b 80 60 00 81 90 55 50 50 56 5b 60 00 80 54 90 |[.`...UPPV[`..T.| 000000b0 50 90 56 00 a1 65 62 7a 7a 72 30 58 20 99 c6 6a |P.V..ebzzr0X ..j| 000000c0 25 d5 9f 0a a7 8f 7e bc 40 74 8f a1 d1 fb c3 35 |%.....~.@t.....5| 000000d0 d8 d7 80 f2 84 84 1b 30 e0 36 5a cd 96 00 29 00 |.......0.6Z...).| \u2b07 Set(0x00, 0x00..0042) \u2b07 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 |...............\"| \u2b07 Get(0x0f, 0x01) ---------> Return 42 \u2b07 Set(0xe0, 0x00..0042) // No avaliable memory! \u2b07 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 |...............\"| ........ ........ 000000e0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 |...............\"|","title":"\u4e34\u65f6\u5185\u5b58"},{"location":"content/blockchain/evm/#_3","text":"\u6c38\u4e45\u5185\u5b58\u662f\u6301\u4e45\u5316\u5b58\u50a8\u667a\u80fd\u5408\u7ea6\u72b6\u6001\u7684\u5730\u65b9. \u6c38\u4e45\u5185\u5b58\u5341\u5206\u7c7b\u4f3c\u4e34\u65f6\u5185\u5b58, \u552f\u4e00\u533a\u522b\u662f\u5b83\u662f\u6c38\u4e45\u7684. \u5927\u591a\u6570 EVM \u5b9e\u73b0\u4f7f\u7528 KV \u6570\u636e\u5e93\u6765\u5b9e\u73b0\u6c38\u4e45\u5185\u5b58, \u5176 Key \u4e0e Value \u5927\u5c0f\u5747\u4e3a 256 \u6bd4\u7279. \u4f46\u6211\u4eec\u53ef\u4ee5\u4ee5 JSON \u683c\u5f0f\u6765\u5f62\u8c61\u5316\u7684\u8868\u73b0\u6c38\u4e45\u5185\u5b58: \u4e00\u4e2a\u90e8\u7f72\u5728 0xbd770416a3345f91e4b34576cb804a576fa48eb1 \u5730\u5740\u7684\u5408\u7ea6\u5728\u5176\u4f4d\u7f6e\u4e3a 0x0000000000000000000000000000000000000000000000000000000000000000 \u7684\u6c38\u4e45\u5185\u5b58\u4e2d\u5b58\u5165\u4e86 0x000000000000000000000000000000000000000000000000000000000000002a \u8fd9\u4e2a\u503c. { \"root\": \"df8a18a629f2fefa816a785c49431fa6f8c146045b0e33cf7782c0aa83d48e4a\", \"accounts\": { \"bd770416a3345f91e4b34576cb804a576fa48eb1\": { \"balance\": \"0\", \"nonce\": 1, \"root\": \"0x..\", \"codeHash\": \"0x..\", \"code\": \"0x..\", \"storage\": { \"0x0000000000000000000000000000000000000000000000000000000000000000\": \"0x000000000000000000000000000000000000000000000000000000000000002a\" } } } }","title":"\u6c38\u4e45\u5185\u5b58"},{"location":"content/blockchain/evm/#_4","text":"\u64cd\u4f5c\u7801\u5c06 EVM Code \u6620\u5c04\u4e3a\u5177\u4f53\u6267\u884c\u903b\u8f91. \u4ece\u4ea4\u4e92\u5bf9\u8c61\u4e0a\u6765\u8bf4, \u64cd\u4f5c\u7801\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u51e0\u4e2a\u6709\u660e\u663e\u533a\u5206\u7684\u90e8\u5206: \u4e0e\u6808\u4ea4\u4e92\u7684\u64cd\u4f5c\u7801 \u4e0e\u4e34\u65f6\u5185\u5b58\u4ea4\u4e92\u7684\u64cd\u4f5c\u7801 \u4e0e\u6c38\u4e45\u5185\u5b58\u4ea4\u4e92\u7684\u64cd\u4f5c\u7801 \u4e0e EVM \u6267\u884c\u4e0a\u4e0b\u6587\u4ea4\u4e92\u7684\u64cd\u4f5c\u7801 \u4e0b\u9762\u7b80\u8981\u6f14\u793a\u51e0\u79cd\u64cd\u4f5c\u7801\u7684\u6267\u884c\u8fc7\u7a0b: ADD ADD \u64cd\u4f5c\u7801\u7684\u503c\u662f 0x01. \u5b83\u8868\u793a\u4ece\u6808\u4e2d POP \u4e24\u4e2a\u5143\u7d20, \u76f8\u52a0\u540e\u91cd\u65b0 PUSH \u5165\u6808. |------------| |------------| | 0000: 0x01 | | 0000: 0x02 | | 0001: 0x01 | | 0001: | | . | --> EVM Code: 0x01 --> | . | | . | | . | | 1023: | | 1023 | |------------| |------------| BALANCE BALANCE \u64cd\u4f5c\u7801\u7684\u503c\u662f 0x31. \u5b83\u8868\u793a\u4ece\u6808\u4e2d POP \u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u5730\u5740, \u4e4b\u540e\u53d6\u5f97\u8be5\u5730\u5740\u7684\u4f59\u989d, \u5e76\u5c06\u4f59\u989d PUSH \u5165\u6808. \u5047\u8bbe\u5730\u5740 0xbd770416a3345f91e4b34576cb804a576fa48eb1 \u7684\u4f59\u989d\u662f 2 Wei(\u4ee5\u592a\u5e01\u7684\u5355\u4f4d), \u5219: |--------------------------------------------------| |------------| | 0000: 0xbd770416a3345f91e4b34576cb804a576fa48eb1 | | 0000: 0x02 | | 0001: | | 0001: | | . | --> EVM Code: 0x31 --> | . | | . | | . | | 1023: | | 1023 | |--------------------------------------------------| |------------| MSTORE MSTORE \u64cd\u4f5c\u7801\u7684\u503c\u662f 0x52. \u5b83\u8868\u793a\u4ece\u6808\u4e2d POP \u4e24\u4e2a\u5143\u7d20, \u7b2c\u4e00\u4e2a\u4f5c\u4e3a\u4e34\u65f6\u5185\u5b58\u504f\u79fb\u503c, \u7b2c\u4e8c\u4e2a\u4f5c\u4e3a\u5b58\u50a8\u7684\u503c. \u5c06\u6570\u636e\u5199\u5165\u4e34\u65f6\u5185\u5b58. |----------------| |-------| | 0000: 0x00..00 | | 0000: | | 0001: 0x00..42 | | 0001: | | . | --> EVM Code: 0x52 --> | . | | . | | . | | 1023: | | 1023 | |----------------| |-------| \u4e34\u65f6\u5185\u5b58\u53d8\u5316 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 |...............\"| SSTORE SSTORE \u64cd\u4f5c\u7801\u7684\u503c\u662f 0x55. \u5b83\u8868\u793a\u4ece\u6808\u4e2d POP \u4e24\u4e2a\u5143\u7d20, \u7b2c\u4e00\u4e2a\u4f5c\u4e3a\u6c38\u4e45\u5185\u5b58\u504f\u79fb\u503c, \u7b2c\u4e8c\u4e2a\u4f5c\u4e3a\u5b58\u50a8\u7684\u503c, \u5c06\u6570\u636e\u5199\u5165\u6c38\u4e45\u5185\u5b58. \u5168\u90e8\u64cd\u4f5c\u7801\u7684\u610f\u4e49\u53ef\u53c2\u8003\u4ee5\u592a\u574a\u9ec4\u76ae\u4e66.","title":"\u64cd\u4f5c\u7801"},{"location":"content/blockchain/evm/#gas","text":"EVM \u662f\u56fe\u7075\u7b49\u4ef7\u7684, \u4e3a\u4e86\u9650\u5236\u6267\u884c\u4ea4\u6613\u6240\u9700\u7684\u5de5\u4f5c\u91cf, \u5f53 EVM \u6267\u884c\u4ea4\u6613\u65f6, Gas \u5c06\u6309\u7167\u7279\u5b9a\u89c4\u5219\u88ab\u9010\u6e10\u6d88\u8017. \u6bcf\u4e2a\u64cd\u4f5c\u7801\u90fd\u6709\u5176 Gas \u6d88\u8017\u91cf, \u65e0\u8bba\u6267\u884c\u5230\u4ec0\u4e48\u4f4d\u7f6e, \u4e00\u65e6 Gas \u88ab\u8017\u5c3d, \u5c06\u4f1a\u89e6\u53d1\u4e00\u4e2a out-of-gas \u5f02\u5e38. \u5f53\u524d\u8c03\u7528\u5e27\u6240\u505a\u7684\u6240\u6709\u72b6\u6001\u4fee\u6539\u90fd\u5c06\u88ab\u56de\u6eda. Gas \u4f9d\u636e\u64cd\u4f5c\u7801\u6267\u884c\u7684\u9884\u671f\u8d44\u6e90\u6d88\u8017\u5b9a\u4e49. \u6bd4\u5982 ADD(\u52a0\u6cd5) \u64cd\u4f5c\u7801\u6d88\u8017 2 Gas, \u800c DIV(\u9664\u6cd5) \u64cd\u4f5c\u7801\u6d88\u8017 3 Gas. \u540c\u65f6, \u5185\u5b58\u6269\u5bb9, \u6570\u636e\u62f7\u8d1d\u7b49\u64cd\u4f5c\u540c\u6837\u4f1a\u6d88\u8017 Gas, \u5e76\u4e14\u6570\u636e\u91cf\u8d8a\u5927, \u6d88\u8017 Gas \u8d8a\u591a. \u5728 EVM \u6267\u884c\u8fc7\u7a0b\u4e2d, Gas \u7684\u6263\u8d39\u662f\u5148\u4e8e\u64cd\u4f5c\u7801\u6267\u884c\u7684. \u8be6\u7ec6 Gas \u6d88\u8017\u89c4\u5219\u53ef\u53c2\u8003\u4ee5\u592a\u574a\u9ec4\u76ae\u4e66.","title":"Gas"},{"location":"content/blockchain/evm/#_5","text":"\u6211\u4eec\u4f7f\u7528\u4e00\u6bb5\u771f\u5b9e EVM Code, \u4eba\u5de5\u6a21\u62df EVM \u6267\u884c\u8fc7\u7a0b. EVM Code: 0x603760005360005160005560016000f3 \u7b49\u4ef7\u7684 EVM Assembly: PUSH1 0x37 PUSH1 0x00 MSTORE8 PUSH1 0x00 MLOAD PUSH1 0x00 SSTORE PUSH1 0x01 PUSH1 0x00 RETURN \u5047\u8bbe\u521d\u59cb Gas \u4e3a 100000, \u6a21\u62df\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b: PUSH1 pc=00000000 gas=100000 cost=3 PUSH1 pc=00000002 gas=99997 cost=3 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000037 MSTORE8 pc=00000004 gas=99994 cost=6 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000000 00000001 0000000000000000000000000000000000000000000000000000000000000037 Memory: 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| PUSH1 pc=00000005 gas=99988 cost=3 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| MLOAD pc=00000007 gas=99985 cost=3 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000000 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| PUSH1 pc=00000008 gas=99982 cost=3 Stack: 00000000 3700000000000000000000000000000000000000000000000000000000000000 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| SSTORE pc=00000010 gas=99979 cost=20000 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000000 00000001 3700000000000000000000000000000000000000000000000000000000000000 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| Storage: 0000000000000000000000000000000000000000000000000000000000000000: 3700000000000000000000000000000000000000000000000000000000000000 PUSH1 pc=00000011 gas=79979 cost=3 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| Storage: 0000000000000000000000000000000000000000000000000000000000000000: 3700000000000000000000000000000000000000000000000000000000000000 PUSH1 pc=00000013 gas=79976 cost=3 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000001 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| Storage: 0000000000000000000000000000000000000000000000000000000000000000: 3700000000000000000000000000000000000000000000000000000000000000 RETURN pc=00000015 gas=79973 cost=0 Stack: 00000000 0000000000000000000000000000000000000000000000000000000000000000 00000001 0000000000000000000000000000000000000000000000000000000000000001 Memory: 00000000 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |7...............| 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| Storage: 0000000000000000000000000000000000000000000000000000000000000000: 3700000000000000000000000000000000000000000000000000000000000000 Return = 37","title":"\u4e00\u6bb5\u793a\u4f8b\u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b"},{"location":"content/blockchain/evm/#evm_1","text":"\u4ec5\u652f\u6301 256 \u4f4d\u6574\u6570, \u5bfc\u81f4\u73b0\u884c 32/64 \u4f4d CPU \u65e0\u6cd5\u76f4\u63a5\u5904\u7406 EVM Code. 256 \u4f4d\u6574\u6570\u540c\u65f6\u9020\u6210\u5927\u91cf\u7684\u6570\u636e\u5197\u4f59, \u8fd9\u4f53\u73b0\u5728\u5185\u5b58\u5bfb\u5740, Gas \u8ba1\u7b97, EVM Code \u8df3\u8f6c\u7b49\u5730\u65b9(\u4f60\u51e0\u4e4e\u4e0d\u53ef\u80fd\u7528\u5230 2^256 \u7684\u5185\u5b58\u5bfb\u5740). Gas \u6a21\u578b\u4e0a\u7684\u7ecf\u6d4e\u95ee\u9898. EVM \u9f13\u52b1\u4f4e Gas \u6d88\u8017\u7684\u4ee3\u7801, \u800c\u4e0d\u9f13\u52b1\u9ad8\u6548\u7387\u7684\u4ee3\u7801, \u8fd9\u5bfc\u81f4\u4ee5\u592a\u574a\u533a\u5757\u94fe\u4e0a\u5b58\u5728\u5927\u91cf\u6027\u80fd\u4f4e\u6548, \u5197\u4f59\u4f46 Gas \u9ad8\u6548\u7684\u4ee3\u7801. \u6bd4\u5982\u4e3a\u4e86\u5bf9\u6297\u6ea2\u51fa\u800c\u7f16\u5199\u7684 SafeMath \u4ee3\u7801, \u8fd9\u4e00\u5c0f\u6bb5\u4ee3\u7801\u88ab\u5f00\u53d1\u8005\u590d\u5236\u4e86\u65e0\u6570\u6b21\u5e76\u90e8\u7f72\u5230\u4ee5\u592a\u574a\u4e0a. JUMP/JUMPI \u6307\u4ee4\u7684\u8bbe\u8ba1\u4f7f EVM \u5b57\u8282\u7801\u51e0\u4e4e\u65e0\u6cd5\u88ab\u9759\u6001\u5206\u6790. \u53c2\u770b EIP-615 .","title":"EVM \u7684\u7f3a\u9677\u4e0e\u4e0d\u8db3"},{"location":"content/blockchain/evm/#_6","text":"[1] Ethereum Yellow Paper: APPENDIX H. VIRTUAL MACHINE SPECIFICATION. P28. [2] Ethereum Yellow Paper: APPENDIX G. FEE SCHEDULE. P25.","title":"\u53c2\u8003\u6587\u732e"},{"location":"content/blockchain/merkle_tree/","text":"\u72b6\u6001\u6811\u5728\u533a\u5757\u94fe\u4e2d\u7684\u4f5c\u7528 \u4e3a\u4e86\u8bc1\u660e: \u4e00\u4e2a\u865a\u5047\u4ea4\u6613\u5728\u82b1\u8d39\u4e00\u7b14\u4e0d\u5b58\u5728\u7684 UTXO(UTXO \u6a21\u578b) \u4e00\u4e2a\u865a\u5047\u4ea4\u6613\u88ab\u5efa\u7acb\u5728\u4e00\u4e2a\u865a\u5047\u7684 state root \u4e0a(\u8d26\u53f7\u6a21\u578b) \u8f7b\u8282\u70b9\u4e2d, \u8bc1\u660e\u67d0\u4e2a\u72b6\u6001\u5b58\u5728 Merkle Tree \u9996\u5148, \u8ba9\u6211\u4eec\u4ece\u9ed8\u514b\u5c14\u6811(Merkle Tree)\u7684\u5f00\u59cb. \u9ed8\u514b\u5c14\u6811\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b58\u50a8\u952e\u503c\u6570\u636e\u7684\u65b9\u6848, \u6211\u4eec\u9996\u5148\u5bf9\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u5904\u7406, \u7136\u540e\u7ee7\u7eed\u6cbf\u6811\u8fdb\u884c\u54c8\u5e0c\u5904\u7406, \u76f4\u5230\u5230\u8fbe\u6839\u8282\u70b9\u4e3a\u6b62. \u7279\u6027 \u5feb\u901f\u91cd\u54c8\u5e0c. \u5f53\u6811\u8282\u70b9\u5185\u5bb9\u53d1\u751f\u53d8\u5316\u65f6, \u80fd\u591f\u5728\u524d\u4e00\u6b21\u54c8\u5e0c\u8ba1\u7b97\u7684\u57fa\u7840\u4e0a, \u4ec5\u4ec5\u5c06\u88ab\u4fee\u6539\u7684\u6811\u8282\u70b9\u8fdb\u884c\u54c8\u5e0c\u91cd\u8ba1\u7b97, \u4fbf\u80fd\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6839\u54c8\u5e0c\u7528\u6765\u4ee3\u8868\u6574\u68f5\u6811\u7684\u72b6\u6001. Merkle Proving \u9ed8\u514b\u5c14\u6811\u7684\u6839\u53ea\u662f\u4e00\u4e2a\u54c8\u5e0c, \u5b83\"\u627f\u8bfa\"\u62e5\u6709\u67d0\u4e9b\u6570\u636e, \u4f46\u5b83\u5e76\u4e0d\u5b9e\u9645\u544a\u8bc9\u6211\u4eec\u5173\u4e8e\u6811\u7684\u5185\u5bb9\u7684\u4efb\u4f55\u4fe1\u606f. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u9ed8\u514b\u5c14\u8bc1\u660e(Merkle Prove)\u7684\u624b\u6bb5\u6765\u8868\u660e\u67d0\u4e9b\u5185\u5bb9\u5b9e\u9645\u4e0a\u662f\u8be5\u6811\u7684\u4e00\u90e8\u5206. \u4f8b\u5982, \u5982\u679c\u8981\u8bc1\u660e A \u662f\u6811\u7684\u4e00\u90e8\u5206, \u9700\u8981\u505a\u7684\u662f: \u63d0\u4f9b A \u7684\u539f\u59cb\u5185\u5bb9 \u63d0\u4f9b Hash(B) \u63d0\u4f9b Hash(Hash(C) + Hash(D)) \u4efb\u4f55\u63a5\u6536\u5230\u4ee5\u4e0a\u4fe1\u606f\u7684\u63a5\u6536\u65b9, \u90fd\u53ef\u4ee5\u5bf9\u63d0\u4ea4\u7684\u6570\u636e\u72ec\u7acb\u9a8c\u8bc1\u5176\u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u7b49\u4e8e\u5df2\u77e5\u7684\u6839\u54c8\u5e0c. \u540c\u65f6\u63d0\u51fa\u65b9\u53ea\u9700\u8981\u63d0\u4f9b\u6811\u7684\u4e00\u90e8\u5206\u800c\u4e0d\u5fc5\u63d0\u4f9b\u6574\u9897\u6811. Trie \u524d\u7f00\u6811(Trie)\u53c8\u79f0\u4e3a\u5b57\u5178\u6811, \u662f\u4e00\u79cd\u6709\u5e8f\u6811, \u7528\u4e8e\u4fdd\u5b58\u5173\u8054\u6570\u636e. \u5176\u4e2d\u7684\u952e\u901a\u5e38\u662f\u5b57\u7b26\u4e32. \u4e0e\u4e8c\u53c9\u67e5\u627e\u6811\u4e0d\u540c, \u952e\u4e0d\u662f\u76f4\u63a5\u4fdd\u5b58\u5728\u8282\u70b9\u4e2d, \u800c\u662f\u7531\u8282\u70b9\u5728\u6811\u4e2d\u7684\u4f4d\u7f6e\u51b3\u5b9a. \u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u5b59\u90fd\u6709\u76f8\u540c\u7684\u524d\u7f00, \u4e5f\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32, \u800c\u6839\u8282\u70b9\u5bf9\u5e94\u7a7a\u5b57\u7b26\u4e32. \u5982\u4e0b\u662f\u4fdd\u5b58\u4e86\u5b57\u7b26\u4e32 \"a\", \"b\", \"at\", \"atm\", \"ao\" \u7684\u524d\u7f00\u6811. \u901a\u5e38\u6765\u8bf4, \u5728\u5b9e\u73b0\u524d\u7f00\u6811\u7684\u65f6\u5019, \u4f1a\u5728\u8282\u70b9\u52a0\u5165\u4e00\u4e2a\u5b57\u6bb5\u6765\u8868\u660e\u5176\u662f\u5426\u662f\u4e00\u4e2a\u5b8c\u6574\u5355\u8bcd. \u524d\u7f00\u6811\u5e38\u7528\u4e8e\u641c\u7d22\u63d0\u793a. \u5982\u5f53\u8f93\u5165\u4e00\u4e2a\u7f51\u5740, \u53ef\u4ee5\u81ea\u52a8\u641c\u7d22\u51fa\u53ef\u80fd\u7684\u9009\u62e9. \u5f53\u6ca1\u6709\u5b8c\u5168\u5339\u914d\u7684\u641c\u7d22\u7ed3\u679c, \u53ef\u4ee5\u8fd4\u56de\u524d\u7f00\u6700\u76f8\u4f3c\u7684\u53ef\u80fd. \u7279\u6027 \u76f8\u6bd4\u4e8e\u54c8\u5e0c\u8868, \u4f7f\u7528\u524d\u7f00\u6811\u6765\u8fdb\u884c\u67e5\u8be2\u62e5\u6709\u5171\u540c\u524d\u7f00\u7684\u6570\u636e\u65f6\u5341\u5206\u9ad8\u6548, \u4f8b\u5982\u5728\u5b57\u5178\u4e2d\u67e5\u627e\u524d\u7f00\u4e3a pre \u7684\u5355\u8bcd, \u5bf9\u4e8e\u54c8\u5e0c\u8868\u6765\u8bf4, \u9700\u8981\u904d\u5386\u6574\u4e2a\u8868, \u65f6\u95f4\u6548\u7387\u4e3a O(n), \u7136\u800c\u5bf9\u4e8e\u524d\u7f00\u6811\u6765\u8bf4, \u53ea\u9700\u8981\u5728\u6811\u4e2d\u627e\u5230\u524d\u7f00\u4e3a pre \u7684\u8282\u70b9, \u4e14\u904d\u5386\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5373\u53ef. \u4f46\u662f\u5bf9\u4e8e\u6700\u5dee\u7684\u60c5\u51b5(\u524d\u7f00\u4e3a\u7a7a\u4e32), \u65f6\u95f4\u6548\u7387\u4e3a O(n), \u4ecd\u7136\u9700\u8981\u904d\u5386\u6574\u68f5\u6811, \u6b64\u65f6\u6548\u7387\u4e0e\u54c8\u5e0c\u8868\u76f8\u540c. \u76f8\u6bd4\u4e8e\u54c8\u5e0c\u8868, \u524d\u7f00\u6811\u4e0d\u4f1a\u5b58\u5728\u54c8\u5e0c\u51b2\u7a81\u7684\u95ee\u9898. \u76f4\u63a5\u67e5\u627e\u6548\u7387\u4f4e\u4e0b. \u524d\u7f00\u6811\u7684\u67e5\u627e\u6548\u7387\u662f O(m), m \u4e3a\u6240\u67e5\u627e\u8282\u70b9\u7684 key \u957f\u5ea6, \u800c\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u6548\u7387\u4e3a O(1). \u4e14\u4e00\u6b21\u67e5\u627e\u4f1a\u6709 m \u6b21 IO \u5f00\u9500, \u76f8\u6bd4\u4e8e\u76f4\u63a5\u67e5\u627e, \u65e0\u8bba\u662f\u901f\u7387\u8fd8\u662f\u5bf9\u78c1\u76d8\u7684\u538b\u529b\u90fd\u6bd4\u8f83\u5927. \u7a7a\u95f4\u6d6a\u8d39. \u5f53\u5b58\u5728\u4e00\u4e2a\u8282\u70b9\u5176 key \u503c\u5185\u5bb9\u5f88\u957f(\u5982\u4e00\u4e32\u5f88\u957f\u7684\u5b57\u7b26\u4e32), \u5f53\u6811\u4e2d\u6ca1\u6709\u4e0e\u4ed6\u76f8\u540c\u524d\u7f00\u7684\u5206\u652f\u65f6, \u4e3a\u4e86\u5b58\u50a8\u8be5\u8282\u70b9, \u9700\u8981\u521b\u5efa\u8bb8\u591a\u975e\u53f6\u5b50\u8282\u70b9\u6765\u6784\u5efa\u6839\u8282\u70b9\u5230\u8be5\u8282\u70b9\u95f4\u7684\u8def\u5f84, \u9020\u6210\u4e86\u5b58\u50a8\u7a7a\u95f4\u7684\u6d6a\u8d39. Radix Trie \u538b\u7f29\u524d\u7f00\u6811(Radix Trie)\u662f\u4e00\u79cd\u66f4\u8282\u7701\u7a7a\u95f4\u7684\u524d\u7f00\u6811. \u5176\u4e2d\u4f5c\u4e3a\u552f\u4e00\u5b50\u8282\u70b9\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u4e0e\u5176\u7236\u8282\u70b9\u5408\u5e76, \u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u65e2\u53ef\u4ee5\u8868\u793a\u4e3a\u5143\u7d20\u5e8f\u5217\u53c8\u53ef\u4ee5\u8868\u793a\u4e3a\u5355\u4e2a\u5143\u7d20. \u538b\u7f29\u524d\u7f00\u6811\u66f4\u9002\u7528\u4e8e\u5bf9\u4e8e\u8f83\u5c0f\u7684\u96c6\u5408(\u5c24\u5176\u662f\u5b57\u7b26\u4e32\u5f88\u957f\u7684\u60c5\u51b5\u4e0b)\u548c\u6709\u5f88\u957f\u76f8\u540c\u524d\u7f00\u7684\u5b57\u7b26\u4e32\u96c6\u5408. Merkle Patricia Tree Merkle Patricia Tree \u662f\u4ee5\u592a\u574a 1.0 \u7528\u4e8e\u5b58\u50a8\u4e16\u754c\u72b6\u6001\u7684\u6570\u636e\u7ed3\u6784, \u5b83\u662f\u4e00\u79cd\u7ecf\u8fc7\u6539\u826f\u4e14\u878d\u5408\u4e86 Merkle Tree \u548c Radix Tree \u4e24\u79cd\u6811\u7ed3\u6784\u4f18\u70b9\u7684\u6570\u636e\u7ed3\u6784. \u5b83\u4ee5 Radix Tree \u4e3a\u57fa\u7840, \u901a\u8fc7\u5411\u6570\u636e\u7ed3\u6784\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u590d\u6742\u6027\u6765\u89e3\u51b3\u6548\u7387\u4f4e\u4e0b\u7684\u95ee\u9898. Merkle Patricia Trie \u4e2d\u7684\u8282\u70b9\u6709\u5982\u4e0b\u7684\u79cd\u7c7b: NULL(\u8868\u793a\u4e3a\u7a7a\u5b57\u7b26\u4e32) Branch(\u5206\u652f\u8282\u70b9), \u603b\u5171\u6709 17 \u5b50\u9879, \u4e3a [v0 ... v15, vt] Leaf(\u53f6\u5b50\u8282\u70b9), \u603b\u5171\u6709 2 \u4e2a\u5b50\u9879, \u4e3a [encodePath, value] Extension(\u6269\u5c55\u8282\u70b9), \u603b\u5171\u6709 2 \u4e2a\u5b50\u9879, \u4e3a [encodePath, key] Compact encoding of hex sequence with optional terminator hex char bits node type partial path length 0 0000 extension even 1 0001 extension odd 2 0010 terminating (leaf) even 3 0011 terminating (leaf) odd \u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8868\u793a MPT \u7684\u6784\u5efa\u8fc7\u7a0b, \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u5305\u542b\u56db\u4e2a\u952e\u503c\u5bf9\u7684\u6811: ('do', 'verb'), ('dog', 'puppy'), ('doge', 'coin'), ('horse', 'stallion'). \u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d, \u9700\u8981\u5c06 key/value \u8868\u793a\u4e3a 16 \u8fdb\u5236\u683c\u5f0f. 646f: 'verb' 646f67: 'puppy' 646f6765: 'coin' 686f727365: 'stallion' \u5176\u524d\u7f00\u6811\u53ef\u8868\u793a\u5982\u4e0b: 6 -----> 46f ....................... 'verb' | |----->67 ............. 'puppy' | |-----> 65 .. 'coin' |----> 86f727365 ................. 'stallion' \u5b83\u7684 MPT \u6811\u90e8\u5206\u5982\u4e0b, \u9700\u8981\u6ce8\u610f\u5176\u952e\u662f\u7ecf\u8fc7 \"Compact encoding of hex sequence with optional terminator\" \u7684. \u4e0b\u56fe\u8868\u793a\u4e86 ('dog', 'puppy') \u5728\u6811\u4e2d\u7684\u4fdd\u5b58\u65b9\u5f0f. \u5176\u6574\u9897\u6811\u4ee5\u5982\u4e0b\u7684\u952e\u503c\u5bf9\u5f62\u5f0f\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d: rootHash: [ <16>, hashA ] hashA: [ <>, <>, <>, <>, hashB, <>, <>, <>, hashC, <>, <>, <>, <>, <>, <>, <>, <> ] hashC: [ <20 6f 72 73 65>, 'stallion' ] hashB: [ <00 6f>, hashD ] hashD: [ <>, <>, <>, <>, <>, <>, hashE, <>, <>, <>, <>, <>, <>, <>, <>, <>, 'verb' ] hashE: [ <17>, hashF ] hashF: [ <>, <>, <>, <>, <>, <>, hashG, <>, <>, <>, <>, <>, <>, <>, <>, <>, 'puppy' ] hashG: [ <35>, 'coin' ] Sparse Merkle Tree \u9ed8\u514b\u5c14\u6811\u53ef\u4ee5\u8bc1\u660e\u4e00\u4e2a\u6570\u636e\u5305\u542b\u5728\u6811\u4e2d, \u4f46\u5b83\u5374\u65e0\u6cd5\u8bc1\u660e\u4e00\u4e2a\u6570\u636e \u4e0d \u5305\u542b\u5728\u6811\u4e2d. \u7a00\u758f\u7684\u9ed8\u514b\u5c14\u6811(Sparse Merkle Tree)\u5728\u8fd9\u91cc\u53d1\u6325\u4e86\u4f5c\u7528. \u7a00\u758f\u7684\u9ed8\u514b\u5c14\u6811\u7c7b\u4f3c\u4e8e\u6807\u51c6\u7684\u9ed8\u514b\u5c14\u6811, \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5bf9\u5305\u542b\u7684\u6570\u636e\u8fdb\u884c\u4e86\u7d22\u5f15, \u5e76\u4e14\u6bcf\u4e2a\u6570\u636e\u70b9\u90fd\u653e\u7f6e\u5728\u4e0e\u8be5\u6570\u636e\u70b9\u7684\u7d22\u5f15\u76f8\u5bf9\u5e94\u7684\u53f6\u5b50\u4e0a(\u5373\u4f7f\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\u662f\u7a7a\u7684). \u4e3a\u4e86\u8bc1\u660e C \u4e0d\u5b58\u5728\u6811\u4e2d, \u53ea\u9700\u8981\u50cf\u6807\u51c6\u9ed8\u514b\u5c14\u6811\u7684\u5b58\u5728\u8bc1\u660e\u4e00\u6837\u8bc1\u660e C \u4e3a\u7a7a\u5c31\u884c\u4e86! \u7279\u6027 \u7a00\u758f\u9ed8\u514b\u5c14\u6811\u771f\u7684\u975e\u5e38\u7a00\u758f, \u56e0\u6b64\u9700\u8981\u82b1\u8d39\u5927\u91cf\u7684\u7a7a\u95f4\u53bb\u5b58\u50a8\u5b83(2^256)! \u7531\u4e8e\u4e0d\u662f\u524d\u7f00\u6811, \u8bbf\u95ee\u4e00\u4e2a key \u503c\u9700\u8981\u66f4\u591a\u7684 db read \u6b21\u6570. \u4e0d\u4f46\u53ef\u4ee5\u8bc1\u660e\u4f60\u62e5\u6709\u67d0\u4e2a\u8d44\u4ea7, \u8fd8\u53ef\u4ee5\u8bc1\u660e\u4f60\u6ca1\u6709\u67d0\u4e2a\u8d44\u4ea7. \u76f8\u5173\u8ba8\u8bba https://ethereum.stackexchange.com/questions/57761/eli5-sparse-merkle-trees-on-sharding SMT \u51e0\u4e4e\u53ef\u4ee5\u5728\u4f7f\u7528(\u6216\u8ba1\u5212\u4f7f\u7528) Merkle Patricia Tries \u7684\u4efb\u4f55\u5730\u65b9\u5b9e\u73b0\u66ff\u6362 \u4ee5\u592a\u574a\u7684 MPT \u7684\u5b9e\u65bd\u548c\u4f7f\u7528\u90fd\u975e\u5e38\u590d\u6742, SMT \u65b9\u5f0f\u66f4\u7b80\u5355, \u6548\u7387\u4e5f\u5dee\u4e0d\u591a https://ethresear.ch/t/data-availability-proof-friendly-state-tree-transitions/1453 \u6587\u4e2d\u6307\u51fa\u9ed8\u514b\u5c14\u6811\u7684\u4e00\u4e2a\u95ee\u9898, \u5373\u4e00\u4e2a\u6076\u610f\u77ff\u5de5\u53ef\u4ee5\u521b\u5efa\u5e26\u6709\u6b3a\u8bc8\u6027 state root \u7684\u533a\u5757\u94fe, \u8be5\u72b6\u6001\u6811\u6839\u4e0e\u8be5\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u8fdb\u884c\u7684\u72b6\u6001\u8f6c\u6362\u4e0d\u5339\u914d, \u56e0\u6b64\u6ca1\u6709\u4eba\u80fd\u591f\u627e\u5230\u8bc1\u660e\u8be5\u6811\u4e2d\u5305\u542b\u4efb\u4f55\u72b6\u6001\u7684\u8bc1\u636e, \u6216\u8005\u8bc1\u660e\u6811\u4e2d\u5305\u542b\u6b3a\u8bc8\u6027\u7684\u72b6\u6001, \u56e0\u4e3a\u4ed6\u4eec\u6ca1\u6709\u76f8\u5173\u6570\u636e. \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u6574\u4e2a\u72b6\u6001\u6811\u7684\u6570\u636e\u53ef\u7528\u6027\u8bc1\u660e\u6765\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5, \u4f46\u662f, \u8fd9\u8981\u6c42\u8282\u70b9\u5728\u6bcf\u4e2a\u5757\u4e2d\u5e7f\u64ad\u7cfb\u7edf\u7684\u6574\u4e2a\u72b6\u6001, \u8fd9\u5f53\u7136\u4e0d\u662f\u5f88\u6709\u6548. \u89e3\u51b3\u529e\u6cd5\u662f\u5728 Block Header \u4e2d\u5305\u542b\u591a\u4e2a\u4e2d\u95f4 state root \u800c\u975e\u4e00\u4e2a\u6700\u7ec8\u7684 state root. SMT \u7684\u4f18\u5316\u7684\u89e3\u51b3\u65b9\u6848: https://www.links.org/files/RevocationTransparency.pdf , https://eprint.iacr.org/2016/683.pdf , \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u63d0\u524d\u5b58\u50a8 Hash(Null), Hash(Hash(Null) + Hash(Null) ... ) ... SMT \u7684\u4e00\u4e2a\u72b6\u6001\u8f6c\u6362\u65f6\u95f4\u590d\u6742\u5ea6\u6c38\u8fdc\u56fa\u5b9a\u662f O(log(n)), \u4e14 \"Sparse merkle trees are used because they do not have to be rebalanced\". Vitalik \u5728\u8bc4\u8bba\u505a\u4e86\u5206\u6790, \u8ba4\u4e3a: Proof \u8bc1\u660e\u7684\u5927\u5c0f\u5e94\u8be5\u4e0e MPT \u76f8\u5f53 \u4ece\u6982\u5ff5\u4e0a, SMT \u4e0e MPT \u6240\u80fd\u5b9e\u73b0\u7684\u529f\u80fd\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837, \u4f46\u80dc\u5728\u5b9e\u73b0\u7b80\u5355, \u6709 \u5de8\u5927 \u4f18\u52bf. https://www.deadalnix.me/2016/09/24/introducing-merklix-tree-as-an-unordered-merkle-tree-on-steroid/ MPT \u5728\u96c6\u5408\u7684\u4e2d\u95f4\u63d2\u5165\u6216\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u5c06\u9700\u8981\u5927\u91cf\u7684\u8fd0\u7b97, \u5982\u679c\u9700\u8981 2 \u4e2a\u5305\u542b\u76f8\u540c\u5143\u7d20\u7684\u96c6\u5408, \u4f46\u662f\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u63d2\u5165\u5c06\u4ea7\u751f 2 \u4e2a\u6839\u672c\u4e0d\u540c\u7684\u6811. \u540c\u4e00\u7ec4\u5143\u7d20\u603b\u662f\u4f1a\u4ea7\u751f\u540c\u6837\u7684\u6839, \u8fd9\u5bf9\u4e8e\u5f88\u96be\u7ef4\u62a4\u4e00\u81f4\u6027\u7684\u7cfb\u7edf\u975e\u5e38\u91cd\u8981, \u8fd9\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u5f88\u5e38\u89c1. \u65e0\u8bba\u5b83\u4eec\u5982\u4f55\u5230\u8fbe, \u7cfb\u7edf\u7684\u8282\u70b9\u6700\u7ec8\u90fd\u5c06\u6536\u655b\u5230\u76f8\u540c\u7684\u96c6\u5408\u548c\u76f8\u540c\u7684\u6839. https://medium.com/@ouvrard.pierre.alain/sparse-merkle-tree-86e6e2fc26da SMT \u53ef\u4ee5\u5e76\u53d1\u66f4\u65b0\u952e\u503c. \"The keys should be sorted in an array, and the corresponding values should be at the same index in a separate array\", \u76f8\u5173\u4ee3\u7801\u5b9e\u73b0\u5728 https://github.com/aergoio/SMT . https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751 , SMT \u7684\u4f18\u5316\u6280\u5de7 zero branch \u7684\u9884\u8ba1\u7b97 \u5982\u679c\u6709\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5b50\u6811, \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5b58\u50a8\u4e00\u6761\u8bb0\u5f55, \u8be5\u8bb0\u5f55\u8bf4\u660e\u503c\u662f\u4ec0\u4e48, \u952e\u662f\u4ec0\u4e48\u4ee5\u53ca\u54c8\u5e0c\u662f\u4ec0\u4e48(\u4ee5\u907f\u514d\u5fc5\u987b\u91cd\u65b0\u8ba1\u7b97). \u5b83\u53ef\u4ee5\u5c06 db read \u64cd\u4f5c\u6b21\u6570\u964d\u4f4e\u81f3\u548c MPT \u4e00\u6837. \u4f7f\u7528 Hex \u4f5c\u4e3a\u952e\u800c\u975e\u4e8c\u53c9\u6811, \u53ef\u4ee5\u4f7f db read \u6b21\u6570\u964d\u4f4e 3-4 \u500d plasma \u56e2\u961f\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8be5\u6587\u7ae0\u63d0\u9ad8\u7684\u5168\u90e8\u4f18\u5316 Does the further design you describe require changing the on-chain verifier? No. The consensus rules are 100% the same, the hashes are 100% the same, the proofs are 100% the same, it\u2019s a purely voluntary client-side change that different clients can implement differently. This is precisely why this is interesting. \u5982\u679c\u7ea6\u5b9a H(0, 0) = 0, \u5219\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6027\u80fd\u4f18\u5316! https://github.com/ethereum/eth2.0-specs/issues/1472 SMT \u5728 Libra \u4e2d\u7684\u5b9e\u73b0 \u6e90\u7801: https://github.com/libra/libra/tree/master/storage/jellyfish-merkle/src Libra SMT \u4e00\u5171\u6709\u4e09\u79cd\u8282\u70b9, \u4e0e MPT \u57fa\u672c\u4e00\u81f4. Branch Extension Leaf \u7531\u4e8e\u6dfb\u52a0\u4e86\u53f6\u8282\u70b9, \u5e76\u4e14 Branch \u662f\u524d\u7f00\u5f0f\u7684, \u4ee5\u592a\u574a\u793e\u533a\u5c06\u4e4b\u79f0\u4e3a\"\u7a00\u758f\u7d27\u51d1\u578b\u9ed8\u514b\u5c14\u6811\"(\u4e24\u4e2a\u53cd\u4e49\u8bcd\u5728\u4e00\u8d77\u5374\u6beb\u65e0\u8fdd\u548c\u611f, \u5c45\u7136\u8fd8\u80fd\u7406\u89e3\u662f\u4ec0\u4e48\u610f\u601d...).","title":"Merkle Tree"},{"location":"content/blockchain/merkle_tree/#_1","text":"\u4e3a\u4e86\u8bc1\u660e: \u4e00\u4e2a\u865a\u5047\u4ea4\u6613\u5728\u82b1\u8d39\u4e00\u7b14\u4e0d\u5b58\u5728\u7684 UTXO(UTXO \u6a21\u578b) \u4e00\u4e2a\u865a\u5047\u4ea4\u6613\u88ab\u5efa\u7acb\u5728\u4e00\u4e2a\u865a\u5047\u7684 state root \u4e0a(\u8d26\u53f7\u6a21\u578b) \u8f7b\u8282\u70b9\u4e2d, \u8bc1\u660e\u67d0\u4e2a\u72b6\u6001\u5b58\u5728","title":"\u72b6\u6001\u6811\u5728\u533a\u5757\u94fe\u4e2d\u7684\u4f5c\u7528"},{"location":"content/blockchain/merkle_tree/#merkle-tree","text":"\u9996\u5148, \u8ba9\u6211\u4eec\u4ece\u9ed8\u514b\u5c14\u6811(Merkle Tree)\u7684\u5f00\u59cb. \u9ed8\u514b\u5c14\u6811\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b58\u50a8\u952e\u503c\u6570\u636e\u7684\u65b9\u6848, \u6211\u4eec\u9996\u5148\u5bf9\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u5904\u7406, \u7136\u540e\u7ee7\u7eed\u6cbf\u6811\u8fdb\u884c\u54c8\u5e0c\u5904\u7406, \u76f4\u5230\u5230\u8fbe\u6839\u8282\u70b9\u4e3a\u6b62. \u7279\u6027 \u5feb\u901f\u91cd\u54c8\u5e0c. \u5f53\u6811\u8282\u70b9\u5185\u5bb9\u53d1\u751f\u53d8\u5316\u65f6, \u80fd\u591f\u5728\u524d\u4e00\u6b21\u54c8\u5e0c\u8ba1\u7b97\u7684\u57fa\u7840\u4e0a, \u4ec5\u4ec5\u5c06\u88ab\u4fee\u6539\u7684\u6811\u8282\u70b9\u8fdb\u884c\u54c8\u5e0c\u91cd\u8ba1\u7b97, \u4fbf\u80fd\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6839\u54c8\u5e0c\u7528\u6765\u4ee3\u8868\u6574\u68f5\u6811\u7684\u72b6\u6001.","title":"Merkle Tree"},{"location":"content/blockchain/merkle_tree/#merkle-proving","text":"\u9ed8\u514b\u5c14\u6811\u7684\u6839\u53ea\u662f\u4e00\u4e2a\u54c8\u5e0c, \u5b83\"\u627f\u8bfa\"\u62e5\u6709\u67d0\u4e9b\u6570\u636e, \u4f46\u5b83\u5e76\u4e0d\u5b9e\u9645\u544a\u8bc9\u6211\u4eec\u5173\u4e8e\u6811\u7684\u5185\u5bb9\u7684\u4efb\u4f55\u4fe1\u606f. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u9ed8\u514b\u5c14\u8bc1\u660e(Merkle Prove)\u7684\u624b\u6bb5\u6765\u8868\u660e\u67d0\u4e9b\u5185\u5bb9\u5b9e\u9645\u4e0a\u662f\u8be5\u6811\u7684\u4e00\u90e8\u5206. \u4f8b\u5982, \u5982\u679c\u8981\u8bc1\u660e A \u662f\u6811\u7684\u4e00\u90e8\u5206, \u9700\u8981\u505a\u7684\u662f: \u63d0\u4f9b A \u7684\u539f\u59cb\u5185\u5bb9 \u63d0\u4f9b Hash(B) \u63d0\u4f9b Hash(Hash(C) + Hash(D)) \u4efb\u4f55\u63a5\u6536\u5230\u4ee5\u4e0a\u4fe1\u606f\u7684\u63a5\u6536\u65b9, \u90fd\u53ef\u4ee5\u5bf9\u63d0\u4ea4\u7684\u6570\u636e\u72ec\u7acb\u9a8c\u8bc1\u5176\u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u7b49\u4e8e\u5df2\u77e5\u7684\u6839\u54c8\u5e0c. \u540c\u65f6\u63d0\u51fa\u65b9\u53ea\u9700\u8981\u63d0\u4f9b\u6811\u7684\u4e00\u90e8\u5206\u800c\u4e0d\u5fc5\u63d0\u4f9b\u6574\u9897\u6811.","title":"Merkle Proving"},{"location":"content/blockchain/merkle_tree/#trie","text":"\u524d\u7f00\u6811(Trie)\u53c8\u79f0\u4e3a\u5b57\u5178\u6811, \u662f\u4e00\u79cd\u6709\u5e8f\u6811, \u7528\u4e8e\u4fdd\u5b58\u5173\u8054\u6570\u636e. \u5176\u4e2d\u7684\u952e\u901a\u5e38\u662f\u5b57\u7b26\u4e32. \u4e0e\u4e8c\u53c9\u67e5\u627e\u6811\u4e0d\u540c, \u952e\u4e0d\u662f\u76f4\u63a5\u4fdd\u5b58\u5728\u8282\u70b9\u4e2d, \u800c\u662f\u7531\u8282\u70b9\u5728\u6811\u4e2d\u7684\u4f4d\u7f6e\u51b3\u5b9a. \u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u5b59\u90fd\u6709\u76f8\u540c\u7684\u524d\u7f00, \u4e5f\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32, \u800c\u6839\u8282\u70b9\u5bf9\u5e94\u7a7a\u5b57\u7b26\u4e32. \u5982\u4e0b\u662f\u4fdd\u5b58\u4e86\u5b57\u7b26\u4e32 \"a\", \"b\", \"at\", \"atm\", \"ao\" \u7684\u524d\u7f00\u6811. \u901a\u5e38\u6765\u8bf4, \u5728\u5b9e\u73b0\u524d\u7f00\u6811\u7684\u65f6\u5019, \u4f1a\u5728\u8282\u70b9\u52a0\u5165\u4e00\u4e2a\u5b57\u6bb5\u6765\u8868\u660e\u5176\u662f\u5426\u662f\u4e00\u4e2a\u5b8c\u6574\u5355\u8bcd. \u524d\u7f00\u6811\u5e38\u7528\u4e8e\u641c\u7d22\u63d0\u793a. \u5982\u5f53\u8f93\u5165\u4e00\u4e2a\u7f51\u5740, \u53ef\u4ee5\u81ea\u52a8\u641c\u7d22\u51fa\u53ef\u80fd\u7684\u9009\u62e9. \u5f53\u6ca1\u6709\u5b8c\u5168\u5339\u914d\u7684\u641c\u7d22\u7ed3\u679c, \u53ef\u4ee5\u8fd4\u56de\u524d\u7f00\u6700\u76f8\u4f3c\u7684\u53ef\u80fd. \u7279\u6027 \u76f8\u6bd4\u4e8e\u54c8\u5e0c\u8868, \u4f7f\u7528\u524d\u7f00\u6811\u6765\u8fdb\u884c\u67e5\u8be2\u62e5\u6709\u5171\u540c\u524d\u7f00\u7684\u6570\u636e\u65f6\u5341\u5206\u9ad8\u6548, \u4f8b\u5982\u5728\u5b57\u5178\u4e2d\u67e5\u627e\u524d\u7f00\u4e3a pre \u7684\u5355\u8bcd, \u5bf9\u4e8e\u54c8\u5e0c\u8868\u6765\u8bf4, \u9700\u8981\u904d\u5386\u6574\u4e2a\u8868, \u65f6\u95f4\u6548\u7387\u4e3a O(n), \u7136\u800c\u5bf9\u4e8e\u524d\u7f00\u6811\u6765\u8bf4, \u53ea\u9700\u8981\u5728\u6811\u4e2d\u627e\u5230\u524d\u7f00\u4e3a pre \u7684\u8282\u70b9, \u4e14\u904d\u5386\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5373\u53ef. \u4f46\u662f\u5bf9\u4e8e\u6700\u5dee\u7684\u60c5\u51b5(\u524d\u7f00\u4e3a\u7a7a\u4e32), \u65f6\u95f4\u6548\u7387\u4e3a O(n), \u4ecd\u7136\u9700\u8981\u904d\u5386\u6574\u68f5\u6811, \u6b64\u65f6\u6548\u7387\u4e0e\u54c8\u5e0c\u8868\u76f8\u540c. \u76f8\u6bd4\u4e8e\u54c8\u5e0c\u8868, \u524d\u7f00\u6811\u4e0d\u4f1a\u5b58\u5728\u54c8\u5e0c\u51b2\u7a81\u7684\u95ee\u9898. \u76f4\u63a5\u67e5\u627e\u6548\u7387\u4f4e\u4e0b. \u524d\u7f00\u6811\u7684\u67e5\u627e\u6548\u7387\u662f O(m), m \u4e3a\u6240\u67e5\u627e\u8282\u70b9\u7684 key \u957f\u5ea6, \u800c\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u6548\u7387\u4e3a O(1). \u4e14\u4e00\u6b21\u67e5\u627e\u4f1a\u6709 m \u6b21 IO \u5f00\u9500, \u76f8\u6bd4\u4e8e\u76f4\u63a5\u67e5\u627e, \u65e0\u8bba\u662f\u901f\u7387\u8fd8\u662f\u5bf9\u78c1\u76d8\u7684\u538b\u529b\u90fd\u6bd4\u8f83\u5927. \u7a7a\u95f4\u6d6a\u8d39. \u5f53\u5b58\u5728\u4e00\u4e2a\u8282\u70b9\u5176 key \u503c\u5185\u5bb9\u5f88\u957f(\u5982\u4e00\u4e32\u5f88\u957f\u7684\u5b57\u7b26\u4e32), \u5f53\u6811\u4e2d\u6ca1\u6709\u4e0e\u4ed6\u76f8\u540c\u524d\u7f00\u7684\u5206\u652f\u65f6, \u4e3a\u4e86\u5b58\u50a8\u8be5\u8282\u70b9, \u9700\u8981\u521b\u5efa\u8bb8\u591a\u975e\u53f6\u5b50\u8282\u70b9\u6765\u6784\u5efa\u6839\u8282\u70b9\u5230\u8be5\u8282\u70b9\u95f4\u7684\u8def\u5f84, \u9020\u6210\u4e86\u5b58\u50a8\u7a7a\u95f4\u7684\u6d6a\u8d39.","title":"Trie"},{"location":"content/blockchain/merkle_tree/#radix-trie","text":"\u538b\u7f29\u524d\u7f00\u6811(Radix Trie)\u662f\u4e00\u79cd\u66f4\u8282\u7701\u7a7a\u95f4\u7684\u524d\u7f00\u6811. \u5176\u4e2d\u4f5c\u4e3a\u552f\u4e00\u5b50\u8282\u70b9\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u4e0e\u5176\u7236\u8282\u70b9\u5408\u5e76, \u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u65e2\u53ef\u4ee5\u8868\u793a\u4e3a\u5143\u7d20\u5e8f\u5217\u53c8\u53ef\u4ee5\u8868\u793a\u4e3a\u5355\u4e2a\u5143\u7d20. \u538b\u7f29\u524d\u7f00\u6811\u66f4\u9002\u7528\u4e8e\u5bf9\u4e8e\u8f83\u5c0f\u7684\u96c6\u5408(\u5c24\u5176\u662f\u5b57\u7b26\u4e32\u5f88\u957f\u7684\u60c5\u51b5\u4e0b)\u548c\u6709\u5f88\u957f\u76f8\u540c\u524d\u7f00\u7684\u5b57\u7b26\u4e32\u96c6\u5408.","title":"Radix Trie"},{"location":"content/blockchain/merkle_tree/#merkle-patricia-tree","text":"Merkle Patricia Tree \u662f\u4ee5\u592a\u574a 1.0 \u7528\u4e8e\u5b58\u50a8\u4e16\u754c\u72b6\u6001\u7684\u6570\u636e\u7ed3\u6784, \u5b83\u662f\u4e00\u79cd\u7ecf\u8fc7\u6539\u826f\u4e14\u878d\u5408\u4e86 Merkle Tree \u548c Radix Tree \u4e24\u79cd\u6811\u7ed3\u6784\u4f18\u70b9\u7684\u6570\u636e\u7ed3\u6784. \u5b83\u4ee5 Radix Tree \u4e3a\u57fa\u7840, \u901a\u8fc7\u5411\u6570\u636e\u7ed3\u6784\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u590d\u6742\u6027\u6765\u89e3\u51b3\u6548\u7387\u4f4e\u4e0b\u7684\u95ee\u9898. Merkle Patricia Trie \u4e2d\u7684\u8282\u70b9\u6709\u5982\u4e0b\u7684\u79cd\u7c7b: NULL(\u8868\u793a\u4e3a\u7a7a\u5b57\u7b26\u4e32) Branch(\u5206\u652f\u8282\u70b9), \u603b\u5171\u6709 17 \u5b50\u9879, \u4e3a [v0 ... v15, vt] Leaf(\u53f6\u5b50\u8282\u70b9), \u603b\u5171\u6709 2 \u4e2a\u5b50\u9879, \u4e3a [encodePath, value] Extension(\u6269\u5c55\u8282\u70b9), \u603b\u5171\u6709 2 \u4e2a\u5b50\u9879, \u4e3a [encodePath, key] Compact encoding of hex sequence with optional terminator hex char bits node type partial path length 0 0000 extension even 1 0001 extension odd 2 0010 terminating (leaf) even 3 0011 terminating (leaf) odd \u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8868\u793a MPT \u7684\u6784\u5efa\u8fc7\u7a0b, \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u5305\u542b\u56db\u4e2a\u952e\u503c\u5bf9\u7684\u6811: ('do', 'verb'), ('dog', 'puppy'), ('doge', 'coin'), ('horse', 'stallion'). \u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d, \u9700\u8981\u5c06 key/value \u8868\u793a\u4e3a 16 \u8fdb\u5236\u683c\u5f0f. 646f: 'verb' 646f67: 'puppy' 646f6765: 'coin' 686f727365: 'stallion' \u5176\u524d\u7f00\u6811\u53ef\u8868\u793a\u5982\u4e0b: 6 -----> 46f ....................... 'verb' | |----->67 ............. 'puppy' | |-----> 65 .. 'coin' |----> 86f727365 ................. 'stallion' \u5b83\u7684 MPT \u6811\u90e8\u5206\u5982\u4e0b, \u9700\u8981\u6ce8\u610f\u5176\u952e\u662f\u7ecf\u8fc7 \"Compact encoding of hex sequence with optional terminator\" \u7684. \u4e0b\u56fe\u8868\u793a\u4e86 ('dog', 'puppy') \u5728\u6811\u4e2d\u7684\u4fdd\u5b58\u65b9\u5f0f. \u5176\u6574\u9897\u6811\u4ee5\u5982\u4e0b\u7684\u952e\u503c\u5bf9\u5f62\u5f0f\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d: rootHash: [ <16>, hashA ] hashA: [ <>, <>, <>, <>, hashB, <>, <>, <>, hashC, <>, <>, <>, <>, <>, <>, <>, <> ] hashC: [ <20 6f 72 73 65>, 'stallion' ] hashB: [ <00 6f>, hashD ] hashD: [ <>, <>, <>, <>, <>, <>, hashE, <>, <>, <>, <>, <>, <>, <>, <>, <>, 'verb' ] hashE: [ <17>, hashF ] hashF: [ <>, <>, <>, <>, <>, <>, hashG, <>, <>, <>, <>, <>, <>, <>, <>, <>, 'puppy' ] hashG: [ <35>, 'coin' ]","title":"Merkle Patricia Tree"},{"location":"content/blockchain/merkle_tree/#sparse-merkle-tree","text":"\u9ed8\u514b\u5c14\u6811\u53ef\u4ee5\u8bc1\u660e\u4e00\u4e2a\u6570\u636e\u5305\u542b\u5728\u6811\u4e2d, \u4f46\u5b83\u5374\u65e0\u6cd5\u8bc1\u660e\u4e00\u4e2a\u6570\u636e \u4e0d \u5305\u542b\u5728\u6811\u4e2d. \u7a00\u758f\u7684\u9ed8\u514b\u5c14\u6811(Sparse Merkle Tree)\u5728\u8fd9\u91cc\u53d1\u6325\u4e86\u4f5c\u7528. \u7a00\u758f\u7684\u9ed8\u514b\u5c14\u6811\u7c7b\u4f3c\u4e8e\u6807\u51c6\u7684\u9ed8\u514b\u5c14\u6811, \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5bf9\u5305\u542b\u7684\u6570\u636e\u8fdb\u884c\u4e86\u7d22\u5f15, \u5e76\u4e14\u6bcf\u4e2a\u6570\u636e\u70b9\u90fd\u653e\u7f6e\u5728\u4e0e\u8be5\u6570\u636e\u70b9\u7684\u7d22\u5f15\u76f8\u5bf9\u5e94\u7684\u53f6\u5b50\u4e0a(\u5373\u4f7f\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\u662f\u7a7a\u7684). \u4e3a\u4e86\u8bc1\u660e C \u4e0d\u5b58\u5728\u6811\u4e2d, \u53ea\u9700\u8981\u50cf\u6807\u51c6\u9ed8\u514b\u5c14\u6811\u7684\u5b58\u5728\u8bc1\u660e\u4e00\u6837\u8bc1\u660e C \u4e3a\u7a7a\u5c31\u884c\u4e86! \u7279\u6027 \u7a00\u758f\u9ed8\u514b\u5c14\u6811\u771f\u7684\u975e\u5e38\u7a00\u758f, \u56e0\u6b64\u9700\u8981\u82b1\u8d39\u5927\u91cf\u7684\u7a7a\u95f4\u53bb\u5b58\u50a8\u5b83(2^256)! \u7531\u4e8e\u4e0d\u662f\u524d\u7f00\u6811, \u8bbf\u95ee\u4e00\u4e2a key \u503c\u9700\u8981\u66f4\u591a\u7684 db read \u6b21\u6570. \u4e0d\u4f46\u53ef\u4ee5\u8bc1\u660e\u4f60\u62e5\u6709\u67d0\u4e2a\u8d44\u4ea7, \u8fd8\u53ef\u4ee5\u8bc1\u660e\u4f60\u6ca1\u6709\u67d0\u4e2a\u8d44\u4ea7. \u76f8\u5173\u8ba8\u8bba https://ethereum.stackexchange.com/questions/57761/eli5-sparse-merkle-trees-on-sharding SMT \u51e0\u4e4e\u53ef\u4ee5\u5728\u4f7f\u7528(\u6216\u8ba1\u5212\u4f7f\u7528) Merkle Patricia Tries \u7684\u4efb\u4f55\u5730\u65b9\u5b9e\u73b0\u66ff\u6362 \u4ee5\u592a\u574a\u7684 MPT \u7684\u5b9e\u65bd\u548c\u4f7f\u7528\u90fd\u975e\u5e38\u590d\u6742, SMT \u65b9\u5f0f\u66f4\u7b80\u5355, \u6548\u7387\u4e5f\u5dee\u4e0d\u591a https://ethresear.ch/t/data-availability-proof-friendly-state-tree-transitions/1453 \u6587\u4e2d\u6307\u51fa\u9ed8\u514b\u5c14\u6811\u7684\u4e00\u4e2a\u95ee\u9898, \u5373\u4e00\u4e2a\u6076\u610f\u77ff\u5de5\u53ef\u4ee5\u521b\u5efa\u5e26\u6709\u6b3a\u8bc8\u6027 state root \u7684\u533a\u5757\u94fe, \u8be5\u72b6\u6001\u6811\u6839\u4e0e\u8be5\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u8fdb\u884c\u7684\u72b6\u6001\u8f6c\u6362\u4e0d\u5339\u914d, \u56e0\u6b64\u6ca1\u6709\u4eba\u80fd\u591f\u627e\u5230\u8bc1\u660e\u8be5\u6811\u4e2d\u5305\u542b\u4efb\u4f55\u72b6\u6001\u7684\u8bc1\u636e, \u6216\u8005\u8bc1\u660e\u6811\u4e2d\u5305\u542b\u6b3a\u8bc8\u6027\u7684\u72b6\u6001, \u56e0\u4e3a\u4ed6\u4eec\u6ca1\u6709\u76f8\u5173\u6570\u636e. \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u6574\u4e2a\u72b6\u6001\u6811\u7684\u6570\u636e\u53ef\u7528\u6027\u8bc1\u660e\u6765\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5, \u4f46\u662f, \u8fd9\u8981\u6c42\u8282\u70b9\u5728\u6bcf\u4e2a\u5757\u4e2d\u5e7f\u64ad\u7cfb\u7edf\u7684\u6574\u4e2a\u72b6\u6001, \u8fd9\u5f53\u7136\u4e0d\u662f\u5f88\u6709\u6548. \u89e3\u51b3\u529e\u6cd5\u662f\u5728 Block Header \u4e2d\u5305\u542b\u591a\u4e2a\u4e2d\u95f4 state root \u800c\u975e\u4e00\u4e2a\u6700\u7ec8\u7684 state root. SMT \u7684\u4f18\u5316\u7684\u89e3\u51b3\u65b9\u6848: https://www.links.org/files/RevocationTransparency.pdf , https://eprint.iacr.org/2016/683.pdf , \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u63d0\u524d\u5b58\u50a8 Hash(Null), Hash(Hash(Null) + Hash(Null) ... ) ... SMT \u7684\u4e00\u4e2a\u72b6\u6001\u8f6c\u6362\u65f6\u95f4\u590d\u6742\u5ea6\u6c38\u8fdc\u56fa\u5b9a\u662f O(log(n)), \u4e14 \"Sparse merkle trees are used because they do not have to be rebalanced\". Vitalik \u5728\u8bc4\u8bba\u505a\u4e86\u5206\u6790, \u8ba4\u4e3a: Proof \u8bc1\u660e\u7684\u5927\u5c0f\u5e94\u8be5\u4e0e MPT \u76f8\u5f53 \u4ece\u6982\u5ff5\u4e0a, SMT \u4e0e MPT \u6240\u80fd\u5b9e\u73b0\u7684\u529f\u80fd\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837, \u4f46\u80dc\u5728\u5b9e\u73b0\u7b80\u5355, \u6709 \u5de8\u5927 \u4f18\u52bf. https://www.deadalnix.me/2016/09/24/introducing-merklix-tree-as-an-unordered-merkle-tree-on-steroid/ MPT \u5728\u96c6\u5408\u7684\u4e2d\u95f4\u63d2\u5165\u6216\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u5c06\u9700\u8981\u5927\u91cf\u7684\u8fd0\u7b97, \u5982\u679c\u9700\u8981 2 \u4e2a\u5305\u542b\u76f8\u540c\u5143\u7d20\u7684\u96c6\u5408, \u4f46\u662f\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u63d2\u5165\u5c06\u4ea7\u751f 2 \u4e2a\u6839\u672c\u4e0d\u540c\u7684\u6811. \u540c\u4e00\u7ec4\u5143\u7d20\u603b\u662f\u4f1a\u4ea7\u751f\u540c\u6837\u7684\u6839, \u8fd9\u5bf9\u4e8e\u5f88\u96be\u7ef4\u62a4\u4e00\u81f4\u6027\u7684\u7cfb\u7edf\u975e\u5e38\u91cd\u8981, \u8fd9\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u5f88\u5e38\u89c1. \u65e0\u8bba\u5b83\u4eec\u5982\u4f55\u5230\u8fbe, \u7cfb\u7edf\u7684\u8282\u70b9\u6700\u7ec8\u90fd\u5c06\u6536\u655b\u5230\u76f8\u540c\u7684\u96c6\u5408\u548c\u76f8\u540c\u7684\u6839. https://medium.com/@ouvrard.pierre.alain/sparse-merkle-tree-86e6e2fc26da SMT \u53ef\u4ee5\u5e76\u53d1\u66f4\u65b0\u952e\u503c. \"The keys should be sorted in an array, and the corresponding values should be at the same index in a separate array\", \u76f8\u5173\u4ee3\u7801\u5b9e\u73b0\u5728 https://github.com/aergoio/SMT . https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751 , SMT \u7684\u4f18\u5316\u6280\u5de7 zero branch \u7684\u9884\u8ba1\u7b97 \u5982\u679c\u6709\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5b50\u6811, \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5b58\u50a8\u4e00\u6761\u8bb0\u5f55, \u8be5\u8bb0\u5f55\u8bf4\u660e\u503c\u662f\u4ec0\u4e48, \u952e\u662f\u4ec0\u4e48\u4ee5\u53ca\u54c8\u5e0c\u662f\u4ec0\u4e48(\u4ee5\u907f\u514d\u5fc5\u987b\u91cd\u65b0\u8ba1\u7b97). \u5b83\u53ef\u4ee5\u5c06 db read \u64cd\u4f5c\u6b21\u6570\u964d\u4f4e\u81f3\u548c MPT \u4e00\u6837. \u4f7f\u7528 Hex \u4f5c\u4e3a\u952e\u800c\u975e\u4e8c\u53c9\u6811, \u53ef\u4ee5\u4f7f db read \u6b21\u6570\u964d\u4f4e 3-4 \u500d plasma \u56e2\u961f\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8be5\u6587\u7ae0\u63d0\u9ad8\u7684\u5168\u90e8\u4f18\u5316 Does the further design you describe require changing the on-chain verifier? No. The consensus rules are 100% the same, the hashes are 100% the same, the proofs are 100% the same, it\u2019s a purely voluntary client-side change that different clients can implement differently. This is precisely why this is interesting. \u5982\u679c\u7ea6\u5b9a H(0, 0) = 0, \u5219\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6027\u80fd\u4f18\u5316! https://github.com/ethereum/eth2.0-specs/issues/1472","title":"Sparse Merkle Tree"},{"location":"content/blockchain/merkle_tree/#smt-libra","text":"\u6e90\u7801: https://github.com/libra/libra/tree/master/storage/jellyfish-merkle/src Libra SMT \u4e00\u5171\u6709\u4e09\u79cd\u8282\u70b9, \u4e0e MPT \u57fa\u672c\u4e00\u81f4. Branch Extension Leaf \u7531\u4e8e\u6dfb\u52a0\u4e86\u53f6\u8282\u70b9, \u5e76\u4e14 Branch \u662f\u524d\u7f00\u5f0f\u7684, \u4ee5\u592a\u574a\u793e\u533a\u5c06\u4e4b\u79f0\u4e3a\"\u7a00\u758f\u7d27\u51d1\u578b\u9ed8\u514b\u5c14\u6811\"(\u4e24\u4e2a\u53cd\u4e49\u8bcd\u5728\u4e00\u8d77\u5374\u6beb\u65e0\u8fdd\u548c\u611f, \u5c45\u7136\u8fd8\u80fd\u7406\u89e3\u662f\u4ec0\u4e48\u610f\u601d...).","title":"SMT \u5728 Libra \u4e2d\u7684\u5b9e\u73b0"},{"location":"content/daze/dlib/face_clustering/","text":"\u4eba\u8138\u805a\u7c7b \u4eba\u8138\u805a\u7c7b\u5c5e\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60. \u5f53\u4f60\u6709\u8bb8\u591a\u672a\u6807\u8bb0\u7684\u5f85\u5206\u7c7b\u7684\u7167\u7247\u65f6, \u4f7f\u7528\u4eba\u8138\u805a\u7c7b\u662f\u975e\u5e38\u6709\u7528\u7684. \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_clustering.py. \u5f85\u5206\u7c7b\u76ee\u5f55\u4e0b\u6709\u4e24\u5f20\u795e\u4ed9\u7684\u8096\u50cf\u548c\u4e24\u5f20\u89c2\u6d77\u7684\u8096\u50cf, \u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u53ef\u4ee5\u5c06\u795e\u4ed9\u548c\u89c2\u6d77\u5206\u5f00. import os import sys import dlib import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' face_rec_model_path = 'dlib_face_recognition_resnet_model_v1.dat' faces_folder_path = sys.argv[1] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) facerec = dlib.face_recognition_model_v1(face_rec_model_path) face_results = [] for entry in os.scandir(faces_folder_path): print(f'Processing file: {entry.path}') img = skimage.io.imread(entry.path) dets = detector(img, 1) print(\"Number of faces detected: {}\".format(len(dets))) for k, d in enumerate(dets): shape = sp(img, d) face_descriptor = facerec.compute_face_descriptor(img, shape) face_results.append({ 'path': entry.path, 'det': d, 'shape': shape, 'descriptor': face_descriptor }) labels = dlib.chinese_whispers_clustering([e['descriptor'] for e in face_results], 0.5) num_classes = len(set(labels)) print(\"Number of clusters: {}\".format(num_classes)) for i, r in enumerate(face_results): r['label'] = labels[i] for e in face_results: path = e['path'] d = e['det'] det = [d.top(), d.left(), d.bottom(), d.right()] label = e['label'] print(label, path, det) \u6267\u884c\u7ed3\u679c $ python3 run.py face_tests/ Processing file: face_tests/crystal_01.jpg Number of faces detected: 1 Processing file: face_tests/crystal_02.jpg Number of faces detected: 1 Processing file: face_tests/obama_01.jpg Number of faces detected: 1 Processing file: face_tests/obama_02.jpg Number of faces detected: 1 Number of clusters: 2 0 face_tests/crystal_01.jpg [116, 201, 270, 356] 0 face_tests/crystal_02.jpg [64, 236, 219, 390] 1 face_tests/obama_01.jpg [38, 146, 113, 220] 1 face_tests/obama_02.jpg [63, 71, 138, 146]","title":"Dlib-\u4eba\u8138\u805a\u7c7b"},{"location":"content/daze/dlib/face_clustering/#_1","text":"\u4eba\u8138\u805a\u7c7b\u5c5e\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60. \u5f53\u4f60\u6709\u8bb8\u591a\u672a\u6807\u8bb0\u7684\u5f85\u5206\u7c7b\u7684\u7167\u7247\u65f6, \u4f7f\u7528\u4eba\u8138\u805a\u7c7b\u662f\u975e\u5e38\u6709\u7528\u7684. \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_clustering.py. \u5f85\u5206\u7c7b\u76ee\u5f55\u4e0b\u6709\u4e24\u5f20\u795e\u4ed9\u7684\u8096\u50cf\u548c\u4e24\u5f20\u89c2\u6d77\u7684\u8096\u50cf, \u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u53ef\u4ee5\u5c06\u795e\u4ed9\u548c\u89c2\u6d77\u5206\u5f00. import os import sys import dlib import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' face_rec_model_path = 'dlib_face_recognition_resnet_model_v1.dat' faces_folder_path = sys.argv[1] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) facerec = dlib.face_recognition_model_v1(face_rec_model_path) face_results = [] for entry in os.scandir(faces_folder_path): print(f'Processing file: {entry.path}') img = skimage.io.imread(entry.path) dets = detector(img, 1) print(\"Number of faces detected: {}\".format(len(dets))) for k, d in enumerate(dets): shape = sp(img, d) face_descriptor = facerec.compute_face_descriptor(img, shape) face_results.append({ 'path': entry.path, 'det': d, 'shape': shape, 'descriptor': face_descriptor }) labels = dlib.chinese_whispers_clustering([e['descriptor'] for e in face_results], 0.5) num_classes = len(set(labels)) print(\"Number of clusters: {}\".format(num_classes)) for i, r in enumerate(face_results): r['label'] = labels[i] for e in face_results: path = e['path'] d = e['det'] det = [d.top(), d.left(), d.bottom(), d.right()] label = e['label'] print(label, path, det) \u6267\u884c\u7ed3\u679c $ python3 run.py face_tests/ Processing file: face_tests/crystal_01.jpg Number of faces detected: 1 Processing file: face_tests/crystal_02.jpg Number of faces detected: 1 Processing file: face_tests/obama_01.jpg Number of faces detected: 1 Processing file: face_tests/obama_02.jpg Number of faces detected: 1 Number of clusters: 2 0 face_tests/crystal_01.jpg [116, 201, 270, 356] 0 face_tests/crystal_02.jpg [64, 236, 219, 390] 1 face_tests/obama_01.jpg [38, 146, 113, 220] 1 face_tests/obama_02.jpg [63, 71, 138, 146]","title":"\u4eba\u8138\u805a\u7c7b"},{"location":"content/daze/dlib/face_detect/","text":"\u4eba\u8138\u68c0\u6d4b dlib \u81ea\u5e26\u4eba\u8138\u68c0\u6d4b\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_detector.py. \u7531\u4e8e\u673a\u5668\u6ca1\u6709 GUI \u754c\u9762, \u56e0\u6b64\u6211\u7b80\u5355\u4fee\u6539\u4e86\u4e0b, \u53ef\u4ee5\u5c06\u68c0\u6d4b\u7ed3\u679c\u4fdd\u5b58\u5728\u672c\u5730. import sys import dlib import skimage.draw import skimage.io load_name = sys.argv[1] save_name = sys.argv[2] detector = dlib.get_frontal_face_detector() img = skimage.io.imread(load_name) dets = detector(img, 1) print('Number of faces detected: {}'.format(len(dets))) for d in dets: r0, c0, r1, c1 = d.top(), d.left(), d.bottom(), d.right() print('Detection {}'.format([(r0, c0), (r1, c1)])) skimage.draw.set_color(img, skimage.draw.line(r0, c0, r0, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r0, c1, r1, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c1, r1, c0), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c0, r0, c0), (255, 0, 0)) skimage.io.imsave(save_name, img) # \u6267\u884c\u811a\u672c $ python3 face_detector.py obama.jpg obama_face.jpg \u539f\u56fe: \u4eba\u8138:","title":"Dlib-\u4eba\u8138\u68c0\u6d4b"},{"location":"content/daze/dlib/face_detect/#_1","text":"dlib \u81ea\u5e26\u4eba\u8138\u68c0\u6d4b\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_detector.py. \u7531\u4e8e\u673a\u5668\u6ca1\u6709 GUI \u754c\u9762, \u56e0\u6b64\u6211\u7b80\u5355\u4fee\u6539\u4e86\u4e0b, \u53ef\u4ee5\u5c06\u68c0\u6d4b\u7ed3\u679c\u4fdd\u5b58\u5728\u672c\u5730. import sys import dlib import skimage.draw import skimage.io load_name = sys.argv[1] save_name = sys.argv[2] detector = dlib.get_frontal_face_detector() img = skimage.io.imread(load_name) dets = detector(img, 1) print('Number of faces detected: {}'.format(len(dets))) for d in dets: r0, c0, r1, c1 = d.top(), d.left(), d.bottom(), d.right() print('Detection {}'.format([(r0, c0), (r1, c1)])) skimage.draw.set_color(img, skimage.draw.line(r0, c0, r0, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r0, c1, r1, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c1, r1, c0), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c0, r0, c0), (255, 0, 0)) skimage.io.imsave(save_name, img) # \u6267\u884c\u811a\u672c $ python3 face_detector.py obama.jpg obama_face.jpg \u539f\u56fe: \u4eba\u8138:","title":"\u4eba\u8138\u68c0\u6d4b"},{"location":"content/daze/dlib/face_landmark/","text":"\u4eba\u8138\u6807\u6ce8 dlib \u81ea\u5e26\u4eba\u8138\u6807\u6ce8\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_landmark_detection.py. import sys import dlib import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' load_name = sys.argv[1] save_name = sys.argv[2] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) img = skimage.io.imread(load_name) dets = detector(img, 1) print('Number of faces detected: {}'.format(len(dets))) for i, d in enumerate(dets): r0, c0, r1, c1 = d.top(), d.left(), d.bottom(), d.right() print(i, 'Detection {}'.format([(r0, c0), (r1, c1)])) skimage.draw.set_color(img, skimage.draw.line(r0, c0, r0, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r0, c1, r1, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c1, r1, c0), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c0, r0, c0), (255, 0, 0)) shape = [(p.x, p.y) for p in sp(img, d).parts()] print('Part 0: {}, Part 1: {} ...'.format(shape[0], shape[1])) for i, pos in enumerate(shape): skimage.draw.set_color(img, skimage.draw.circle(pos[1], pos[0], 2), (0, 255, 0)) skimage.io.imsave(save_name, img) # \u5728\u4f7f\u7528\u8be5\u811a\u672c\u524d, \u9700\u8981\u5148\u4e0b\u8f7d\u9884\u8bad\u7ec3\u6743\u91cd $ wget http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2 $ bunzip2 shape_predictor_68_face_landmarks.dat.bz2 # \u6267\u884c\u811a\u672c, \u4fdd\u5b58\u7ed3\u679c\u81f3 obama_landmark.jpg $ python3 face_landmark_detection.py obama.jpg obama_landmark.jpg","title":"Dlib-\u4eba\u8138\u6807\u6ce8"},{"location":"content/daze/dlib/face_landmark/#_1","text":"dlib \u81ea\u5e26\u4eba\u8138\u6807\u6ce8\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_landmark_detection.py. import sys import dlib import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' load_name = sys.argv[1] save_name = sys.argv[2] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) img = skimage.io.imread(load_name) dets = detector(img, 1) print('Number of faces detected: {}'.format(len(dets))) for i, d in enumerate(dets): r0, c0, r1, c1 = d.top(), d.left(), d.bottom(), d.right() print(i, 'Detection {}'.format([(r0, c0), (r1, c1)])) skimage.draw.set_color(img, skimage.draw.line(r0, c0, r0, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r0, c1, r1, c1), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c1, r1, c0), (255, 0, 0)) skimage.draw.set_color(img, skimage.draw.line(r1, c0, r0, c0), (255, 0, 0)) shape = [(p.x, p.y) for p in sp(img, d).parts()] print('Part 0: {}, Part 1: {} ...'.format(shape[0], shape[1])) for i, pos in enumerate(shape): skimage.draw.set_color(img, skimage.draw.circle(pos[1], pos[0], 2), (0, 255, 0)) skimage.io.imsave(save_name, img) # \u5728\u4f7f\u7528\u8be5\u811a\u672c\u524d, \u9700\u8981\u5148\u4e0b\u8f7d\u9884\u8bad\u7ec3\u6743\u91cd $ wget http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2 $ bunzip2 shape_predictor_68_face_landmarks.dat.bz2 # \u6267\u884c\u811a\u672c, \u4fdd\u5b58\u7ed3\u679c\u81f3 obama_landmark.jpg $ python3 face_landmark_detection.py obama.jpg obama_landmark.jpg","title":"\u4eba\u8138\u6807\u6ce8"},{"location":"content/daze/dlib/face_recognition/","text":"\u4eba\u8138\u8bc6\u522b dlib \u81ea\u5e26\u4eba\u8138\u8bc6\u522b\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_recognition.py. \u5728\u4e0a\u4e00\u7bc7\u4e2d\u5df2\u7ecf\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u5230\u4eba\u8138\u7279\u5f81\u70b9, \u4eba\u8138\u8bc6\u522b\u7684\u57fa\u672c\u7684\u6b65\u9aa4\u4e3a: \u5c06\u7279\u5f81\u70b9\u7f16\u7801\u4e3a\u7279\u5f81\u77e9\u9635, \u5e76\u8ba1\u7b97\u4e24\u4e2a\u7279\u5f81\u77e9\u9635\u4e4b\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb, \u5f53\u8ddd\u79bb\u5c0f\u4e8e\u6307\u5b9a\u9608\u503c\u65f6, \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba. dlib \u4e2d\u7684\u4e00\u4e9b\u6ce8\u91ca\u89e3\u91ca\u4e86\u8fd9\u4e00\u5207(\u5927\u81f4\u662f\u5c06\u4eba\u8138\u7279\u5f81\u70b9\u7f16\u7801\u4e3a 128 \u7ef4\u5411\u91cf, \u5982\u679c\u4e24\u7279\u5f81\u5411\u91cf\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb < 0.6 \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba). # This example shows how to use dlib's face recognition tool. This tool maps # an image of a human face to a 128 dimensional vector space where images of # the same person are near to each other and images from different people are # far apart. Therefore, you can perform face recognition by mapping faces to # the 128D space and then checking if their Euclidean distance is small # enough. # # When using a distance threshold of 0.6, the dlib model obtains an accuracy # of 99.38% on the standard LFW face recognition benchmark, which is # comparable to other state-of-the-art methods for face recognition as of # February 2017. This accuracy means that, when presented with a pair of face # images, the tool will correctly identify if the pair belongs to the same # person or is from different people 99.38% of the time. # # Finally, for an in-depth discussion of how dlib's tool works you should # refer to the C++ example program dnn_face_recognition_ex.cpp and the # attendant documentation referenced therein. \u4e0b\u9762\u6765\u6d4b\u8bd5\u4e0b, \u4e0b\u8f7d\u9884\u8bad\u7ec3\u6743\u91cd\u5e76\u7f16\u5199\u5982\u4e0b\u4ee3\u7801 $ wget http://dlib.net/files/dlib_face_recognition_resnet_model_v1.dat.bz2 $ bunzip2 dlib_face_recognition_resnet_model_v1.dat.bz2 import sys import dlib import numpy as np import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' face_rec_model_path = 'dlib_face_recognition_resnet_model_v1.dat' load_name_0 = sys.argv[1] load_name_1 = sys.argv[2] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) facerec = dlib.face_recognition_model_v1(face_rec_model_path) def get_descriptor(load_name): img = skimage.io.imread(load_name) dets = detector(img, 1) assert len(dets) == 1 shape = sp(img, dets[0]) face_descriptor = facerec.compute_face_descriptor(img, shape) face_descriptor = np.array(face_descriptor) assert face_descriptor.shape == (128,) return face_descriptor x0 = get_descriptor(load_name_0) x1 = get_descriptor(load_name_1) # \u8ba1\u7b97\u4e24\u4e2a\u7279\u5f81\u77e9\u9635\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb d, \u5f53 d < 0.6 \u65f6, \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba d = np.linalg.norm(x0 - x1) print('distance', d) \u62ff\u4e24\u5f20\u795e\u4ed9\u7684\u8138\u6d4b\u8bd5\u4e00\u4e0b: \u7ed3\u679c\u662f 0.333517042672, \u662f\u540c\u4e00\u4e2a\u4eba\u6ca1\u9519(\u957f\u8212\u4e00\u53e3\u6c14). \u53c2\u8003 [1] \u7ef4\u57fa: \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb https://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB","title":"Dlib-\u4eba\u8138\u8bc6\u522b"},{"location":"content/daze/dlib/face_recognition/#_1","text":"dlib \u81ea\u5e26\u4eba\u8138\u8bc6\u522b\u6a21\u5757, \u5176 python \u811a\u672c\u4f4d\u4e8e /python_examples/face_recognition.py. \u5728\u4e0a\u4e00\u7bc7\u4e2d\u5df2\u7ecf\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u5230\u4eba\u8138\u7279\u5f81\u70b9, \u4eba\u8138\u8bc6\u522b\u7684\u57fa\u672c\u7684\u6b65\u9aa4\u4e3a: \u5c06\u7279\u5f81\u70b9\u7f16\u7801\u4e3a\u7279\u5f81\u77e9\u9635, \u5e76\u8ba1\u7b97\u4e24\u4e2a\u7279\u5f81\u77e9\u9635\u4e4b\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb, \u5f53\u8ddd\u79bb\u5c0f\u4e8e\u6307\u5b9a\u9608\u503c\u65f6, \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba. dlib \u4e2d\u7684\u4e00\u4e9b\u6ce8\u91ca\u89e3\u91ca\u4e86\u8fd9\u4e00\u5207(\u5927\u81f4\u662f\u5c06\u4eba\u8138\u7279\u5f81\u70b9\u7f16\u7801\u4e3a 128 \u7ef4\u5411\u91cf, \u5982\u679c\u4e24\u7279\u5f81\u5411\u91cf\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb < 0.6 \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba). # This example shows how to use dlib's face recognition tool. This tool maps # an image of a human face to a 128 dimensional vector space where images of # the same person are near to each other and images from different people are # far apart. Therefore, you can perform face recognition by mapping faces to # the 128D space and then checking if their Euclidean distance is small # enough. # # When using a distance threshold of 0.6, the dlib model obtains an accuracy # of 99.38% on the standard LFW face recognition benchmark, which is # comparable to other state-of-the-art methods for face recognition as of # February 2017. This accuracy means that, when presented with a pair of face # images, the tool will correctly identify if the pair belongs to the same # person or is from different people 99.38% of the time. # # Finally, for an in-depth discussion of how dlib's tool works you should # refer to the C++ example program dnn_face_recognition_ex.cpp and the # attendant documentation referenced therein. \u4e0b\u9762\u6765\u6d4b\u8bd5\u4e0b, \u4e0b\u8f7d\u9884\u8bad\u7ec3\u6743\u91cd\u5e76\u7f16\u5199\u5982\u4e0b\u4ee3\u7801 $ wget http://dlib.net/files/dlib_face_recognition_resnet_model_v1.dat.bz2 $ bunzip2 dlib_face_recognition_resnet_model_v1.dat.bz2 import sys import dlib import numpy as np import skimage.draw import skimage.io predictor_path = 'shape_predictor_68_face_landmarks.dat' face_rec_model_path = 'dlib_face_recognition_resnet_model_v1.dat' load_name_0 = sys.argv[1] load_name_1 = sys.argv[2] detector = dlib.get_frontal_face_detector() sp = dlib.shape_predictor(predictor_path) facerec = dlib.face_recognition_model_v1(face_rec_model_path) def get_descriptor(load_name): img = skimage.io.imread(load_name) dets = detector(img, 1) assert len(dets) == 1 shape = sp(img, dets[0]) face_descriptor = facerec.compute_face_descriptor(img, shape) face_descriptor = np.array(face_descriptor) assert face_descriptor.shape == (128,) return face_descriptor x0 = get_descriptor(load_name_0) x1 = get_descriptor(load_name_1) # \u8ba1\u7b97\u4e24\u4e2a\u7279\u5f81\u77e9\u9635\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb d, \u5f53 d < 0.6 \u65f6, \u5219\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u4eba d = np.linalg.norm(x0 - x1) print('distance', d) \u62ff\u4e24\u5f20\u795e\u4ed9\u7684\u8138\u6d4b\u8bd5\u4e00\u4e0b: \u7ed3\u679c\u662f 0.333517042672, \u662f\u540c\u4e00\u4e2a\u4eba\u6ca1\u9519(\u957f\u8212\u4e00\u53e3\u6c14).","title":"\u4eba\u8138\u8bc6\u522b"},{"location":"content/daze/dlib/face_recognition/#_2","text":"[1] \u7ef4\u57fa: \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb https://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB","title":"\u53c2\u8003"},{"location":"content/daze/dlib/install/","text":"dlib \u662f\u4e00\u4e2a\u5305\u542b\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u548c\u5de5\u5177\u7684 c++ \u5e93. \u5b89\u88c5 $ git clone --depth=1 https://github.com/davisking/dlib.git $ cd dlib $ mkdir build; cd build; cmake .. ; cmake --build . # \u5b89\u88c5 python API $ python setup.py install \u8be6\u7ec6\u8bf7\u81f3 https://github.com/davisking/dlib \u9605\u8bfb\u5b98\u65b9\u6587\u6863. \u8bb0\u5f55\u4e00: dlib Python API \u9700\u8981 boost.python \u652f\u6301 \u7b80\u800c\u8a00\u4e4b, \u524d\u5f80 http://www.boost.org/ \u4e0b\u8f7d boost \u540e, \u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5\u5373\u53ef, \u6ce8\u610f\u4f7f\u7528 --with-python \u914d\u7f6e python \u53ef\u6267\u884c\u6587\u4ef6, \u5b89\u88c5\u811a\u672c\u4f1a\u81ea\u52a8\u5bfb\u627e python \u7684\u5b89\u88c5\u76ee\u5f55. $ ./bootstrap.sh --prefix=/usr/local/boost --with-python=python3 --with-libraries=python # CPLUS_INCLUDE_PATH \u503c\u4e3a pyconfig.h \u6240\u5728\u8def\u5f84 $ CPLUS_INCLUDE_PATH=/usr/local/python/include/python3.6m ./b2 $ ./b2 install \u5b89\u88c5\u5b8c\u6bd5\u540e\u5728 ~/.bash_profile \u4e2d\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf export PATH=$PATH:/usr/local/boost/include export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/boost/lib \u8bb0\u5f55\u4e8c: \u5185\u5b58\u8fc7\u5c0f\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25 c++: internal compiler error: Killed (program cc1plus) Please submit a full bug report, with preprocessed source if appropriate. See <http://bugzilla.redhat.com/bugzilla> for instructions. gmake[2]: *** [CMakeFiles/dlib_.dir/src/vector.cpp.o] Error 4 gmake[1]: *** [CMakeFiles/dlib_.dir/all] Error 2 gmake: *** [all] Error 2 error: cmake build failed! \u6d4b\u8bd5\u65f6 1G \u5185\u5b58\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25, \u4f7f\u7528\u989d\u5916\u7684 1G swap \u540e\u91cd\u65b0\u7f16\u8bd1\u89e3\u51b3\u95ee\u9898: $ dd if=/dev/zero of=/data/swap bs=64M count=16 $ chmod 0600 /data/swap $ mkswap /data/swap $ swapon /data/swap","title":"Dlib-\u5b89\u88c5"},{"location":"content/daze/dlib/install/#_1","text":"$ git clone --depth=1 https://github.com/davisking/dlib.git $ cd dlib $ mkdir build; cd build; cmake .. ; cmake --build . # \u5b89\u88c5 python API $ python setup.py install \u8be6\u7ec6\u8bf7\u81f3 https://github.com/davisking/dlib \u9605\u8bfb\u5b98\u65b9\u6587\u6863. \u8bb0\u5f55\u4e00: dlib Python API \u9700\u8981 boost.python \u652f\u6301 \u7b80\u800c\u8a00\u4e4b, \u524d\u5f80 http://www.boost.org/ \u4e0b\u8f7d boost \u540e, \u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5\u5373\u53ef, \u6ce8\u610f\u4f7f\u7528 --with-python \u914d\u7f6e python \u53ef\u6267\u884c\u6587\u4ef6, \u5b89\u88c5\u811a\u672c\u4f1a\u81ea\u52a8\u5bfb\u627e python \u7684\u5b89\u88c5\u76ee\u5f55. $ ./bootstrap.sh --prefix=/usr/local/boost --with-python=python3 --with-libraries=python # CPLUS_INCLUDE_PATH \u503c\u4e3a pyconfig.h \u6240\u5728\u8def\u5f84 $ CPLUS_INCLUDE_PATH=/usr/local/python/include/python3.6m ./b2 $ ./b2 install \u5b89\u88c5\u5b8c\u6bd5\u540e\u5728 ~/.bash_profile \u4e2d\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf export PATH=$PATH:/usr/local/boost/include export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/boost/lib \u8bb0\u5f55\u4e8c: \u5185\u5b58\u8fc7\u5c0f\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25 c++: internal compiler error: Killed (program cc1plus) Please submit a full bug report, with preprocessed source if appropriate. See <http://bugzilla.redhat.com/bugzilla> for instructions. gmake[2]: *** [CMakeFiles/dlib_.dir/src/vector.cpp.o] Error 4 gmake[1]: *** [CMakeFiles/dlib_.dir/all] Error 2 gmake: *** [all] Error 2 error: cmake build failed! \u6d4b\u8bd5\u65f6 1G \u5185\u5b58\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25, \u4f7f\u7528\u989d\u5916\u7684 1G swap \u540e\u91cd\u65b0\u7f16\u8bd1\u89e3\u51b3\u95ee\u9898: $ dd if=/dev/zero of=/data/swap bs=64M count=16 $ chmod 0600 /data/swap $ mkswap /data/swap $ swapon /data/swap","title":"\u5b89\u88c5"},{"location":"content/daze/ga/evolve/","text":"\u9057\u4f20\u7b97\u6cd5: \u5185\u5b58\u4e2d\u7684\u8fdb\u5316 \u8fd9\u662f\u4e2a\u771f\u5b9e\u7684\u6545\u4e8b. \u4ece\u524d\u5728\u6d77\u5cb8\u8fb9\u6709\u4e00\u7fa4\u6247\u8d1d\u5728\u60a0\u54c9\u6e38\u54c9\u5730\u751f\u6d3b\u7e41\u884d\u7740. \u5b83\u4eec\u81ea\u7136\u662f\u8863\u98df\u4e0d\u6101, \u8fde\u623f\u5b50\u4e5f\u6709\u4e86\u7740\u843d. \u5b83\u4eec\u62c5\u5fe7\u7684\u53ea\u6709\u4e00\u4ef6\u4e8b: \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4, \u603b\u6709\u4e00\u4e2a\u4eba\u6765\u6316\u8d70\u5b83\u4eec\u4e4b\u4e2d\u7684\u4e00\u90e8\u5206. \u5f53\u7136\u5566, \u6316\u56de\u53bb\u5e72\u4ec0\u4e48\u8fd9\u5927\u5bb6\u90fd\u77e5\u9053. \u4f46\u6247\u8d1d\u4eec\u4e0d\u77e5\u9053\u7684\u662f, \u8fd9\u4eba\u7684\u5bb6\u65cf\u56fe\u817e\u662f Firefox \u7684\u56fe\u6807, \u6240\u4ee5\u4ed6\u603b\u662f\u9009\u62e9\u90a3\u4e9b\u8d1d\u58f3\u82b1\u7eb9\u957f\u5f97\u6bd4\u8f83\u4e0d\u50cf Firefox \u56fe\u6807\u7684\u6247\u8d1d. \u8fd9\u79cd\u72b6\u51b5\u6301\u7eed\u4e86\u597d\u51e0\u5341\u4e07\u4ee3. \u5927\u5bb6\u5e94\u8be5\u4e5f\u731c\u5230\u6247\u8d1d\u4eec\u8eab\u4e0a\u53d1\u751f\u4ec0\u4e48\u4e8b\u60c5\u4e86: \u5b83\u4eec\u7684\u8d1d\u58f3\u4e0a\u90fd\u5370\u7740\u5f88\u50cf Firefox \u56fe\u6807\u7684\u56fe\u6848. \u89e3\u6790 \u4e0a\u8ff0\u6545\u4e8b\u662f\u4e00\u4e2a\u9057\u4f20\u7b97\u6cd5\u7684\u4e00\u90e8\u5206. \u4e0b\u9762, \u5c31\u6765\u5b9e\u73b0\u8fd9\u4e2a\u9057\u4f20\u7b97\u6cd5. \u5047\u8bbe\u6bcf\u4e2a\u6247\u8d1d\u5747\u7531 100 \u4e2a\u534a\u900f\u660e\u4e14\u989c\u8272\u968f\u673a\u7684\u4e09\u89d2\u5f62\u7ec4\u6210: \u51b3\u7b56\u53d8\u91cf: 100 \u4e2a\u534a\u900f\u660e\u4e09\u89d2\u5f62, \u6bcf\u4e2a\u4e09\u89d2\u5f62\u7684\u5c5e\u6027\u5305\u62ec: \u4e09\u4e2a\u9876\u70b9\u7684\u5750\u6807, \u900f\u660e\u5ea6(0 - 0.45), \u989c\u8272. \u4e2a\u4f53\u8bc4\u4ef7\u65b9\u6cd5: 100 \u4e2a\u534a\u900f\u660e\u4e09\u89d2\u5f62\u7ec4\u5408\u6210\u800c\u6210\u7684\u56fe\u6848\u4e0e Firefox \u56fe\u6807\u8fdb\u884c\u9010\u50cf\u7d20\u6bd4\u5bf9, \u5e76\u7528\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u51cf\u53bb\u9010\u50cf\u7d20\u5411\u91cf\u8ddd\u79bb\u7684\u548c\u4f5c\u4e3a\u4e2a\u4f53\u9002\u5e94\u5ea6 \u9009\u62e9\u7b97\u5b50: \u8f6e\u76d8\u9009\u62e9 + \u6700\u4f18\u4fdd\u7559\u7b56\u7565 \u4ea4\u53c9\u7b97\u5b50: \u5355\u70b9\u4ea4\u53c9 \u53d8\u5f02\u7b97\u5b50: \u7b49\u4f4d\u53d8\u5f02 \u8fd0\u884c\u53c2\u6570: \u8fed\u4ee3 12000 \u6b21, \u79cd\u7fa4\u5927\u5c0f 80, \u4ea4\u53c9\u6982\u7387 0.6, \u53d8\u5f02\u6982\u7387 0.008 \u4ee3\u7801\u5b9e\u73b0 \u4e0b\u9762\u7528 Python \u5b9e\u73b0\u4e0a\u8ff0\u6545\u4e8b. import copy import os import os.path import numpy as np import skimage.draw import skimage.io import skimage.transform control_im_path = 'firefox.jpg' save_dir = '/tmp/img' class Base: def __init__(self, r, c, color, alpha): self.r = r self.c = c self.color = color self.alpha = alpha class Gene: def __init__(self): self.base = [] def copy(self): return copy.deepcopy(self) class GA: def __init__(self): self.pop_size = 80 self.dna_size = 100 self.max_iter = 3000 self.pc = 0.6 self.pm = 0.008 im = skimage.io.imread(control_im_path) if im.shape[2] == 4: im = skimage.color.rgba2rgb(im) im = (255 * im).astype(np.uint8) self.control_im = skimage.transform.resize( im, (128, 128), mode='reflect', preserve_range=True).astype(np.uint8) def decode(self, per): im = np.ones(self.control_im.shape, dtype=np.uint8) * 255 for e in per.base: rr, cc = skimage.draw.polygon(e.r, e.c) skimage.draw.set_color(im, (rr, cc), e.color, e.alpha) return im def perfit(self, per): im = self.decode(per) assert im.shape == self.control_im.shape # \u4e09\u7ef4\u77e9\u9635\u7684\u6b27\u5f0f\u8ddd\u79bb d = np.linalg.norm(np.where(self.control_im > im, self.control_im - im, im - self.control_im)) # \u4f7f\u7528\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u51cf\u53bb\u6b27\u5f0f\u8ddd\u79bb # \u6b64\u5904\u8be5\u6570\u4e3a (self.control_im.size * ((3 * 255 ** 2) ** 0.5) ** 2) ** 0.5 return (self.control_im.size * 195075) ** 0.5 - d def getfit(self, pop): fit = np.zeros(self.pop_size) for i, per in enumerate(pop): fit[i] = self.perfit(per) return fit def genpop(self): pop = [] for _ in range(self.pop_size): per = Gene() for _ in range(self.dna_size): r = np.random.randint(0, self.control_im.shape[0], 3, dtype=np.uint8) c = np.random.randint(0, self.control_im.shape[1], 3, dtype=np.uint8) color = np.random.randint(0, 256, 3) alpha = np.random.random() * 0.45 per.base.append(Base(r, c, color, alpha)) pop.append(per) return pop def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.01 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) son = [] for i in idx: son.append(pop[i].copy()) return son def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a.base[p:], b.base[p:] = b.base[p:], a.base[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): for per in pop: for base in per.base: if np.random.random() < self.pm: base.r = np.random.randint(0, self.control_im.shape[0], 3, dtype=np.uint8) base.c = np.random.randint(0, self.control_im.shape[1], 3, dtype=np.uint8) base.color = np.random.randint(0, 256, 3) base.alpha = np.random.random() * 0.45 return pop def evolve(self): pop = self.genpop() pop_fit = self.getfit(pop) for _ in range(self.max_iter): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() for i, (pop, fit) in enumerate(ga.optret(ga.evolve)()): j = np.argmax(fit) per = pop[j] per_fit = ga.perfit(per) print(f'{i:0>5} {per_fit}') skimage.io.imsave(os.path.join(save_dir, f'{i:0>5}.jpg'), ga.decode(per)) \u6267\u884c\u4e0a\u8ff0\u4ee3\u7801, \u8bb0\u5f97\u4fee\u6539 control_im_path \u4e0e save_dir \u4e3a\u53ef\u7528\u5730\u5740. \u4e0d\u7528\u4e00\u4f1a, \u5c31\u80fd\u5728 save_dir \u4e2d\u89c1\u5230\u6bcf\u4e00\u4ee3\u6700\u4f18\u4e2a\u4f53\u4e86. \u5f53\u7136, \u8dd1\u5b8c 3000 \u4ee3\u8fd8\u662f\u9700\u8981\u4e00\u70b9\u65f6\u95f4\u7684(\u5927\u7ea6\u534a\u5929~). \u540e\u8bb0 \u5b9e\u9645\u4e0a, \u5728\u751f\u6d3b\u548c\u751f\u4ea7\u4e2d, \u5f88\u591a\u65f6\u5019\u5e76\u4e0d\u9700\u8981\u5f97\u5230\u4e00\u4e2a\u5b8c\u7f8e\u7684\u7b54\u6848; \u800c\u5f88\u591a\u95ee\u9898\u5982\u679c\u8981\u5f97\u5230\u5b8c\u7f8e\u7684\u7b54\u6848\u7684\u8bdd, \u9700\u8981\u5f88\u5927\u91cf\u7684\u8ba1\u7b97. \u6240\u4ee5, \u56e0\u4e3a \u9057\u4f20\u7b97\u6cd5\u80fd\u5728\u76f8\u5bf9\u8f83\u77ed\u7684\u65f6\u95f4\u5185\u7ed9\u51fa\u4e00\u4e2a\u8db3\u591f\u597d\u80fd\u51d1\u5408\u7684\u7b54\u6848 , \u5b83\u4ece\u95ee\u4e16\u4f0a\u59cb\u5c31\u8d8a\u6765\u8d8a\u53d7\u5230\u5927\u5bb6\u7684\u91cd\u89c6, \u5bf9\u5b83\u7684\u7814\u7a76\u4e5f\u662f\u65b9\u5174\u672a\u827e. \u5f53\u7136, \u5b83\u4e5f\u6709\u7f3a\u70b9, \u6bd4\u5982\u8bf4\u65e9\u671f\u7684\u4f18\u52bf\u57fa\u56e0\u53ef\u80fd\u4f1a\u5f88\u5feb\u901a\u8fc7\u4ea4\u6362\u57fa\u56e0\u7684\u9014\u5f84\u6563\u64ad\u5230\u6574\u4e2a\u79cd\u7fa4\u4e2d, \u8fd9\u6837\u6709\u53ef\u80fd\u5bfc\u81f4\u65e9\u719f(premature), \u4e5f\u5c31\u662f\u8bf4\u6574\u4e2a\u79cd\u7fa4\u7684\u57fa\u56e0\u8fc7\u65e9\u540c\u4e00\u5316, \u5f97\u4e0d\u5230\u8db3\u591f\u597d\u7684\u7ed3\u679c. \u8fd9\u4e2a\u95ee\u9898\u662f\u96be\u4ee5\u5b8c\u5168\u907f\u514d\u7684. \u5176\u5b9e, \u901a\u8fc7\u5fae\u8c03\u53c2\u6570\u548c\u7e41\u884d\u3001\u53d8\u5f02\u3001\u6dd8\u6c70\u3001\u7ec8\u6b62\u7684\u4ee3\u7801, \u6211\u4eec\u6709\u53ef\u80fd\u5f97\u5230\u66f4\u6709\u6548\u7684\u7b97\u6cd5. \u9057\u4f20\u7b97\u6cd5\u53ea\u662f\u4e00\u4e2a\u6846\u67b6, \u91cc\u8fb9\u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u95ee\u9898\u8fdb\u884c\u8c03\u6574, \u8fd9\u4e5f\u662f\u5b83\u80fd\u5728\u8bb8\u591a\u95ee\u9898\u4e0a\u6d3e\u4e0a\u7528\u573a\u7684\u4e00\u4e2a\u539f\u56e0. \u50cf\u8fd9\u6837\u53ef\u4ee5\u9002\u5e94\u5f88\u591a\u95ee\u9898\u7684\u7b97\u6cd5\u8fd8\u6709\u6a21\u62df\u9000\u706b\u7b97\u6cd5, \u7c92\u5b50\u7fa4\u7b97\u6cd5, \u8681\u7fa4\u7b97\u6cd5, \u7981\u5fcc\u641c\u7d22\u7b49\u7b49, \u7edf\u79f0\u4e3a\u5143\u542f\u53d1\u5f0f\u7b97\u6cd5(Meta-heuristic algorithms). \u53e6\u5916, \u57fa\u4e8e\u81ea\u7136\u6f14\u5316\u8fc7\u7a0b\u7684\u7b97\u6cd5\u9664\u4e86\u5728\u8fd9\u91cc\u8bf4\u5230\u7684\u9057\u4f20\u7b97\u6cd5\u4ee5\u5916, \u8fd8\u6709\u66f4\u5e7f\u6cdb\u7684\u7fa4\u4f53\u9057\u4f20\u7b97\u6cd5\u548c\u9057\u4f20\u7f16\u7a0b\u7b49, \u5b83\u4eec\u80fd\u89e3\u51b3\u5f88\u591a\u68d8\u624b\u7684\u95ee\u9898. \u8fd9\u4e5f\u4ece\u4e00\u4e2a\u4fa7\u9762\u8bf4\u660e, \u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u4e00\u4e2a\u667a\u80fd\u624d\u80fd\u5f97\u5230\u4e00\u4e2a\u6784\u9020\u7cbe\u5de7\u7684\u7cfb\u7edf. \u53c2\u8003 [1] \u65b9\u5f26: \u9057\u4f20\u7b97\u6cd5: \u5185\u5b58\u4e2d\u7684\u8fdb\u5316 http://songshuhui.net/archives/10462","title":"\u9057\u4f20\u7b97\u6cd5-\u751f\u7269\u8fdb\u5316\u6a21\u62df"},{"location":"content/daze/ga/evolve/#_1","text":"\u8fd9\u662f\u4e2a\u771f\u5b9e\u7684\u6545\u4e8b. \u4ece\u524d\u5728\u6d77\u5cb8\u8fb9\u6709\u4e00\u7fa4\u6247\u8d1d\u5728\u60a0\u54c9\u6e38\u54c9\u5730\u751f\u6d3b\u7e41\u884d\u7740. \u5b83\u4eec\u81ea\u7136\u662f\u8863\u98df\u4e0d\u6101, \u8fde\u623f\u5b50\u4e5f\u6709\u4e86\u7740\u843d. \u5b83\u4eec\u62c5\u5fe7\u7684\u53ea\u6709\u4e00\u4ef6\u4e8b: \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4, \u603b\u6709\u4e00\u4e2a\u4eba\u6765\u6316\u8d70\u5b83\u4eec\u4e4b\u4e2d\u7684\u4e00\u90e8\u5206. \u5f53\u7136\u5566, \u6316\u56de\u53bb\u5e72\u4ec0\u4e48\u8fd9\u5927\u5bb6\u90fd\u77e5\u9053. \u4f46\u6247\u8d1d\u4eec\u4e0d\u77e5\u9053\u7684\u662f, \u8fd9\u4eba\u7684\u5bb6\u65cf\u56fe\u817e\u662f Firefox \u7684\u56fe\u6807, \u6240\u4ee5\u4ed6\u603b\u662f\u9009\u62e9\u90a3\u4e9b\u8d1d\u58f3\u82b1\u7eb9\u957f\u5f97\u6bd4\u8f83\u4e0d\u50cf Firefox \u56fe\u6807\u7684\u6247\u8d1d. \u8fd9\u79cd\u72b6\u51b5\u6301\u7eed\u4e86\u597d\u51e0\u5341\u4e07\u4ee3. \u5927\u5bb6\u5e94\u8be5\u4e5f\u731c\u5230\u6247\u8d1d\u4eec\u8eab\u4e0a\u53d1\u751f\u4ec0\u4e48\u4e8b\u60c5\u4e86: \u5b83\u4eec\u7684\u8d1d\u58f3\u4e0a\u90fd\u5370\u7740\u5f88\u50cf Firefox \u56fe\u6807\u7684\u56fe\u6848.","title":"\u9057\u4f20\u7b97\u6cd5: \u5185\u5b58\u4e2d\u7684\u8fdb\u5316"},{"location":"content/daze/ga/evolve/#_2","text":"\u4e0a\u8ff0\u6545\u4e8b\u662f\u4e00\u4e2a\u9057\u4f20\u7b97\u6cd5\u7684\u4e00\u90e8\u5206. \u4e0b\u9762, \u5c31\u6765\u5b9e\u73b0\u8fd9\u4e2a\u9057\u4f20\u7b97\u6cd5. \u5047\u8bbe\u6bcf\u4e2a\u6247\u8d1d\u5747\u7531 100 \u4e2a\u534a\u900f\u660e\u4e14\u989c\u8272\u968f\u673a\u7684\u4e09\u89d2\u5f62\u7ec4\u6210: \u51b3\u7b56\u53d8\u91cf: 100 \u4e2a\u534a\u900f\u660e\u4e09\u89d2\u5f62, \u6bcf\u4e2a\u4e09\u89d2\u5f62\u7684\u5c5e\u6027\u5305\u62ec: \u4e09\u4e2a\u9876\u70b9\u7684\u5750\u6807, \u900f\u660e\u5ea6(0 - 0.45), \u989c\u8272. \u4e2a\u4f53\u8bc4\u4ef7\u65b9\u6cd5: 100 \u4e2a\u534a\u900f\u660e\u4e09\u89d2\u5f62\u7ec4\u5408\u6210\u800c\u6210\u7684\u56fe\u6848\u4e0e Firefox \u56fe\u6807\u8fdb\u884c\u9010\u50cf\u7d20\u6bd4\u5bf9, \u5e76\u7528\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u51cf\u53bb\u9010\u50cf\u7d20\u5411\u91cf\u8ddd\u79bb\u7684\u548c\u4f5c\u4e3a\u4e2a\u4f53\u9002\u5e94\u5ea6 \u9009\u62e9\u7b97\u5b50: \u8f6e\u76d8\u9009\u62e9 + \u6700\u4f18\u4fdd\u7559\u7b56\u7565 \u4ea4\u53c9\u7b97\u5b50: \u5355\u70b9\u4ea4\u53c9 \u53d8\u5f02\u7b97\u5b50: \u7b49\u4f4d\u53d8\u5f02 \u8fd0\u884c\u53c2\u6570: \u8fed\u4ee3 12000 \u6b21, \u79cd\u7fa4\u5927\u5c0f 80, \u4ea4\u53c9\u6982\u7387 0.6, \u53d8\u5f02\u6982\u7387 0.008","title":"\u89e3\u6790"},{"location":"content/daze/ga/evolve/#_3","text":"\u4e0b\u9762\u7528 Python \u5b9e\u73b0\u4e0a\u8ff0\u6545\u4e8b. import copy import os import os.path import numpy as np import skimage.draw import skimage.io import skimage.transform control_im_path = 'firefox.jpg' save_dir = '/tmp/img' class Base: def __init__(self, r, c, color, alpha): self.r = r self.c = c self.color = color self.alpha = alpha class Gene: def __init__(self): self.base = [] def copy(self): return copy.deepcopy(self) class GA: def __init__(self): self.pop_size = 80 self.dna_size = 100 self.max_iter = 3000 self.pc = 0.6 self.pm = 0.008 im = skimage.io.imread(control_im_path) if im.shape[2] == 4: im = skimage.color.rgba2rgb(im) im = (255 * im).astype(np.uint8) self.control_im = skimage.transform.resize( im, (128, 128), mode='reflect', preserve_range=True).astype(np.uint8) def decode(self, per): im = np.ones(self.control_im.shape, dtype=np.uint8) * 255 for e in per.base: rr, cc = skimage.draw.polygon(e.r, e.c) skimage.draw.set_color(im, (rr, cc), e.color, e.alpha) return im def perfit(self, per): im = self.decode(per) assert im.shape == self.control_im.shape # \u4e09\u7ef4\u77e9\u9635\u7684\u6b27\u5f0f\u8ddd\u79bb d = np.linalg.norm(np.where(self.control_im > im, self.control_im - im, im - self.control_im)) # \u4f7f\u7528\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u51cf\u53bb\u6b27\u5f0f\u8ddd\u79bb # \u6b64\u5904\u8be5\u6570\u4e3a (self.control_im.size * ((3 * 255 ** 2) ** 0.5) ** 2) ** 0.5 return (self.control_im.size * 195075) ** 0.5 - d def getfit(self, pop): fit = np.zeros(self.pop_size) for i, per in enumerate(pop): fit[i] = self.perfit(per) return fit def genpop(self): pop = [] for _ in range(self.pop_size): per = Gene() for _ in range(self.dna_size): r = np.random.randint(0, self.control_im.shape[0], 3, dtype=np.uint8) c = np.random.randint(0, self.control_im.shape[1], 3, dtype=np.uint8) color = np.random.randint(0, 256, 3) alpha = np.random.random() * 0.45 per.base.append(Base(r, c, color, alpha)) pop.append(per) return pop def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.01 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) son = [] for i in idx: son.append(pop[i].copy()) return son def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a.base[p:], b.base[p:] = b.base[p:], a.base[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): for per in pop: for base in per.base: if np.random.random() < self.pm: base.r = np.random.randint(0, self.control_im.shape[0], 3, dtype=np.uint8) base.c = np.random.randint(0, self.control_im.shape[1], 3, dtype=np.uint8) base.color = np.random.randint(0, 256, 3) base.alpha = np.random.random() * 0.45 return pop def evolve(self): pop = self.genpop() pop_fit = self.getfit(pop) for _ in range(self.max_iter): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() for i, (pop, fit) in enumerate(ga.optret(ga.evolve)()): j = np.argmax(fit) per = pop[j] per_fit = ga.perfit(per) print(f'{i:0>5} {per_fit}') skimage.io.imsave(os.path.join(save_dir, f'{i:0>5}.jpg'), ga.decode(per)) \u6267\u884c\u4e0a\u8ff0\u4ee3\u7801, \u8bb0\u5f97\u4fee\u6539 control_im_path \u4e0e save_dir \u4e3a\u53ef\u7528\u5730\u5740. \u4e0d\u7528\u4e00\u4f1a, \u5c31\u80fd\u5728 save_dir \u4e2d\u89c1\u5230\u6bcf\u4e00\u4ee3\u6700\u4f18\u4e2a\u4f53\u4e86. \u5f53\u7136, \u8dd1\u5b8c 3000 \u4ee3\u8fd8\u662f\u9700\u8981\u4e00\u70b9\u65f6\u95f4\u7684(\u5927\u7ea6\u534a\u5929~).","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/ga/evolve/#_4","text":"\u5b9e\u9645\u4e0a, \u5728\u751f\u6d3b\u548c\u751f\u4ea7\u4e2d, \u5f88\u591a\u65f6\u5019\u5e76\u4e0d\u9700\u8981\u5f97\u5230\u4e00\u4e2a\u5b8c\u7f8e\u7684\u7b54\u6848; \u800c\u5f88\u591a\u95ee\u9898\u5982\u679c\u8981\u5f97\u5230\u5b8c\u7f8e\u7684\u7b54\u6848\u7684\u8bdd, \u9700\u8981\u5f88\u5927\u91cf\u7684\u8ba1\u7b97. \u6240\u4ee5, \u56e0\u4e3a \u9057\u4f20\u7b97\u6cd5\u80fd\u5728\u76f8\u5bf9\u8f83\u77ed\u7684\u65f6\u95f4\u5185\u7ed9\u51fa\u4e00\u4e2a\u8db3\u591f\u597d\u80fd\u51d1\u5408\u7684\u7b54\u6848 , \u5b83\u4ece\u95ee\u4e16\u4f0a\u59cb\u5c31\u8d8a\u6765\u8d8a\u53d7\u5230\u5927\u5bb6\u7684\u91cd\u89c6, \u5bf9\u5b83\u7684\u7814\u7a76\u4e5f\u662f\u65b9\u5174\u672a\u827e. \u5f53\u7136, \u5b83\u4e5f\u6709\u7f3a\u70b9, \u6bd4\u5982\u8bf4\u65e9\u671f\u7684\u4f18\u52bf\u57fa\u56e0\u53ef\u80fd\u4f1a\u5f88\u5feb\u901a\u8fc7\u4ea4\u6362\u57fa\u56e0\u7684\u9014\u5f84\u6563\u64ad\u5230\u6574\u4e2a\u79cd\u7fa4\u4e2d, \u8fd9\u6837\u6709\u53ef\u80fd\u5bfc\u81f4\u65e9\u719f(premature), \u4e5f\u5c31\u662f\u8bf4\u6574\u4e2a\u79cd\u7fa4\u7684\u57fa\u56e0\u8fc7\u65e9\u540c\u4e00\u5316, \u5f97\u4e0d\u5230\u8db3\u591f\u597d\u7684\u7ed3\u679c. \u8fd9\u4e2a\u95ee\u9898\u662f\u96be\u4ee5\u5b8c\u5168\u907f\u514d\u7684. \u5176\u5b9e, \u901a\u8fc7\u5fae\u8c03\u53c2\u6570\u548c\u7e41\u884d\u3001\u53d8\u5f02\u3001\u6dd8\u6c70\u3001\u7ec8\u6b62\u7684\u4ee3\u7801, \u6211\u4eec\u6709\u53ef\u80fd\u5f97\u5230\u66f4\u6709\u6548\u7684\u7b97\u6cd5. \u9057\u4f20\u7b97\u6cd5\u53ea\u662f\u4e00\u4e2a\u6846\u67b6, \u91cc\u8fb9\u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u95ee\u9898\u8fdb\u884c\u8c03\u6574, \u8fd9\u4e5f\u662f\u5b83\u80fd\u5728\u8bb8\u591a\u95ee\u9898\u4e0a\u6d3e\u4e0a\u7528\u573a\u7684\u4e00\u4e2a\u539f\u56e0. \u50cf\u8fd9\u6837\u53ef\u4ee5\u9002\u5e94\u5f88\u591a\u95ee\u9898\u7684\u7b97\u6cd5\u8fd8\u6709\u6a21\u62df\u9000\u706b\u7b97\u6cd5, \u7c92\u5b50\u7fa4\u7b97\u6cd5, \u8681\u7fa4\u7b97\u6cd5, \u7981\u5fcc\u641c\u7d22\u7b49\u7b49, \u7edf\u79f0\u4e3a\u5143\u542f\u53d1\u5f0f\u7b97\u6cd5(Meta-heuristic algorithms). \u53e6\u5916, \u57fa\u4e8e\u81ea\u7136\u6f14\u5316\u8fc7\u7a0b\u7684\u7b97\u6cd5\u9664\u4e86\u5728\u8fd9\u91cc\u8bf4\u5230\u7684\u9057\u4f20\u7b97\u6cd5\u4ee5\u5916, \u8fd8\u6709\u66f4\u5e7f\u6cdb\u7684\u7fa4\u4f53\u9057\u4f20\u7b97\u6cd5\u548c\u9057\u4f20\u7f16\u7a0b\u7b49, \u5b83\u4eec\u80fd\u89e3\u51b3\u5f88\u591a\u68d8\u624b\u7684\u95ee\u9898. \u8fd9\u4e5f\u4ece\u4e00\u4e2a\u4fa7\u9762\u8bf4\u660e, \u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u4e00\u4e2a\u667a\u80fd\u624d\u80fd\u5f97\u5230\u4e00\u4e2a\u6784\u9020\u7cbe\u5de7\u7684\u7cfb\u7edf.","title":"\u540e\u8bb0"},{"location":"content/daze/ga/evolve/#_5","text":"[1] \u65b9\u5f26: \u9057\u4f20\u7b97\u6cd5: \u5185\u5b58\u4e2d\u7684\u8fdb\u5316 http://songshuhui.net/archives/10462","title":"\u53c2\u8003"},{"location":"content/daze/ga/fooled_nn/","text":"\u611a\u5f04\u795e\u7ecf\u7f51\u7edc \u672c\u6587\u7075\u611f\u6765\u81ea\u4e8e\u4e0a\u4e00\u7bc7 \u751f\u7269\u8fdb\u5316\u6a21\u62df . \u795e\u7ecf\u7f51\u7edc\u5f53\u524d\u5df2\u7ecf\u80fd\u8bc6\u522b\u5404\u79cd\u56fe\u50cf, \u7f51\u7edc\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u8303\u56f4\u4e3a 0 \u81f3 1 \u7684\u7f6e\u4fe1\u5ea6(confidence) \u8868\u660e\u5b83\u6709\u591a\u5c11\u628a\u63e1\u8ba4\u4e3a\u8fd9\u5f20\u56fe\u7247\u5c5e\u4e8e\u67d0\u4e00\u5206\u7c7b. \u901a\u8fc7\u5c06\u795e\u7ecf\u7f51\u7edc\u7684\u7f6e\u4fe1\u5ea6\u4f5c\u4e3a\u9057\u4f20\u7b97\u6cd5\u7684\u9002\u5e94\u5ea6, \u53ef\u4ee5\u5f88\u5bb9\u6613\u751f\u6210\u4eba\u773c\u65e0\u6cd5\u8fa8\u8ba4, \u800c\u795e\u7ecf\u7f51\u7edc\u5374\u6709 99.99% \u7684\u628a\u63e1\u8ba4\u4e3a\u662f\u67d0\u4e00\u5206\u7c7b\u7684\u56fe\u50cf(\u4f8b\u5982, \u5c06\u4e00\u5f20\u5145\u6ee1\u65e0\u610f\u4e49\u566a\u70b9\u7684\u56fe\u50cf\u4ee5 99.99% \u7684\u7f6e\u4fe1\u5ea6\u5206\u7c7b\u4e3a\u72ee\u5b50). \u5728 2014 \u5e74\u5df2\u7ecf\u6709\u7814\u7a76\u8005\u7814\u7a76\u8be5\u65b9\u9762\u7684\u77e5\u8bc6, \u8bba\u6587\u5730\u5740\u662f: Deep Neural Networks are Easily Fooled:High Confidence Predictions for Unrecognizable Images . \u9664\u4e86\u4f7f\u7528\u968f\u673a\u566a\u70b9\u611a\u5f04\u795e\u7ecf\u7f51\u7edc\u4e4b\u5916, \u6587\u7ae0\u4e2d\u8fd8\u7814\u7a76\u4e86\u5982\u4f55\u901a\u8fc7\u5fae\u8c03\u50cf\u7d20\u70b9, \u5f97\u5230\u4e00\u5f20\u6807\u7b7e\u4e3a\u56fe\u4e66\u9986\u7684\u72ee\u5b50. \u5176\u5b9e\u7c7b\u4f3c\u7684\u7814\u7a76\u8fd8\u6709\u5f88\u591a, \u6bd4\u5982 All it takes to steal your face is a special pair of glasses \u5c31\u5b9e\u73b0\u4e86\u901a\u8fc7\u4f69\u6234\u4e00\u526f\u7279\u6b8a\u773c\u955c, \u8ba9\u4eba\u8138\u8bc6\u522b\u7cfb\u7edf\u5c06\u4f60\u8bef\u8ba4\u4e3a\u662f\u4ed6\u4eba. \u672c\u6587\u76ee\u7684\u662f\u611a\u5f04\u4e00\u4e2a\u624b\u5199\u6570\u5b57\u8bc6\u522b\u7f51\u7edc. \u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc \u8fd9\u91cc\u4f7f\u7528 keras \u6765\u8bad\u7ec3\u6211\u4eec\u7684\u624b\u5199\u6570\u5b57\u8bc6\u522b\u6a21\u578b. \u76f4\u63a5\u7528\u5b98\u65b9 examples \u91cc\u7684\u8bad\u7ec3\u4ee3\u7801: https://github.com/keras-team/keras/blob/master/examples/mnist_mlp.py , \u8bb0\u5f97\u5728\u539f\u59cb\u4ee3\u7801\u6700\u540e\u52a0\u4e0a model.save_weights('mnist_mlp.h5') \u6765\u4fdd\u5b58\u6a21\u578b\u5230\u672c\u5730. keras \u5728\u8be5\u6a21\u578b\u4e0a\u7ed9\u51fa\u7684\u6d4b\u8bd5\u7cbe\u5ea6\u662f 98.40% . \u5728\u5b8c\u6210\u8bad\u7ec3\u540e, \u968f\u673a\u751f\u6210\u4e00\u4e2a 28 * 28 \u7684\u56fe\u7247\u6d4b\u8bd5\u4e00\u4e0b\u8be5\u6a21\u578b: import keras.losses import keras.models import keras.optimizers import numpy as np model = keras.models.Sequential() model.add(keras.layers.core.Dense(512, activation='relu', input_shape=(784, ))) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(512, activation='relu')) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(10, activation='softmax')) model.compile( loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.RMSprop(), metrics=['accuracy'] ) model.load_weights('mnist_mlp.h5') def predict(x): assert x.shape == (784, ) y = model.predict(np.array([x]), verbose=0) return y[0] x = np.random.randint(0, 2, size=784, dtype=np.bool) r = predict(x) print(r) \u8f93\u51fa\u5982\u4e0b: [ 7.09424297e-09 0.00000000e+00 7.83010735e-04 0.00000000e+00 0.00000000e+00 3.43550600e-14 9.99216914e-01 2.81605187e-19 2.40218861e-36 2.99693766e-28] \u5f00\u59cb\u8c03\u620f \u4ee3\u7801\u548c\u524d\u51e0\u7ae0\u57fa\u672c\u4e00\u6837, \u552f\u4e00\u4e0d\u540c\u662f\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u4f5c\u4e3a\u9057\u4f20\u7b97\u6cd5\u7684\u9002\u5e94\u5ea6\u8ba1\u7b97\u51fd\u6570. \u4e0b\u793a\u7b97\u6cd5\u4f1a\u521d\u59cb\u5316 80 \u5f20 28*28 \u7684\u56fe\u7247, \u5e76\u5c06\u6570\u636e\u4f20\u5165\u795e\u7ecf\u7f51\u7edc\u8ba1\u7b97\u6bcf\u5f20\u56fe\u7247\u5728\u67d0\u4e2a\u6570\u5b57\u4e0a\u7684\u5f97\u5206, \u5982\u679c\u5728\u67d0\u4e00\u8f6e, \u7fa4\u4f53\u4e2d\u6700\u4f18\u79c0\u7684\u4e2a\u4f53\u5f97\u5206\u8d85\u8fc7 0.99, \u5219\u7ed3\u675f\u8fdb\u5316, \u5e76\u4fdd\u5b58\u8be5\u6700\u4f18\u4e2a\u4f53. import os import os.path import keras.losses import keras.models import keras.optimizers import numpy as np import skimage.draw import skimage.io import skimage.transform model = keras.models.Sequential() model.add(keras.layers.core.Dense(512, activation='relu', input_shape=(784, ))) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(512, activation='relu')) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(10, activation='softmax')) model.compile( loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.RMSprop(), metrics=['accuracy'] ) model.load_weights('mnist_mlp.h5') class GA: def __init__(self, aim): self.aim = aim self.pop_size = 80 self.dna_size = 28 * 28 self.max_iter = 500 self.pc = 0.6 self.pm = 0.008 def perfit(self, per): y = model.predict(np.array([per]), verbose=0) return y[0][self.aim] def getfit(self, pop): fit = np.zeros(self.pop_size) for i, per in enumerate(pop): fit[i] = self.perfit(per) return fit def genpop(self): return np.random.choice(np.array([0, 1]), (self.pop_size, self.dna_size)).astype(np.bool) def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.01 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) return pop[idx] def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = self.genpop() pop_fit = self.getfit(pop) for _ in range(self.max_iter): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit save_dir = 'mnist_ga_fooled' for n in range(10): ga = GA(n) for i, (pop, fit) in enumerate(ga.optret(ga.evolve)()): j = np.argmax(fit) per = pop[j] per_fit = fit[j] print(f'{n} {per_fit}') if per_fit > 0.99: skimage.io.imsave(os.path.join(save_dir, f'{n}.bmp'), per.reshape((28, 28)) * 255) break \u5728\u76ee\u5f55 mnist_ga_fooled \u4e0b\u4fdd\u5b58\u4e86\u6700\u7ec8\u751f\u6210\u7684\u6570\u5b57 0-9 \u7684\u56fe\u7247, \u6bcf\u5f20\u56fe\u7247\u5728\u5bf9\u5e94\u5206\u7c7b\u5668\u4e0b\u90fd\u6709 99% \u4ee5\u4e0a\u7684\u6982\u7387. \u4e0b\u793a\u56fe\u7247\u4ece\u5de6\u81f3\u53f3\u5206\u522b\u4e3a\u6570\u5b57 0 \u81f3 9. \u771f\u662f\u6709\u8da3.","title":"\u9057\u4f20\u7b97\u6cd5-\u611a\u5f04\u795e\u7ecf\u7f51\u7edc"},{"location":"content/daze/ga/fooled_nn/#_1","text":"\u672c\u6587\u7075\u611f\u6765\u81ea\u4e8e\u4e0a\u4e00\u7bc7 \u751f\u7269\u8fdb\u5316\u6a21\u62df . \u795e\u7ecf\u7f51\u7edc\u5f53\u524d\u5df2\u7ecf\u80fd\u8bc6\u522b\u5404\u79cd\u56fe\u50cf, \u7f51\u7edc\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u8303\u56f4\u4e3a 0 \u81f3 1 \u7684\u7f6e\u4fe1\u5ea6(confidence) \u8868\u660e\u5b83\u6709\u591a\u5c11\u628a\u63e1\u8ba4\u4e3a\u8fd9\u5f20\u56fe\u7247\u5c5e\u4e8e\u67d0\u4e00\u5206\u7c7b. \u901a\u8fc7\u5c06\u795e\u7ecf\u7f51\u7edc\u7684\u7f6e\u4fe1\u5ea6\u4f5c\u4e3a\u9057\u4f20\u7b97\u6cd5\u7684\u9002\u5e94\u5ea6, \u53ef\u4ee5\u5f88\u5bb9\u6613\u751f\u6210\u4eba\u773c\u65e0\u6cd5\u8fa8\u8ba4, \u800c\u795e\u7ecf\u7f51\u7edc\u5374\u6709 99.99% \u7684\u628a\u63e1\u8ba4\u4e3a\u662f\u67d0\u4e00\u5206\u7c7b\u7684\u56fe\u50cf(\u4f8b\u5982, \u5c06\u4e00\u5f20\u5145\u6ee1\u65e0\u610f\u4e49\u566a\u70b9\u7684\u56fe\u50cf\u4ee5 99.99% \u7684\u7f6e\u4fe1\u5ea6\u5206\u7c7b\u4e3a\u72ee\u5b50). \u5728 2014 \u5e74\u5df2\u7ecf\u6709\u7814\u7a76\u8005\u7814\u7a76\u8be5\u65b9\u9762\u7684\u77e5\u8bc6, \u8bba\u6587\u5730\u5740\u662f: Deep Neural Networks are Easily Fooled:High Confidence Predictions for Unrecognizable Images . \u9664\u4e86\u4f7f\u7528\u968f\u673a\u566a\u70b9\u611a\u5f04\u795e\u7ecf\u7f51\u7edc\u4e4b\u5916, \u6587\u7ae0\u4e2d\u8fd8\u7814\u7a76\u4e86\u5982\u4f55\u901a\u8fc7\u5fae\u8c03\u50cf\u7d20\u70b9, \u5f97\u5230\u4e00\u5f20\u6807\u7b7e\u4e3a\u56fe\u4e66\u9986\u7684\u72ee\u5b50. \u5176\u5b9e\u7c7b\u4f3c\u7684\u7814\u7a76\u8fd8\u6709\u5f88\u591a, \u6bd4\u5982 All it takes to steal your face is a special pair of glasses \u5c31\u5b9e\u73b0\u4e86\u901a\u8fc7\u4f69\u6234\u4e00\u526f\u7279\u6b8a\u773c\u955c, \u8ba9\u4eba\u8138\u8bc6\u522b\u7cfb\u7edf\u5c06\u4f60\u8bef\u8ba4\u4e3a\u662f\u4ed6\u4eba. \u672c\u6587\u76ee\u7684\u662f\u611a\u5f04\u4e00\u4e2a\u624b\u5199\u6570\u5b57\u8bc6\u522b\u7f51\u7edc.","title":"\u611a\u5f04\u795e\u7ecf\u7f51\u7edc"},{"location":"content/daze/ga/fooled_nn/#_2","text":"\u8fd9\u91cc\u4f7f\u7528 keras \u6765\u8bad\u7ec3\u6211\u4eec\u7684\u624b\u5199\u6570\u5b57\u8bc6\u522b\u6a21\u578b. \u76f4\u63a5\u7528\u5b98\u65b9 examples \u91cc\u7684\u8bad\u7ec3\u4ee3\u7801: https://github.com/keras-team/keras/blob/master/examples/mnist_mlp.py , \u8bb0\u5f97\u5728\u539f\u59cb\u4ee3\u7801\u6700\u540e\u52a0\u4e0a model.save_weights('mnist_mlp.h5') \u6765\u4fdd\u5b58\u6a21\u578b\u5230\u672c\u5730. keras \u5728\u8be5\u6a21\u578b\u4e0a\u7ed9\u51fa\u7684\u6d4b\u8bd5\u7cbe\u5ea6\u662f 98.40% . \u5728\u5b8c\u6210\u8bad\u7ec3\u540e, \u968f\u673a\u751f\u6210\u4e00\u4e2a 28 * 28 \u7684\u56fe\u7247\u6d4b\u8bd5\u4e00\u4e0b\u8be5\u6a21\u578b: import keras.losses import keras.models import keras.optimizers import numpy as np model = keras.models.Sequential() model.add(keras.layers.core.Dense(512, activation='relu', input_shape=(784, ))) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(512, activation='relu')) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(10, activation='softmax')) model.compile( loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.RMSprop(), metrics=['accuracy'] ) model.load_weights('mnist_mlp.h5') def predict(x): assert x.shape == (784, ) y = model.predict(np.array([x]), verbose=0) return y[0] x = np.random.randint(0, 2, size=784, dtype=np.bool) r = predict(x) print(r) \u8f93\u51fa\u5982\u4e0b: [ 7.09424297e-09 0.00000000e+00 7.83010735e-04 0.00000000e+00 0.00000000e+00 3.43550600e-14 9.99216914e-01 2.81605187e-19 2.40218861e-36 2.99693766e-28]","title":"\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc"},{"location":"content/daze/ga/fooled_nn/#_3","text":"\u4ee3\u7801\u548c\u524d\u51e0\u7ae0\u57fa\u672c\u4e00\u6837, \u552f\u4e00\u4e0d\u540c\u662f\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u4f5c\u4e3a\u9057\u4f20\u7b97\u6cd5\u7684\u9002\u5e94\u5ea6\u8ba1\u7b97\u51fd\u6570. \u4e0b\u793a\u7b97\u6cd5\u4f1a\u521d\u59cb\u5316 80 \u5f20 28*28 \u7684\u56fe\u7247, \u5e76\u5c06\u6570\u636e\u4f20\u5165\u795e\u7ecf\u7f51\u7edc\u8ba1\u7b97\u6bcf\u5f20\u56fe\u7247\u5728\u67d0\u4e2a\u6570\u5b57\u4e0a\u7684\u5f97\u5206, \u5982\u679c\u5728\u67d0\u4e00\u8f6e, \u7fa4\u4f53\u4e2d\u6700\u4f18\u79c0\u7684\u4e2a\u4f53\u5f97\u5206\u8d85\u8fc7 0.99, \u5219\u7ed3\u675f\u8fdb\u5316, \u5e76\u4fdd\u5b58\u8be5\u6700\u4f18\u4e2a\u4f53. import os import os.path import keras.losses import keras.models import keras.optimizers import numpy as np import skimage.draw import skimage.io import skimage.transform model = keras.models.Sequential() model.add(keras.layers.core.Dense(512, activation='relu', input_shape=(784, ))) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(512, activation='relu')) model.add(keras.layers.core.Dropout(0.2)) model.add(keras.layers.core.Dense(10, activation='softmax')) model.compile( loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.RMSprop(), metrics=['accuracy'] ) model.load_weights('mnist_mlp.h5') class GA: def __init__(self, aim): self.aim = aim self.pop_size = 80 self.dna_size = 28 * 28 self.max_iter = 500 self.pc = 0.6 self.pm = 0.008 def perfit(self, per): y = model.predict(np.array([per]), verbose=0) return y[0][self.aim] def getfit(self, pop): fit = np.zeros(self.pop_size) for i, per in enumerate(pop): fit[i] = self.perfit(per) return fit def genpop(self): return np.random.choice(np.array([0, 1]), (self.pop_size, self.dna_size)).astype(np.bool) def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.01 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) return pop[idx] def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = self.genpop() pop_fit = self.getfit(pop) for _ in range(self.max_iter): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit save_dir = 'mnist_ga_fooled' for n in range(10): ga = GA(n) for i, (pop, fit) in enumerate(ga.optret(ga.evolve)()): j = np.argmax(fit) per = pop[j] per_fit = fit[j] print(f'{n} {per_fit}') if per_fit > 0.99: skimage.io.imsave(os.path.join(save_dir, f'{n}.bmp'), per.reshape((28, 28)) * 255) break \u5728\u76ee\u5f55 mnist_ga_fooled \u4e0b\u4fdd\u5b58\u4e86\u6700\u7ec8\u751f\u6210\u7684\u6570\u5b57 0-9 \u7684\u56fe\u7247, \u6bcf\u5f20\u56fe\u7247\u5728\u5bf9\u5e94\u5206\u7c7b\u5668\u4e0b\u90fd\u6709 99% \u4ee5\u4e0a\u7684\u6982\u7387. \u4e0b\u793a\u56fe\u7247\u4ece\u5de6\u81f3\u53f3\u5206\u522b\u4e3a\u6570\u5b57 0 \u81f3 9. \u771f\u662f\u6709\u8da3.","title":"\u5f00\u59cb\u8c03\u620f"},{"location":"content/daze/ga/sga/","text":"\u9057\u4f20\u7b97\u6cd5\u7b80\u8ff0 \u9057\u4f20\u7b97\u6cd5(\u82f1\u8bed: Genetic Algorithm (GA)) \u662f\u8ba1\u7b97\u6570\u5b66\u4e2d\u7528\u4e8e\u89e3\u51b3\u6700\u4f73\u5316\u7684\u641c\u7d22\u7b97\u6cd5, \u662f\u8fdb\u5316\u7b97\u6cd5\u7684\u4e00\u79cd. \u8fdb\u5316\u7b97\u6cd5\u6700\u521d\u662f\u501f\u9274\u4e86\u8fdb\u5316\u751f\u7269\u5b66\u4e2d\u7684\u4e00\u4e9b\u73b0\u8c61\u800c\u53d1\u5c55\u8d77\u6765\u7684, \u8fd9\u4e9b\u73b0\u8c61\u5305\u62ec\u9057\u4f20, \u7a81\u53d8, \u81ea\u7136\u9009\u62e9\u4ee5\u53ca\u6742\u4ea4\u7b49. \u9057\u4f20\u7b97\u6cd5\u901a\u5e38\u5b9e\u73b0\u65b9\u5f0f\u4e3a\u4e00\u79cd\u8ba1\u7b97\u673a\u6a21\u62df. \u5bf9\u4e8e\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898, \u4e00\u5b9a\u6570\u91cf\u7684\u5019\u9009\u89e3(\u79f0\u4e3a\u4e2a\u4f53)\u53ef\u62bd\u8c61\u8868\u793a\u4e3a\u67d3\u8272\u4f53, \u4f7f\u79cd\u7fa4\u5411\u66f4\u597d\u7684\u89e3\u8fdb\u5316. \u4f20\u7edf\u4e0a, \u89e3\u7528\u4e8c\u8fdb\u5236\u8868\u793a(\u5373 0 \u548c 1 \u7684\u4e32), \u4f46\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u8868\u793a\u65b9\u6cd5. \u8fdb\u5316\u4ece\u5b8c\u5168\u968f\u673a\u4e2a\u4f53\u7684\u79cd\u7fa4\u5f00\u59cb, \u4e4b\u540e\u4e00\u4ee3\u4e00\u4ee3\u53d1\u751f. \u5728\u6bcf\u4e00\u4ee3\u4e2d\u8bc4\u4ef7\u6574\u4e2a\u79cd\u7fa4\u7684\u9002\u5e94\u5ea6, \u4ece\u5f53\u524d\u79cd\u7fa4\u4e2d\u968f\u673a\u5730\u9009\u62e9\u591a\u4e2a\u4e2a\u4f53(\u57fa\u4e8e\u5b83\u4eec\u7684\u9002\u5e94\u5ea6), \u901a\u8fc7\u81ea\u7136\u9009\u62e9\u548c\u7a81\u53d8\u4ea7\u751f\u65b0\u7684\u751f\u547d\u79cd\u7fa4, \u8be5\u79cd\u7fa4\u5728\u7b97\u6cd5\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\u4e2d\u6210\u4e3a\u5f53\u524d\u79cd\u7fa4. \u9009\u62e9(select): \u6839\u636e\u5404\u4e2a\u4e2a\u4f53\u7684\u9002\u5e94\u5ea6, \u6309\u7167\u4e00\u5b9a\u89c4\u5219\u6216\u65b9\u6cd5, \u4ece\u7b2c t \u4ee3\u4e2a\u4f53 P(t) \u4e2d\u9009\u53d6\u4e00\u4e9b\u4f18\u826f\u4e2a\u4f53\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3 P(t+1) \u4e2d \u4ea4\u53c9(crossover): \u5c06\u7fa4\u4f53 P(t) \u5185\u7684\u4e2a\u4f53\u968f\u673a\u642d\u914d\u6210\u5bf9, \u5bf9\u6bcf\u4e00\u4e2a\u4e2a\u4f53, \u4ee5\u4e00\u5b9a\u6982\u7387 pc \u4ea4\u6362\u5b83\u4eec\u4e4b\u95f4\u7684\u90e8\u5206\u67d3\u8272\u4f53 \u53d8\u5f02(mutate): \u5bf9\u7fa4\u4f53 P(t) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e2a\u4f53, \u4ee5\u67d0\u4e00\u6982\u7387 pm \u6539\u53d8\u67d0\u4e00\u4e2a\u6216\u67d0\u4e00\u4e9b\u57fa\u56e0\u5ea7\u4e0a\u7684\u57fa\u56e0\u503c\u4e3a\u5176\u4ed6\u7684\u7b49\u4f4d\u57fa\u56e0 \u9057\u4f20\u7b97\u6cd5\u7684\u8fd0\u7b97\u8fc7\u7a0b: \u7fa4\u4f53 P(t) -> \u9009\u62e9\u8fd0\u7b97 -> \u4ea4\u53c9\u8fd0\u7b97 -> \u53d8\u5f02\u8fd0\u7b97 -> \u7fa4\u4f53 P(t+1) -> \u89e3\u7801 -> \u89e3\u96c6\u5408 -> \u4e2a\u4f53\u8bc4\u4ef7 \u57fa\u672c\u9057\u4f20\u7b97\u6cd5(SGA)\u7684\u6784\u6210\u8981\u7d20 \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u63d0\u4f9b\u4e09\u4e2a\u7b97\u5b50: \u9009\u62e9, \u4ea4\u53c9\u548c\u53d8\u5f02 \u67d3\u8272\u4f53\u7f16\u7801\u65b9\u6cd5: \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u4f7f\u7528\u56fa\u5b9a\u957f\u5ea6\u7684\u4e8c\u8fdb\u5236\u7b26\u53f7\u4e32\u8868\u793a\u7fa4\u4f53\u4e2d\u7684\u4e2a\u4f53, \u5176\u7b49\u4f4d\u57fa\u56e0\u7531 0, 1 \u7ec4\u6210. \u521d\u59cb\u7fa4\u4f53\u4e2d\u7684\u6bcf\u4e2a\u4e2a\u4f53\u7684\u57fa\u56e0\u503c\u53ef\u7528\u5747\u5300\u5206\u5e03\u7684\u968f\u673a\u6570\u4ea7\u751f. \u4e2a\u4f53\u9002\u5e94\u5ea6\u8bc4\u4ef7: \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u6309\u4e0e\u4e2a\u4f53\u9002\u5e94\u5ea6\u6210\u6b63\u6bd4\u7684\u6982\u7387\u6765\u51b3\u5b9a\u5f53\u524d\u7fa4\u4f53\u4e2d\u6bcf\u4e2a\u4e2a\u4f53\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7fa4\u4f53\u4e2d\u7684\u673a\u4f1a\u7684\u591a\u5c11. \u4e3a\u6b63\u786e\u8ba1\u7b97\u8fd9\u4e2a\u6982\u7387, \u8fd9\u8981\u6c42\u4e2a\u4f53\u9002\u5e94\u5ea6\u5927\u4e8e\u7b49\u4e8e 0. \u9057\u4f20\u7b97\u5b50 \u9009\u62e9\u7b97\u5b50\u4f7f\u7528\u6bd4\u4f8b\u9009\u62e9\u7b97\u5b50 \u4ea4\u53c9\u7b97\u5b50\u4f7f\u7528\u5355\u70b9\u4ea4\u53c9\u7b97\u5b50 \u53d8\u5f02\u7b97\u5b50\u4f7f\u7528\u57fa\u672c\u4f4d\u53d8\u5f02\u7b97\u5b50\u6216\u5747\u5300\u53d8\u5f02\u7b97\u5b50 \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u7684\u8fd0\u884c\u53c2\u6570 M: \u79cd\u7fa4\u5927\u5c0f, \u4e00\u822c\u53d6 20-100 T: \u7ec8\u6b62\u8fdb\u5316\u4ee3\u6570, \u4e00\u822c\u53d6 100-500 PC: \u4ea4\u53c9\u6982\u7387, \u4e00\u822c\u53d6 0.4-0.99 PM: \u53d8\u5f02\u6982\u7387, \u4e00\u822c\u53d6 0.0001-0.1 \u6bd4\u4f8b\u9009\u62e9\u7b97\u5b50 \u4e2a\u4f53\u88ab\u9009\u4e2d\u5e76\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u6982\u7387\u4e0e\u5176\u9002\u5e94\u5ea6\u5927\u5c0f\u6210\u6b63\u6bd4, \u5176\u8fd0\u7b97\u8fc7\u7a0b\u4e3a \u8ba1\u7b97\u7fa4\u4f53\u4e2d\u6240\u6709\u4e2a\u4f53\u7684\u9002\u5e94\u5ea6\u603b\u548c \u8ba1\u7b97\u6bcf\u4e2a\u4e2a\u4f53\u7684\u76f8\u5bf9\u9002\u5e94\u5ea6\u5927\u5c0f, \u5b83\u5373\u4e3a\u5404\u4e2a\u4e2a\u4f53\u88ab\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u6982\u7387 \u786e\u5b9a\u88ab\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u4e2a\u4f53 \u5355\u70b9\u4ea4\u53c9\u7b97\u5b50 \u5355\u70b9\u4ea4\u53c9\u7b97\u5b50\u662f\u6700\u57fa\u672c\u7684\u4ea4\u53c9\u7b97\u5b50, \u5176\u8fd0\u7b97\u8fc7\u7a0b\u4e3a \u5bf9\u7fa4\u4f53\u4e2d\u7684\u4e2a\u4f53\u8fdb\u884c\u4e24\u4e24\u968f\u673a\u914d\u5bf9 \u5bf9\u6bcf\u4e00\u5bf9\u914d\u5bf9\u7684\u4e2a\u4f53, \u8bbe\u7f6e\u5176\u67d0\u4e00\u57fa\u56e0\u5ea7\u4e4b\u540e\u7684\u4f4d\u7f6e\u4e3a\u4ea4\u53c9\u70b9 \u4f9d\u8bbe\u5b9a\u4ea4\u53c9\u6982\u7387, \u4ea4\u6362\u4ea4\u53c9\u70b9\u4e4b\u540e\u7684\u57fa\u56e0, \u4ece\u800c\u4ea7\u751f\u4e24\u4e2a\u65b0\u7684\u4e2a\u4f53 \u5355\u70b9\u4ea4\u53c9\u793a\u610f\u8fd0\u7b97\u5982\u4e0b: A: 10110111|00 crossover A': 10110111|11 B: 00011100|11 --------> B': 00011100|00 \u57fa\u672c\u4f4d\u53d8\u5f02\u7b97\u5b50 \u4f9d\u7167\u53d8\u5f02\u6982\u7387, \u5c06\u57fa\u56e0\u5ea7\u4e0a\u7684\u57fa\u56e0\u53d8\u4e3a\u968f\u673a\u7b49\u4f4d\u57fa\u56e0 \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u5728\u51fd\u6570\u4f18\u5316\u65b9\u9762\u7684\u5e94\u7528\u4e3e\u4f8b \u4f8b : \u6c42 $f(x)=sin(10x) \\times x + cos(2x) \\times x$ \u5728 [0, 5] \u533a\u95f4\u5185\u7684\u6700\u5927\u503c. \u89e3 : \u786e\u5b9a\u51b3\u7b56\u53d8\u91cf\u548c\u7ea6\u675f\u6761\u4ef6 \u786e\u5b9a\u4f18\u5316\u6a21\u578b \u786e\u5b9a\u7f16\u7801\u65b9\u5f0f. \u6b64\u5904\u4f7f\u7528 10 \u4f4d\u4e8c\u8fdb\u5236\u7f16\u7801\u8868\u793a $x \\in [0, 5]$ \u8303\u56f4 \u786e\u5b9a\u89e3\u7801\u65b9\u5f0f. \u5373\u5982\u4f55\u5c06 10 \u4f4d\u4e8c\u8fdb\u5236\u7f16\u7801\u8fd8\u539f\u4e3a\u53d8\u91cf $x$ \u786e\u5b9a\u4e2a\u4f53\u8bc4\u4ef7\u65b9\u6cd5. \u6b64\u5904\u76f4\u63a5\u4f7f\u7528 $f(x)$ \u4f5c\u4e3a\u4e2a\u4f53\u9002\u5e94\u5ea6\u8bc4\u4ef7. \u8bbe\u8ba1\u9057\u4f20\u7b97\u5b50 \u8bbe\u5b9a\u9057\u4f20\u7b97\u5b50\u8fd0\u884c\u53c2\u6570 Python \u5b9e\u73b0: import matplotlib.animation import matplotlib.pyplot as plt import numpy as np plt.style.use('seaborn') class GA: def __init__(self): self.pop_size = 80 self.max_iter = 20 self.pc = 0.6 self.pm = 0.001 self.dna_size = 10 self.x_bound = [0, 5] def f(self, x): return np.sin(10 * x) * x + np.cos(2 * x) * x def encode(self, x): a = x / (self.x_bound[1] - self.x_bound[0]) * (2 ** self.dna_size - 1) a = int(a) return np.array(list(np.binary_repr(a).zfill(self.dna_size))).astype(np.uint8) def decode(self, per): return per.dot(1 << np.arange(self.dna_size)[::-1]) / (2**self.dna_size - 1) * self.x_bound[1] def perfit(self, per): x = self.decode(per) return self.f(x) def getfit(self, pop): x = self.decode(pop) r = self.f(x) return r def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.001 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) pop = pop[idx] return pop def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = np.random.randint(2, size=(self.pop_size, self.dna_size)) pop_fit = self.getfit(pop) yield pop, pop_fit for _ in range(self.max_iter - 1): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() gaiter = ga.evolve() fig, ax = plt.subplots() ax.set_xlim(-0.2, 5.2) ax.set_ylim(-10, 7.5) x = np.linspace(*ga.x_bound, 200) ax.plot(x, ga.f(x)) sca = ax.scatter([], [], s=200, c='#CF6FC1', alpha=0.5) def update(*args): pop, _ = next(gaiter) fx = ga.decode(pop) fv = ga.f(fx) sca.set_offsets(np.column_stack((fx, fv))) # plt.savefig(f'/tmp/img/{args[0]+1:0>2}.png') ani = matplotlib.animation.FuncAnimation(fig, update, interval=200, repeat=False) plt.show()","title":"\u9057\u4f20\u7b97\u6cd5-\u7b80\u5355\u9057\u4f20\u7b97\u6cd5"},{"location":"content/daze/ga/sga/#_1","text":"\u9057\u4f20\u7b97\u6cd5(\u82f1\u8bed: Genetic Algorithm (GA)) \u662f\u8ba1\u7b97\u6570\u5b66\u4e2d\u7528\u4e8e\u89e3\u51b3\u6700\u4f73\u5316\u7684\u641c\u7d22\u7b97\u6cd5, \u662f\u8fdb\u5316\u7b97\u6cd5\u7684\u4e00\u79cd. \u8fdb\u5316\u7b97\u6cd5\u6700\u521d\u662f\u501f\u9274\u4e86\u8fdb\u5316\u751f\u7269\u5b66\u4e2d\u7684\u4e00\u4e9b\u73b0\u8c61\u800c\u53d1\u5c55\u8d77\u6765\u7684, \u8fd9\u4e9b\u73b0\u8c61\u5305\u62ec\u9057\u4f20, \u7a81\u53d8, \u81ea\u7136\u9009\u62e9\u4ee5\u53ca\u6742\u4ea4\u7b49. \u9057\u4f20\u7b97\u6cd5\u901a\u5e38\u5b9e\u73b0\u65b9\u5f0f\u4e3a\u4e00\u79cd\u8ba1\u7b97\u673a\u6a21\u62df. \u5bf9\u4e8e\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898, \u4e00\u5b9a\u6570\u91cf\u7684\u5019\u9009\u89e3(\u79f0\u4e3a\u4e2a\u4f53)\u53ef\u62bd\u8c61\u8868\u793a\u4e3a\u67d3\u8272\u4f53, \u4f7f\u79cd\u7fa4\u5411\u66f4\u597d\u7684\u89e3\u8fdb\u5316. \u4f20\u7edf\u4e0a, \u89e3\u7528\u4e8c\u8fdb\u5236\u8868\u793a(\u5373 0 \u548c 1 \u7684\u4e32), \u4f46\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u8868\u793a\u65b9\u6cd5. \u8fdb\u5316\u4ece\u5b8c\u5168\u968f\u673a\u4e2a\u4f53\u7684\u79cd\u7fa4\u5f00\u59cb, \u4e4b\u540e\u4e00\u4ee3\u4e00\u4ee3\u53d1\u751f. \u5728\u6bcf\u4e00\u4ee3\u4e2d\u8bc4\u4ef7\u6574\u4e2a\u79cd\u7fa4\u7684\u9002\u5e94\u5ea6, \u4ece\u5f53\u524d\u79cd\u7fa4\u4e2d\u968f\u673a\u5730\u9009\u62e9\u591a\u4e2a\u4e2a\u4f53(\u57fa\u4e8e\u5b83\u4eec\u7684\u9002\u5e94\u5ea6), \u901a\u8fc7\u81ea\u7136\u9009\u62e9\u548c\u7a81\u53d8\u4ea7\u751f\u65b0\u7684\u751f\u547d\u79cd\u7fa4, \u8be5\u79cd\u7fa4\u5728\u7b97\u6cd5\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\u4e2d\u6210\u4e3a\u5f53\u524d\u79cd\u7fa4. \u9009\u62e9(select): \u6839\u636e\u5404\u4e2a\u4e2a\u4f53\u7684\u9002\u5e94\u5ea6, \u6309\u7167\u4e00\u5b9a\u89c4\u5219\u6216\u65b9\u6cd5, \u4ece\u7b2c t \u4ee3\u4e2a\u4f53 P(t) \u4e2d\u9009\u53d6\u4e00\u4e9b\u4f18\u826f\u4e2a\u4f53\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3 P(t+1) \u4e2d \u4ea4\u53c9(crossover): \u5c06\u7fa4\u4f53 P(t) \u5185\u7684\u4e2a\u4f53\u968f\u673a\u642d\u914d\u6210\u5bf9, \u5bf9\u6bcf\u4e00\u4e2a\u4e2a\u4f53, \u4ee5\u4e00\u5b9a\u6982\u7387 pc \u4ea4\u6362\u5b83\u4eec\u4e4b\u95f4\u7684\u90e8\u5206\u67d3\u8272\u4f53 \u53d8\u5f02(mutate): \u5bf9\u7fa4\u4f53 P(t) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e2a\u4f53, \u4ee5\u67d0\u4e00\u6982\u7387 pm \u6539\u53d8\u67d0\u4e00\u4e2a\u6216\u67d0\u4e00\u4e9b\u57fa\u56e0\u5ea7\u4e0a\u7684\u57fa\u56e0\u503c\u4e3a\u5176\u4ed6\u7684\u7b49\u4f4d\u57fa\u56e0 \u9057\u4f20\u7b97\u6cd5\u7684\u8fd0\u7b97\u8fc7\u7a0b: \u7fa4\u4f53 P(t) -> \u9009\u62e9\u8fd0\u7b97 -> \u4ea4\u53c9\u8fd0\u7b97 -> \u53d8\u5f02\u8fd0\u7b97 -> \u7fa4\u4f53 P(t+1) -> \u89e3\u7801 -> \u89e3\u96c6\u5408 -> \u4e2a\u4f53\u8bc4\u4ef7","title":"\u9057\u4f20\u7b97\u6cd5\u7b80\u8ff0"},{"location":"content/daze/ga/sga/#sga","text":"\u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u63d0\u4f9b\u4e09\u4e2a\u7b97\u5b50: \u9009\u62e9, \u4ea4\u53c9\u548c\u53d8\u5f02 \u67d3\u8272\u4f53\u7f16\u7801\u65b9\u6cd5: \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u4f7f\u7528\u56fa\u5b9a\u957f\u5ea6\u7684\u4e8c\u8fdb\u5236\u7b26\u53f7\u4e32\u8868\u793a\u7fa4\u4f53\u4e2d\u7684\u4e2a\u4f53, \u5176\u7b49\u4f4d\u57fa\u56e0\u7531 0, 1 \u7ec4\u6210. \u521d\u59cb\u7fa4\u4f53\u4e2d\u7684\u6bcf\u4e2a\u4e2a\u4f53\u7684\u57fa\u56e0\u503c\u53ef\u7528\u5747\u5300\u5206\u5e03\u7684\u968f\u673a\u6570\u4ea7\u751f. \u4e2a\u4f53\u9002\u5e94\u5ea6\u8bc4\u4ef7: \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u6309\u4e0e\u4e2a\u4f53\u9002\u5e94\u5ea6\u6210\u6b63\u6bd4\u7684\u6982\u7387\u6765\u51b3\u5b9a\u5f53\u524d\u7fa4\u4f53\u4e2d\u6bcf\u4e2a\u4e2a\u4f53\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7fa4\u4f53\u4e2d\u7684\u673a\u4f1a\u7684\u591a\u5c11. \u4e3a\u6b63\u786e\u8ba1\u7b97\u8fd9\u4e2a\u6982\u7387, \u8fd9\u8981\u6c42\u4e2a\u4f53\u9002\u5e94\u5ea6\u5927\u4e8e\u7b49\u4e8e 0. \u9057\u4f20\u7b97\u5b50 \u9009\u62e9\u7b97\u5b50\u4f7f\u7528\u6bd4\u4f8b\u9009\u62e9\u7b97\u5b50 \u4ea4\u53c9\u7b97\u5b50\u4f7f\u7528\u5355\u70b9\u4ea4\u53c9\u7b97\u5b50 \u53d8\u5f02\u7b97\u5b50\u4f7f\u7528\u57fa\u672c\u4f4d\u53d8\u5f02\u7b97\u5b50\u6216\u5747\u5300\u53d8\u5f02\u7b97\u5b50 \u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u7684\u8fd0\u884c\u53c2\u6570 M: \u79cd\u7fa4\u5927\u5c0f, \u4e00\u822c\u53d6 20-100 T: \u7ec8\u6b62\u8fdb\u5316\u4ee3\u6570, \u4e00\u822c\u53d6 100-500 PC: \u4ea4\u53c9\u6982\u7387, \u4e00\u822c\u53d6 0.4-0.99 PM: \u53d8\u5f02\u6982\u7387, \u4e00\u822c\u53d6 0.0001-0.1 \u6bd4\u4f8b\u9009\u62e9\u7b97\u5b50 \u4e2a\u4f53\u88ab\u9009\u4e2d\u5e76\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u6982\u7387\u4e0e\u5176\u9002\u5e94\u5ea6\u5927\u5c0f\u6210\u6b63\u6bd4, \u5176\u8fd0\u7b97\u8fc7\u7a0b\u4e3a \u8ba1\u7b97\u7fa4\u4f53\u4e2d\u6240\u6709\u4e2a\u4f53\u7684\u9002\u5e94\u5ea6\u603b\u548c \u8ba1\u7b97\u6bcf\u4e2a\u4e2a\u4f53\u7684\u76f8\u5bf9\u9002\u5e94\u5ea6\u5927\u5c0f, \u5b83\u5373\u4e3a\u5404\u4e2a\u4e2a\u4f53\u88ab\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u6982\u7387 \u786e\u5b9a\u88ab\u9057\u4f20\u5230\u4e0b\u4e00\u4ee3\u7684\u4e2a\u4f53 \u5355\u70b9\u4ea4\u53c9\u7b97\u5b50 \u5355\u70b9\u4ea4\u53c9\u7b97\u5b50\u662f\u6700\u57fa\u672c\u7684\u4ea4\u53c9\u7b97\u5b50, \u5176\u8fd0\u7b97\u8fc7\u7a0b\u4e3a \u5bf9\u7fa4\u4f53\u4e2d\u7684\u4e2a\u4f53\u8fdb\u884c\u4e24\u4e24\u968f\u673a\u914d\u5bf9 \u5bf9\u6bcf\u4e00\u5bf9\u914d\u5bf9\u7684\u4e2a\u4f53, \u8bbe\u7f6e\u5176\u67d0\u4e00\u57fa\u56e0\u5ea7\u4e4b\u540e\u7684\u4f4d\u7f6e\u4e3a\u4ea4\u53c9\u70b9 \u4f9d\u8bbe\u5b9a\u4ea4\u53c9\u6982\u7387, \u4ea4\u6362\u4ea4\u53c9\u70b9\u4e4b\u540e\u7684\u57fa\u56e0, \u4ece\u800c\u4ea7\u751f\u4e24\u4e2a\u65b0\u7684\u4e2a\u4f53 \u5355\u70b9\u4ea4\u53c9\u793a\u610f\u8fd0\u7b97\u5982\u4e0b: A: 10110111|00 crossover A': 10110111|11 B: 00011100|11 --------> B': 00011100|00 \u57fa\u672c\u4f4d\u53d8\u5f02\u7b97\u5b50 \u4f9d\u7167\u53d8\u5f02\u6982\u7387, \u5c06\u57fa\u56e0\u5ea7\u4e0a\u7684\u57fa\u56e0\u53d8\u4e3a\u968f\u673a\u7b49\u4f4d\u57fa\u56e0","title":"\u57fa\u672c\u9057\u4f20\u7b97\u6cd5(SGA)\u7684\u6784\u6210\u8981\u7d20"},{"location":"content/daze/ga/sga/#_2","text":"\u4f8b : \u6c42 $f(x)=sin(10x) \\times x + cos(2x) \\times x$ \u5728 [0, 5] \u533a\u95f4\u5185\u7684\u6700\u5927\u503c. \u89e3 : \u786e\u5b9a\u51b3\u7b56\u53d8\u91cf\u548c\u7ea6\u675f\u6761\u4ef6 \u786e\u5b9a\u4f18\u5316\u6a21\u578b \u786e\u5b9a\u7f16\u7801\u65b9\u5f0f. \u6b64\u5904\u4f7f\u7528 10 \u4f4d\u4e8c\u8fdb\u5236\u7f16\u7801\u8868\u793a $x \\in [0, 5]$ \u8303\u56f4 \u786e\u5b9a\u89e3\u7801\u65b9\u5f0f. \u5373\u5982\u4f55\u5c06 10 \u4f4d\u4e8c\u8fdb\u5236\u7f16\u7801\u8fd8\u539f\u4e3a\u53d8\u91cf $x$ \u786e\u5b9a\u4e2a\u4f53\u8bc4\u4ef7\u65b9\u6cd5. \u6b64\u5904\u76f4\u63a5\u4f7f\u7528 $f(x)$ \u4f5c\u4e3a\u4e2a\u4f53\u9002\u5e94\u5ea6\u8bc4\u4ef7. \u8bbe\u8ba1\u9057\u4f20\u7b97\u5b50 \u8bbe\u5b9a\u9057\u4f20\u7b97\u5b50\u8fd0\u884c\u53c2\u6570 Python \u5b9e\u73b0: import matplotlib.animation import matplotlib.pyplot as plt import numpy as np plt.style.use('seaborn') class GA: def __init__(self): self.pop_size = 80 self.max_iter = 20 self.pc = 0.6 self.pm = 0.001 self.dna_size = 10 self.x_bound = [0, 5] def f(self, x): return np.sin(10 * x) * x + np.cos(2 * x) * x def encode(self, x): a = x / (self.x_bound[1] - self.x_bound[0]) * (2 ** self.dna_size - 1) a = int(a) return np.array(list(np.binary_repr(a).zfill(self.dna_size))).astype(np.uint8) def decode(self, per): return per.dot(1 << np.arange(self.dna_size)[::-1]) / (2**self.dna_size - 1) * self.x_bound[1] def perfit(self, per): x = self.decode(per) return self.f(x) def getfit(self, pop): x = self.decode(pop) r = self.f(x) return r def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.001 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) pop = pop[idx] return pop def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = np.random.randint(2, size=(self.pop_size, self.dna_size)) pop_fit = self.getfit(pop) yield pop, pop_fit for _ in range(self.max_iter - 1): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() gaiter = ga.evolve() fig, ax = plt.subplots() ax.set_xlim(-0.2, 5.2) ax.set_ylim(-10, 7.5) x = np.linspace(*ga.x_bound, 200) ax.plot(x, ga.f(x)) sca = ax.scatter([], [], s=200, c='#CF6FC1', alpha=0.5) def update(*args): pop, _ = next(gaiter) fx = ga.decode(pop) fv = ga.f(fx) sca.set_offsets(np.column_stack((fx, fv))) # plt.savefig(f'/tmp/img/{args[0]+1:0>2}.png') ani = matplotlib.animation.FuncAnimation(fig, update, interval=200, repeat=False) plt.show()","title":"\u57fa\u672c\u9057\u4f20\u7b97\u6cd5\u5728\u51fd\u6570\u4f18\u5316\u65b9\u9762\u7684\u5e94\u7528\u4e3e\u4f8b"},{"location":"content/daze/ga/sga_optret/","text":"\u6700\u4f18\u4fdd\u7559\u7b56\u7565 \u6700\u4f18\u4fdd\u7559\u7b56\u7565\u6307 \u5c06\u7fa4\u4f53\u4e2d\u6700\u4f18\u7684\u4e00\u90e8\u5206\u4e2a\u4f53\u4e0d\u7ecf\u8fc7\u9009\u62e9, \u4ea4\u53c9\u548c\u53d8\u5f02\u64cd\u4f5c, \u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u4ee3 , \u4ee5\u907f\u514d\u4f18\u79c0\u4e2a\u4f53\u635f\u5931. \u6700\u4f18\u4fdd\u7559\u7b56\u7565\u7684\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b: \u627e\u51fa\u5f53\u524d\u7fa4\u4f53\u4e2d\u9002\u5e94\u5ea6\u6700\u9ad8\u548c\u6700\u4f4e\u7684\u4e2a\u4f53 \u82e5\u5f53\u524d\u7fa4\u4f53\u4e2d\u6700\u4f18\u4e2a\u4f53\u6bd4\u5386\u53f2\u6700\u4f18\u4e2a\u4f53\u9002\u5e94\u5ea6\u8fd8\u9ad8, \u5219\u4ee5\u5f53\u524d\u7fa4\u4f53\u6700\u4f18\u4e2a\u4f53\u4f5c\u4e3a\u5386\u53f2\u6700\u4f18\u4e2a\u4f53; \u5426\u5219\u4f7f\u7528\u5386\u53f2\u6700\u4f18\u4e2a\u4f53\u66ff\u6362\u5f53\u524d\u7fa4\u4f53\u6700\u5dee\u4e2a\u4f53 \u6267\u884c\u540e\u7eed\u9057\u4f20\u7b97\u5b50(\u9009\u62e9, \u4ea4\u53c9, \u53d8\u5f02\u7b49) \u4ee3\u7801\u5b9e\u73b0 \u590d\u5236\u4e0a\u8282\u4ee3\u7801, \u589e\u52a0\u4f5c\u7528\u4e8e evolve \u51fd\u6570\u7684 optret \u88c5\u9970\u5668 \u8c03\u6574\u79cd\u7fa4\u5927\u5c0f\u4e3a 4, \u53d8\u5f02\u6982\u7387\u4e3a 0.5 import matplotlib.animation import matplotlib.pyplot as plt import numpy as np plt.style.use('seaborn') class GA: def __init__(self): self.pop_size = 4 self.max_iter = 20 self.pc = 0.6 self.pm = 0.5 self.dna_size = 10 self.x_bound = [0, 5] def f(self, x): return np.sin(10 * x) * x + np.cos(2 * x) * x def encode(self, x): a = x / (self.x_bound[1] - self.x_bound[0]) * (2 ** self.dna_size - 1) a = int(a) return np.array(list(np.binary_repr(a).zfill(self.dna_size))).astype(np.uint8) def decode(self, per): return per.dot(1 << np.arange(self.dna_size)[::-1]) / (2**self.dna_size - 1) * self.x_bound[1] def perfit(self, per): x = self.decode(per) return self.f(x) def getfit(self, pop): x = self.decode(pop) r = self.f(x) return r def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.001 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) pop = pop[idx] return pop def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = np.random.randint(2, size=(self.pop_size, self.dna_size)) pop_fit = self.getfit(pop) yield pop, pop_fit for _ in range(self.max_iter - 1): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() gaiter = ga.optret(ga.evolve)() fig, ax = plt.subplots() ax.set_xlim(-0.2, 5.2) ax.set_ylim(-10, 7.5) x = np.linspace(*ga.x_bound, 200) ax.plot(x, ga.f(x)) sca1 = ax.scatter([], [], s=200, c='#CF6FC1', alpha=0.5) sca2 = ax.scatter([], [], s=300, c='#ED8826', alpha=0.5) def update(*args): pop, _ = next(gaiter) fx = ga.decode(pop) fv = ga.f(fx) i = np.argmax(fv) sca1.set_offsets(np.column_stack((fx, fv))) sca2.set_offsets(np.column_stack(([fx[i]], fv[i]))) # plt.savefig(f'/tmp/img/{args[0]+1:0>2}.png') ani = matplotlib.animation.FuncAnimation(fig, update, interval=200, repeat=False) plt.show()","title":"\u9057\u4f20\u7b97\u6cd5-\u6700\u4f18\u4fdd\u7559\u7b56\u7565"},{"location":"content/daze/ga/sga_optret/#_1","text":"\u6700\u4f18\u4fdd\u7559\u7b56\u7565\u6307 \u5c06\u7fa4\u4f53\u4e2d\u6700\u4f18\u7684\u4e00\u90e8\u5206\u4e2a\u4f53\u4e0d\u7ecf\u8fc7\u9009\u62e9, \u4ea4\u53c9\u548c\u53d8\u5f02\u64cd\u4f5c, \u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u4ee3 , \u4ee5\u907f\u514d\u4f18\u79c0\u4e2a\u4f53\u635f\u5931. \u6700\u4f18\u4fdd\u7559\u7b56\u7565\u7684\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b: \u627e\u51fa\u5f53\u524d\u7fa4\u4f53\u4e2d\u9002\u5e94\u5ea6\u6700\u9ad8\u548c\u6700\u4f4e\u7684\u4e2a\u4f53 \u82e5\u5f53\u524d\u7fa4\u4f53\u4e2d\u6700\u4f18\u4e2a\u4f53\u6bd4\u5386\u53f2\u6700\u4f18\u4e2a\u4f53\u9002\u5e94\u5ea6\u8fd8\u9ad8, \u5219\u4ee5\u5f53\u524d\u7fa4\u4f53\u6700\u4f18\u4e2a\u4f53\u4f5c\u4e3a\u5386\u53f2\u6700\u4f18\u4e2a\u4f53; \u5426\u5219\u4f7f\u7528\u5386\u53f2\u6700\u4f18\u4e2a\u4f53\u66ff\u6362\u5f53\u524d\u7fa4\u4f53\u6700\u5dee\u4e2a\u4f53 \u6267\u884c\u540e\u7eed\u9057\u4f20\u7b97\u5b50(\u9009\u62e9, \u4ea4\u53c9, \u53d8\u5f02\u7b49)","title":"\u6700\u4f18\u4fdd\u7559\u7b56\u7565"},{"location":"content/daze/ga/sga_optret/#_2","text":"\u590d\u5236\u4e0a\u8282\u4ee3\u7801, \u589e\u52a0\u4f5c\u7528\u4e8e evolve \u51fd\u6570\u7684 optret \u88c5\u9970\u5668 \u8c03\u6574\u79cd\u7fa4\u5927\u5c0f\u4e3a 4, \u53d8\u5f02\u6982\u7387\u4e3a 0.5 import matplotlib.animation import matplotlib.pyplot as plt import numpy as np plt.style.use('seaborn') class GA: def __init__(self): self.pop_size = 4 self.max_iter = 20 self.pc = 0.6 self.pm = 0.5 self.dna_size = 10 self.x_bound = [0, 5] def f(self, x): return np.sin(10 * x) * x + np.cos(2 * x) * x def encode(self, x): a = x / (self.x_bound[1] - self.x_bound[0]) * (2 ** self.dna_size - 1) a = int(a) return np.array(list(np.binary_repr(a).zfill(self.dna_size))).astype(np.uint8) def decode(self, per): return per.dot(1 << np.arange(self.dna_size)[::-1]) / (2**self.dna_size - 1) * self.x_bound[1] def perfit(self, per): x = self.decode(per) return self.f(x) def getfit(self, pop): x = self.decode(pop) r = self.f(x) return r def select(self, pop, fit): fit = fit - np.min(fit) fit = fit + np.max(fit) / 2 + 0.001 idx = np.random.choice(np.arange(self.pop_size), size=self.pop_size, replace=True, p=fit / fit.sum()) pop = pop[idx] return pop def optret(self, f): def mt(*args, **kwargs): opt = None opf = None for pop, fit in f(*args, **kwargs): max_idx = np.argmax(fit) min_idx = np.argmax(fit) if opf is None or fit[max_idx] >= opf: opt = pop[max_idx] opf = fit[max_idx] else: pop[min_idx] = opt fit[min_idx] = opf yield pop, fit return mt def crosso(self, pop): for i in range(0, self.pop_size, 2): if np.random.random() < self.pc: a = pop[i] b = pop[i + 1] p = np.random.randint(1, self.dna_size) a[p:], b[p:] = b[p:], a[p:] pop[i] = a pop[i + 1] = b return pop def mutate(self, pop): mut = np.random.choice(np.array([0, 1]), pop.shape, p=[1 - self.pm, self.pm]) pop = np.where(mut == 1, 1 - pop, pop) return pop def evolve(self): pop = np.random.randint(2, size=(self.pop_size, self.dna_size)) pop_fit = self.getfit(pop) yield pop, pop_fit for _ in range(self.max_iter - 1): chd = self.select(pop, pop_fit) chd = self.crosso(chd) chd = self.mutate(chd) chd_fit = self.getfit(chd) yield chd, chd_fit pop = chd pop_fit = chd_fit ga = GA() gaiter = ga.optret(ga.evolve)() fig, ax = plt.subplots() ax.set_xlim(-0.2, 5.2) ax.set_ylim(-10, 7.5) x = np.linspace(*ga.x_bound, 200) ax.plot(x, ga.f(x)) sca1 = ax.scatter([], [], s=200, c='#CF6FC1', alpha=0.5) sca2 = ax.scatter([], [], s=300, c='#ED8826', alpha=0.5) def update(*args): pop, _ = next(gaiter) fx = ga.decode(pop) fv = ga.f(fx) i = np.argmax(fv) sca1.set_offsets(np.column_stack((fx, fv))) sca2.set_offsets(np.column_stack(([fx[i]], fv[i]))) # plt.savefig(f'/tmp/img/{args[0]+1:0>2}.png') ani = matplotlib.animation.FuncAnimation(fig, update, interval=200, repeat=False) plt.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/game_of_life/overview/","text":"Conway's Game of Life \u5eb7\u5a01\u751f\u547d\u6e38\u620f(Conway's Game of Life), \u53c8\u79f0\u5eb7\u5a01\u751f\u547d\u68cb, \u662f\u82f1\u56fd\u6570\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u4f55\u987f\u00b7\u5eb7\u5a01\u57281970\u5e74\u53d1\u660e\u7684\u7ec6\u80de\u81ea\u52a8\u673a. \u53ef\u4ee5\u968f\u65f6\u521b\u5efa\u6216\u9500\u6bc1\u4e00\u4e2a\u7ec6\u80de, \u53ea\u9700\u8981\u8f7b\u70b9\u68cb\u76d8\u5bf9\u5e94\u7684\u7f51\u683c. \u70b9\u51fb \u968f\u673a \u6309\u94ae, \u5c06\u4ee5 \u6c64 \u6a21\u5f0f\u5f00\u59cb\u6e38\u620f. \u8be5\u6a21\u5f0f\u4e0b\u7ec6\u80de\u5c06\u4ee5\u7ea6\u5b9a\u7684\u6982\u7387\u968f\u673a\u521d\u59cb\u5316\u5728\u68cb\u76d8\u4e0a. \u89c4\u5219 \u751f\u547d\u6e38\u620f\u4e2d, \u5bf9\u4e8e\u4efb\u610f\u7ec6\u80de, \u89c4\u5219\u5982\u4e0b: \u6bcf\u4e2a\u7ec6\u80de\u6709\u4e24\u79cd\u72b6\u6001: \u5b58\u6d3b\u6216\u6b7b\u4ea1, \u6bcf\u4e2a\u7ec6\u80de\u4e0e\u4ee5\u81ea\u8eab\u4e3a\u4e2d\u5fc3\u7684\u5468\u56f4\u516b\u683c\u7ec6\u80de\u4ea7\u751f\u4e92\u52a8. \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u4f4e\u4e8e2\u4e2a(\u4e0d\u5305\u542b2\u4e2a)\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u6b7b\u4ea1\u72b6\u6001.(\u6a21\u62df\u751f\u547d\u6570\u91cf\u7a00\u5c11) \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67092\u4e2a\u62163\u4e2a\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u4fdd\u6301\u539f\u6837. \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67093\u4e2a\u4ee5\u4e0a\u7684\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u6b7b\u4ea1\u72b6\u6001.(\u6a21\u62df\u751f\u547d\u6570\u91cf\u8fc7\u591a) \u5f53\u524d\u7ec6\u80de\u4e3a\u6b7b\u4ea1\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67093\u4e2a\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u5b58\u6d3b\u72b6\u6001.(\u6a21\u62df\u7e41\u6b96) \u53ef\u4ee5\u628a\u6700\u521d\u7684\u7ec6\u80de\u7ed3\u6784\u5b9a\u4e49\u4e3a\u79cd\u5b50, \u5f53\u6240\u6709\u5728\u79cd\u5b50\u4e2d\u7684\u7ec6\u80de\u540c\u65f6\u88ab\u4ee5\u4e0a\u89c4\u5219\u5904\u7406\u540e, \u53ef\u4ee5\u5f97\u5230\u7b2c\u4e00\u4ee3\u7ec6\u80de\u56fe. \u6309\u89c4\u5219\u7ee7\u7eed\u5904\u7406\u5f53\u524d\u7684\u7ec6\u80de\u56fe, \u53ef\u4ee5\u5f97\u5230\u4e0b\u4e00\u4ee3\u7684\u7ec6\u80de\u56fe, \u5468\u800c\u590d\u59cb. \u6982\u8ff0 \u751f\u547d\u6e38\u620f\u662f\u4e00\u4e2a\u96f6\u73a9\u5bb6\u6e38\u620f. \u5b83\u5305\u62ec\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u5f62\u4e16\u754c, \u8fd9\u4e2a\u4e16\u754c\u4e2d\u7684\u6bcf\u4e2a\u65b9\u683c\u5c45\u4f4f\u7740\u4e00\u4e2a\u6d3b\u7740\u7684\u6216\u6b7b\u4e86\u7684\u7ec6\u80de. \u4e00\u4e2a\u7ec6\u80de\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u751f\u6b7b\u53d6\u51b3\u4e8e\u76f8\u90bb\u516b\u4e2a\u65b9\u683c\u4e2d\u6d3b\u7740\u7684\u6216\u6b7b\u4e86\u7684\u7ec6\u80de\u7684\u6570\u91cf. \u5982\u679c\u76f8\u90bb\u65b9\u683c\u6d3b\u7740\u7684\u7ec6\u80de\u6570\u91cf\u8fc7\u591a, \u8fd9\u4e2a\u7ec6\u80de\u4f1a\u56e0\u4e3a\u8d44\u6e90\u532e\u4e4f\u800c\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u6b7b\u53bb; \u76f8\u53cd, \u5982\u679c\u5468\u56f4\u6d3b\u7ec6\u80de\u8fc7\u5c11, \u8fd9\u4e2a\u7ec6\u80de\u4f1a\u56e0\u592a\u5b64\u5355\u800c\u6b7b\u53bb. \u5b9e\u9645\u4e2d, \u73a9\u5bb6\u53ef\u4ee5\u8bbe\u5b9a\u5468\u56f4\u6d3b\u7ec6\u80de\u7684\u6570\u76ee\u600e\u6837\u65f6\u624d\u9002\u5b9c\u8be5\u7ec6\u80de\u7684\u751f\u5b58. \u5982\u679c\u8fd9\u4e2a\u6570\u76ee\u8bbe\u5b9a\u8fc7\u9ad8, \u4e16\u754c\u4e2d\u7684\u5927\u90e8\u5206\u7ec6\u80de\u4f1a\u56e0\u4e3a\u627e\u4e0d\u5230\u592a\u591a\u7684\u6d3b\u7684\u90bb\u5c45\u800c\u6b7b\u53bb, \u76f4\u5230\u6574\u4e2a\u4e16\u754c\u90fd\u6ca1\u6709\u751f\u547d; \u5982\u679c\u8fd9\u4e2a\u6570\u76ee\u8bbe\u5b9a\u8fc7\u4f4e, \u4e16\u754c\u4e2d\u53c8\u4f1a\u88ab\u751f\u547d\u5145\u6ee1\u800c\u6ca1\u6709\u4ec0\u4e48\u53d8\u5316. \u5b9e\u9645\u4e2d, \u8fd9\u4e2a\u6570\u76ee\u4e00\u822c\u9009\u53d62\u6216\u80053; \u8fd9\u6837\u6574\u4e2a\u751f\u547d\u4e16\u754c\u624d\u4e0d\u81f3\u4e8e\u592a\u8fc7\u8352\u51c9\u6216\u62e5\u6324, \u800c\u662f\u4e00\u79cd\u52a8\u6001\u7684\u5e73\u8861. \u8fd9\u6837\u7684\u8bdd, \u6e38\u620f\u7684\u89c4\u5219\u5c31\u662f: \u5f53\u4e00\u4e2a\u65b9\u683c\u5468\u56f4\u67092\u62163\u4e2a\u6d3b\u7ec6\u80de\u65f6, \u65b9\u683c\u4e2d\u7684\u6d3b\u7ec6\u80de\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u7ee7\u7eed\u5b58\u6d3b; \u5373\u4f7f\u8fd9\u4e2a\u65f6\u523b\u65b9\u683c\u4e2d\u6ca1\u6709\u6d3b\u7ec6\u80de, \u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u4e5f\u4f1a\"\u8bde\u751f\"\u6d3b\u7ec6\u80de. \u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d, \u8fd8\u53ef\u4ee5\u8bbe\u5b9a\u4e00\u4e9b\u66f4\u52a0\u590d\u6742\u7684\u89c4\u5219, \u4f8b\u5982\u5f53\u524d\u65b9\u683c\u7684\u72b6\u51b5\u4e0d\u4ec5\u7531\u7236\u4e00\u4ee3\u51b3\u5b9a, \u800c\u4e14\u8fd8\u8003\u8651\u7956\u7236\u4e00\u4ee3\u7684\u60c5\u51b5. \u73a9\u5bb6\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u8fd9\u4e2a\u4e16\u754c\u7684\"\u4e0a\u5e1d\", \u968f\u610f\u8bbe\u5b9a\u67d0\u4e2a\u65b9\u683c\u7ec6\u80de\u7684\u6b7b\u6d3b, \u4ee5\u89c2\u5bdf\u5bf9\u4e16\u754c\u7684\u5f71\u54cd. \u5728\u6e38\u620f\u7684\u8fdb\u884c\u4e2d, \u6742\u4e71\u65e0\u5e8f\u7684\u7ec6\u80de\u4f1a\u9010\u6e10\u6f14\u5316\u51fa\u5404\u79cd\u7cbe\u81f4\u3001\u6709\u5f62\u7684\u7ed3\u6784; \u8fd9\u4e9b\u7ed3\u6784\u5f80\u5f80\u6709\u5f88\u597d\u7684\u5bf9\u79f0\u6027, \u800c\u4e14\u6bcf\u4e00\u4ee3\u90fd\u5728\u53d8\u5316\u5f62\u72b6. \u4e00\u4e9b\u5f62\u72b6\u5df2\u7ecf\u9501\u5b9a, \u4e0d\u4f1a\u9010\u4ee3\u53d8\u5316. \u6709\u65f6, \u4e00\u4e9b\u5df2\u7ecf\u6210\u5f62\u7684\u7ed3\u6784\u4f1a\u56e0\u4e3a\u4e00\u4e9b\u65e0\u5e8f\u7ec6\u80de\u7684\"\u5165\u4fb5\"\u800c\u88ab\u7834\u574f. \u4f46\u662f\u5f62\u72b6\u548c\u79e9\u5e8f\u7ecf\u5e38\u80fd\u4ece\u6742\u4e71\u4e2d\u4ea7\u751f\u51fa\u6765. \u53c2\u8003 [1] \u7ef4\u57fa: \u5eb7\u5a01\u751f\u547d\u6e38\u620f https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life [2] \u7ef4\u57fa: \u7ec6\u80de\u81ea\u52a8\u673a https://zh.wikipedia.org/wiki/%E7%B4%B0%E8%83%9E%E8%87%AA%E5%8B%95%E6%A9%9F","title":"\u751f\u547d\u6e38\u620f"},{"location":"content/daze/game_of_life/overview/#conways-game-of-life","text":"\u5eb7\u5a01\u751f\u547d\u6e38\u620f(Conway's Game of Life), \u53c8\u79f0\u5eb7\u5a01\u751f\u547d\u68cb, \u662f\u82f1\u56fd\u6570\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u4f55\u987f\u00b7\u5eb7\u5a01\u57281970\u5e74\u53d1\u660e\u7684\u7ec6\u80de\u81ea\u52a8\u673a. \u53ef\u4ee5\u968f\u65f6\u521b\u5efa\u6216\u9500\u6bc1\u4e00\u4e2a\u7ec6\u80de, \u53ea\u9700\u8981\u8f7b\u70b9\u68cb\u76d8\u5bf9\u5e94\u7684\u7f51\u683c. \u70b9\u51fb \u968f\u673a \u6309\u94ae, \u5c06\u4ee5 \u6c64 \u6a21\u5f0f\u5f00\u59cb\u6e38\u620f. \u8be5\u6a21\u5f0f\u4e0b\u7ec6\u80de\u5c06\u4ee5\u7ea6\u5b9a\u7684\u6982\u7387\u968f\u673a\u521d\u59cb\u5316\u5728\u68cb\u76d8\u4e0a.","title":"Conway's Game of Life"},{"location":"content/daze/game_of_life/overview/#_1","text":"\u751f\u547d\u6e38\u620f\u4e2d, \u5bf9\u4e8e\u4efb\u610f\u7ec6\u80de, \u89c4\u5219\u5982\u4e0b: \u6bcf\u4e2a\u7ec6\u80de\u6709\u4e24\u79cd\u72b6\u6001: \u5b58\u6d3b\u6216\u6b7b\u4ea1, \u6bcf\u4e2a\u7ec6\u80de\u4e0e\u4ee5\u81ea\u8eab\u4e3a\u4e2d\u5fc3\u7684\u5468\u56f4\u516b\u683c\u7ec6\u80de\u4ea7\u751f\u4e92\u52a8. \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u4f4e\u4e8e2\u4e2a(\u4e0d\u5305\u542b2\u4e2a)\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u6b7b\u4ea1\u72b6\u6001.(\u6a21\u62df\u751f\u547d\u6570\u91cf\u7a00\u5c11) \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67092\u4e2a\u62163\u4e2a\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u4fdd\u6301\u539f\u6837. \u5f53\u524d\u7ec6\u80de\u4e3a\u5b58\u6d3b\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67093\u4e2a\u4ee5\u4e0a\u7684\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u6b7b\u4ea1\u72b6\u6001.(\u6a21\u62df\u751f\u547d\u6570\u91cf\u8fc7\u591a) \u5f53\u524d\u7ec6\u80de\u4e3a\u6b7b\u4ea1\u72b6\u6001\u65f6, \u5f53\u5468\u56f4\u67093\u4e2a\u5b58\u6d3b\u7ec6\u80de\u65f6, \u8be5\u7ec6\u80de\u53d8\u6210\u5b58\u6d3b\u72b6\u6001.(\u6a21\u62df\u7e41\u6b96) \u53ef\u4ee5\u628a\u6700\u521d\u7684\u7ec6\u80de\u7ed3\u6784\u5b9a\u4e49\u4e3a\u79cd\u5b50, \u5f53\u6240\u6709\u5728\u79cd\u5b50\u4e2d\u7684\u7ec6\u80de\u540c\u65f6\u88ab\u4ee5\u4e0a\u89c4\u5219\u5904\u7406\u540e, \u53ef\u4ee5\u5f97\u5230\u7b2c\u4e00\u4ee3\u7ec6\u80de\u56fe. \u6309\u89c4\u5219\u7ee7\u7eed\u5904\u7406\u5f53\u524d\u7684\u7ec6\u80de\u56fe, \u53ef\u4ee5\u5f97\u5230\u4e0b\u4e00\u4ee3\u7684\u7ec6\u80de\u56fe, \u5468\u800c\u590d\u59cb.","title":"\u89c4\u5219"},{"location":"content/daze/game_of_life/overview/#_2","text":"\u751f\u547d\u6e38\u620f\u662f\u4e00\u4e2a\u96f6\u73a9\u5bb6\u6e38\u620f. \u5b83\u5305\u62ec\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u5f62\u4e16\u754c, \u8fd9\u4e2a\u4e16\u754c\u4e2d\u7684\u6bcf\u4e2a\u65b9\u683c\u5c45\u4f4f\u7740\u4e00\u4e2a\u6d3b\u7740\u7684\u6216\u6b7b\u4e86\u7684\u7ec6\u80de. \u4e00\u4e2a\u7ec6\u80de\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u751f\u6b7b\u53d6\u51b3\u4e8e\u76f8\u90bb\u516b\u4e2a\u65b9\u683c\u4e2d\u6d3b\u7740\u7684\u6216\u6b7b\u4e86\u7684\u7ec6\u80de\u7684\u6570\u91cf. \u5982\u679c\u76f8\u90bb\u65b9\u683c\u6d3b\u7740\u7684\u7ec6\u80de\u6570\u91cf\u8fc7\u591a, \u8fd9\u4e2a\u7ec6\u80de\u4f1a\u56e0\u4e3a\u8d44\u6e90\u532e\u4e4f\u800c\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u6b7b\u53bb; \u76f8\u53cd, \u5982\u679c\u5468\u56f4\u6d3b\u7ec6\u80de\u8fc7\u5c11, \u8fd9\u4e2a\u7ec6\u80de\u4f1a\u56e0\u592a\u5b64\u5355\u800c\u6b7b\u53bb. \u5b9e\u9645\u4e2d, \u73a9\u5bb6\u53ef\u4ee5\u8bbe\u5b9a\u5468\u56f4\u6d3b\u7ec6\u80de\u7684\u6570\u76ee\u600e\u6837\u65f6\u624d\u9002\u5b9c\u8be5\u7ec6\u80de\u7684\u751f\u5b58. \u5982\u679c\u8fd9\u4e2a\u6570\u76ee\u8bbe\u5b9a\u8fc7\u9ad8, \u4e16\u754c\u4e2d\u7684\u5927\u90e8\u5206\u7ec6\u80de\u4f1a\u56e0\u4e3a\u627e\u4e0d\u5230\u592a\u591a\u7684\u6d3b\u7684\u90bb\u5c45\u800c\u6b7b\u53bb, \u76f4\u5230\u6574\u4e2a\u4e16\u754c\u90fd\u6ca1\u6709\u751f\u547d; \u5982\u679c\u8fd9\u4e2a\u6570\u76ee\u8bbe\u5b9a\u8fc7\u4f4e, \u4e16\u754c\u4e2d\u53c8\u4f1a\u88ab\u751f\u547d\u5145\u6ee1\u800c\u6ca1\u6709\u4ec0\u4e48\u53d8\u5316. \u5b9e\u9645\u4e2d, \u8fd9\u4e2a\u6570\u76ee\u4e00\u822c\u9009\u53d62\u6216\u80053; \u8fd9\u6837\u6574\u4e2a\u751f\u547d\u4e16\u754c\u624d\u4e0d\u81f3\u4e8e\u592a\u8fc7\u8352\u51c9\u6216\u62e5\u6324, \u800c\u662f\u4e00\u79cd\u52a8\u6001\u7684\u5e73\u8861. \u8fd9\u6837\u7684\u8bdd, \u6e38\u620f\u7684\u89c4\u5219\u5c31\u662f: \u5f53\u4e00\u4e2a\u65b9\u683c\u5468\u56f4\u67092\u62163\u4e2a\u6d3b\u7ec6\u80de\u65f6, \u65b9\u683c\u4e2d\u7684\u6d3b\u7ec6\u80de\u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u7ee7\u7eed\u5b58\u6d3b; \u5373\u4f7f\u8fd9\u4e2a\u65f6\u523b\u65b9\u683c\u4e2d\u6ca1\u6709\u6d3b\u7ec6\u80de, \u5728\u4e0b\u4e00\u4e2a\u65f6\u523b\u4e5f\u4f1a\"\u8bde\u751f\"\u6d3b\u7ec6\u80de. \u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d, \u8fd8\u53ef\u4ee5\u8bbe\u5b9a\u4e00\u4e9b\u66f4\u52a0\u590d\u6742\u7684\u89c4\u5219, \u4f8b\u5982\u5f53\u524d\u65b9\u683c\u7684\u72b6\u51b5\u4e0d\u4ec5\u7531\u7236\u4e00\u4ee3\u51b3\u5b9a, \u800c\u4e14\u8fd8\u8003\u8651\u7956\u7236\u4e00\u4ee3\u7684\u60c5\u51b5. \u73a9\u5bb6\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u8fd9\u4e2a\u4e16\u754c\u7684\"\u4e0a\u5e1d\", \u968f\u610f\u8bbe\u5b9a\u67d0\u4e2a\u65b9\u683c\u7ec6\u80de\u7684\u6b7b\u6d3b, \u4ee5\u89c2\u5bdf\u5bf9\u4e16\u754c\u7684\u5f71\u54cd. \u5728\u6e38\u620f\u7684\u8fdb\u884c\u4e2d, \u6742\u4e71\u65e0\u5e8f\u7684\u7ec6\u80de\u4f1a\u9010\u6e10\u6f14\u5316\u51fa\u5404\u79cd\u7cbe\u81f4\u3001\u6709\u5f62\u7684\u7ed3\u6784; \u8fd9\u4e9b\u7ed3\u6784\u5f80\u5f80\u6709\u5f88\u597d\u7684\u5bf9\u79f0\u6027, \u800c\u4e14\u6bcf\u4e00\u4ee3\u90fd\u5728\u53d8\u5316\u5f62\u72b6. \u4e00\u4e9b\u5f62\u72b6\u5df2\u7ecf\u9501\u5b9a, \u4e0d\u4f1a\u9010\u4ee3\u53d8\u5316. \u6709\u65f6, \u4e00\u4e9b\u5df2\u7ecf\u6210\u5f62\u7684\u7ed3\u6784\u4f1a\u56e0\u4e3a\u4e00\u4e9b\u65e0\u5e8f\u7ec6\u80de\u7684\"\u5165\u4fb5\"\u800c\u88ab\u7834\u574f. \u4f46\u662f\u5f62\u72b6\u548c\u79e9\u5e8f\u7ecf\u5e38\u80fd\u4ece\u6742\u4e71\u4e2d\u4ea7\u751f\u51fa\u6765.","title":"\u6982\u8ff0"},{"location":"content/daze/game_of_life/overview/#_3","text":"[1] \u7ef4\u57fa: \u5eb7\u5a01\u751f\u547d\u6e38\u620f https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life [2] \u7ef4\u57fa: \u7ec6\u80de\u81ea\u52a8\u673a https://zh.wikipedia.org/wiki/%E7%B4%B0%E8%83%9E%E8%87%AA%E5%8B%95%E6%A9%9F","title":"\u53c2\u8003"},{"location":"content/daze/math/huffman/","text":"Huffman Coding(\u970d\u592b\u66fc\u7f16\u7801, \u54c8\u592b\u66fc\u7f16\u7801, \u8d6b\u592b\u66fc\u7f16\u7801) \u970d\u592b\u66fc\u6811\u53c8\u79f0\u6700\u4f18\u4e8c\u53c9\u6811\uff0c\u662f\u4e00\u79cd\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u4e8c\u53c9\u6811. \u5e7f\u4e49\u5b9a\u4e49: \u7ed9\u51fa\u4e00\u7ec4\u7b26\u53f7(symbol)\u548c\u5176\u5bf9\u5e94\u7684\u6743\u91cd\u503c(weight), \u5176\u6743\u91cd\u901a\u5e38\u8868\u793a\u6210\u6982\u7387(%), \u6c42\u4e00\u7ec4\u4e8c\u5143\u7684\u524d\u7f6e\u7801, \u5176\u4e8c\u5143\u7801\u7684\u957f\u5ea6\u4e3a\u6700\u77ed. \u673a\u7406 \u4e00\u5f00\u59cb\uff0c\u6240\u6709\u7684\u8282\u70b9\u90fd\u662f\u7ec8\u7aef\u8282\u70b9(Leaf), \u8282\u70b9\u5185\u6709\u4e09\u4e2a\u5b57\u6bb5: \u7b26\u53f7(symbol) \u6743\u91cd(p) \u6307\u5411\u7236\u8282\u70b9\u7684\u94fe\u63a5(parent) \u800c\u975e\u7ec8\u7aef\u8282\u70b9(Node)\u5185\u6709\u56db\u4e2a\u5b57\u6bb5: \u6743\u91cd(p) \u6307\u5411\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u94fe\u63a5(l & r) \u6307\u5411\u7236\u8282\u70b9\u7684\u94fe\u63a5(parent) \u5b9e\u73b0\u970d\u592b\u66fc\u6811\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u79cd, \u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7b80\u5355\u8fbe\u6210\u8fd9\u4e2a\u8fc7\u7a0b, \u7ed9\u4e0e\u6743\u91cd\u8f83\u4f4e\u7684\u7b26\u53f7\u8f83\u9ad8\u7684\u4f18\u5148\u7ea7, \u7b97\u6cd5\u5982\u4e0b: \u628a n \u4e2a\u7ec8\u7aef\u8282\u70b9(Leaf)\u52a0\u5165\u4f18\u5148\u961f\u5217, \u5219 n \u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u4f18\u5148\u6743 $P_i, 1 \\le i \\le n$ \u5982\u679c\u961f\u5217\u5185\u7684\u8282\u70b9\u6570 > 1, \u5219: \u4ece\u961f\u5217\u4e2d\u79fb\u9664\u4e24\u4e2a\u6700\u5c0f\u7684 $P_i$ \u8282\u70b9 \u4ea7\u751f\u4e00\u4e2a\u65b0\u8282\u70b9, \u6b64\u8282\u70b9\u4e3a 1 \u4e4b\u79fb\u9664\u8282\u70b9\u4e4b\u7236\u8282\u70b9, \u800c\u6b64\u8282\u70b9\u7684\u6743\u91cd\u503c\u4e3a 1 \u4e24\u8282\u70b9\u4e4b\u6743\u91cd\u548c \u628a 2 \u4ea7\u751f\u4e4b\u8282\u70b9\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d \u6700\u540e\u5728\u4f18\u5148\u961f\u5217\u91cc\u7684\u70b9\u4e3a\u6811\u7684\u6839\u8282\u70b9(root) \u4ee3\u7801\u5b9e\u73b0 import heapq class Leaf: def __init__(self, p, symbol): self.p = p self.symbol = symbol self.parent = None def __lt__(self, other): return self.p < other.p class Node: def __init__(self, l=None, r=None): self.l = l self.r = r self.parent = None if l: l.parent = self if r: r.parent = self def __lt__(self, other): return self.p < other.p @property def p(self): p = 0 if self.l: p += self.l.p if self.r: p += self.r.p return p # \u83b7\u53d6\u970d\u592b\u66fc\u7f16\u7801\u8868 def codebook(self): data = {} for i, entry in enumerate([self.l, self.r]): if entry is None: continue if isinstance(entry, Leaf): data[entry.symbol] = str(i) else: for s, code in entry.codebook().items(): data[s] = str(i) + code return data class Tree: def __init__(self, items): page = [] for item, p in items: heapq.heappush(page, Leaf(p, item)) for _ in range(len(page) - 1): a = heapq.heappop(page) b = heapq.heappop(page) heapq.heappush(page, Node(a, b)) self.root = page[0] self.codebook = self.root.codebook if __name__ == '__main__': import collections tree = Tree(collections.Counter(open(__file__, 'rb').read()).items()) print(tree.codebook()) # {99: '000000', 44: '000001', ..., 32: '11'} \u53c2\u8003 [1] \u7ef4\u57fa: \u970d\u592b\u66fc\u7f16\u7801 https://zh.wikipedia.org/zh/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81","title":"Math-\u970d\u592b\u66fc\u7f16\u7801"},{"location":"content/daze/math/huffman/#huffman-coding","text":"\u970d\u592b\u66fc\u6811\u53c8\u79f0\u6700\u4f18\u4e8c\u53c9\u6811\uff0c\u662f\u4e00\u79cd\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u4e8c\u53c9\u6811. \u5e7f\u4e49\u5b9a\u4e49: \u7ed9\u51fa\u4e00\u7ec4\u7b26\u53f7(symbol)\u548c\u5176\u5bf9\u5e94\u7684\u6743\u91cd\u503c(weight), \u5176\u6743\u91cd\u901a\u5e38\u8868\u793a\u6210\u6982\u7387(%), \u6c42\u4e00\u7ec4\u4e8c\u5143\u7684\u524d\u7f6e\u7801, \u5176\u4e8c\u5143\u7801\u7684\u957f\u5ea6\u4e3a\u6700\u77ed.","title":"Huffman Coding(\u970d\u592b\u66fc\u7f16\u7801, \u54c8\u592b\u66fc\u7f16\u7801, \u8d6b\u592b\u66fc\u7f16\u7801)"},{"location":"content/daze/math/huffman/#_1","text":"\u4e00\u5f00\u59cb\uff0c\u6240\u6709\u7684\u8282\u70b9\u90fd\u662f\u7ec8\u7aef\u8282\u70b9(Leaf), \u8282\u70b9\u5185\u6709\u4e09\u4e2a\u5b57\u6bb5: \u7b26\u53f7(symbol) \u6743\u91cd(p) \u6307\u5411\u7236\u8282\u70b9\u7684\u94fe\u63a5(parent) \u800c\u975e\u7ec8\u7aef\u8282\u70b9(Node)\u5185\u6709\u56db\u4e2a\u5b57\u6bb5: \u6743\u91cd(p) \u6307\u5411\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u94fe\u63a5(l & r) \u6307\u5411\u7236\u8282\u70b9\u7684\u94fe\u63a5(parent) \u5b9e\u73b0\u970d\u592b\u66fc\u6811\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u79cd, \u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7b80\u5355\u8fbe\u6210\u8fd9\u4e2a\u8fc7\u7a0b, \u7ed9\u4e0e\u6743\u91cd\u8f83\u4f4e\u7684\u7b26\u53f7\u8f83\u9ad8\u7684\u4f18\u5148\u7ea7, \u7b97\u6cd5\u5982\u4e0b: \u628a n \u4e2a\u7ec8\u7aef\u8282\u70b9(Leaf)\u52a0\u5165\u4f18\u5148\u961f\u5217, \u5219 n \u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u4f18\u5148\u6743 $P_i, 1 \\le i \\le n$ \u5982\u679c\u961f\u5217\u5185\u7684\u8282\u70b9\u6570 > 1, \u5219: \u4ece\u961f\u5217\u4e2d\u79fb\u9664\u4e24\u4e2a\u6700\u5c0f\u7684 $P_i$ \u8282\u70b9 \u4ea7\u751f\u4e00\u4e2a\u65b0\u8282\u70b9, \u6b64\u8282\u70b9\u4e3a 1 \u4e4b\u79fb\u9664\u8282\u70b9\u4e4b\u7236\u8282\u70b9, \u800c\u6b64\u8282\u70b9\u7684\u6743\u91cd\u503c\u4e3a 1 \u4e24\u8282\u70b9\u4e4b\u6743\u91cd\u548c \u628a 2 \u4ea7\u751f\u4e4b\u8282\u70b9\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d \u6700\u540e\u5728\u4f18\u5148\u961f\u5217\u91cc\u7684\u70b9\u4e3a\u6811\u7684\u6839\u8282\u70b9(root)","title":"\u673a\u7406"},{"location":"content/daze/math/huffman/#_2","text":"import heapq class Leaf: def __init__(self, p, symbol): self.p = p self.symbol = symbol self.parent = None def __lt__(self, other): return self.p < other.p class Node: def __init__(self, l=None, r=None): self.l = l self.r = r self.parent = None if l: l.parent = self if r: r.parent = self def __lt__(self, other): return self.p < other.p @property def p(self): p = 0 if self.l: p += self.l.p if self.r: p += self.r.p return p # \u83b7\u53d6\u970d\u592b\u66fc\u7f16\u7801\u8868 def codebook(self): data = {} for i, entry in enumerate([self.l, self.r]): if entry is None: continue if isinstance(entry, Leaf): data[entry.symbol] = str(i) else: for s, code in entry.codebook().items(): data[s] = str(i) + code return data class Tree: def __init__(self, items): page = [] for item, p in items: heapq.heappush(page, Leaf(p, item)) for _ in range(len(page) - 1): a = heapq.heappop(page) b = heapq.heappop(page) heapq.heappush(page, Node(a, b)) self.root = page[0] self.codebook = self.root.codebook if __name__ == '__main__': import collections tree = Tree(collections.Counter(open(__file__, 'rb').read()).items()) print(tree.codebook()) # {99: '000000', 44: '000001', ..., 32: '11'}","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/math/huffman/#_3","text":"[1] \u7ef4\u57fa: \u970d\u592b\u66fc\u7f16\u7801 https://zh.wikipedia.org/zh/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81","title":"\u53c2\u8003"},{"location":"content/daze/math/kelly_formula/","text":"\u51ef\u5229\u516c\u5f0f \u5728\u6982\u7387\u8bba\u4e2d, \u51ef\u5229\u516c\u5f0f(Kelly criterion), \u4e5f\u79f0\u51ef\u5229\u65b9\u7a0b\u5f0f, \u662f\u4e00\u4e2a\u7528\u4ee5\u4f7f\u7279\u5b9a\u8d4c\u5c40\u4e2d, \u62e5\u6709\u6b63\u671f\u671b\u503c\u4e4b\u91cd\u590d\u884c\u4e3a\u957f\u671f\u589e\u957f\u7387\u6700\u5927\u5316\u7684\u516c\u5f0f, \u7531\u7ea6\u7ff0\u00b7\u62c9\u91cc\u00b7\u51ef\u5229\u4e8e1956\u5e74\u5728<\u8d1d\u5c14\u7cfb\u7edf\u6280\u672f\u671f\u520a>\u4e2d\u53d1\u8868, \u53ef\u7528\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u6b21\u6e38\u620f\u4e2d\u5e94\u6295\u6ce8\u7684\u8d44\u91d1\u6bd4\u4f8b. \u9664\u53ef\u5c06\u957f\u671f\u589e\u957f\u7387\u6700\u5927\u5316\u5916, \u6b64\u65b9\u7a0b\u5f0f\u4e0d\u5141\u8bb8\u5728\u4efb\u4f55\u8d4c\u5c40\u4e2d, \u6709\u5931\u53bb\u5168\u90e8\u73b0\u6709\u8d44\u91d1\u7684\u53ef\u80fd, \u56e0\u6b64\u6709\u4e0d\u5b58\u5728\u7834\u4ea7\u7591\u8651\u7684\u4f18\u70b9 . \u65b9\u7a0b\u5f0f\u5047\u8bbe\u8d27\u5e01\u4e0e\u8d4c\u5c40\u53ef\u65e0\u7a77\u5206\u5272, \u800c\u53ea\u8981\u8d44\u91d1\u8db3\u591f\u591a, \u5728\u5b9e\u9645\u5e94\u7528\u4e0a\u4e0d\u6210\u95ee\u9898. $$ f^* = \\frac{pb - q}{b} = \\frac{p(b+1) - 1}{b} $$ \u5176\u4e2d $f^*$ \u4e3a\u73b0\u6709\u8d44\u91d1\u5e94\u8fdb\u884c\u4e0b\u6b21\u6295\u6ce8\u7684\u6bd4\u4f8b $b$ \u4e3a\u6295\u6ce8\u53ef\u5f97\u7684\u8d54\u7387(\u4e0d\u542b\u672c\u91d1) $p$ \u4e3a\u83b7\u80dc\u7387 $q$ \u4e3a\u843d\u8d25\u7387\uff0c\u5373 $1 - p$ \u4e3e\u4f8b\u800c\u8a00, \u82e5\u4e00\u8d4c\u535a\u670960%\u7684\u83b7\u80dc\u7387(p = 0.6, q = 0.4), \u800c\u8d4c\u5ba2\u5728\u8d62\u5f97\u8d4c\u5c40\u65f6, \u53ef\u83b7\u5f97\u4e00\u8d54\u4e00\u7684\u8d54\u7387(b = 1), \u5219\u8d4c\u5ba2\u5e94\u5728\u6bcf\u6b21\u673a\u4f1a\u4e2d\u4e0b\u6ce8\u73b0\u6709\u8d44\u91d1\u768420%(f* = 0.2), \u4ee5\u6700\u5927\u5316\u8d44\u91d1\u7684\u957f\u671f\u589e\u957f\u7387. \u5982\u679c\u8d54\u7387\u6ca1\u6709\u4f18\u52bf, \u5373 b = q / p, \u90a3\u4e48\u516c\u5f0f\u5efa\u8bae\u4e0d\u4e0b\u6ce8. \u5982\u679c\u8d54\u7387\u662f\u8d1f\u7684, \u5373b < q / p, \u516c\u5f0f\u7684\u7ed3\u679c\u662f\u8d1f\u7684, \u4e5f\u5c31\u662f\u6697\u793a\u5e94\u8be5\u4e0b\u6ce8\u5230\u53e6\u5916\u4e00\u8fb9. \u51ef\u5229\u516c\u5f0f\u6700\u521d\u4e3aAT&T\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7269\u7406\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u62c9\u91cc\u00b7\u51ef\u5229\u6839\u636e\u540c\u50da\u514b\u52b3\u5fb7\u00b7\u827e\u5c14\u4f0d\u5fb7\u00b7\u9999\u519c\u4e8e\u957f\u9014\u7535\u8bdd\u7ebf\u566a\u58f0\u4e0a\u7684\u7814\u7a76\u6240\u5efa\u7acb. \u51ef\u5229\u8bf4\u660e\u9999\u519c\u7684\u4fe1\u606f\u8ad6\u8981\u5982\u4f55\u5e94\u7528\u4e8e\u4e00\u540d\u62e5\u6709\u5185\u7ebf\u6d88\u606f\u7684\u8d4c\u5f92\u5728\u8d4c\u9a6c\u65f6\u7684\u95ee\u9898. \u8d4c\u5f92\u5e0c\u671b\u51b3\u5b9a\u6700\u4f73\u7684\u8d4c\u91d1\u989d, \u800c\u4ed6\u7684\u5185\u7ebf\u6d88\u606f\u4e0d\u9700\u5b8c\u7f8e(\u65e0\u566a\u58f0), \u5373\u53ef\u8ba9\u4ed6\u62e5\u6709\u6709\u7528\u7684\u4f18\u52bf. \u51ef\u5229\u7684\u516c\u5f0f\u968f\u540e\u88ab\u9999\u519c\u7684\u53e6\u4e00\u540d\u540c\u50da\u7231\u5fb7\u534e\u00b7\u7d22\u666e\u5e94\u7528\u4e8e\u4e8c\u5341\u4e00\u70b9\u548c\u80a1\u7968\u5e02\u573a\u4e2d. \u53c2\u8003 [1] \u7ef4\u57fa: \u51ef\u5229\u516c\u5f0f https://en.wikipedia.org/wiki/Kelly_criterion","title":"Math-\u51ef\u5229\u516c\u5f0f"},{"location":"content/daze/math/kelly_formula/#_1","text":"\u5728\u6982\u7387\u8bba\u4e2d, \u51ef\u5229\u516c\u5f0f(Kelly criterion), \u4e5f\u79f0\u51ef\u5229\u65b9\u7a0b\u5f0f, \u662f\u4e00\u4e2a\u7528\u4ee5\u4f7f\u7279\u5b9a\u8d4c\u5c40\u4e2d, \u62e5\u6709\u6b63\u671f\u671b\u503c\u4e4b\u91cd\u590d\u884c\u4e3a\u957f\u671f\u589e\u957f\u7387\u6700\u5927\u5316\u7684\u516c\u5f0f, \u7531\u7ea6\u7ff0\u00b7\u62c9\u91cc\u00b7\u51ef\u5229\u4e8e1956\u5e74\u5728<\u8d1d\u5c14\u7cfb\u7edf\u6280\u672f\u671f\u520a>\u4e2d\u53d1\u8868, \u53ef\u7528\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u6b21\u6e38\u620f\u4e2d\u5e94\u6295\u6ce8\u7684\u8d44\u91d1\u6bd4\u4f8b. \u9664\u53ef\u5c06\u957f\u671f\u589e\u957f\u7387\u6700\u5927\u5316\u5916, \u6b64\u65b9\u7a0b\u5f0f\u4e0d\u5141\u8bb8\u5728\u4efb\u4f55\u8d4c\u5c40\u4e2d, \u6709\u5931\u53bb\u5168\u90e8\u73b0\u6709\u8d44\u91d1\u7684\u53ef\u80fd, \u56e0\u6b64\u6709\u4e0d\u5b58\u5728\u7834\u4ea7\u7591\u8651\u7684\u4f18\u70b9 . \u65b9\u7a0b\u5f0f\u5047\u8bbe\u8d27\u5e01\u4e0e\u8d4c\u5c40\u53ef\u65e0\u7a77\u5206\u5272, \u800c\u53ea\u8981\u8d44\u91d1\u8db3\u591f\u591a, \u5728\u5b9e\u9645\u5e94\u7528\u4e0a\u4e0d\u6210\u95ee\u9898. $$ f^* = \\frac{pb - q}{b} = \\frac{p(b+1) - 1}{b} $$ \u5176\u4e2d $f^*$ \u4e3a\u73b0\u6709\u8d44\u91d1\u5e94\u8fdb\u884c\u4e0b\u6b21\u6295\u6ce8\u7684\u6bd4\u4f8b $b$ \u4e3a\u6295\u6ce8\u53ef\u5f97\u7684\u8d54\u7387(\u4e0d\u542b\u672c\u91d1) $p$ \u4e3a\u83b7\u80dc\u7387 $q$ \u4e3a\u843d\u8d25\u7387\uff0c\u5373 $1 - p$ \u4e3e\u4f8b\u800c\u8a00, \u82e5\u4e00\u8d4c\u535a\u670960%\u7684\u83b7\u80dc\u7387(p = 0.6, q = 0.4), \u800c\u8d4c\u5ba2\u5728\u8d62\u5f97\u8d4c\u5c40\u65f6, \u53ef\u83b7\u5f97\u4e00\u8d54\u4e00\u7684\u8d54\u7387(b = 1), \u5219\u8d4c\u5ba2\u5e94\u5728\u6bcf\u6b21\u673a\u4f1a\u4e2d\u4e0b\u6ce8\u73b0\u6709\u8d44\u91d1\u768420%(f* = 0.2), \u4ee5\u6700\u5927\u5316\u8d44\u91d1\u7684\u957f\u671f\u589e\u957f\u7387. \u5982\u679c\u8d54\u7387\u6ca1\u6709\u4f18\u52bf, \u5373 b = q / p, \u90a3\u4e48\u516c\u5f0f\u5efa\u8bae\u4e0d\u4e0b\u6ce8. \u5982\u679c\u8d54\u7387\u662f\u8d1f\u7684, \u5373b < q / p, \u516c\u5f0f\u7684\u7ed3\u679c\u662f\u8d1f\u7684, \u4e5f\u5c31\u662f\u6697\u793a\u5e94\u8be5\u4e0b\u6ce8\u5230\u53e6\u5916\u4e00\u8fb9. \u51ef\u5229\u516c\u5f0f\u6700\u521d\u4e3aAT&T\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7269\u7406\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u62c9\u91cc\u00b7\u51ef\u5229\u6839\u636e\u540c\u50da\u514b\u52b3\u5fb7\u00b7\u827e\u5c14\u4f0d\u5fb7\u00b7\u9999\u519c\u4e8e\u957f\u9014\u7535\u8bdd\u7ebf\u566a\u58f0\u4e0a\u7684\u7814\u7a76\u6240\u5efa\u7acb. \u51ef\u5229\u8bf4\u660e\u9999\u519c\u7684\u4fe1\u606f\u8ad6\u8981\u5982\u4f55\u5e94\u7528\u4e8e\u4e00\u540d\u62e5\u6709\u5185\u7ebf\u6d88\u606f\u7684\u8d4c\u5f92\u5728\u8d4c\u9a6c\u65f6\u7684\u95ee\u9898. \u8d4c\u5f92\u5e0c\u671b\u51b3\u5b9a\u6700\u4f73\u7684\u8d4c\u91d1\u989d, \u800c\u4ed6\u7684\u5185\u7ebf\u6d88\u606f\u4e0d\u9700\u5b8c\u7f8e(\u65e0\u566a\u58f0), \u5373\u53ef\u8ba9\u4ed6\u62e5\u6709\u6709\u7528\u7684\u4f18\u52bf. \u51ef\u5229\u7684\u516c\u5f0f\u968f\u540e\u88ab\u9999\u519c\u7684\u53e6\u4e00\u540d\u540c\u50da\u7231\u5fb7\u534e\u00b7\u7d22\u666e\u5e94\u7528\u4e8e\u4e8c\u5341\u4e00\u70b9\u548c\u80a1\u7968\u5e02\u573a\u4e2d.","title":"\u51ef\u5229\u516c\u5f0f"},{"location":"content/daze/math/kelly_formula/#_2","text":"[1] \u7ef4\u57fa: \u51ef\u5229\u516c\u5f0f https://en.wikipedia.org/wiki/Kelly_criterion","title":"\u53c2\u8003"},{"location":"content/daze/math/normal_distribution/","text":"\u6b63\u6001\u5206\u5e03 \u6b63\u6001\u5206\u5e03(Normal distribution) \u53c8\u540d\u9ad8\u65af\u5206\u5e03(Gaussian distribution), \u662f\u4e00\u4e2a\u5728\u6570\u5b66, \u7269\u7406\u53ca\u5de5\u7a0b\u7b49\u9886\u57df\u90fd\u975e\u5e38\u91cd\u8981\u7684\u6982\u7387\u5206\u5e03, \u7531\u4e8e\u8fd9\u4e2a\u5206\u5e03\u51fd\u6570\u5177\u6709\u5f88\u591a\u975e\u5e38\u6f02\u4eae\u7684\u6027\u8d28, \u4f7f\u5f97\u5176\u5728\u8bf8\u591a\u6d89\u53ca\u7edf\u8ba1\u79d1\u5b66\u79bb\u6563\u79d1\u5b66\u7b49\u9886\u57df\u7684\u8bb8\u591a\u65b9\u9762\u90fd\u6709\u7740\u91cd\u5927\u7684\u5f71\u54cd\u529b. \u82e5\u968f\u673a\u53d8\u91cf X \u670d\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u4e3a \u03bc, \u5c3a\u5ea6\u53c2\u6570\u4e3a \u03c3 \u7684\u6982\u7387\u5206\u5e03, \u8bb0\u4e3a: $X \\sim N(\\mu, \\sigma)$, \u5219\u5176\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a: $$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} $$ \u6b63\u6001\u5206\u5e03\u7684\u6570\u5b66\u671f\u671b\u503c\u6216\u671f\u671b\u503c $\\mu$ \u7b49\u4e8e\u4f4d\u7f6e\u53c2\u6570, \u51b3\u5b9a\u4e86\u5206\u5e03\u7684\u4f4d\u7f6e; \u5176\u65b9\u5dee $\\sigma^2$ \u7684\u5f00\u5e73\u65b9\u6216\u6807\u51c6\u5dee $\\sigma$ \u7b49\u4e8e\u5c3a\u5ea6\u53c2\u6570, \u51b3\u5b9a\u4e86\u5206\u5e03\u7684\u5e45\u5ea6. \u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u66f2\u7ebf\u5448\u949f\u5f62, \u56e0\u6b64\u4eba\u4eec\u53c8\u7ecf\u5e38\u79f0\u4e4b\u4e3a\u949f\u5f62\u66f2\u7ebf. \u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u662f\u4f4d\u7f6e\u53c2\u6570 $\\mu = 0$, \u5c3a\u5ea6\u53c2\u6570 $\\sigma^2=1$ \u7684\u6b63\u6001\u5206\u5e03. \u5206\u5e03\u89c4\u5219 \u5728\u5b9e\u9645\u5e94\u7528\u4e0a, \u5e38\u8003\u8651\u4e00\u7ec4\u6570\u636e\u5177\u6709\u8fd1\u4f3c\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5206\u5e03. \u82e5\u5176\u5047\u8bbe\u6b63\u786e, \u5219\u7ea6 68% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u6709 1 \u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4, \u7ea6 95% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u6709 2 \u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4, \u4ee5\u53ca\u7ea6 99.7% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u67093\u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4. \u79f0\u4e3a\"68-95-99.7\u6cd5\u5219\". \u8ba1\u7b97\u6570\u636e\u5728\u67d0\u4e2a\u533a\u95f4\u7684\u6982\u7387 \u67e5\u8868\u6cd5 \u76f8\u5173\u51fd\u6570 import math # \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4ee3\u7801\u8868\u793a def gaussian_distribution_probability_density(x, sigma=1, mu=0): return 1 / (sigma * (2 * math.pi) ** 0.5) * math.e ** (- (x - mu) * 2 / (2 * sigma**2)) import numpy.random # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 1, \u5927\u5c0f 1024 \u7684\u4e00\u7ef4\u77e9\u9635\u6570\u5217 data = numpy.random.normal(0, 1, size=1024) print(data) # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 1, \u5927\u5c0f 32 * 32 \u7684\u4e8c\u7ef4\u77e9\u9635\u6570\u5217 data = numpy.random.normal(0, 1, size=(32, 32)) print(data)","title":"Math-\u6b63\u6001\u5206\u5e03"},{"location":"content/daze/math/normal_distribution/#_1","text":"\u6b63\u6001\u5206\u5e03(Normal distribution) \u53c8\u540d\u9ad8\u65af\u5206\u5e03(Gaussian distribution), \u662f\u4e00\u4e2a\u5728\u6570\u5b66, \u7269\u7406\u53ca\u5de5\u7a0b\u7b49\u9886\u57df\u90fd\u975e\u5e38\u91cd\u8981\u7684\u6982\u7387\u5206\u5e03, \u7531\u4e8e\u8fd9\u4e2a\u5206\u5e03\u51fd\u6570\u5177\u6709\u5f88\u591a\u975e\u5e38\u6f02\u4eae\u7684\u6027\u8d28, \u4f7f\u5f97\u5176\u5728\u8bf8\u591a\u6d89\u53ca\u7edf\u8ba1\u79d1\u5b66\u79bb\u6563\u79d1\u5b66\u7b49\u9886\u57df\u7684\u8bb8\u591a\u65b9\u9762\u90fd\u6709\u7740\u91cd\u5927\u7684\u5f71\u54cd\u529b. \u82e5\u968f\u673a\u53d8\u91cf X \u670d\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u4e3a \u03bc, \u5c3a\u5ea6\u53c2\u6570\u4e3a \u03c3 \u7684\u6982\u7387\u5206\u5e03, \u8bb0\u4e3a: $X \\sim N(\\mu, \\sigma)$, \u5219\u5176\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a: $$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} $$ \u6b63\u6001\u5206\u5e03\u7684\u6570\u5b66\u671f\u671b\u503c\u6216\u671f\u671b\u503c $\\mu$ \u7b49\u4e8e\u4f4d\u7f6e\u53c2\u6570, \u51b3\u5b9a\u4e86\u5206\u5e03\u7684\u4f4d\u7f6e; \u5176\u65b9\u5dee $\\sigma^2$ \u7684\u5f00\u5e73\u65b9\u6216\u6807\u51c6\u5dee $\\sigma$ \u7b49\u4e8e\u5c3a\u5ea6\u53c2\u6570, \u51b3\u5b9a\u4e86\u5206\u5e03\u7684\u5e45\u5ea6. \u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u66f2\u7ebf\u5448\u949f\u5f62, \u56e0\u6b64\u4eba\u4eec\u53c8\u7ecf\u5e38\u79f0\u4e4b\u4e3a\u949f\u5f62\u66f2\u7ebf. \u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u662f\u4f4d\u7f6e\u53c2\u6570 $\\mu = 0$, \u5c3a\u5ea6\u53c2\u6570 $\\sigma^2=1$ \u7684\u6b63\u6001\u5206\u5e03.","title":"\u6b63\u6001\u5206\u5e03"},{"location":"content/daze/math/normal_distribution/#_2","text":"\u5728\u5b9e\u9645\u5e94\u7528\u4e0a, \u5e38\u8003\u8651\u4e00\u7ec4\u6570\u636e\u5177\u6709\u8fd1\u4f3c\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5206\u5e03. \u82e5\u5176\u5047\u8bbe\u6b63\u786e, \u5219\u7ea6 68% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u6709 1 \u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4, \u7ea6 95% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u6709 2 \u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4, \u4ee5\u53ca\u7ea6 99.7% \u6570\u503c\u5206\u5e03\u5728\u8ddd\u79bb\u5e73\u5747\u503c\u67093\u4e2a\u6807\u51c6\u5dee\u4e4b\u5185\u7684\u8303\u56f4. \u79f0\u4e3a\"68-95-99.7\u6cd5\u5219\".","title":"\u5206\u5e03\u89c4\u5219"},{"location":"content/daze/math/normal_distribution/#_3","text":"\u67e5\u8868\u6cd5","title":"\u8ba1\u7b97\u6570\u636e\u5728\u67d0\u4e2a\u533a\u95f4\u7684\u6982\u7387"},{"location":"content/daze/math/normal_distribution/#_4","text":"import math # \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4ee3\u7801\u8868\u793a def gaussian_distribution_probability_density(x, sigma=1, mu=0): return 1 / (sigma * (2 * math.pi) ** 0.5) * math.e ** (- (x - mu) * 2 / (2 * sigma**2)) import numpy.random # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 1, \u5927\u5c0f 1024 \u7684\u4e00\u7ef4\u77e9\u9635\u6570\u5217 data = numpy.random.normal(0, 1, size=1024) print(data) # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 1, \u5927\u5c0f 32 * 32 \u7684\u4e8c\u7ef4\u77e9\u9635\u6570\u5217 data = numpy.random.normal(0, 1, size=(32, 32)) print(data)","title":"\u76f8\u5173\u51fd\u6570"},{"location":"content/daze/math/variance_and_sd/","text":"\u65b9\u5dee\u4e0e\u6807\u51c6\u5dee \u65b9\u5dee(Variance) , \u5e94\u7528\u6570\u5b66\u91cc\u7684\u4e13\u6709\u540d\u8bcd. \u5728\u6982\u7387\u8bba\u548c\u7edf\u8ba1\u5b66\u4e2d, \u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u65b9\u5dee\u63cf\u8ff0\u7684\u662f\u5b83\u7684\u79bb\u6563\u7a0b\u5ea6, \u4e5f\u5c31\u662f\u8be5\u53d8\u91cf\u79bb\u5176\u671f\u671b\u503c\u7684\u8ddd\u79bb. \u4e00\u4e2a\u5b9e\u968f\u673a\u53d8\u91cf\u7684\u65b9\u5dee\u4e5f\u79f0\u4e3a\u5b83\u7684\u4e8c\u9636\u77e9\u6216\u4e8c\u9636\u4e2d\u5fc3\u52a8\u5dee, \u6070\u5de7\u4e5f\u662f\u5b83\u7684\u4e8c\u9636\u7d2f\u79ef\u91cf. \u8fd9\u91cc\u628a\u590d\u6742\u8bf4\u767d\u4e86, \u5c31\u662f\u5c06\u5404\u4e2a\u8bef\u5dee\u5c06\u4e4b\u5e73\u65b9(\u800c\u975e\u53d6\u7edd\u5bf9\u503c), \u4f7f\u4e4b\u80af\u5b9a\u4e3a\u6b63\u6570, \u76f8\u52a0\u4e4b\u540e\u518d\u9664\u4ee5\u603b\u6570, \u900f\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u7b97\u51fa\u5404\u4e2a\u6570\u636e\u5206\u5e03\u4e0e\u96f6\u6563(\u76f8\u5bf9\u4e2d\u5fc3\u70b9)\u7684\u7a0b\u5ea6. \u7ee7\u7eed\u5ef6\u4f38\u7684\u8bdd, \u65b9\u5dee\u7684\u7b97\u672f\u5e73\u65b9\u6839\u79f0\u4e3a\u8be5\u968f\u673a\u53d8\u91cf\u7684 \u6807\u51c6\u5dee(Standard Deviation, SD) (\u6b64\u4e3a\u76f8\u5bf9\u5404\u4e2a\u6570\u636e\u70b9\u95f4). \u516c\u5f0f \u65b9\u5dee $\\sigma^2 = \\frac{1}{N}\\sum_{i=1}^N(x_i - \\mu)^2$, \u5176\u4e2d $mu$ \u4e3a\u5e73\u5747\u503c $\\bar x$, \u5176\u8868\u8fbe\u5f0f\u5c55\u5f00\u540e\u53ef\u8bb0\u4e3a: \"\u5e73\u65b9\u7684\u5e73\u5747\" \u51cf\u53bb \"\u5e73\u5747\u7684\u5e73\u65b9\" \u6807\u51c6\u5dee $\\sigma$ \u4e3a\u65b9\u5dee\u7684\u7b97\u6570\u5e73\u65b9\u6839. \u76f8\u5173\u51fd\u6570 import numpy as np r = np.var([1, 2, 3, 4]) print(r) # \u65b9\u5dee, 1.25 r = np.std([1, 2, 3, 4]) print(r) # \u6807\u51c6\u5dee, 1.118 r = np.var([[1, 2], [3, 4]], axis=0) print(r) # \u4e8c\u7ef4\u77e9\u9635\u6309\u5217\u65b9\u5dee, [1, 1]","title":"Math-\u65b9\u5dee\u4e0e\u6807\u51c6\u5dee"},{"location":"content/daze/math/variance_and_sd/#_1","text":"\u65b9\u5dee(Variance) , \u5e94\u7528\u6570\u5b66\u91cc\u7684\u4e13\u6709\u540d\u8bcd. \u5728\u6982\u7387\u8bba\u548c\u7edf\u8ba1\u5b66\u4e2d, \u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u65b9\u5dee\u63cf\u8ff0\u7684\u662f\u5b83\u7684\u79bb\u6563\u7a0b\u5ea6, \u4e5f\u5c31\u662f\u8be5\u53d8\u91cf\u79bb\u5176\u671f\u671b\u503c\u7684\u8ddd\u79bb. \u4e00\u4e2a\u5b9e\u968f\u673a\u53d8\u91cf\u7684\u65b9\u5dee\u4e5f\u79f0\u4e3a\u5b83\u7684\u4e8c\u9636\u77e9\u6216\u4e8c\u9636\u4e2d\u5fc3\u52a8\u5dee, \u6070\u5de7\u4e5f\u662f\u5b83\u7684\u4e8c\u9636\u7d2f\u79ef\u91cf. \u8fd9\u91cc\u628a\u590d\u6742\u8bf4\u767d\u4e86, \u5c31\u662f\u5c06\u5404\u4e2a\u8bef\u5dee\u5c06\u4e4b\u5e73\u65b9(\u800c\u975e\u53d6\u7edd\u5bf9\u503c), \u4f7f\u4e4b\u80af\u5b9a\u4e3a\u6b63\u6570, \u76f8\u52a0\u4e4b\u540e\u518d\u9664\u4ee5\u603b\u6570, \u900f\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u7b97\u51fa\u5404\u4e2a\u6570\u636e\u5206\u5e03\u4e0e\u96f6\u6563(\u76f8\u5bf9\u4e2d\u5fc3\u70b9)\u7684\u7a0b\u5ea6. \u7ee7\u7eed\u5ef6\u4f38\u7684\u8bdd, \u65b9\u5dee\u7684\u7b97\u672f\u5e73\u65b9\u6839\u79f0\u4e3a\u8be5\u968f\u673a\u53d8\u91cf\u7684 \u6807\u51c6\u5dee(Standard Deviation, SD) (\u6b64\u4e3a\u76f8\u5bf9\u5404\u4e2a\u6570\u636e\u70b9\u95f4).","title":"\u65b9\u5dee\u4e0e\u6807\u51c6\u5dee"},{"location":"content/daze/math/variance_and_sd/#_2","text":"\u65b9\u5dee $\\sigma^2 = \\frac{1}{N}\\sum_{i=1}^N(x_i - \\mu)^2$, \u5176\u4e2d $mu$ \u4e3a\u5e73\u5747\u503c $\\bar x$, \u5176\u8868\u8fbe\u5f0f\u5c55\u5f00\u540e\u53ef\u8bb0\u4e3a: \"\u5e73\u65b9\u7684\u5e73\u5747\" \u51cf\u53bb \"\u5e73\u5747\u7684\u5e73\u65b9\" \u6807\u51c6\u5dee $\\sigma$ \u4e3a\u65b9\u5dee\u7684\u7b97\u6570\u5e73\u65b9\u6839.","title":"\u516c\u5f0f"},{"location":"content/daze/math/variance_and_sd/#_3","text":"import numpy as np r = np.var([1, 2, 3, 4]) print(r) # \u65b9\u5dee, 1.25 r = np.std([1, 2, 3, 4]) print(r) # \u6807\u51c6\u5dee, 1.118 r = np.var([[1, 2], [3, 4]], axis=0) print(r) # \u4e8c\u7ef4\u77e9\u9635\u6309\u5217\u65b9\u5dee, [1, 1]","title":"\u76f8\u5173\u51fd\u6570"},{"location":"content/daze/ml/fasttext/","text":"fastText fastText \u662f facebook \u4e8e 2016 \u5e74\u5f00\u6e90\u51fa\u6765\u7684\u8fdb\u884c\u8bcd\u4e0e\u5e8f\u5217\u5206\u7c7b\u7684\u6a21\u578b. \u5b83\u7684\u7279\u70b9\u662f\u975e\u5e38\u5feb! \u5728 CPU \u4e0a\u53ef\u4ee5\u8f7b\u677e\u8fbe\u5230\u6bcf\u79d2\u51e0\u5343\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u901f\u5ea6. \u8bcd\u5411\u91cf\u8868\u5f81 fastText \u62e5\u6709\u8bcd\u888b\u7279\u5f81\u4e0e N-gram \u7279\u5f81. \u5bf9\u4e8e\u4e00\u4e2a\u6837\u672c, \u6bd4\u5982 \"\u6211\u7231\u4f60\", \u5b83\u7684\u8bcd\u888b\u7279\u5f81\u4e3a\u65e0\u987a\u5e8f\u7684 [\"\u6211\", \"\u7231\", \"\u4f60\"], \u4f46\u8981\u6ce8\u610f\u7684\u662f, \"\u4f60\u7231\u6211\" \u7684\u8bcd\u888b\u7279\u5f81\u4e5f\u4e3a\u65e0\u987a\u5e8f\u7684 [\"\u4f60\", \"\u7231\", \"\u6211\"]. \u5982\u679c\u52a0\u5165 2-gram \u7279\u5f81, \u90a3\u4e48 \"\u6211\u7231\u4f60\" \u7684\u7279\u5f81\u4e3a [\"\u6211\", \"\u7231\", \"\u4f60\", \"\u6211\u7231\", \"\u7231\u4f60\"], \u800c \"\u4f60\u7231\u6211\" \u7684\u7279\u5f81\u53d8\u4e3a [\"\u4f60\", \"\u7231\", \"\u6211\", \"\u4f60\u7231\", \"\u7231\u6211\"], \u56e0\u6b64\u53ef\u4ee5\u533a\u5206\u4e24\u4e2a\u6837\u672c. \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u6211\u4eec\u9700\u8981\u8fc7\u6ee4\u6389\u4f4e\u9891\u7684 N-gram. \u4e00\u822c\u800c\u8a00, N-grams \u53d6 [1-5]. \u4f7f\u7528 keras \u5b9e\u73b0 fastText \u6a21\u578b https://github.com/facebookresearch/fastText/blob/master/tutorials/supervised-learning.md \u4e2d\u6709\u5173\u4e8e fastText \u9879\u76ee\u7684\u4f7f\u7528\u4f8b\u7a0b. \u5904\u7406\u4f7f\u7528\u5b98\u65b9\u5de5\u5177\u5916, \u53ef\u4ee5\u4f7f\u7528 keras \u5b9e\u73b0 fastText \u6a21\u578b. \u4e0b\u9762\u5c06\u5b8c\u6210\u4e00\u4e2a Imdb \u60c5\u611f\u4e8c\u5206\u7c7b. \u4f8b\u7a0b\u6570\u636e\u96c6\u4e0b\u8f7d: Large Movie Review Dataset \u9884\u5904\u7406 import json import os import pickle import keras.preprocessing.text import numpy as np path = '/data/aclImdb' def get_data(name): basename = os.path.basename(name) _, score = basename[:-4].split('_') score = int(score) with open(name, 'r', encoding='utf-8') as f: text = f.read().replace('<br />', '') return text, score xtr, ytr, xte, yte = [], [], [], [] print('scan', os.path.join(path, 'train/pos/')) for entry in os.scandir(os.path.join(path, 'train/pos/')): x, y = get_data(entry.path) xtr.append(x) ytr.append(y) print('scan', os.path.join(path, 'train/neg/')) for entry in os.scandir(os.path.join(path, 'train/neg/')): x, y = get_data(entry.path) xtr.append(x) ytr.append(y) print('scan', os.path.join(path, 'test/pos/')) for entry in os.scandir(os.path.join(path, 'test/pos/')): x, y = get_data(entry.path) xte.append(x) yte.append(y) print('scan', os.path.join(path, 'test/neg/')) for entry in os.scandir(os.path.join(path, 'train/neg/')): x, y = get_data(entry.path) xte.append(x) yte.append(y) try: os.mkdir('res') except FileExistsError: pass print('dump res/aclimdb.json') with open('res/aclimdb.json', 'w', encoding='utf-8') as f: json.dump(((xtr, ytr), (xte, yte)), f) ytr = [1 if i > 5 else 0 for i in ytr] yte = [1 if i > 5 else 0 for i in yte] print('init tokenizer') tokenizer = keras.preprocessing.text.Tokenizer(num_words=20000) tokenizer.fit_on_texts(xtr) print('dump res/aclimdb_word_index.json') with open('res/aclimdb_word_index.json', 'w') as f: json.dump(tokenizer.word_index, f) print('dump res/aclimdb_index_word.json') with open('res/aclimdb_index_word.json', 'w') as f: json.dump({v: k for k, v in tokenizer.word_index.items()}, f) print('dump res/aclimdb_tokenizer.pkl') with open('res/aclimdb_tokenizer.pkl', 'wb') as f: pickle.dump(tokenizer, f) print('serialize xtr') xtr = tokenizer.texts_to_sequences(xtr) print('serialize xte') xte = tokenizer.texts_to_sequences(xte) print('dump res/aclimdb.npy') np.save('res/aclimdb.npy', np.array([[xtr, ytr], [xte, yte]])) \u5b9a\u4e49\u6a21\u578b\u4e0e\u5f00\u59cb\u8bad\u7ec3 import keras.callbacks import keras.layers import keras.models import keras.preprocessing.sequence import keras.preprocessing.text import numpy as np def create_ngram_set(input_list, ngram_value=2): return set(zip(*[input_list[i:] for i in range(ngram_value)])) def add_ngram(sequences, token_indice, ngram_range=2): new_sequences = [] for input_list in sequences: new_list = input_list[:] for i in range(len(new_list) - ngram_range + 1): for ngram_value in range(2, ngram_range + 1): ngram = tuple(new_list[i:i + ngram_value]) if ngram in token_indice: new_list.append(token_indice[ngram]) new_sequences.append(new_list) return new_sequences ngram_range = 1 max_features = 20000 maxlen = 400 batch_size = 32 embedding_dims = 50 epochs = 20 print('Loading data') with open('res/aclimdb.npy', 'rb') as f: (x_train, y_train), (x_test, y_test) = np.load(f) if ngram_range > 1: print('Adding {}-gram features'.format(ngram_range)) # Create set of unique n-gram from the training set. ngram_set = set() for input_list in x_train: for i in range(2, ngram_range + 1): set_of_ngram = create_ngram_set(input_list, ngram_value=i) ngram_set.update(set_of_ngram) # Dictionary mapping n-gram token to a unique integer. # Integer values are greater than max_features in order # to avoid collision with existing features. start_index = max_features + 1 token_indice = {v: k + start_index for k, v in enumerate(ngram_set)} indice_token = {token_indice[k]: k for k in token_indice} # max_features is the highest integer that could be found in the dataset. max_features = np.max(list(indice_token.keys())) + 1 # Augmenting x_train and x_test with n-grams features x_train = add_ngram(x_train, token_indice, ngram_range) x_test = add_ngram(x_test, token_indice, ngram_range) print('Average train sequence length: {}'.format(np.mean(list(map(len, x_train)), dtype=int))) print('Average test sequence length: {}'.format(np.mean(list(map(len, x_test)), dtype=int))) print('Pad sequences') x_train = keras.preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen) x_test = keras.preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen) print('Build model') model = keras.models.Sequential() model.add(keras.layers.Embedding(max_features, embedding_dims, input_length=maxlen)) model.add(keras.layers.GlobalAveragePooling1D()) model.add(keras.layers.Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit( x_train, y_train, batch_size=batch_size, epochs=epochs, callbacks=[keras.callbacks.EarlyStopping(monitor='val_loss', patience=2)], validation_data=(x_test, y_test)) model.save('res/aclimdb_model.h5') \u5728 N-gram = 1 \u65f6, \u5728 8 \u4e2a epoch \u540e\u5230\u8fbe 93% \u7684\u6d4b\u8bd5\u51c6\u786e\u5ea6; \u5728 N-gram = 2 \u65f6, \u5728 14 \u4e2a epoch \u540e\u5230\u8fbe 95% \u7684\u6d4b\u8bd5\u51c6\u786e\u5ea6.","title":"\u673a\u5668\u5b66\u4e60-\u5feb\u901f\u6587\u672c\u5206\u7c7b"},{"location":"content/daze/ml/fasttext/#fasttext","text":"fastText \u662f facebook \u4e8e 2016 \u5e74\u5f00\u6e90\u51fa\u6765\u7684\u8fdb\u884c\u8bcd\u4e0e\u5e8f\u5217\u5206\u7c7b\u7684\u6a21\u578b. \u5b83\u7684\u7279\u70b9\u662f\u975e\u5e38\u5feb! \u5728 CPU \u4e0a\u53ef\u4ee5\u8f7b\u677e\u8fbe\u5230\u6bcf\u79d2\u51e0\u5343\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u901f\u5ea6.","title":"fastText"},{"location":"content/daze/ml/fasttext/#_1","text":"fastText \u62e5\u6709\u8bcd\u888b\u7279\u5f81\u4e0e N-gram \u7279\u5f81. \u5bf9\u4e8e\u4e00\u4e2a\u6837\u672c, \u6bd4\u5982 \"\u6211\u7231\u4f60\", \u5b83\u7684\u8bcd\u888b\u7279\u5f81\u4e3a\u65e0\u987a\u5e8f\u7684 [\"\u6211\", \"\u7231\", \"\u4f60\"], \u4f46\u8981\u6ce8\u610f\u7684\u662f, \"\u4f60\u7231\u6211\" \u7684\u8bcd\u888b\u7279\u5f81\u4e5f\u4e3a\u65e0\u987a\u5e8f\u7684 [\"\u4f60\", \"\u7231\", \"\u6211\"]. \u5982\u679c\u52a0\u5165 2-gram \u7279\u5f81, \u90a3\u4e48 \"\u6211\u7231\u4f60\" \u7684\u7279\u5f81\u4e3a [\"\u6211\", \"\u7231\", \"\u4f60\", \"\u6211\u7231\", \"\u7231\u4f60\"], \u800c \"\u4f60\u7231\u6211\" \u7684\u7279\u5f81\u53d8\u4e3a [\"\u4f60\", \"\u7231\", \"\u6211\", \"\u4f60\u7231\", \"\u7231\u6211\"], \u56e0\u6b64\u53ef\u4ee5\u533a\u5206\u4e24\u4e2a\u6837\u672c. \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u6211\u4eec\u9700\u8981\u8fc7\u6ee4\u6389\u4f4e\u9891\u7684 N-gram. \u4e00\u822c\u800c\u8a00, N-grams \u53d6 [1-5].","title":"\u8bcd\u5411\u91cf\u8868\u5f81"},{"location":"content/daze/ml/fasttext/#keras-fasttext","text":"https://github.com/facebookresearch/fastText/blob/master/tutorials/supervised-learning.md \u4e2d\u6709\u5173\u4e8e fastText \u9879\u76ee\u7684\u4f7f\u7528\u4f8b\u7a0b. \u5904\u7406\u4f7f\u7528\u5b98\u65b9\u5de5\u5177\u5916, \u53ef\u4ee5\u4f7f\u7528 keras \u5b9e\u73b0 fastText \u6a21\u578b. \u4e0b\u9762\u5c06\u5b8c\u6210\u4e00\u4e2a Imdb \u60c5\u611f\u4e8c\u5206\u7c7b. \u4f8b\u7a0b\u6570\u636e\u96c6\u4e0b\u8f7d: Large Movie Review Dataset \u9884\u5904\u7406 import json import os import pickle import keras.preprocessing.text import numpy as np path = '/data/aclImdb' def get_data(name): basename = os.path.basename(name) _, score = basename[:-4].split('_') score = int(score) with open(name, 'r', encoding='utf-8') as f: text = f.read().replace('<br />', '') return text, score xtr, ytr, xte, yte = [], [], [], [] print('scan', os.path.join(path, 'train/pos/')) for entry in os.scandir(os.path.join(path, 'train/pos/')): x, y = get_data(entry.path) xtr.append(x) ytr.append(y) print('scan', os.path.join(path, 'train/neg/')) for entry in os.scandir(os.path.join(path, 'train/neg/')): x, y = get_data(entry.path) xtr.append(x) ytr.append(y) print('scan', os.path.join(path, 'test/pos/')) for entry in os.scandir(os.path.join(path, 'test/pos/')): x, y = get_data(entry.path) xte.append(x) yte.append(y) print('scan', os.path.join(path, 'test/neg/')) for entry in os.scandir(os.path.join(path, 'train/neg/')): x, y = get_data(entry.path) xte.append(x) yte.append(y) try: os.mkdir('res') except FileExistsError: pass print('dump res/aclimdb.json') with open('res/aclimdb.json', 'w', encoding='utf-8') as f: json.dump(((xtr, ytr), (xte, yte)), f) ytr = [1 if i > 5 else 0 for i in ytr] yte = [1 if i > 5 else 0 for i in yte] print('init tokenizer') tokenizer = keras.preprocessing.text.Tokenizer(num_words=20000) tokenizer.fit_on_texts(xtr) print('dump res/aclimdb_word_index.json') with open('res/aclimdb_word_index.json', 'w') as f: json.dump(tokenizer.word_index, f) print('dump res/aclimdb_index_word.json') with open('res/aclimdb_index_word.json', 'w') as f: json.dump({v: k for k, v in tokenizer.word_index.items()}, f) print('dump res/aclimdb_tokenizer.pkl') with open('res/aclimdb_tokenizer.pkl', 'wb') as f: pickle.dump(tokenizer, f) print('serialize xtr') xtr = tokenizer.texts_to_sequences(xtr) print('serialize xte') xte = tokenizer.texts_to_sequences(xte) print('dump res/aclimdb.npy') np.save('res/aclimdb.npy', np.array([[xtr, ytr], [xte, yte]])) \u5b9a\u4e49\u6a21\u578b\u4e0e\u5f00\u59cb\u8bad\u7ec3 import keras.callbacks import keras.layers import keras.models import keras.preprocessing.sequence import keras.preprocessing.text import numpy as np def create_ngram_set(input_list, ngram_value=2): return set(zip(*[input_list[i:] for i in range(ngram_value)])) def add_ngram(sequences, token_indice, ngram_range=2): new_sequences = [] for input_list in sequences: new_list = input_list[:] for i in range(len(new_list) - ngram_range + 1): for ngram_value in range(2, ngram_range + 1): ngram = tuple(new_list[i:i + ngram_value]) if ngram in token_indice: new_list.append(token_indice[ngram]) new_sequences.append(new_list) return new_sequences ngram_range = 1 max_features = 20000 maxlen = 400 batch_size = 32 embedding_dims = 50 epochs = 20 print('Loading data') with open('res/aclimdb.npy', 'rb') as f: (x_train, y_train), (x_test, y_test) = np.load(f) if ngram_range > 1: print('Adding {}-gram features'.format(ngram_range)) # Create set of unique n-gram from the training set. ngram_set = set() for input_list in x_train: for i in range(2, ngram_range + 1): set_of_ngram = create_ngram_set(input_list, ngram_value=i) ngram_set.update(set_of_ngram) # Dictionary mapping n-gram token to a unique integer. # Integer values are greater than max_features in order # to avoid collision with existing features. start_index = max_features + 1 token_indice = {v: k + start_index for k, v in enumerate(ngram_set)} indice_token = {token_indice[k]: k for k in token_indice} # max_features is the highest integer that could be found in the dataset. max_features = np.max(list(indice_token.keys())) + 1 # Augmenting x_train and x_test with n-grams features x_train = add_ngram(x_train, token_indice, ngram_range) x_test = add_ngram(x_test, token_indice, ngram_range) print('Average train sequence length: {}'.format(np.mean(list(map(len, x_train)), dtype=int))) print('Average test sequence length: {}'.format(np.mean(list(map(len, x_test)), dtype=int))) print('Pad sequences') x_train = keras.preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen) x_test = keras.preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen) print('Build model') model = keras.models.Sequential() model.add(keras.layers.Embedding(max_features, embedding_dims, input_length=maxlen)) model.add(keras.layers.GlobalAveragePooling1D()) model.add(keras.layers.Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit( x_train, y_train, batch_size=batch_size, epochs=epochs, callbacks=[keras.callbacks.EarlyStopping(monitor='val_loss', patience=2)], validation_data=(x_test, y_test)) model.save('res/aclimdb_model.h5') \u5728 N-gram = 1 \u65f6, \u5728 8 \u4e2a epoch \u540e\u5230\u8fbe 93% \u7684\u6d4b\u8bd5\u51c6\u786e\u5ea6; \u5728 N-gram = 2 \u65f6, \u5728 14 \u4e2a epoch \u540e\u5230\u8fbe 95% \u7684\u6d4b\u8bd5\u51c6\u786e\u5ea6.","title":"\u4f7f\u7528 keras \u5b9e\u73b0 fastText \u6a21\u578b"},{"location":"content/daze/ml/hog/","text":"\u5229\u7528 HOG + SVM \u8bad\u7ec3\u4e00\u4e2a\u7b80\u5355\u7684\u56fe\u50cf\u5206\u7c7b\u5668. \u9879\u76ee\u5730\u5740: https://github.com/mohanson/hogsvm HOG HOG(Histogram of Oriented Gradient: \u68af\u5ea6\u76f4\u65b9\u56fe) \u7279\u5f81\u5728\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u975e\u5e38\u6d41\u884c. \u5176\u4e3b\u8981\u601d\u60f3\u662f \u5728\u4e00\u526f\u56fe\u50cf\u4e2d, \u5c40\u90e8\u76ee\u6807\u7684\u8868\u8c61\u548c\u5f62\u72b6\u80fd\u591f\u88ab\u68af\u5ea6\u6216\u8fb9\u7f18\u7684\u65b9\u5411\u5bc6\u5ea6\u5206\u5e03\u5f88\u597d\u5730\u63cf\u8ff0(\u672c\u8d28: \u68af\u5ea6\u7684\u7edf\u8ba1\u4fe1\u606f, \u800c\u68af\u5ea6\u4e3b\u8981\u5b58\u5728\u4e8e\u8fb9\u7f18\u7684\u5730\u65b9). \u5728 https://www.learnopencv.com/histogram-of-oriented-gradients/ \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6709\u5bf9 HOG \u7b97\u6cd5\u7684\u8be6\u7ec6\u4ecb\u7ecd, \u63a8\u8350\u5b8c\u6574\u9605\u8bfb. \u63d0\u53d6\u611f\u5174\u8da3\u56fe\u50cf\u533a\u57df, \u8fdb\u884c\u7070\u5ea6\u5316 \u8ba1\u7b97 X \u65b9\u5411\u4e0e Y \u65b9\u5411\u7684\u68af\u5ea6 import numpy as np import skimage.color import skimage.io im = skimage.color.rgb2gray(skimage.io.imread('/img/jp.jpg')) gy, gx = [np.ascontiguousarray(g) for g in np.gradient(im)] \u8ba1\u7b97\u68af\u5ea6\u5e45\u503c $g$ \u548c\u65b9\u5411 $\\theta$ g = np.sqrt(gy**2 + gx**2) t = np.arctan2(gy, gx) \u5c06\u56fe\u50cf\u5206\u5272\u4e3a 8x8 \u7684 cells \u5e76\u8ba1\u7b97\u6bcf\u4e00\u4e2a cells \u7684 9-bins \u68af\u5ea6\u76f4\u65b9\u56fe. \u68af\u5ea6\u65b9\u5411\u51b3\u5b9a\u5c5e\u4e8e\u54ea\u4e2a bin, \u68af\u5ea6\u5927\u5c0f\u51b3\u5b9a bin \u7684\u9ad8\u5ea6. \u5c06\u6bcf\u76f8\u90bb\u7684 4 \u4e2a cells \u7684\u68af\u5ea6\u76f4\u65b9\u56fe\u538b\u6241\u4e3a 1 \u7ef4\u6570\u636e(9 x 1), \u4e32\u8054\u4e3a (36 x 1) \u7684\u65b0\u6570\u636e\u5e76\u8fdb\u884c\u6807\u51c6\u5316 \u4e32\u8054\u7b2c\u4e94\u6b65\u6240\u6709\u6570\u636e \u6bd4\u5982\u6709\u539f\u56fe 64 * 128, \u5219\u5782\u76f4\u65b9\u5411\u6709 8 \u4e2a cell, \u6c34\u5e73\u65b9\u5411\u6709 16 \u4e2a cell, \u6bcf\u76f8\u90bb\u56db\u4e2a cell \u7ec4\u5408\u4e3a\u4e00\u4e2a block, \u5219\u5782\u76f4\u65b9\u5411\u6709 7 \u4e2a block, \u6c34\u5e73\u65b9\u5411\u6709 15 \u4e2a block, \u56e0\u6b64\u6700\u7ec8\u6c42\u5f97\u7684 HOG \u7279\u5f81\u5411\u91cf\u6709 7 * 15 * 9 * 4 = 3780 \u7ef4\u5ea6. # \u8ba1\u7b97\u56fe\u50cf\u7684 HOG \u7279\u5f81 import matplotlib.pyplot as plt import skimage.color import skimage.data import skimage.exposure import skimage.feature image = skimage.color.rgb2gray(skimage.data.astronaut()) fg, hog_image = skimage.feature.hog(image, orientations=8, pixels_per_cell=(16, 16), cells_per_block=(1, 1), visualise=True) print('fg ndim:', len(fg)) hog_image_rescaled = skimage.exposure.rescale_intensity(hog_image, in_range=(0, 10)) _, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharex=True, sharey=True) ax1.axis('off') ax1.imshow(image, cmap='gray') ax1.set_title('Raw image') ax2.axis('off') ax2.imshow(hog_image_rescaled, cmap='gray') ax2.set_title('Histogram of Oriented Gradients') plt.show() SVM SVM(\u652f\u6301\u5411\u91cf\u673a) \u662f\u4e00\u7cfb\u5217\u53ef\u7528\u4e8e\u5206\u7c7b, \u56de\u5f52\u548c\u5f02\u5e38\u503c\u68c0\u6d4b\u7684\u6709\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5. \u5229\u7528 HOG + SVM \u53ef\u4ee5\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1. import sklearn.svm X = [[0, 0], [1, 1]] Y = [0, 1] clf = sklearn.svm.SVC() # \u8bad\u7ec3 clf.fit(X, Y) # \u9884\u6d4b p = clf.predict([[0.7, 0.7]])[0] print('predict of [0.7, 0.7]:', p) # predict of [0.7, 0.7]: 1 \u53c2\u8003 [1] \u7ef4\u57fa: \u65b9\u5411\u68af\u5ea6\u76f4\u65b9\u56fe https://zh.wikipedia.org/zh-hans/%E6%96%B9%E5%90%91%E6%A2%AF%E5%BA%A6%E7%9B%B4%E6%96%B9%E5%9B%BE [2] scikit-image: Histogram of Oriented Gradients http://scikit-image.org/docs/dev/auto_examples/features_detection/plot_hog.html [3] Learn Opencv: Histogram of Oriented Gradients https://www.learnopencv.com/histogram-of-oriented-gradients/","title":"\u673a\u5668\u5b66\u4e60-HOG"},{"location":"content/daze/ml/hog/#hog","text":"HOG(Histogram of Oriented Gradient: \u68af\u5ea6\u76f4\u65b9\u56fe) \u7279\u5f81\u5728\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u975e\u5e38\u6d41\u884c. \u5176\u4e3b\u8981\u601d\u60f3\u662f \u5728\u4e00\u526f\u56fe\u50cf\u4e2d, \u5c40\u90e8\u76ee\u6807\u7684\u8868\u8c61\u548c\u5f62\u72b6\u80fd\u591f\u88ab\u68af\u5ea6\u6216\u8fb9\u7f18\u7684\u65b9\u5411\u5bc6\u5ea6\u5206\u5e03\u5f88\u597d\u5730\u63cf\u8ff0(\u672c\u8d28: \u68af\u5ea6\u7684\u7edf\u8ba1\u4fe1\u606f, \u800c\u68af\u5ea6\u4e3b\u8981\u5b58\u5728\u4e8e\u8fb9\u7f18\u7684\u5730\u65b9). \u5728 https://www.learnopencv.com/histogram-of-oriented-gradients/ \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6709\u5bf9 HOG \u7b97\u6cd5\u7684\u8be6\u7ec6\u4ecb\u7ecd, \u63a8\u8350\u5b8c\u6574\u9605\u8bfb. \u63d0\u53d6\u611f\u5174\u8da3\u56fe\u50cf\u533a\u57df, \u8fdb\u884c\u7070\u5ea6\u5316 \u8ba1\u7b97 X \u65b9\u5411\u4e0e Y \u65b9\u5411\u7684\u68af\u5ea6 import numpy as np import skimage.color import skimage.io im = skimage.color.rgb2gray(skimage.io.imread('/img/jp.jpg')) gy, gx = [np.ascontiguousarray(g) for g in np.gradient(im)] \u8ba1\u7b97\u68af\u5ea6\u5e45\u503c $g$ \u548c\u65b9\u5411 $\\theta$ g = np.sqrt(gy**2 + gx**2) t = np.arctan2(gy, gx) \u5c06\u56fe\u50cf\u5206\u5272\u4e3a 8x8 \u7684 cells \u5e76\u8ba1\u7b97\u6bcf\u4e00\u4e2a cells \u7684 9-bins \u68af\u5ea6\u76f4\u65b9\u56fe. \u68af\u5ea6\u65b9\u5411\u51b3\u5b9a\u5c5e\u4e8e\u54ea\u4e2a bin, \u68af\u5ea6\u5927\u5c0f\u51b3\u5b9a bin \u7684\u9ad8\u5ea6. \u5c06\u6bcf\u76f8\u90bb\u7684 4 \u4e2a cells \u7684\u68af\u5ea6\u76f4\u65b9\u56fe\u538b\u6241\u4e3a 1 \u7ef4\u6570\u636e(9 x 1), \u4e32\u8054\u4e3a (36 x 1) \u7684\u65b0\u6570\u636e\u5e76\u8fdb\u884c\u6807\u51c6\u5316 \u4e32\u8054\u7b2c\u4e94\u6b65\u6240\u6709\u6570\u636e \u6bd4\u5982\u6709\u539f\u56fe 64 * 128, \u5219\u5782\u76f4\u65b9\u5411\u6709 8 \u4e2a cell, \u6c34\u5e73\u65b9\u5411\u6709 16 \u4e2a cell, \u6bcf\u76f8\u90bb\u56db\u4e2a cell \u7ec4\u5408\u4e3a\u4e00\u4e2a block, \u5219\u5782\u76f4\u65b9\u5411\u6709 7 \u4e2a block, \u6c34\u5e73\u65b9\u5411\u6709 15 \u4e2a block, \u56e0\u6b64\u6700\u7ec8\u6c42\u5f97\u7684 HOG \u7279\u5f81\u5411\u91cf\u6709 7 * 15 * 9 * 4 = 3780 \u7ef4\u5ea6. # \u8ba1\u7b97\u56fe\u50cf\u7684 HOG \u7279\u5f81 import matplotlib.pyplot as plt import skimage.color import skimage.data import skimage.exposure import skimage.feature image = skimage.color.rgb2gray(skimage.data.astronaut()) fg, hog_image = skimage.feature.hog(image, orientations=8, pixels_per_cell=(16, 16), cells_per_block=(1, 1), visualise=True) print('fg ndim:', len(fg)) hog_image_rescaled = skimage.exposure.rescale_intensity(hog_image, in_range=(0, 10)) _, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharex=True, sharey=True) ax1.axis('off') ax1.imshow(image, cmap='gray') ax1.set_title('Raw image') ax2.axis('off') ax2.imshow(hog_image_rescaled, cmap='gray') ax2.set_title('Histogram of Oriented Gradients') plt.show()","title":"HOG"},{"location":"content/daze/ml/hog/#svm","text":"SVM(\u652f\u6301\u5411\u91cf\u673a) \u662f\u4e00\u7cfb\u5217\u53ef\u7528\u4e8e\u5206\u7c7b, \u56de\u5f52\u548c\u5f02\u5e38\u503c\u68c0\u6d4b\u7684\u6709\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5. \u5229\u7528 HOG + SVM \u53ef\u4ee5\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1. import sklearn.svm X = [[0, 0], [1, 1]] Y = [0, 1] clf = sklearn.svm.SVC() # \u8bad\u7ec3 clf.fit(X, Y) # \u9884\u6d4b p = clf.predict([[0.7, 0.7]])[0] print('predict of [0.7, 0.7]:', p) # predict of [0.7, 0.7]: 1","title":"SVM"},{"location":"content/daze/ml/hog/#_1","text":"[1] \u7ef4\u57fa: \u65b9\u5411\u68af\u5ea6\u76f4\u65b9\u56fe https://zh.wikipedia.org/zh-hans/%E6%96%B9%E5%90%91%E6%A2%AF%E5%BA%A6%E7%9B%B4%E6%96%B9%E5%9B%BE [2] scikit-image: Histogram of Oriented Gradients http://scikit-image.org/docs/dev/auto_examples/features_detection/plot_hog.html [3] Learn Opencv: Histogram of Oriented Gradients https://www.learnopencv.com/histogram-of-oriented-gradients/","title":"\u53c2\u8003"},{"location":"content/daze/ml/neural_style_transfer/","text":"Neural Style Transfer Neural style \u662f\u8ba9\u673a\u5668\u6a21\u4eff\u5df2\u6709\u753b\u4f5c\u7684\u7ed8\u753b\u98ce\u683c\u6765\u628a\u4e00\u5f20\u56fe\u7247\u91cd\u65b0\u7ed8\u5236\u7684\u7b97\u6cd5. \u827a\u672f\u5bb6\u53ef\u80fd\u9700\u8981\u7528\u6bd5\u751f\u7684\u5fc3\u8840\u624d\u80fd\u521b\u9020\u51fa\u60ca\u4eba\u7684\u827a\u672f\u4f5c\u54c1, \u800c\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u4fbf\u53ef\u4ee5\u7528\u5f88\u77ed\u7684\u65f6\u95f4\u5c06\u666e\u901a\u56fe\u7247\u521b\u9020\u51fa\u5bcc\u6709\u5927\u5e08\u98ce\u683c\u7684\u753b\u4f5c. \u6548\u679c\u5c55\u793a: \u98ce\u683c\u8f6c\u79fb\u7b97\u6cd5\u53ef\u751f\u6210\u4e00\u5f20\u5177\u6709\u539f\u56fe\"\u5185\u5bb9\"\u4e0e\u53e6\u4e00\u5f20\u56fe\u7247\"\u98ce\u683c\"\u7684\u65b0\u7684\u56fe\u7247. \u6bd4\u5982, \u53ef\u4ee5\u5f88\u5bb9\u6613\u5c06\u68b5\u9ad8\u7684\"\u661f\u6708\u591c\"\u7684\u7ed8\u753b\u98ce\u683c\u8f6c\u79fb\u5230\u81ea\u5df1\u7684\u56fe\u7247\u4e0a. \u8fd9\u91cc, \u6211\u4eec\u4f7f\u7528 keras \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e0e VGG-16 \u6a21\u578b\u6765\u5b8c\u6210\u8fd9\u4e2a\u529f\u80fd. VGG-16: VGG-16 \u53c8\u79f0\u4e3a OxfordNet\uff0c\u662f\u7531\u725b\u6d25\u89c6\u89c9\u51e0\u4f55\u7ec4(Visual Geometry Group)\u5f00\u53d1\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784. \u8be5\u7f51\u7edc\u8d62\u5f97\u4e86 ILSVR(ImageNet)2014 \u7684\u51a0\u519b. \u65f6\u81f3\u4eca\u65e5, VGG \u4ecd\u7136\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u6770\u51fa\u7684\u89c6\u89c9\u6a21\u578b--\u5c3d\u7ba1\u5b83\u7684\u6027\u80fd\u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u540e\u6765\u7684 Inception \u548c ResNet \u8d85\u8fc7\u4e86. \u6267\u884c \u98ce\u683c\u8f6c\u79fb\u7b97\u6cd5\u5df2\u7ecf\u88ab\u5305\u542b\u5728 keras \u7684\u5b98\u65b9\u4f8b\u5b50\u91cc\u9762\u4e86: https://github.com/fchollet/keras/blob/master/examples/neural_style_transfer.py \u4e3a\u4e86\u4f7f\u7528\u5982\u4e0a\u7684\u4ee3\u7801, \u9996\u5148\u9700\u8981\u5b89\u88c5 keras: $ pip install keras \u5982\u679c\u5b89\u88c5\u51fa\u73b0\u4e86\u95ee\u9898, \u5efa\u8bae\u524d\u5f80 keras \u4e2d\u6587\u6587\u6863-\u5b89\u88c5 \u5bfb\u627e\u7b54\u6848. \u73b0\u5728, \u51c6\u5907\u4e24\u5f20\u56fe\u7247, \u4e00\u5f20\"\u5185\u5bb9\", \u4e00\u5f20\"\u98ce\u683c\", \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4: $ python neural_style_transfer.py path_to_your_base_image.jpg path_to_your_reference.jpg prefix_for_results \u5728\u5be1\u4eba\u7684 GTX 1070 GPU \u4e0a, \u8fd9\u53ea\u9700\u8981\u82b1\u8d39 80 \u79d2\u5de6\u53f3\u7684\u65f6\u95f4, \u800c\u5728 xeon CPU \u4e0a, \u53ef\u80fd\u9700\u8981\u82b1\u8d39\u6574\u6574\u4e00\u5929\u7684\u65f6\u95f4. \u8fd0\u884c\u6b63\u5e38\u7684\u8bdd, \u9ed8\u8ba4 10 \u6b21\u8fed\u4ee3\u540e\u5c06\u5f97\u5230\u603b\u5171 10 \u5f20\u4ece\"\u98ce\u683c\"\u4e0d\u65ad\u63a5\u8fd1\"\u5185\u5bb9\"\u7684\u56fe\u7247. \u5982\u679c\u5b89\u88c5\u6709 ffmpeg \u5de5\u5177, \u53ef\u4ee5\u5c06\u751f\u6210\u7684 10 \u5f20\u56fe\u7247\u6253\u5305\u6210\u4e00\u5f20 gif \u52a8\u6001\u56fe: $ ffmpeg -r 8 -i prefix_for_results_%d.jpg out.gif \u8fd9\u6837\u5c31\u80fd\u5f97\u5230\u672c\u7ad9\u4e3b\u9875\u4e0a\u90a3\u5f20\u70ab\u9177\u7684 gif \u56fe\u7247\u4e86.","title":"\u673a\u5668\u5b66\u4e60-\u56fe\u50cf\u98ce\u683c\u8f6c\u79fb"},{"location":"content/daze/ml/neural_style_transfer/#neural-style-transfer","text":"Neural style \u662f\u8ba9\u673a\u5668\u6a21\u4eff\u5df2\u6709\u753b\u4f5c\u7684\u7ed8\u753b\u98ce\u683c\u6765\u628a\u4e00\u5f20\u56fe\u7247\u91cd\u65b0\u7ed8\u5236\u7684\u7b97\u6cd5. \u827a\u672f\u5bb6\u53ef\u80fd\u9700\u8981\u7528\u6bd5\u751f\u7684\u5fc3\u8840\u624d\u80fd\u521b\u9020\u51fa\u60ca\u4eba\u7684\u827a\u672f\u4f5c\u54c1, \u800c\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u4fbf\u53ef\u4ee5\u7528\u5f88\u77ed\u7684\u65f6\u95f4\u5c06\u666e\u901a\u56fe\u7247\u521b\u9020\u51fa\u5bcc\u6709\u5927\u5e08\u98ce\u683c\u7684\u753b\u4f5c. \u6548\u679c\u5c55\u793a: \u98ce\u683c\u8f6c\u79fb\u7b97\u6cd5\u53ef\u751f\u6210\u4e00\u5f20\u5177\u6709\u539f\u56fe\"\u5185\u5bb9\"\u4e0e\u53e6\u4e00\u5f20\u56fe\u7247\"\u98ce\u683c\"\u7684\u65b0\u7684\u56fe\u7247. \u6bd4\u5982, \u53ef\u4ee5\u5f88\u5bb9\u6613\u5c06\u68b5\u9ad8\u7684\"\u661f\u6708\u591c\"\u7684\u7ed8\u753b\u98ce\u683c\u8f6c\u79fb\u5230\u81ea\u5df1\u7684\u56fe\u7247\u4e0a. \u8fd9\u91cc, \u6211\u4eec\u4f7f\u7528 keras \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e0e VGG-16 \u6a21\u578b\u6765\u5b8c\u6210\u8fd9\u4e2a\u529f\u80fd. VGG-16: VGG-16 \u53c8\u79f0\u4e3a OxfordNet\uff0c\u662f\u7531\u725b\u6d25\u89c6\u89c9\u51e0\u4f55\u7ec4(Visual Geometry Group)\u5f00\u53d1\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784. \u8be5\u7f51\u7edc\u8d62\u5f97\u4e86 ILSVR(ImageNet)2014 \u7684\u51a0\u519b. \u65f6\u81f3\u4eca\u65e5, VGG \u4ecd\u7136\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u6770\u51fa\u7684\u89c6\u89c9\u6a21\u578b--\u5c3d\u7ba1\u5b83\u7684\u6027\u80fd\u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u540e\u6765\u7684 Inception \u548c ResNet \u8d85\u8fc7\u4e86.","title":"Neural Style Transfer"},{"location":"content/daze/ml/neural_style_transfer/#_1","text":"\u98ce\u683c\u8f6c\u79fb\u7b97\u6cd5\u5df2\u7ecf\u88ab\u5305\u542b\u5728 keras \u7684\u5b98\u65b9\u4f8b\u5b50\u91cc\u9762\u4e86: https://github.com/fchollet/keras/blob/master/examples/neural_style_transfer.py \u4e3a\u4e86\u4f7f\u7528\u5982\u4e0a\u7684\u4ee3\u7801, \u9996\u5148\u9700\u8981\u5b89\u88c5 keras: $ pip install keras \u5982\u679c\u5b89\u88c5\u51fa\u73b0\u4e86\u95ee\u9898, \u5efa\u8bae\u524d\u5f80 keras \u4e2d\u6587\u6587\u6863-\u5b89\u88c5 \u5bfb\u627e\u7b54\u6848. \u73b0\u5728, \u51c6\u5907\u4e24\u5f20\u56fe\u7247, \u4e00\u5f20\"\u5185\u5bb9\", \u4e00\u5f20\"\u98ce\u683c\", \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4: $ python neural_style_transfer.py path_to_your_base_image.jpg path_to_your_reference.jpg prefix_for_results \u5728\u5be1\u4eba\u7684 GTX 1070 GPU \u4e0a, \u8fd9\u53ea\u9700\u8981\u82b1\u8d39 80 \u79d2\u5de6\u53f3\u7684\u65f6\u95f4, \u800c\u5728 xeon CPU \u4e0a, \u53ef\u80fd\u9700\u8981\u82b1\u8d39\u6574\u6574\u4e00\u5929\u7684\u65f6\u95f4. \u8fd0\u884c\u6b63\u5e38\u7684\u8bdd, \u9ed8\u8ba4 10 \u6b21\u8fed\u4ee3\u540e\u5c06\u5f97\u5230\u603b\u5171 10 \u5f20\u4ece\"\u98ce\u683c\"\u4e0d\u65ad\u63a5\u8fd1\"\u5185\u5bb9\"\u7684\u56fe\u7247. \u5982\u679c\u5b89\u88c5\u6709 ffmpeg \u5de5\u5177, \u53ef\u4ee5\u5c06\u751f\u6210\u7684 10 \u5f20\u56fe\u7247\u6253\u5305\u6210\u4e00\u5f20 gif \u52a8\u6001\u56fe: $ ffmpeg -r 8 -i prefix_for_results_%d.jpg out.gif \u8fd9\u6837\u5c31\u80fd\u5f97\u5230\u672c\u7ad9\u4e3b\u9875\u4e0a\u90a3\u5f20\u70ab\u9177\u7684 gif \u56fe\u7247\u4e86.","title":"\u6267\u884c"},{"location":"content/daze/rc4/overview/","text":"\u6982\u89c8 RC4 \u662f\u5bf9\u79f0\u6d41\u52a0\u5bc6\u7b97\u6cd5, \u5bc6\u6587\u4e0e\u660e\u6587\u957f\u5ea6\u5747\u7b49. \u5bc6\u94a5\u957f\u5ea6\u4e3a [1, 256]. \u8ba9\u5b83\u5982\u6b64\u5e7f\u6cdb\u5206\u5e03\u548c\u4f7f\u7528\u7684\u4e3b\u8981\u56e0\u7d20\u662f\u5b83 \u4e0d\u53ef\u601d\u8bae\u7684\u7b80\u5355\u548c\u901f\u5ea6 . RC4 \u751f\u6210\u4f2a\u968f\u673a\u6bd4\u7279\u6d41, \u5e76\u4e8e\u660e\u6587\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c. \u4e3a\u4e86\u751f\u6210\u6bd4\u7279\u6d41, \u52a0\u5bc6\u7b97\u6cd5\u4f7f\u7528\u7531\u4e24\u90e8\u5206\u7ec4\u6210\u5185\u90e8\u72b6\u6001: \u5305\u542b 1 \u81f3 255 \u7684 256 \u4f4d\u6570\u7ec4(\u79f0\u4e3a s \u76d2) 2 \u4e2a 8-bit \u7d22\u5f15(\u79f0\u4e3a i \u548c j) \u9996\u5148, \u521d\u59cb\u5316\u957f\u5ea6\u4e3a256\u7684 s \u76d2. \u7b2c\u4e00\u4e2a for \u5faa\u73af\u5c06 0 \u5230 255 \u7684\u4e92\u4e0d\u91cd\u590d\u7684\u5143\u7d20\u88c5\u5165 s \u76d2. \u7b2c\u4e8c\u4e2a for \u5faa\u73af\u6839\u636e\u5bc6\u94a5\u6253\u4e71 s \u76d2. for i from 0 to 255 S[i] := i endfor j := 0 for i from 0 to 255 j := (j + S[i] + key[i mod keylength]) mod 256 swap values of S[i] and S[j] endfor \u4e0b\u9762 i, j \u662f\u4e24\u4e2a\u6307\u9488. \u6bcf\u6536\u5230\u4e00\u4e2a\u5b57\u8282, \u5c31\u8fdb\u884c\u4e00\u6b21\u5faa\u73af. i := 0 j := 0 while GeneratingOutput: i := (i + 1) mod 256 //a j := (j + S[i]) mod 256 //b swap values of S[i] and S[j] //c k := inputByte ^ S[(S[i] + S[j]) % 256] output K endwhile \u6b64\u7b97\u6cd5\u4fdd\u8bc1\u6bcf256\u6b21\u5faa\u73af\u4e2dS\u76d2\u7684\u6bcf\u4e2a\u5143\u7d20\u81f3\u5c11\u88ab\u4ea4\u6362\u8fc7\u4e00\u6b21. \u4ee3\u7801\u5b9e\u73b0 \u4e0b\u793a python \u4ee3\u7801\u4e3b\u8981\u7ffb\u8bd1\u81ea go \u6807\u51c6\u5e93 crypto/rc4 . class KeySizeError(Exception): pass class Cipher: def __init__(self, key): assert isinstance(key, bytes) self.s = list(range(256)) self.i = 0 self.j = 0 self.key = key k = len(key) if k < 1 or k > 256: raise KeySizeError('crypto/rc4: invalid key size ' + str(k)) j = 0 for i in range(256): j = (j + self.s[i] + key[i % k]) % 256 self.s[i], self.s[j] = self.s[j], self.s[i] def __str__(self): return f'rc4.Cipher(key={self.key})' def crypto(self, src, dst): i, j = self.i, self.j for k, v in enumerate(src): i = (i + 1) % 256 j = (j + self.s[i]) % 256 self.s[i], self.s[j] = self.s[j], self.s[i] dst[k] = v ^ self.s[(self.s[i] + self.s[j]) % 256] % 256 self.i, self.j = i, j def stream(self, src, dst): c = 8192 buf = list(range(c)) while True: ctx = src.read(c) if not ctx: break n = len(ctx) self.crypto(ctx, buf) dst.write(bytes(buf[:n])) if __name__ == '__main__': c = Cipher(b'secret') src = b'The quick brown fox jumps over the lazy dog' dst = list(range(len(src))) c.crypto(src, dst) print(bytes(dst)) \u53c2\u8003 [1] \u7ef4\u57fa: RC4 https://en.wikipedia.org/wiki/RC4 [2] Go: crypto/rc4 \u6807\u51c6\u5e93 https://github.com/golang/go/blob/master/src/crypto/rc4/rc4.go","title":"\u52a0\u5bc6\u7b97\u6cd5-RC4-\u6982\u89c8"},{"location":"content/daze/rc4/overview/#_1","text":"RC4 \u662f\u5bf9\u79f0\u6d41\u52a0\u5bc6\u7b97\u6cd5, \u5bc6\u6587\u4e0e\u660e\u6587\u957f\u5ea6\u5747\u7b49. \u5bc6\u94a5\u957f\u5ea6\u4e3a [1, 256]. \u8ba9\u5b83\u5982\u6b64\u5e7f\u6cdb\u5206\u5e03\u548c\u4f7f\u7528\u7684\u4e3b\u8981\u56e0\u7d20\u662f\u5b83 \u4e0d\u53ef\u601d\u8bae\u7684\u7b80\u5355\u548c\u901f\u5ea6 . RC4 \u751f\u6210\u4f2a\u968f\u673a\u6bd4\u7279\u6d41, \u5e76\u4e8e\u660e\u6587\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c. \u4e3a\u4e86\u751f\u6210\u6bd4\u7279\u6d41, \u52a0\u5bc6\u7b97\u6cd5\u4f7f\u7528\u7531\u4e24\u90e8\u5206\u7ec4\u6210\u5185\u90e8\u72b6\u6001: \u5305\u542b 1 \u81f3 255 \u7684 256 \u4f4d\u6570\u7ec4(\u79f0\u4e3a s \u76d2) 2 \u4e2a 8-bit \u7d22\u5f15(\u79f0\u4e3a i \u548c j) \u9996\u5148, \u521d\u59cb\u5316\u957f\u5ea6\u4e3a256\u7684 s \u76d2. \u7b2c\u4e00\u4e2a for \u5faa\u73af\u5c06 0 \u5230 255 \u7684\u4e92\u4e0d\u91cd\u590d\u7684\u5143\u7d20\u88c5\u5165 s \u76d2. \u7b2c\u4e8c\u4e2a for \u5faa\u73af\u6839\u636e\u5bc6\u94a5\u6253\u4e71 s \u76d2. for i from 0 to 255 S[i] := i endfor j := 0 for i from 0 to 255 j := (j + S[i] + key[i mod keylength]) mod 256 swap values of S[i] and S[j] endfor \u4e0b\u9762 i, j \u662f\u4e24\u4e2a\u6307\u9488. \u6bcf\u6536\u5230\u4e00\u4e2a\u5b57\u8282, \u5c31\u8fdb\u884c\u4e00\u6b21\u5faa\u73af. i := 0 j := 0 while GeneratingOutput: i := (i + 1) mod 256 //a j := (j + S[i]) mod 256 //b swap values of S[i] and S[j] //c k := inputByte ^ S[(S[i] + S[j]) % 256] output K endwhile \u6b64\u7b97\u6cd5\u4fdd\u8bc1\u6bcf256\u6b21\u5faa\u73af\u4e2dS\u76d2\u7684\u6bcf\u4e2a\u5143\u7d20\u81f3\u5c11\u88ab\u4ea4\u6362\u8fc7\u4e00\u6b21.","title":"\u6982\u89c8"},{"location":"content/daze/rc4/overview/#_2","text":"\u4e0b\u793a python \u4ee3\u7801\u4e3b\u8981\u7ffb\u8bd1\u81ea go \u6807\u51c6\u5e93 crypto/rc4 . class KeySizeError(Exception): pass class Cipher: def __init__(self, key): assert isinstance(key, bytes) self.s = list(range(256)) self.i = 0 self.j = 0 self.key = key k = len(key) if k < 1 or k > 256: raise KeySizeError('crypto/rc4: invalid key size ' + str(k)) j = 0 for i in range(256): j = (j + self.s[i] + key[i % k]) % 256 self.s[i], self.s[j] = self.s[j], self.s[i] def __str__(self): return f'rc4.Cipher(key={self.key})' def crypto(self, src, dst): i, j = self.i, self.j for k, v in enumerate(src): i = (i + 1) % 256 j = (j + self.s[i]) % 256 self.s[i], self.s[j] = self.s[j], self.s[i] dst[k] = v ^ self.s[(self.s[i] + self.s[j]) % 256] % 256 self.i, self.j = i, j def stream(self, src, dst): c = 8192 buf = list(range(c)) while True: ctx = src.read(c) if not ctx: break n = len(ctx) self.crypto(ctx, buf) dst.write(bytes(buf[:n])) if __name__ == '__main__': c = Cipher(b'secret') src = b'The quick brown fox jumps over the lazy dog' dst = list(range(len(src))) c.crypto(src, dst) print(bytes(dst))","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/rc4/overview/#_3","text":"[1] \u7ef4\u57fa: RC4 https://en.wikipedia.org/wiki/RC4 [2] Go: crypto/rc4 \u6807\u51c6\u5e93 https://github.com/golang/go/blob/master/src/crypto/rc4/rc4.go","title":"\u53c2\u8003"},{"location":"content/daze/rc4/performance_testing/","text":"RC4 \u6027\u80fd\u6d4b\u8bd5 \u5728\u4f7f\u7528 python \u7248\u672c rc4 \u7b97\u6cd5\u65f6\u53d1\u73b0\u6027\u80fd\u8f83\u5dee, \u51e0\u4e4e\u65e0\u6cd5\u5b9e\u65f6\u52a0\u89e3\u5bc6\u64ad\u653e youtube \u89c6\u9891, \u56e0\u6b64\u5bf9 rc4 \u7b97\u6cd5\u505a\u4e86\u4e00\u6b21\u6027\u80fd\u6d4b\u8bd5, \u6d4b\u8bd5\u5bf9\u8c61\u662f\u81ea\u5df1\u5199\u7684 rc4 \u548c\u5176\u4ed6\u8bed\u8a00\u7248\u672c. $ dd if=/dev/urandom of=/tmp/src count=128 bs=1M \u751f\u6210\u4e00\u4e2a 128M \u7684\u6d4b\u8bd5\u6587\u4ef6. \u7f16\u5199\u5982\u4e0b\u6d4b\u8bd5\u4ee3\u7801: python import rc4 src = '/tmp/src' dst = '/tmp/dst_py' k = 'mohanson' cipher = rc4.Cipher(k.encode()) with open(src, 'rb') as r, open(dst, 'wb') as w: cipher.stream(r, w) go package main import ( \"crypto/cipher\" \"crypto/rc4\" \"io\" \"log\" \"os\" ) var ( src = \"/tmp/src\" dst = \"/tmp/dst_go\" k = \"mohanson\" ) func main() { r, err := os.Open(src) if err != nil { log.Fatalln(err) } defer r.Close() w, err := os.OpenFile(dst, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644) if err != nil { log.Fatalln(err) } defer w.Close() c, _ := rc4.NewCipher([]byte(k)) if _, err := io.Copy(w, cipher.StreamReader{S: c, R: r}); err != nil { log.Fatalln(err) } } rust [dependencies] rust-crypto = \"^0.2\" extern crate crypto; use std::fs::File; use std::io::prelude::*; use crypto::symmetriccipher::SynchronousStreamCipher; fn main() { let src = \"/tmp/src\"; let dst = \"/tmp/dst_rs\"; let k = \"mohanson\"; let mut f_src = File::open(src).unwrap(); let mut f_dst = File::create(dst).unwrap(); let mut cipher = crypto::rc4::Rc4::new(k.as_bytes()); let mut b_src = [0; 4096]; let mut b_dst = [0; 4096]; let mut n: usize; loop { n = f_src.read(&mut b_src[..]).unwrap(); if n == 0 { break; } cipher.process(&b_src[..n], &mut b_dst[..n]); f_dst.write(&b_dst[..n]).unwrap(); } } \u6d4b\u8bd5\u5c0f\u7ed3 $ time python3 main.py # 153.17s $ go build -o main main.go && time ./main # 1.34s $ cargo build --release && time ./target/main # 7.16s # \u8ba1\u7b97\u8f93\u51fa MD5 \u786e\u4fdd\u4e00\u81f4 $ md5sum /tmp/dst_* # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_py # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_go # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_rs python \u7248\u672c\u53ea\u80fd\u505a\u5230 0.836M/S \u7684\u8ba1\u7b97\u901f\u5ea6, \u6027\u80fd\u4e0e go \u76f8\u5dee 114 \u500d! \u602a\u4e0d\u5f97\u770b\u89c6\u9891\u8fd9\u4e48\u5361, \u4e0d\u80fd\u5fcd(\u4e8b\u5b9e\u4e0a\u4f5c\u8005\u5df2\u7ecf\u6295\u5165 go \u7684\u6000\u62b1)... go \u7248\u672c\u6027\u80fd\u662f rust \u7684 5.3 \u500d, \u5f88\u5927\u539f\u56e0\u5728\u4e8e go \u7248\u672c rc4 \u5176\u5b9e\u662f\u6c47\u7f16\u5b9e\u73b0(\u4e5f\u5305\u62ec\u5f88\u591a\u5176\u4ed6\u7b97\u6cd5).","title":"\u52a0\u5bc6\u7b97\u6cd5-RC4-\u6027\u80fd\u6d4b\u8bd5"},{"location":"content/daze/rc4/performance_testing/#rc4","text":"\u5728\u4f7f\u7528 python \u7248\u672c rc4 \u7b97\u6cd5\u65f6\u53d1\u73b0\u6027\u80fd\u8f83\u5dee, \u51e0\u4e4e\u65e0\u6cd5\u5b9e\u65f6\u52a0\u89e3\u5bc6\u64ad\u653e youtube \u89c6\u9891, \u56e0\u6b64\u5bf9 rc4 \u7b97\u6cd5\u505a\u4e86\u4e00\u6b21\u6027\u80fd\u6d4b\u8bd5, \u6d4b\u8bd5\u5bf9\u8c61\u662f\u81ea\u5df1\u5199\u7684 rc4 \u548c\u5176\u4ed6\u8bed\u8a00\u7248\u672c. $ dd if=/dev/urandom of=/tmp/src count=128 bs=1M \u751f\u6210\u4e00\u4e2a 128M \u7684\u6d4b\u8bd5\u6587\u4ef6. \u7f16\u5199\u5982\u4e0b\u6d4b\u8bd5\u4ee3\u7801:","title":"RC4 \u6027\u80fd\u6d4b\u8bd5"},{"location":"content/daze/rc4/performance_testing/#python","text":"import rc4 src = '/tmp/src' dst = '/tmp/dst_py' k = 'mohanson' cipher = rc4.Cipher(k.encode()) with open(src, 'rb') as r, open(dst, 'wb') as w: cipher.stream(r, w)","title":"python"},{"location":"content/daze/rc4/performance_testing/#go","text":"package main import ( \"crypto/cipher\" \"crypto/rc4\" \"io\" \"log\" \"os\" ) var ( src = \"/tmp/src\" dst = \"/tmp/dst_go\" k = \"mohanson\" ) func main() { r, err := os.Open(src) if err != nil { log.Fatalln(err) } defer r.Close() w, err := os.OpenFile(dst, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644) if err != nil { log.Fatalln(err) } defer w.Close() c, _ := rc4.NewCipher([]byte(k)) if _, err := io.Copy(w, cipher.StreamReader{S: c, R: r}); err != nil { log.Fatalln(err) } }","title":"go"},{"location":"content/daze/rc4/performance_testing/#rust","text":"[dependencies] rust-crypto = \"^0.2\" extern crate crypto; use std::fs::File; use std::io::prelude::*; use crypto::symmetriccipher::SynchronousStreamCipher; fn main() { let src = \"/tmp/src\"; let dst = \"/tmp/dst_rs\"; let k = \"mohanson\"; let mut f_src = File::open(src).unwrap(); let mut f_dst = File::create(dst).unwrap(); let mut cipher = crypto::rc4::Rc4::new(k.as_bytes()); let mut b_src = [0; 4096]; let mut b_dst = [0; 4096]; let mut n: usize; loop { n = f_src.read(&mut b_src[..]).unwrap(); if n == 0 { break; } cipher.process(&b_src[..n], &mut b_dst[..n]); f_dst.write(&b_dst[..n]).unwrap(); } }","title":"rust"},{"location":"content/daze/rc4/performance_testing/#_1","text":"$ time python3 main.py # 153.17s $ go build -o main main.go && time ./main # 1.34s $ cargo build --release && time ./target/main # 7.16s # \u8ba1\u7b97\u8f93\u51fa MD5 \u786e\u4fdd\u4e00\u81f4 $ md5sum /tmp/dst_* # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_py # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_go # 7099dda7f9a5aa49d55a3f856f3f7aa5 /tmp/dst_rs python \u7248\u672c\u53ea\u80fd\u505a\u5230 0.836M/S \u7684\u8ba1\u7b97\u901f\u5ea6, \u6027\u80fd\u4e0e go \u76f8\u5dee 114 \u500d! \u602a\u4e0d\u5f97\u770b\u89c6\u9891\u8fd9\u4e48\u5361, \u4e0d\u80fd\u5fcd(\u4e8b\u5b9e\u4e0a\u4f5c\u8005\u5df2\u7ecf\u6295\u5165 go \u7684\u6000\u62b1)... go \u7248\u672c\u6027\u80fd\u662f rust \u7684 5.3 \u500d, \u5f88\u5927\u539f\u56e0\u5728\u4e8e go \u7248\u672c rc4 \u5176\u5b9e\u662f\u6c47\u7f16\u5b9e\u73b0(\u4e5f\u5305\u62ec\u5f88\u591a\u5176\u4ed6\u7b97\u6cd5).","title":"\u6d4b\u8bd5\u5c0f\u7ed3"},{"location":"content/daze/sklearn/bayes/","text":"\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u7528\u4e8e\u89e3\u51b3\u5206\u7c7b\u95ee\u9898. sklearn \u4e2d\u5b9e\u73b0\u4e86\u4e09\u79cd\u4e0d\u540c\u7684\u8d1d\u53f6\u65af\u5206\u7c7b\u5668, \u5206\u522b\u662f GaussianNB , MultinomialNB \u548c BernoulliNB . \u9ad8\u65af\u8d1d\u53f6\u65af\u5206\u7c7b\u5668 import sklearn.datasets import sklearn.naive_bayes import sklearn.metrics iris = sklearn.datasets.load_iris() gnb = sklearn.naive_bayes.GaussianNB() gnb.fit(iris.data, iris.target) y_pred = gnb.predict(iris.data) acc = sklearn.metrics.classification_report(iris.target, y_pred) print(acc) partial_fit \u5982\u679c\u8bad\u7ec3\u96c6\u6570\u636e\u8fc7\u5927, \u65e0\u6cd5\u4e00\u6b21\u6027\u8bfb\u5165\u5185\u5b58, \u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u63d0\u4f9b\u4e86 partial_fit \u51fd\u6570, \u4ee5\u8fdb\u884c\u52a8\u6001\u6570\u636e\u52a0\u8f7d, \u7528\u4e0e\u9012\u589e\u5f0f\u5b66\u4e60. \u8981\u6ce8\u610f\u7684\u662f, \u7b2c\u4e00\u6b21\u8c03\u7528 partial_fit \u65f6\u9700\u8981\u5c06 classes \u5168\u90e8\u4f20\u5165. import numpy as np import sklearn.datasets import sklearn.metrics import sklearn.naive_bayes iris = sklearn.datasets.load_iris() indices = np.arange(len(iris.data), dtype=np.int) np.random.shuffle(indices) x = iris.data[indices] y = iris.target[indices] indices = np.linspace(0, len(x), 4).astype(np.int) x1 = x[indices[0]:indices[1]] y1 = y[indices[0]:indices[1]] x2 = x[indices[1]:indices[2]] y2 = y[indices[1]:indices[2]] x3 = x[indices[2]:indices[3]] y3 = y[indices[2]:indices[3]] gnb = sklearn.naive_bayes.GaussianNB() gnb.partial_fit(x1, y1, classes=[0, 1, 2]) gnb.partial_fit(x2, y2) gnb.partial_fit(x3, y3) y_pred = gnb.predict(iris.data) acc = sklearn.metrics.classification_report(iris.target, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 50 1 0.94 0.94 0.94 50 2 0.94 0.94 0.94 50 avg / total 0.96 0.96 0.96 150","title":"sklearn-\u8d1d\u53f6\u65af\u5206\u7c7b\u5668"},{"location":"content/daze/sklearn/bayes/#_1","text":"import sklearn.datasets import sklearn.naive_bayes import sklearn.metrics iris = sklearn.datasets.load_iris() gnb = sklearn.naive_bayes.GaussianNB() gnb.fit(iris.data, iris.target) y_pred = gnb.predict(iris.data) acc = sklearn.metrics.classification_report(iris.target, y_pred) print(acc)","title":"\u9ad8\u65af\u8d1d\u53f6\u65af\u5206\u7c7b\u5668"},{"location":"content/daze/sklearn/bayes/#partial_fit","text":"\u5982\u679c\u8bad\u7ec3\u96c6\u6570\u636e\u8fc7\u5927, \u65e0\u6cd5\u4e00\u6b21\u6027\u8bfb\u5165\u5185\u5b58, \u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u63d0\u4f9b\u4e86 partial_fit \u51fd\u6570, \u4ee5\u8fdb\u884c\u52a8\u6001\u6570\u636e\u52a0\u8f7d, \u7528\u4e0e\u9012\u589e\u5f0f\u5b66\u4e60. \u8981\u6ce8\u610f\u7684\u662f, \u7b2c\u4e00\u6b21\u8c03\u7528 partial_fit \u65f6\u9700\u8981\u5c06 classes \u5168\u90e8\u4f20\u5165. import numpy as np import sklearn.datasets import sklearn.metrics import sklearn.naive_bayes iris = sklearn.datasets.load_iris() indices = np.arange(len(iris.data), dtype=np.int) np.random.shuffle(indices) x = iris.data[indices] y = iris.target[indices] indices = np.linspace(0, len(x), 4).astype(np.int) x1 = x[indices[0]:indices[1]] y1 = y[indices[0]:indices[1]] x2 = x[indices[1]:indices[2]] y2 = y[indices[1]:indices[2]] x3 = x[indices[2]:indices[3]] y3 = y[indices[2]:indices[3]] gnb = sklearn.naive_bayes.GaussianNB() gnb.partial_fit(x1, y1, classes=[0, 1, 2]) gnb.partial_fit(x2, y2) gnb.partial_fit(x3, y3) y_pred = gnb.predict(iris.data) acc = sklearn.metrics.classification_report(iris.target, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 50 1 0.94 0.94 0.94 50 2 0.94 0.94 0.94 50 avg / total 0.96 0.96 0.96 150","title":"partial_fit"},{"location":"content/daze/sklearn/cluster/","text":"\u805a\u7c7b sklearn \u5b98\u65b9\u7ed9\u51fa\u4e86\u4e00\u4efd\u5404\u79cd\u805a\u7c7b\u6a21\u578b\u9002\u7528\u573a\u666f\u548c\u8c03\u53c2\u5efa\u8bae, \u6458\u5f55\u5982\u4e0b: http://sklearn.apachecn.org/cn/0.19.0/modules/clustering.html#id2 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a k-means \u805a\u7c7b\u7684\u4f7f\u7528\u4f8b\u5b50: k-means \u7b97\u6cd5\u5c06\u4e00\u7ec4 N \u6837\u672c X \u5212\u5206\u6210 K \u4e0d\u76f8\u4ea4\u7684 clusters(\u7c07). \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5fc5\u987b\u4e8b\u524d\u8bbe\u5b9a K \u7684\u503c(\u5373\u77e5\u9053\u5f85\u5206\u7c7b\u6837\u672c\u4e2d\u7c07\u7684\u6570\u91cf). import matplotlib.pyplot as plt import sklearn.cluster import sklearn.datasets n_samples = 1500 random_state = 170 # \u968f\u673a\u751f\u6210 3 \u4e2a\u9ad8\u65af\u5206\u5e03\u7684\u7c07 x, y = sklearn.datasets.make_blobs(n_samples=n_samples, random_state=random_state) y_pred = sklearn.cluster.KMeans(n_clusters=3).fit_predict(x) plt.scatter(x[:, 0], x[:, 1], c=y_pred) plt.show()","title":"sklearn-\u805a\u7c7b"},{"location":"content/daze/sklearn/cluster/#_1","text":"sklearn \u5b98\u65b9\u7ed9\u51fa\u4e86\u4e00\u4efd\u5404\u79cd\u805a\u7c7b\u6a21\u578b\u9002\u7528\u573a\u666f\u548c\u8c03\u53c2\u5efa\u8bae, \u6458\u5f55\u5982\u4e0b: http://sklearn.apachecn.org/cn/0.19.0/modules/clustering.html#id2 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a k-means \u805a\u7c7b\u7684\u4f7f\u7528\u4f8b\u5b50: k-means \u7b97\u6cd5\u5c06\u4e00\u7ec4 N \u6837\u672c X \u5212\u5206\u6210 K \u4e0d\u76f8\u4ea4\u7684 clusters(\u7c07). \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5fc5\u987b\u4e8b\u524d\u8bbe\u5b9a K \u7684\u503c(\u5373\u77e5\u9053\u5f85\u5206\u7c7b\u6837\u672c\u4e2d\u7c07\u7684\u6570\u91cf). import matplotlib.pyplot as plt import sklearn.cluster import sklearn.datasets n_samples = 1500 random_state = 170 # \u968f\u673a\u751f\u6210 3 \u4e2a\u9ad8\u65af\u5206\u5e03\u7684\u7c07 x, y = sklearn.datasets.make_blobs(n_samples=n_samples, random_state=random_state) y_pred = sklearn.cluster.KMeans(n_clusters=3).fit_predict(x) plt.scatter(x[:, 0], x[:, 1], c=y_pred) plt.show()","title":"\u805a\u7c7b"},{"location":"content/daze/sklearn/evaluation/","text":"\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6 \u5b66\u4e60\u9884\u6d4b\u51fd\u6570\u7684\u53c2\u6570, \u5e76\u5728\u76f8\u540c\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u662f\u4e00\u79cd\u9519\u8bef\u7684\u505a\u6cd5: \u4e00\u4e2a\u4ec5\u7ed9\u51fa\u6d4b\u8bd5\u7528\u4f8b\u6807\u7b7e\u7684\u6a21\u578b\u5c06\u4f1a\u83b7\u5f97\u6781\u9ad8\u7684\u5206\u6570, \u4f46\u5bf9\u4e8e\u5c1a\u672a\u51fa\u73b0\u8fc7\u7684\u6570\u636e\u5b83\u5219\u65e0\u6cd5\u9884\u6d4b\u51fa\u4efb\u4f55\u6709\u7528\u7684\u4fe1\u606f. \u8fd9\u79cd\u60c5\u51b5\u79f0\u4e3a overfitting(\u8fc7\u62df\u5408). \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5, \u5728\u8fdb\u884c(\u76d1\u7763)\u673a\u5668\u5b66\u4e60\u5b9e\u9a8c\u65f6, \u901a\u5e38\u53d6\u51fa\u90e8\u5206\u53ef\u5229\u7528\u6570\u636e\u4f5c\u4e3a test set(\u6d4b\u8bd5\u6570\u636e\u96c6). \u5229\u7528 scikit-learn \u5305\u4e2d\u7684 train_test_split \u8f85\u52a9\u51fd\u6570\u53ef\u4ee5\u5f88\u5feb\u5730\u5c06\u5b9e\u9a8c\u6570\u636e\u96c6\u5212\u5206\u4e3a\u4efb\u4f55\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6. import sklearn.model_selection import sklearn.datasets iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.4, random_state=0) print(x_train.shape, y_train.shape, x_test.shape, y_test.shape) # (90, 4) (90,) (60, 4) (60,) \u4ea4\u53c9\u9a8c\u8bc1 \u5c06\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u673a, \u5927\u5927\u51cf\u5c11\u4e86\u53ef\u7528\u4e8e\u8bad\u7ec3\u7684\u6570\u636e\u91cf\u7684\u5927\u5c0f. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u89e3\u51b3. \u4ea4\u53c9\u9a8c\u8bc1\u5c06\u6570\u636e\u96c6\u5212\u5206\u4e3a k \u4e2a\u5b50\u96c6, \u7136\u540e\u4f7f\u7528 k-1 \u4e2a\u5b50\u96c6\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3, \u5269\u4e0b\u4e00\u4e2a\u7528\u4e8e\u6a21\u578b\u9a8c\u8bc1, \u5e76\u91cd\u590d k \u6b21. \u4ea4\u53c9\u9a8c\u8bc1\u5f97\u51fa\u7684\u6027\u80fd\u6307\u6807\u662f\u5faa\u73af\u8ba1\u7b97\u4e2d\u6bcf\u4e2a\u503c\u7684\u5e73\u5747\u503c. \u8be5\u65b9\u6cd5\u867d\u7136\u8ba1\u7b97\u4ee3\u4ef7\u5f88\u9ad8, \u4f46\u662f\u5b83\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a\u7684\u6570\u636e, \u5728\u5904\u7406\u6837\u672c\u6570\u636e\u96c6\u8f83\u5c11\u7684\u95ee\u9898(\u4f8b\u5982, \u9006\u5411\u63a8\u7406)\u65f6\u6bd4\u8f83\u6709\u4f18\u52bf. \u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728\u4f30\u8ba1\u5668\u548c\u6570\u636e\u96c6\u4e0a\u8c03\u7528 cross_val_score \u8f85\u52a9\u51fd\u6570. import sklearn.datasets import sklearn.model_selection import sklearn.svm iris = sklearn.datasets.load_iris() clf = sklearn.svm.SVC(kernel='linear', C=1) scores = sklearn.model_selection.cross_val_score(clf, iris.data, iris.target, cv=5) print('Accuracy: %0.2f (+/- %0.2f)' % (scores.mean(), scores.std() * 2)) # Accuracy: 0.98 (+/- 0.03) \u4ea4\u53c9\u9a8c\u8bc1\u7684\u4e3b\u8981\u4f5c\u7528\u5982\u4e0b: \u7528\u4e8e\u6a21\u578b\u9009\u62e9. \u5982\u8bc4\u4f30 kNN, SVM \u5728\u540c\u4e00\u6570\u636e\u96c6\u4e0b\u7684\u8868\u73b0. \u7528\u4e8e\u6a21\u578b\u8c03\u53c2. \u7528\u4e8e\u7279\u5f81\u9009\u62e9. \u5982\u8bc4\u4f30\u5e94\u4f7f\u7528\u6570\u636e\u96c6\u4e2d\u7684\u54ea\u4e9b\u7279\u5f81\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3. \u8d85\u53c2\u6570\u4e0e\u7f51\u683c\u641c\u7d22 \u8d85\u53c2\u6570, \u5373\u4e0d\u76f4\u63a5\u5728\u4f30\u8ba1\u5668\u5185\u5b66\u4e60\u7684\u53c2\u6570. \u5728 scikit-learn \u5305\u4e2d, \u5b83\u4eec\u4f5c\u4e3a\u4f30\u8ba1\u5668\u7c7b\u4e2d\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4f20\u9012. \u5178\u578b\u7684\u4f8b\u5b50\u6709: \u7528\u4e8e\u652f\u6301\u5411\u91cf\u5206\u7c7b\u5668\u7684 C, kernel \u548c gamma, \u7528\u4e8e Lasso \u7684 alpha \u7b49. sklearn.model_selection.GridSearchCV \u7f51\u683c\u641c\u7d22\u901a\u8fc7\u7a77\u5c3d\u6240\u7ed9\u51fa\u7684\u6240\u6709\u8d85\u53c2\u6570\u5019\u9009\u7684\u6392\u5217\u7ec4\u5408, \u81ea\u52a8\u9009\u62e9\u6700\u4f18\u53c2\u6570\u7ec4\u5408. \u7f51\u683c\u6cd5\u662f\u76ee\u524d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u53c2\u6570\u4f18\u5316\u65b9\u6cd5. import sklearn.datasets import sklearn.model_selection import sklearn.svm iris = sklearn.datasets.load_iris() # kernal \u53c2\u6570\u4ece ['linear', 'rbf'] \u9009\u62e9, C \u53c2\u6570\u4ece [1, 10] \u9009\u62e9, # \u56e0\u6b64\u603b\u8ba1 4 \u7ec4\u5019\u9009\u53c2\u6570 parameters = {'kernel': ('linear', 'rbf'), 'C': [1, 10]} svc = sklearn.svm.SVC() clf = sklearn.model_selection.GridSearchCV(svc, parameters) clf.fit(iris.data, iris.target) print(clf.best_params_) # \u6253\u5370\u6700\u4f18\u53c2\u6570 # {'C': 1, 'kernel': 'linear'} \u6a21\u578b\u8bc4\u4f30 \u901a\u5e38\u60c5\u51b5\u4e0b, \u4f7f\u7528\u4ee5\u4e0b\u6307\u6807\u8bc4\u4f30\u8bad\u7ec3\u540e\u7684\u6a21\u578b. \u5206\u7c7b\u6307\u6807: http://sklearn.apachecn.org/cn/0.19.0/modules/model_evaluation.html#classification-metrics","title":"sklearn-\u8bc4\u4f30"},{"location":"content/daze/sklearn/evaluation/#_1","text":"\u5b66\u4e60\u9884\u6d4b\u51fd\u6570\u7684\u53c2\u6570, \u5e76\u5728\u76f8\u540c\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u662f\u4e00\u79cd\u9519\u8bef\u7684\u505a\u6cd5: \u4e00\u4e2a\u4ec5\u7ed9\u51fa\u6d4b\u8bd5\u7528\u4f8b\u6807\u7b7e\u7684\u6a21\u578b\u5c06\u4f1a\u83b7\u5f97\u6781\u9ad8\u7684\u5206\u6570, \u4f46\u5bf9\u4e8e\u5c1a\u672a\u51fa\u73b0\u8fc7\u7684\u6570\u636e\u5b83\u5219\u65e0\u6cd5\u9884\u6d4b\u51fa\u4efb\u4f55\u6709\u7528\u7684\u4fe1\u606f. \u8fd9\u79cd\u60c5\u51b5\u79f0\u4e3a overfitting(\u8fc7\u62df\u5408). \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5, \u5728\u8fdb\u884c(\u76d1\u7763)\u673a\u5668\u5b66\u4e60\u5b9e\u9a8c\u65f6, \u901a\u5e38\u53d6\u51fa\u90e8\u5206\u53ef\u5229\u7528\u6570\u636e\u4f5c\u4e3a test set(\u6d4b\u8bd5\u6570\u636e\u96c6). \u5229\u7528 scikit-learn \u5305\u4e2d\u7684 train_test_split \u8f85\u52a9\u51fd\u6570\u53ef\u4ee5\u5f88\u5feb\u5730\u5c06\u5b9e\u9a8c\u6570\u636e\u96c6\u5212\u5206\u4e3a\u4efb\u4f55\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6. import sklearn.model_selection import sklearn.datasets iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.4, random_state=0) print(x_train.shape, y_train.shape, x_test.shape, y_test.shape) # (90, 4) (90,) (60, 4) (60,)","title":"\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6"},{"location":"content/daze/sklearn/evaluation/#_2","text":"\u5c06\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u673a, \u5927\u5927\u51cf\u5c11\u4e86\u53ef\u7528\u4e8e\u8bad\u7ec3\u7684\u6570\u636e\u91cf\u7684\u5927\u5c0f. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u89e3\u51b3. \u4ea4\u53c9\u9a8c\u8bc1\u5c06\u6570\u636e\u96c6\u5212\u5206\u4e3a k \u4e2a\u5b50\u96c6, \u7136\u540e\u4f7f\u7528 k-1 \u4e2a\u5b50\u96c6\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3, \u5269\u4e0b\u4e00\u4e2a\u7528\u4e8e\u6a21\u578b\u9a8c\u8bc1, \u5e76\u91cd\u590d k \u6b21. \u4ea4\u53c9\u9a8c\u8bc1\u5f97\u51fa\u7684\u6027\u80fd\u6307\u6807\u662f\u5faa\u73af\u8ba1\u7b97\u4e2d\u6bcf\u4e2a\u503c\u7684\u5e73\u5747\u503c. \u8be5\u65b9\u6cd5\u867d\u7136\u8ba1\u7b97\u4ee3\u4ef7\u5f88\u9ad8, \u4f46\u662f\u5b83\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a\u7684\u6570\u636e, \u5728\u5904\u7406\u6837\u672c\u6570\u636e\u96c6\u8f83\u5c11\u7684\u95ee\u9898(\u4f8b\u5982, \u9006\u5411\u63a8\u7406)\u65f6\u6bd4\u8f83\u6709\u4f18\u52bf. \u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728\u4f30\u8ba1\u5668\u548c\u6570\u636e\u96c6\u4e0a\u8c03\u7528 cross_val_score \u8f85\u52a9\u51fd\u6570. import sklearn.datasets import sklearn.model_selection import sklearn.svm iris = sklearn.datasets.load_iris() clf = sklearn.svm.SVC(kernel='linear', C=1) scores = sklearn.model_selection.cross_val_score(clf, iris.data, iris.target, cv=5) print('Accuracy: %0.2f (+/- %0.2f)' % (scores.mean(), scores.std() * 2)) # Accuracy: 0.98 (+/- 0.03) \u4ea4\u53c9\u9a8c\u8bc1\u7684\u4e3b\u8981\u4f5c\u7528\u5982\u4e0b: \u7528\u4e8e\u6a21\u578b\u9009\u62e9. \u5982\u8bc4\u4f30 kNN, SVM \u5728\u540c\u4e00\u6570\u636e\u96c6\u4e0b\u7684\u8868\u73b0. \u7528\u4e8e\u6a21\u578b\u8c03\u53c2. \u7528\u4e8e\u7279\u5f81\u9009\u62e9. \u5982\u8bc4\u4f30\u5e94\u4f7f\u7528\u6570\u636e\u96c6\u4e2d\u7684\u54ea\u4e9b\u7279\u5f81\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3.","title":"\u4ea4\u53c9\u9a8c\u8bc1"},{"location":"content/daze/sklearn/evaluation/#_3","text":"\u8d85\u53c2\u6570, \u5373\u4e0d\u76f4\u63a5\u5728\u4f30\u8ba1\u5668\u5185\u5b66\u4e60\u7684\u53c2\u6570. \u5728 scikit-learn \u5305\u4e2d, \u5b83\u4eec\u4f5c\u4e3a\u4f30\u8ba1\u5668\u7c7b\u4e2d\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4f20\u9012. \u5178\u578b\u7684\u4f8b\u5b50\u6709: \u7528\u4e8e\u652f\u6301\u5411\u91cf\u5206\u7c7b\u5668\u7684 C, kernel \u548c gamma, \u7528\u4e8e Lasso \u7684 alpha \u7b49. sklearn.model_selection.GridSearchCV \u7f51\u683c\u641c\u7d22\u901a\u8fc7\u7a77\u5c3d\u6240\u7ed9\u51fa\u7684\u6240\u6709\u8d85\u53c2\u6570\u5019\u9009\u7684\u6392\u5217\u7ec4\u5408, \u81ea\u52a8\u9009\u62e9\u6700\u4f18\u53c2\u6570\u7ec4\u5408. \u7f51\u683c\u6cd5\u662f\u76ee\u524d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u53c2\u6570\u4f18\u5316\u65b9\u6cd5. import sklearn.datasets import sklearn.model_selection import sklearn.svm iris = sklearn.datasets.load_iris() # kernal \u53c2\u6570\u4ece ['linear', 'rbf'] \u9009\u62e9, C \u53c2\u6570\u4ece [1, 10] \u9009\u62e9, # \u56e0\u6b64\u603b\u8ba1 4 \u7ec4\u5019\u9009\u53c2\u6570 parameters = {'kernel': ('linear', 'rbf'), 'C': [1, 10]} svc = sklearn.svm.SVC() clf = sklearn.model_selection.GridSearchCV(svc, parameters) clf.fit(iris.data, iris.target) print(clf.best_params_) # \u6253\u5370\u6700\u4f18\u53c2\u6570 # {'C': 1, 'kernel': 'linear'}","title":"\u8d85\u53c2\u6570\u4e0e\u7f51\u683c\u641c\u7d22"},{"location":"content/daze/sklearn/evaluation/#_4","text":"\u901a\u5e38\u60c5\u51b5\u4e0b, \u4f7f\u7528\u4ee5\u4e0b\u6307\u6807\u8bc4\u4f30\u8bad\u7ec3\u540e\u7684\u6a21\u578b. \u5206\u7c7b\u6307\u6807: http://sklearn.apachecn.org/cn/0.19.0/modules/model_evaluation.html#classification-metrics","title":"\u6a21\u578b\u8bc4\u4f30"},{"location":"content/daze/sklearn/knn/","text":"kNN \u7b97\u6cd5 k \u8fd1\u90bb\u6cd5 (k-Nearest Neighbor, kNN) \u662f\u673a\u5668\u5b66\u4e60\u6240\u6709\u7b97\u6cd5\u4e2d\u7406\u8bba\u6700\u7b80\u5355, \u6700\u597d\u7406\u89e3\u7684\u7b97\u6cd5. \u5b83\u662f\u4e00\u79cd\u57fa\u672c\u7684\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5, \u5b83\u7684\u8f93\u5165\u4e3a\u5b9e\u4f8b\u7684\u7279\u5f81\u5411\u91cf, \u901a\u8fc7\u8ba1\u7b97\u65b0\u6570\u636e\u4e0e\u8bad\u7ec3\u6570\u636e\u7279\u5f81\u503c\u4e4b\u95f4\u7684\u8ddd\u79bb, \u7136\u540e\u9009\u53d6 k(k>=1) \u4e2a\u8ddd\u79bb\u6700\u8fd1\u7684\u90bb\u5c45\u8fdb\u884c\u5206\u7c7b\u5224\u65ad(\u6295\u7968\u6cd5)\u6216\u8005\u56de\u5f52. \u5982\u679c k=1, \u90a3\u4e48\u65b0\u6570\u636e\u88ab\u7b80\u5355\u5730\u5206\u914d\u7ed9\u5176\u8fd1\u90bb\u7684\u7c7b. \u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898: \u8f93\u51fa\u4e3a\u5b9e\u4f8b\u7684\u7c7b\u522b. \u5206\u7c7b\u65f6, \u5bf9\u4e8e\u65b0\u7684\u5b9e\u4f8b, \u6839\u636e\u5176 k \u4e2a\u6700\u8fd1\u90bb\u7684\u8bad\u7ec3\u5b9e\u4f8b\u7684\u7c7b\u522b, \u901a\u8fc7\u591a\u6570\u8868\u51b3\u7b49\u65b9\u5f0f\u8fdb\u884c\u9884\u6d4b. \u5bf9\u4e8e\u56de\u5f52\u95ee\u9898: \u8f93\u51fa\u4e3a\u5b9e\u4f8b\u7684\u503c. \u56de\u5f52\u65f6, \u5bf9\u4e8e\u65b0\u7684\u5b9e\u4f8b, \u53d6\u5176 k \u4e2a\u6700\u8fd1\u90bb\u7684\u8bad\u7ec3\u5b9e\u4f8b\u7684\u5e73\u5747\u503c\u4e3a\u9884\u6d4b\u503c. k \u8fd1\u90bb\u6cd5\u5206\u7c7b\u7684\u76f4\u89c2\u7406\u89e3: \u7ed9\u5b9a\u4e00\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6, \u5bf9\u4e8e\u65b0\u7684\u8f93\u4eba\u5b9e\u4f8b, \u5728\u8bad\u7ec3\u96c6\u4e2d\u627e\u5230\u4e0e\u8be5\u5b9e\u4f8b\u6700\u90bb\u8fd1\u7684 k \u4e2a\u5b9e\u4f8b. \u8fd9 k \u4e2a\u5b9e\u4f8b\u7684\u591a\u6570\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\u522b, \u5219\u8be5\u8f93\u4eba\u5b9e\u4f8b\u5c31\u5212\u5206\u4e3a\u8fd9\u4e2a\u7c7b\u522b. k \u8fd1\u90bb\u6cd5\u4e0d\u5177\u6709\u663e\u5f0f\u7684\u5b66\u4e60\u8fc7\u7a0b, \u5b83\u662f\u76f4\u63a5\u9884\u6d4b. \u5b9e\u9645\u4e0a\u5b83\u662f\u5229\u7528\u8bad\u7ec3\u6570\u636e\u96c6\u5bf9\u7279\u5f81\u5411\u91cf\u7a7a\u95f4\u8fdb\u884c\u5212\u5206, \u5e76\u4e14\u4f5c\u4e3a\u5176\u5206\u7c7b\u7684\"\u6a21\u578b\". k \u8fd1\u90bb\u7b97\u6cd5\u4f8b\u5b50. \u6d4b\u8bd5\u6837\u672c(\u7eff\u8272\u5706\u5f62)\u5e94\u5f52\u5165\u8981\u4e48\u662f\u7b2c\u4e00\u7c7b\u7684\u84dd\u8272\u65b9\u5f62\u6216\u662f\u7b2c\u4e8c\u7c7b\u7684\u7ea2\u8272\u4e09\u89d2\u5f62. \u5982\u679c k=3(\u5b9e\u7ebf\u5706\u5708) \u5b83\u88ab\u5206\u914d\u7ed9\u7b2c\u4e8c\u7c7b, \u56e0\u4e3a\u6709 2 \u4e2a\u4e09\u89d2\u5f62\u548c\u53ea\u6709 1 \u4e2a\u6b63\u65b9\u5f62\u5728\u5185\u4fa7\u5706\u5708\u4e4b\u5185. \u5982\u679c k=5(\u865a\u7ebf\u5706\u5708) \u5b83\u88ab\u5206\u914d\u5230\u7b2c\u4e00\u7c7b(3 \u4e2a\u6b63\u65b9\u5f62\u4e0e 2 \u4e2a\u4e09\u89d2\u5f62\u5728\u5916\u4fa7\u5706\u5708\u4e4b\u5185). \u8ddd\u79bb\u5ea6\u91cf kNN \u7b97\u6cd5\u8981\u6c42\u6570\u636e\u7684\u6240\u6709\u7279\u5f81\u90fd\u53ef\u4ee5\u505a\u53ef\u6bd4\u8f83\u7684\u91cf\u5316. \u4e3a\u4e86\u516c\u5e73, \u6837\u672c\u53c2\u6570\u5fc5\u987b\u505a\u4e00\u4e9b\u5f52\u4e00\u5316\u5904\u7406. \u7279\u5f81\u7a7a\u95f4\u4e2d\u4e24\u4e2a\u5b9e\u4f8b\u70b9\u7684\u8ddd\u79bb\u662f\u4e24\u4e2a\u5b9e\u4f8b\u70b9\u76f8\u4f3c\u5ea6\u7684\u53cd\u6620. \u4e00\u822c\u53d6\u6b27\u5f0f\u8ddd\u79bb. np \u4e2d\u4f7f\u7528 np.linalg.norm(x1 - x2) \u8ba1\u7b97\u6b27\u5f0f\u8ddd\u79bb. \u5206\u7c7b \u5b9e\u73b0\u4e00\u4e2a k=3 \u7684\u624b\u5199\u6570\u5b57\u5206\u7c7b\u5668, \u6700\u540e\u7684\u6d4b\u8bd5\u7cbe\u5ea6\u8fbe\u5230 97%. import numpy as np import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.neighbors digits = sklearn.datasets.load_digits() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( digits.data, digits.target, test_size=0.25, random_state=0, stratify=digits.target) print('x_train.shape', x_train.shape) print('y_train.shape', y_train.shape) def classify(x_train, y_train, k, x): sources = np.empty(y_train.shape) for i, e in enumerate(x_train): d = np.linalg.norm(e - x) # \u6b27\u5f0f\u8ddd\u79bb sources[i] = d indices = np.argsort(sources)[:k] knn = {} for i in indices: l = y_train[i] if l in knn: knn[l] += 1 else: knn[l] = 1 return max(knn) y_pred = np.empty(y_test.shape) for i, e in enumerate(x_test): y_pred[i] = classify(x_train, y_train, 3, e) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 45 1 0.98 0.96 0.97 46 2 0.98 0.98 0.98 44 3 0.93 0.93 0.93 46 4 1.00 0.96 0.98 45 5 0.98 0.98 0.98 46 6 0.98 1.00 0.99 45 7 1.00 1.00 1.00 45 8 0.95 0.91 0.93 43 9 0.88 0.96 0.91 45 avg / total 0.97 0.97 0.97 450 \u539f\u59cb kNN \u5b9e\u73b0\u7684\u641c\u7d22\u65b9\u5f0f\u7b80\u5355\u7c97\u66b4: \u7ebf\u6027\u626b\u63cf. \u901a\u8fc7\u8ba1\u7b97\u8f93\u5165\u6837\u672c\u4e0e\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u8ddd\u79bb, \u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684 k \u4e2a\u70b9. \u5f53\u8bad\u7ec3\u6570\u636e\u8f83\u5927\u65f6, \u975e\u5e38\u8017\u8d39\u65f6\u95f4. sklean \u4e2d\u5b9e\u73b0\u4e86\u4e09\u79cd\u641c\u7d22\u65b9\u5f0f, \u5206\u522b\u662f BallTree , KDTree , brute-force . KDTree \u662f\u4e00\u9897\u4e8c\u53c9\u6811, BallTree \u662f KDTree \u7684\u4f18\u5316\u7248\u672c, \u800c brute-force \u5c31\u662f\u539f\u59cb\u7684\u66b4\u529b\u7ebf\u6027\u626b\u63cf. \u8fd9\u91cc\u8981\u7740\u91cd\u8bf4\u660e\u7684\u662f, KDTree \u4e0e BallTree \u867d\u7136\u4f18\u5316\u4e86\u641c\u7d22\u901f\u5ea6, \u4f46\u727a\u7272\u4e86\u7cbe\u786e\u5ea6. \u56e0\u6b64\u5bf9\u4e8e\u5c0f\u6570\u636e\u96c6(\u5982 n < 30), \u4f7f\u7528 brute-force \u4ecd\u7136\u662f\u4e00\u4e2a\u6700\u4f73\u9009\u62e9. \u4f7f\u7528 sklearn \u63d0\u4f9b\u7684\u4ee3\u7801\u4f7f\u7528\u8fc7\u7a0b\u5982\u4e0b: import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.neighbors digits = sklearn.datasets.load_digits() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( digits.data, digits.target, test_size=0.25, random_state=0, stratify=digits.target) # \u53c2\u6570 algorithm \u53ef\u4ee5\u662f ['auto', 'ball_tree', 'kd_tree', 'brute'] \u5176\u4e2d\u7684\u4e00\u4e2a # \u6b64\u5904\u4f7f\u7528\u9ed8\u8ba4\u503c 'auto' # \u53c2\u6570 weights \u53ef\u4ee5\u662f ['uniform', 'distance'] \u5176\u4e2d\u7684\u4e00\u4e2a. # uniform \u4e3a\u6bcf\u4e2a\u8fd1\u90bb\u5206\u914d\u7edf\u4e00\u7684\u6743\u91cd, \u800c distance \u5206\u914d\u6743\u91cd\u4e0e\u67e5\u8be2\u70b9\u7684\u8ddd\u79bb\u6210\u53cd\u6bd4. # \u6b64\u5904\u4f7f\u7528\u9ed8\u8ba4\u503c 'uniform' nbrs = sklearn.neighbors.KNeighborsClassifier(n_neighbors=3) nbrs.fit(x_train, y_train) y_pred = nbrs.predict(x_test) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) \u56de\u5f52 import numpy as np import matplotlib.pyplot as plt import sklearn.neighbors plt.style.use('seaborn') np.random.seed(0) X = np.sort(5 * np.random.rand(40, 1), axis=0) T = np.linspace(0, 5, 500)[:, np.newaxis] y = np.sin(X).ravel() # Add noise to targets y[::5] += 1 * (0.5 - np.random.rand(8)) n_neighbors = 5 for i, weights in enumerate(['uniform', 'distance']): knn = sklearn.neighbors.KNeighborsRegressor(n_neighbors, weights=weights) y_ = knn.fit(X, y).predict(T) plt.subplot(2, 1, i + 1) plt.scatter(X, y, c='k', label='data') plt.plot(T, y_, c='g', label='prediction') plt.axis('tight') plt.legend() plt.title(\"KNeighborsRegressor (k = %i, weights = '%s')\" % (n_neighbors, weights)) plt.show() \u53c2\u8003 [1] wiki: \u6700\u8fd1\u90bb\u5c45\u6cd5 https://zh.wikipedia.org/wiki/%E6%9C%80%E8%BF%91%E9%84%B0%E5%B1%85%E6%B3%95 [2] \u534e\u6821\u4e13/\u738b\u6b63\u6797: Python\u5927\u6218\u673a\u5668\u5b66\u4e60.\u7b2c\u56db\u7ae0.k \u8fd1\u90bb\u6cd5 [3] sklearn: \u6700\u8fd1\u90bb http://sklearn.apachecn.org/cn/0.19.0/modules/neighbors.html","title":"sklearn-kNN"},{"location":"content/daze/sklearn/knn/#knn","text":"k \u8fd1\u90bb\u6cd5 (k-Nearest Neighbor, kNN) \u662f\u673a\u5668\u5b66\u4e60\u6240\u6709\u7b97\u6cd5\u4e2d\u7406\u8bba\u6700\u7b80\u5355, \u6700\u597d\u7406\u89e3\u7684\u7b97\u6cd5. \u5b83\u662f\u4e00\u79cd\u57fa\u672c\u7684\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5, \u5b83\u7684\u8f93\u5165\u4e3a\u5b9e\u4f8b\u7684\u7279\u5f81\u5411\u91cf, \u901a\u8fc7\u8ba1\u7b97\u65b0\u6570\u636e\u4e0e\u8bad\u7ec3\u6570\u636e\u7279\u5f81\u503c\u4e4b\u95f4\u7684\u8ddd\u79bb, \u7136\u540e\u9009\u53d6 k(k>=1) \u4e2a\u8ddd\u79bb\u6700\u8fd1\u7684\u90bb\u5c45\u8fdb\u884c\u5206\u7c7b\u5224\u65ad(\u6295\u7968\u6cd5)\u6216\u8005\u56de\u5f52. \u5982\u679c k=1, \u90a3\u4e48\u65b0\u6570\u636e\u88ab\u7b80\u5355\u5730\u5206\u914d\u7ed9\u5176\u8fd1\u90bb\u7684\u7c7b. \u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898: \u8f93\u51fa\u4e3a\u5b9e\u4f8b\u7684\u7c7b\u522b. \u5206\u7c7b\u65f6, \u5bf9\u4e8e\u65b0\u7684\u5b9e\u4f8b, \u6839\u636e\u5176 k \u4e2a\u6700\u8fd1\u90bb\u7684\u8bad\u7ec3\u5b9e\u4f8b\u7684\u7c7b\u522b, \u901a\u8fc7\u591a\u6570\u8868\u51b3\u7b49\u65b9\u5f0f\u8fdb\u884c\u9884\u6d4b. \u5bf9\u4e8e\u56de\u5f52\u95ee\u9898: \u8f93\u51fa\u4e3a\u5b9e\u4f8b\u7684\u503c. \u56de\u5f52\u65f6, \u5bf9\u4e8e\u65b0\u7684\u5b9e\u4f8b, \u53d6\u5176 k \u4e2a\u6700\u8fd1\u90bb\u7684\u8bad\u7ec3\u5b9e\u4f8b\u7684\u5e73\u5747\u503c\u4e3a\u9884\u6d4b\u503c. k \u8fd1\u90bb\u6cd5\u5206\u7c7b\u7684\u76f4\u89c2\u7406\u89e3: \u7ed9\u5b9a\u4e00\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6, \u5bf9\u4e8e\u65b0\u7684\u8f93\u4eba\u5b9e\u4f8b, \u5728\u8bad\u7ec3\u96c6\u4e2d\u627e\u5230\u4e0e\u8be5\u5b9e\u4f8b\u6700\u90bb\u8fd1\u7684 k \u4e2a\u5b9e\u4f8b. \u8fd9 k \u4e2a\u5b9e\u4f8b\u7684\u591a\u6570\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\u522b, \u5219\u8be5\u8f93\u4eba\u5b9e\u4f8b\u5c31\u5212\u5206\u4e3a\u8fd9\u4e2a\u7c7b\u522b. k \u8fd1\u90bb\u6cd5\u4e0d\u5177\u6709\u663e\u5f0f\u7684\u5b66\u4e60\u8fc7\u7a0b, \u5b83\u662f\u76f4\u63a5\u9884\u6d4b. \u5b9e\u9645\u4e0a\u5b83\u662f\u5229\u7528\u8bad\u7ec3\u6570\u636e\u96c6\u5bf9\u7279\u5f81\u5411\u91cf\u7a7a\u95f4\u8fdb\u884c\u5212\u5206, \u5e76\u4e14\u4f5c\u4e3a\u5176\u5206\u7c7b\u7684\"\u6a21\u578b\". k \u8fd1\u90bb\u7b97\u6cd5\u4f8b\u5b50. \u6d4b\u8bd5\u6837\u672c(\u7eff\u8272\u5706\u5f62)\u5e94\u5f52\u5165\u8981\u4e48\u662f\u7b2c\u4e00\u7c7b\u7684\u84dd\u8272\u65b9\u5f62\u6216\u662f\u7b2c\u4e8c\u7c7b\u7684\u7ea2\u8272\u4e09\u89d2\u5f62. \u5982\u679c k=3(\u5b9e\u7ebf\u5706\u5708) \u5b83\u88ab\u5206\u914d\u7ed9\u7b2c\u4e8c\u7c7b, \u56e0\u4e3a\u6709 2 \u4e2a\u4e09\u89d2\u5f62\u548c\u53ea\u6709 1 \u4e2a\u6b63\u65b9\u5f62\u5728\u5185\u4fa7\u5706\u5708\u4e4b\u5185. \u5982\u679c k=5(\u865a\u7ebf\u5706\u5708) \u5b83\u88ab\u5206\u914d\u5230\u7b2c\u4e00\u7c7b(3 \u4e2a\u6b63\u65b9\u5f62\u4e0e 2 \u4e2a\u4e09\u89d2\u5f62\u5728\u5916\u4fa7\u5706\u5708\u4e4b\u5185).","title":"kNN \u7b97\u6cd5"},{"location":"content/daze/sklearn/knn/#_1","text":"kNN \u7b97\u6cd5\u8981\u6c42\u6570\u636e\u7684\u6240\u6709\u7279\u5f81\u90fd\u53ef\u4ee5\u505a\u53ef\u6bd4\u8f83\u7684\u91cf\u5316. \u4e3a\u4e86\u516c\u5e73, \u6837\u672c\u53c2\u6570\u5fc5\u987b\u505a\u4e00\u4e9b\u5f52\u4e00\u5316\u5904\u7406. \u7279\u5f81\u7a7a\u95f4\u4e2d\u4e24\u4e2a\u5b9e\u4f8b\u70b9\u7684\u8ddd\u79bb\u662f\u4e24\u4e2a\u5b9e\u4f8b\u70b9\u76f8\u4f3c\u5ea6\u7684\u53cd\u6620. \u4e00\u822c\u53d6\u6b27\u5f0f\u8ddd\u79bb. np \u4e2d\u4f7f\u7528 np.linalg.norm(x1 - x2) \u8ba1\u7b97\u6b27\u5f0f\u8ddd\u79bb.","title":"\u8ddd\u79bb\u5ea6\u91cf"},{"location":"content/daze/sklearn/knn/#_2","text":"\u5b9e\u73b0\u4e00\u4e2a k=3 \u7684\u624b\u5199\u6570\u5b57\u5206\u7c7b\u5668, \u6700\u540e\u7684\u6d4b\u8bd5\u7cbe\u5ea6\u8fbe\u5230 97%. import numpy as np import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.neighbors digits = sklearn.datasets.load_digits() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( digits.data, digits.target, test_size=0.25, random_state=0, stratify=digits.target) print('x_train.shape', x_train.shape) print('y_train.shape', y_train.shape) def classify(x_train, y_train, k, x): sources = np.empty(y_train.shape) for i, e in enumerate(x_train): d = np.linalg.norm(e - x) # \u6b27\u5f0f\u8ddd\u79bb sources[i] = d indices = np.argsort(sources)[:k] knn = {} for i in indices: l = y_train[i] if l in knn: knn[l] += 1 else: knn[l] = 1 return max(knn) y_pred = np.empty(y_test.shape) for i, e in enumerate(x_test): y_pred[i] = classify(x_train, y_train, 3, e) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 45 1 0.98 0.96 0.97 46 2 0.98 0.98 0.98 44 3 0.93 0.93 0.93 46 4 1.00 0.96 0.98 45 5 0.98 0.98 0.98 46 6 0.98 1.00 0.99 45 7 1.00 1.00 1.00 45 8 0.95 0.91 0.93 43 9 0.88 0.96 0.91 45 avg / total 0.97 0.97 0.97 450 \u539f\u59cb kNN \u5b9e\u73b0\u7684\u641c\u7d22\u65b9\u5f0f\u7b80\u5355\u7c97\u66b4: \u7ebf\u6027\u626b\u63cf. \u901a\u8fc7\u8ba1\u7b97\u8f93\u5165\u6837\u672c\u4e0e\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u8ddd\u79bb, \u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684 k \u4e2a\u70b9. \u5f53\u8bad\u7ec3\u6570\u636e\u8f83\u5927\u65f6, \u975e\u5e38\u8017\u8d39\u65f6\u95f4. sklean \u4e2d\u5b9e\u73b0\u4e86\u4e09\u79cd\u641c\u7d22\u65b9\u5f0f, \u5206\u522b\u662f BallTree , KDTree , brute-force . KDTree \u662f\u4e00\u9897\u4e8c\u53c9\u6811, BallTree \u662f KDTree \u7684\u4f18\u5316\u7248\u672c, \u800c brute-force \u5c31\u662f\u539f\u59cb\u7684\u66b4\u529b\u7ebf\u6027\u626b\u63cf. \u8fd9\u91cc\u8981\u7740\u91cd\u8bf4\u660e\u7684\u662f, KDTree \u4e0e BallTree \u867d\u7136\u4f18\u5316\u4e86\u641c\u7d22\u901f\u5ea6, \u4f46\u727a\u7272\u4e86\u7cbe\u786e\u5ea6. \u56e0\u6b64\u5bf9\u4e8e\u5c0f\u6570\u636e\u96c6(\u5982 n < 30), \u4f7f\u7528 brute-force \u4ecd\u7136\u662f\u4e00\u4e2a\u6700\u4f73\u9009\u62e9. \u4f7f\u7528 sklearn \u63d0\u4f9b\u7684\u4ee3\u7801\u4f7f\u7528\u8fc7\u7a0b\u5982\u4e0b: import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.neighbors digits = sklearn.datasets.load_digits() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( digits.data, digits.target, test_size=0.25, random_state=0, stratify=digits.target) # \u53c2\u6570 algorithm \u53ef\u4ee5\u662f ['auto', 'ball_tree', 'kd_tree', 'brute'] \u5176\u4e2d\u7684\u4e00\u4e2a # \u6b64\u5904\u4f7f\u7528\u9ed8\u8ba4\u503c 'auto' # \u53c2\u6570 weights \u53ef\u4ee5\u662f ['uniform', 'distance'] \u5176\u4e2d\u7684\u4e00\u4e2a. # uniform \u4e3a\u6bcf\u4e2a\u8fd1\u90bb\u5206\u914d\u7edf\u4e00\u7684\u6743\u91cd, \u800c distance \u5206\u914d\u6743\u91cd\u4e0e\u67e5\u8be2\u70b9\u7684\u8ddd\u79bb\u6210\u53cd\u6bd4. # \u6b64\u5904\u4f7f\u7528\u9ed8\u8ba4\u503c 'uniform' nbrs = sklearn.neighbors.KNeighborsClassifier(n_neighbors=3) nbrs.fit(x_train, y_train) y_pred = nbrs.predict(x_test) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc)","title":"\u5206\u7c7b"},{"location":"content/daze/sklearn/knn/#_3","text":"import numpy as np import matplotlib.pyplot as plt import sklearn.neighbors plt.style.use('seaborn') np.random.seed(0) X = np.sort(5 * np.random.rand(40, 1), axis=0) T = np.linspace(0, 5, 500)[:, np.newaxis] y = np.sin(X).ravel() # Add noise to targets y[::5] += 1 * (0.5 - np.random.rand(8)) n_neighbors = 5 for i, weights in enumerate(['uniform', 'distance']): knn = sklearn.neighbors.KNeighborsRegressor(n_neighbors, weights=weights) y_ = knn.fit(X, y).predict(T) plt.subplot(2, 1, i + 1) plt.scatter(X, y, c='k', label='data') plt.plot(T, y_, c='g', label='prediction') plt.axis('tight') plt.legend() plt.title(\"KNeighborsRegressor (k = %i, weights = '%s')\" % (n_neighbors, weights)) plt.show()","title":"\u56de\u5f52"},{"location":"content/daze/sklearn/knn/#_4","text":"[1] wiki: \u6700\u8fd1\u90bb\u5c45\u6cd5 https://zh.wikipedia.org/wiki/%E6%9C%80%E8%BF%91%E9%84%B0%E5%B1%85%E6%B3%95 [2] \u534e\u6821\u4e13/\u738b\u6b63\u6797: Python\u5927\u6218\u673a\u5668\u5b66\u4e60.\u7b2c\u56db\u7ae0.k \u8fd1\u90bb\u6cd5 [3] sklearn: \u6700\u8fd1\u90bb http://sklearn.apachecn.org/cn/0.19.0/modules/neighbors.html","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/manifold/","text":"\u6d41\u5f62\u5b66\u4e60 \u6d41\u5f62\u5b66\u4e60\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u964d\u7ef4\u65b9\u6cd5. \u5176\u7b97\u6cd5\u57fa\u4e8e\u7684\u601d\u60f3\u662f: \u8bb8\u591a\u6570\u636e\u96c6\u7684\u7ef4\u5ea6\u8fc7\u9ad8\u53ea\u662f\u7531\u4eba\u4e3a\u5bfc\u81f4\u7684. \u9ad8\u7ef4\u6570\u636e\u96c6\u4f1a\u975e\u5e38\u96be\u4ee5\u53ef\u89c6\u5316. \u867d\u7136\u53ef\u4ee5\u7ed8\u5236\u4e24\u7ef4\u6216\u4e09\u7ef4\u7684\u6570\u636e\u6765\u663e\u793a\u6570\u636e\u7684\u56fa\u6709\u7ed3\u6784, \u4f46\u4e0e\u4e4b\u7b49\u6548\u7684\u9ad8\u7ef4\u56fe\u4e0d\u592a\u76f4\u89c2. \u4e3a\u4e86\u5e2e\u52a9\u6570\u636e\u96c6\u7ed3\u6784\u7684\u53ef\u89c6\u5316, \u5fc5\u987b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u964d\u4f4e\u7ef4\u5ea6. \u901a\u8fc7\u5bf9\u6570\u636e\u7684\u968f\u673a\u6295\u5f71\u6765\u5b9e\u73b0\u964d\u7ef4\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5. \u867d\u7136\u8fd9\u6837\u505a\u80fd\u5b9e\u73b0\u6570\u636e\u7ed3\u6784\u4e00\u5b9a\u7a0b\u5ea6\u7684\u53ef\u89c6\u5316, \u4f46\u968f\u673a\u9009\u62e9\u6295\u5f71\u4ecd\u6709\u8bb8\u591a\u6709\u5f85\u6539\u8fdb\u4e4b\u5904. \u5728\u968f\u673a\u6295\u5f71\u4e2d, \u6570\u636e\u4e2d\u66f4\u6709\u8da3\u7684\u7ed3\u6784\u5f88\u53ef\u80fd\u4f1a\u4e22\u5931. \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898, \u4e00\u4e9b\u76d1\u7763\u548c\u65e0\u76d1\u7763\u7684\u7ebf\u6027\u964d\u7ef4\u6846\u67b6\u88ab\u8bbe\u8ba1\u51fa\u6765, \u5982\u4e3b\u6210\u5206\u5206\u6790(PCA), \u72ec\u7acb\u6210\u5206\u5206\u6790, \u7ebf\u6027\u5224\u522b\u5206\u6790\u7b49. \u8fd9\u4e9b\u7b97\u6cd5\u5b9a\u4e49\u4e86\u660e\u786e\u7684\u89c4\u5b9a\u6765\u9009\u62e9\u6570\u636e\u7684\"\u6709\u8da3\u7684\"\u7ebf\u6027\u6295\u5f71. \u5b83\u4eec\u867d\u7136\u5f3a\u5927, \u4f46\u662f\u4f1a\u7ecf\u5e38\u9519\u5931\u6570\u636e\u4e2d\u91cd\u8981\u7684\u975e\u7ebf\u6027\u7ed3\u6784. \u6d41\u5f62\u5b66\u4e60\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u5c06\u7ebf\u6027\u6846\u67b6(\u5982PCA)\u63a8\u5e7f\u4e3a\u5bf9\u6570\u636e\u4e2d\u975e\u7ebf\u6027\u7ed3\u6784\u654f\u611f\u7684\u5c1d\u8bd5. \u867d\u7136\u5b58\u5728\u76d1\u7763\u53d8\u91cf, \u4f46\u662f\u5178\u578b\u7684\u6d41\u5f62\u5b66\u4e60\u95ee\u9898\u662f\u65e0\u76d1\u7763\u7684: \u5b83\u4ece\u6570\u636e\u672c\u8eab\u5b66\u4e60\u6570\u636e\u7684\u9ad8\u7ef4\u7ed3\u6784, \u800c\u4e0d\u4f7f\u7528\u9884\u5b9a\u7684\u5206\u7c7b. \u901a\u8fc7\u6d41\u5f62\u5b66\u4e60\u6765\u5b9e\u73b0\u964d\u7ef4\u7684\u65b9\u6cd5\u6709\u5f88\u591a, \u5176\u57fa\u672c\u601d\u60f3\u4e5f\u7c7b\u4f3c: \u5047\u8bbe\u6570\u636e\u5728\u9ad8\u7ef4\u5177\u6709\u67d0\u79cd\u7ed3\u6784\u7279\u5f81, \u5e0c\u671b\u964d\u5230\u4f4e\u7ef4\u540e, \u4ecd\u80fd\u4fdd\u6301\u8be5\u7ed3\u6784 . \u6bd4\u8f83\u5e38\u89c1\u7684\u6709: \u5c40\u90e8\u6539\u7ebf\u5d4c\u5165. \u5047\u8bbe\u6570\u636e\u4e2d\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u7531\u5176\u8fd1\u90bb\u7684\u51e0\u4e2a\u70b9\u91cd\u6784\u51fa\u6765. \u964d\u5230\u4f4e\u7ef4, \u4f7f\u6837\u672c\u4ecd\u80fd\u4fdd\u6301\u539f\u6765\u7684\u91cd\u6784\u5173\u7cfb, \u4e14\u91cd\u6784\u7cfb\u6570\u4e5f\u4e00\u6837. \u62c9\u666e\u62c9\u65af\u7279\u5f81\u6620\u5c04. \u5c06\u6570\u636e\u6620\u5c04\u5230\u4f4e\u7ef4, \u4e14\u4fdd\u6301\u70b9\u4e4b\u95f4\u7684(\u76f8\u4f3c\u5ea6)\u8ddd\u79bb\u5173\u7cfb. \u5373\u5728\u539f\u7a7a\u95f4\u4e2d\u76f8\u8ddd\u8f83\u8fdc\u7684\u70b9, \u6295\u5f71\u5230\u4f4e\u7ef4\u7a7a\u95f4\u4e2d, \u5e0c\u671b\u5b83\u4eec\u4e4b\u95f4\u4ecd\u76f8\u8ddd\u8f83\u8fdc. \u53cd\u4e4b\u4ea6\u7136. \u5c40\u90e8\u4fdd\u6301\u6295\u5f71 \u7b49\u8ddd\u6620\u5c04 \u4ee3\u7801\u5b9e\u73b0 sklearn \u5b9e\u73b0\u4e86\u591a\u79cd\u6d41\u5f62\u5b66\u4e60, \u8fd9\u91cc\u4ee5\u624b\u5199\u6570\u5b57\u6570\u636e\u96c6\u4e3a\u4f8b, \u5c55\u793a\u6d41\u5f62\u5b66\u4e60\u7b97\u6cd5\u5728\u8be5\u6570\u636e\u96c6\u4e0b\u7684\u6548\u679c. import os import matplotlib.pyplot as plt import numpy as np import sklearn.datasets import sklearn.decomposition import sklearn.discriminant_analysis import sklearn.ensemble import sklearn.manifold import sklearn.random_projection savedir = '/tmp/manifold' if not os.path.exists(savedir): os.mkdir(savedir) digits = sklearn.datasets.load_digits(n_class=6) x = digits.data y = digits.target n_neighbors = 30 def plot_embedding(x, title): x_min, x_max = np.min(x, 0), np.max(x, 0) x = (x - x_min) / (x_max - x_min) plt.figure() c = ['red', 'blue', 'lime', 'black', 'yellow', 'purple'] for l in range(6): p = x[y == l] plt.scatter(p[:, 0], p[:, 1], s=25, c=c[l], alpha=0.5, label=str(l)) plt.legend(loc='lower right') plt.xticks([]) plt.yticks([]) plt.title(title) p = os.path.normpath(os.path.join(savedir, title.replace(' ', '_') + '.png')) print(f'Savefig to {p}') plt.savefig(p) n_img_per_row = 20 img = np.zeros((10 * n_img_per_row, 10 * n_img_per_row)) for i in range(n_img_per_row): ix = 10 * i + 1 for j in range(n_img_per_row): iy = 10 * j + 1 img[ix:ix + 8, iy:iy + 8] = x[i * n_img_per_row + j].reshape((8, 8)) plt.imshow(img, cmap=plt.cm.binary) plt.xticks([]) plt.yticks([]) plt.title('Selection from digits') plt.savefig(os.path.join(savedir, 'Selection_from_digits.png')) print('Computing random projection') rp = sklearn.random_projection.SparseRandomProjection(n_components=2, random_state=42) x_projected = rp.fit_transform(x) plot_embedding(x_projected, 'Random Projection') print('Computing PCA projection') x_pca = sklearn.decomposition.TruncatedSVD(n_components=2).fit_transform(x) plot_embedding(x_pca, 'Principal Components projection') print('Computing Linear Discriminant Analysis projection') x2 = x.copy() x2.flat[::x.shape[1] + 1] += 0.01 # Make X invertible x_lda = sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=2).fit_transform(x2, y) plot_embedding(x_lda, 'Linear Discriminant projection') print('Computing Isomap embedding') x_iso = sklearn.manifold.Isomap(n_neighbors, n_components=2).fit_transform(x) plot_embedding(x_iso, 'Isomap projection') print('Computing LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='standard') x_lle = clf.fit_transform(x) plot_embedding(x_lle, 'Locally Linear Embedding') print('Computing modified LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='modified') x_mlle = clf.fit_transform(x) plot_embedding(x_mlle, 'Modified Locally Linear Embedding') print('Computing Hessian LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='hessian') x_hlle = clf.fit_transform(x) plot_embedding(x_hlle, 'Hessian Locally Linear Embedding') print('Computing LTSA embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='ltsa') x_ltsa = clf.fit_transform(x) plot_embedding(x_ltsa, 'Local Tangent Space Alignment') print('Computing MDS embedding') clf = sklearn.manifold.MDS(n_components=2, n_init=1, max_iter=100) x_mds = clf.fit_transform(x) plot_embedding(x_mds, 'MDS embedding') print('Computing Totally Random Trees embedding') hasher = sklearn.ensemble.RandomTreesEmbedding(n_estimators=200, random_state=0, max_depth=5) x_transformed = hasher.fit_transform(x) pca = sklearn.decomposition.TruncatedSVD(n_components=2) x_reduced = pca.fit_transform(x_transformed) plot_embedding(x_reduced, 'Random forest embedding') print('Computing Spectral embedding') embedder = sklearn.manifold.SpectralEmbedding(n_components=2, random_state=0, eigen_solver='arpack') x_se = embedder.fit_transform(x) plot_embedding(x_se, 'Spectral embedding') print('Computing t-SNE embedding') tsne = sklearn.manifold.TSNE(n_components=2, init='pca', random_state=0) x_tsne = tsne.fit_transform(x) plot_embedding(x_tsne, 't-SNE embedding') \u5173\u4e8e\u7ef4\u5ea6 \u8bb8\u591a\u6570\u636e\u96c6\u7684\u7ef4\u5ea6\u8fc7\u9ad8\u53ea\u662f\u7531\u4eba\u4e3a\u5bfc\u81f4\u7684 . \u6bd4\u5982\u4e8c\u7ef4\u5e73\u9762\u4e0a\u6709\u4e00\u4e2a\u5706, \u4e3a\u4e86\u8868\u793a\u8fd9\u4e2a\u5706, \u6211\u4eec\u5f15\u5165\u4e86 x \u4e0e y \u4e24\u4e2a\u53d8\u91cf, \u56e0\u6b64\u8fd9\u4e2a\u5706\u7531\u4e00\u5806\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\u6784\u6210. \u663e\u7136\u5982\u679c\u7528\u4e8c\u7ef4\u5750\u6807\u6765\u8868\u793a, \u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u8ba9\u8fd9\u4e2a\u4e8c\u7ef4\u5750\u6807\u7cfb\u7684\u6240\u6709\u70b9\u90fd\u662f\u8fd9\u4e2a\u5706\u4e0a\u7684\u70b9. \u4e5f\u5c31\u662f\u8bf4, \u7528\u4e8c\u7ef4\u5750\u6807\u6765\u8868\u793a\u8fd9\u4e2a\u5706\u5176\u5b9e\u662f\u6709\u5197\u4f59\u7684. \u6211\u4eec\u5e0c\u671b, \u5982\u679c\u80fd\u5efa\u7acb\u67d0\u4e00\u79cd\u63cf\u8ff0\u65b9\u6cd5, \u8ba9\u8fd9\u4e2a\u63cf\u8ff0\u65b9\u6cd5\u6240\u786e\u5b9a\u7684\u6240\u6709\u70b9\u7684\u96c6\u5408\u90fd\u80fd\u5728\u5706\u4e0a, \u751a\u81f3\u80fd\u8fde\u7eed\u4e0d\u95f4\u65ad\u5730\u8868\u793a\u5706\u4e0a\u7684\u70b9. \u5bf9\u4e8e\u5706\u6765\u8bf4, \u90a3\u5c31\u662f\u4f7f\u7528\u7528\u6781\u5750\u6807\u8868\u793a, \u5728\u6781\u5750\u6807\u7684\u8868\u793a\u65b9\u6cd5\u4e0b, \u5706\u5fc3\u5728\u539f\u70b9\u7684\u5706, \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u5c31\u80fd\u786e\u5b9a: \u534a\u5f84. \u5f53\u4f60\u8fde\u7eed\u6539\u53d8\u534a\u5f84\u7684\u5927\u5c0f, \u5c31\u80fd\u4ea7\u751f\u8fde\u7eed\u4e0d\u65ad\u7684\"\u80fd\u88ab\u8f6c\u6362\u6210\u4e8c\u7ef4\u5750\u6807\u8868\u793a\"\u7684\u5706. \u6240\u4ee5\u8bf4, \u5b9e\u9645\u4e0a \u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5706\u5c31\u662f\u4e00\u4e2a\u4e00\u7ef4\u6d41\u5f62 . \u53c2\u8003 [1] sklearn: \u6d41\u5f62\u5b66\u4e60 http://sklearn.apachecn.org/cn/0.19.0/modules/manifold.html","title":"sklearn-\u6d41\u5f62\u5b66\u4e60"},{"location":"content/daze/sklearn/manifold/#_1","text":"\u6d41\u5f62\u5b66\u4e60\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u964d\u7ef4\u65b9\u6cd5. \u5176\u7b97\u6cd5\u57fa\u4e8e\u7684\u601d\u60f3\u662f: \u8bb8\u591a\u6570\u636e\u96c6\u7684\u7ef4\u5ea6\u8fc7\u9ad8\u53ea\u662f\u7531\u4eba\u4e3a\u5bfc\u81f4\u7684. \u9ad8\u7ef4\u6570\u636e\u96c6\u4f1a\u975e\u5e38\u96be\u4ee5\u53ef\u89c6\u5316. \u867d\u7136\u53ef\u4ee5\u7ed8\u5236\u4e24\u7ef4\u6216\u4e09\u7ef4\u7684\u6570\u636e\u6765\u663e\u793a\u6570\u636e\u7684\u56fa\u6709\u7ed3\u6784, \u4f46\u4e0e\u4e4b\u7b49\u6548\u7684\u9ad8\u7ef4\u56fe\u4e0d\u592a\u76f4\u89c2. \u4e3a\u4e86\u5e2e\u52a9\u6570\u636e\u96c6\u7ed3\u6784\u7684\u53ef\u89c6\u5316, \u5fc5\u987b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u964d\u4f4e\u7ef4\u5ea6. \u901a\u8fc7\u5bf9\u6570\u636e\u7684\u968f\u673a\u6295\u5f71\u6765\u5b9e\u73b0\u964d\u7ef4\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5. \u867d\u7136\u8fd9\u6837\u505a\u80fd\u5b9e\u73b0\u6570\u636e\u7ed3\u6784\u4e00\u5b9a\u7a0b\u5ea6\u7684\u53ef\u89c6\u5316, \u4f46\u968f\u673a\u9009\u62e9\u6295\u5f71\u4ecd\u6709\u8bb8\u591a\u6709\u5f85\u6539\u8fdb\u4e4b\u5904. \u5728\u968f\u673a\u6295\u5f71\u4e2d, \u6570\u636e\u4e2d\u66f4\u6709\u8da3\u7684\u7ed3\u6784\u5f88\u53ef\u80fd\u4f1a\u4e22\u5931. \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898, \u4e00\u4e9b\u76d1\u7763\u548c\u65e0\u76d1\u7763\u7684\u7ebf\u6027\u964d\u7ef4\u6846\u67b6\u88ab\u8bbe\u8ba1\u51fa\u6765, \u5982\u4e3b\u6210\u5206\u5206\u6790(PCA), \u72ec\u7acb\u6210\u5206\u5206\u6790, \u7ebf\u6027\u5224\u522b\u5206\u6790\u7b49. \u8fd9\u4e9b\u7b97\u6cd5\u5b9a\u4e49\u4e86\u660e\u786e\u7684\u89c4\u5b9a\u6765\u9009\u62e9\u6570\u636e\u7684\"\u6709\u8da3\u7684\"\u7ebf\u6027\u6295\u5f71. \u5b83\u4eec\u867d\u7136\u5f3a\u5927, \u4f46\u662f\u4f1a\u7ecf\u5e38\u9519\u5931\u6570\u636e\u4e2d\u91cd\u8981\u7684\u975e\u7ebf\u6027\u7ed3\u6784. \u6d41\u5f62\u5b66\u4e60\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u5c06\u7ebf\u6027\u6846\u67b6(\u5982PCA)\u63a8\u5e7f\u4e3a\u5bf9\u6570\u636e\u4e2d\u975e\u7ebf\u6027\u7ed3\u6784\u654f\u611f\u7684\u5c1d\u8bd5. \u867d\u7136\u5b58\u5728\u76d1\u7763\u53d8\u91cf, \u4f46\u662f\u5178\u578b\u7684\u6d41\u5f62\u5b66\u4e60\u95ee\u9898\u662f\u65e0\u76d1\u7763\u7684: \u5b83\u4ece\u6570\u636e\u672c\u8eab\u5b66\u4e60\u6570\u636e\u7684\u9ad8\u7ef4\u7ed3\u6784, \u800c\u4e0d\u4f7f\u7528\u9884\u5b9a\u7684\u5206\u7c7b. \u901a\u8fc7\u6d41\u5f62\u5b66\u4e60\u6765\u5b9e\u73b0\u964d\u7ef4\u7684\u65b9\u6cd5\u6709\u5f88\u591a, \u5176\u57fa\u672c\u601d\u60f3\u4e5f\u7c7b\u4f3c: \u5047\u8bbe\u6570\u636e\u5728\u9ad8\u7ef4\u5177\u6709\u67d0\u79cd\u7ed3\u6784\u7279\u5f81, \u5e0c\u671b\u964d\u5230\u4f4e\u7ef4\u540e, \u4ecd\u80fd\u4fdd\u6301\u8be5\u7ed3\u6784 . \u6bd4\u8f83\u5e38\u89c1\u7684\u6709: \u5c40\u90e8\u6539\u7ebf\u5d4c\u5165. \u5047\u8bbe\u6570\u636e\u4e2d\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u7531\u5176\u8fd1\u90bb\u7684\u51e0\u4e2a\u70b9\u91cd\u6784\u51fa\u6765. \u964d\u5230\u4f4e\u7ef4, \u4f7f\u6837\u672c\u4ecd\u80fd\u4fdd\u6301\u539f\u6765\u7684\u91cd\u6784\u5173\u7cfb, \u4e14\u91cd\u6784\u7cfb\u6570\u4e5f\u4e00\u6837. \u62c9\u666e\u62c9\u65af\u7279\u5f81\u6620\u5c04. \u5c06\u6570\u636e\u6620\u5c04\u5230\u4f4e\u7ef4, \u4e14\u4fdd\u6301\u70b9\u4e4b\u95f4\u7684(\u76f8\u4f3c\u5ea6)\u8ddd\u79bb\u5173\u7cfb. \u5373\u5728\u539f\u7a7a\u95f4\u4e2d\u76f8\u8ddd\u8f83\u8fdc\u7684\u70b9, \u6295\u5f71\u5230\u4f4e\u7ef4\u7a7a\u95f4\u4e2d, \u5e0c\u671b\u5b83\u4eec\u4e4b\u95f4\u4ecd\u76f8\u8ddd\u8f83\u8fdc. \u53cd\u4e4b\u4ea6\u7136. \u5c40\u90e8\u4fdd\u6301\u6295\u5f71 \u7b49\u8ddd\u6620\u5c04","title":"\u6d41\u5f62\u5b66\u4e60"},{"location":"content/daze/sklearn/manifold/#_2","text":"sklearn \u5b9e\u73b0\u4e86\u591a\u79cd\u6d41\u5f62\u5b66\u4e60, \u8fd9\u91cc\u4ee5\u624b\u5199\u6570\u5b57\u6570\u636e\u96c6\u4e3a\u4f8b, \u5c55\u793a\u6d41\u5f62\u5b66\u4e60\u7b97\u6cd5\u5728\u8be5\u6570\u636e\u96c6\u4e0b\u7684\u6548\u679c. import os import matplotlib.pyplot as plt import numpy as np import sklearn.datasets import sklearn.decomposition import sklearn.discriminant_analysis import sklearn.ensemble import sklearn.manifold import sklearn.random_projection savedir = '/tmp/manifold' if not os.path.exists(savedir): os.mkdir(savedir) digits = sklearn.datasets.load_digits(n_class=6) x = digits.data y = digits.target n_neighbors = 30 def plot_embedding(x, title): x_min, x_max = np.min(x, 0), np.max(x, 0) x = (x - x_min) / (x_max - x_min) plt.figure() c = ['red', 'blue', 'lime', 'black', 'yellow', 'purple'] for l in range(6): p = x[y == l] plt.scatter(p[:, 0], p[:, 1], s=25, c=c[l], alpha=0.5, label=str(l)) plt.legend(loc='lower right') plt.xticks([]) plt.yticks([]) plt.title(title) p = os.path.normpath(os.path.join(savedir, title.replace(' ', '_') + '.png')) print(f'Savefig to {p}') plt.savefig(p) n_img_per_row = 20 img = np.zeros((10 * n_img_per_row, 10 * n_img_per_row)) for i in range(n_img_per_row): ix = 10 * i + 1 for j in range(n_img_per_row): iy = 10 * j + 1 img[ix:ix + 8, iy:iy + 8] = x[i * n_img_per_row + j].reshape((8, 8)) plt.imshow(img, cmap=plt.cm.binary) plt.xticks([]) plt.yticks([]) plt.title('Selection from digits') plt.savefig(os.path.join(savedir, 'Selection_from_digits.png')) print('Computing random projection') rp = sklearn.random_projection.SparseRandomProjection(n_components=2, random_state=42) x_projected = rp.fit_transform(x) plot_embedding(x_projected, 'Random Projection') print('Computing PCA projection') x_pca = sklearn.decomposition.TruncatedSVD(n_components=2).fit_transform(x) plot_embedding(x_pca, 'Principal Components projection') print('Computing Linear Discriminant Analysis projection') x2 = x.copy() x2.flat[::x.shape[1] + 1] += 0.01 # Make X invertible x_lda = sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=2).fit_transform(x2, y) plot_embedding(x_lda, 'Linear Discriminant projection') print('Computing Isomap embedding') x_iso = sklearn.manifold.Isomap(n_neighbors, n_components=2).fit_transform(x) plot_embedding(x_iso, 'Isomap projection') print('Computing LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='standard') x_lle = clf.fit_transform(x) plot_embedding(x_lle, 'Locally Linear Embedding') print('Computing modified LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='modified') x_mlle = clf.fit_transform(x) plot_embedding(x_mlle, 'Modified Locally Linear Embedding') print('Computing Hessian LLE embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='hessian') x_hlle = clf.fit_transform(x) plot_embedding(x_hlle, 'Hessian Locally Linear Embedding') print('Computing LTSA embedding') clf = sklearn.manifold.LocallyLinearEmbedding(n_neighbors, n_components=2, method='ltsa') x_ltsa = clf.fit_transform(x) plot_embedding(x_ltsa, 'Local Tangent Space Alignment') print('Computing MDS embedding') clf = sklearn.manifold.MDS(n_components=2, n_init=1, max_iter=100) x_mds = clf.fit_transform(x) plot_embedding(x_mds, 'MDS embedding') print('Computing Totally Random Trees embedding') hasher = sklearn.ensemble.RandomTreesEmbedding(n_estimators=200, random_state=0, max_depth=5) x_transformed = hasher.fit_transform(x) pca = sklearn.decomposition.TruncatedSVD(n_components=2) x_reduced = pca.fit_transform(x_transformed) plot_embedding(x_reduced, 'Random forest embedding') print('Computing Spectral embedding') embedder = sklearn.manifold.SpectralEmbedding(n_components=2, random_state=0, eigen_solver='arpack') x_se = embedder.fit_transform(x) plot_embedding(x_se, 'Spectral embedding') print('Computing t-SNE embedding') tsne = sklearn.manifold.TSNE(n_components=2, init='pca', random_state=0) x_tsne = tsne.fit_transform(x) plot_embedding(x_tsne, 't-SNE embedding')","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/sklearn/manifold/#_3","text":"\u8bb8\u591a\u6570\u636e\u96c6\u7684\u7ef4\u5ea6\u8fc7\u9ad8\u53ea\u662f\u7531\u4eba\u4e3a\u5bfc\u81f4\u7684 . \u6bd4\u5982\u4e8c\u7ef4\u5e73\u9762\u4e0a\u6709\u4e00\u4e2a\u5706, \u4e3a\u4e86\u8868\u793a\u8fd9\u4e2a\u5706, \u6211\u4eec\u5f15\u5165\u4e86 x \u4e0e y \u4e24\u4e2a\u53d8\u91cf, \u56e0\u6b64\u8fd9\u4e2a\u5706\u7531\u4e00\u5806\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\u6784\u6210. \u663e\u7136\u5982\u679c\u7528\u4e8c\u7ef4\u5750\u6807\u6765\u8868\u793a, \u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u8ba9\u8fd9\u4e2a\u4e8c\u7ef4\u5750\u6807\u7cfb\u7684\u6240\u6709\u70b9\u90fd\u662f\u8fd9\u4e2a\u5706\u4e0a\u7684\u70b9. \u4e5f\u5c31\u662f\u8bf4, \u7528\u4e8c\u7ef4\u5750\u6807\u6765\u8868\u793a\u8fd9\u4e2a\u5706\u5176\u5b9e\u662f\u6709\u5197\u4f59\u7684. \u6211\u4eec\u5e0c\u671b, \u5982\u679c\u80fd\u5efa\u7acb\u67d0\u4e00\u79cd\u63cf\u8ff0\u65b9\u6cd5, \u8ba9\u8fd9\u4e2a\u63cf\u8ff0\u65b9\u6cd5\u6240\u786e\u5b9a\u7684\u6240\u6709\u70b9\u7684\u96c6\u5408\u90fd\u80fd\u5728\u5706\u4e0a, \u751a\u81f3\u80fd\u8fde\u7eed\u4e0d\u95f4\u65ad\u5730\u8868\u793a\u5706\u4e0a\u7684\u70b9. \u5bf9\u4e8e\u5706\u6765\u8bf4, \u90a3\u5c31\u662f\u4f7f\u7528\u7528\u6781\u5750\u6807\u8868\u793a, \u5728\u6781\u5750\u6807\u7684\u8868\u793a\u65b9\u6cd5\u4e0b, \u5706\u5fc3\u5728\u539f\u70b9\u7684\u5706, \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u5c31\u80fd\u786e\u5b9a: \u534a\u5f84. \u5f53\u4f60\u8fde\u7eed\u6539\u53d8\u534a\u5f84\u7684\u5927\u5c0f, \u5c31\u80fd\u4ea7\u751f\u8fde\u7eed\u4e0d\u65ad\u7684\"\u80fd\u88ab\u8f6c\u6362\u6210\u4e8c\u7ef4\u5750\u6807\u8868\u793a\"\u7684\u5706. \u6240\u4ee5\u8bf4, \u5b9e\u9645\u4e0a \u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5706\u5c31\u662f\u4e00\u4e2a\u4e00\u7ef4\u6d41\u5f62 .","title":"\u5173\u4e8e\u7ef4\u5ea6"},{"location":"content/daze/sklearn/manifold/#_4","text":"[1] sklearn: \u6d41\u5f62\u5b66\u4e60 http://sklearn.apachecn.org/cn/0.19.0/modules/manifold.html","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/overview/","text":"\u6982\u89c8 scikit-learn \u662f\u57fa\u4e8e Python \u8bed\u8a00\u7684\u673a\u5668\u5b66\u4e60\u5de5\u5177. \u7b80\u5355\u9ad8\u6548\u7684\u6570\u636e\u6316\u6398\u548c\u6570\u636e\u5206\u6790\u5de5\u5177 \u53ef\u4f9b\u5927\u5bb6\u5728\u5404\u79cd\u73af\u5883\u4e2d\u91cd\u590d\u4f7f\u7528 \u5efa\u7acb\u5728 NumPy \uff0cSciPy \u548c matplotlib \u4e0a \u5f00\u6e90\uff0c\u53ef\u5546\u4e1a\u4f7f\u7528 - BSD\u8bb8\u53ef\u8bc1 \u4e00\u822c\u6765\u8bf4, \u4e00\u4e2a\u5b66\u4e60\u95ee\u9898\u901a\u5e38\u4f1a\u8003\u8651\u4e00\u7cfb\u5217 n \u4e2a\u6837\u672c\u6570\u636e, \u7136\u540e\u5c1d\u8bd5\u9884\u6d4b\u672a\u77e5\u6570\u636e\u7684\u5c5e\u6027. \u5982\u679c\u6bcf\u4e2a\u6837\u672c\u662f\u591a\u4e2a\u5c5e\u6027\u7684\u6570\u636e(\u6bd4\u5982\u8bf4\u662f\u4e00\u4e2a\u591a\u7ef4\u8bb0\u5f55), \u5c31\u8bf4\u5b83\u6709\u8bb8\u591a\"\u5c5e\u6027\", \u6216\u79f0 features(\u7279\u5f81). \u6211\u4eec\u53ef\u4ee5\u5c06\u5b66\u4e60\u95ee\u9898\u5206\u4e3a\u51e0\u5927\u7c7b: \u76d1\u7763\u5b66\u4e60 , \u5176\u4e2d\u6570\u636e\u5e26\u6709\u4e00\u4e2a\u9644\u52a0\u5c5e\u6027, \u5373\u6211\u4eec\u60f3\u8981\u9884\u6d4b\u7684\u7ed3\u679c\u503c. \u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u662f: \u5206\u7c7b : \u6837\u672c\u5c5e\u4e8e\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u7c7b, \u6211\u4eec\u60f3\u4ece\u5df2\u7ecf\u6807\u8bb0\u7684\u6570\u636e\u4e2d\u5b66\u4e60\u5982\u4f55\u9884\u6d4b\u672a\u6807\u8bb0\u6570\u636e\u7684\u7c7b\u522b. \u5206\u7c7b\u95ee\u9898\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u624b\u5199\u6570\u5b57\u8bc6\u522b, \u5176\u76ee\u7684\u662f\u5c06\u6bcf\u4e2a\u8f93\u5165\u5411\u91cf\u5206\u914d\u7ed9\u6709\u9650\u6570\u76ee\u7684\u79bb\u6563\u7c7b\u522b\u4e4b\u4e00. \u6211\u4eec\u901a\u5e38\u628a\u5206\u7c7b\u89c6\u4f5c\u76d1\u7763\u5b66\u4e60\u7684\u4e00\u4e2a\u79bb\u6563\u5f62\u5f0f(\u533a\u522b\u4e8e\u8fde\u7eed\u5f62\u5f0f), \u4ece\u6709\u9650\u7684\u7c7b\u522b\u4e2d, \u7ed9\u6bcf\u4e2a\u6837\u672c\u8d34\u4e0a\u6b63\u786e\u7684\u6807\u7b7e. \u56de\u5f52 : \u5982\u679c\u671f\u671b\u7684\u8f93\u51fa\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u8fde\u7eed\u53d8\u91cf\u7ec4\u6210, \u5219\u8be5\u4efb\u52a1\u79f0\u4e3a\u56de\u5f52. \u56de\u5f52\u95ee\u9898\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u9884\u6d4b\u9c91\u9c7c\u7684\u957f\u5ea6\u662f\u5176\u5e74\u9f84\u548c\u4f53\u91cd\u7684\u51fd\u6570. \u65e0\u76d1\u7763\u5b66\u4e60 , \u5176\u4e2d\u8bad\u7ec3\u6570\u636e\u7531\u6ca1\u6709\u4efb\u4f55\u76f8\u5e94\u76ee\u6807\u503c\u7684\u4e00\u7ec4\u8f93\u5165\u5411\u91cf x \u7ec4\u6210. \u8fd9\u79cd\u95ee\u9898\u7684\u76ee\u6807\u53ef\u80fd\u662f\u5728\u6570\u636e\u4e2d\u53d1\u73b0\u5f7c\u6b64\u7c7b\u4f3c\u7684\u793a\u4f8b\u6240\u805a\u6210\u7684\u7ec4, \u8fd9\u79cd\u95ee\u9898\u79f0\u4e3a \u805a\u7c7b , \u6216\u8005, \u786e\u5b9a\u8f93\u5165\u7a7a\u95f4\u5185\u7684\u6570\u636e\u5206\u5e03, \u79f0\u4e3a \u5bc6\u5ea6\u4f30\u8ba1 , \u53c8\u6216\u4ece\u9ad8\u7ef4\u6570\u636e\u6295\u5f71\u6570\u636e\u7a7a\u95f4\u7f29\u5c0f\u5230\u4e8c\u7ef4\u6216\u4e09\u7ef4\u4ee5\u8fdb\u884c\u53ef\u89c6\u5316. \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 \u673a\u5668\u5b66\u4e60\u662f\u4ece\u6570\u636e\u7684\u5c5e\u6027\u4e2d\u5b66\u4e60, \u5e76\u5c06\u5b83\u4eec\u5e94\u7528\u5230\u65b0\u6570\u636e\u7684\u8fc7\u7a0b. \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u673a\u5668\u5b66\u4e60\u4e2d\u8bc4\u4f30\u7b97\u6cd5\u7684\u666e\u904d\u5b9e\u8df5\u662f\u628a\u6570\u636e\u5206\u5272\u6210\u8bad\u7ec3\u96c6(\u6211\u4eec\u4ece\u4e2d\u5b66\u4e60\u6570\u636e\u7684\u5c5e\u6027)\u548c\u6d4b\u8bd5\u96c6(\u6211\u4eec\u6d4b\u8bd5\u8fd9\u4e9b\u6027\u8d28). \u793a\u4f8b: \u624b\u5199\u6570\u5b57\u8bc6\u522b \u4e0b\u9762\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u624b\u5199\u6570\u5b57\u8bc6\u522b\u4f8b\u5b50\u4ecb\u7ecd sklearn \u7684\u5de5\u4f5c\u6a21\u5f0f. \u53ef\u4ee5\u770b\u5230, \u5176\u8bad\u7ec3\u8fc7\u7a0b\u4f9d\u7136\u9075\u5faa \u8f7d\u5165\u6570\u636e-\u5b9a\u4e49\u6a21\u578b-\u8bad\u7ec3-\u9884\u6d4b \u8fd9\u6837\u7684\u57fa\u672c\u89c4\u5219. import sklearn.datasets import sklearn.externals.joblib import sklearn.metrics import sklearn.svm # \u8f7d\u5165\u624b\u5199\u6570\u5b57\u8bc6\u522b\u6570\u636e, \u5e76\u5206\u5272\u4e3a\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6(9:1) digits = sklearn.datasets.load_digits() n_samples = len(digits.data) split_index = n_samples // 10 * 9 Xtr = digits.data[:split_index] Ytr = digits.target[:split_index] Xte = digits.data[split_index:] Yte = digits.target[split_index:] # \u8bad\u7ec3 clf = sklearn.svm.SVC(gamma=0.001, C=100) clf.fit(Xtr, Ytr) # \u9884\u6d4b. \u8be5\u6a21\u578b\u7cbe\u5ea6\u4e3a 0.96, \u53ec\u56de\u4e3a 0.95. Yte_pred = clf.predict(Xte) acc = sklearn.metrics.classification_report(Yte, Yte_pred) print(acc) # \u4fdd\u5b58\u6a21\u578b. \u53ef\u4ee5\u4f7f\u7528 sklearn.externals.joblib.load \u51fd\u6570\u91cd\u8f7d\u6a21\u578b. sklearn.externals.joblib.dump(clf, '/tmp/svm.pkl') \u53c2\u8003 [1] sklearn: \u4f7f\u7528 scikit-learn \u4ecb\u7ecd\u673a\u5668\u5b66\u4e60 http://sklearn.apachecn.org/cn/0.19.0/tutorial/basic/tutorial.html","title":"sklearn-\u6982\u89c8"},{"location":"content/daze/sklearn/overview/#_1","text":"scikit-learn \u662f\u57fa\u4e8e Python \u8bed\u8a00\u7684\u673a\u5668\u5b66\u4e60\u5de5\u5177. \u7b80\u5355\u9ad8\u6548\u7684\u6570\u636e\u6316\u6398\u548c\u6570\u636e\u5206\u6790\u5de5\u5177 \u53ef\u4f9b\u5927\u5bb6\u5728\u5404\u79cd\u73af\u5883\u4e2d\u91cd\u590d\u4f7f\u7528 \u5efa\u7acb\u5728 NumPy \uff0cSciPy \u548c matplotlib \u4e0a \u5f00\u6e90\uff0c\u53ef\u5546\u4e1a\u4f7f\u7528 - BSD\u8bb8\u53ef\u8bc1 \u4e00\u822c\u6765\u8bf4, \u4e00\u4e2a\u5b66\u4e60\u95ee\u9898\u901a\u5e38\u4f1a\u8003\u8651\u4e00\u7cfb\u5217 n \u4e2a\u6837\u672c\u6570\u636e, \u7136\u540e\u5c1d\u8bd5\u9884\u6d4b\u672a\u77e5\u6570\u636e\u7684\u5c5e\u6027. \u5982\u679c\u6bcf\u4e2a\u6837\u672c\u662f\u591a\u4e2a\u5c5e\u6027\u7684\u6570\u636e(\u6bd4\u5982\u8bf4\u662f\u4e00\u4e2a\u591a\u7ef4\u8bb0\u5f55), \u5c31\u8bf4\u5b83\u6709\u8bb8\u591a\"\u5c5e\u6027\", \u6216\u79f0 features(\u7279\u5f81). \u6211\u4eec\u53ef\u4ee5\u5c06\u5b66\u4e60\u95ee\u9898\u5206\u4e3a\u51e0\u5927\u7c7b: \u76d1\u7763\u5b66\u4e60 , \u5176\u4e2d\u6570\u636e\u5e26\u6709\u4e00\u4e2a\u9644\u52a0\u5c5e\u6027, \u5373\u6211\u4eec\u60f3\u8981\u9884\u6d4b\u7684\u7ed3\u679c\u503c. \u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u662f: \u5206\u7c7b : \u6837\u672c\u5c5e\u4e8e\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u7c7b, \u6211\u4eec\u60f3\u4ece\u5df2\u7ecf\u6807\u8bb0\u7684\u6570\u636e\u4e2d\u5b66\u4e60\u5982\u4f55\u9884\u6d4b\u672a\u6807\u8bb0\u6570\u636e\u7684\u7c7b\u522b. \u5206\u7c7b\u95ee\u9898\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u624b\u5199\u6570\u5b57\u8bc6\u522b, \u5176\u76ee\u7684\u662f\u5c06\u6bcf\u4e2a\u8f93\u5165\u5411\u91cf\u5206\u914d\u7ed9\u6709\u9650\u6570\u76ee\u7684\u79bb\u6563\u7c7b\u522b\u4e4b\u4e00. \u6211\u4eec\u901a\u5e38\u628a\u5206\u7c7b\u89c6\u4f5c\u76d1\u7763\u5b66\u4e60\u7684\u4e00\u4e2a\u79bb\u6563\u5f62\u5f0f(\u533a\u522b\u4e8e\u8fde\u7eed\u5f62\u5f0f), \u4ece\u6709\u9650\u7684\u7c7b\u522b\u4e2d, \u7ed9\u6bcf\u4e2a\u6837\u672c\u8d34\u4e0a\u6b63\u786e\u7684\u6807\u7b7e. \u56de\u5f52 : \u5982\u679c\u671f\u671b\u7684\u8f93\u51fa\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u8fde\u7eed\u53d8\u91cf\u7ec4\u6210, \u5219\u8be5\u4efb\u52a1\u79f0\u4e3a\u56de\u5f52. \u56de\u5f52\u95ee\u9898\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u9884\u6d4b\u9c91\u9c7c\u7684\u957f\u5ea6\u662f\u5176\u5e74\u9f84\u548c\u4f53\u91cd\u7684\u51fd\u6570. \u65e0\u76d1\u7763\u5b66\u4e60 , \u5176\u4e2d\u8bad\u7ec3\u6570\u636e\u7531\u6ca1\u6709\u4efb\u4f55\u76f8\u5e94\u76ee\u6807\u503c\u7684\u4e00\u7ec4\u8f93\u5165\u5411\u91cf x \u7ec4\u6210. \u8fd9\u79cd\u95ee\u9898\u7684\u76ee\u6807\u53ef\u80fd\u662f\u5728\u6570\u636e\u4e2d\u53d1\u73b0\u5f7c\u6b64\u7c7b\u4f3c\u7684\u793a\u4f8b\u6240\u805a\u6210\u7684\u7ec4, \u8fd9\u79cd\u95ee\u9898\u79f0\u4e3a \u805a\u7c7b , \u6216\u8005, \u786e\u5b9a\u8f93\u5165\u7a7a\u95f4\u5185\u7684\u6570\u636e\u5206\u5e03, \u79f0\u4e3a \u5bc6\u5ea6\u4f30\u8ba1 , \u53c8\u6216\u4ece\u9ad8\u7ef4\u6570\u636e\u6295\u5f71\u6570\u636e\u7a7a\u95f4\u7f29\u5c0f\u5230\u4e8c\u7ef4\u6216\u4e09\u7ef4\u4ee5\u8fdb\u884c\u53ef\u89c6\u5316. \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 \u673a\u5668\u5b66\u4e60\u662f\u4ece\u6570\u636e\u7684\u5c5e\u6027\u4e2d\u5b66\u4e60, \u5e76\u5c06\u5b83\u4eec\u5e94\u7528\u5230\u65b0\u6570\u636e\u7684\u8fc7\u7a0b. \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u673a\u5668\u5b66\u4e60\u4e2d\u8bc4\u4f30\u7b97\u6cd5\u7684\u666e\u904d\u5b9e\u8df5\u662f\u628a\u6570\u636e\u5206\u5272\u6210\u8bad\u7ec3\u96c6(\u6211\u4eec\u4ece\u4e2d\u5b66\u4e60\u6570\u636e\u7684\u5c5e\u6027)\u548c\u6d4b\u8bd5\u96c6(\u6211\u4eec\u6d4b\u8bd5\u8fd9\u4e9b\u6027\u8d28).","title":"\u6982\u89c8"},{"location":"content/daze/sklearn/overview/#_2","text":"\u4e0b\u9762\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u624b\u5199\u6570\u5b57\u8bc6\u522b\u4f8b\u5b50\u4ecb\u7ecd sklearn \u7684\u5de5\u4f5c\u6a21\u5f0f. \u53ef\u4ee5\u770b\u5230, \u5176\u8bad\u7ec3\u8fc7\u7a0b\u4f9d\u7136\u9075\u5faa \u8f7d\u5165\u6570\u636e-\u5b9a\u4e49\u6a21\u578b-\u8bad\u7ec3-\u9884\u6d4b \u8fd9\u6837\u7684\u57fa\u672c\u89c4\u5219. import sklearn.datasets import sklearn.externals.joblib import sklearn.metrics import sklearn.svm # \u8f7d\u5165\u624b\u5199\u6570\u5b57\u8bc6\u522b\u6570\u636e, \u5e76\u5206\u5272\u4e3a\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6(9:1) digits = sklearn.datasets.load_digits() n_samples = len(digits.data) split_index = n_samples // 10 * 9 Xtr = digits.data[:split_index] Ytr = digits.target[:split_index] Xte = digits.data[split_index:] Yte = digits.target[split_index:] # \u8bad\u7ec3 clf = sklearn.svm.SVC(gamma=0.001, C=100) clf.fit(Xtr, Ytr) # \u9884\u6d4b. \u8be5\u6a21\u578b\u7cbe\u5ea6\u4e3a 0.96, \u53ec\u56de\u4e3a 0.95. Yte_pred = clf.predict(Xte) acc = sklearn.metrics.classification_report(Yte, Yte_pred) print(acc) # \u4fdd\u5b58\u6a21\u578b. \u53ef\u4ee5\u4f7f\u7528 sklearn.externals.joblib.load \u51fd\u6570\u91cd\u8f7d\u6a21\u578b. sklearn.externals.joblib.dump(clf, '/tmp/svm.pkl')","title":"\u793a\u4f8b: \u624b\u5199\u6570\u5b57\u8bc6\u522b"},{"location":"content/daze/sklearn/overview/#_3","text":"[1] sklearn: \u4f7f\u7528 scikit-learn \u4ecb\u7ecd\u673a\u5668\u5b66\u4e60 http://sklearn.apachecn.org/cn/0.19.0/tutorial/basic/tutorial.html","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/svm/","text":"SVM SVM(\u652f\u6301\u5411\u91cf\u673a)\u53ef\u7528\u4e0e\u5206\u7c7b, \u56de\u5f52\u4e0e\u5f02\u5e38\u68c0\u6d4b. \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u636e\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\u800c\u8a00, \u4e00\u4e2a\u666e\u901a\u7684 SVM \u5c31\u662f\u4e00\u6761\u76f4\u7ebf\uff0c\u7528\u6765\u5b8c\u7f8e\u5212\u5206\u4e24\u7c7b. \u4f46\u662f, \u80fd\u540c\u65f6\u5212\u5206\u4e24\u7c7b\u6570\u636e\u7684\u76f4\u7ebf\u6709\u65e0\u6570\u591a\u6761, \u6211\u4eec\u9700\u8981\u7684\u662f\u6070\u597d\u5728\u4e24\u7c7b\u6570\u636e\u7684\u4e2d\u95f4, \u8ddd\u79bb\u4e24\u4e2a\u7c7b\u7684\u70b9\u4e00\u6837\u8fdc\u7684\u76f4\u7ebf. \u6211\u4eec\u79f0\u5b83\u4e3a \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762 . \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u636e\u800c\u8a00, \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u662f\u4e00\u6761\u76f4\u7ebf, \u4f46\u662f\u5bf9\u4e09\u7ef4\u6570\u636e\u800c\u8a00, \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u662f\u4e00\u4e2a\u9762(\u5373 N \u7ef4\u6570\u636e\u7684\u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u4e3a N-1 \u7ef4). \u4ec0\u4e48\u662f SVM \u5bfb\u627e\u4e00\u6761\u79bb\u82f9\u679c\u548c\u9999\u8549\u4e4b\u95f4\u8ddd\u79bb(margin)\u6700\u5927\u7684\u76f4\u7ebf. \u5176\u4e2d\u8ddd\u79bb, \u5373\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb; \u7ea6\u675f\u6761\u4ef6\u4e3a\u6240\u6709\u82f9\u679c\u548c\u9999\u8549\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb\u5927\u4e8e\u7b49\u4e8e margin. \u7528\u6570\u5b66\u8868\u8fbe\u5f0f\u8868\u793a: $$ y_i(w^Tx_i+b) \\ge 1, \\forall i $$ \u5982\u679c\u9999\u8549\u548c\u82f9\u679c\u4e0d\u80fd\u7528\u76f4\u7ebf\u5206\u5272\u5462? \u4f4e\u7ef4\u975e\u7ebf\u6027\u7684\u5206\u754c\u7ebf\u5176\u5b9e\u5728\u9ad8\u7ef4\u662f\u53ef\u4ee5\u7ebf\u6027\u5206\u5272. \u8bbe\u60f3\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5982\u679c\u6837\u672c\u5411\u91cf v \u8ddd\u79bb\u539f\u70b9(0, 0)\u7684\u8ddd\u79bb\u4e3a 1 \u4ee5\u5185\u5206\u7c7b\u88ab\u6807\u8bb0\u4e3a 0, \u5176\u4f59\u90fd\u662f1, \u540c\u6837\u662f\u5728\u4e8c\u7ef4\u7684\u60c5\u51b5\u4e0b\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u5f97, \u6b64\u65f6\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570: $$ f(x, y) = \\begin{cases} 1 & x^2+y^2 \\ge 1 \\\\ 0 & x^2+y^2<1 \\end{cases} $$ \u5373 $z=x^2+y^2$, \u6b64\u65f6\u4e8c\u7ef4\u7a7a\u95f4\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u70b9\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7ebf\u6027\u53ef\u5206. \u8fd9\u4e2a\u6784\u9020\u7684\u8fc7\u7a0b SVM \u6709\u901a\u7528\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3, \u5c31\u662f\u4f7f\u7528\u6838\u51fd\u6570\u8fdb\u884c\u6784\u9020. \u51e0\u4e2a\u5e38\u7528\u7684\u6838\u51fd\u6570\u5982\u7ebf\u6027\u6838\u51fd\u6570, \u591a\u9879\u5f0f\u6838\u51fd\u6570, \u5f84\u5411\u57fa\u6838\u51fd\u6570, \u9ad8\u65af\u6838\u51fd\u6570\u7b49. \u6838\u51fd\u6570\u7684\u76ee\u7684\u5f88\u660e\u786e: \u5c31\u662f\u5728\u5f53\u524d\u7ef4\u5ea6\u7a7a\u95f4\u4e2d\u7684\u6837\u672c\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u5c31\u4e00\u5f8b\u6620\u5c04\u5230\u9ad8\u7ef4\u4e2d\u53bb, \u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u627e\u5230\u8d85\u5e73\u9762, \u5f97\u5230\u8d85\u5e73\u9762\u65b9\u7a0b. \u800c\u5728\u66f4\u9ad8\u7ef4\u7684\u8d85\u5e73\u9762\u4e0a\u7684\u65b9\u7a0b\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u589e\u52a0\u66f4\u591a\u7684\u7ef4\u5ea6\u53d8\u91cf. \u4f8b\u5982, \u5728\u7814\u7a76\u4e8c\u7ef4\u7a7a\u95f4\u4e0a\u7684\u5411\u91cf\u5206\u7c7b\u95ee\u9898\u65f6, \u7ecf\u8fc7\u6838\u51fd\u6570\u6620\u5c04, \u6700\u540e\u5f97\u5230\u7684\u8d85\u5e73\u9762\u53d8\u6210\u4e86\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u66f2\u7ebf(\u4f46\u540c\u65f6\u4e5f\u662f\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u6b21\u65b9\u7a0b). \u5982\u679c\u9999\u8549\u548c\u82f9\u679c\u6709\u4ea4\u96c6\u5462? \u5373\u4f7f\u505a\u4e86\u5347\u7ef4, \u9999\u8549\u4e0e\u82f9\u679c\u4f9d\u7136\u4e0d\u80fd\u7ebf\u6027\u5206\u5272. \u6211\u4eec\u9700\u8981\u8c03\u6574\u6a21\u578b, \u4ee5\u4f7f\u5f97\u5728\u4fdd\u8bc1\u4e0d\u53ef\u5206\u7684\u60c5\u51b5\u4e0b, \u5c3d\u91cf\u627e\u5230\u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762. \u901a\u5e38\u72b6\u6001\u4e0b, \u4e00\u4e2a\u79bb\u7fa4\u70b9(\u53ef\u80fd\u662f\u566a\u58f0)\u53ef\u4ee5\u9020\u6210\u8d85\u5e73\u9762\u7684\u79fb\u52a8, \u95f4\u9694\u7f29\u5c0f, \u4ee5\u524d\u7684\u6a21\u578b\u5bf9\u566a\u58f0\u975e\u5e38\u654f\u611f. \u518d\u6709\u751a\u8005, \u5982\u679c\u79bb\u7fa4\u70b9\u5728\u53e6\u5916\u4e00\u4e2a\u7c7b\u4e2d, \u90a3\u4e48\u8fd9\u65f6\u5019\u5c31\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u4e86. \u8fd9\u65f6\u5019\u6211\u4eec\u5e94\u8be5\u5141\u8bb8\u4e00\u4e9b\u70b9\u6e38\u79bb\u5e76\u5728\u5728\u6a21\u578b\u4e2d\u8fdd\u80cc\u9650\u5236\u6761\u4ef6(\u51fd\u6570\u95f4\u9694\u5927\u4e8e 1). \u901a\u8fc7\u5f15\u5165 \u677e\u5f1b\u53d8\u91cf \u5141\u8bb8\u9519\u8bef\u7684\u5206\u7c7b. $$ y_i(w^Tx_i+b) \\ge 1-\\varepsilon_i, \\forall i $$ $\\varepsilon_i$ \u4e3a\u5141\u8bb8 $x_i$ \u504f\u79fb\u5206\u7c7b\u5e73\u9762\u7684\u8ddd\u79bb. \u5982\u679c\u8fd8\u6709\u68a8\u5462? \u53ef\u4ee5\u6bcf\u4e2a\u7c7b\u522b\u505a\u4e00\u6b21SVM: \u662f\u82f9\u679c\u8fd8\u662f\u4e0d\u662f\u82f9\u679c? \u662f\u9999\u8549\u8fd8\u662f\u4e0d\u662f\u9999\u8549? \u662f\u68a8\u5b50\u8fd8\u662f\u4e0d\u662f\u68a8\u5b50? \u4ece\u4e2d\u9009\u51fa\u53ef\u80fd\u6027\u6700\u5927\u7684. \u8fd9\u662f one-versus-the-rest approach . \u4e5f\u53ef\u4ee5\u4e24\u4e24\u505a\u4e00\u6b21SVM: \u662f\u82f9\u679c\u8fd8\u662f\u9999\u8549? \u662f\u9999\u8549\u8fd8\u662f\u68a8\u5b50? \u662f\u68a8\u5b50\u8fd8\u662f\u82f9\u679c? \u6700\u540e\u4e09\u4e2a\u5206\u7c7b\u5668\u6295\u7968\u51b3\u5b9a. \u8fd9\u662f one-versus-one approace . \u4ee3\u7801\u5b9e\u73b0 import matplotlib.pyplot as plt import sklearn.datasets import sklearn.svm import sklearn.metrics import sklearn.model_selection import numpy as np plt.style.use('seaborn') # \u751f\u6210 512 \u4e2a\u6570\u636e\u70b9, \u6240\u6709\u6570\u636e\u4ee5\u9ad8\u65af\u5206\u5e03\u5f62\u5f0f\u5206\u5e03\u5728\u4e24\u4e2a\u4e2d\u5fc3\u9644\u8fd1 x, y = sklearn.datasets.make_blobs(n_samples=512, centers=2, random_state=170) # \u5206\u522b\u6d4b\u8bd5\u6838\u51fd\u6570\u4e3a ['linear', 'poly', 'rbf', 'sigmoid'] for i, kernel in enumerate(['linear', 'poly', 'rbf', 'sigmoid']): plt.subplot(221 + i) clf = sklearn.svm.SVC(kernel=kernel) clf.fit(x, y) h = 0.02 x_min, x_max = x[:, 0].min() - 1, x[:, 0].max() + 1 y_min, y_max = x[:, 1].min() - 1, x[:, 1].max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) z = z.reshape(xx.shape) plt.pcolormesh(xx, yy, z, cmap='Paired', alpha=0.5) plt.scatter(x[:, 0], x[:, 1], c=y, cmap='Paired', edgecolors='k') plt.axis('off') plt.show() \u540e\u8bb0 \u6700\u8fd1\u6e10\u6e10\u611f\u5230\u529b\u4e0d\u4ece\u5fc3, \u8d8a\u6df1\u5165\u53d1\u73b0\u6d89\u53ca\u5230\u7684\u6570\u5b66\u63a8\u5bfc\u8d8a\u591a, \u5948\u4f55\u7cbe\u529b\u6709\u9650, \u5f80\u5f80\u53ea\u80fd\u6d45\u5c1d\u8f84\u6b62, \u5f88\u591a\u65f6\u5019\u66f4\u662f\u61d2\u7684\u770b. \u554a, \u6211\u5df2\u7ecf\u662f\u53ea\u5e9f\u53f6\u5b50\u4e86. \u53c2\u8003 [1] sklearn: \u652f\u6301\u5411\u91cf\u673a http://sklearn.apachecn.org/cn/0.19.0/modules/svm.html [2] \u9760\u9760\u9760\u8c31: \u652f\u6301\u5411\u91cf\u673a(SVM)\u662f\u4ec0\u4e48\u610f\u601d? https://www.zhihu.com/question/21094489/answer/117246987","title":"sklearn-SVM"},{"location":"content/daze/sklearn/svm/#svm","text":"SVM(\u652f\u6301\u5411\u91cf\u673a)\u53ef\u7528\u4e0e\u5206\u7c7b, \u56de\u5f52\u4e0e\u5f02\u5e38\u68c0\u6d4b. \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u636e\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\u800c\u8a00, \u4e00\u4e2a\u666e\u901a\u7684 SVM \u5c31\u662f\u4e00\u6761\u76f4\u7ebf\uff0c\u7528\u6765\u5b8c\u7f8e\u5212\u5206\u4e24\u7c7b. \u4f46\u662f, \u80fd\u540c\u65f6\u5212\u5206\u4e24\u7c7b\u6570\u636e\u7684\u76f4\u7ebf\u6709\u65e0\u6570\u591a\u6761, \u6211\u4eec\u9700\u8981\u7684\u662f\u6070\u597d\u5728\u4e24\u7c7b\u6570\u636e\u7684\u4e2d\u95f4, \u8ddd\u79bb\u4e24\u4e2a\u7c7b\u7684\u70b9\u4e00\u6837\u8fdc\u7684\u76f4\u7ebf. \u6211\u4eec\u79f0\u5b83\u4e3a \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762 . \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u636e\u800c\u8a00, \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u662f\u4e00\u6761\u76f4\u7ebf, \u4f46\u662f\u5bf9\u4e09\u7ef4\u6570\u636e\u800c\u8a00, \u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u662f\u4e00\u4e2a\u9762(\u5373 N \u7ef4\u6570\u636e\u7684\u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762\u4e3a N-1 \u7ef4). \u4ec0\u4e48\u662f SVM \u5bfb\u627e\u4e00\u6761\u79bb\u82f9\u679c\u548c\u9999\u8549\u4e4b\u95f4\u8ddd\u79bb(margin)\u6700\u5927\u7684\u76f4\u7ebf. \u5176\u4e2d\u8ddd\u79bb, \u5373\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb; \u7ea6\u675f\u6761\u4ef6\u4e3a\u6240\u6709\u82f9\u679c\u548c\u9999\u8549\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb\u5927\u4e8e\u7b49\u4e8e margin. \u7528\u6570\u5b66\u8868\u8fbe\u5f0f\u8868\u793a: $$ y_i(w^Tx_i+b) \\ge 1, \\forall i $$ \u5982\u679c\u9999\u8549\u548c\u82f9\u679c\u4e0d\u80fd\u7528\u76f4\u7ebf\u5206\u5272\u5462? \u4f4e\u7ef4\u975e\u7ebf\u6027\u7684\u5206\u754c\u7ebf\u5176\u5b9e\u5728\u9ad8\u7ef4\u662f\u53ef\u4ee5\u7ebf\u6027\u5206\u5272. \u8bbe\u60f3\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5982\u679c\u6837\u672c\u5411\u91cf v \u8ddd\u79bb\u539f\u70b9(0, 0)\u7684\u8ddd\u79bb\u4e3a 1 \u4ee5\u5185\u5206\u7c7b\u88ab\u6807\u8bb0\u4e3a 0, \u5176\u4f59\u90fd\u662f1, \u540c\u6837\u662f\u5728\u4e8c\u7ef4\u7684\u60c5\u51b5\u4e0b\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u5f97, \u6b64\u65f6\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570: $$ f(x, y) = \\begin{cases} 1 & x^2+y^2 \\ge 1 \\\\ 0 & x^2+y^2<1 \\end{cases} $$ \u5373 $z=x^2+y^2$, \u6b64\u65f6\u4e8c\u7ef4\u7a7a\u95f4\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u70b9\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7ebf\u6027\u53ef\u5206. \u8fd9\u4e2a\u6784\u9020\u7684\u8fc7\u7a0b SVM \u6709\u901a\u7528\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3, \u5c31\u662f\u4f7f\u7528\u6838\u51fd\u6570\u8fdb\u884c\u6784\u9020. \u51e0\u4e2a\u5e38\u7528\u7684\u6838\u51fd\u6570\u5982\u7ebf\u6027\u6838\u51fd\u6570, \u591a\u9879\u5f0f\u6838\u51fd\u6570, \u5f84\u5411\u57fa\u6838\u51fd\u6570, \u9ad8\u65af\u6838\u51fd\u6570\u7b49. \u6838\u51fd\u6570\u7684\u76ee\u7684\u5f88\u660e\u786e: \u5c31\u662f\u5728\u5f53\u524d\u7ef4\u5ea6\u7a7a\u95f4\u4e2d\u7684\u6837\u672c\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u5c31\u4e00\u5f8b\u6620\u5c04\u5230\u9ad8\u7ef4\u4e2d\u53bb, \u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u627e\u5230\u8d85\u5e73\u9762, \u5f97\u5230\u8d85\u5e73\u9762\u65b9\u7a0b. \u800c\u5728\u66f4\u9ad8\u7ef4\u7684\u8d85\u5e73\u9762\u4e0a\u7684\u65b9\u7a0b\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u589e\u52a0\u66f4\u591a\u7684\u7ef4\u5ea6\u53d8\u91cf. \u4f8b\u5982, \u5728\u7814\u7a76\u4e8c\u7ef4\u7a7a\u95f4\u4e0a\u7684\u5411\u91cf\u5206\u7c7b\u95ee\u9898\u65f6, \u7ecf\u8fc7\u6838\u51fd\u6570\u6620\u5c04, \u6700\u540e\u5f97\u5230\u7684\u8d85\u5e73\u9762\u53d8\u6210\u4e86\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u66f2\u7ebf(\u4f46\u540c\u65f6\u4e5f\u662f\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u6b21\u65b9\u7a0b). \u5982\u679c\u9999\u8549\u548c\u82f9\u679c\u6709\u4ea4\u96c6\u5462? \u5373\u4f7f\u505a\u4e86\u5347\u7ef4, \u9999\u8549\u4e0e\u82f9\u679c\u4f9d\u7136\u4e0d\u80fd\u7ebf\u6027\u5206\u5272. \u6211\u4eec\u9700\u8981\u8c03\u6574\u6a21\u578b, \u4ee5\u4f7f\u5f97\u5728\u4fdd\u8bc1\u4e0d\u53ef\u5206\u7684\u60c5\u51b5\u4e0b, \u5c3d\u91cf\u627e\u5230\u6700\u4f18\u5206\u7c7b\u8d85\u5e73\u9762. \u901a\u5e38\u72b6\u6001\u4e0b, \u4e00\u4e2a\u79bb\u7fa4\u70b9(\u53ef\u80fd\u662f\u566a\u58f0)\u53ef\u4ee5\u9020\u6210\u8d85\u5e73\u9762\u7684\u79fb\u52a8, \u95f4\u9694\u7f29\u5c0f, \u4ee5\u524d\u7684\u6a21\u578b\u5bf9\u566a\u58f0\u975e\u5e38\u654f\u611f. \u518d\u6709\u751a\u8005, \u5982\u679c\u79bb\u7fa4\u70b9\u5728\u53e6\u5916\u4e00\u4e2a\u7c7b\u4e2d, \u90a3\u4e48\u8fd9\u65f6\u5019\u5c31\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u4e86. \u8fd9\u65f6\u5019\u6211\u4eec\u5e94\u8be5\u5141\u8bb8\u4e00\u4e9b\u70b9\u6e38\u79bb\u5e76\u5728\u5728\u6a21\u578b\u4e2d\u8fdd\u80cc\u9650\u5236\u6761\u4ef6(\u51fd\u6570\u95f4\u9694\u5927\u4e8e 1). \u901a\u8fc7\u5f15\u5165 \u677e\u5f1b\u53d8\u91cf \u5141\u8bb8\u9519\u8bef\u7684\u5206\u7c7b. $$ y_i(w^Tx_i+b) \\ge 1-\\varepsilon_i, \\forall i $$ $\\varepsilon_i$ \u4e3a\u5141\u8bb8 $x_i$ \u504f\u79fb\u5206\u7c7b\u5e73\u9762\u7684\u8ddd\u79bb. \u5982\u679c\u8fd8\u6709\u68a8\u5462? \u53ef\u4ee5\u6bcf\u4e2a\u7c7b\u522b\u505a\u4e00\u6b21SVM: \u662f\u82f9\u679c\u8fd8\u662f\u4e0d\u662f\u82f9\u679c? \u662f\u9999\u8549\u8fd8\u662f\u4e0d\u662f\u9999\u8549? \u662f\u68a8\u5b50\u8fd8\u662f\u4e0d\u662f\u68a8\u5b50? \u4ece\u4e2d\u9009\u51fa\u53ef\u80fd\u6027\u6700\u5927\u7684. \u8fd9\u662f one-versus-the-rest approach . \u4e5f\u53ef\u4ee5\u4e24\u4e24\u505a\u4e00\u6b21SVM: \u662f\u82f9\u679c\u8fd8\u662f\u9999\u8549? \u662f\u9999\u8549\u8fd8\u662f\u68a8\u5b50? \u662f\u68a8\u5b50\u8fd8\u662f\u82f9\u679c? \u6700\u540e\u4e09\u4e2a\u5206\u7c7b\u5668\u6295\u7968\u51b3\u5b9a. \u8fd9\u662f one-versus-one approace .","title":"SVM"},{"location":"content/daze/sklearn/svm/#_1","text":"import matplotlib.pyplot as plt import sklearn.datasets import sklearn.svm import sklearn.metrics import sklearn.model_selection import numpy as np plt.style.use('seaborn') # \u751f\u6210 512 \u4e2a\u6570\u636e\u70b9, \u6240\u6709\u6570\u636e\u4ee5\u9ad8\u65af\u5206\u5e03\u5f62\u5f0f\u5206\u5e03\u5728\u4e24\u4e2a\u4e2d\u5fc3\u9644\u8fd1 x, y = sklearn.datasets.make_blobs(n_samples=512, centers=2, random_state=170) # \u5206\u522b\u6d4b\u8bd5\u6838\u51fd\u6570\u4e3a ['linear', 'poly', 'rbf', 'sigmoid'] for i, kernel in enumerate(['linear', 'poly', 'rbf', 'sigmoid']): plt.subplot(221 + i) clf = sklearn.svm.SVC(kernel=kernel) clf.fit(x, y) h = 0.02 x_min, x_max = x[:, 0].min() - 1, x[:, 0].max() + 1 y_min, y_max = x[:, 1].min() - 1, x[:, 1].max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) z = z.reshape(xx.shape) plt.pcolormesh(xx, yy, z, cmap='Paired', alpha=0.5) plt.scatter(x[:, 0], x[:, 1], c=y, cmap='Paired', edgecolors='k') plt.axis('off') plt.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/daze/sklearn/svm/#_2","text":"\u6700\u8fd1\u6e10\u6e10\u611f\u5230\u529b\u4e0d\u4ece\u5fc3, \u8d8a\u6df1\u5165\u53d1\u73b0\u6d89\u53ca\u5230\u7684\u6570\u5b66\u63a8\u5bfc\u8d8a\u591a, \u5948\u4f55\u7cbe\u529b\u6709\u9650, \u5f80\u5f80\u53ea\u80fd\u6d45\u5c1d\u8f84\u6b62, \u5f88\u591a\u65f6\u5019\u66f4\u662f\u61d2\u7684\u770b. \u554a, \u6211\u5df2\u7ecf\u662f\u53ea\u5e9f\u53f6\u5b50\u4e86.","title":"\u540e\u8bb0"},{"location":"content/daze/sklearn/svm/#_3","text":"[1] sklearn: \u652f\u6301\u5411\u91cf\u673a http://sklearn.apachecn.org/cn/0.19.0/modules/svm.html [2] \u9760\u9760\u9760\u8c31: \u652f\u6301\u5411\u91cf\u673a(SVM)\u662f\u4ec0\u4e48\u610f\u601d? https://www.zhihu.com/question/21094489/answer/117246987","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/tree/","text":"\u6982\u89c8 \u51b3\u7b56\u6811(Decision Trees)\u662f\u4e00\u4e2a\u8d2a\u5fc3\u7b97\u6cd5, \u5b83\u5728\u7279\u5f81\u7a7a\u95f4\u4e0a\u6267\u884c\u9012\u5f52\u7684\u4e8c\u5143\u5206\u5272. \u51b3\u7b56\u6811\u7531\u8282\u70b9\u548c\u6709\u5411\u8fb9\u7ec4\u6210, \u5185\u90e8\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u7279\u5f81\u6216\u5c5e\u6027, \u53f6\u5b50\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u5206\u7c7b. \u51b3\u7b56\u6811\u672c\u8d28\u5c31\u662f\u4e00\u7cfb\u5217\u7684 if-then-else \u8bed\u53e5. \u6784\u5efa\u51b3\u7b56\u6811\u901a\u5e38\u5305\u542b\u4e09\u4e2a\u6b65\u9aa4: \u7279\u5f81\u9009\u62e9 \u51b3\u7b56\u6811\u751f\u6210 \u51b3\u7b56\u6811\u526a\u679d \u6784\u5efa\u51b3\u7b56\u6811\u65f6\u901a\u5e38\u5c06\u6b63\u5219\u5316\u7684\u6781\u5927\u4f3c\u7136\u51fd\u6570\u4f5c\u4e3a\u635f\u5931\u51fd\u6570, \u5176\u5b66\u4e60\u76ee\u6807\u662f\u635f\u5931\u51fd\u6570\u4e3a\u76ee\u6807\u51fd\u6570\u7684\u6700\u5c0f\u5316. \u6784\u5efa\u51b3\u7b56\u6811\u7684\u7b97\u6cd5\u901a\u5e38\u662f\u9012\u5f52\u5730\u9009\u62e9\u6700\u4f18\u7279\u5f81, \u5e76\u6839\u636e\u8be5\u7279\u5f81\u5bf9\u8bad\u7ec3\u6570\u636e\u96c6\u8fdb\u884c\u5206\u5272, \u5176\u6b65\u9aa4\u5982\u4e0b: \u6784\u5efa\u6839\u8282\u70b9\uff0c\u6240\u6709\u8bad\u7ec3\u6837\u672c\u90fd\u4f4d\u4e8e\u6839\u8282\u70b9. \u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7279\u5f81. \u901a\u8fc7\u8be5\u7279\u5f81\u5c06\u8bad\u7ec3\u6570\u636e\u5206\u5272\u6210\u5b50\u96c6, \u786e\u4fdd\u5404\u4e2a\u5b50\u96c6\u6709\u6700\u597d\u7684\u5206\u7c7b, \u4f46\u8981\u8003\u8651\u4e0b\u5217\u4e24\u79cd\u60c5\u51b5: \u82e5\u5b50\u96c6\u5df2\u80fd\u591f\u88ab\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u5219\u6784\u5efa\u53f6\u8282\u70b9, \u5e76\u5c06\u8be5\u5b50\u96c6\u5212\u5206\u5230\u5bf9\u5e94\u7684\u53f6\u8282\u70b9\u53bb \u82e5\u67d0\u4e2a\u5b50\u96c6\u4e0d\u80fd\u591f\u88ab\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u5219\u5bf9\u8be5\u5b50\u96c6\u7ee7\u7eed\u5212\u5206 \u9012\u5f52\u76f4\u81f3\u6240\u6709\u8bad\u7ec3\u6837\u672c\u90fd\u88ab\u8f83\u597d\u5730\u5206\u7c7b, \u6216\u8005\u6ca1\u6709\u5408\u9002\u7684\u7279\u5f81\u4e3a\u6b62. \u662f\u5426\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u53ef\u901a\u8fc7\u540e\u9762\u4ecb\u7ecd\u7684\u6307\u6807\u6765\u5224\u65ad. \u901a\u8fc7\u8be5\u6b65\u9aa4\u751f\u6210\u7684\u51b3\u7b56\u6811\u5bf9\u8bad\u7ec3\u6837\u672c\u6709\u5f88\u597d\u7684\u5206\u7c7b\u80fd\u529b, \u4f46\u662f\u6211\u4eec\u9700\u8981\u7684\u662f\u5bf9\u672a\u77e5\u6837\u672c\u7684\u5206\u7c7b\u80fd\u529b. \u56e0\u6b64\u901a\u5e38\u9700\u8981\u5bf9\u5df2\u751f\u6210\u7684\u51b3\u7b56\u6811\u8fdb\u884c\u526a\u679d, \u4ece\u800c\u4f7f\u5f97\u51b3\u7b56\u6811\u5177\u6709\u66f4\u597d\u7684\u6cdb\u5316\u80fd\u529b. \u526a\u679d\u8fc7\u7a0b\u662f\u53bb\u6389\u8fc7\u4e8e\u7ec6\u5206\u7684\u53f6\u8282\u70b9, \u4ece\u800c\u63d0\u9ad8\u6cdb\u5316\u80fd\u529b. \u7279\u5f81\u9009\u62e9\u4e3b\u8981\u57fa\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u6307\u6807: \u71b5, \u57fa\u5c3c\u7cfb\u6570\u548c\u65b9\u5dee. \u71b5 \u56de\u5fc6\u4e00\u4e0b\u4fe1\u606f\u8bba\u4e2d\u6709\u5173\u71b5(entropy)\u7684\u5b9a\u4e49. \u8bbe X \u662f\u4e00\u4e2a\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf, \u5176\u6982\u7387\u5206\u5e03\u4e3a $$ P(X=x_i) = p_i, i=1, 2, 3, .., n $$ \u5219\u968f\u673a\u53d8\u91cf\u7684\u71b5\u4e3a $$ H(X) = - \\sum_{i=1}^np_i \\log p_i $$ \u5176\u4e2d, log \u4ee5 2 \u4e3a\u5e95\u5e76\u5b9a\u4e49 $0 \\log 0 = 0$. \u4e3e\u4e2a\u6817\u5b50 \u4f8b: \u6709\u53d8\u91cf X, \u5b83\u53ef\u80fd\u7684\u53d6\u503c\u6709 0, 1, 2 \u4e09\u79cd, \u5176\u6982\u7387\u5206\u522b\u662f 0.25, 0.5 \u548c 0.25. \u90a3\u4e48 X \u7684\u71b5\u4e3a: $$ H(X) = -(\\frac{1}{4} \\log\\frac{1}{4} + \\frac{1}{2} \\log\\frac{1}{2} + 1/4 \\log\\frac{1}{4}) = 1.5 $$ \u5f53\u968f\u673a\u53d8\u91cf\u53ea\u6709\u4e24\u4e2a\u53d6\u503c\u65f6, \u5176\u6982\u7387\u4e0e\u71b5\u7684\u5173\u7cfb import math import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') def entropy(*c): return -sum([e * math.log2(e) if e != 0 else 0 for e in c]) p = np.linspace(0, 1, 50) h = np.empty_like(p) for i in range(50): h[i] = entropy(p[i], 1 - p[i]) plt.plot(p, h) plt.ylabel('H') plt.xlabel('P') plt.show() \u53ef\u4ee5\u770b\u5230, $P=0.5$ \u65f6, \u71b5\u6700\u5927, \u4e3a 1. \u5bf9\u4e8e\u6570\u636e\u96c6 D, \u6211\u4eec\u4f7f\u7528 $H(D)$ \u523b\u753b\u6570\u636e\u96c6 D \u7684\u71b5. \u7ed9\u5b9a\u7279\u5f81 A, \u5b9a\u4e49 \u4fe1\u606f\u589e\u76ca $g(D, A)=H(D) - H(D|A)$. \u4fe1\u606f\u589e\u76ca\u523b\u753b\u7684\u65f6\u7531\u4e8e\u7279\u5f81 A, \u4f7f\u5f97\u6570\u636e\u96c6 D \u7684\u4e0d\u786e\u5b9a\u6027\u51cf\u5c11\u7684\u7a0b\u5ea6. \u6784\u5efa\u51b3\u7b56\u6811\u65f6\u5e94\u9009\u62e9\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u7279\u5f81\u6765\u5212\u5206\u6570\u636e\u96c6. \u4f8b : \u6709\u5982\u4e0b\u6570\u636e\u96c6 D, \u6c42\u7279\u5f81 A \u7684\u4fe1\u606f\u589e\u76ca. A B Y 0 0 0 0 1 0 1 0 0 1 1 1 \u89e3 $$ \\begin{cases} H(D) = -(0.75 \\log 0.75 + 0.25 \\log 0.25) = 0.81 \\\\ H(D|A=0) = -(1 \\log 1 + 0 \\log 0) = 0 \\\\ H(D|A=1) = -(0.5 \\log 0.5 + 0.5 \\log 0.5) = 1.0 \\end{cases} $$ \u5219: $$ H(D|A) = P(A=0) * H(D|A=0) + P(A=1) * H(D|A=0) = 0.5 * 0 + 0.5 * 1.0 = 0.5 $$ \u56e0\u6b64\u7279\u5f81 A \u7684\u4fe1\u606f\u589e\u76ca\u4e3a $H(D) - H(D|A) = 0.81 - 0.5 = 0.31$ \u51b3\u7b56\u6811\u751f\u6210 \u57fa\u672c\u7684\u51b3\u7b56\u6811\u7684\u751f\u6210\u7b97\u6cd5\u4e2d, \u5178\u578b\u7684\u6709 ID3, C4.5 \u548c CART \u751f\u6210\u7b97\u6cd5, \u5b83\u4eec\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u5927\u81f4\u76f8\u4f3c. ID3 \u662f\u91c7\u7528\u7684\u4fe1\u606f\u589e\u76ca\u4f5c\u4e3a\u7279\u5f81\u9009\u62e9\u7684\u5ea6\u91cf, \u800c C4.5 \u5219\u91c7\u7528\u4fe1\u606f\u589e\u76ca\u6bd4, CART \u4e0e C4.5 \u975e\u5e38\u76f8\u4f3c, \u4f46\u5b83\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u652f\u6301\u6570\u503c\u76ee\u6807\u53d8\u91cf(\u56de\u5f52), \u5e76\u4e14\u4e0d\u8ba1\u7b97\u89c4\u5219\u96c6. ID3 \u751f\u6210\u7b97\u6cd5\u7684\u6b65\u9aa4\u5982\u4e0b: \u4f7f\u7528\u6240\u6709\u6ca1\u6709\u4f7f\u7528\u7684\u5c5e\u6027\u5e76\u8ba1\u7b97\u4e0e\u4e4b\u76f8\u5173\u7684\u4fe1\u606f\u589e\u76ca \u9009\u53d6\u5176\u4e2d\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u5c5e\u6027 \u751f\u6210\u5305\u542b\u8be5\u5c5e\u6027\u7684\u8282\u70b9 \u5b9e\u6218 sklearn \u4e2d\u6709\u4e24\u7c7b\u51b3\u7b56\u6811, \u5b83\u4eec\u5747\u91c7\u7528\u4f18\u5316\u7684 CART \u51b3\u7b56\u6811\u751f\u6210\u7b97\u6cd5. CART(\u5206\u7c7b\u56de\u5f52\u6811)\u662f\u4e00\u68f5\u4e8c\u53c9\u6811, \u4e14\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b69\u5b50, \u6240\u4ee5\u5bf9\u4e8e\u7b2c\u4e00\u68f5\u5b50\u6811\u5176\u53f6\u5b50\u8282\u70b9\u6570\u6bd4\u975e\u53f6\u5b50\u8282\u70b9\u6570\u591a1. \u6211\u9760, \u6211\u5df2\u7ecf\u5199\u4e0d\u52a8\u4e86. sklearn \u4e2d\u6709\u4e24\u7c7b\u51b3\u7b56\u6570, \u5206\u522b\u662f DecisionTreeClassifier \u548c DecisionTreeRegressor , \u5206\u522b\u7528\u4e0e\u89e3\u51b3\u5206\u7c7b\u548c\u56de\u5f52\u95ee\u9898. \u9996\u5148\u770b\u4e00\u4e0b\u5e94\u7528 DecisionTreeClassifier \u89e3\u51b3 iris \u6570\u636e\u96c6 \u5206\u7c7b : import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.tree iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.25, random_state=0, stratify=iris.target) clf = sklearn.tree.DecisionTreeClassifier() clf.fit(x_train, y_train) y_pred = clf.predict(x_test) # \u9884\u6d4b\u6837\u672c\u5206\u7c7b, \u4e5f\u53ef\u4ee5\u4f7f\u7528 predict_proba \u9884\u6d4b\u6bcf\u4e2a\u7c7b\u7684\u6982\u7387 acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 13 1 0.93 1.00 0.96 13 2 1.00 0.92 0.96 12 avg / total 0.98 0.97 0.97 38 DecisionTreeClassifier \u5305\u542b\u4e00\u7cfb\u5217\u53ef\u914d\u7f6e\u7684\u53c2\u6570, \u8be6\u7ec6\u53c2\u89c1: http://sklearn.apachecn.org/cn/0.19.0/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier \u4f7f\u7528 DecisionTreeRegressor \u89e3\u51b3 \u56de\u5f52 \u95ee\u9898. \u4e0b\u4f8b\u56de\u5f52\u4e00\u4e2a\u5e26\u6709\u968f\u673a\u566a\u58f0\u7684\u6b63\u5f26\u6ce2: import matplotlib.pyplot as plt import numpy as np import sklearn.tree rng = np.random.RandomState(1) x = np.sort(5 * rng.rand(80, 1), axis=0) y = np.sin(x).ravel() y[::5] += 3 * (0.5 - rng.rand(16)) # \u4f7f\u7528 min_samples_leaf=5 \u63a7\u5236\u53f6\u8282\u70b9\u7684\u6837\u672c\u6570\u91cf, \u9632\u6b62\u8fc7\u62df\u5408. # \u8fd9\u4e2a\u503c\u5f88\u5c0f\u65f6\u610f\u5473\u7740\u751f\u6210\u7684\u51b3\u7b56\u6811\u5c06\u4f1a\u8fc7\u62df\u5408\uff0c\u7136\u800c\u5f53\u8fd9\u4e2a\u503c\u5f88\u5927 # \u65f6\u5c06\u4f1a\u4e0d\u5229\u4e8e\u51b3\u7b56\u6811\u7684\u5bf9\u6837\u672c\u7684\u5b66\u4e60. \u6240\u4ee5\u5c1d\u8bd5 min_samples_leaf=5 \u4f5c\u4e3a\u521d\u59cb\u503c. regr = sklearn.tree.DecisionTreeRegressor(max_depth=5, min_samples_leaf=5) regr.fit(x, y) x_test = np.arange(0.0, 5.0, 0.01)[:, np.newaxis] y_test = np.sin(x_test).ravel() y_pred = regr.predict(x_test) print('Training score:', regr.score(x, y)) print('Testing score:', regr.score(x_test, y_test)) plt.figure() plt.scatter(x, y, s=20, edgecolor='black', c='darkorange', label='data') plt.plot(x_test, y_pred, color='cornflowerblue', label='max_depth=5', linewidth=2) plt.xlabel('data') plt.ylabel('target') plt.title('Decision Tree Regression') plt.legend() plt.show() Training score: 0.8062057896011524 Testing score: 0.9328689437179793 \u53ef\u89c6\u5316 \u7ecf\u8fc7\u8bad\u7ec3, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 export_graphviz \u5bfc\u51fa\u5668\u4ee5 Graphviz \u683c\u5f0f\u5bfc\u51fa\u51b3\u7b56\u6811. \u4ee5 iris \u6570\u636e\u96c6\u5206\u7c7b\u4e3a\u4f8b: sklearn.tree.export_graphviz(clf, '/tmp/clf.graphviz') \u7136\u540e\u4f7f\u7528 dot -Tpng clf.phz -o /tmp/clf.png \u83b7\u5f97 png \u683c\u5f0f\u7684\u53ef\u89c6\u5316\u56fe\u7247(\u9700\u8981\u5b89\u88c5 graphviz \u8f6f\u4ef6). \u53c2\u8003 [1] sklearn: \u51b3\u7b56\u6811 http://sklearn.apachecn.org/cn/0.19.0/modules/tree.html [2] \u534e\u6821\u4e13/\u738b\u6b63\u6797: Python\u5927\u6218\u673a\u5668\u5b66\u4e60.\u7b2c\u4e8c\u7ae0.\u51b3\u7b56\u6811 [3] wiki: ID3 algorithm https://en.wikipedia.org/wiki/ID3_algorithm","title":"sklearn-\u51b3\u7b56\u6811"},{"location":"content/daze/sklearn/tree/#_1","text":"\u51b3\u7b56\u6811(Decision Trees)\u662f\u4e00\u4e2a\u8d2a\u5fc3\u7b97\u6cd5, \u5b83\u5728\u7279\u5f81\u7a7a\u95f4\u4e0a\u6267\u884c\u9012\u5f52\u7684\u4e8c\u5143\u5206\u5272. \u51b3\u7b56\u6811\u7531\u8282\u70b9\u548c\u6709\u5411\u8fb9\u7ec4\u6210, \u5185\u90e8\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u7279\u5f81\u6216\u5c5e\u6027, \u53f6\u5b50\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u5206\u7c7b. \u51b3\u7b56\u6811\u672c\u8d28\u5c31\u662f\u4e00\u7cfb\u5217\u7684 if-then-else \u8bed\u53e5. \u6784\u5efa\u51b3\u7b56\u6811\u901a\u5e38\u5305\u542b\u4e09\u4e2a\u6b65\u9aa4: \u7279\u5f81\u9009\u62e9 \u51b3\u7b56\u6811\u751f\u6210 \u51b3\u7b56\u6811\u526a\u679d \u6784\u5efa\u51b3\u7b56\u6811\u65f6\u901a\u5e38\u5c06\u6b63\u5219\u5316\u7684\u6781\u5927\u4f3c\u7136\u51fd\u6570\u4f5c\u4e3a\u635f\u5931\u51fd\u6570, \u5176\u5b66\u4e60\u76ee\u6807\u662f\u635f\u5931\u51fd\u6570\u4e3a\u76ee\u6807\u51fd\u6570\u7684\u6700\u5c0f\u5316. \u6784\u5efa\u51b3\u7b56\u6811\u7684\u7b97\u6cd5\u901a\u5e38\u662f\u9012\u5f52\u5730\u9009\u62e9\u6700\u4f18\u7279\u5f81, \u5e76\u6839\u636e\u8be5\u7279\u5f81\u5bf9\u8bad\u7ec3\u6570\u636e\u96c6\u8fdb\u884c\u5206\u5272, \u5176\u6b65\u9aa4\u5982\u4e0b: \u6784\u5efa\u6839\u8282\u70b9\uff0c\u6240\u6709\u8bad\u7ec3\u6837\u672c\u90fd\u4f4d\u4e8e\u6839\u8282\u70b9. \u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7279\u5f81. \u901a\u8fc7\u8be5\u7279\u5f81\u5c06\u8bad\u7ec3\u6570\u636e\u5206\u5272\u6210\u5b50\u96c6, \u786e\u4fdd\u5404\u4e2a\u5b50\u96c6\u6709\u6700\u597d\u7684\u5206\u7c7b, \u4f46\u8981\u8003\u8651\u4e0b\u5217\u4e24\u79cd\u60c5\u51b5: \u82e5\u5b50\u96c6\u5df2\u80fd\u591f\u88ab\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u5219\u6784\u5efa\u53f6\u8282\u70b9, \u5e76\u5c06\u8be5\u5b50\u96c6\u5212\u5206\u5230\u5bf9\u5e94\u7684\u53f6\u8282\u70b9\u53bb \u82e5\u67d0\u4e2a\u5b50\u96c6\u4e0d\u80fd\u591f\u88ab\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u5219\u5bf9\u8be5\u5b50\u96c6\u7ee7\u7eed\u5212\u5206 \u9012\u5f52\u76f4\u81f3\u6240\u6709\u8bad\u7ec3\u6837\u672c\u90fd\u88ab\u8f83\u597d\u5730\u5206\u7c7b, \u6216\u8005\u6ca1\u6709\u5408\u9002\u7684\u7279\u5f81\u4e3a\u6b62. \u662f\u5426\"\u8f83\u597d\u5730\"\u5206\u7c7b, \u53ef\u901a\u8fc7\u540e\u9762\u4ecb\u7ecd\u7684\u6307\u6807\u6765\u5224\u65ad. \u901a\u8fc7\u8be5\u6b65\u9aa4\u751f\u6210\u7684\u51b3\u7b56\u6811\u5bf9\u8bad\u7ec3\u6837\u672c\u6709\u5f88\u597d\u7684\u5206\u7c7b\u80fd\u529b, \u4f46\u662f\u6211\u4eec\u9700\u8981\u7684\u662f\u5bf9\u672a\u77e5\u6837\u672c\u7684\u5206\u7c7b\u80fd\u529b. \u56e0\u6b64\u901a\u5e38\u9700\u8981\u5bf9\u5df2\u751f\u6210\u7684\u51b3\u7b56\u6811\u8fdb\u884c\u526a\u679d, \u4ece\u800c\u4f7f\u5f97\u51b3\u7b56\u6811\u5177\u6709\u66f4\u597d\u7684\u6cdb\u5316\u80fd\u529b. \u526a\u679d\u8fc7\u7a0b\u662f\u53bb\u6389\u8fc7\u4e8e\u7ec6\u5206\u7684\u53f6\u8282\u70b9, \u4ece\u800c\u63d0\u9ad8\u6cdb\u5316\u80fd\u529b. \u7279\u5f81\u9009\u62e9\u4e3b\u8981\u57fa\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u6307\u6807: \u71b5, \u57fa\u5c3c\u7cfb\u6570\u548c\u65b9\u5dee.","title":"\u6982\u89c8"},{"location":"content/daze/sklearn/tree/#_2","text":"\u56de\u5fc6\u4e00\u4e0b\u4fe1\u606f\u8bba\u4e2d\u6709\u5173\u71b5(entropy)\u7684\u5b9a\u4e49. \u8bbe X \u662f\u4e00\u4e2a\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf, \u5176\u6982\u7387\u5206\u5e03\u4e3a $$ P(X=x_i) = p_i, i=1, 2, 3, .., n $$ \u5219\u968f\u673a\u53d8\u91cf\u7684\u71b5\u4e3a $$ H(X) = - \\sum_{i=1}^np_i \\log p_i $$ \u5176\u4e2d, log \u4ee5 2 \u4e3a\u5e95\u5e76\u5b9a\u4e49 $0 \\log 0 = 0$. \u4e3e\u4e2a\u6817\u5b50 \u4f8b: \u6709\u53d8\u91cf X, \u5b83\u53ef\u80fd\u7684\u53d6\u503c\u6709 0, 1, 2 \u4e09\u79cd, \u5176\u6982\u7387\u5206\u522b\u662f 0.25, 0.5 \u548c 0.25. \u90a3\u4e48 X \u7684\u71b5\u4e3a: $$ H(X) = -(\\frac{1}{4} \\log\\frac{1}{4} + \\frac{1}{2} \\log\\frac{1}{2} + 1/4 \\log\\frac{1}{4}) = 1.5 $$ \u5f53\u968f\u673a\u53d8\u91cf\u53ea\u6709\u4e24\u4e2a\u53d6\u503c\u65f6, \u5176\u6982\u7387\u4e0e\u71b5\u7684\u5173\u7cfb import math import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') def entropy(*c): return -sum([e * math.log2(e) if e != 0 else 0 for e in c]) p = np.linspace(0, 1, 50) h = np.empty_like(p) for i in range(50): h[i] = entropy(p[i], 1 - p[i]) plt.plot(p, h) plt.ylabel('H') plt.xlabel('P') plt.show() \u53ef\u4ee5\u770b\u5230, $P=0.5$ \u65f6, \u71b5\u6700\u5927, \u4e3a 1. \u5bf9\u4e8e\u6570\u636e\u96c6 D, \u6211\u4eec\u4f7f\u7528 $H(D)$ \u523b\u753b\u6570\u636e\u96c6 D \u7684\u71b5. \u7ed9\u5b9a\u7279\u5f81 A, \u5b9a\u4e49 \u4fe1\u606f\u589e\u76ca $g(D, A)=H(D) - H(D|A)$. \u4fe1\u606f\u589e\u76ca\u523b\u753b\u7684\u65f6\u7531\u4e8e\u7279\u5f81 A, \u4f7f\u5f97\u6570\u636e\u96c6 D \u7684\u4e0d\u786e\u5b9a\u6027\u51cf\u5c11\u7684\u7a0b\u5ea6. \u6784\u5efa\u51b3\u7b56\u6811\u65f6\u5e94\u9009\u62e9\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u7279\u5f81\u6765\u5212\u5206\u6570\u636e\u96c6. \u4f8b : \u6709\u5982\u4e0b\u6570\u636e\u96c6 D, \u6c42\u7279\u5f81 A \u7684\u4fe1\u606f\u589e\u76ca. A B Y 0 0 0 0 1 0 1 0 0 1 1 1 \u89e3 $$ \\begin{cases} H(D) = -(0.75 \\log 0.75 + 0.25 \\log 0.25) = 0.81 \\\\ H(D|A=0) = -(1 \\log 1 + 0 \\log 0) = 0 \\\\ H(D|A=1) = -(0.5 \\log 0.5 + 0.5 \\log 0.5) = 1.0 \\end{cases} $$ \u5219: $$ H(D|A) = P(A=0) * H(D|A=0) + P(A=1) * H(D|A=0) = 0.5 * 0 + 0.5 * 1.0 = 0.5 $$ \u56e0\u6b64\u7279\u5f81 A \u7684\u4fe1\u606f\u589e\u76ca\u4e3a $H(D) - H(D|A) = 0.81 - 0.5 = 0.31$","title":"\u71b5"},{"location":"content/daze/sklearn/tree/#_3","text":"\u57fa\u672c\u7684\u51b3\u7b56\u6811\u7684\u751f\u6210\u7b97\u6cd5\u4e2d, \u5178\u578b\u7684\u6709 ID3, C4.5 \u548c CART \u751f\u6210\u7b97\u6cd5, \u5b83\u4eec\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u5927\u81f4\u76f8\u4f3c. ID3 \u662f\u91c7\u7528\u7684\u4fe1\u606f\u589e\u76ca\u4f5c\u4e3a\u7279\u5f81\u9009\u62e9\u7684\u5ea6\u91cf, \u800c C4.5 \u5219\u91c7\u7528\u4fe1\u606f\u589e\u76ca\u6bd4, CART \u4e0e C4.5 \u975e\u5e38\u76f8\u4f3c, \u4f46\u5b83\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u652f\u6301\u6570\u503c\u76ee\u6807\u53d8\u91cf(\u56de\u5f52), \u5e76\u4e14\u4e0d\u8ba1\u7b97\u89c4\u5219\u96c6. ID3 \u751f\u6210\u7b97\u6cd5\u7684\u6b65\u9aa4\u5982\u4e0b: \u4f7f\u7528\u6240\u6709\u6ca1\u6709\u4f7f\u7528\u7684\u5c5e\u6027\u5e76\u8ba1\u7b97\u4e0e\u4e4b\u76f8\u5173\u7684\u4fe1\u606f\u589e\u76ca \u9009\u53d6\u5176\u4e2d\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u5c5e\u6027 \u751f\u6210\u5305\u542b\u8be5\u5c5e\u6027\u7684\u8282\u70b9","title":"\u51b3\u7b56\u6811\u751f\u6210"},{"location":"content/daze/sklearn/tree/#_4","text":"sklearn \u4e2d\u6709\u4e24\u7c7b\u51b3\u7b56\u6811, \u5b83\u4eec\u5747\u91c7\u7528\u4f18\u5316\u7684 CART \u51b3\u7b56\u6811\u751f\u6210\u7b97\u6cd5. CART(\u5206\u7c7b\u56de\u5f52\u6811)\u662f\u4e00\u68f5\u4e8c\u53c9\u6811, \u4e14\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b69\u5b50, \u6240\u4ee5\u5bf9\u4e8e\u7b2c\u4e00\u68f5\u5b50\u6811\u5176\u53f6\u5b50\u8282\u70b9\u6570\u6bd4\u975e\u53f6\u5b50\u8282\u70b9\u6570\u591a1. \u6211\u9760, \u6211\u5df2\u7ecf\u5199\u4e0d\u52a8\u4e86. sklearn \u4e2d\u6709\u4e24\u7c7b\u51b3\u7b56\u6570, \u5206\u522b\u662f DecisionTreeClassifier \u548c DecisionTreeRegressor , \u5206\u522b\u7528\u4e0e\u89e3\u51b3\u5206\u7c7b\u548c\u56de\u5f52\u95ee\u9898. \u9996\u5148\u770b\u4e00\u4e0b\u5e94\u7528 DecisionTreeClassifier \u89e3\u51b3 iris \u6570\u636e\u96c6 \u5206\u7c7b : import sklearn.datasets import sklearn.metrics import sklearn.model_selection import sklearn.tree iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.25, random_state=0, stratify=iris.target) clf = sklearn.tree.DecisionTreeClassifier() clf.fit(x_train, y_train) y_pred = clf.predict(x_test) # \u9884\u6d4b\u6837\u672c\u5206\u7c7b, \u4e5f\u53ef\u4ee5\u4f7f\u7528 predict_proba \u9884\u6d4b\u6bcf\u4e2a\u7c7b\u7684\u6982\u7387 acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 13 1 0.93 1.00 0.96 13 2 1.00 0.92 0.96 12 avg / total 0.98 0.97 0.97 38 DecisionTreeClassifier \u5305\u542b\u4e00\u7cfb\u5217\u53ef\u914d\u7f6e\u7684\u53c2\u6570, \u8be6\u7ec6\u53c2\u89c1: http://sklearn.apachecn.org/cn/0.19.0/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier \u4f7f\u7528 DecisionTreeRegressor \u89e3\u51b3 \u56de\u5f52 \u95ee\u9898. \u4e0b\u4f8b\u56de\u5f52\u4e00\u4e2a\u5e26\u6709\u968f\u673a\u566a\u58f0\u7684\u6b63\u5f26\u6ce2: import matplotlib.pyplot as plt import numpy as np import sklearn.tree rng = np.random.RandomState(1) x = np.sort(5 * rng.rand(80, 1), axis=0) y = np.sin(x).ravel() y[::5] += 3 * (0.5 - rng.rand(16)) # \u4f7f\u7528 min_samples_leaf=5 \u63a7\u5236\u53f6\u8282\u70b9\u7684\u6837\u672c\u6570\u91cf, \u9632\u6b62\u8fc7\u62df\u5408. # \u8fd9\u4e2a\u503c\u5f88\u5c0f\u65f6\u610f\u5473\u7740\u751f\u6210\u7684\u51b3\u7b56\u6811\u5c06\u4f1a\u8fc7\u62df\u5408\uff0c\u7136\u800c\u5f53\u8fd9\u4e2a\u503c\u5f88\u5927 # \u65f6\u5c06\u4f1a\u4e0d\u5229\u4e8e\u51b3\u7b56\u6811\u7684\u5bf9\u6837\u672c\u7684\u5b66\u4e60. \u6240\u4ee5\u5c1d\u8bd5 min_samples_leaf=5 \u4f5c\u4e3a\u521d\u59cb\u503c. regr = sklearn.tree.DecisionTreeRegressor(max_depth=5, min_samples_leaf=5) regr.fit(x, y) x_test = np.arange(0.0, 5.0, 0.01)[:, np.newaxis] y_test = np.sin(x_test).ravel() y_pred = regr.predict(x_test) print('Training score:', regr.score(x, y)) print('Testing score:', regr.score(x_test, y_test)) plt.figure() plt.scatter(x, y, s=20, edgecolor='black', c='darkorange', label='data') plt.plot(x_test, y_pred, color='cornflowerblue', label='max_depth=5', linewidth=2) plt.xlabel('data') plt.ylabel('target') plt.title('Decision Tree Regression') plt.legend() plt.show() Training score: 0.8062057896011524 Testing score: 0.9328689437179793","title":"\u5b9e\u6218"},{"location":"content/daze/sklearn/tree/#_5","text":"\u7ecf\u8fc7\u8bad\u7ec3, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 export_graphviz \u5bfc\u51fa\u5668\u4ee5 Graphviz \u683c\u5f0f\u5bfc\u51fa\u51b3\u7b56\u6811. \u4ee5 iris \u6570\u636e\u96c6\u5206\u7c7b\u4e3a\u4f8b: sklearn.tree.export_graphviz(clf, '/tmp/clf.graphviz') \u7136\u540e\u4f7f\u7528 dot -Tpng clf.phz -o /tmp/clf.png \u83b7\u5f97 png \u683c\u5f0f\u7684\u53ef\u89c6\u5316\u56fe\u7247(\u9700\u8981\u5b89\u88c5 graphviz \u8f6f\u4ef6).","title":"\u53ef\u89c6\u5316"},{"location":"content/daze/sklearn/tree/#_6","text":"[1] sklearn: \u51b3\u7b56\u6811 http://sklearn.apachecn.org/cn/0.19.0/modules/tree.html [2] \u534e\u6821\u4e13/\u738b\u6b63\u6797: Python\u5927\u6218\u673a\u5668\u5b66\u4e60.\u7b2c\u4e8c\u7ae0.\u51b3\u7b56\u6811 [3] wiki: ID3 algorithm https://en.wikipedia.org/wiki/ID3_algorithm","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/liner_model/linear_regression/","text":"\u6982\u89c8 \u6700\u5c0f\u4e8c\u4e58\u6cd5(\u53c8\u79f0\u6700\u5c0f\u5e73\u65b9\u6cd5)\u662f\u4e00\u79cd\u6570\u5b66\u4f18\u5316\u6280\u672f. \u5b83\u901a\u8fc7\u6700\u5c0f\u5316 \u6b8b\u5dee\u5e73\u65b9\u548c \u5bfb\u627e\u6570\u636e\u7684\u6700\u4f73\u51fd\u6570\u5339\u914d. \u5229\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u53ef\u4ee5\u7b80\u4fbf\u5730\u6c42\u5f97\u672a\u77e5\u7684\u6570\u636e, \u5e76\u4f7f\u5f97\u8fd9\u4e9b\u6c42\u5f97\u7684\u6570\u636e\u4e0e\u5b9e\u9645\u6570\u636e\u4e4b\u95f4\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u4e3a\u6700\u5c0f. \u6ce8: \u771f\u5b9e\u503c\u4e0e\u9884\u6d4b\u503c\u4e4b\u95f4\u7684\u8bef\u5dee\u79f0\u4e3a\u6b8b\u5dee, \u8bef\u5dee\u7684\u5e73\u65b9\u548c\u79f0\u4e3a\u6b8b\u5dee\u5e73\u65b9\u548c \u793a\u4f8b \u4f7f\u7528 sklearn.linear_model.LinearRegression \u62df\u5408\u4e00\u7cfb\u5217\u4e00\u7ef4\u6570\u636e. import matplotlib.pyplot as plt import numpy as np import sklearn.datasets import sklearn.linear_model import sklearn.metrics diabetes = sklearn.datasets.load_diabetes() diabetes_X = diabetes.data[:, np.newaxis, 2] print('X.shape:', diabetes_X.shape) print('Y.shape:', diabetes.target.shape) diabetes_X_train = diabetes_X[:-20] diabetes_X_test = diabetes_X[-20:] diabetes_y_train = diabetes.target[:-20] diabetes_y_test = diabetes.target[-20:] regr = sklearn.linear_model.LinearRegression() regr.fit(diabetes_X_train, diabetes_y_train) print(f'w={regr.coef_}, b={regr.intercept_}') diabetes_y_pred = regr.predict(diabetes_X_test) print('Coefficients:', regr.coef_) print('Mean squared error: %.2f' % sklearn.metrics.mean_squared_error(diabetes_y_test, diabetes_y_pred)) print('Variance score: %.2f' % sklearn.metrics.r2_score(diabetes_y_test, diabetes_y_pred)) plt.style.use('seaborn') _, axes = plt.subplots(2) axes[0].scatter(diabetes_X_train, diabetes_y_train, color='red', alpha=0.5) axes[0].plot(diabetes_X_train, regr.predict(diabetes_X_train), color='blue', alpha=0.5, linewidth=3) axes[1].scatter(diabetes_X_test, diabetes_y_test, color='red', alpha=0.5) axes[1].plot(diabetes_X_test, diabetes_y_pred, color='blue', alpha=0.5, linewidth=3) plt.show() X.shape: (442, 1) Y.shape: (442,) w=[938.23786125], b=152.91886182616167 Coefficients: [938.23786125] Mean squared error: 2548.07 Variance score: 0.47 \u6ce8\u610f: \u6700\u5c0f\u4e8c\u4e58\u6cd5\u5bf9 $w$ \u7684\u4f30\u8ba1, \u662f\u57fa\u4e8e\u6a21\u578b\u4e2d\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u7684\u57fa\u672c\u5047\u8bbe\u7684, \u5373\u8f93\u5165\u5411\u91cf $x$ \u4e2d\u7684\u4efb\u610f\u4e24\u9879 $x_i$ \u548c $x_j$ \u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684. \u5982\u679c\u8f93\u5165\u77e9\u9635 $X$ \u4e2d\u5b58\u5728\u7ebf\u6027\u76f8\u5173\u6216\u8005\u8fd1\u4f3c\u7ebf\u6027\u76f8\u5173\u7684\u5217, \u90a3\u4e48\u8f93\u5165\u77e9\u9635 $X$ \u5c31\u4f1a\u53d8\u6210\u6216\u8005\u8fd1\u4f3c\u53d8\u6210\u5947\u5f02\u77e9\u9635(singular matrix). \u8fd9\u662f\u4e00\u79cd\u75c5\u6001\u77e9\u9635, \u77e9\u9635\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u53d1\u751f\u4e00\u70b9\u53d8\u52a8, \u6574\u4e2a\u77e9\u9635\u7684\u884c\u5217\u5f0f\u7684\u503c\u548c\u9006\u77e9\u9635\u90fd\u4f1a\u53d1\u751f\u5de8\u5927\u53d8\u5316. \u8fd9\u5c06\u5bfc\u81f4\u6700\u5c0f\u4e8c\u4e58\u6cd5\u5bf9\u89c2\u6d4b\u6570\u636e\u7684\u968f\u673a\u8bef\u5dee\u6781\u4e3a\u654f\u611f, \u8fdb\u800c\u4f7f\u5f97\u6700\u540e\u7684\u7ebf\u6027\u6a21\u578b\u4ea7\u751f\u975e\u5e38\u5927\u7684\u65b9\u5dee, \u8fd9\u4e2a\u5728\u6570\u5b66\u4e0a\u79f0\u4e3a \u591a\u91cd\u5171\u7ebf\u6027 (multicollinearity). \u53c2\u8003 [1] \u7ef4\u57fa: \u6700\u5c0f\u4e8c\u4e58\u6cd5 https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95 [2] \u4e8e\u6dfc: \u6700\u5c0f\u4e8c\u4e58\u6cd5?\u4e3a\u795e\u9a6c\u4e0d\u662f\u5dee\u7684\u7edd\u5bf9\u503c http://blog.sciencenet.cn/blog-430956-621997.html","title":"sklearn-\u7ebf\u6027\u6a21\u578b-\u666e\u901a\u6700\u5c0f\u4e8c\u4e58\u6cd5"},{"location":"content/daze/sklearn/liner_model/linear_regression/#_1","text":"\u6700\u5c0f\u4e8c\u4e58\u6cd5(\u53c8\u79f0\u6700\u5c0f\u5e73\u65b9\u6cd5)\u662f\u4e00\u79cd\u6570\u5b66\u4f18\u5316\u6280\u672f. \u5b83\u901a\u8fc7\u6700\u5c0f\u5316 \u6b8b\u5dee\u5e73\u65b9\u548c \u5bfb\u627e\u6570\u636e\u7684\u6700\u4f73\u51fd\u6570\u5339\u914d. \u5229\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u53ef\u4ee5\u7b80\u4fbf\u5730\u6c42\u5f97\u672a\u77e5\u7684\u6570\u636e, \u5e76\u4f7f\u5f97\u8fd9\u4e9b\u6c42\u5f97\u7684\u6570\u636e\u4e0e\u5b9e\u9645\u6570\u636e\u4e4b\u95f4\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u4e3a\u6700\u5c0f. \u6ce8: \u771f\u5b9e\u503c\u4e0e\u9884\u6d4b\u503c\u4e4b\u95f4\u7684\u8bef\u5dee\u79f0\u4e3a\u6b8b\u5dee, \u8bef\u5dee\u7684\u5e73\u65b9\u548c\u79f0\u4e3a\u6b8b\u5dee\u5e73\u65b9\u548c","title":"\u6982\u89c8"},{"location":"content/daze/sklearn/liner_model/linear_regression/#_2","text":"\u4f7f\u7528 sklearn.linear_model.LinearRegression \u62df\u5408\u4e00\u7cfb\u5217\u4e00\u7ef4\u6570\u636e. import matplotlib.pyplot as plt import numpy as np import sklearn.datasets import sklearn.linear_model import sklearn.metrics diabetes = sklearn.datasets.load_diabetes() diabetes_X = diabetes.data[:, np.newaxis, 2] print('X.shape:', diabetes_X.shape) print('Y.shape:', diabetes.target.shape) diabetes_X_train = diabetes_X[:-20] diabetes_X_test = diabetes_X[-20:] diabetes_y_train = diabetes.target[:-20] diabetes_y_test = diabetes.target[-20:] regr = sklearn.linear_model.LinearRegression() regr.fit(diabetes_X_train, diabetes_y_train) print(f'w={regr.coef_}, b={regr.intercept_}') diabetes_y_pred = regr.predict(diabetes_X_test) print('Coefficients:', regr.coef_) print('Mean squared error: %.2f' % sklearn.metrics.mean_squared_error(diabetes_y_test, diabetes_y_pred)) print('Variance score: %.2f' % sklearn.metrics.r2_score(diabetes_y_test, diabetes_y_pred)) plt.style.use('seaborn') _, axes = plt.subplots(2) axes[0].scatter(diabetes_X_train, diabetes_y_train, color='red', alpha=0.5) axes[0].plot(diabetes_X_train, regr.predict(diabetes_X_train), color='blue', alpha=0.5, linewidth=3) axes[1].scatter(diabetes_X_test, diabetes_y_test, color='red', alpha=0.5) axes[1].plot(diabetes_X_test, diabetes_y_pred, color='blue', alpha=0.5, linewidth=3) plt.show() X.shape: (442, 1) Y.shape: (442,) w=[938.23786125], b=152.91886182616167 Coefficients: [938.23786125] Mean squared error: 2548.07 Variance score: 0.47 \u6ce8\u610f: \u6700\u5c0f\u4e8c\u4e58\u6cd5\u5bf9 $w$ \u7684\u4f30\u8ba1, \u662f\u57fa\u4e8e\u6a21\u578b\u4e2d\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u7684\u57fa\u672c\u5047\u8bbe\u7684, \u5373\u8f93\u5165\u5411\u91cf $x$ \u4e2d\u7684\u4efb\u610f\u4e24\u9879 $x_i$ \u548c $x_j$ \u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684. \u5982\u679c\u8f93\u5165\u77e9\u9635 $X$ \u4e2d\u5b58\u5728\u7ebf\u6027\u76f8\u5173\u6216\u8005\u8fd1\u4f3c\u7ebf\u6027\u76f8\u5173\u7684\u5217, \u90a3\u4e48\u8f93\u5165\u77e9\u9635 $X$ \u5c31\u4f1a\u53d8\u6210\u6216\u8005\u8fd1\u4f3c\u53d8\u6210\u5947\u5f02\u77e9\u9635(singular matrix). \u8fd9\u662f\u4e00\u79cd\u75c5\u6001\u77e9\u9635, \u77e9\u9635\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u53d1\u751f\u4e00\u70b9\u53d8\u52a8, \u6574\u4e2a\u77e9\u9635\u7684\u884c\u5217\u5f0f\u7684\u503c\u548c\u9006\u77e9\u9635\u90fd\u4f1a\u53d1\u751f\u5de8\u5927\u53d8\u5316. \u8fd9\u5c06\u5bfc\u81f4\u6700\u5c0f\u4e8c\u4e58\u6cd5\u5bf9\u89c2\u6d4b\u6570\u636e\u7684\u968f\u673a\u8bef\u5dee\u6781\u4e3a\u654f\u611f, \u8fdb\u800c\u4f7f\u5f97\u6700\u540e\u7684\u7ebf\u6027\u6a21\u578b\u4ea7\u751f\u975e\u5e38\u5927\u7684\u65b9\u5dee, \u8fd9\u4e2a\u5728\u6570\u5b66\u4e0a\u79f0\u4e3a \u591a\u91cd\u5171\u7ebf\u6027 (multicollinearity).","title":"\u793a\u4f8b"},{"location":"content/daze/sklearn/liner_model/linear_regression/#_3","text":"[1] \u7ef4\u57fa: \u6700\u5c0f\u4e8c\u4e58\u6cd5 https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95 [2] \u4e8e\u6dfc: \u6700\u5c0f\u4e8c\u4e58\u6cd5?\u4e3a\u795e\u9a6c\u4e0d\u662f\u5dee\u7684\u7edd\u5bf9\u503c http://blog.sciencenet.cn/blog-430956-621997.html","title":"\u53c2\u8003"},{"location":"content/daze/sklearn/liner_model/logistic_regression/","text":"\u903b\u8f91\u51fd\u6570 \u7ebf\u6027\u6a21\u578b\u9664\u4e86\u8fdb\u884c\u56de\u5f52, \u8fd8\u53ef\u4ee5\u8fdb\u884c\u5206\u7c7b. \u8003\u8651\u5230 $f(x, w) = w^Tx + b$ \u662f\u5728 $[-\\infty, +\\infty]$ \u4e0a\u8fde\u7eed\u7684, \u4e0d\u7b26\u5408\u6982\u7387\u7684\u53d6\u503c\u8303\u56f4 0 ~ 1, \u56e0\u6b64\u6211\u4eec\u8003\u8651\u4f7f\u7528\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b, \u6700\u7406\u60f3\u7684\u662f\u5355\u4f4d\u9636\u8dc3\u51fd\u6570: $$ P(z) = \\begin{cases} 0 & z < 0 \\\\ 0.5 & z = 0 \\\\ 1 & z > 0 \\end{cases} $$ \u4f46\u662f\u9636\u8dc3\u51fd\u6570\u4e0d\u6ee1\u8db3\u5355\u8c03\u53ef\u5bfc\u7684\u6027\u8d28, \u56e0\u6b64\u6211\u4eec\u9000\u800c\u6c42\u5176\u6b21, \u4f7f\u7528\u903b\u8f91\u51fd\u6570(\u5bf9\u6570\u6982\u7387\u51fd\u6570)\u66ff\u4ee3: $P(z) = \\frac{1}{1+e^{-z}}$ # \u903b\u8f91\u51fd\u6570\u66f2\u7ebf import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-10, 10, 100) y = 1 / (1 + np.power(np.e, -1 * x)) plt.plot(x, y, label='1 / (1 + e^-z)') plt.scatter([0], [0.5]) plt.legend(loc='lower right') plt.show() \u4ee3\u7801\u793a\u4f8b \u5728 sklearn \u4e2d, sklearn.linear_model.LogisticRegression \u5b9e\u73b0\u4e86\u903b\u8f91\u56de\u5f52\u6a21\u578b. \u4e0b\u9762\u6765\u5b9e\u73b0\u4ee5\u4e0b iris \u6570\u636e\u96c6\u7684\u5206\u7c7b. \u6ce8\u610f\u6211\u4eec\u4f7f\u7528\u4e86\u53c2\u6570 penalty='l1' \u548c solver='saga' . \u5bf9\u4e8e\u5927\u591a\u6570\u4efb\u52a1\u800c\u8a00, \u8fd9\u4e24\u4e2a\u53c2\u6570\u5747\u4e3a\u6700\u4f73\u9009\u62e9. import sklearn.datasets import sklearn.linear_model import sklearn.metrics import sklearn.model_selection iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.25, random_state=0, stratify=iris.target) regr = sklearn.linear_model.LogisticRegression(penalty='l1', solver='saga', max_iter=100) regr.fit(x_train, y_train) y_pred = regr.predict(x_test) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 13 1 1.00 1.00 1.00 13 2 1.00 1.00 1.00 12 avg / total 1.00 1.00 1.00 38","title":"sklearn-\u7ebf\u6027\u6a21\u578b-\u903b\u8f91\u56de\u5f52"},{"location":"content/daze/sklearn/liner_model/logistic_regression/#_1","text":"\u7ebf\u6027\u6a21\u578b\u9664\u4e86\u8fdb\u884c\u56de\u5f52, \u8fd8\u53ef\u4ee5\u8fdb\u884c\u5206\u7c7b. \u8003\u8651\u5230 $f(x, w) = w^Tx + b$ \u662f\u5728 $[-\\infty, +\\infty]$ \u4e0a\u8fde\u7eed\u7684, \u4e0d\u7b26\u5408\u6982\u7387\u7684\u53d6\u503c\u8303\u56f4 0 ~ 1, \u56e0\u6b64\u6211\u4eec\u8003\u8651\u4f7f\u7528\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b, \u6700\u7406\u60f3\u7684\u662f\u5355\u4f4d\u9636\u8dc3\u51fd\u6570: $$ P(z) = \\begin{cases} 0 & z < 0 \\\\ 0.5 & z = 0 \\\\ 1 & z > 0 \\end{cases} $$ \u4f46\u662f\u9636\u8dc3\u51fd\u6570\u4e0d\u6ee1\u8db3\u5355\u8c03\u53ef\u5bfc\u7684\u6027\u8d28, \u56e0\u6b64\u6211\u4eec\u9000\u800c\u6c42\u5176\u6b21, \u4f7f\u7528\u903b\u8f91\u51fd\u6570(\u5bf9\u6570\u6982\u7387\u51fd\u6570)\u66ff\u4ee3: $P(z) = \\frac{1}{1+e^{-z}}$ # \u903b\u8f91\u51fd\u6570\u66f2\u7ebf import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-10, 10, 100) y = 1 / (1 + np.power(np.e, -1 * x)) plt.plot(x, y, label='1 / (1 + e^-z)') plt.scatter([0], [0.5]) plt.legend(loc='lower right') plt.show()","title":"\u903b\u8f91\u51fd\u6570"},{"location":"content/daze/sklearn/liner_model/logistic_regression/#_2","text":"\u5728 sklearn \u4e2d, sklearn.linear_model.LogisticRegression \u5b9e\u73b0\u4e86\u903b\u8f91\u56de\u5f52\u6a21\u578b. \u4e0b\u9762\u6765\u5b9e\u73b0\u4ee5\u4e0b iris \u6570\u636e\u96c6\u7684\u5206\u7c7b. \u6ce8\u610f\u6211\u4eec\u4f7f\u7528\u4e86\u53c2\u6570 penalty='l1' \u548c solver='saga' . \u5bf9\u4e8e\u5927\u591a\u6570\u4efb\u52a1\u800c\u8a00, \u8fd9\u4e24\u4e2a\u53c2\u6570\u5747\u4e3a\u6700\u4f73\u9009\u62e9. import sklearn.datasets import sklearn.linear_model import sklearn.metrics import sklearn.model_selection iris = sklearn.datasets.load_iris() x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( iris.data, iris.target, test_size=0.25, random_state=0, stratify=iris.target) regr = sklearn.linear_model.LogisticRegression(penalty='l1', solver='saga', max_iter=100) regr.fit(x_train, y_train) y_pred = regr.predict(x_test) acc = sklearn.metrics.classification_report(y_test, y_pred) print(acc) precision recall f1-score support 0 1.00 1.00 1.00 13 1 1.00 1.00 1.00 13 2 1.00 1.00 1.00 12 avg / total 1.00 1.00 1.00 38","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"content/daze/sklearn/liner_model/overview/","text":"\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b \u7ebf\u6027\u6a21\u578b(Linear Model)\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u6a21\u578b, \u6307\u901a\u8fc7\u6837\u672c\u7279\u5f81\u7684\u7ebf\u6027\u7ec4\u5408\u6765\u8fdb\u884c\u9884\u6d4b\u7684\u6a21\u578b(\u5373\u56de\u5f52). \u5176\u4e2d\u76ee\u6807\u503c\u662f\u8f93\u5165\u53d8\u91cf x \u7684\u7ebf\u6027\u7ec4\u5408. \u5728\u6570\u5b66\u6982\u5ff5\u4e2d: $$ f(x, w) = w_0 + w_1x_1 + ... + w_px_p = w^Tx + b $$ \u5176\u4e2d $x=[x_1, x_2, ..., x_p]$, $w=[w_1, w_2, ..., w_p]$, $b$ \u4e3a\u5e38\u6570. \u6ce8: \u5728\u5176\u4ed6\u5730\u65b9\u4f60\u53ef\u80fd\u4f1a\u89c1\u5230 $f(x, w) = w^Tx$ \u7684\u8868\u793a, \u6b64\u65f6 $x=[1, x_1, x_2, ..., x_p]$, $w=[w_0, w_1, w_2, ..., w_p]$, \u5206\u522b\u4e3a p+1 \u7ef4\u7684 \u589e\u5e7f\u7279\u5f81\u5411\u91cf \u548c \u589e\u5e7f\u6743\u91cd\u5411\u91cf . \u5728\u7ebf\u6027\u56de\u5f52\u95ee\u9898\u4e2d, \u53ef\u4ee5\u76f4\u63a5\u7528 $f(x, w)$ \u6765\u9884\u6d4b\u8f93\u51fa\u76ee\u6807. \u4f46\u5728\u5206\u7c7b\u95ee\u9898\u4e2d, \u7531\u4e8e\u8f93\u51fa\u76ee\u6807\u662f\u4e00\u4e9b\u79bb\u6563\u7684\u6807\u7b7e\u6216\u8005\u662f\u8fd9\u4e9b\u6807\u7b7e\u7684\u540e\u9a8c\u6982\u7387\u800c $f(x, w)$ \u7684\u503c\u57df\u4e3a\u5b9e\u6570, \u56e0\u6b64\u65e0\u6cd5\u76f4\u63a5\u7528\u6765\u8fdb\u884c\u9884\u6d4b, \u9700\u8981\u5f15\u5165\u4e00\u4e2a\u975e\u7ebf\u6027\u7684 \u6fc0\u6d3b\u51fd\u6570 (Activation Function) $g$ \u6765\u9884\u6d4b\u8f93\u51fa\u76ee\u6807. \u5bf9\u4e8e\u7b80\u5355\u7684\u4e24\u5206\u7c7b\u6a21\u578b, \u6fc0\u6d3b\u51fd\u6570 $g$ \u53ef\u4ee5\u4e3a\u9636\u8dc3\u51fd\u6570: $$ g(x, w) = \\begin{cases} +1 & w^Tx+b > 0 \\\\ -1 & w^Tx+b < 0 \\end{cases} $$ \u4e0a\u8ff0\u516c\u5f0f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u4e24\u7c7b\u5206\u7c7b\u95ee\u9898\u7684\u7ebf\u6027\u51b3\u7b56\u51fd\u6570, \u5728\u9ad8\u7ef4\u7684\u7279\u5f81\u7a7a\u95f4\u4e2d, \u6240\u6709\u6ee1\u8db3 $w^Tx+b=0$ \u7684\u70b9\u7ec4\u6210\u4e00\u4e2a\u5206\u5272\u8d85\u5e73\u9762(Hyperplane). \u8fd9\u4e2a\u8d85\u5e73\u9762\u5c06\u7279\u5f81\u7a7a\u95f4\u4e00\u5206\u4e3a\u4e8c, \u5212\u5206\u6210\u4e24\u4e2a\u533a\u57df, \u6bcf\u4e2a\u533a\u57df\u5bf9\u5e94\u4e00\u4e2a\u7c7b\u522b. \u56e0\u6b64, \u8fd9\u4e2a\u5206\u5272\u8d85\u5e73\u9762\u4e5f\u79f0\u4e3a \u51b3\u7b56\u8fb9\u754c \u6216 \u51b3\u7b56\u5e73\u9762 . \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d, \u51b3\u7b56\u8fb9\u754c\u4e3a\u4e00\u4e2a\u76f4\u7ebf. \u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d, \u5206\u7c7b\u754c\u9762\u4e3a\u4e00\u4e2a\u5e73\u9762. \u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d, \u5206\u7c7b\u754c\u9762\u4e3a\u4e00\u4e2a\u8d85\u5e73\u9762. \u5bf9\u4e8e\u7ebf\u6027\u5206\u7c7b\u5668\u800c\u8a00, \u5176\u6743\u91cd\u5411\u91cf\u4e0e\u51b3\u7b56\u5e73\u9762\u6b63\u4ea4. \u5bf9\u4e8e\u7ebf\u6027\u5206\u7c7b\u6a21\u578b\u6765\u8bf4, \u4e00\u4e2a\u5173\u952e\u7684\u95ee\u9898\u662f\u5982\u4f55\u5b66\u4e60\u53c2\u6570 $w$ \u548c $b$, \u4e5f\u5c31\u662f\u5982\u4f55\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u4ee5\u53ca\u4f18\u5316\u65b9\u6cd5.","title":"sklearn-\u7ebf\u6027\u6a21\u578b-\u6982\u89c8"},{"location":"content/daze/sklearn/liner_model/overview/#_1","text":"\u7ebf\u6027\u6a21\u578b(Linear Model)\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u6a21\u578b, \u6307\u901a\u8fc7\u6837\u672c\u7279\u5f81\u7684\u7ebf\u6027\u7ec4\u5408\u6765\u8fdb\u884c\u9884\u6d4b\u7684\u6a21\u578b(\u5373\u56de\u5f52). \u5176\u4e2d\u76ee\u6807\u503c\u662f\u8f93\u5165\u53d8\u91cf x \u7684\u7ebf\u6027\u7ec4\u5408. \u5728\u6570\u5b66\u6982\u5ff5\u4e2d: $$ f(x, w) = w_0 + w_1x_1 + ... + w_px_p = w^Tx + b $$ \u5176\u4e2d $x=[x_1, x_2, ..., x_p]$, $w=[w_1, w_2, ..., w_p]$, $b$ \u4e3a\u5e38\u6570. \u6ce8: \u5728\u5176\u4ed6\u5730\u65b9\u4f60\u53ef\u80fd\u4f1a\u89c1\u5230 $f(x, w) = w^Tx$ \u7684\u8868\u793a, \u6b64\u65f6 $x=[1, x_1, x_2, ..., x_p]$, $w=[w_0, w_1, w_2, ..., w_p]$, \u5206\u522b\u4e3a p+1 \u7ef4\u7684 \u589e\u5e7f\u7279\u5f81\u5411\u91cf \u548c \u589e\u5e7f\u6743\u91cd\u5411\u91cf . \u5728\u7ebf\u6027\u56de\u5f52\u95ee\u9898\u4e2d, \u53ef\u4ee5\u76f4\u63a5\u7528 $f(x, w)$ \u6765\u9884\u6d4b\u8f93\u51fa\u76ee\u6807. \u4f46\u5728\u5206\u7c7b\u95ee\u9898\u4e2d, \u7531\u4e8e\u8f93\u51fa\u76ee\u6807\u662f\u4e00\u4e9b\u79bb\u6563\u7684\u6807\u7b7e\u6216\u8005\u662f\u8fd9\u4e9b\u6807\u7b7e\u7684\u540e\u9a8c\u6982\u7387\u800c $f(x, w)$ \u7684\u503c\u57df\u4e3a\u5b9e\u6570, \u56e0\u6b64\u65e0\u6cd5\u76f4\u63a5\u7528\u6765\u8fdb\u884c\u9884\u6d4b, \u9700\u8981\u5f15\u5165\u4e00\u4e2a\u975e\u7ebf\u6027\u7684 \u6fc0\u6d3b\u51fd\u6570 (Activation Function) $g$ \u6765\u9884\u6d4b\u8f93\u51fa\u76ee\u6807. \u5bf9\u4e8e\u7b80\u5355\u7684\u4e24\u5206\u7c7b\u6a21\u578b, \u6fc0\u6d3b\u51fd\u6570 $g$ \u53ef\u4ee5\u4e3a\u9636\u8dc3\u51fd\u6570: $$ g(x, w) = \\begin{cases} +1 & w^Tx+b > 0 \\\\ -1 & w^Tx+b < 0 \\end{cases} $$ \u4e0a\u8ff0\u516c\u5f0f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u4e24\u7c7b\u5206\u7c7b\u95ee\u9898\u7684\u7ebf\u6027\u51b3\u7b56\u51fd\u6570, \u5728\u9ad8\u7ef4\u7684\u7279\u5f81\u7a7a\u95f4\u4e2d, \u6240\u6709\u6ee1\u8db3 $w^Tx+b=0$ \u7684\u70b9\u7ec4\u6210\u4e00\u4e2a\u5206\u5272\u8d85\u5e73\u9762(Hyperplane). \u8fd9\u4e2a\u8d85\u5e73\u9762\u5c06\u7279\u5f81\u7a7a\u95f4\u4e00\u5206\u4e3a\u4e8c, \u5212\u5206\u6210\u4e24\u4e2a\u533a\u57df, \u6bcf\u4e2a\u533a\u57df\u5bf9\u5e94\u4e00\u4e2a\u7c7b\u522b. \u56e0\u6b64, \u8fd9\u4e2a\u5206\u5272\u8d85\u5e73\u9762\u4e5f\u79f0\u4e3a \u51b3\u7b56\u8fb9\u754c \u6216 \u51b3\u7b56\u5e73\u9762 . \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d, \u51b3\u7b56\u8fb9\u754c\u4e3a\u4e00\u4e2a\u76f4\u7ebf. \u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d, \u5206\u7c7b\u754c\u9762\u4e3a\u4e00\u4e2a\u5e73\u9762. \u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d, \u5206\u7c7b\u754c\u9762\u4e3a\u4e00\u4e2a\u8d85\u5e73\u9762. \u5bf9\u4e8e\u7ebf\u6027\u5206\u7c7b\u5668\u800c\u8a00, \u5176\u6743\u91cd\u5411\u91cf\u4e0e\u51b3\u7b56\u5e73\u9762\u6b63\u4ea4. \u5bf9\u4e8e\u7ebf\u6027\u5206\u7c7b\u6a21\u578b\u6765\u8bf4, \u4e00\u4e2a\u5173\u952e\u7684\u95ee\u9898\u662f\u5982\u4f55\u5b66\u4e60\u53c2\u6570 $w$ \u548c $b$, \u4e5f\u5c31\u662f\u5982\u4f55\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u4ee5\u53ca\u4f18\u5316\u65b9\u6cd5.","title":"\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b"},{"location":"content/daze/sklearn/liner_model/ridge/","text":"\u591a\u91cd\u5171\u7ebf\u6027\u7684\u6982\u5ff5 \u5bf9\u4e8e\u6a21\u578b $f(x, w) = w_0 + w_1x_1 + ... + w_px_p = w^Tx + b$ \u5176\u57fa\u672c\u5047\u8bbe\u4e4b\u4e00\u662f\u89e3\u91ca\u53d8\u91cf\u662f\u4e92\u76f8\u72ec\u7acb\u7684. \u5982\u679c\u67d0\u4e24\u4e2a\u6216\u591a\u4e2a\u89e3\u91ca\u53d8\u91cf\u4e4b\u95f4\u51fa\u73b0\u4e86\u76f8\u5173\u6027, \u5219\u79f0\u4e3a \u591a\u91cd\u5171\u7ebf\u6027 (Multicollinearity). \u5982\u679c\u5b58\u5728 $c_1x_1 + c_2x_2 + \u2026 + c_px_p=0$, \u5176\u4e2d: $c_p$ \u4e0d\u5168\u4e3a0, \u5219\u79f0\u4e3a\u89e3\u91ca\u53d8\u91cf\u95f4\u5b58\u5728 \u5b8c\u5168\u5171\u7ebf\u6027 . \u5982\u679c\u5b58\u5728 $c_1x_1 + c_2x_2 + \u2026 + c_px_p + v = 0$, $v$ \u4e3a\u968f\u673a\u8bef\u5dee\u9879, \u5219\u79f0\u4e3a \u8fd1\u4f3c\u5171\u7ebf\u6027 . \u5b8c\u5168\u5171\u7ebf\u6027\u6307: $X$ \u81f3\u5c11\u6709\u4e00\u5217\u5411\u91cf\u53ef\u7531\u5176\u4ed6\u5217\u5411\u91cf\u7ebf\u6027\u8868\u793a. \u5982 $X_2 = \\lambda X_1$, \u5219 $X_2$ \u5bf9 $Y$ \u7684\u4f5c\u7528\u53ef\u7531 $X_1$ \u66ff\u4ee3. \u6ce8\u610f: \u5b8c\u5168\u5171\u7ebf\u6027\u60c5\u51b5\u5e76\u4e0d\u591a\u89c1. \u4e00\u822c\u51fa\u73b0\u7684\u662f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7684\u5171\u7ebf\u6027, \u5373\u8fd1\u4f3c\u5171\u7ebf\u6027. \u5f15\u53d1\u591a\u91cd\u5171\u7ebf\u6027\u7684\u539f\u56e0\u4f8b\u5982\u7ecf\u6d4e\u53d8\u91cf\u76f8\u5173\u7684\u5171\u540c\u8d8b\u52bf, \u5728\u7ecf\u6d4e\u7e41\u8363\u671f, \u6536\u5165, \u6d88\u8d39, \u6295\u8d44, \u4ef7\u683c\u90fd\u8d8b\u4e8e\u589e\u957f; \u5728\u7ecf\u6d4e\u8870\u9000\u671f, \u53c8\u540c\u65f6\u8d8b\u4e8e\u4e0b\u964d. \u5cad\u56de\u5f52 \u5cad\u56de\u5f52\u901a\u8fc7\u5bf9\u7cfb\u6570\u7684\u5927\u5c0f\u65bd\u52a0\u60e9\u7f5a\u6765\u89e3\u51b3\u591a\u91cd\u5171\u7ebf\u6027\u95ee\u9898. \u5f53\u8f93\u5165\u53d8\u91cf\u5b58\u5728\u5f3a\u76f8\u5173\u6027, \u6216\u8005\u8f93\u5165\u53d8\u91cf\u8fc7\u591a, \u6211\u4eec\u4e0d\u60f3\u4e00\u4e00\u9a8c\u8bc1\u5176\u662f\u5426\u5b58\u5728\u76f8\u5173\u6027\u65f6, \u9002\u7528\u5cad\u56de\u5f52 . \u4f7f\u7528 sklearn.linear_model.Ridge \u62df\u5408\u4e00\u7cfb\u5217\u4e00\u7ef4\u6570\u636e. \u5176\u4e2d, $\\alpha$ \u662f\u63a7\u5236\u7cfb\u6570\u6536\u7f29\u91cf\u7684\u590d\u6742\u6027\u53c2\u6570: $\\alpha$ \u7684\u503c\u8d8a\u5927, \u6536\u7f29\u91cf\u8d8a\u5927, \u8fd9\u6837\u7cfb\u6570\u5bf9\u5171\u7ebf\u6027\u7684\u9c81\u68d2\u6027\u4e5f\u66f4\u5f3a. import sklearn.datasets import sklearn.linear_model import sklearn.metrics x = [ [7, 26, 6, 60], [1, 29, 15, 52], [11, 56, 8, 20], [11, 31, 8, 47], [7, 52, 6, 33], [11, 55, 9, 22], [3, 71, 17, 6], [1, 31, 22, 44], [2, 54, 18, 22], [21, 47, 4, 26], [1, 40, 23, 34], [11, 66, 9, 12] ] y = [78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7, 72.5, 93.1, 115.9, 83.8, 113.3] regr = sklearn.linear_model.Ridge(alpha=1.0) regr.fit(x, y) y_pred = regr.predict(x) print('Coefficients:', regr.coef_) print('Mean squared error: %.2f' % sklearn.metrics.mean_squared_error(y, y_pred)) print('Variance score: %.2f' % sklearn.metrics.r2_score(y, y_pred)) Coefficients: [ 1.55978657 0.58092437 0.10491954 -0.0957913 ] Mean squared error: 3.40 Variance score: 0.98","title":"sklearn-\u7ebf\u6027\u6a21\u578b-\u5cad\u56de\u5f52"},{"location":"content/daze/sklearn/liner_model/ridge/#_1","text":"\u5bf9\u4e8e\u6a21\u578b $f(x, w) = w_0 + w_1x_1 + ... + w_px_p = w^Tx + b$ \u5176\u57fa\u672c\u5047\u8bbe\u4e4b\u4e00\u662f\u89e3\u91ca\u53d8\u91cf\u662f\u4e92\u76f8\u72ec\u7acb\u7684. \u5982\u679c\u67d0\u4e24\u4e2a\u6216\u591a\u4e2a\u89e3\u91ca\u53d8\u91cf\u4e4b\u95f4\u51fa\u73b0\u4e86\u76f8\u5173\u6027, \u5219\u79f0\u4e3a \u591a\u91cd\u5171\u7ebf\u6027 (Multicollinearity). \u5982\u679c\u5b58\u5728 $c_1x_1 + c_2x_2 + \u2026 + c_px_p=0$, \u5176\u4e2d: $c_p$ \u4e0d\u5168\u4e3a0, \u5219\u79f0\u4e3a\u89e3\u91ca\u53d8\u91cf\u95f4\u5b58\u5728 \u5b8c\u5168\u5171\u7ebf\u6027 . \u5982\u679c\u5b58\u5728 $c_1x_1 + c_2x_2 + \u2026 + c_px_p + v = 0$, $v$ \u4e3a\u968f\u673a\u8bef\u5dee\u9879, \u5219\u79f0\u4e3a \u8fd1\u4f3c\u5171\u7ebf\u6027 . \u5b8c\u5168\u5171\u7ebf\u6027\u6307: $X$ \u81f3\u5c11\u6709\u4e00\u5217\u5411\u91cf\u53ef\u7531\u5176\u4ed6\u5217\u5411\u91cf\u7ebf\u6027\u8868\u793a. \u5982 $X_2 = \\lambda X_1$, \u5219 $X_2$ \u5bf9 $Y$ \u7684\u4f5c\u7528\u53ef\u7531 $X_1$ \u66ff\u4ee3. \u6ce8\u610f: \u5b8c\u5168\u5171\u7ebf\u6027\u60c5\u51b5\u5e76\u4e0d\u591a\u89c1. \u4e00\u822c\u51fa\u73b0\u7684\u662f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7684\u5171\u7ebf\u6027, \u5373\u8fd1\u4f3c\u5171\u7ebf\u6027. \u5f15\u53d1\u591a\u91cd\u5171\u7ebf\u6027\u7684\u539f\u56e0\u4f8b\u5982\u7ecf\u6d4e\u53d8\u91cf\u76f8\u5173\u7684\u5171\u540c\u8d8b\u52bf, \u5728\u7ecf\u6d4e\u7e41\u8363\u671f, \u6536\u5165, \u6d88\u8d39, \u6295\u8d44, \u4ef7\u683c\u90fd\u8d8b\u4e8e\u589e\u957f; \u5728\u7ecf\u6d4e\u8870\u9000\u671f, \u53c8\u540c\u65f6\u8d8b\u4e8e\u4e0b\u964d.","title":"\u591a\u91cd\u5171\u7ebf\u6027\u7684\u6982\u5ff5"},{"location":"content/daze/sklearn/liner_model/ridge/#_2","text":"\u5cad\u56de\u5f52\u901a\u8fc7\u5bf9\u7cfb\u6570\u7684\u5927\u5c0f\u65bd\u52a0\u60e9\u7f5a\u6765\u89e3\u51b3\u591a\u91cd\u5171\u7ebf\u6027\u95ee\u9898. \u5f53\u8f93\u5165\u53d8\u91cf\u5b58\u5728\u5f3a\u76f8\u5173\u6027, \u6216\u8005\u8f93\u5165\u53d8\u91cf\u8fc7\u591a, \u6211\u4eec\u4e0d\u60f3\u4e00\u4e00\u9a8c\u8bc1\u5176\u662f\u5426\u5b58\u5728\u76f8\u5173\u6027\u65f6, \u9002\u7528\u5cad\u56de\u5f52 . \u4f7f\u7528 sklearn.linear_model.Ridge \u62df\u5408\u4e00\u7cfb\u5217\u4e00\u7ef4\u6570\u636e. \u5176\u4e2d, $\\alpha$ \u662f\u63a7\u5236\u7cfb\u6570\u6536\u7f29\u91cf\u7684\u590d\u6742\u6027\u53c2\u6570: $\\alpha$ \u7684\u503c\u8d8a\u5927, \u6536\u7f29\u91cf\u8d8a\u5927, \u8fd9\u6837\u7cfb\u6570\u5bf9\u5171\u7ebf\u6027\u7684\u9c81\u68d2\u6027\u4e5f\u66f4\u5f3a. import sklearn.datasets import sklearn.linear_model import sklearn.metrics x = [ [7, 26, 6, 60], [1, 29, 15, 52], [11, 56, 8, 20], [11, 31, 8, 47], [7, 52, 6, 33], [11, 55, 9, 22], [3, 71, 17, 6], [1, 31, 22, 44], [2, 54, 18, 22], [21, 47, 4, 26], [1, 40, 23, 34], [11, 66, 9, 12] ] y = [78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7, 72.5, 93.1, 115.9, 83.8, 113.3] regr = sklearn.linear_model.Ridge(alpha=1.0) regr.fit(x, y) y_pred = regr.predict(x) print('Coefficients:', regr.coef_) print('Mean squared error: %.2f' % sklearn.metrics.mean_squared_error(y, y_pred)) print('Variance score: %.2f' % sklearn.metrics.r2_score(y, y_pred)) Coefficients: [ 1.55978657 0.58092437 0.10491954 -0.0957913 ] Mean squared error: 3.40 Variance score: 0.98","title":"\u5cad\u56de\u5f52"},{"location":"content/diary/2019/","text":"10 \u6708 13 \u65e5 \u65b0\u5f00\u8fd9\u672c\u7eaa\u5e74\u53f2. 10 \u6708 14 \u65e5 \u4e0e\u4e00\u597d\u53cb\u76f8\u8c08\u534a\u5bbf. 10 \u6708 15 \u65e5 \u542c\u8bf4\u540c\u4e8b\u63d0\u8f9e\u5448\u4e86. 10 \u6708 16 \u65e5 \u75c5\u60c5\u611f\u89c9\u672a\u89c1\u597d\u8f6c, \u4e0e\u540c\u4e8b\u4eec\u5c0f\u805a\u8bdd\u522b. 10 \u6708 17 \u65e5 \u5404\u6709\u5404\u7684\u7f18\u6cd5, \u6211\u53c8\u4f55\u5fc5\u591a\u4e8b. \u90fd\u662f\u75f4\u5ff5. 10 \u6708 18 \u65e5 Sekai, Sekai, Sekai! 10 \u6708 19 \u65e5 \u8bdd\u5267\u53c2\u52a0\u5927\u5931\u8d25, \"\u4e0b\u6b21\u518d\u6765\u5427\", \u5475! \u5c0f\u7237\u6211\u8fd8\u4e0d\u53bb\u4e86. 10 \u6708 20 \u65e5 \u5c06\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u7528\u6765\u5de5\u4f5c\u5b66\u4e60\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u5c0f\u5fc3\u613f, \u5374\u5fd8\u8bb0\u4e86\u548c\u60f3\u89c1\u9762\u7684\u4eba\u89c1\u4e00\u9762. \u5982\u679c\u65f6\u95f4\u53ef\u4ee5\u91cd\u6765, \u6211\u60f3\u53ef\u4ee5\u5c3d\u91cf\u5e2e\u52a9\u522b\u4eba, \u505a\u81ea\u5df1\u60f3\u505a\u7684\u4e8b\u60c5, \u4eab\u53d7\u7f8e\u98df, \u5e76\u4e14\u4e0d\u518d\u6f20\u89c6\u81ea\u5df1\u7684\u611f\u60c5. 10 \u6708 21 \u65e5 \u5176\u5b9e\u662f\u6628\u65e5\u7684\u4e8b: \u4ece\u6d59\u7f8e\u9986\u51fa\u6765\u540e\u642d\u8baa\u4e86\u4e00\u59d1\u5a18, \u5728\u897f\u6e56\u5ea6\u8fc7\u4e86\u6109\u5feb\u7684\u4e0b\u5348. 10 \u6708 22 \u65e5 \u53f6\u5b50\u554a\u53f6\u5b50, \u518d 3 \u5929\u5c31\u8981\u4ea4\u6f14\u8bb2\u7a3f\u4e86, \u4f60\u600e\u80fd\u518d\u5982\u6b64\u62d6\u5ef6\u4e0b\u53bb? 10 \u6708 23 \u65e5 \u610f\u5916\u6536\u5230\u4e00\u6839\u6a44\u6984\u679d. 10 \u6708 24 \u65e5 \u4eba\u751f\u82e5\u53ea\u5982\u521d\u89c1, \u4f55\u4e8b\u79cb\u98ce\u60b2\u753b\u6247. 10 \u6708 25 \u65e5 \u90a3\u4e2a\u4eba\u597d\u5f3a\u554a, \u6211\u8981\u662f\u6709\u4ed6\u4e00\u534a\u7684\u81ea\u4fe1\u5c31\u597d\u4e86. Atum, \u8bf4\u7684\u5c31\u662f\u4f60! 10 \u6708 26 \u65e5 \u4e70\u4e86\u97f3\u4e50\u4f1a\u7684\u7968, \u4e0d\u8fc7\u6ca1\u53bb\u6210, \u6b8b\u5ff5. 10 \u6708 27 \u65e5 \u5e0c\u590f\u7d22\u6492! 10 \u6708 28 \u65e5 @secondwtq \u63d0\u51fa\u4e86\u4e00\u4e9b\u5bf9\u6f14\u8bb2\u7a3f\u7684\u4fee\u6539\u610f\u89c1, \u8fd4\u5de5\u4e2d. 10 \u6708 29 \u65e5 \u65e0\u4e8b. 10 \u6708 30 \u65e5 \u65b0\u5165\u7684\u4e3b\u673a\u4f3c\u4e4e\u786c\u76d8\u6709\u70b9\u95ee\u9898, \u548c\u673a\u68b0\u5e08\u7684\u552e\u540e\u6c9f\u901a\u540e\u5f00\u59cb\u6362\u8d27\u6d41\u7a0b. 10 \u6708 31 \u65e5 \u9879\u76ee\u7ec4\u907f\u96be\u53bb\u4e86. 11 \u6708 01 \u65e5 \u4eca\u5929\u542f\u7a0b\u53bb\u4e0a\u6d77. 11 \u6708 02 \u65e5 \u4e2d\u56fd\u5f00\u6e90\u5e74\u4f1a\u7b2c\u4e00\u65e5, \u6821\u56ed\u65c5\u6e38 + \u9152\u5427\u5439\u725b. 11 \u6708 03 \u65e5 \u4e2d\u56fd\u5f00\u6e90\u5e74\u4f1a\u7b2c\u4e8c\u65e5, \u6f14\u8bb2 \"minits: \u4ee5 LLVM \u4e3a\u540e\u7aef\u7684 TypeScript \u9759\u6001\u7f16\u8bd1\u5668\". 11 \u6708 04 \u65e5 \u5c24\u514b\u91cc\u91cc\u5230\u4e86, \u4e0d\u77e5\u6709\u6ca1\u6709\u4e66 \"21 \u5929\u7cbe\u901a\u5c24\u514b\u91cc\u91cc\". 11 \u6708 05 \u65e5 \u5b66\u4e60\u548c\u5f26, \u597d\u96be\u5440\u5624\u5624\u5624. 11 \u6708 06 \u65e5 \u8fd1\u671f\u8fc7\u4e8e\u653e\u677e\u4e86\u5440! \u679c\u7136\u8fd8\u662f\u8981\u5148\u628a\u4e66\u5199\u5b8c\u4e86\u624d\u597d\u5427. 11 \u6708 07 \u65e5 \u9f99\u4f53\u6b20\u5b89. 11 \u6708 08 \u65e5 Game Boy \u9879\u76ee\u7834 700 Star! 11 \u6708 09 \u65e5 \u9ad8\u4e2d\u540c\u684c\u91cd\u9022. 11 \u6708 10 \u65e5 \u5468\u5929, \u5bf9\u65b0\u4e66\u8865\u5145\u4e86\u4e00\u4e9b\u5185\u5bb9, \u5230\u8fbe 37 \u4e07\u5b57\u4e86. 11 \u6708 11 \u65e5 \u7ec7\u7530\u4fe1\u957f\u5728\u5373\u5c06\u7edf\u4e00\u65e5\u672c\u65f6\u906d\u9047\u5bb6\u81e3\u53db\u53d8, \u88ab\u8feb\u81ea\u5c3d\u4e8e\u672c\u80fd\u5bfa, \u8fd9\u8be5\u662f\u5e26\u7740\u600e\u6837\u7684\u6068\u610f\u5462? \u5982\u679c\u662f\u6211\u7684\u8bdd, \u4e00\u5b9a\u4f1a\u53d8\u4e3a\u5389\u9b3c\u5427! 11 \u6708 12 \u65e5 \u65e0\u4e8b. 11 \u6708 13 \u65e5 \u65e0\u4e8b. 11 \u6708 14 \u65e5 \u8001\u677f\u8bf4\u53c8\u53ef\u4ee5\u6da8\u5de5\u8d44\u4e86, \u5f00\u5fc3. 11 \u6708 15 \u65e5 \u5bb3\u6015. 11 \u6708 16 \u65e5 \u8db4\u7740\u5199\u4e66. 11 \u6708 17 \u65e5 \u5b8c\u6574\u7684\u5f39\u594f\u751f\u65e5\u5feb\u4e50\u6b4c! 11 \u6708 18 \u65e5 \u53d1\u5e01\u4e86, \u6ca1\u611f\u89c9. 11 \u6708 19 \u65e5 \u64b8\u732b\u7684\u65f6\u5019\u5dee\u70b9\u88ab\u6293\u4f24\u4e86, \u770b\u6765\u8fd8\u9700\u8981\u78e8\u7ec3\u81ea\u5df1\u7684\u6280\u5de7. 11 \u6708 22 \u65e5 \u9762\u8bd5\u5927\u6211 5 \u5c81\u7684\u524d\u8f88, \u5f88\u96be\u53d7. \u901d\u8005\u5982\u65af\u592b, \u4e0d\u820d\u663c\u591c. 11 \u6708 23 \u65e5 \u65b0\u4e66\u4fee\u6574\u4e86\u4e00\u756a, \u660e\u65e5\u51c6\u5907\u5c06\u5176\u5728 Word \u4e2d\u6392\u7248\u770b\u4e00\u770b. 11 \u6708 24 \u65e5 \u5267\u9662\u770b\u620f. 12 \u6708 02 \u65e5 \u628a\u4e66\u7a3f\u7ed9\u51fa\u7248\u793e\u770b\u4e86, \u89c9\u5f97\u6587\u5b57\u591a\u4e86, \u8981\u6c42\u628a 380 \u9875\u7684\u5185\u5bb9\u88c1\u526a\u6210 300 \u9875. \u539f\u56e0\u662f\u4ed6\u4eec\u540e\u671f\u6574\u7406\u6392\u7248\u548c\u9875\u9762\u7684\u65f6\u5019, \u8fd8\u4f1a\u591a\u51fa\u5f88\u591a\u9875\u7eb8\u6765, 380 \u9875\u7684\u7eaf\u5185\u5bb9\u5370\u5237\u6210\u4e66\u5b9a\u4ef7\u5f97\u8fc7\u767e. \u6b8b\u5ff5. 12 \u6708 04 \u65e5 \u4e09\u5473\u7ebf\u771f\u597d\u542c. 12 \u6708 05 \u65e5 \u7b49\u8fd9\u9635\u5b50\u5fd9\u5b8c\u4e86, \u5c31\u5f00\u59cb\u7814\u7a76 Go \u7684\u7f16\u8bd1\u5668. 12 \u6708 09 \u65e5 \u4ece\u533b\u9662\u62ce\u4e86\u4e00\u5927\u5305\u836f\u56de\u6765. 12 \u6708 22 \u65e5 \u5403\u4e86\u4e2a\u7528\u9f99\u867e\u8089\u6a21\u62df\u87f9\u8089\u53e3\u5473\u7684\u5373\u98df\u96f6\u98df, \u6309\u7167\u4ef7\u683c\u6765\u8bf4\u4e0d\u662f\u5e94\u8be5\u53cd\u8fc7\u6765\u5417? 12 \u6708 31 \u65e5 2019 \u5e74\u6700\u540e\u4e00\u5929\u5566. \u65e2\u5e78\u8fd0\u53c8\u60b2\u60e8\u7684\u4e00\u5e74, \u7ed9\u4eca\u5e74\u505a\u4e0b\u603b\u7ed3: \u6625, Game Boy \u4eff\u771f\u5668\u5f00\u6e90\u5728 github \u4e0a, \u83b7\u5f97\u4e86 700+ star, \u4e0a\u4e86 github \u8d8b\u52bf\u699c. \u590f, \u4e0e\u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e\u7b7e\u8ba2\u4e86\u5408\u540c, \u5f00\u59cb\u5199\u4e66. \u79cb, \u751f\u75c5\u4f4f\u9662\u597d\u4e45, \u975e\u5e38\u53ef\u601c. \u51ac, \u53c2\u52a0\u4e2d\u56fd\u5f00\u6e90\u5e74\u4f1a\u6f14\u8bb2. \u53f6\u5b50, \u660e\u5e74\u4e5f\u8981\u597d\u597d\u52a0\u6cb9!","title":"Y2019"},{"location":"content/diary/2020/","text":"01 \u6708 08 \u65e5 \u5f53\u9700\u8981\u53d1\u8868\u5bf9\u67d0\u4e2a\u4e8b\u7269\u770b\u6cd5\u7684\u65f6\u5019, \u8981\u8f93\u51fa\u89c2\u70b9, \u800c\u4e0d\u662f\u8f93\u51fa\u60c5\u7eea. \u614e\u4e4b! 01 \u6708 10 \u65e5 wubba lubba dub dub. 01 \u6708 22 \u65e5 \u6b66\u6c49\u65b0\u578b\u80ba\u708e\u771f\u662f\u95f9\u7684\u4eba\u5fc3\u60f6\u60f6. 01 \u6708 24 \u65e5 \u4eca\u65e5\u542f\u7a0b\u56de\u5bb6. 02 \u6708 01 \u65e5 \u4eca\u65e5\u5f00\u5de5. \u6625\u8282\u671f\u95f4\u51e0\u4e4e\u6ca1\u6709\u5916\u51fa\u8d70\u52a8, \u671f\u95f4\u9ad8\u94c1\u4e0a\u88ab\u67e5\u51fa\u4f53\u6e29\u8fc7\u9ad8, \u540e\u6765\u60f3\u60f3\u662f\u56e0\u4e3a\u524d\u5929\u591c\u91cc\u51e0\u4e4e\u6ca1\u7761\u7684\u5173\u7cfb. 02 \u6708 10 \u65e5 \u6625\u8282\u56de\u676d\u540e\u4fbf\u88ab\u9694\u79bb, \u4eca\u65e5\u89e3\u7981, \u4fbf\u6652\u5230\u4e86\u4e45\u8fdd\u7684\u9633\u5149, \u771f\u6696\u548c! 02 \u6708 11 \u65e5 \u4eca\u65e5\u4ece steam \u4e0a\u4e0b\u8f7d\u4e86\u4e00\u4e2a\u5c0f\u9ec4\u6cb9\u6e38\u620f, \u5176\u6e38\u620f\u5236\u4f5c\u4e4b\u7b80\u5355\u4ee4\u4eba\u548b\u820c, \u867d\u8bf4\u552e\u4ef7\u53ea\u662f 6 \u5143, \u4f46\u8d2d\u4e70\u4eba\u6570\u5374\u4e0d\u5c11. \u6211\u89c9\u5f97\u8fd9\u662f\u4e2a\u8d5a\u94b1\u7684\u6cd5\u5b50! 02 \u6708 13 \u65e5 Use it or lose it. \u6211\u5e38\u5e38\u6536\u96c6\u6216\u8bb0\u5f55\u5404\u79cd\u4e1c\u897f, \u542c\u5230\u559c\u6b22\u7684\u6b4c, \u4fbf\u8d39\u52b2\u5fc3\u601d\u4e0b\u8f7d\u8fc7\u6765\u7136\u540e\u5b58\u5230\u67d0\u4e2a\u5730\u65b9; \u770b\u4e00\u4e9b\u6280\u672f\u6587\u7ae0\u4e00\u5b9a\u8981\u540c\u65f6\u505a\u7b14\u8bb0\u751f\u6015\u4ee5\u540e\u4f1a\u5fd8\u8bb0. \u4ee5\u540e\u8fd8\u662f\u51cf\u5c11\u8fd9\u79cd\u6536\u96c6\u884c\u4e3a\u5427. 02 \u6708 22 \u65e5 \"\u6de1\u70df\u758f\u96e8\u843d\u6ee1\u5929\", \u8fd9\u8bd7\u5ff5\u7740\u90fd\u89c9\u5f97\u51c4\u51c9--\u66fe\u56fd\u85e9\u5199\u4e8e\u5927\u6e05\u56fd\u98ce\u96e8\u98d8\u6447\u65f6. 02 \u6708 24 \u65e5 \u5b8c\u86cb\u4e86\u5b8c\u86cb\u4e86, \u5c45\u7136\u8ff7\u4e0a\u300a\u98ce\u4e912\u300b\u8fd9\u6740\u9a6c\u7279\u8111\u6b8b\u5267\u4e86, \"\u54ea\u6709\u957f\u80dc\u65e0\u654c, \u54ea\u6709\u4eba\u513f\u4e0d\u53bb. \u54ea\u513f\u65e0\u7ec8\u7684\u66f2, \u54ea\u6709\u4e0d\u6563\u7684\u5e2d\"... \u4e2d\u4e8c\u7206\u8868. 03 \u6708 05 \u65e5 \u8fd9\u4e24\u5929\u5728\u5199\u7684 RISCV RV64IMAFDC \u4eff\u771f\u5668\u8fdb\u5ea6\u4e0d\u9519, \u6bd4\u60f3\u8c61\u4e2d\u590d\u6742\u5f88\u591a, \u96be\u5ea6\u4e5f\u5f88\u5927, \u6536\u83b7\u662f\u66f4\u52a0\u4e86\u89e3 CPU/\u64cd\u4f5c\u7cfb\u7edf\u7684\u5de5\u4f5c\u539f\u7406\u4e86. 03 \u6708 09 \u65e5 \u4eca\u5e74\u80fd\u6709\u673a\u4f1a\u6000\u7740\u8f7b\u677e\u7684\u5fc3\u60c5\u770b\u5230\u897f\u6e56\u76db\u5f00\u7684\u8377\u82b1\u5417? 03 \u6708 16 \u65e5 \u770b\u4e86\u51e0\u5929 Sparse Merkle Trees, \u8fd8\u633a\u6709\u610f\u601d\u7684. 03 \u6708 21 \u65e5 \u8fd1\u65e5\u53d1\u73b0 Golang \u6807\u51c6\u5e93\u4e2d\u5173\u4e8e\u6d6e\u70b9\u6570\u8ba1\u7b97\u7684\u4e00\u4e2a Bug, \u5b98\u65b9\u8ba1\u5212\u5728 1.15 \u7248\u672c\u4e2d\u4fee\u590d. 03 \u6708 28 \u65e5 \u53c2\u52a0\u516c\u53f8\u4e3e\u529e\u7684 Hackathon \u6d3b\u52a8, \u5b66\u5230\u4e00\u4e9b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u5185\u5bb9. 04 \u6708 01 \u65e5 \u6536\u5230\u4e00\u4efd\u9493\u9c7c\u90ae\u4ef6\u9a97\u6211\u8f93\u5bc6\u7801, \u5c31\u5199\u4e86\u811a\u672c\u628a\u5b83\u7f51\u7ad9\u6253\u6302\u4e86. 04 \u6708 07 \u65e5 \u611f\u8c22 v2ex \u7684 sivacohan \u8001\u94c1\u8d5e\u52a9\u7684 100 \u94c3\u94b1! 04 \u6708 11 \u65e5 \u65b0\u4e66\u53ef\u80fd\u5b58\u5728\u7248\u6743\u65b9\u9762\u7684\u98ce\u9669... 04 \u6708 16 \u65e5 \u5669\u8017, \u65b0\u4e66\u5df2\u786e\u8ba4\u4e0d\u80fd\u51fa\u7248.","title":"Y2020"},{"location":"content/gameboy/foot/","text":"\u540e\u8bb0 \u7eb5\u89c2\u865a\u62df\u673a\u6280\u672f\u53d1\u5c55, \u53ef\u4ee5\u603b\u7ed3\u51fa\u5982\u4e0b\u6bd4\u8f83\u660e\u663e\u7684\u53d1\u5c55\u8d8b\u52bf: \u5c31\u76ee\u524d\u770b\u6765, \u4f20\u7edf\u7684\u9762\u5411\u4e2a\u4eba\u7528\u6237\u7684\u865a\u62df\u673a\u6b63\u6210\u4e3a\u4e00\u79cd\u5c0f\u4f17\u4ea7\u54c1, \u5982\u5404\u4e2a\u6e38\u620f\u673a\u7684\u6a21\u62df\u5668. \u76ee\u524d\u8fd9\u7c7b\u5e94\u7528\u9047\u5230\u7684\u4e3b\u8981\u969c\u788d\u96c6\u4e2d\u5728\u865a\u62df\u673a\u7684\u6027\u80fd, \u517c\u5bb9\u6027\u7b49\u786c\u6027\u4e0d\u8db3\u4e0a. \u4f46\u662f\u9762\u5411\u5f00\u53d1\u8005\u7684\u865a\u62df\u673a\u4ecd\u7136\u5728\u88ab\u5927\u91cf\u4f7f\u7528, \u6bd4\u5982 Android \u5f00\u53d1\u65b9\u5411, \u90a3\u4e48\u76f8\u4fe1\u7edd\u5927\u591a\u6570\u5f00\u53d1\u8005\u4e00\u5b9a\u7528\u8fc7 Android \u865a\u62df\u673a; \u6216\u8005\u662f\u786c\u4ef6\u5f00\u53d1\u65b9\u5411, \u90a3\u4e5f\u5f88\u5927\u53ef\u80fd\u4f7f\u7528\u8fc7\u5404\u79cd\u786c\u4ef6\u4eff\u771f\u5668. \u5b83\u4eec\u7684\u4f18\u70b9\u662f\u65e0\u9700\u62e5\u6709\u6216\u643a\u5e26\u539f\u59cb\u7269\u7406\u673a\u5668, \u5c31\u80fd\u4e3a\u8be5\u673a\u5668\u5f00\u53d1\u5e94\u7528. \u670d\u52a1\u5668\u865a\u62df\u5316\u6280\u672f\u5b9e\u73b0\u7684\u8d44\u6e90\u6574\u5408\u6b63\u5728\u5feb\u901f\u53d1\u5c55. \u65e0\u8bba\u662f\u4e9a\u9a6c\u900a, \u963f\u91cc\u4e91\u6216\u662f\u817e\u8baf\u4e91, \u5b83\u4eec\u5747\u901a\u8fc7\u865a\u62df\u673a\u7684\u5f62\u5f0f\u5c06\u4e00\u53f0\u7269\u7406\u673a\u5206\u5272\u4e3a\u4e92\u76f8\u72ec\u7acb\u7684\u51e0\u90e8\u5206\u5e76\u5411\u7528\u6237\u51fa\u552e. \u5176\u4f18\u52bf\u662f\u8d44\u6e90\u9694\u79bb, \u5feb\u901f\u521b\u5efa\u4e0e\u5feb\u901f\u9500\u6bc1. \u5173\u4e8e\u7a0b\u5e8f\u865a\u62df\u673a, \u6709\u4e00\u4e9b\u6bd4\u8f83\u6709\u8da3\u7684\u70b9, \u90a3\u5c31\u662f\u81ea\u4ece Java \u4e4b\u540e, \u4e16\u754c\u4e0a\u5f88\u5c11\u518d\u51fa\u73b0\u57fa\u4e8e\u865a\u62df\u673a\u7684\u6d41\u884c\u7f16\u7a0b\u8bed\u8a00\u4e86. \u8fd1\u4e9b\u5e74\u4ee5\u6765\u6bd4\u8f83\u6d41\u884c\u7684 Golang \u548c Rust \u8bed\u8a00, \u5747\u662f\u9759\u6001\u7f16\u8bd1\u5f62\u8bed\u8a00. \u867d\u7136\u8bf4\u7a0b\u5e8f\u865a\u62df\u673a\u62bd\u8c61\u4e86\u64cd\u4f5c\u7cfb\u7edf\u548c\u5e95\u5c42\u786c\u4ef6\u7684\u533a\u522b, \u4f7f\u5f97\u7f16\u7a0b\u8bed\u8a00\u53ef\u4ee5\u65b9\u4fbf\u7684\u8de8\u5e73\u53f0\u8fd0\u884c, \u4f46\u4f3c\u4e4e\u5e76\u4e0d\u8db3\u4ee5\u5f25\u8865\u5176\u672c\u8eab\u7684\u6027\u80fd\u4e0d\u8db3. \u5f53\u4eca\u4e16\u754c\u79d1\u5b66\u6280\u672f\u6b63\u5728\u4ee5\u4ee4\u4eba\u60ca\u5f02\u7684\u901f\u5ea6\u53d1\u5c55, \u4ece IoT(\u7269\u8054\u7f51)\u5230\u5927\u6570\u636e\u5230 AI(\u4eba\u5de5\u667a\u80fd), \u5b83\u4eec\u5bf9\u529f\u8017, \u6027\u80fd\u4e0e\u8d44\u6e90\u6d88\u8017\u7684\u8981\u6c42\u975e\u5e38\u975e\u5e38\u9ad8, \u865a\u62df\u673a\u5728\u8fd9\u65b9\u9762\u5b58\u5728\u5929\u7136\u7684\u52a3\u52bf. \u7b14\u8005\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u53d6\u820d\u95ee\u9898, \u800c\u975e\u8c01\u5bf9\u8c01\u9519\u7684\u95ee\u9898. \u53ef\u4ee5\u5f88\u660e\u663e\u53d1\u73b0\u865a\u62df\u673a\u5728\u8fc7\u53bb\u7684\u65f6\u95f4\u91cc\u6b63\u5728\u4ece\u7528\u6237\u9762\u524d\u8d70\u5230\u821e\u53f0\u540e\u9762\u6210\u4e3a\u5e55\u540e\u82f1\u96c4. \u5b83\u652f\u6491\u4e86\u670d\u52a1\u5668\u4e0e\u670d\u52a1\u7aef, \u540c\u65f6\u7ed9\u7528\u6237\u63d0\u4f9b\u4e86\u8f6f\u4ef6\u7684\u8fd0\u884c\u73af\u5883\u800c\u7528\u6237\u5374\u6839\u672c\u65e0\u6cd5\u5bdf\u89c9\u865a\u62df\u673a\u7684\u5b58\u5728. \u4f46\u79d1\u6280\u53f2\u662f\u4e00\u4e2a\u87ba\u65cb\u4e0a\u5347\u7684\u8fc7\u7a0b, \u865a\u62df\u673a\u6216\u8bb8\u4f1a\u91cd\u65b0\u8d70\u5411\u53f0\u524d\u9762\u5bf9\u7528\u6237. \u523a\u6fc0\u8fd9\u4e2a\u8f6c\u53d8\u7684\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u8fd9\u51e0\u4e2a\u70b9: \u4fe1\u606f\u5b89\u5168. \u5728\u73b0\u4ee3\u793e\u4f1a\u4e2a\u4eba\u9690\u79c1\u548c\u4fe1\u606f\u5b89\u5168\u6b63\u4ee5\u8fd1\u4e4e\u65e0\u8d56\u7684\u65b9\u5f0f\u88ab\u6cc4\u9732, \u800c\u4f7f\u7528\u865a\u62df\u673a\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8fd0\u884c\u7684\u8f6f\u4ef6\u63d0\u4f9b\u865a\u62df\u73af\u5883\u662f\u6700\u6839\u672c\u7684\u89e3\u51b3\u65b9\u6848. \u50cf\u524d\u51e0\u5e74\u7206\u51fa\u7684\u68f1\u955c\u95e8\u4e8b\u4ef6, \u9664\u4e86\u8ba9\u65af\u8bfa\u767b\u540d\u58f0\u5927\u566a\u4e4b\u5916, \u4e5f\u8ba9\u4ed6\u7684\u4e00\u4e2a\u4e60\u60ef\u88ab\u5927\u4f17\u6240\u719f\u77e5: \u4ed6\u51e0\u4e4e\u53ea\u5728\u865a\u62df\u673a\u4e2d\u8fdb\u884c\u6d89\u53ca\u4e2a\u4eba\u4fe1\u606f\u7684\u64cd\u4f5c. \u786c\u4ef6\u53d1\u5c55. \u968f\u7740\u786c\u4ef6\u53d1\u5c55, \u90a3\u4e48\u5236\u7ea6\u73b0\u9636\u6bb5\u7684\u6e38\u620f\u673a\u6a21\u62df\u5668\u6216\u865a\u62df\u673a\u7684\u786c\u4ef6\u95ee\u9898\u4e5f\u5c06\u81ea\u7136\u6d88\u5931. \u540c\u65f6, \u865a\u62df\u673a\u53ef\u80fd\u4f1a\u66f4\u591a\u51fa\u73b0\u5728\u975e\u8ba1\u7b97\u673a\u9886\u57df, \u5b83\u4e0d\u518d\u4ec5\u4ec5\u662f\u5bf9\u4e00\u53f0\u8ba1\u7b97\u673a\u7684\u6a21\u62df, \u5176\u751a\u81f3\u53ef\u4ee5\u53d1\u5c55\u5230\u5bf9\u4e00\u4e2a\u751f\u547d\u4f53\u6216\u8005\u7269\u7406\u89c4\u5f8b\u7684\u6a21\u62df. \u73b0\u5728\u5df2\u7ecf\u6709\u4e00\u6279\u673a\u5668\u4eba\u5de5\u7a0b\u5e08\u5f00\u59cb\u5728\u5305\u542b\u7269\u7406\u5f15\u64ce\u7684\u6e38\u620f\u5f15\u64ce\u4e2d\u8bad\u7ec3\u673a\u5668\u4eba\u53cc\u8db3\u884c\u8d70, \u53e6\u6709\u4e00\u4e9b\u751f\u7269\u5b66\u5bb6\u8054\u5408\u8ba1\u7b97\u673a\u5de5\u7a0b\u5e08\u8bd5\u56fe\u4f7f\u7528\u4ee3\u7801\u5b8c\u6574\u6a21\u62df\u4e00\u4e2a\u5355\u7ec6\u80de\u751f\u7269\u7684\u5168\u90e8\u795e\u7ecf\u5143. \u865a\u62df\u673a\u6b63\u662f\u8fd9\u6837\u4e00\u95e8\u5145\u6ee1\u65e0\u9650\u53ef\u80fd\u7684\u5b66\u79d1, \u5982\u679c\u7ad9\u5f97\u66f4\u9ad8\u4e00\u70b9, \u6216\u8bb8\u80fd\u770b\u5230\u8fdc\u5904\u7684\u300a\u9ed1\u5ba2\u5e1d\u56fd\u300b?","title":"GB-\u540e\u8bb0"},{"location":"content/gameboy/foot/#_1","text":"\u7eb5\u89c2\u865a\u62df\u673a\u6280\u672f\u53d1\u5c55, \u53ef\u4ee5\u603b\u7ed3\u51fa\u5982\u4e0b\u6bd4\u8f83\u660e\u663e\u7684\u53d1\u5c55\u8d8b\u52bf: \u5c31\u76ee\u524d\u770b\u6765, \u4f20\u7edf\u7684\u9762\u5411\u4e2a\u4eba\u7528\u6237\u7684\u865a\u62df\u673a\u6b63\u6210\u4e3a\u4e00\u79cd\u5c0f\u4f17\u4ea7\u54c1, \u5982\u5404\u4e2a\u6e38\u620f\u673a\u7684\u6a21\u62df\u5668. \u76ee\u524d\u8fd9\u7c7b\u5e94\u7528\u9047\u5230\u7684\u4e3b\u8981\u969c\u788d\u96c6\u4e2d\u5728\u865a\u62df\u673a\u7684\u6027\u80fd, \u517c\u5bb9\u6027\u7b49\u786c\u6027\u4e0d\u8db3\u4e0a. \u4f46\u662f\u9762\u5411\u5f00\u53d1\u8005\u7684\u865a\u62df\u673a\u4ecd\u7136\u5728\u88ab\u5927\u91cf\u4f7f\u7528, \u6bd4\u5982 Android \u5f00\u53d1\u65b9\u5411, \u90a3\u4e48\u76f8\u4fe1\u7edd\u5927\u591a\u6570\u5f00\u53d1\u8005\u4e00\u5b9a\u7528\u8fc7 Android \u865a\u62df\u673a; \u6216\u8005\u662f\u786c\u4ef6\u5f00\u53d1\u65b9\u5411, \u90a3\u4e5f\u5f88\u5927\u53ef\u80fd\u4f7f\u7528\u8fc7\u5404\u79cd\u786c\u4ef6\u4eff\u771f\u5668. \u5b83\u4eec\u7684\u4f18\u70b9\u662f\u65e0\u9700\u62e5\u6709\u6216\u643a\u5e26\u539f\u59cb\u7269\u7406\u673a\u5668, \u5c31\u80fd\u4e3a\u8be5\u673a\u5668\u5f00\u53d1\u5e94\u7528. \u670d\u52a1\u5668\u865a\u62df\u5316\u6280\u672f\u5b9e\u73b0\u7684\u8d44\u6e90\u6574\u5408\u6b63\u5728\u5feb\u901f\u53d1\u5c55. \u65e0\u8bba\u662f\u4e9a\u9a6c\u900a, \u963f\u91cc\u4e91\u6216\u662f\u817e\u8baf\u4e91, \u5b83\u4eec\u5747\u901a\u8fc7\u865a\u62df\u673a\u7684\u5f62\u5f0f\u5c06\u4e00\u53f0\u7269\u7406\u673a\u5206\u5272\u4e3a\u4e92\u76f8\u72ec\u7acb\u7684\u51e0\u90e8\u5206\u5e76\u5411\u7528\u6237\u51fa\u552e. \u5176\u4f18\u52bf\u662f\u8d44\u6e90\u9694\u79bb, \u5feb\u901f\u521b\u5efa\u4e0e\u5feb\u901f\u9500\u6bc1. \u5173\u4e8e\u7a0b\u5e8f\u865a\u62df\u673a, \u6709\u4e00\u4e9b\u6bd4\u8f83\u6709\u8da3\u7684\u70b9, \u90a3\u5c31\u662f\u81ea\u4ece Java \u4e4b\u540e, \u4e16\u754c\u4e0a\u5f88\u5c11\u518d\u51fa\u73b0\u57fa\u4e8e\u865a\u62df\u673a\u7684\u6d41\u884c\u7f16\u7a0b\u8bed\u8a00\u4e86. \u8fd1\u4e9b\u5e74\u4ee5\u6765\u6bd4\u8f83\u6d41\u884c\u7684 Golang \u548c Rust \u8bed\u8a00, \u5747\u662f\u9759\u6001\u7f16\u8bd1\u5f62\u8bed\u8a00. \u867d\u7136\u8bf4\u7a0b\u5e8f\u865a\u62df\u673a\u62bd\u8c61\u4e86\u64cd\u4f5c\u7cfb\u7edf\u548c\u5e95\u5c42\u786c\u4ef6\u7684\u533a\u522b, \u4f7f\u5f97\u7f16\u7a0b\u8bed\u8a00\u53ef\u4ee5\u65b9\u4fbf\u7684\u8de8\u5e73\u53f0\u8fd0\u884c, \u4f46\u4f3c\u4e4e\u5e76\u4e0d\u8db3\u4ee5\u5f25\u8865\u5176\u672c\u8eab\u7684\u6027\u80fd\u4e0d\u8db3. \u5f53\u4eca\u4e16\u754c\u79d1\u5b66\u6280\u672f\u6b63\u5728\u4ee5\u4ee4\u4eba\u60ca\u5f02\u7684\u901f\u5ea6\u53d1\u5c55, \u4ece IoT(\u7269\u8054\u7f51)\u5230\u5927\u6570\u636e\u5230 AI(\u4eba\u5de5\u667a\u80fd), \u5b83\u4eec\u5bf9\u529f\u8017, \u6027\u80fd\u4e0e\u8d44\u6e90\u6d88\u8017\u7684\u8981\u6c42\u975e\u5e38\u975e\u5e38\u9ad8, \u865a\u62df\u673a\u5728\u8fd9\u65b9\u9762\u5b58\u5728\u5929\u7136\u7684\u52a3\u52bf. \u7b14\u8005\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u53d6\u820d\u95ee\u9898, \u800c\u975e\u8c01\u5bf9\u8c01\u9519\u7684\u95ee\u9898. \u53ef\u4ee5\u5f88\u660e\u663e\u53d1\u73b0\u865a\u62df\u673a\u5728\u8fc7\u53bb\u7684\u65f6\u95f4\u91cc\u6b63\u5728\u4ece\u7528\u6237\u9762\u524d\u8d70\u5230\u821e\u53f0\u540e\u9762\u6210\u4e3a\u5e55\u540e\u82f1\u96c4. \u5b83\u652f\u6491\u4e86\u670d\u52a1\u5668\u4e0e\u670d\u52a1\u7aef, \u540c\u65f6\u7ed9\u7528\u6237\u63d0\u4f9b\u4e86\u8f6f\u4ef6\u7684\u8fd0\u884c\u73af\u5883\u800c\u7528\u6237\u5374\u6839\u672c\u65e0\u6cd5\u5bdf\u89c9\u865a\u62df\u673a\u7684\u5b58\u5728. \u4f46\u79d1\u6280\u53f2\u662f\u4e00\u4e2a\u87ba\u65cb\u4e0a\u5347\u7684\u8fc7\u7a0b, \u865a\u62df\u673a\u6216\u8bb8\u4f1a\u91cd\u65b0\u8d70\u5411\u53f0\u524d\u9762\u5bf9\u7528\u6237. \u523a\u6fc0\u8fd9\u4e2a\u8f6c\u53d8\u7684\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u8fd9\u51e0\u4e2a\u70b9: \u4fe1\u606f\u5b89\u5168. \u5728\u73b0\u4ee3\u793e\u4f1a\u4e2a\u4eba\u9690\u79c1\u548c\u4fe1\u606f\u5b89\u5168\u6b63\u4ee5\u8fd1\u4e4e\u65e0\u8d56\u7684\u65b9\u5f0f\u88ab\u6cc4\u9732, \u800c\u4f7f\u7528\u865a\u62df\u673a\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8fd0\u884c\u7684\u8f6f\u4ef6\u63d0\u4f9b\u865a\u62df\u73af\u5883\u662f\u6700\u6839\u672c\u7684\u89e3\u51b3\u65b9\u6848. \u50cf\u524d\u51e0\u5e74\u7206\u51fa\u7684\u68f1\u955c\u95e8\u4e8b\u4ef6, \u9664\u4e86\u8ba9\u65af\u8bfa\u767b\u540d\u58f0\u5927\u566a\u4e4b\u5916, \u4e5f\u8ba9\u4ed6\u7684\u4e00\u4e2a\u4e60\u60ef\u88ab\u5927\u4f17\u6240\u719f\u77e5: \u4ed6\u51e0\u4e4e\u53ea\u5728\u865a\u62df\u673a\u4e2d\u8fdb\u884c\u6d89\u53ca\u4e2a\u4eba\u4fe1\u606f\u7684\u64cd\u4f5c. \u786c\u4ef6\u53d1\u5c55. \u968f\u7740\u786c\u4ef6\u53d1\u5c55, \u90a3\u4e48\u5236\u7ea6\u73b0\u9636\u6bb5\u7684\u6e38\u620f\u673a\u6a21\u62df\u5668\u6216\u865a\u62df\u673a\u7684\u786c\u4ef6\u95ee\u9898\u4e5f\u5c06\u81ea\u7136\u6d88\u5931. \u540c\u65f6, \u865a\u62df\u673a\u53ef\u80fd\u4f1a\u66f4\u591a\u51fa\u73b0\u5728\u975e\u8ba1\u7b97\u673a\u9886\u57df, \u5b83\u4e0d\u518d\u4ec5\u4ec5\u662f\u5bf9\u4e00\u53f0\u8ba1\u7b97\u673a\u7684\u6a21\u62df, \u5176\u751a\u81f3\u53ef\u4ee5\u53d1\u5c55\u5230\u5bf9\u4e00\u4e2a\u751f\u547d\u4f53\u6216\u8005\u7269\u7406\u89c4\u5f8b\u7684\u6a21\u62df. \u73b0\u5728\u5df2\u7ecf\u6709\u4e00\u6279\u673a\u5668\u4eba\u5de5\u7a0b\u5e08\u5f00\u59cb\u5728\u5305\u542b\u7269\u7406\u5f15\u64ce\u7684\u6e38\u620f\u5f15\u64ce\u4e2d\u8bad\u7ec3\u673a\u5668\u4eba\u53cc\u8db3\u884c\u8d70, \u53e6\u6709\u4e00\u4e9b\u751f\u7269\u5b66\u5bb6\u8054\u5408\u8ba1\u7b97\u673a\u5de5\u7a0b\u5e08\u8bd5\u56fe\u4f7f\u7528\u4ee3\u7801\u5b8c\u6574\u6a21\u62df\u4e00\u4e2a\u5355\u7ec6\u80de\u751f\u7269\u7684\u5168\u90e8\u795e\u7ecf\u5143. \u865a\u62df\u673a\u6b63\u662f\u8fd9\u6837\u4e00\u95e8\u5145\u6ee1\u65e0\u9650\u53ef\u80fd\u7684\u5b66\u79d1, \u5982\u679c\u7ad9\u5f97\u66f4\u9ad8\u4e00\u70b9, \u6216\u8bb8\u80fd\u770b\u5230\u8fdc\u5904\u7684\u300a\u9ed1\u5ba2\u5e1d\u56fd\u300b?","title":"\u540e\u8bb0"},{"location":"content/gameboy/preface/","text":"\u5e8f \u81ea 1945 \u5e74\u51af\u00b7\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u786e\u7acb, \u5728\u4e0d\u5230\u4e00\u4e2a\u4e16\u7eaa\u7684\u53d1\u5c55\u4e2d, \u8ba1\u7b97\u673a\u5df2\u7ecf\u6e17\u900f\u5230\u4eba\u7c7b\u793e\u4f1a\u7684\u6bcf\u4e00\u4e2a\u89d2\u843d. \u4f46\u6b63\u5982\u5386\u53f2\u957f\u6cb3\u4e2d\u79cd\u79cd\u6587\u660e\u7684\u5174\u8870\u8fed\u8d77\u4e00\u822c, \u8bb8\u591a\u7ecf\u5178\u8ba1\u7b97\u673a\u4e5f\u518d\u4e00\u6b21\u4e00\u6b21\u7684\u5de8\u5927\u53d8\u9769\u4e2d\u88ab\u9057\u5931\u548c\u9057\u5fd8. \u963f\u5170\u00b7\u56fe\u7075\u66fe\u63d0\u51fa: \u5f53\u8ba1\u7b97\u673a P \u53ef\u4ee5\u6a21\u62df\u8ba1\u7b97\u673a Q \u800c\u4e14 Q \u4e5f\u53ef\u4ee5\u6a21\u62df P, \u5219\u8ba1\u7b97\u673a Q \u4e0e \u8ba1\u7b97\u673a P \u662f\u56fe\u7075\u7b49\u4ef7\u7684. \u968f\u540e IBM \u4e8e\u4e0a\u4e16\u7eaa\u516d\u4e03\u5341\u5e74\u4ee3\u6b63\u5f0f\u63d0\u51fa\u865a\u62df\u673a\u6280\u672f. \u4e8b\u5b9e\u4e0a, \u8bb8\u591a\u865a\u62df\u673a\u51fa\u73b0\u7684\u521d\u8877\u6b63\u662f\u4e3a\u4e86\u4fdd\u5b58\u591a\u5e74\u524d\u7684\u8f6f\u4ef6\u6216\u6e38\u620f. \u4e00\u4e9b\u5c0f\u65f6\u5019\u7684\u7ecf\u5178\u6e38\u620f\u6bd4\u5982\u8d85\u7ea7\u739b\u4e3d, \u5766\u514b\u5927\u6218, \u7cbe\u7075\u5b9d\u53ef\u68a6\u7b49, \u968f\u7740\u65f6\u4ee3\u7684\u53d1\u5c55, \u80fd\u627f\u8f7d\u5b83\u4eec\u8fd0\u884c\u7684\u7ea2\u767d\u673a, Game Boy \u6e38\u620f\u673a\u7b49\u5747\u5df2\u7ecf\u505c\u4ea7\u4e86, \u4f46\u662f\u53ea\u8981\u4ece\u4e92\u8054\u7f51\u4e0a\u4e0b\u8f7d\u4e00\u4e2a\u4eff\u771f\u5668, \u5c31\u53ef\u4ee5\u5728 PC \u4e0a\u968f\u610f\u6e38\u73a9\u8fd9\u4e9b\u6e38\u620f, \u5c31\u597d\u50cf\u5728\u624b\u4e2d\u6709\u4e86\u4e00\u53f0\u771f\u6b63\u7684\u6e38\u620f\u673a\u4e00\u6837. \u5982\u679c\u8bfb\u8005\u5bf9\u8fd9\u79cd\u6280\u672f\u611f\u5230\u597d\u5947\u7684\u8bdd, \u90a3\u4e48\u76f8\u4fe1\u672c\u4e66\u4e00\u5b9a\u4e0d\u4f1a\u4ee4\u4eba\u5931\u671b! \u6b64\u4e66\u7531\u4e8e\u4efb\u5929\u5802\u7684\u8b66\u544a, \u4ee5\u5546\u4e1a\u6027\u8d28\u4e3a\u76ee\u7684\u7684\u51fa\u7248\u8ba1\u5212\u5df2\u7ecf\u6401\u6d45 . \u7b14\u8005\u4e8e 2019 \u5e74\u4e2d\u5f00\u59cb\u52a8\u7b14, 2020 \u5e74\u6625\u80ba\u708e\u671f\u95f4\u6210\u4e66\u5b8c\u6210, \u975e\u5e38\u9057\u61be. \u4eff\u771f\u5668\u6e90\u4ee3\u7801: https://github.com/mohanson/gameboy \u4e3a\u4ec0\u4e48\u8981\u5199\u5173\u4e8e\u865a\u62df\u673a\u7684\u4e66 \u5f53\u524d\u865a\u62df\u673a\u6280\u672f\u6b63\u5728\u8ba1\u7b97\u673a\u53ca\u4e92\u8054\u7f51\u4e2d\u88ab\u5927\u91cf\u4f7f\u7528, \u65e0\u8bba\u662f\u5728\u670d\u52a1\u5668, \u4e2a\u4eba PC, \u624b\u673a\u751a\u81f3\u624b\u8868, \u90fd\u80fd\u89c1\u5230\u865a\u62df\u673a\u7684\u8eab\u5f71. \u5c31\u62ff\u6700\u5e38\u89c1\u7684 Android \u7cfb\u7edf\u6765\u8bf4, \u5176\u8fd0\u884c App \u7684 JVM \u5c31\u662f\u4e00\u4e2a\u865a\u62df\u673a. \u540c\u65f6\u50cf\u4e9a\u9a6c\u900a\u7b49\u4e91\u670d\u52a1\u5668\u5382\u5546\u7684\u865a\u62df\u5316\u6280\u672f, \u4ee5\u53ca\u684c\u9762\u7aef\u7684 VMWare \u548c VirtualBox \u7b49\u5de5\u5177\u4e5f\u5747\u662f\u65e5\u5e38\u751f\u6d3b\u4e2d\u5e38\u7528\u7684\u865a\u62df\u673a. \u865a\u62df\u673a\u5e94\u7528\u5982\u6b64\u4e4b\u5e7f\u6cdb, \u4f46\u7b14\u8005\u5374\u5f88\u5c11\u89c1\u5230\u6709\u4eba\u73a9\u865a\u62df\u673a, \u4e00\u65b9\u9762\u5728\u4e8e\u865a\u62df\u673a\u5e95\u5c42\u6280\u672f\u751a\u5c11\u88ab\u7528\u4e8e\u4e1a\u52a1\u5de5\u4f5c, \u53e6\u4e00\u65b9\u9762\u5728\u4e8e\u8ba8\u8bba\u865a\u62df\u673a\u6280\u672f\u7684\u4e66\u7c4d\u6216\u6559\u7a0b\u76f8\u5f53\u7f3a\u4e4f\u5bfc\u81f4\u7684\u865a\u62df\u673a\u6280\u672f\u5165\u95e8\u95e8\u69db\u975e\u5e38\u9ad8. \u5728\u7a0b\u5e8f\u5458\u7684\u4e16\u754c, \u4f1a\u865a\u62df\u673a\u4e0e\u7f16\u8bd1\u5668\u4e00\u76f4\u662f\u4e00\u4ef6\u88ab\u4eba\u7fa1\u6155\u7684\u4e8b. \u867d\u7136\u5f88\u96be\u771f\u7684\u4f9d\u9760\u8fd9\u95e8\u6280\u672f\u83b7\u53d6\u5de5\u4f5c\u62a5\u916c(\u804c\u4f4d\u771f\u7684\u5f88\u5c11!), \u4f46\u7528\u6765\u63d0\u5347\u81ea\u5df1\u5bf9\u8ba1\u7b97\u673a\u7684\u7406\u89e3\u8fd8\u662f\u4e0d\u5728\u8bdd\u4e0b\u7684. \u672c\u4e66\u901a\u8fc7\u7cfb\u7edf\u8bb2\u89e3\u4ee5\u53ca\u5b9e\u73b0\u4e00\u4e2a\u5b8c\u6574\u7684 Game Boy \u865a\u62df\u673a(\u4eff\u771f\u5668)\u4e3a\u4f8b, \u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u505a\u51fa\u4e00\u4e2a\"\u5b9e\u9645\"\u4e14\"\u597d\u73a9\"\u7684\u9879\u76ee, \u5438\u5f15\u66f4\u591a\u670b\u53cb\u8fdb\u5165\u8fd9\u4e2a\u9886\u57df. \u4f46\u540c\u65f6\u7b14\u8005\u610f\u8bc6\u5230, \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5e9e\u5927\u7684\u5de5\u7a0b, \u7b14\u8005\u5f88\u96be\u5728\u51e0\u5341\u4e07\u5b57\u4e2d\u5c06 Game Boy \u7684\u6bcf\u4e00\u4e2a\u6280\u672f\u7ec6\u8282\u90fd\u8bb2\u89e3\u660e\u4e86, \u751a\u81f3\u67d0\u4e9b\u5730\u65b9\u53ef\u80fd\u5b58\u5728\u7eb0\u6f0f. \u56e0\u6b64\u7b14\u8005\u7684\u53e6\u4e00\u4e2a\u5e0c\u671b\u662f\u5f53\u8bfb\u8005\u53d1\u73b0\u4e66\u4e2d\u7684\u7eb0\u6f0f\u65f6\u53ef\u4ee5\u901a\u8fc7\u63d0\u4ea4 Issues \u7684\u65b9\u5f0f\u53c2\u4e0e\u672c\u4e66\u7684\u6392\u9519, \u8ba9\u6211\u4eec\u53ef\u4ee5\u5171\u540c\u5b8c\u5584\u8fd9\u672c\u4e66\u7c4d. \u76ee\u6807\u8bfb\u8005 \u6709\u4e30\u5bcc\u7ecf\u9a8c\u7684\u8f6f\u786c\u4ef6\u5de5\u7a0b\u5e08 \u5bf9\u865a\u62df\u673a\u611f\u5174\u8da3\u7684\u5f00\u53d1\u8005 \u4f1a Rust \u7f16\u7a0b\u8bed\u8a00 \u672c\u4e66\u5927\u7eb2 \u865a\u62df\u673a\u53d1\u5c55\u53f2. \u4ecb\u7ecd\u865a\u62df\u673a(\u4eff\u771f\u5668)\u7684\u5386\u53f2, \u4e3b\u8981\u4ee5\u4efb\u5929\u5802\u4e0e\u7d22\u5c3c\u7684\u5404\u79cd\u6e38\u620f\u673a\u7684\u4eff\u771f\u5668\u5b9e\u73b0\u4e3a\u4e3b. \u6e38\u620f\u5361\u5e26. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u7684\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6e38\u620f\u5361\u5e26. \u4e2d\u592e\u5904\u7406\u5668. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u7684 CPU:LR35902. \u5305\u62ec\u5176\u5bc4\u5b58\u5668, \u6307\u4ee4\u96c6, \u4e2d\u65ad\u4ee5\u53ca\u65f6\u949f\u4fe1\u53f7\u7b49. \u5185\u5b58\u7ba1\u7406\u5355\u5143\u4e0e\u4e3b\u677f. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143\u4e0e\u4e3b\u677f. \u89c6\u9891. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u7684 GPU \u53ca\u8d34\u56fe\u7cfb\u7edf. \u97f3\u9891. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u7684 APU, \u671f\u95f4\u4f1a\u7b80\u5355\u4ecb\u7ecd\u6570\u5b57\u97f3\u9891. \u6e38\u620f\u624b\u67c4, \u4e32\u884c\u901a\u4fe1\u63a5\u53e3\u4e0e\u5176\u4ed6. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u5269\u4f59\u7684\u786c\u4ef6. \u8fd9\u4e9b\u786c\u4ef6\u5b9e\u73b0\u8f83\u4e3a\u7b80\u5355, \u56e0\u6b64\u653e\u5728\u4e00\u7ae0\u7edf\u4e00\u5904\u7406. \u6d4b\u8bd5. \u4ecb\u7ecd\u5982\u4f55\u6d4b\u8bd5\u7f16\u5199\u7684 Game Boy \u865a\u62df\u673a. \u4f7f\u7528 GB Studio \u5f00\u53d1\u6e38\u620f. \u4ecb\u7ecd GB Studio \u5f00\u53d1\u5de5\u5177. \u865a\u62df\u673a\u9ad8\u7ea7\u5b9e\u8df5\u4e0e\u672a\u6765\u5c55\u671b. \u5e26\u9886\u8bfb\u8005\u4e86\u89e3\u4e00\u4e9b\u5468\u8fb9\u77e5\u8bc6, \u6d45\u5c1d\u8f84\u6b62. \u672c\u4e66\u6e90\u7801 \u672c\u4e66\u7684\u6e90\u7801\u5df2\u7ecf\u6258\u7ba1\u5728 Github: https://github.com/mohanson/gameboy . \u622a\u81f3\u672c\u4e66\u51fa\u7248\u4e4b\u524d, \u5b83\u662f Github \u4e0a Star \u6570\u91cf\u8f83\u9ad8\u7684 Game Boy \u5f00\u6e90\u4eff\u771f\u5668\u4e4b\u4e00. \u5efa\u8bae\u9605\u8bfb\u65b9\u5f0f \u9996\u5148, \u8bfb\u8005\u5fc5\u987b\u62e5\u6709 Rust \u7f16\u7a0b\u8bed\u8a00\u7684\u76f8\u5173\u5f00\u53d1\u7ecf\u9a8c. \u672c\u4e66\u9ed8\u8ba4\u8bfb\u8005\u5df2\u7ecf\u76f8\u5f53\u719f\u6089\u8fd9\u95e8\u7f16\u7a0b\u8bed\u8a00, \u56e0\u6b64\u4e0d\u4f1a\u518d\u5728\u4e66\u4e2d\u53bb\u4ecb\u7ecd\u8fd9\u95e8\u8bed\u8a00\u7684\u7ec6\u8282. \u540c\u65f6\u8bfb\u8005\u9700\u8981\u4e00\u70b9\u70b9\u7684 Python \u5f00\u53d1\u7ecf\u9a8c, \u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3, Python \u53ea\u4f1a\u51fa\u73b0\u4e00\u4e24\u6b21. \u5728\u4ee5\u4e0b\u4e24\u4e2a\u7f51\u7ad9\u4e2d\u53ef\u4ee5\u627e\u5230\u8fd9\u4e24\u95e8\u7f16\u7a0b\u8bed\u8a00\u7684\u6559\u7a0b: Rust: https://www.rust-lang.org/zh-CN/ Python: https://www.python.org/ \u5176\u6b21, \u672c\u4e66\u7684\u5185\u5bb9\u5b8c\u5168\u6839\u636e\u5df2\u516c\u5f00\u7684 Game Boy \u786c\u4ef6\u89c4\u8303\u7f16\u5199. \u8bfb\u8005\u53ef\u4ee5\u5728\u5982\u4e0b\u4e24\u4e2a\u7f51\u7ad9\u83b7\u53d6\u7b14\u8005\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u6240\u53c2\u8003\u7684\u786c\u4ef6\u6280\u672f\u6587\u6863: GbdevWiki: https://gbdev.gg8.se/wiki/articles/Main_Page GBCPUman: http://marc.rawer.de/Gameboy/Docs/GBCPUman.pdf \u5f3a\u70c8\u5efa\u8bae\u8bfb\u8005\u5728\u9605\u8bfb\u672c\u4e66\u7684\u540c\u65f6\u9605\u8bfb\u4ee5\u4e0a\u4e24\u4efd\u6587\u6863. \u52d8\u8bef \u4eba\u529b\u6709\u65f6\u800c\u7a77, \u672c\u4e66\u7f16\u5199\u8fc7\u7a0b\u4e2d\u96be\u514d\u51fa\u73b0\u9519\u8bef, \u5982\u679c\u8bfb\u8005\u53d1\u73b0\u4efb\u4f55\u95ee\u9898, \u6b22\u8fce\u5728\u672c\u4e66\u4ed3\u5e93 https://github.com/mohanson/accu \u4e0b\u521b\u5efa Issues, \u7b14\u8005\u4f1a\u7b2c\u4e00\u65f6\u95f4\u7ed9\u4e88\u7b54\u590d. ROMs Game Boy \u5728\u5386\u53f2\u4e0a\u603b\u5171\u53d1\u884c\u8fc7\u51e0\u5343\u6b3e\u6e38\u620f, \u7b14\u8005\u4ece\u4e92\u8054\u7f51\u4e0a\u641c\u96c6\u4e86\u8fd9\u4e9b\u6e38\u620f\u7684 ROMs \u4ee5\u65b9\u4fbf\u8bfb\u8005\u8fdb\u884c\u4e0b\u8f7d\u548c\u6d4b\u8bd5. \u8fd9\u4e9b ROMs \u4ec5\u505a\u5b66\u4e60\u548c\u6d4b\u8bd5\u4f7f\u7528, \u5982\u82e5\u4fb5\u72af\u60a8\u7684\u6743\u76ca, \u8bf7\u8054\u7cfb\u7b14\u8005, \u7b14\u8005\u4f1a\u7b2c\u4e00\u65f6\u95f4\u4e88\u4ee5\u5220\u9664. \u767e\u5ea6\u7f51\u76d8\u94fe\u63a5: https://pan.baidu.com/s/1_gtQo9EymYpE1_mbO8i5qQ , \u63d0\u53d6\u7801:xkn8. \u81f4\u8c22 \u672c\u4e66\u7f16\u64b0\u8fc7\u7a0b\u4e2d, \u83b7\u53d6\u4e86\u5927\u91cf\u6765\u81ea\u4e92\u8054\u7f51\u7684\u516c\u5f00\u8d44\u6599, \u6587\u6863\u548c\u56fe\u50cf. \u5728\u6b64\u7279\u522b\u611f\u8c22\u7f51\u7ad9 https://gbdev.gg8.se , \u53ef\u4ee5\u8bf4\u6ca1\u6709\u8be5\u7f51\u7ad9\u63d0\u4f9b\u7684\u8d44\u6599\u5c31\u4e0d\u53ef\u80fd\u5b8c\u6210\u6b64\u4e66. \u8be5\u7f51\u7ad9\u9996\u9875\u5199\u6709\u4e00\u4e2a\u8c1a\u8bed:\"A journey of a thousand miles begins with one small step\"(\u5343\u91cc\u4e4b\u884c, \u59cb\u4e8e\u8db3\u4e0b), \u7b14\u8005\u5728\u6210\u4e66\u8fc7\u7a0b\u4e2d\u6df1\u611f\u8ba4\u540c, \u7b14\u8005\u7b2c\u4e00\u6b21\u5199\u4ecb\u7ecd\u865a\u62df\u673a\u7684\u6587\u7ae0\u65f6, \u6587\u7ae0\u53ea\u6709\u7ea6 1000 \u5b57\u5de6\u53f3, \u5982\u4eca\u8c01\u80fd\u60f3\u5230\u5728\u4e00\u5e74\u7684\u575a\u6301\u540e, \u7b14\u8005\u5c45\u7136\u6d0b\u6d0b\u6d12\u6d12\u5730\u5199\u4e86\u51e0\u5341\u4e07\u5b57. \u5176\u6b21\u611f\u8c22\u7ef4\u57fa\u767e\u79d1, \u4e3a\u4e86\u786e\u4fdd\u4e66\u4e2d\u5173\u4e8e\u8ba1\u7b97\u673a\u67b6\u6784\u7684\u5404\u4e2a\u6280\u672f\u7ec6\u8282\u7684\u6b63\u786e, \u672c\u4e66\u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u4e13\u6709\u540d\u8bcd\u7684\u89e3\u6790\u5927\u91cf\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u4e2d\u7684\u76f8\u5173\u8bcd\u6761. \u4f46\u7531\u4e8e\u7ef4\u57fa\u767e\u79d1\u662f\u52a8\u6001\u66f4\u65b0\u7684\u767e\u79d1\u5168\u4e66, \u672c\u4e66\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u4e66\u4e2d\u6240\u8f7d\u7684\u5185\u5bb9\u7684\u65f6\u6548\u6027. \u540c\u65f6\u4e5f\u611f\u8c22\u516c\u53f8\u63d0\u4f9b\u7684\u76f8\u5bf9\u5bbd\u677e\u7684\u5de5\u4f5c\u73af\u5883, \u5982\u679c\u5b9e\u884c\u7684 996 \u5de5\u4f5c\u5236\u7684\u8bdd, \u76f8\u4fe1\u672c\u4e66\u7684\u6210\u4e66\u5c06\u665a\u4e0a\u51e0\u5e74.\u8fd8\u6709\u7b14\u8005\u7684\u597d\u53cb\u53f6\u5609\u96e8, \u5982\u679c\u4e0d\u662f\u4ed6\u6700\u521d\u5e26\u9886\u7b14\u8005\u8e0f\u5165\u4e86\u865a\u62df\u673a\u9886\u57df, \u7b14\u8005\u7684\u5c5e\u6027\u70b9\u53ef\u80fd\u5c31\u4f1a\u70b9\u5230\u5176\u5b83\u65b9\u9762.","title":"GB-\u524d\u8a00"},{"location":"content/gameboy/preface/#_1","text":"\u81ea 1945 \u5e74\u51af\u00b7\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u786e\u7acb, \u5728\u4e0d\u5230\u4e00\u4e2a\u4e16\u7eaa\u7684\u53d1\u5c55\u4e2d, \u8ba1\u7b97\u673a\u5df2\u7ecf\u6e17\u900f\u5230\u4eba\u7c7b\u793e\u4f1a\u7684\u6bcf\u4e00\u4e2a\u89d2\u843d. \u4f46\u6b63\u5982\u5386\u53f2\u957f\u6cb3\u4e2d\u79cd\u79cd\u6587\u660e\u7684\u5174\u8870\u8fed\u8d77\u4e00\u822c, \u8bb8\u591a\u7ecf\u5178\u8ba1\u7b97\u673a\u4e5f\u518d\u4e00\u6b21\u4e00\u6b21\u7684\u5de8\u5927\u53d8\u9769\u4e2d\u88ab\u9057\u5931\u548c\u9057\u5fd8. \u963f\u5170\u00b7\u56fe\u7075\u66fe\u63d0\u51fa: \u5f53\u8ba1\u7b97\u673a P \u53ef\u4ee5\u6a21\u62df\u8ba1\u7b97\u673a Q \u800c\u4e14 Q \u4e5f\u53ef\u4ee5\u6a21\u62df P, \u5219\u8ba1\u7b97\u673a Q \u4e0e \u8ba1\u7b97\u673a P \u662f\u56fe\u7075\u7b49\u4ef7\u7684. \u968f\u540e IBM \u4e8e\u4e0a\u4e16\u7eaa\u516d\u4e03\u5341\u5e74\u4ee3\u6b63\u5f0f\u63d0\u51fa\u865a\u62df\u673a\u6280\u672f. \u4e8b\u5b9e\u4e0a, \u8bb8\u591a\u865a\u62df\u673a\u51fa\u73b0\u7684\u521d\u8877\u6b63\u662f\u4e3a\u4e86\u4fdd\u5b58\u591a\u5e74\u524d\u7684\u8f6f\u4ef6\u6216\u6e38\u620f. \u4e00\u4e9b\u5c0f\u65f6\u5019\u7684\u7ecf\u5178\u6e38\u620f\u6bd4\u5982\u8d85\u7ea7\u739b\u4e3d, \u5766\u514b\u5927\u6218, \u7cbe\u7075\u5b9d\u53ef\u68a6\u7b49, \u968f\u7740\u65f6\u4ee3\u7684\u53d1\u5c55, \u80fd\u627f\u8f7d\u5b83\u4eec\u8fd0\u884c\u7684\u7ea2\u767d\u673a, Game Boy \u6e38\u620f\u673a\u7b49\u5747\u5df2\u7ecf\u505c\u4ea7\u4e86, \u4f46\u662f\u53ea\u8981\u4ece\u4e92\u8054\u7f51\u4e0a\u4e0b\u8f7d\u4e00\u4e2a\u4eff\u771f\u5668, \u5c31\u53ef\u4ee5\u5728 PC \u4e0a\u968f\u610f\u6e38\u73a9\u8fd9\u4e9b\u6e38\u620f, \u5c31\u597d\u50cf\u5728\u624b\u4e2d\u6709\u4e86\u4e00\u53f0\u771f\u6b63\u7684\u6e38\u620f\u673a\u4e00\u6837. \u5982\u679c\u8bfb\u8005\u5bf9\u8fd9\u79cd\u6280\u672f\u611f\u5230\u597d\u5947\u7684\u8bdd, \u90a3\u4e48\u76f8\u4fe1\u672c\u4e66\u4e00\u5b9a\u4e0d\u4f1a\u4ee4\u4eba\u5931\u671b! \u6b64\u4e66\u7531\u4e8e\u4efb\u5929\u5802\u7684\u8b66\u544a, \u4ee5\u5546\u4e1a\u6027\u8d28\u4e3a\u76ee\u7684\u7684\u51fa\u7248\u8ba1\u5212\u5df2\u7ecf\u6401\u6d45 . \u7b14\u8005\u4e8e 2019 \u5e74\u4e2d\u5f00\u59cb\u52a8\u7b14, 2020 \u5e74\u6625\u80ba\u708e\u671f\u95f4\u6210\u4e66\u5b8c\u6210, \u975e\u5e38\u9057\u61be. \u4eff\u771f\u5668\u6e90\u4ee3\u7801: https://github.com/mohanson/gameboy","title":"\u5e8f"},{"location":"content/gameboy/preface/#_2","text":"\u5f53\u524d\u865a\u62df\u673a\u6280\u672f\u6b63\u5728\u8ba1\u7b97\u673a\u53ca\u4e92\u8054\u7f51\u4e2d\u88ab\u5927\u91cf\u4f7f\u7528, \u65e0\u8bba\u662f\u5728\u670d\u52a1\u5668, \u4e2a\u4eba PC, \u624b\u673a\u751a\u81f3\u624b\u8868, \u90fd\u80fd\u89c1\u5230\u865a\u62df\u673a\u7684\u8eab\u5f71. \u5c31\u62ff\u6700\u5e38\u89c1\u7684 Android \u7cfb\u7edf\u6765\u8bf4, \u5176\u8fd0\u884c App \u7684 JVM \u5c31\u662f\u4e00\u4e2a\u865a\u62df\u673a. \u540c\u65f6\u50cf\u4e9a\u9a6c\u900a\u7b49\u4e91\u670d\u52a1\u5668\u5382\u5546\u7684\u865a\u62df\u5316\u6280\u672f, \u4ee5\u53ca\u684c\u9762\u7aef\u7684 VMWare \u548c VirtualBox \u7b49\u5de5\u5177\u4e5f\u5747\u662f\u65e5\u5e38\u751f\u6d3b\u4e2d\u5e38\u7528\u7684\u865a\u62df\u673a. \u865a\u62df\u673a\u5e94\u7528\u5982\u6b64\u4e4b\u5e7f\u6cdb, \u4f46\u7b14\u8005\u5374\u5f88\u5c11\u89c1\u5230\u6709\u4eba\u73a9\u865a\u62df\u673a, \u4e00\u65b9\u9762\u5728\u4e8e\u865a\u62df\u673a\u5e95\u5c42\u6280\u672f\u751a\u5c11\u88ab\u7528\u4e8e\u4e1a\u52a1\u5de5\u4f5c, \u53e6\u4e00\u65b9\u9762\u5728\u4e8e\u8ba8\u8bba\u865a\u62df\u673a\u6280\u672f\u7684\u4e66\u7c4d\u6216\u6559\u7a0b\u76f8\u5f53\u7f3a\u4e4f\u5bfc\u81f4\u7684\u865a\u62df\u673a\u6280\u672f\u5165\u95e8\u95e8\u69db\u975e\u5e38\u9ad8. \u5728\u7a0b\u5e8f\u5458\u7684\u4e16\u754c, \u4f1a\u865a\u62df\u673a\u4e0e\u7f16\u8bd1\u5668\u4e00\u76f4\u662f\u4e00\u4ef6\u88ab\u4eba\u7fa1\u6155\u7684\u4e8b. \u867d\u7136\u5f88\u96be\u771f\u7684\u4f9d\u9760\u8fd9\u95e8\u6280\u672f\u83b7\u53d6\u5de5\u4f5c\u62a5\u916c(\u804c\u4f4d\u771f\u7684\u5f88\u5c11!), \u4f46\u7528\u6765\u63d0\u5347\u81ea\u5df1\u5bf9\u8ba1\u7b97\u673a\u7684\u7406\u89e3\u8fd8\u662f\u4e0d\u5728\u8bdd\u4e0b\u7684. \u672c\u4e66\u901a\u8fc7\u7cfb\u7edf\u8bb2\u89e3\u4ee5\u53ca\u5b9e\u73b0\u4e00\u4e2a\u5b8c\u6574\u7684 Game Boy \u865a\u62df\u673a(\u4eff\u771f\u5668)\u4e3a\u4f8b, \u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u505a\u51fa\u4e00\u4e2a\"\u5b9e\u9645\"\u4e14\"\u597d\u73a9\"\u7684\u9879\u76ee, \u5438\u5f15\u66f4\u591a\u670b\u53cb\u8fdb\u5165\u8fd9\u4e2a\u9886\u57df. \u4f46\u540c\u65f6\u7b14\u8005\u610f\u8bc6\u5230, \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5e9e\u5927\u7684\u5de5\u7a0b, \u7b14\u8005\u5f88\u96be\u5728\u51e0\u5341\u4e07\u5b57\u4e2d\u5c06 Game Boy \u7684\u6bcf\u4e00\u4e2a\u6280\u672f\u7ec6\u8282\u90fd\u8bb2\u89e3\u660e\u4e86, \u751a\u81f3\u67d0\u4e9b\u5730\u65b9\u53ef\u80fd\u5b58\u5728\u7eb0\u6f0f. \u56e0\u6b64\u7b14\u8005\u7684\u53e6\u4e00\u4e2a\u5e0c\u671b\u662f\u5f53\u8bfb\u8005\u53d1\u73b0\u4e66\u4e2d\u7684\u7eb0\u6f0f\u65f6\u53ef\u4ee5\u901a\u8fc7\u63d0\u4ea4 Issues \u7684\u65b9\u5f0f\u53c2\u4e0e\u672c\u4e66\u7684\u6392\u9519, \u8ba9\u6211\u4eec\u53ef\u4ee5\u5171\u540c\u5b8c\u5584\u8fd9\u672c\u4e66\u7c4d.","title":"\u4e3a\u4ec0\u4e48\u8981\u5199\u5173\u4e8e\u865a\u62df\u673a\u7684\u4e66"},{"location":"content/gameboy/preface/#_3","text":"\u6709\u4e30\u5bcc\u7ecf\u9a8c\u7684\u8f6f\u786c\u4ef6\u5de5\u7a0b\u5e08 \u5bf9\u865a\u62df\u673a\u611f\u5174\u8da3\u7684\u5f00\u53d1\u8005 \u4f1a Rust \u7f16\u7a0b\u8bed\u8a00","title":"\u76ee\u6807\u8bfb\u8005"},{"location":"content/gameboy/preface/#_4","text":"\u865a\u62df\u673a\u53d1\u5c55\u53f2. \u4ecb\u7ecd\u865a\u62df\u673a(\u4eff\u771f\u5668)\u7684\u5386\u53f2, \u4e3b\u8981\u4ee5\u4efb\u5929\u5802\u4e0e\u7d22\u5c3c\u7684\u5404\u79cd\u6e38\u620f\u673a\u7684\u4eff\u771f\u5668\u5b9e\u73b0\u4e3a\u4e3b. \u6e38\u620f\u5361\u5e26. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u7684\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6e38\u620f\u5361\u5e26. \u4e2d\u592e\u5904\u7406\u5668. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u7684 CPU:LR35902. \u5305\u62ec\u5176\u5bc4\u5b58\u5668, \u6307\u4ee4\u96c6, \u4e2d\u65ad\u4ee5\u53ca\u65f6\u949f\u4fe1\u53f7\u7b49. \u5185\u5b58\u7ba1\u7406\u5355\u5143\u4e0e\u4e3b\u677f. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143\u4e0e\u4e3b\u677f. \u89c6\u9891. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u7684 GPU \u53ca\u8d34\u56fe\u7cfb\u7edf. \u97f3\u9891. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u7684 APU, \u671f\u95f4\u4f1a\u7b80\u5355\u4ecb\u7ecd\u6570\u5b57\u97f3\u9891. \u6e38\u620f\u624b\u67c4, \u4e32\u884c\u901a\u4fe1\u63a5\u53e3\u4e0e\u5176\u4ed6. \u4ecb\u7ecd\u53ca\u5b9e\u73b0 Game Boy \u5269\u4f59\u7684\u786c\u4ef6. \u8fd9\u4e9b\u786c\u4ef6\u5b9e\u73b0\u8f83\u4e3a\u7b80\u5355, \u56e0\u6b64\u653e\u5728\u4e00\u7ae0\u7edf\u4e00\u5904\u7406. \u6d4b\u8bd5. \u4ecb\u7ecd\u5982\u4f55\u6d4b\u8bd5\u7f16\u5199\u7684 Game Boy \u865a\u62df\u673a. \u4f7f\u7528 GB Studio \u5f00\u53d1\u6e38\u620f. \u4ecb\u7ecd GB Studio \u5f00\u53d1\u5de5\u5177. \u865a\u62df\u673a\u9ad8\u7ea7\u5b9e\u8df5\u4e0e\u672a\u6765\u5c55\u671b. \u5e26\u9886\u8bfb\u8005\u4e86\u89e3\u4e00\u4e9b\u5468\u8fb9\u77e5\u8bc6, \u6d45\u5c1d\u8f84\u6b62.","title":"\u672c\u4e66\u5927\u7eb2"},{"location":"content/gameboy/preface/#_5","text":"\u672c\u4e66\u7684\u6e90\u7801\u5df2\u7ecf\u6258\u7ba1\u5728 Github: https://github.com/mohanson/gameboy . \u622a\u81f3\u672c\u4e66\u51fa\u7248\u4e4b\u524d, \u5b83\u662f Github \u4e0a Star \u6570\u91cf\u8f83\u9ad8\u7684 Game Boy \u5f00\u6e90\u4eff\u771f\u5668\u4e4b\u4e00.","title":"\u672c\u4e66\u6e90\u7801"},{"location":"content/gameboy/preface/#_6","text":"\u9996\u5148, \u8bfb\u8005\u5fc5\u987b\u62e5\u6709 Rust \u7f16\u7a0b\u8bed\u8a00\u7684\u76f8\u5173\u5f00\u53d1\u7ecf\u9a8c. \u672c\u4e66\u9ed8\u8ba4\u8bfb\u8005\u5df2\u7ecf\u76f8\u5f53\u719f\u6089\u8fd9\u95e8\u7f16\u7a0b\u8bed\u8a00, \u56e0\u6b64\u4e0d\u4f1a\u518d\u5728\u4e66\u4e2d\u53bb\u4ecb\u7ecd\u8fd9\u95e8\u8bed\u8a00\u7684\u7ec6\u8282. \u540c\u65f6\u8bfb\u8005\u9700\u8981\u4e00\u70b9\u70b9\u7684 Python \u5f00\u53d1\u7ecf\u9a8c, \u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3, Python \u53ea\u4f1a\u51fa\u73b0\u4e00\u4e24\u6b21. \u5728\u4ee5\u4e0b\u4e24\u4e2a\u7f51\u7ad9\u4e2d\u53ef\u4ee5\u627e\u5230\u8fd9\u4e24\u95e8\u7f16\u7a0b\u8bed\u8a00\u7684\u6559\u7a0b: Rust: https://www.rust-lang.org/zh-CN/ Python: https://www.python.org/ \u5176\u6b21, \u672c\u4e66\u7684\u5185\u5bb9\u5b8c\u5168\u6839\u636e\u5df2\u516c\u5f00\u7684 Game Boy \u786c\u4ef6\u89c4\u8303\u7f16\u5199. \u8bfb\u8005\u53ef\u4ee5\u5728\u5982\u4e0b\u4e24\u4e2a\u7f51\u7ad9\u83b7\u53d6\u7b14\u8005\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u6240\u53c2\u8003\u7684\u786c\u4ef6\u6280\u672f\u6587\u6863: GbdevWiki: https://gbdev.gg8.se/wiki/articles/Main_Page GBCPUman: http://marc.rawer.de/Gameboy/Docs/GBCPUman.pdf \u5f3a\u70c8\u5efa\u8bae\u8bfb\u8005\u5728\u9605\u8bfb\u672c\u4e66\u7684\u540c\u65f6\u9605\u8bfb\u4ee5\u4e0a\u4e24\u4efd\u6587\u6863.","title":"\u5efa\u8bae\u9605\u8bfb\u65b9\u5f0f"},{"location":"content/gameboy/preface/#_7","text":"\u4eba\u529b\u6709\u65f6\u800c\u7a77, \u672c\u4e66\u7f16\u5199\u8fc7\u7a0b\u4e2d\u96be\u514d\u51fa\u73b0\u9519\u8bef, \u5982\u679c\u8bfb\u8005\u53d1\u73b0\u4efb\u4f55\u95ee\u9898, \u6b22\u8fce\u5728\u672c\u4e66\u4ed3\u5e93 https://github.com/mohanson/accu \u4e0b\u521b\u5efa Issues, \u7b14\u8005\u4f1a\u7b2c\u4e00\u65f6\u95f4\u7ed9\u4e88\u7b54\u590d.","title":"\u52d8\u8bef"},{"location":"content/gameboy/preface/#roms","text":"Game Boy \u5728\u5386\u53f2\u4e0a\u603b\u5171\u53d1\u884c\u8fc7\u51e0\u5343\u6b3e\u6e38\u620f, \u7b14\u8005\u4ece\u4e92\u8054\u7f51\u4e0a\u641c\u96c6\u4e86\u8fd9\u4e9b\u6e38\u620f\u7684 ROMs \u4ee5\u65b9\u4fbf\u8bfb\u8005\u8fdb\u884c\u4e0b\u8f7d\u548c\u6d4b\u8bd5. \u8fd9\u4e9b ROMs \u4ec5\u505a\u5b66\u4e60\u548c\u6d4b\u8bd5\u4f7f\u7528, \u5982\u82e5\u4fb5\u72af\u60a8\u7684\u6743\u76ca, \u8bf7\u8054\u7cfb\u7b14\u8005, \u7b14\u8005\u4f1a\u7b2c\u4e00\u65f6\u95f4\u4e88\u4ee5\u5220\u9664. \u767e\u5ea6\u7f51\u76d8\u94fe\u63a5: https://pan.baidu.com/s/1_gtQo9EymYpE1_mbO8i5qQ , \u63d0\u53d6\u7801:xkn8.","title":"ROMs"},{"location":"content/gameboy/preface/#_8","text":"\u672c\u4e66\u7f16\u64b0\u8fc7\u7a0b\u4e2d, \u83b7\u53d6\u4e86\u5927\u91cf\u6765\u81ea\u4e92\u8054\u7f51\u7684\u516c\u5f00\u8d44\u6599, \u6587\u6863\u548c\u56fe\u50cf. \u5728\u6b64\u7279\u522b\u611f\u8c22\u7f51\u7ad9 https://gbdev.gg8.se , \u53ef\u4ee5\u8bf4\u6ca1\u6709\u8be5\u7f51\u7ad9\u63d0\u4f9b\u7684\u8d44\u6599\u5c31\u4e0d\u53ef\u80fd\u5b8c\u6210\u6b64\u4e66. \u8be5\u7f51\u7ad9\u9996\u9875\u5199\u6709\u4e00\u4e2a\u8c1a\u8bed:\"A journey of a thousand miles begins with one small step\"(\u5343\u91cc\u4e4b\u884c, \u59cb\u4e8e\u8db3\u4e0b), \u7b14\u8005\u5728\u6210\u4e66\u8fc7\u7a0b\u4e2d\u6df1\u611f\u8ba4\u540c, \u7b14\u8005\u7b2c\u4e00\u6b21\u5199\u4ecb\u7ecd\u865a\u62df\u673a\u7684\u6587\u7ae0\u65f6, \u6587\u7ae0\u53ea\u6709\u7ea6 1000 \u5b57\u5de6\u53f3, \u5982\u4eca\u8c01\u80fd\u60f3\u5230\u5728\u4e00\u5e74\u7684\u575a\u6301\u540e, \u7b14\u8005\u5c45\u7136\u6d0b\u6d0b\u6d12\u6d12\u5730\u5199\u4e86\u51e0\u5341\u4e07\u5b57. \u5176\u6b21\u611f\u8c22\u7ef4\u57fa\u767e\u79d1, \u4e3a\u4e86\u786e\u4fdd\u4e66\u4e2d\u5173\u4e8e\u8ba1\u7b97\u673a\u67b6\u6784\u7684\u5404\u4e2a\u6280\u672f\u7ec6\u8282\u7684\u6b63\u786e, \u672c\u4e66\u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u4e13\u6709\u540d\u8bcd\u7684\u89e3\u6790\u5927\u91cf\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u4e2d\u7684\u76f8\u5173\u8bcd\u6761. \u4f46\u7531\u4e8e\u7ef4\u57fa\u767e\u79d1\u662f\u52a8\u6001\u66f4\u65b0\u7684\u767e\u79d1\u5168\u4e66, \u672c\u4e66\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u4e66\u4e2d\u6240\u8f7d\u7684\u5185\u5bb9\u7684\u65f6\u6548\u6027. \u540c\u65f6\u4e5f\u611f\u8c22\u516c\u53f8\u63d0\u4f9b\u7684\u76f8\u5bf9\u5bbd\u677e\u7684\u5de5\u4f5c\u73af\u5883, \u5982\u679c\u5b9e\u884c\u7684 996 \u5de5\u4f5c\u5236\u7684\u8bdd, \u76f8\u4fe1\u672c\u4e66\u7684\u6210\u4e66\u5c06\u665a\u4e0a\u51e0\u5e74.\u8fd8\u6709\u7b14\u8005\u7684\u597d\u53cb\u53f6\u5609\u96e8, \u5982\u679c\u4e0d\u662f\u4ed6\u6700\u521d\u5e26\u9886\u7b14\u8005\u8e0f\u5165\u4e86\u865a\u62df\u673a\u9886\u57df, \u7b14\u8005\u7684\u5c5e\u6027\u70b9\u53ef\u80fd\u5c31\u4f1a\u70b9\u5230\u5176\u5b83\u65b9\u9762.","title":"\u81f4\u8c22"},{"location":"content/gameboy/audio/concept/","text":"\u97f3\u9891\u7cfb\u7edf\u6982\u5ff5\u7b80\u4ecb \u5728 Game Boy \u4eff\u771f\u5668\u7684\u5b9e\u73b0\u8fc7\u7a0b\u4e2d, \u97f3\u9891\u662f\u6700\u4e0d\u5bb9\u6613\u7406\u89e3\u4e14\u96be\u5ea6\u6700\u9ad8\u7684\u4e00\u90e8\u5206. Game Boy \u7684\u97f3\u9891\u7cfb\u7edf\u590d\u6742\u4e14\u5c42\u5c42\u5d4c\u5957, \u4f46\u5982\u679c\u4ed4\u7ec6\u7684\u5c06\u5176\u62bd\u4e1d\u5265\u8327, \u5176\u6838\u5fc3\u672c\u8d28\u4fbf\u53ef\u5c55\u9732\u65e0\u9057: \u8981\u60f3\u64ad\u653e\u58f0\u97f3, \u53ea\u8981\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u70b9\u5411\u7279\u5b9a\u7684\u5bc4\u5b58\u5668\u5199\u5165\u7279\u5b9a\u7684\u503c. Game Boy \u7684\u6574\u4e2a\u97f3\u9891\u7cfb\u7edf\u90fd\u670d\u52a1\u4e8e\u8fd9\u4e2a\u76ee\u6807. Game Boy \u6709\u56db\u4e2a\u97f3\u9891\u901a\u9053, \u5206\u522b\u662f \u5177\u6709\u626b\u9891\u548c\u5305\u7edc\u529f\u80fd\u7684\u65b9\u6ce2(Square1) \u5177\u6709\u5305\u7edc\u529f\u80fd\u7684\u65b9\u6ce2(Square2) \u53ef\u7f16\u7a0b\u7684\u6ce2\u5f62(Wave) \u5177\u6709\u5305\u7edc\u529f\u80fd\u7684\u767d\u566a\u58f0(Noise) \u7cfb\u7edf\u53ef\u4ee5\u5206\u522b\u63a7\u5236\u8fd9\u56db\u4e2a\u97f3\u9891\u901a\u9053(\u5f00\u542f/\u5173\u95ed, \u8c03\u6574\u97f3\u91cf\u7b49), \u7136\u540e\u5c06\u6bcf\u4e2a\u8f93\u51fa\u7aef\u7684\u97f3\u9891\u8f93\u51fa\u8fdb\u884c\u6df7\u5408(Mixer), \u6700\u540e\u7ecf\u8fc7\u4e00\u4e2a\u5168\u5c40\u63a7\u5236\u6a21\u5757(\u5168\u5c40\u97f3\u91cf\u5927\u5c0f, \u5168\u5c40\u9759\u97f3\u7b49)\u540e\u8f93\u5165\u5230\u786c\u4ef6\u8bbe\u5907. \u5bf9\u97f3\u9891\u901a\u9053\u7684\u53c2\u6570\u4fee\u6539\u4e0d\u9700\u8981\u6682\u505c\u5f53\u524d\u7684\u97f3\u9891\u64ad\u653e. \u97f3\u9891\u6a21\u5757\u7684\u5de5\u4f5c\u6d41\u7a0b\u5927\u81f4\u5982\u4e0b: \u97f3\u9891\u7cfb\u7edf\u76f4\u63a5\u63a5\u6536 CPU \u65f6\u949f\u4fe1\u53f7\u7684\u662f\u4e00\u4e2a 512 Hz \u7684\u5b9a\u65f6\u5668, \u8be5\u5b9a\u65f6\u5668\u7ba1\u7406\u4e09\u4e2a\u7279\u6b8a\u529f\u80fd\u6a21\u5757\u7684\u8fd0\u4f5c: \u5206\u522b\u662f\u957f\u5ea6\u8ba1\u6570\u5668, \u626b\u9891\u5668\u548c\u97f3\u91cf\u5305\u7edc. \u8fd9\u4e9b\u63a7\u5236\u5668\u987e\u540d\u601d\u4e49\u63a7\u5236\u7740\u97f3\u9891\u901a\u9053\u7684\u4e00\u4e9b\u53c2\u6570, \u540e\u6587\u5c06\u8fdb\u884c\u8be6\u7ec6\u8bb2\u8ff0. \u7136\u540e\u8be5 512 Hz \u7684\u5b9a\u65f6\u5668\u8fd8\u8ddf\u7740 4 \u4e2a\u97f3\u9891\u901a\u9053, \u4ee5\u6bcf\u79d2 512 \u6b21\u7684\u9891\u7387\u89e6\u53d1\u8fd9\u4e9b\u901a\u9053\u8fdb\u884c\u72b6\u6001\u8f6c\u6362: \u4ece\u5f53\u524d\u5df2\u6709\u7684\u72b6\u6001\u8f6c\u6362\u6309\u7167\u56fa\u5b9a\u89c4\u5219\u8f6c\u53d8\u4e3a\u4e0b\u4e00\u6b65\u72b6\u6001. \u65b9\u6ce2 \u65b9\u6ce2\u662f\u4e00\u79cd\u975e\u6b63\u5f26\u66f2\u7ebf\u7684\u6ce2\u5f62, \u901a\u5e38\u5728\u6570\u5b57\u7535\u8def\u4e2d\u51fa\u73b0. \u7406\u60f3\u65b9\u6ce2\u53ea\u6709 \"\u9ad8\" \u548c \"\u4f4e\" \u8fd9\u4e24\u4e2a\u503c, \u8868\u73b0\u4e3a\u7535\u8def\u7684 \"\u5f00\" \u4e0e \"\u5173\". \u4e0d\u8fc7\u5b9e\u9645\u5e94\u7528\u4e2d\u5f88\u5c11\u771f\u7684\u4f7f\u7528\u7535\u8def\u901a\u7535\u4e0e\u5426\u5236\u9020\u65b9\u6ce2, \u800c\u662f\u4f7f\u7528\u591a\u4e2a\u6b63\u5f26\u6ce2\u8fdb\u884c\u5408\u6210. \u5728 Game Boy \u4e2d, \u65b9\u6ce2\u6709\u4ece\u9ad8\u5230\u4f4e 16 \u4e2a\u9636\u68af\u53d8\u5316(\u632f\u5e45), \u7528\u4e8e\u8868\u793a\u97f3\u91cf\u5927\u5c0f. \u6b64\u90e8\u5206\u7531\u4e13\u7528\u786c\u4ef6\u97f3\u91cf\u8c03\u8282\u5668\u63a7\u5236. \u503c\u5f97\u4e00\u63d0\u7684\u662f, \u5728\u97f3\u4e50\u5b66\u79d1\u4e2d, \u65b9\u6ce2\u88ab\u89c6\u4e3a\u4e00\u79cd\u7a7a\u6d1e\u7684\u58f0\u97f3. \u53ef\u7f16\u7a0b\u6ce2\u5f62 \u901a\u5e38, \u58f0\u6ce2\u5e26\u6709\u5468\u671f\u6027. \u4ee5\u7ecf\u5178\u7684\u6b63\u5f26\u6ce2\u4e3e\u4f8b\u7684\u8bdd, \u53ea\u8981\u77e5\u9053\u8be5\u6ce2\u7684\u9891\u7387\u548c\u632f\u5e45, \u5c31\u80fd\u6c42\u51fa\u4efb\u610f\u65f6\u95f4\u70b9\u7684\u6ce2\u5f62\u72b6\u6001. Game Boy \u7684\u524d\u4e24\u4e2a\u65b9\u6ce2\u901a\u9053\u5c31\u7528\u4e8e\u4ea7\u751f\u6b64\u79cd\u89c4\u5219\u7684\u58f0\u6ce2\u6570\u636e. \u4f46\u540c\u65f6 Game Boy \u4e5f\u4e3a\u6e38\u620f\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u66f4\u5927\u7684\u53ef\u80fd, \u90a3\u5c31\u662f\u53ef\u7f16\u7a0b\u6ce2\u5f62. \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u4ece\u5185\u5b58\u4e2d\u7684\u4e00\u6bb5\u540d\u4e3a Wave \u7684\u533a\u57df\u83b7\u53d6\u97f3\u9891\u6570\u636e, \u5f00\u53d1\u8005\u53ef\u4ee5\u5411\u6b64\u5185\u5b58\u533a\u57df\u5199\u5165\u4efb\u4f55\u6570\u636e, \u6bd4\u5982\u81ea\u5b9a\u4e49\u7684\u952f\u9f7f\u6ce2, \u751a\u81f3\u662f\u4e00\u6bb5\u968f\u673a\u6570. \u767d\u566a\u58f0 \u767d\u566a\u58f0(white noise)\u5728\u901a\u4fe1\u9886\u57df\u4e2d\u6307\u7684\u662f\u4e00\u79cd\u529f\u7387\u8c31\u51fd\u6570\u662f\u5e38\u6570\u7684\u566a\u58f0. \u6700\u5e38\u89c1\u7684\u767d\u566a\u58f0\u7c7b\u578b\u662f\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0(Additive white Gaussian noise\uff0cAWGN), \u56e0\u4e3a\u8be5\u566a\u58f0\u7684\u5e45\u5ea6\u670d\u4ece\u9ad8\u65af\u5206\u5e03, \u5176\u6b21\u8fd8\u6709\u5747\u5300\u566a\u58f0, \u745e\u4e3d\u566a\u58f0\u7b49\u566a\u58f0\u7c7b\u578b. \u5e38\u89c1\u566a\u58f0\u53ca\u5176\u6982\u7387\u5bc6\u5ea6\u51fd\u6570: Game Boy \u7684\u566a\u58f0\u901a\u9053\u4ea7\u751f\u7684\u662f\u5747\u5300\u566a\u58f0. \u6df7\u5408\u5668 Game Boy \u6700\u7ec8\u64ad\u653e\u51fa\u7684\u58f0\u97f3\u662f 4 \u4e2a\u97f3\u9891\u901a\u9053\u7684\u8f93\u51fa\u7684\u53e0\u52a0. \u6bcf\u4e2a\u97f3\u9891\u901a\u9053\u90fd\u6709\u4e00\u4e2a\u5b9a\u65f6\u5668, \u4e3a\u6ce2\u5f62\u53d1\u751f\u5668\u8ba1\u65f6. \u5728\u6700\u7ec8\u9001\u5165\u6df7\u9891\u5668\u4e4b\u524d, 4 \u4e2a\u97f3\u9891\u901a\u9053\u7684\u6ce2\u5f62\u7684\u632f\u5e45\u5c06\u901a\u8fc7\u4e00\u4e2a\u97f3\u91cf\u8c03\u8282\u5668\u8fdb\u884c\u8c03\u8282. \u6df7\u9891\u5668\u5c06\u6bcf\u4e2a\u901a\u9053\u7684\u6ce2\u5f62\u8f6c\u6362\u4e3a\u7535\u4fe1\u53f7, \u5e76\u5c06\u5176\u8f93\u51fa\u5230 Game Boy \u7684\u5de6/\u53f3\u58f0\u9053. \u6700\u540e, \u4e3b\u97f3\u91cf\u5305\u7edc\u5c06\u8c03\u8282\u5de6\u53f3\u58f0\u9053\u7684\u8f93\u51fa\u97f3\u91cf. \u4ece\u603b\u4f53\u4e0a\u6765\u770b, 4 \u4e2a\u97f3\u9891\u901a\u9053\u5177\u6709\u4ee5\u4e0b\u4ece\u5de6\u5230\u53f3\u8fde\u63a5\u7684\u5355\u5143: Square 1: Sweep -> Timer -> Duty -> Length Counter -> Envelope -> Mixer Square 2: Timer -> Duty -> Length Counter -> Envelope -> Mixer Wave: Timer -> Wave -> Length Counter -> Volume -> Mixer Noise: Timer -> LFSR -> Length Counter -> Envelope -> Mixer \u901a\u5e38, \u6bcf\u4e2a\u901a\u9053\u4e2d\u7684\u6240\u6709\u5355\u5143\u59cb\u7ec8\u5728\u8fd0\u884c, \u4f8b\u5982, \u5373\u4f7f\u67d0\u4e2a\u97f3\u9891\u901a\u9053\u662f\u9759\u97f3\u7684, \u8be5\u901a\u9053\u4ecd\u7136\u4f1a\u6267\u884c\u5168\u90e8\u7684\u8ba1\u7b97\u4efb\u52a1, \u53ea\u662f\u6700\u7ec8\u4e0d\u4f1a\u88ab\u9001\u5165\u6df7\u9891\u5668\u4e2d. \u8fd9\u6837\u7684\u8bbe\u8ba1\u4f7f\u8bbe\u5907\u4ece\u9759\u97f3\u6062\u590d\u65f6, \u64ad\u653e\u5668\u53ef\u4ee5\u7acb\u5373\u4e14\u51c6\u786e\u65e0\u8bef\u7684\u64ad\u653e\u5f53\u524d\u5e94\u8be5\u64ad\u653e\u7684\u58f0\u97f3. \u5b9a\u65f6\u5668 \u5b9a\u65f6\u5668(Timer)\u6bcf N \u4e2a\u8f93\u5165\u65f6\u949f\u4ea7\u751f\u4e00\u4e2a\u8f93\u51fa\u65f6\u949f, \u5176\u4e2d N \u662f\u5b9a\u65f6\u5668\u7684\u5468\u671f(Period). \u5982\u679c\u4ee5\u5b9a\u65f6\u5668\u7684\u9891\u7387\u4f5c\u4e3a\u6807\u51c6\u9891\u7387\u7ed9\u51fa, \u5219\u5176\u5468\u671f\u4e3a 4194304/\u9891\u7387, \u5355\u4f4d\u4e3a Hz. \u6ce8\u610f 4194304 \u662f CPU \u7684\u9891\u7387, \u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u6bcf N \u4e2a CPU \u5468\u671f\u5bf9\u5e94\u4e00\u4e2a\u5b9a\u65f6\u5668\u5468\u671f. \u6bcf\u4e2a\u5b9a\u65f6\u5668\u5185\u90e8\u6709\u4e00\u4e2a\u8ba1\u6570\u5668, \u5728\u6bcf\u4e2a\u5468\u671f\u4e2d\u9012\u51cf. \u5f53\u8ba1\u6570\u5668\u53d8\u4e3a\u96f6\u65f6, \u8ba1\u6570\u5668\u5c06\u91cd\u65b0\u8d4b\u503c\u4f4d\u5b9a\u65f6\u5668\u7684\u5468\u671f(Peroid), \u5e76\u6301\u7eed\u751f\u6210\u8f93\u51fa\u65f6\u949f. \u5b9a\u65f6\u5668\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u97f3\u9891\u6a21\u5757\u7684\u591a\u4e2a\u786c\u4ef6\u7ec4\u6210\u90e8\u5206\u4e2d, \u751a\u81f3\u6709\u7684\u5b9a\u65f6\u7684\u8f93\u5165\u662f\u53e6\u4e00\u4e2a\u5b9a\u65f6\u5668\u7684\u8f93\u51fa. \u5b9a\u65f6\u5668\u7684\u5b9e\u73b0\u975e\u5e38\u7b80\u5355, \u5b83\u63a5\u6536 N \u4e2a\u8f93\u5165, \u5e76\u4ea7\u751f M \u4e2a\u8f93\u51fa. \u5176\u4e2d M \u53ef\u4ee5\u4e3a 0. struct Timer { period: u32, n: u32, } impl Timer { fn power_up(period: u32) -> Self { Self { period, n: 0x0 } } fn next(&mut self, cycles: u32) -> u32 { self.n += cycles; let rs = self.n / self.period; self.n = self.n % self.period; rs } }","title":"GB-\u97f3\u9891-\u97f3\u9891\u7cfb\u7edf\u6982\u5ff5\u7b80\u4ecb"},{"location":"content/gameboy/audio/concept/#_1","text":"\u5728 Game Boy \u4eff\u771f\u5668\u7684\u5b9e\u73b0\u8fc7\u7a0b\u4e2d, \u97f3\u9891\u662f\u6700\u4e0d\u5bb9\u6613\u7406\u89e3\u4e14\u96be\u5ea6\u6700\u9ad8\u7684\u4e00\u90e8\u5206. Game Boy \u7684\u97f3\u9891\u7cfb\u7edf\u590d\u6742\u4e14\u5c42\u5c42\u5d4c\u5957, \u4f46\u5982\u679c\u4ed4\u7ec6\u7684\u5c06\u5176\u62bd\u4e1d\u5265\u8327, \u5176\u6838\u5fc3\u672c\u8d28\u4fbf\u53ef\u5c55\u9732\u65e0\u9057: \u8981\u60f3\u64ad\u653e\u58f0\u97f3, \u53ea\u8981\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u70b9\u5411\u7279\u5b9a\u7684\u5bc4\u5b58\u5668\u5199\u5165\u7279\u5b9a\u7684\u503c. Game Boy \u7684\u6574\u4e2a\u97f3\u9891\u7cfb\u7edf\u90fd\u670d\u52a1\u4e8e\u8fd9\u4e2a\u76ee\u6807. Game Boy \u6709\u56db\u4e2a\u97f3\u9891\u901a\u9053, \u5206\u522b\u662f \u5177\u6709\u626b\u9891\u548c\u5305\u7edc\u529f\u80fd\u7684\u65b9\u6ce2(Square1) \u5177\u6709\u5305\u7edc\u529f\u80fd\u7684\u65b9\u6ce2(Square2) \u53ef\u7f16\u7a0b\u7684\u6ce2\u5f62(Wave) \u5177\u6709\u5305\u7edc\u529f\u80fd\u7684\u767d\u566a\u58f0(Noise) \u7cfb\u7edf\u53ef\u4ee5\u5206\u522b\u63a7\u5236\u8fd9\u56db\u4e2a\u97f3\u9891\u901a\u9053(\u5f00\u542f/\u5173\u95ed, \u8c03\u6574\u97f3\u91cf\u7b49), \u7136\u540e\u5c06\u6bcf\u4e2a\u8f93\u51fa\u7aef\u7684\u97f3\u9891\u8f93\u51fa\u8fdb\u884c\u6df7\u5408(Mixer), \u6700\u540e\u7ecf\u8fc7\u4e00\u4e2a\u5168\u5c40\u63a7\u5236\u6a21\u5757(\u5168\u5c40\u97f3\u91cf\u5927\u5c0f, \u5168\u5c40\u9759\u97f3\u7b49)\u540e\u8f93\u5165\u5230\u786c\u4ef6\u8bbe\u5907. \u5bf9\u97f3\u9891\u901a\u9053\u7684\u53c2\u6570\u4fee\u6539\u4e0d\u9700\u8981\u6682\u505c\u5f53\u524d\u7684\u97f3\u9891\u64ad\u653e. \u97f3\u9891\u6a21\u5757\u7684\u5de5\u4f5c\u6d41\u7a0b\u5927\u81f4\u5982\u4e0b: \u97f3\u9891\u7cfb\u7edf\u76f4\u63a5\u63a5\u6536 CPU \u65f6\u949f\u4fe1\u53f7\u7684\u662f\u4e00\u4e2a 512 Hz \u7684\u5b9a\u65f6\u5668, \u8be5\u5b9a\u65f6\u5668\u7ba1\u7406\u4e09\u4e2a\u7279\u6b8a\u529f\u80fd\u6a21\u5757\u7684\u8fd0\u4f5c: \u5206\u522b\u662f\u957f\u5ea6\u8ba1\u6570\u5668, \u626b\u9891\u5668\u548c\u97f3\u91cf\u5305\u7edc. \u8fd9\u4e9b\u63a7\u5236\u5668\u987e\u540d\u601d\u4e49\u63a7\u5236\u7740\u97f3\u9891\u901a\u9053\u7684\u4e00\u4e9b\u53c2\u6570, \u540e\u6587\u5c06\u8fdb\u884c\u8be6\u7ec6\u8bb2\u8ff0. \u7136\u540e\u8be5 512 Hz \u7684\u5b9a\u65f6\u5668\u8fd8\u8ddf\u7740 4 \u4e2a\u97f3\u9891\u901a\u9053, \u4ee5\u6bcf\u79d2 512 \u6b21\u7684\u9891\u7387\u89e6\u53d1\u8fd9\u4e9b\u901a\u9053\u8fdb\u884c\u72b6\u6001\u8f6c\u6362: \u4ece\u5f53\u524d\u5df2\u6709\u7684\u72b6\u6001\u8f6c\u6362\u6309\u7167\u56fa\u5b9a\u89c4\u5219\u8f6c\u53d8\u4e3a\u4e0b\u4e00\u6b65\u72b6\u6001.","title":"\u97f3\u9891\u7cfb\u7edf\u6982\u5ff5\u7b80\u4ecb"},{"location":"content/gameboy/audio/concept/#_2","text":"\u65b9\u6ce2\u662f\u4e00\u79cd\u975e\u6b63\u5f26\u66f2\u7ebf\u7684\u6ce2\u5f62, \u901a\u5e38\u5728\u6570\u5b57\u7535\u8def\u4e2d\u51fa\u73b0. \u7406\u60f3\u65b9\u6ce2\u53ea\u6709 \"\u9ad8\" \u548c \"\u4f4e\" \u8fd9\u4e24\u4e2a\u503c, \u8868\u73b0\u4e3a\u7535\u8def\u7684 \"\u5f00\" \u4e0e \"\u5173\". \u4e0d\u8fc7\u5b9e\u9645\u5e94\u7528\u4e2d\u5f88\u5c11\u771f\u7684\u4f7f\u7528\u7535\u8def\u901a\u7535\u4e0e\u5426\u5236\u9020\u65b9\u6ce2, \u800c\u662f\u4f7f\u7528\u591a\u4e2a\u6b63\u5f26\u6ce2\u8fdb\u884c\u5408\u6210. \u5728 Game Boy \u4e2d, \u65b9\u6ce2\u6709\u4ece\u9ad8\u5230\u4f4e 16 \u4e2a\u9636\u68af\u53d8\u5316(\u632f\u5e45), \u7528\u4e8e\u8868\u793a\u97f3\u91cf\u5927\u5c0f. \u6b64\u90e8\u5206\u7531\u4e13\u7528\u786c\u4ef6\u97f3\u91cf\u8c03\u8282\u5668\u63a7\u5236. \u503c\u5f97\u4e00\u63d0\u7684\u662f, \u5728\u97f3\u4e50\u5b66\u79d1\u4e2d, \u65b9\u6ce2\u88ab\u89c6\u4e3a\u4e00\u79cd\u7a7a\u6d1e\u7684\u58f0\u97f3.","title":"\u65b9\u6ce2"},{"location":"content/gameboy/audio/concept/#_3","text":"\u901a\u5e38, \u58f0\u6ce2\u5e26\u6709\u5468\u671f\u6027. \u4ee5\u7ecf\u5178\u7684\u6b63\u5f26\u6ce2\u4e3e\u4f8b\u7684\u8bdd, \u53ea\u8981\u77e5\u9053\u8be5\u6ce2\u7684\u9891\u7387\u548c\u632f\u5e45, \u5c31\u80fd\u6c42\u51fa\u4efb\u610f\u65f6\u95f4\u70b9\u7684\u6ce2\u5f62\u72b6\u6001. Game Boy \u7684\u524d\u4e24\u4e2a\u65b9\u6ce2\u901a\u9053\u5c31\u7528\u4e8e\u4ea7\u751f\u6b64\u79cd\u89c4\u5219\u7684\u58f0\u6ce2\u6570\u636e. \u4f46\u540c\u65f6 Game Boy \u4e5f\u4e3a\u6e38\u620f\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u66f4\u5927\u7684\u53ef\u80fd, \u90a3\u5c31\u662f\u53ef\u7f16\u7a0b\u6ce2\u5f62. \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u4ece\u5185\u5b58\u4e2d\u7684\u4e00\u6bb5\u540d\u4e3a Wave \u7684\u533a\u57df\u83b7\u53d6\u97f3\u9891\u6570\u636e, \u5f00\u53d1\u8005\u53ef\u4ee5\u5411\u6b64\u5185\u5b58\u533a\u57df\u5199\u5165\u4efb\u4f55\u6570\u636e, \u6bd4\u5982\u81ea\u5b9a\u4e49\u7684\u952f\u9f7f\u6ce2, \u751a\u81f3\u662f\u4e00\u6bb5\u968f\u673a\u6570.","title":"\u53ef\u7f16\u7a0b\u6ce2\u5f62"},{"location":"content/gameboy/audio/concept/#_4","text":"\u767d\u566a\u58f0(white noise)\u5728\u901a\u4fe1\u9886\u57df\u4e2d\u6307\u7684\u662f\u4e00\u79cd\u529f\u7387\u8c31\u51fd\u6570\u662f\u5e38\u6570\u7684\u566a\u58f0. \u6700\u5e38\u89c1\u7684\u767d\u566a\u58f0\u7c7b\u578b\u662f\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0(Additive white Gaussian noise\uff0cAWGN), \u56e0\u4e3a\u8be5\u566a\u58f0\u7684\u5e45\u5ea6\u670d\u4ece\u9ad8\u65af\u5206\u5e03, \u5176\u6b21\u8fd8\u6709\u5747\u5300\u566a\u58f0, \u745e\u4e3d\u566a\u58f0\u7b49\u566a\u58f0\u7c7b\u578b. \u5e38\u89c1\u566a\u58f0\u53ca\u5176\u6982\u7387\u5bc6\u5ea6\u51fd\u6570: Game Boy \u7684\u566a\u58f0\u901a\u9053\u4ea7\u751f\u7684\u662f\u5747\u5300\u566a\u58f0.","title":"\u767d\u566a\u58f0"},{"location":"content/gameboy/audio/concept/#_5","text":"Game Boy \u6700\u7ec8\u64ad\u653e\u51fa\u7684\u58f0\u97f3\u662f 4 \u4e2a\u97f3\u9891\u901a\u9053\u7684\u8f93\u51fa\u7684\u53e0\u52a0. \u6bcf\u4e2a\u97f3\u9891\u901a\u9053\u90fd\u6709\u4e00\u4e2a\u5b9a\u65f6\u5668, \u4e3a\u6ce2\u5f62\u53d1\u751f\u5668\u8ba1\u65f6. \u5728\u6700\u7ec8\u9001\u5165\u6df7\u9891\u5668\u4e4b\u524d, 4 \u4e2a\u97f3\u9891\u901a\u9053\u7684\u6ce2\u5f62\u7684\u632f\u5e45\u5c06\u901a\u8fc7\u4e00\u4e2a\u97f3\u91cf\u8c03\u8282\u5668\u8fdb\u884c\u8c03\u8282. \u6df7\u9891\u5668\u5c06\u6bcf\u4e2a\u901a\u9053\u7684\u6ce2\u5f62\u8f6c\u6362\u4e3a\u7535\u4fe1\u53f7, \u5e76\u5c06\u5176\u8f93\u51fa\u5230 Game Boy \u7684\u5de6/\u53f3\u58f0\u9053. \u6700\u540e, \u4e3b\u97f3\u91cf\u5305\u7edc\u5c06\u8c03\u8282\u5de6\u53f3\u58f0\u9053\u7684\u8f93\u51fa\u97f3\u91cf. \u4ece\u603b\u4f53\u4e0a\u6765\u770b, 4 \u4e2a\u97f3\u9891\u901a\u9053\u5177\u6709\u4ee5\u4e0b\u4ece\u5de6\u5230\u53f3\u8fde\u63a5\u7684\u5355\u5143: Square 1: Sweep -> Timer -> Duty -> Length Counter -> Envelope -> Mixer Square 2: Timer -> Duty -> Length Counter -> Envelope -> Mixer Wave: Timer -> Wave -> Length Counter -> Volume -> Mixer Noise: Timer -> LFSR -> Length Counter -> Envelope -> Mixer \u901a\u5e38, \u6bcf\u4e2a\u901a\u9053\u4e2d\u7684\u6240\u6709\u5355\u5143\u59cb\u7ec8\u5728\u8fd0\u884c, \u4f8b\u5982, \u5373\u4f7f\u67d0\u4e2a\u97f3\u9891\u901a\u9053\u662f\u9759\u97f3\u7684, \u8be5\u901a\u9053\u4ecd\u7136\u4f1a\u6267\u884c\u5168\u90e8\u7684\u8ba1\u7b97\u4efb\u52a1, \u53ea\u662f\u6700\u7ec8\u4e0d\u4f1a\u88ab\u9001\u5165\u6df7\u9891\u5668\u4e2d. \u8fd9\u6837\u7684\u8bbe\u8ba1\u4f7f\u8bbe\u5907\u4ece\u9759\u97f3\u6062\u590d\u65f6, \u64ad\u653e\u5668\u53ef\u4ee5\u7acb\u5373\u4e14\u51c6\u786e\u65e0\u8bef\u7684\u64ad\u653e\u5f53\u524d\u5e94\u8be5\u64ad\u653e\u7684\u58f0\u97f3.","title":"\u6df7\u5408\u5668"},{"location":"content/gameboy/audio/concept/#_6","text":"\u5b9a\u65f6\u5668(Timer)\u6bcf N \u4e2a\u8f93\u5165\u65f6\u949f\u4ea7\u751f\u4e00\u4e2a\u8f93\u51fa\u65f6\u949f, \u5176\u4e2d N \u662f\u5b9a\u65f6\u5668\u7684\u5468\u671f(Period). \u5982\u679c\u4ee5\u5b9a\u65f6\u5668\u7684\u9891\u7387\u4f5c\u4e3a\u6807\u51c6\u9891\u7387\u7ed9\u51fa, \u5219\u5176\u5468\u671f\u4e3a 4194304/\u9891\u7387, \u5355\u4f4d\u4e3a Hz. \u6ce8\u610f 4194304 \u662f CPU \u7684\u9891\u7387, \u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u6bcf N \u4e2a CPU \u5468\u671f\u5bf9\u5e94\u4e00\u4e2a\u5b9a\u65f6\u5668\u5468\u671f. \u6bcf\u4e2a\u5b9a\u65f6\u5668\u5185\u90e8\u6709\u4e00\u4e2a\u8ba1\u6570\u5668, \u5728\u6bcf\u4e2a\u5468\u671f\u4e2d\u9012\u51cf. \u5f53\u8ba1\u6570\u5668\u53d8\u4e3a\u96f6\u65f6, \u8ba1\u6570\u5668\u5c06\u91cd\u65b0\u8d4b\u503c\u4f4d\u5b9a\u65f6\u5668\u7684\u5468\u671f(Peroid), \u5e76\u6301\u7eed\u751f\u6210\u8f93\u51fa\u65f6\u949f. \u5b9a\u65f6\u5668\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u97f3\u9891\u6a21\u5757\u7684\u591a\u4e2a\u786c\u4ef6\u7ec4\u6210\u90e8\u5206\u4e2d, \u751a\u81f3\u6709\u7684\u5b9a\u65f6\u7684\u8f93\u5165\u662f\u53e6\u4e00\u4e2a\u5b9a\u65f6\u5668\u7684\u8f93\u51fa. \u5b9a\u65f6\u5668\u7684\u5b9e\u73b0\u975e\u5e38\u7b80\u5355, \u5b83\u63a5\u6536 N \u4e2a\u8f93\u5165, \u5e76\u4ea7\u751f M \u4e2a\u8f93\u51fa. \u5176\u4e2d M \u53ef\u4ee5\u4e3a 0. struct Timer { period: u32, n: u32, } impl Timer { fn power_up(period: u32) -> Self { Self { period, n: 0x0 } } fn next(&mut self, cycles: u32) -> u32 { self.n += cycles; let rs = self.n / self.period; self.n = self.n % self.period; rs } }","title":"\u5b9a\u65f6\u5668"},{"location":"content/gameboy/audio/cpal/","text":"Cpal \u5bf9\u4e8e\u6570\u5b57\u97f3\u9891\u6765\u8bf4, \u901a\u5e38\u5176\u6ce2\u5f62\u662f\u5df2\u77e5\u7684, \u8fd9\u5728 Game Boy \u4e2d\u4e5f\u4e0d\u4f8b\u5916. \u4e3a\u4e86\u5728 PC \u4e0a\u64ad\u653e\u8fd9\u4e9b\u6ce2\u5f62\u56fe\u6240\u4ee3\u8868\u7684\u97f3\u9891, \u9700\u8981\u80fd\u5c06\u6ce2\u5f62\u6570\u636e\u63a8\u9001\u5230\u97f3\u9891\u8bbe\u5907(\u4f8b\u5982\u97f3\u54cd, \u8033\u673a\u7b49)\u7684\u624b\u6bb5. cpal \u662f Rust \u4e0b\u7684\u4e00\u4e2a\u5e95\u5c42\u97f3\u9891 IO \u5e93, \u901a\u8fc7\u5b83\u53ef\u4ee5\u64ad\u653e(\u5230\u97f3\u9891\u8bbe\u5907)\u548c\u6536\u96c6\u97f3\u9891\u6d41(\u4ece\u8033\u9ea6). \u672c\u5c0f\u8282\u5c06\u805a\u7126\u5728\u4f7f\u7528 cpal \u64ad\u653e\u97f3\u9891\u4e0a. \u5728 cpal \u4e2d\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6982\u5ff5: Device. Device \u662f\u4e00\u4e2a\u97f3\u9891\u8bbe\u5907, \u8be5\u8bbe\u5907\u80fd\u63d0\u4f9b\u97f3\u9891\u8f93\u5165\u6d41, \u97f3\u9891\u8f93\u51fa\u6d41\u6216\u4e24\u8005\u517c\u5907. \u5e38\u89c1\u6bd4\u5982\u9ea6\u514b\u98ce, \u97f3\u54cd, \u8033\u9ea6\u7b49, \u90fd\u662f\u5408\u6cd5\u7684 Device. Stream. Stream \u662f\u5f00\u653e\u7684\u97f3\u9891\u901a\u9053. Input streams \u5141\u8bb8\u4f60\u63a5\u6536\u97f3\u9891\u6570\u636e, Ouput streams \u5141\u8bb8\u4f60\u64ad\u653e\u97f3\u9891\u6570\u636e. \u5728\u521b\u5efa\u65b0\u7684 streams \u7684\u65f6\u5019, \u5fc5\u987b\u6307\u5b9a\u8981\u5904\u7406\u8be5 stream \u7684 device. EventLoop. EventLoop \u662f\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u8bbe\u5907\u8fd0\u884c\u7684\u6d41\u7684\u96c6\u5408. \u6bcf\u4e2a\u6d41\u5fc5\u987b\u5c5e\u4e8e EventLoop, \u5e76\u4e14\u5c5e\u4e8e EventLoop \u7684\u6240\u6709\u6d41\u90fd\u662f\u4e00\u8d77\u7ba1\u7406\u7684. \u4f7f\u7528 cpal \u7684\u7b2c\u4e00\u6b65\u662f\u521b\u5efa\u4e00\u4e2a EventLoop: use cpal::EventLoop; let event_loop = EventLoop::new(); \u7136\u540e\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u64ad\u653e\u8bbe\u5907. \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7 cpal::default_output_device() \u51fd\u6570\u4f7f\u7528\u9ed8\u8ba4\u8f93\u51fa\u8bbe\u5907, \u8fd9\u901a\u5e38\u4e0e\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\u8bbe\u7f6e\u7684\u9ed8\u8ba4\u97f3\u9891\u64ad\u653e\u8bbe\u5907\u4e00\u6837. \u6216\u8005, \u53ef\u4ee5\u4f7f\u7528 devices() \u51fd\u6570\u679a\u4e3e\u6240\u6709\u53ef\u7528\u8bbe\u5907. \u8bf7\u6ce8\u610f, \u5982\u679c\u7cfb\u7edf\u4e0a\u6ca1\u6709\u53ef\u7528\u4e8e\u8be5\u6d41\u7c7b\u578b\u7684\u8bbe\u5907, \u5219 default_output_device() \u51fd\u6570\u5c06\u4f1a\u8fd4\u56de None. let device = cpal::default_output_device().expect(\"no output device available\"); \u5728\u521b\u5efa Stream \u4e4b\u524d, \u5fc5\u987b\u5148\u884c\u51b3\u5b9a\u97f3\u9891\u6837\u672c\u7684\u683c\u5f0f. \u4f7f\u7528 cpal::supported_output_formats() \u65b9\u6cd5\u67e5\u8be2\u6240\u6709\u652f\u6301\u7684\u683c\u5f0f. \u5b83\u751f\u6210\u4e00\u4e2a SupportedFormat \u7ed3\u6784\u5217\u8868, \u5728\u4e4b\u540e\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a\u5b9e\u9645\u7684 Format \u7ed3\u6784. \u9664\u4e86\u67e5\u8be2\u683c\u5f0f\u5217\u8868\u518d\u9009\u62e9\u5408\u9002\u7684\u683c\u5f0f\u5916, \u4e5f\u53ef\u4ee5\u624b\u52a8\u6784\u5efa\u81ea\u5df1\u7684\u683c\u5f0f, \u4f46\u5982\u679c\u8bbe\u5907\u4e0d\u652f\u6301\u8be5\u683c\u5f0f, \u5219\u5728\u6784\u5efa\u6d41\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef, \u56e0\u6b64\u540e\u8005\u5e76\u4e0d\u63a8\u8350\u4f7f\u7528. \u6ce8\u610f, supported_output_formats() \u65b9\u6cd5\u53ef\u80fd\u4f1a\u8fd4\u56de\u9519\u8bef, \u4f8b\u5982, \u5f53\u8bbe\u5907\u5df2\u65ad\u5f00\u8fde\u63a5\u7684\u65f6\u5019. let mut supported_formats_range = device.supported_output_formats() .expect(\"error while querying formats\"); let format = supported_formats_range.next() .expect(\"no supported format?!\") .with_max_sample_rate(); \u4e3a\u4e86\u521b\u5efa Stream \u6240\u9700\u8981\u7684\u6240\u6709\u5185\u5bb9\u5747\u5df2\u51c6\u5907\u5c31\u7eea, \u73b0\u5728\u4ece EventLoop \u4e2d\u521b\u5efa\u5b83: let stream_id = event_loop.build_output_stream(&device, &format).unwrap(); build_output_stream() \u8fd4\u56de\u7684\u503c\u662f\u4e00\u4e2a StreamId, \u901a\u8fc7\u8be5 StreamId \u53ef\u4ee5\u63a7\u5236\u6d41\u7684\u8fd0\u884c\u7ec6\u8282. \u73b0\u5728\u53ef\u4ee5\u5b89\u5168\u7684\u542f\u52a8\u6d41\u4e86, \u901a\u8fc7 EventLoop \u4e0a\u7684 play_stream() \u65b9\u6cd5\u5b8c\u6210\u5b83: event_loop.play_stream(stream_id); \u97f3\u9891\u8bbe\u5907\u6b63\u5728\u7b49\u5f85\u4f60\u4f20\u5165\u6570\u636e! \u5728 event_loop \u4e0a\u8c03\u7528 run() \u6765\u5f00\u59cb\u5904\u7406: event_loop.run(move |_stream_id, _stream_data| { // read or write stream data here }); \u5f53 run() \u8fd0\u884c\u65f6, \u6307\u5b9a\u7684\u97f3\u9891\u8bbe\u5907\u5c06\u5b9a\u671f\u8c03\u7528\u6211\u4eec\u4f20\u9012\u7ed9\u6b64\u51fd\u6570\u7684\u56de\u8c03\u51fd\u6570. \u56de\u8c03\u51fd\u6570\u63a5\u6536 StreamId \u548c StreamData \u7c7b\u578b\u7684\u5b9e\u4f8b, \u53ef\u4ee5\u4ece\u8be5\u5b9e\u4f8b\u8bfb\u53d6\u6216\u5199\u5165\u7684\u6570\u636e. StreamData \u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f I16, U16 \u6216 F32 \u4e2d\u7684\u4e00\u4e2a, \u5177\u4f53\u53d6\u51b3\u4e8e\u4f20\u9012\u7ed9build_output_stream\u7684\u683c\u5f0f. \u5728\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u7a0b\u5e8f\u4f1a\u8f93\u51fa\u4e00\u4e2a\u6b63\u5f26\u6ce2, \u8fd0\u884c\u540e\u5c06\u80fd\u542c\u5230\"\u54d4\u54d4\"\u7684\u58f0\u97f3. \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\u6240\u793a: use cpal; fn main() { let device = cpal::default_output_device().expect(\"Failed to get default output device\"); let format = device.default_output_format().expect(\"Failed to get default output format\"); let event_loop = cpal::EventLoop::new(); let stream_id = event_loop.build_output_stream(&device, &format).unwrap(); event_loop.play_stream(stream_id.clone()); let sample_rate = format.sample_rate.0 as f32; let mut sample_clock = 0f32; // Produce a sinusoid of maximum amplitude. let mut next_value = || { sample_clock = (sample_clock + 1.0) % sample_rate; (sample_clock * 440.0 * 2.0 * 3.141592 / sample_rate).sin() }; event_loop.run(move |_, data| { match data { cpal::StreamData::Output { buffer: cpal::UnknownTypeOutputBuffer::U16(mut buffer) } => { for sample in buffer.chunks_mut(format.channels as usize) { let value = ((next_value() * 0.5 + 0.5) * std::u16::MAX as f32) as u16; for out in sample.iter_mut() { *out = value; } } }, cpal::StreamData::Output { buffer: cpal::UnknownTypeOutputBuffer::I16(mut buffer) } => { for sample in buffer.chunks_mut(format.channels as usize) { let value = (next_value() * std::i16::MAX as f32) as i16; for out in sample.iter_mut() { *out = value; } } }, cpal::StreamData::Output { buffer: cpal::UnknownTypeOutputBuffer::F32(mut buffer) } => { for sample in buffer.chunks_mut(format.channels as usize) { let value = next_value(); for out in sample.iter_mut() { *out = value; } } }, _ => (), } }); }","title":"GB-\u97f3\u9891-Rust Cpal \u5e93\u4ecb\u7ecd"},{"location":"content/gameboy/audio/cpal/#cpal","text":"\u5bf9\u4e8e\u6570\u5b57\u97f3\u9891\u6765\u8bf4, \u901a\u5e38\u5176\u6ce2\u5f62\u662f\u5df2\u77e5\u7684, \u8fd9\u5728 Game Boy \u4e2d\u4e5f\u4e0d\u4f8b\u5916. \u4e3a\u4e86\u5728 PC \u4e0a\u64ad\u653e\u8fd9\u4e9b\u6ce2\u5f62\u56fe\u6240\u4ee3\u8868\u7684\u97f3\u9891, \u9700\u8981\u80fd\u5c06\u6ce2\u5f62\u6570\u636e\u63a8\u9001\u5230\u97f3\u9891\u8bbe\u5907(\u4f8b\u5982\u97f3\u54cd, \u8033\u673a\u7b49)\u7684\u624b\u6bb5. cpal \u662f Rust \u4e0b\u7684\u4e00\u4e2a\u5e95\u5c42\u97f3\u9891 IO \u5e93, \u901a\u8fc7\u5b83\u53ef\u4ee5\u64ad\u653e(\u5230\u97f3\u9891\u8bbe\u5907)\u548c\u6536\u96c6\u97f3\u9891\u6d41(\u4ece\u8033\u9ea6). \u672c\u5c0f\u8282\u5c06\u805a\u7126\u5728\u4f7f\u7528 cpal \u64ad\u653e\u97f3\u9891\u4e0a. \u5728 cpal \u4e2d\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6982\u5ff5: Device. Device \u662f\u4e00\u4e2a\u97f3\u9891\u8bbe\u5907, \u8be5\u8bbe\u5907\u80fd\u63d0\u4f9b\u97f3\u9891\u8f93\u5165\u6d41, \u97f3\u9891\u8f93\u51fa\u6d41\u6216\u4e24\u8005\u517c\u5907. \u5e38\u89c1\u6bd4\u5982\u9ea6\u514b\u98ce, \u97f3\u54cd, \u8033\u9ea6\u7b49, \u90fd\u662f\u5408\u6cd5\u7684 Device. Stream. Stream \u662f\u5f00\u653e\u7684\u97f3\u9891\u901a\u9053. Input streams \u5141\u8bb8\u4f60\u63a5\u6536\u97f3\u9891\u6570\u636e, Ouput streams \u5141\u8bb8\u4f60\u64ad\u653e\u97f3\u9891\u6570\u636e. \u5728\u521b\u5efa\u65b0\u7684 streams \u7684\u65f6\u5019, \u5fc5\u987b\u6307\u5b9a\u8981\u5904\u7406\u8be5 stream \u7684 device. EventLoop. EventLoop \u662f\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u8bbe\u5907\u8fd0\u884c\u7684\u6d41\u7684\u96c6\u5408. \u6bcf\u4e2a\u6d41\u5fc5\u987b\u5c5e\u4e8e EventLoop, \u5e76\u4e14\u5c5e\u4e8e EventLoop \u7684\u6240\u6709\u6d41\u90fd\u662f\u4e00\u8d77\u7ba1\u7406\u7684. \u4f7f\u7528 cpal \u7684\u7b2c\u4e00\u6b65\u662f\u521b\u5efa\u4e00\u4e2a EventLoop: use cpal::EventLoop; let event_loop = EventLoop::new(); \u7136\u540e\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u64ad\u653e\u8bbe\u5907. \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7 cpal::default_output_device() \u51fd\u6570\u4f7f\u7528\u9ed8\u8ba4\u8f93\u51fa\u8bbe\u5907, \u8fd9\u901a\u5e38\u4e0e\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\u8bbe\u7f6e\u7684\u9ed8\u8ba4\u97f3\u9891\u64ad\u653e\u8bbe\u5907\u4e00\u6837. \u6216\u8005, \u53ef\u4ee5\u4f7f\u7528 devices() \u51fd\u6570\u679a\u4e3e\u6240\u6709\u53ef\u7528\u8bbe\u5907. \u8bf7\u6ce8\u610f, \u5982\u679c\u7cfb\u7edf\u4e0a\u6ca1\u6709\u53ef\u7528\u4e8e\u8be5\u6d41\u7c7b\u578b\u7684\u8bbe\u5907, \u5219 default_output_device() \u51fd\u6570\u5c06\u4f1a\u8fd4\u56de None. let device = cpal::default_output_device().expect(\"no output device available\"); \u5728\u521b\u5efa Stream \u4e4b\u524d, \u5fc5\u987b\u5148\u884c\u51b3\u5b9a\u97f3\u9891\u6837\u672c\u7684\u683c\u5f0f. \u4f7f\u7528 cpal::supported_output_formats() \u65b9\u6cd5\u67e5\u8be2\u6240\u6709\u652f\u6301\u7684\u683c\u5f0f. \u5b83\u751f\u6210\u4e00\u4e2a SupportedFormat \u7ed3\u6784\u5217\u8868, \u5728\u4e4b\u540e\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a\u5b9e\u9645\u7684 Format \u7ed3\u6784. \u9664\u4e86\u67e5\u8be2\u683c\u5f0f\u5217\u8868\u518d\u9009\u62e9\u5408\u9002\u7684\u683c\u5f0f\u5916, \u4e5f\u53ef\u4ee5\u624b\u52a8\u6784\u5efa\u81ea\u5df1\u7684\u683c\u5f0f, \u4f46\u5982\u679c\u8bbe\u5907\u4e0d\u652f\u6301\u8be5\u683c\u5f0f, \u5219\u5728\u6784\u5efa\u6d41\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef, \u56e0\u6b64\u540e\u8005\u5e76\u4e0d\u63a8\u8350\u4f7f\u7528. \u6ce8\u610f, supported_output_formats() \u65b9\u6cd5\u53ef\u80fd\u4f1a\u8fd4\u56de\u9519\u8bef, \u4f8b\u5982, \u5f53\u8bbe\u5907\u5df2\u65ad\u5f00\u8fde\u63a5\u7684\u65f6\u5019. let mut supported_formats_range = device.supported_output_formats() .expect(\"error while querying formats\"); let format = supported_formats_range.next() .expect(\"no supported format?!\") .with_max_sample_rate(); \u4e3a\u4e86\u521b\u5efa Stream \u6240\u9700\u8981\u7684\u6240\u6709\u5185\u5bb9\u5747\u5df2\u51c6\u5907\u5c31\u7eea, \u73b0\u5728\u4ece EventLoop \u4e2d\u521b\u5efa\u5b83: let stream_id = event_loop.build_output_stream(&device, &format).unwrap(); build_output_stream() \u8fd4\u56de\u7684\u503c\u662f\u4e00\u4e2a StreamId, \u901a\u8fc7\u8be5 StreamId \u53ef\u4ee5\u63a7\u5236\u6d41\u7684\u8fd0\u884c\u7ec6\u8282. \u73b0\u5728\u53ef\u4ee5\u5b89\u5168\u7684\u542f\u52a8\u6d41\u4e86, \u901a\u8fc7 EventLoop \u4e0a\u7684 play_stream() \u65b9\u6cd5\u5b8c\u6210\u5b83: event_loop.play_stream(stream_id); \u97f3\u9891\u8bbe\u5907\u6b63\u5728\u7b49\u5f85\u4f60\u4f20\u5165\u6570\u636e! \u5728 event_loop \u4e0a\u8c03\u7528 run() \u6765\u5f00\u59cb\u5904\u7406: event_loop.run(move |_stream_id, _stream_data| { // read or write stream data here }); \u5f53 run() \u8fd0\u884c\u65f6, \u6307\u5b9a\u7684\u97f3\u9891\u8bbe\u5907\u5c06\u5b9a\u671f\u8c03\u7528\u6211\u4eec\u4f20\u9012\u7ed9\u6b64\u51fd\u6570\u7684\u56de\u8c03\u51fd\u6570. \u56de\u8c03\u51fd\u6570\u63a5\u6536 StreamId \u548c StreamData \u7c7b\u578b\u7684\u5b9e\u4f8b, \u53ef\u4ee5\u4ece\u8be5\u5b9e\u4f8b\u8bfb\u53d6\u6216\u5199\u5165\u7684\u6570\u636e. StreamData \u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f I16, U16 \u6216 F32 \u4e2d\u7684\u4e00\u4e2a, \u5177\u4f53\u53d6\u51b3\u4e8e\u4f20\u9012\u7ed9build_output_stream\u7684\u683c\u5f0f. \u5728\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u7a0b\u5e8f\u4f1a\u8f93\u51fa\u4e00\u4e2a\u6b63\u5f26\u6ce2, \u8fd0\u884c\u540e\u5c06\u80fd\u542c\u5230\"\u54d4\u54d4\"\u7684\u58f0\u97f3. \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\u6240\u793a: use cpal; fn main() { let device = cpal::default_output_device().expect(\"Failed to get default output device\"); let format = device.default_output_format().expect(\"Failed to get default output format\"); let event_loop = cpal::EventLoop::new(); let stream_id = event_loop.build_output_stream(&device, &format).unwrap(); event_loop.play_stream(stream_id.clone()); let sample_rate = format.sample_rate.0 as f32; let mut sample_clock = 0f32; // Produce a sinusoid of maximum amplitude. let mut next_value = || { sample_clock = (sample_clock + 1.0) % sample_rate; (sample_clock * 440.0 * 2.0 * 3.141592 / sample_rate).sin() }; event_loop.run(move |_, data| { match data { cpal::StreamData::Output { buffer: cpal::UnknownTypeOutputBuffer::U16(mut buffer) } => { for sample in buffer.chunks_mut(format.channels as usize) { let value = ((next_value() * 0.5 + 0.5) * std::u16::MAX as f32) as u16; for out in sample.iter_mut() { *out = value; } } }, cpal::StreamData::Output { buffer: cpal::UnknownTypeOutputBuffer::I16(mut buffer) } => { for sample in buffer.chunks_mut(format.channels as usize) { let value = (next_value() * std::i16::MAX as f32) as i16; for out in sample.iter_mut() { *out = value; } } }, cpal::StreamData::Output { buffer: cpal::UnknownTypeOutputBuffer::F32(mut buffer) } => { for sample in buffer.chunks_mut(format.channels as usize) { let value = next_value(); for out in sample.iter_mut() { *out = value; } } }, _ => (), } }); }","title":"Cpal"},{"location":"content/gameboy/audio/frame_sequence/","text":"\u5e8f\u5217\u53d1\u751f\u5668 \u5e8f\u5217\u5668\u53d1\u751f\u5668(Frame Sequencer)\u4e3a\u8c03\u5236\u5355\u5143\u751f\u6210\u4f4e\u9891\u65f6\u949f. \u5b83\u7531 512 Hz \u7684\u5b9a\u65f6\u5668\u63d0\u4f9b\u65f6\u949f\u63a7\u5236. \u5e8f\u5217\u53d1\u751f\u5668\u95f4\u63a5\u63a5\u53d7 CPU \u65f6\u949f\u8f93\u5165, \u5b83\u6709\u70b9\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5165\u53e3\u51fd\u6570, \u57fa\u672c\u4e0a\u97f3\u9891\u6a21\u5757\u7684\u6240\u6709\u903b\u8f91\u90fd\u7ecf\u7531\u5b83\u7684\u8fd0\u4f5c\u800c\u89e6\u53d1. \u5e8f\u5217\u5668\u53d1\u751f\u5668\u5728\u4e0d\u540c\u65f6\u95f4\u5206\u7247\u4e0b\u89e6\u53d1\u4e0d\u540c\u7684\u786c\u4ef6\u5355\u5143: Step Length Ctr Vol Env Sweep --------------------------------------- 0 Clock - - 1 - - - 2 Clock - Clock 3 - - - 4 Clock - - 5 - - - 6 Clock - Clock 7 - Clock - --------------------------------------- Rate 256 Hz 64 Hz 128 Hz \u7531\u4e0a\u8868\u53ef\u77e5\u957f\u5ea6\u8ba1\u6570\u5668(Length Ctr)\u7684\u9891\u7387\u65f6 256 Hz, \u97f3\u91cf\u5305\u7edc(Vol Env)\u7684\u9891\u7387\u662f 64 Hz, \u626b\u9891\u5668(Sweep)\u7684\u9891\u7387\u662f 128 Hz. \u5e8f\u5217\u53d1\u751f\u5668\u7684\u5b9e\u73b0\u4e5f\u975e\u5e38\u7b80\u5355, \u57fa\u672c\u4e0a\u53ef\u770b\u4f5c\u4e00\u4e2a\u5468\u671f\u56fa\u5b9a\u4e3a 8 \u7684\u7279\u6b8a\u5b9a\u65f6\u5668. struct FrameSequencer { step: u8, } impl FrameSequencer { fn power_up() -> Self { Self { step: 0x00 } } fn next(&mut self) -> u8 { self.step += 1; self.step %= 8; self.step } } \u6700\u540e\u5c06 FrameSequencer \u63a5\u5165\u5230 512 Hz \u65f6\u949f\u4fe1\u53f7, \u5e76\u63a7\u5236\u957f\u5ea6\u8ba1\u6570\u5668, \u97f3\u91cf\u5305\u7edc\u548c\u626b\u9891\u5668\u5728 4 \u4e2a\u97f3\u9891\u901a\u9053\u4e2d\u7684\u8fd0\u884c. \u6ce8\u610f\u76ee\u524d\u5e76\u6ca1\u6709\u771f\u7684\u53bb\u5b9e\u73b0\u8fd9\u4e9b\u903b\u8f91\u786c\u4ef6\u7684\u4ee3\u7801, \u5b83\u4eec\u4ec5\u4ec5\u5728\u6b64\u5904\u88ab\u5360\u4f4d. impl Apu { pub fn next(&mut self, cycles: u32) { if !self.reg.get_power() { return; } for _ in 0..self.timer.next(cycles) { self.channel1.next(self.timer.period); self.channel2.next(self.timer.period); self.channel3.next(self.timer.period); self.channel4.next(self.timer.period); // 512 Hz \u65f6\u949f\u4fe1\u53f7 // // ... Your Codes let step = self.fs.next(); if step == 0 || step == 2 || step == 4 || step == 6 { // Length Ctr self.channel1.lc.next(); self.channel2.lc.next(); self.channel3.lc.next(); self.channel4.lc.next(); } if step == 7 { // Vol Env self.channel1.ve.next(); self.channel2.ve.next(); self.channel4.ve.next(); } if step == 2 || step == 6 { // Sweep self.channel1.fs.next(); } } } }","title":"GB-\u97f3\u9891-\u5e8f\u5217\u53d1\u751f\u5668"},{"location":"content/gameboy/audio/frame_sequence/#_1","text":"\u5e8f\u5217\u5668\u53d1\u751f\u5668(Frame Sequencer)\u4e3a\u8c03\u5236\u5355\u5143\u751f\u6210\u4f4e\u9891\u65f6\u949f. \u5b83\u7531 512 Hz \u7684\u5b9a\u65f6\u5668\u63d0\u4f9b\u65f6\u949f\u63a7\u5236. \u5e8f\u5217\u53d1\u751f\u5668\u95f4\u63a5\u63a5\u53d7 CPU \u65f6\u949f\u8f93\u5165, \u5b83\u6709\u70b9\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5165\u53e3\u51fd\u6570, \u57fa\u672c\u4e0a\u97f3\u9891\u6a21\u5757\u7684\u6240\u6709\u903b\u8f91\u90fd\u7ecf\u7531\u5b83\u7684\u8fd0\u4f5c\u800c\u89e6\u53d1. \u5e8f\u5217\u5668\u53d1\u751f\u5668\u5728\u4e0d\u540c\u65f6\u95f4\u5206\u7247\u4e0b\u89e6\u53d1\u4e0d\u540c\u7684\u786c\u4ef6\u5355\u5143: Step Length Ctr Vol Env Sweep --------------------------------------- 0 Clock - - 1 - - - 2 Clock - Clock 3 - - - 4 Clock - - 5 - - - 6 Clock - Clock 7 - Clock - --------------------------------------- Rate 256 Hz 64 Hz 128 Hz \u7531\u4e0a\u8868\u53ef\u77e5\u957f\u5ea6\u8ba1\u6570\u5668(Length Ctr)\u7684\u9891\u7387\u65f6 256 Hz, \u97f3\u91cf\u5305\u7edc(Vol Env)\u7684\u9891\u7387\u662f 64 Hz, \u626b\u9891\u5668(Sweep)\u7684\u9891\u7387\u662f 128 Hz. \u5e8f\u5217\u53d1\u751f\u5668\u7684\u5b9e\u73b0\u4e5f\u975e\u5e38\u7b80\u5355, \u57fa\u672c\u4e0a\u53ef\u770b\u4f5c\u4e00\u4e2a\u5468\u671f\u56fa\u5b9a\u4e3a 8 \u7684\u7279\u6b8a\u5b9a\u65f6\u5668. struct FrameSequencer { step: u8, } impl FrameSequencer { fn power_up() -> Self { Self { step: 0x00 } } fn next(&mut self) -> u8 { self.step += 1; self.step %= 8; self.step } } \u6700\u540e\u5c06 FrameSequencer \u63a5\u5165\u5230 512 Hz \u65f6\u949f\u4fe1\u53f7, \u5e76\u63a7\u5236\u957f\u5ea6\u8ba1\u6570\u5668, \u97f3\u91cf\u5305\u7edc\u548c\u626b\u9891\u5668\u5728 4 \u4e2a\u97f3\u9891\u901a\u9053\u4e2d\u7684\u8fd0\u884c. \u6ce8\u610f\u76ee\u524d\u5e76\u6ca1\u6709\u771f\u7684\u53bb\u5b9e\u73b0\u8fd9\u4e9b\u903b\u8f91\u786c\u4ef6\u7684\u4ee3\u7801, \u5b83\u4eec\u4ec5\u4ec5\u5728\u6b64\u5904\u88ab\u5360\u4f4d. impl Apu { pub fn next(&mut self, cycles: u32) { if !self.reg.get_power() { return; } for _ in 0..self.timer.next(cycles) { self.channel1.next(self.timer.period); self.channel2.next(self.timer.period); self.channel3.next(self.timer.period); self.channel4.next(self.timer.period); // 512 Hz \u65f6\u949f\u4fe1\u53f7 // // ... Your Codes let step = self.fs.next(); if step == 0 || step == 2 || step == 4 || step == 6 { // Length Ctr self.channel1.lc.next(); self.channel2.lc.next(); self.channel3.lc.next(); self.channel4.lc.next(); } if step == 7 { // Vol Env self.channel1.ve.next(); self.channel2.ve.next(); self.channel4.ve.next(); } if step == 2 || step == 6 { // Sweep self.channel1.fs.next(); } } } }","title":"\u5e8f\u5217\u53d1\u751f\u5668"},{"location":"content/gameboy/audio/frequency_sweep/","text":"\u9891\u7387\u626b\u63cf\u5668 \u65b9\u6ce2\u901a\u9053 1 \u5177\u6709\u4e00\u4e2a\u9891\u7387\u626b\u63cf\u5355\u5143, \u7531\u5bc4\u5b58\u5668 NR10 \u63a7\u5236. \u626b\u9891\u5668\u6709\u4e00\u4e2a\u5b9a\u65f6\u5668, \u5185\u90e8\u542f\u7528/\u7981\u7528\u6807\u5fd7\u548c\u5f71\u5b50\u5bc4\u5b58\u5668(\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u901a\u9053\u7684\u9891\u7387). \u626b\u9891\u5668\u7684\u4f5c\u7528\u662f\u5b9a\u671f\u5411\u4e0a\u6216\u5411\u4e0b\u8c03\u6574\u65b9\u6ce2\u901a\u9053 1 \u7684\u9891\u7387. \u5f53\u626b\u9891\u5668\u88ab\u65b9\u6ce2\u901a\u9053 1 \u89e6\u53d1\u5de5\u4f5c\u65f6, \u626b\u9891\u5668\u5c06\u5b8c\u6210\u4ee5\u4e0b\u51e0\u4ef6\u4e8b: \u65b9\u6ce2\u901a\u9053 1 \u7684\u5f53\u524d\u9891\u7387\u88ab\u590d\u5236\u5230\u626b\u9891\u5668\u7684\u5f71\u5b50\u5bc4\u5b58\u5668\u4e2d \u626b\u9891\u5668\u7684\u5b9a\u65f6\u5668\u91cd\u7f6e \u5982\u679c\u626b\u63cf\u5468\u671f\u6216\u79fb\u4f4d(shift)\u503c\u975e\u96f6, \u5219\u8bbe\u7f6e\u542f\u7528\u6807\u5fd7, \u5426\u5219\u7981\u7528 \u5982\u679c\u626b\u63cf\u79fb\u4f4d\u975e\u96f6, \u5219\u7acb\u5373\u6267\u884c\u9891\u7387\u8ba1\u7b97\u548c\u6ea2\u51fa\u68c0\u67e5 \u9891\u7387\u8ba1\u7b97\u5305\u62ec\u83b7\u53d6\u5f71\u5b50\u5bc4\u5b58\u5668\u4e2d\u7684\u503c, \u5e76\u901a\u8fc7\u626b\u9891\u79fb\u4f4d\u53f3\u79fb, \u53ef\u9009\u5730\u53d6\u6d88\u8be5\u503c, \u5e76\u5c06\u5176\u4e0e\u5f71\u5b50\u5bc4\u5b58\u5668\u76f8\u52a0\u4ee5\u4ea7\u751f\u65b0\u9891\u7387. \u5bf9\u8fd9\u4e2a\u65b0\u9891\u7387\u6240\u505a\u7684\u5de5\u4f5c\u53d6\u51b3\u4e8e\u5177\u4f53\u60c5\u51b5. \u6ea2\u51fa\u68c0\u67e5\u53ea\u662f\u8ba1\u7b97\u65b0\u9891\u7387, \u5982\u679c\u5927\u4e8e 2047, \u5219\u7981\u7528\u65b9\u6ce2\u901a\u9053 1. \u626b\u9891\u5668\u7531\u5e8f\u5217\u53d1\u751f\u5668\u4e3a\u5176\u63d0\u4f9b 128 Hz \u65f6\u949f. \u5f53\u5b83\u4ea7\u751f\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7\u5e76\u4e14\u5185\u90e8\u542f\u7528/\u7981\u7528\u6807\u5fd7\u4e3a 1 \u4e14\u626b\u63cf\u5468\u671f\u4e0d\u4e3a\u96f6\u65f6, \u5c06\u6267\u884c\u4e00\u6b21\u9891\u7387\u8ba1\u7b97\u548c\u6ea2\u51fa\u68c0\u67e5. \u5982\u679c\u65b0\u9891\u7387\u5c0f\u4e8e\u7b49\u4e8e 2047 \u4e14\u626b\u63cf\u79fb\u4f4d\u4e0d\u4e3a\u96f6, \u5219\u5c06\u6b64\u65b0\u9891\u7387\u5199\u56de\u5230\u5f71\u5b50\u9891\u7387\u548c NR13 \u548c NR14 \u5bc4\u5b58\u5668\u4e2d. \u7136\u540e\u4f7f\u7528\u6b64\u65b0\u503c\u7acb\u5373\u6267\u884c\u9891\u7387\u8ba1\u7b97\u548c\u6ea2\u51fa\u68c0\u67e5, \u4f46\u662f\u5f97\u5230\u7684\u8fd9\u7b2c\u4e8c\u4e2a\u65b0\u9891\u7387\u4e0d\u4f1a\u88ab\u56de\u5199. \u9700\u8981\u989d\u5916\u6ce8\u610f\u7684\u6709\u4e24\u70b9: \u5f53\u626b\u63cf\u6709\u6548\u65f6, \u53ef\u4ee5\u901a\u8fc7 NR13 \u548c NR14 \u5bc4\u5b58\u5668\u4fee\u6539\u65b9\u6ce2\u901a\u9053 1 \u7684\u9891\u7387, \u4f46\u5176\u5f71\u5b50\u9891\u7387\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd, \u56e0\u6b64\u4e0b\u6b21\u626b\u63cf\u66f4\u65b0\u901a\u9053\u7684\u9891\u7387\u65f6, \u6b64\u4fee\u6539\u5c06\u4e22\u5931. \u5982\u679c\u8bd5\u56fe\u8bbe\u7f6e\u626b\u9891\u5668\u7684\u5468\u671f\u4e3a 0, \u5219\u4ee5\u5468\u671f 8 \u66ff\u4ee3. \u626b\u9891\u5668\u4f1a\u4f7f\u7528\u5230\u5bc4\u5b58\u5668\u4e2d\u7684\u4ee5\u4e0b\u51e0\u4e2a\u51fd\u6570 get_frequency(): \u83b7\u53d6\u5f53\u524d\u7684\u901a\u9053\u9891\u7387 get_sweep_period(): \u83b7\u53d6\u5f53\u524d\u7684\u626b\u9891\u5668\u7684\u9891\u7387 get_shift(): \u83b7\u53d6\u5f53\u671f\u7684\u626b\u9891\u5668\u7684\u79fb\u4f4d\u503c \u4ee3\u7801\u5b9e\u73b0 // The first square channel has a frequency sweep unit, controlled by NR10. This has a timer, internal enabled flag, // and frequency shadow register. It can periodically adjust square 1's frequency up or down. // During a trigger event, several things occur: // // - Square 1's frequency is copied to the shadow register. // - The sweep timer is reloaded. // - The internal enabled flag is set if either the sweep period or shift are non-zero, cleared otherwise. // - If the sweep shift is non-zero, frequency calculation and the overflow check are performed immediately. // // Frequency calculation consists of taking the value in the frequency shadow register, shifting it right by sweep // shift, optionally negating the value, and summing this with the frequency shadow register to produce a new // frequency. What is done with this new frequency depends on the context. // // The overflow check simply calculates the new frequency and if this is greater than 2047, square 1 is disabled. // The sweep timer is clocked at 128 Hz by the frame sequencer. When it generates a clock and the sweep's internal // enabled flag is set and the sweep period is not zero, a new frequency is calculated and the overflow check is // performed. If the new frequency is 2047 or less and the sweep shift is not zero, this new frequency is written back // to the shadow frequency and square 1's frequency in NR13 and NR14, then frequency calculation and overflow check are // run AGAIN immediately using this new value, but this second new frequency is not written back. // Square 1's frequency can be modified via NR13 and NR14 while sweep is active, but the shadow frequency won't be // affected so the next time the sweep updates the channel's frequency this modification will be lost. struct FrequencySweep { reg: Rc<RefCell<Register>>, timer: Timer, enable: bool, shadow: u16, newfeq: u16, } impl FrequencySweep { fn power_up(reg: Rc<RefCell<Register>>) -> Self { Self { reg, timer: Timer::power_up(8), enable: false, shadow: 0x0000, newfeq: 0x0000, } } fn reload(&mut self) { self.shadow = self.reg.borrow().get_frequency(); let p = self.reg.borrow().get_sweep_period(); // The volume envelope and sweep timers treat a period of 0 as 8. self.timer.period = if p == 0 { 8 } else { u32::from(p) }; self.enable = p != 0x00 || self.reg.borrow().get_shift() != 0x00; if self.reg.borrow().get_shift() != 0x00 { self.frequency_calculation(); self.overflow_check(); } } fn frequency_calculation(&mut self) { let offset = self.shadow >> self.reg.borrow().get_shift(); if self.reg.borrow().get_negate() { self.newfeq = self.shadow.wrapping_sub(offset); } else { self.newfeq = self.shadow.wrapping_add(offset); } } fn overflow_check(&mut self) { if self.newfeq >= 2048 { self.reg.borrow_mut().set_trigger(false); } } fn next(&mut self) { if !self.enable || self.reg.borrow().get_sweep_period() == 0 { return; } if self.timer.next(1) == 0x00 { return; } self.frequency_calculation(); self.overflow_check(); if self.newfeq < 2048 && self.reg.borrow().get_shift() != 0 { self.reg.borrow_mut().set_frequency(self.newfeq); self.shadow = self.newfeq; self.frequency_calculation(); self.overflow_check(); } } }","title":"GB-\u97f3\u9891-\u9891\u7387\u626b\u63cf\u5668"},{"location":"content/gameboy/audio/frequency_sweep/#_1","text":"\u65b9\u6ce2\u901a\u9053 1 \u5177\u6709\u4e00\u4e2a\u9891\u7387\u626b\u63cf\u5355\u5143, \u7531\u5bc4\u5b58\u5668 NR10 \u63a7\u5236. \u626b\u9891\u5668\u6709\u4e00\u4e2a\u5b9a\u65f6\u5668, \u5185\u90e8\u542f\u7528/\u7981\u7528\u6807\u5fd7\u548c\u5f71\u5b50\u5bc4\u5b58\u5668(\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u901a\u9053\u7684\u9891\u7387). \u626b\u9891\u5668\u7684\u4f5c\u7528\u662f\u5b9a\u671f\u5411\u4e0a\u6216\u5411\u4e0b\u8c03\u6574\u65b9\u6ce2\u901a\u9053 1 \u7684\u9891\u7387. \u5f53\u626b\u9891\u5668\u88ab\u65b9\u6ce2\u901a\u9053 1 \u89e6\u53d1\u5de5\u4f5c\u65f6, \u626b\u9891\u5668\u5c06\u5b8c\u6210\u4ee5\u4e0b\u51e0\u4ef6\u4e8b: \u65b9\u6ce2\u901a\u9053 1 \u7684\u5f53\u524d\u9891\u7387\u88ab\u590d\u5236\u5230\u626b\u9891\u5668\u7684\u5f71\u5b50\u5bc4\u5b58\u5668\u4e2d \u626b\u9891\u5668\u7684\u5b9a\u65f6\u5668\u91cd\u7f6e \u5982\u679c\u626b\u63cf\u5468\u671f\u6216\u79fb\u4f4d(shift)\u503c\u975e\u96f6, \u5219\u8bbe\u7f6e\u542f\u7528\u6807\u5fd7, \u5426\u5219\u7981\u7528 \u5982\u679c\u626b\u63cf\u79fb\u4f4d\u975e\u96f6, \u5219\u7acb\u5373\u6267\u884c\u9891\u7387\u8ba1\u7b97\u548c\u6ea2\u51fa\u68c0\u67e5 \u9891\u7387\u8ba1\u7b97\u5305\u62ec\u83b7\u53d6\u5f71\u5b50\u5bc4\u5b58\u5668\u4e2d\u7684\u503c, \u5e76\u901a\u8fc7\u626b\u9891\u79fb\u4f4d\u53f3\u79fb, \u53ef\u9009\u5730\u53d6\u6d88\u8be5\u503c, \u5e76\u5c06\u5176\u4e0e\u5f71\u5b50\u5bc4\u5b58\u5668\u76f8\u52a0\u4ee5\u4ea7\u751f\u65b0\u9891\u7387. \u5bf9\u8fd9\u4e2a\u65b0\u9891\u7387\u6240\u505a\u7684\u5de5\u4f5c\u53d6\u51b3\u4e8e\u5177\u4f53\u60c5\u51b5. \u6ea2\u51fa\u68c0\u67e5\u53ea\u662f\u8ba1\u7b97\u65b0\u9891\u7387, \u5982\u679c\u5927\u4e8e 2047, \u5219\u7981\u7528\u65b9\u6ce2\u901a\u9053 1. \u626b\u9891\u5668\u7531\u5e8f\u5217\u53d1\u751f\u5668\u4e3a\u5176\u63d0\u4f9b 128 Hz \u65f6\u949f. \u5f53\u5b83\u4ea7\u751f\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7\u5e76\u4e14\u5185\u90e8\u542f\u7528/\u7981\u7528\u6807\u5fd7\u4e3a 1 \u4e14\u626b\u63cf\u5468\u671f\u4e0d\u4e3a\u96f6\u65f6, \u5c06\u6267\u884c\u4e00\u6b21\u9891\u7387\u8ba1\u7b97\u548c\u6ea2\u51fa\u68c0\u67e5. \u5982\u679c\u65b0\u9891\u7387\u5c0f\u4e8e\u7b49\u4e8e 2047 \u4e14\u626b\u63cf\u79fb\u4f4d\u4e0d\u4e3a\u96f6, \u5219\u5c06\u6b64\u65b0\u9891\u7387\u5199\u56de\u5230\u5f71\u5b50\u9891\u7387\u548c NR13 \u548c NR14 \u5bc4\u5b58\u5668\u4e2d. \u7136\u540e\u4f7f\u7528\u6b64\u65b0\u503c\u7acb\u5373\u6267\u884c\u9891\u7387\u8ba1\u7b97\u548c\u6ea2\u51fa\u68c0\u67e5, \u4f46\u662f\u5f97\u5230\u7684\u8fd9\u7b2c\u4e8c\u4e2a\u65b0\u9891\u7387\u4e0d\u4f1a\u88ab\u56de\u5199. \u9700\u8981\u989d\u5916\u6ce8\u610f\u7684\u6709\u4e24\u70b9: \u5f53\u626b\u63cf\u6709\u6548\u65f6, \u53ef\u4ee5\u901a\u8fc7 NR13 \u548c NR14 \u5bc4\u5b58\u5668\u4fee\u6539\u65b9\u6ce2\u901a\u9053 1 \u7684\u9891\u7387, \u4f46\u5176\u5f71\u5b50\u9891\u7387\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd, \u56e0\u6b64\u4e0b\u6b21\u626b\u63cf\u66f4\u65b0\u901a\u9053\u7684\u9891\u7387\u65f6, \u6b64\u4fee\u6539\u5c06\u4e22\u5931. \u5982\u679c\u8bd5\u56fe\u8bbe\u7f6e\u626b\u9891\u5668\u7684\u5468\u671f\u4e3a 0, \u5219\u4ee5\u5468\u671f 8 \u66ff\u4ee3. \u626b\u9891\u5668\u4f1a\u4f7f\u7528\u5230\u5bc4\u5b58\u5668\u4e2d\u7684\u4ee5\u4e0b\u51e0\u4e2a\u51fd\u6570 get_frequency(): \u83b7\u53d6\u5f53\u524d\u7684\u901a\u9053\u9891\u7387 get_sweep_period(): \u83b7\u53d6\u5f53\u524d\u7684\u626b\u9891\u5668\u7684\u9891\u7387 get_shift(): \u83b7\u53d6\u5f53\u671f\u7684\u626b\u9891\u5668\u7684\u79fb\u4f4d\u503c","title":"\u9891\u7387\u626b\u63cf\u5668"},{"location":"content/gameboy/audio/frequency_sweep/#_2","text":"// The first square channel has a frequency sweep unit, controlled by NR10. This has a timer, internal enabled flag, // and frequency shadow register. It can periodically adjust square 1's frequency up or down. // During a trigger event, several things occur: // // - Square 1's frequency is copied to the shadow register. // - The sweep timer is reloaded. // - The internal enabled flag is set if either the sweep period or shift are non-zero, cleared otherwise. // - If the sweep shift is non-zero, frequency calculation and the overflow check are performed immediately. // // Frequency calculation consists of taking the value in the frequency shadow register, shifting it right by sweep // shift, optionally negating the value, and summing this with the frequency shadow register to produce a new // frequency. What is done with this new frequency depends on the context. // // The overflow check simply calculates the new frequency and if this is greater than 2047, square 1 is disabled. // The sweep timer is clocked at 128 Hz by the frame sequencer. When it generates a clock and the sweep's internal // enabled flag is set and the sweep period is not zero, a new frequency is calculated and the overflow check is // performed. If the new frequency is 2047 or less and the sweep shift is not zero, this new frequency is written back // to the shadow frequency and square 1's frequency in NR13 and NR14, then frequency calculation and overflow check are // run AGAIN immediately using this new value, but this second new frequency is not written back. // Square 1's frequency can be modified via NR13 and NR14 while sweep is active, but the shadow frequency won't be // affected so the next time the sweep updates the channel's frequency this modification will be lost. struct FrequencySweep { reg: Rc<RefCell<Register>>, timer: Timer, enable: bool, shadow: u16, newfeq: u16, } impl FrequencySweep { fn power_up(reg: Rc<RefCell<Register>>) -> Self { Self { reg, timer: Timer::power_up(8), enable: false, shadow: 0x0000, newfeq: 0x0000, } } fn reload(&mut self) { self.shadow = self.reg.borrow().get_frequency(); let p = self.reg.borrow().get_sweep_period(); // The volume envelope and sweep timers treat a period of 0 as 8. self.timer.period = if p == 0 { 8 } else { u32::from(p) }; self.enable = p != 0x00 || self.reg.borrow().get_shift() != 0x00; if self.reg.borrow().get_shift() != 0x00 { self.frequency_calculation(); self.overflow_check(); } } fn frequency_calculation(&mut self) { let offset = self.shadow >> self.reg.borrow().get_shift(); if self.reg.borrow().get_negate() { self.newfeq = self.shadow.wrapping_sub(offset); } else { self.newfeq = self.shadow.wrapping_add(offset); } } fn overflow_check(&mut self) { if self.newfeq >= 2048 { self.reg.borrow_mut().set_trigger(false); } } fn next(&mut self) { if !self.enable || self.reg.borrow().get_sweep_period() == 0 { return; } if self.timer.next(1) == 0x00 { return; } self.frequency_calculation(); self.overflow_check(); if self.newfeq < 2048 && self.reg.borrow().get_shift() != 0 { self.reg.borrow_mut().set_frequency(self.newfeq); self.shadow = self.newfeq; self.frequency_calculation(); self.overflow_check(); } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/audio/length_counter/","text":"\u957f\u5ea6\u8ba1\u6570\u5668 \u957f\u5ea6\u8ba1\u6570\u5668(Length Counter)\u5728\u9012\u51cf\u5230\u96f6\u65f6\u7981\u7528\u5bf9\u5e94\u7684\u97f3\u9891\u901a\u9053. \u5b83\u5305\u542b\u4e00\u4e2a\u5185\u90e8\u8ba1\u6570\u5668\u548c\u542f\u7528/\u7981\u7528\u6807\u5fd7. \u5411 NRx1 \u5bc4\u5b58\u5668\u5199\u5165\u4e00\u4e2a\u5b57\u8282\u4f1a\u521d\u59cb\u5316\u6216\u91cd\u8f7d\u957f\u5ea6\u8ba1\u6570\u5668\u7684\u8ba1\u6570. Wave \u901a\u9053\u4f7f\u7528\u5168\u90e8 8 \u4e2a Bit \u4f4d, \u800c\u5176\u4ed6\u901a\u9053\u53ea\u4f7f\u7528\u4f4e 6 \u4e2a Bit \u4f4d, \u56e0\u6b64\u5bf9\u4e8e Wave \u901a\u9053\u800c\u8a00, \u5176\u8ba1\u6570\u8303\u56f4\u662f 0 - 255, \u5176\u4ed6\u901a\u9053\u5219\u662f 0 - 63. \u5982\u679c\u5411 NRx1 \u91cd\u590d\u5199\u5165\u6570\u636e, \u8ba1\u6570\u5668\u5c06\u88ab\u91cd\u65b0\u52a0\u8f7d\u4e3a\u6700\u540e\u4e00\u6b21\u5199\u5165\u7684\u6570\u503c. \u5f53\u5185\u90e8\u542f\u7528/\u7981\u7528\u6807\u5fd7\u7f6e\u96f6\u65f6, \u901a\u9053\u5c06\u88ab\u7981\u7528. \u7981\u7528\u901a\u9053\u65f6, \u8be5\u901a\u9053\u7684\u97f3\u91cf\u5305\u7edc\u5c06\u63a5\u6536\u5230 0 \u503c\u8f93\u5165, \u56e0\u6b64\u6700\u7ec8\u901a\u9053\u8f93\u51fa\u4e3a 0 \u503c, \u5373\u6ca1\u6709\u58f0\u97f3. \u9664\u957f\u5ea6\u8ba1\u6570\u5668\u4e4b\u5916\u7684\u5176\u4ed6\u5185\u90e8\u5355\u5143\u4e5f\u53ef\u4ee5\u542f\u7528/\u7981\u7528\u901a\u9053. \u6bcf\u4e2a\u957f\u5ea6\u8ba1\u6570\u5668\u7531\u5e8f\u5217\u53d1\u751f\u5668\u4ee5 256 Hz \u7684\u9891\u7387\u8ba1\u65f6. \u957f\u5ea6\u8ba1\u6570\u5668\u9664\u4e86\u4ee5\u56fa\u5b9a\u9891\u7387\u9012\u51cf\u5916, \u8fd8\u4f1a\u88ab NRx4 \u989d\u5916\u89e6\u53d1: \u5f53\u5199\u5165 NRx4 \u4e14 NRx4 \u7684\u6700\u9ad8\u4f4d\u4e3a 1 \u65f6, \u5982\u679c\u957f\u5ea6\u8ba1\u6570\u5668\u4e0d\u4e3a 0, \u5219\u9012\u51cf 1. \u5982\u679c\u5b83\u5728\u6267\u884c\u5b8c\u51cf\u6cd5\u540e\u53d8\u4e3a 0, \u540c\u6837\u4f1a\u7981\u7528\u8be5\u97f3\u9891\u901a\u9053. \u5982\u679c\u957f\u5ea6\u8ba1\u6570\u5668\u5728\u6b64\u79cd\u60c5\u5f62\u4e0b\u6210\u529f\u964d\u4e3a 0, \u5219\u4e3a\u5176\u8d4b\u503c\u4e3a 256 \u6216 64: \u8fd9\u53d6\u51b3\u4e8e\u8be5\u97f3\u9891\u901a\u9053\u662f\u5426\u662f Wave \u901a\u9053. \u4ee3\u7801\u5b9e\u73b0 struct LengthCounter { reg: Rc<RefCell<Register>>, n: u16, } impl LengthCounter { fn power_up(reg: Rc<RefCell<Register>>) -> Self { Self { reg, n: 0x0000 } } fn next(&mut self) { if self.reg.borrow().get_length_enable() && self.n != 0 { self.n -= 1; if self.n == 0 { self.reg.borrow_mut().set_trigger(false); } } } fn reload(&mut self) { if self.n == 0x0000 { self.n = if self.reg.borrow().channel == Channel::Wave { 1 << 8 } else { 1 << 6 }; } } }","title":"GB-\u97f3\u9891-\u957f\u5ea6\u8ba1\u6570\u5668"},{"location":"content/gameboy/audio/length_counter/#_1","text":"\u957f\u5ea6\u8ba1\u6570\u5668(Length Counter)\u5728\u9012\u51cf\u5230\u96f6\u65f6\u7981\u7528\u5bf9\u5e94\u7684\u97f3\u9891\u901a\u9053. \u5b83\u5305\u542b\u4e00\u4e2a\u5185\u90e8\u8ba1\u6570\u5668\u548c\u542f\u7528/\u7981\u7528\u6807\u5fd7. \u5411 NRx1 \u5bc4\u5b58\u5668\u5199\u5165\u4e00\u4e2a\u5b57\u8282\u4f1a\u521d\u59cb\u5316\u6216\u91cd\u8f7d\u957f\u5ea6\u8ba1\u6570\u5668\u7684\u8ba1\u6570. Wave \u901a\u9053\u4f7f\u7528\u5168\u90e8 8 \u4e2a Bit \u4f4d, \u800c\u5176\u4ed6\u901a\u9053\u53ea\u4f7f\u7528\u4f4e 6 \u4e2a Bit \u4f4d, \u56e0\u6b64\u5bf9\u4e8e Wave \u901a\u9053\u800c\u8a00, \u5176\u8ba1\u6570\u8303\u56f4\u662f 0 - 255, \u5176\u4ed6\u901a\u9053\u5219\u662f 0 - 63. \u5982\u679c\u5411 NRx1 \u91cd\u590d\u5199\u5165\u6570\u636e, \u8ba1\u6570\u5668\u5c06\u88ab\u91cd\u65b0\u52a0\u8f7d\u4e3a\u6700\u540e\u4e00\u6b21\u5199\u5165\u7684\u6570\u503c. \u5f53\u5185\u90e8\u542f\u7528/\u7981\u7528\u6807\u5fd7\u7f6e\u96f6\u65f6, \u901a\u9053\u5c06\u88ab\u7981\u7528. \u7981\u7528\u901a\u9053\u65f6, \u8be5\u901a\u9053\u7684\u97f3\u91cf\u5305\u7edc\u5c06\u63a5\u6536\u5230 0 \u503c\u8f93\u5165, \u56e0\u6b64\u6700\u7ec8\u901a\u9053\u8f93\u51fa\u4e3a 0 \u503c, \u5373\u6ca1\u6709\u58f0\u97f3. \u9664\u957f\u5ea6\u8ba1\u6570\u5668\u4e4b\u5916\u7684\u5176\u4ed6\u5185\u90e8\u5355\u5143\u4e5f\u53ef\u4ee5\u542f\u7528/\u7981\u7528\u901a\u9053. \u6bcf\u4e2a\u957f\u5ea6\u8ba1\u6570\u5668\u7531\u5e8f\u5217\u53d1\u751f\u5668\u4ee5 256 Hz \u7684\u9891\u7387\u8ba1\u65f6. \u957f\u5ea6\u8ba1\u6570\u5668\u9664\u4e86\u4ee5\u56fa\u5b9a\u9891\u7387\u9012\u51cf\u5916, \u8fd8\u4f1a\u88ab NRx4 \u989d\u5916\u89e6\u53d1: \u5f53\u5199\u5165 NRx4 \u4e14 NRx4 \u7684\u6700\u9ad8\u4f4d\u4e3a 1 \u65f6, \u5982\u679c\u957f\u5ea6\u8ba1\u6570\u5668\u4e0d\u4e3a 0, \u5219\u9012\u51cf 1. \u5982\u679c\u5b83\u5728\u6267\u884c\u5b8c\u51cf\u6cd5\u540e\u53d8\u4e3a 0, \u540c\u6837\u4f1a\u7981\u7528\u8be5\u97f3\u9891\u901a\u9053. \u5982\u679c\u957f\u5ea6\u8ba1\u6570\u5668\u5728\u6b64\u79cd\u60c5\u5f62\u4e0b\u6210\u529f\u964d\u4e3a 0, \u5219\u4e3a\u5176\u8d4b\u503c\u4e3a 256 \u6216 64: \u8fd9\u53d6\u51b3\u4e8e\u8be5\u97f3\u9891\u901a\u9053\u662f\u5426\u662f Wave \u901a\u9053.","title":"\u957f\u5ea6\u8ba1\u6570\u5668"},{"location":"content/gameboy/audio/length_counter/#_2","text":"struct LengthCounter { reg: Rc<RefCell<Register>>, n: u16, } impl LengthCounter { fn power_up(reg: Rc<RefCell<Register>>) -> Self { Self { reg, n: 0x0000 } } fn next(&mut self) { if self.reg.borrow().get_length_enable() && self.n != 0 { self.n -= 1; if self.n == 0 { self.reg.borrow_mut().set_trigger(false); } } } fn reload(&mut self) { if self.n == 0x0000 { self.n = if self.reg.borrow().channel == Channel::Wave { 1 << 8 } else { 1 << 6 }; } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/audio/mixer/","text":"\u6df7\u9891\u5668 \u6df7\u9891\u5668\u7684\u529f\u80fd\u662f\u6df7\u5408\u53e0\u52a0 4 \u4e2a\u901a\u9053\u7684\u8f93\u51fa. \u6bcf\u4e2a\u901a\u9053\u7684\u8f93\u51fa\u5728\u53d1\u9001\u5230\u5de6/\u53f3\u6df7\u9891\u5668\u4e4b\u524d\u9700\u8981\u7ecf\u8fc7\u4e00\u5bf9\u989d\u5916\u7684\u5f00\u5173, \u6df7\u9891\u5668\u53ea\u662f\u5c06\u6bcf\u4e2a\u901a\u9053\u7684\u8f93\u51fa\u7535\u538b\u53e0\u52a0\u5728\u4e00\u8d77. \u8fd9\u4e9b\u5de6/\u53f3\u5f00\u5173\u7531 NR51 \u5bc4\u5b58\u5668\u63a7\u5236. \u5f53\u5f00\u5173\u5173\u95ed\u65f6, \u6df7\u9891\u5668\u63a5\u6536\u5230 0 \u4f0f\u7279\u7684\u7535\u538b\u4fe1\u53f7. NR50 \u5bc4\u5b58\u5668\u7684 Vin L enable \u4e0e Vin R enable \u4f4d\u63a7\u5236\u6765\u81ea\u5361\u5e26\u7684 Vin \u4fe1\u53f7. \u8fd9\u5141\u8bb8\u6e38\u620f\u5f00\u53d1\u8005\u5728\u5361\u5e26\u4e0a\u6dfb\u52a0\u989d\u5916\u7684\u58f0\u97f3\u786c\u4ef6. \u6df7\u5408\u540e\u7684\u5de6/\u53f3\u4fe1\u53f7\u5c06\u7ee7\u7eed\u901a\u8fc7\u5de6/\u53f3\u4e3b\u97f3\u91cf\u63a7\u5236. \u8fd9\u4e9b\u4fe1\u53f7\u5c06\u88ab\u4e58\u4ee5(\u97f3\u91cf + 1)\u540e\u8f93\u51fa. \u56e0\u6b64\u4e00\u4e2a\u97f3\u91cf\u4e3a 2 \u7684\u901a\u9053\u5728\u4e3b\u97f3\u91cf\u4e3a 7 \u7684\u60c5\u51b5\u4e0b\u542c\u8d77\u6765\u548c\u4e00\u4e2a\u97f3\u91cf\u4e3a 15 \u7684\u901a\u9053\u5728\u4e3b\u97f3\u91cf\u4e3a 0 \u7684\u60c5\u51b5\u4e0b\u5dee\u4e0d\u592a\u591a. \u4ee3\u7801\u5b9e\u73b0 \u6df7\u9891\u5668\u7684\u5b9e\u73b0\u6700\u4e3b\u8981\u7684\u90e8\u5206\u662f\u751f\u6210\u6700\u7ec8\u97f3\u9891\u6570\u636e: \u8fd9\u4e9b\u6570\u636e\u5b58\u50a8\u5728 buffer: Arc<Mutex<Vec<(f32, f32)>>> \u4e2d. next \u51fd\u6570\u4e2d\u5904\u7406\u4e86\u5404\u4e2a\u901a\u9053\u7684\u957f\u5ea6\u8ba1\u6570\u5668, \u97f3\u91cf\u5305\u7edc\u548c\u626b\u9891\u5668\u7684\u6267\u884c. mix \u51fd\u6570\u5c06\u5404\u4e2a\u901a\u9053\u7684 blipbuf \u6570\u636e\u5408\u5e76\u53e0\u52a0\u5728\u4e00\u8d77\u79f0\u4e3a\u4e00\u8fde\u4e32\u7684 (f32, f32) \u6570\u636e. pub struct Apu { pub buffer: Arc<Mutex<Vec<(f32, f32)>>>, reg: Register, timer: Timer, fs: FrameSequencer, channel1: ChannelSquare, channel2: ChannelSquare, channel3: ChannelWave, channel4: ChannelNoise, sample_rate: u32, } impl Apu { pub fn power_up(sample_rate: u32) -> Self { let blipbuf1 = create_blipbuf(sample_rate); let blipbuf2 = create_blipbuf(sample_rate); let blipbuf3 = create_blipbuf(sample_rate); let blipbuf4 = create_blipbuf(sample_rate); Self { buffer: Arc::new(Mutex::new(Vec::new())), reg: Register::power_up(Channel::Mixer), timer: Timer::power_up(cpu::CLOCK_FREQUENCY / 512), fs: FrameSequencer::power_up(), channel1: ChannelSquare::power_up(blipbuf1, Channel::Square1), channel2: ChannelSquare::power_up(blipbuf2, Channel::Square2), channel3: ChannelWave::power_up(blipbuf3), channel4: ChannelNoise::power_up(blipbuf4), sample_rate, } } fn play(&mut self, l: &[f32], r: &[f32]) { assert_eq!(l.len(), r.len()); let mut buffer = self.buffer.lock().unwrap(); for (l, r) in l.iter().zip(r) { // Do not fill the buffer with more than 1 second of data // This speeds up the resync after the turning on and off the speed limiter if buffer.len() > self.sample_rate as usize { return; } buffer.push((*l, *r)); } } pub fn next(&mut self, cycles: u32) { if !self.reg.get_power() { return; } for _ in 0..self.timer.next(cycles) { self.channel1.next(self.timer.period); self.channel2.next(self.timer.period); self.channel3.next(self.timer.period); self.channel4.next(self.timer.period); let step = self.fs.next(); if step == 0 || step == 2 || step == 4 || step == 6 { self.channel1.lc.next(); self.channel2.lc.next(); self.channel3.lc.next(); self.channel4.lc.next(); } if step == 7 { self.channel1.ve.next(); self.channel2.ve.next(); self.channel4.ve.next(); } if step == 2 || step == 6 { self.channel1.fs.next(); self.channel1.timer.period = period(self.channel1.reg.clone()); } self.channel1.blip.data.end_frame(self.timer.period); self.channel2.blip.data.end_frame(self.timer.period); self.channel3.blip.data.end_frame(self.timer.period); self.channel4.blip.data.end_frame(self.timer.period); self.channel1.blip.from -= self.timer.period; self.channel2.blip.from -= self.timer.period; self.channel3.blip.from -= self.timer.period; self.channel4.blip.from -= self.timer.period; self.mix(); } } fn mix(&mut self) { let sc1 = self.channel1.blip.data.samples_avail(); let sc2 = self.channel2.blip.data.samples_avail(); let sc3 = self.channel3.blip.data.samples_avail(); let sc4 = self.channel4.blip.data.samples_avail(); assert_eq!(sc1, sc2); assert_eq!(sc2, sc3); assert_eq!(sc3, sc4); let sample_count = sc1 as usize; let mut sum = 0; let l_vol = (f32::from(self.reg.get_l_vol()) / 7.0) * (1.0 / 15.0) * 0.25; let r_vol = (f32::from(self.reg.get_r_vol()) / 7.0) * (1.0 / 15.0) * 0.25; while sum < sample_count { let buf_l = &mut [0f32; 2048]; let buf_r = &mut [0f32; 2048]; let buf = &mut [0i16; 2048]; let count1 = self.channel1.blip.data.read_samples(buf, false); for (i, v) in buf[..count1].iter().enumerate() { if self.reg.nrx1 & 0x01 == 0x01 { buf_l[i] += f32::from(*v) * l_vol; } if self.reg.nrx1 & 0x10 == 0x10 { buf_r[i] += f32::from(*v) * r_vol; } } let count2 = self.channel2.blip.data.read_samples(buf, false); for (i, v) in buf[..count2].iter().enumerate() { if self.reg.nrx1 & 0x02 == 0x02 { buf_l[i] += f32::from(*v) * l_vol; } if self.reg.nrx1 & 0x20 == 0x20 { buf_r[i] += f32::from(*v) * r_vol; } } let count3 = self.channel3.blip.data.read_samples(buf, false); for (i, v) in buf[..count3].iter().enumerate() { if self.reg.nrx1 & 0x04 == 0x04 { buf_l[i] += f32::from(*v) * l_vol; } if self.reg.nrx1 & 0x40 == 0x40 { buf_r[i] += f32::from(*v) * r_vol; } } let count4 = self.channel4.blip.data.read_samples(buf, false); for (i, v) in buf[..count4].iter().enumerate() { if self.reg.nrx1 & 0x08 == 0x08 { buf_l[i] += f32::from(*v) * l_vol; } if self.reg.nrx1 & 0x80 == 0x80 { buf_r[i] += f32::from(*v) * r_vol; } } assert_eq!(count1, count2); assert_eq!(count2, count3); assert_eq!(count3, count4); self.play(&buf_l[..count1], &buf_r[..count1]); sum += count1; } } }","title":"GB-\u97f3\u9891-\u6df7\u9891\u5668"},{"location":"content/gameboy/audio/mixer/#_1","text":"\u6df7\u9891\u5668\u7684\u529f\u80fd\u662f\u6df7\u5408\u53e0\u52a0 4 \u4e2a\u901a\u9053\u7684\u8f93\u51fa. \u6bcf\u4e2a\u901a\u9053\u7684\u8f93\u51fa\u5728\u53d1\u9001\u5230\u5de6/\u53f3\u6df7\u9891\u5668\u4e4b\u524d\u9700\u8981\u7ecf\u8fc7\u4e00\u5bf9\u989d\u5916\u7684\u5f00\u5173, \u6df7\u9891\u5668\u53ea\u662f\u5c06\u6bcf\u4e2a\u901a\u9053\u7684\u8f93\u51fa\u7535\u538b\u53e0\u52a0\u5728\u4e00\u8d77. \u8fd9\u4e9b\u5de6/\u53f3\u5f00\u5173\u7531 NR51 \u5bc4\u5b58\u5668\u63a7\u5236. \u5f53\u5f00\u5173\u5173\u95ed\u65f6, \u6df7\u9891\u5668\u63a5\u6536\u5230 0 \u4f0f\u7279\u7684\u7535\u538b\u4fe1\u53f7. NR50 \u5bc4\u5b58\u5668\u7684 Vin L enable \u4e0e Vin R enable \u4f4d\u63a7\u5236\u6765\u81ea\u5361\u5e26\u7684 Vin \u4fe1\u53f7. \u8fd9\u5141\u8bb8\u6e38\u620f\u5f00\u53d1\u8005\u5728\u5361\u5e26\u4e0a\u6dfb\u52a0\u989d\u5916\u7684\u58f0\u97f3\u786c\u4ef6. \u6df7\u5408\u540e\u7684\u5de6/\u53f3\u4fe1\u53f7\u5c06\u7ee7\u7eed\u901a\u8fc7\u5de6/\u53f3\u4e3b\u97f3\u91cf\u63a7\u5236. \u8fd9\u4e9b\u4fe1\u53f7\u5c06\u88ab\u4e58\u4ee5(\u97f3\u91cf + 1)\u540e\u8f93\u51fa. \u56e0\u6b64\u4e00\u4e2a\u97f3\u91cf\u4e3a 2 \u7684\u901a\u9053\u5728\u4e3b\u97f3\u91cf\u4e3a 7 \u7684\u60c5\u51b5\u4e0b\u542c\u8d77\u6765\u548c\u4e00\u4e2a\u97f3\u91cf\u4e3a 15 \u7684\u901a\u9053\u5728\u4e3b\u97f3\u91cf\u4e3a 0 \u7684\u60c5\u51b5\u4e0b\u5dee\u4e0d\u592a\u591a.","title":"\u6df7\u9891\u5668"},{"location":"content/gameboy/audio/mixer/#_2","text":"\u6df7\u9891\u5668\u7684\u5b9e\u73b0\u6700\u4e3b\u8981\u7684\u90e8\u5206\u662f\u751f\u6210\u6700\u7ec8\u97f3\u9891\u6570\u636e: \u8fd9\u4e9b\u6570\u636e\u5b58\u50a8\u5728 buffer: Arc<Mutex<Vec<(f32, f32)>>> \u4e2d. next \u51fd\u6570\u4e2d\u5904\u7406\u4e86\u5404\u4e2a\u901a\u9053\u7684\u957f\u5ea6\u8ba1\u6570\u5668, \u97f3\u91cf\u5305\u7edc\u548c\u626b\u9891\u5668\u7684\u6267\u884c. mix \u51fd\u6570\u5c06\u5404\u4e2a\u901a\u9053\u7684 blipbuf \u6570\u636e\u5408\u5e76\u53e0\u52a0\u5728\u4e00\u8d77\u79f0\u4e3a\u4e00\u8fde\u4e32\u7684 (f32, f32) \u6570\u636e. pub struct Apu { pub buffer: Arc<Mutex<Vec<(f32, f32)>>>, reg: Register, timer: Timer, fs: FrameSequencer, channel1: ChannelSquare, channel2: ChannelSquare, channel3: ChannelWave, channel4: ChannelNoise, sample_rate: u32, } impl Apu { pub fn power_up(sample_rate: u32) -> Self { let blipbuf1 = create_blipbuf(sample_rate); let blipbuf2 = create_blipbuf(sample_rate); let blipbuf3 = create_blipbuf(sample_rate); let blipbuf4 = create_blipbuf(sample_rate); Self { buffer: Arc::new(Mutex::new(Vec::new())), reg: Register::power_up(Channel::Mixer), timer: Timer::power_up(cpu::CLOCK_FREQUENCY / 512), fs: FrameSequencer::power_up(), channel1: ChannelSquare::power_up(blipbuf1, Channel::Square1), channel2: ChannelSquare::power_up(blipbuf2, Channel::Square2), channel3: ChannelWave::power_up(blipbuf3), channel4: ChannelNoise::power_up(blipbuf4), sample_rate, } } fn play(&mut self, l: &[f32], r: &[f32]) { assert_eq!(l.len(), r.len()); let mut buffer = self.buffer.lock().unwrap(); for (l, r) in l.iter().zip(r) { // Do not fill the buffer with more than 1 second of data // This speeds up the resync after the turning on and off the speed limiter if buffer.len() > self.sample_rate as usize { return; } buffer.push((*l, *r)); } } pub fn next(&mut self, cycles: u32) { if !self.reg.get_power() { return; } for _ in 0..self.timer.next(cycles) { self.channel1.next(self.timer.period); self.channel2.next(self.timer.period); self.channel3.next(self.timer.period); self.channel4.next(self.timer.period); let step = self.fs.next(); if step == 0 || step == 2 || step == 4 || step == 6 { self.channel1.lc.next(); self.channel2.lc.next(); self.channel3.lc.next(); self.channel4.lc.next(); } if step == 7 { self.channel1.ve.next(); self.channel2.ve.next(); self.channel4.ve.next(); } if step == 2 || step == 6 { self.channel1.fs.next(); self.channel1.timer.period = period(self.channel1.reg.clone()); } self.channel1.blip.data.end_frame(self.timer.period); self.channel2.blip.data.end_frame(self.timer.period); self.channel3.blip.data.end_frame(self.timer.period); self.channel4.blip.data.end_frame(self.timer.period); self.channel1.blip.from -= self.timer.period; self.channel2.blip.from -= self.timer.period; self.channel3.blip.from -= self.timer.period; self.channel4.blip.from -= self.timer.period; self.mix(); } } fn mix(&mut self) { let sc1 = self.channel1.blip.data.samples_avail(); let sc2 = self.channel2.blip.data.samples_avail(); let sc3 = self.channel3.blip.data.samples_avail(); let sc4 = self.channel4.blip.data.samples_avail(); assert_eq!(sc1, sc2); assert_eq!(sc2, sc3); assert_eq!(sc3, sc4); let sample_count = sc1 as usize; let mut sum = 0; let l_vol = (f32::from(self.reg.get_l_vol()) / 7.0) * (1.0 / 15.0) * 0.25; let r_vol = (f32::from(self.reg.get_r_vol()) / 7.0) * (1.0 / 15.0) * 0.25; while sum < sample_count { let buf_l = &mut [0f32; 2048]; let buf_r = &mut [0f32; 2048]; let buf = &mut [0i16; 2048]; let count1 = self.channel1.blip.data.read_samples(buf, false); for (i, v) in buf[..count1].iter().enumerate() { if self.reg.nrx1 & 0x01 == 0x01 { buf_l[i] += f32::from(*v) * l_vol; } if self.reg.nrx1 & 0x10 == 0x10 { buf_r[i] += f32::from(*v) * r_vol; } } let count2 = self.channel2.blip.data.read_samples(buf, false); for (i, v) in buf[..count2].iter().enumerate() { if self.reg.nrx1 & 0x02 == 0x02 { buf_l[i] += f32::from(*v) * l_vol; } if self.reg.nrx1 & 0x20 == 0x20 { buf_r[i] += f32::from(*v) * r_vol; } } let count3 = self.channel3.blip.data.read_samples(buf, false); for (i, v) in buf[..count3].iter().enumerate() { if self.reg.nrx1 & 0x04 == 0x04 { buf_l[i] += f32::from(*v) * l_vol; } if self.reg.nrx1 & 0x40 == 0x40 { buf_r[i] += f32::from(*v) * r_vol; } } let count4 = self.channel4.blip.data.read_samples(buf, false); for (i, v) in buf[..count4].iter().enumerate() { if self.reg.nrx1 & 0x08 == 0x08 { buf_l[i] += f32::from(*v) * l_vol; } if self.reg.nrx1 & 0x80 == 0x80 { buf_r[i] += f32::from(*v) * r_vol; } } assert_eq!(count1, count2); assert_eq!(count2, count3); assert_eq!(count3, count4); self.play(&buf_l[..count1], &buf_r[..count1]); sum += count1; } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/audio/noise/","text":"\u767d\u566a\u97f3\u901a\u9053 \u566a\u97f3\u901a\u9053\u901a\u5e38\u7528\u4e8e\u53d1\u51fa\u4e00\u4e9b \"\u65e0\u89c4\u5219\u7684\u566a\u97f3\". \u65e9\u671f\u7684\u6e38\u620f\u4e3b\u673a\u7a7a\u95f4\u65e2\u5c0f\u53c8\u6602\u8d35, \u901a\u8fc7\u566a\u97f3\u901a\u9053\u6a21\u62df\u7206\u70b8\u58f0\u6216\u6e38\u620f\u80cc\u666f\u97f3 \"\u55e1\u55e1\" \u58f0, \u662f\u975e\u5e38\u5e38\u89c1\u7684\u4e00\u79cd\u505a\u6cd5. \u566a\u97f3\u901a\u9053\u7ed3\u6784\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u7ec4\u6210, \u5206\u522b\u662f\u957f\u5ea6\u8ba1\u6570\u5668, \u97f3\u91cf\u5305\u7edc\u548c\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668(Linear feedback shift register, LFSR). \u524d\u4e24\u4e2a\u7ec4\u4ef6\u7684\u529f\u80fd\u4e0e\u5176\u4ed6\u97f3\u9891\u901a\u9053\u4e00\u81f4, \u552f\u4e00\u533a\u522b\u5728\u4e8e LFSR: LFSR \u8fde\u63a5\u5728\u97f3\u91cf\u5305\u7edc\u4e4b\u540e, \u5b83\u53ef\u4ee5\u751f\u6210\u4e00\u8fde\u4e32 0, 1 \u5e8f\u5217, \u5982\u679c\u5f53\u524d\u751f\u6210\u7684\u662f 0, \u5219\u5c4f\u853d\u97f3\u91cf\u5305\u7edc\u7684\u8f93\u51fa; \u5982\u679c\u5f53\u524d\u751f\u6210\u7684\u662f 1, \u5219\u6b63\u5e38\u653e\u884c\u97f3\u91cf\u5305\u7edc\u7684\u8f93\u51fa. LFSR \u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u662f\u6307\u7ed9\u5b9a\u524d\u4e00\u72b6\u6001\u7684\u8f93\u51fa, \u5c06\u8be5\u8f93\u51fa\u7684\u7ebf\u6027\u51fd\u6570\u518d\u7528\u4f5c\u8f93\u5165\u7684\u79fb\u4f4d\u5bc4\u5b58\u5668. \u5f02\u6216\u8fd0\u7b97\u662f\u6700\u5e38\u89c1\u7684\u5355\u6bd4\u7279\u7ebf\u6027\u51fd\u6570: \u5bf9\u5bc4\u5b58\u5668\u7684\u67d0\u4e9b\u4f4d\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c\u540e\u4f5c\u4e3a\u8f93\u5165, \u518d\u5bf9\u5bc4\u5b58\u5668\u4e2d\u7684\u5404\u6bd4\u7279\u8fdb\u884c\u6574\u4f53\u79fb\u4f4d. \u8d4b\u7ed9\u5bc4\u5b58\u5668\u7684\u521d\u59cb\u503c\u53eb\u505a \"\u79cd\u5b50\", \u56e0\u4e3a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u8fd0\u7b97\u662f\u786e\u5b9a\u6027\u7684, \u6240\u4ee5, \u7531\u5bc4\u5b58\u5668\u6240\u751f\u6210\u7684\u6570\u636e\u6d41\u5b8c\u5168\u51b3\u5b9a\u4e8e\u5bc4\u5b58\u5668\u5f53\u65f6\u6216\u8005\u4e4b\u524d\u7684\u72b6\u6001. \u800c\u4e14, \u7531\u4e8e\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u662f\u6709\u9650\u7684, \u5b83\u6700\u7ec8\u80af\u5b9a\u4f1a\u662f\u4e00\u4e2a\u91cd\u590d\u7684\u5faa\u73af. \u7136\u800c, \u901a\u8fc7\u672c\u539f\u591a\u9879\u5f0f, \u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u53ef\u4ee5\u751f\u6210\u770b\u8d77\u6765\u662f\u968f\u673a\u7684\u4e14\u5faa\u73af\u5468\u671f\u975e\u5e38\u957f\u7684\u5e8f\u5217. \u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u5e94\u7528\u5305\u62ec\u751f\u6210\u4f2a\u968f\u673a\u6570, \u4f2a\u968f\u673a\u566a\u58f0\u5e8f\u5217, \u5feb\u901f\u6570\u5b57\u8ba1\u6570\u5668, \u8fd8\u6709\u6270\u9891\u5668. \u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u5728\u786c\u4ef6\u548c\u8f6f\u4ef6\u65b9\u9762\u7684\u5e94\u7528\u90fd\u975e\u5e38\u5f97\u666e\u904d. Game Boy \u7684 LFSR \u53ef\u4ee5\u751f\u6210\u4f2a\u968f\u673a\u7684\u6bd4\u7279\u5e8f\u5217, \u5b83\u6709\u4e00\u4e2a\u5e26\u53cd\u9988\u7684 15 \u4f4d\u79fb\u4f4d\u5bc4\u5b58\u5668. \u5f53\u566a\u97f3\u901a\u9053\u7684\u5b9a\u65f6\u5668\u751f\u6210\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7\u65f6, LFSR \u4f4e\u4e24\u4f4d\uff080 \u548c 1\uff09\u88ab\u5f02\u6216, \u5e76\u4e14\u6240\u6709\u6bd4\u7279\u4f4d\u53f3\u79fb\u4e00\u4f4d, \u540c\u65f6\u5f02\u6216\u7684\u7ed3\u679c\u88ab\u653e\u5165\u73b0\u5728\u4e3a\u7a7a\u7684\u9ad8\u4f4d. \u5982\u679c\u5bbd\u5ea6\u6a21\u5f0f\u4e3a 1(\u7531 NR43 \u5bc4\u5b58\u5668\u51b3\u5b9a), \u5219\u5728\u79fb\u4f4d\u540e, \u5f02\u6216\u7ed3\u679c\u4e5f\u4f1a\u8fdb\u5165\u7b2c 6 \u6bd4\u7279\u4f4d, \u4ece\u800c\u4ea7\u751f 7 \u4f4d\u5bbd\u5ea6\u7684 LFSR. LFSR \u7684\u7b2c 0 \u4f4d\u7684\u53d6\u53cd\u5c06\u53c2\u4e0e\u6700\u7ec8\u6ce2\u5f62\u7684\u8ba1\u7b97. FF20 \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 5-0 Sound length \u58f0\u97f3\u957f\u5ea6 \u7528\u4e8e\u957f\u5ea6\u8ba1\u6570\u5668(LengthCounter)\u8ba1\u6570\u7684\u521d\u59cb\u503c. \u5f53 NR44 \u7684\u7b2c 6 \u4f4d\u88ab\u8bbe\u7f6e\u4e3a 1 \u65f6, \u957f\u5ea6\u8ba1\u6570\u5668\u5c06\u52a0\u8f7d Sound Length. FF21 \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7-4 Initial Volume of envelope \u8303\u56f4\u4e3a(00-0F) (0=No Sound) Bit 3 Envelope Direction 0: \u51cf\u5c11, 1: \u589e\u52a0 Bit 2-0 Number of envelope sweep \u8303\u56f4 0-7, \u5982\u679c\u662f 0, \u5219\u505c\u6b62\u97f3\u91cf\u5305\u7edc FF22 \u5728\u7ed9\u5b9a\u9891\u7387\u4e0b, \u58f0\u6ce2\u632f\u5e45\u5728\u9ad8\u548c\u4f4e\u4e4b\u95f4\u968f\u673a\u5207\u6362. \u8f83\u9ad8\u7684\u9891\u7387\u5c06\u4f7f\u566a\u58f0\u663e\u5f97 \"\u66f4\u67d4\u548c\". \u5f53 Bit 3 \u88ab\u8bbe\u7f6e\u65f6, \u8f93\u51fa\u5c06\u53d8\u5f97\u66f4\u52a0\u89c4\u5219, \u5e76\u4e14\u67d0\u4e9b\u9891\u7387\u542c\u8d77\u6765\u66f4\u50cf \"\u97f3\u8c03\" \u800c\u4e0d\u662f \"\u566a\u58f0\". \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7-4 Shift Clock Frequency \u548c Dividing Ratio of Frequencies \u4e00\u8d77\u51b3\u5b9a\u65f6\u949f\u9891\u7387 Bit 3 Counter Step/Width LSFR \u5bbd\u5ea6\u6a21\u5f0f Bit 2-0 Dividing Ratio of Frequencies \u548c Shift Clock Frequency \u4e00\u8d77\u51b3\u5b9a\u65f6\u949f\u9891\u7387 \u767d\u566a\u58f0\u901a\u9053\u5b9a\u65f6\u5668\u7684\u5468\u671f\u8ba1\u7b97\u516c\u5f0f\u4e3a: let d = match reg.borrow().get_dividor_code() { // Dividing Ratio of Frequencies 0 => 8, n => (u32::from(n) + 1) * 16, }; d << reg.borrow().get_clock_shift() // Shift Clock Frequency LSFR \u7684\u5bbd\u5ea6\u6709\u4e24\u79cd\u53ef\u80fd\u503c, \u5176\u7531 Counter Step/Width \u63a7\u5236. \u5f53\u4e3a 1 \u65f6, \u5bbd\u5ea6\u662f 0x06; \u5f53\u4e3a 0 \u65f6, \u5bbd\u5ea6\u662f 0x0e. FF23 \u4e0e\u5176\u4ed6\u97f3\u9891\u901a\u9053\u7684\u6700\u540e\u4e00\u4e2a\u5bc4\u5b58\u5668\u6548\u679c\u4e00\u6837, \u533a\u522b\u5728\u4e8e\u8be5\u5bc4\u5b58\u5668\u7684\u4f4e 3 \u4f4d\u4e0d\u518d\u8868\u793a \"\u9891\u7387\u7684\u9ad8 3 \u4f4d\". \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7 Initial \u5199\u5165 1, \u5219\u91cd\u542f\u97f3\u9891\u7cfb\u7edf Bit 6 Counter/consecutive selection \u5199\u5165 1, \u5219\u957f\u5ea6\u8ba1\u6570\u5668\u5230\u671f\u540e\u505c\u6b62\u8f93\u51fa \u4ee3\u7801\u5b9e\u73b0 \u5728\u5b9e\u73b0 LFSR \u7684\u65f6\u5019, \u6211\u7a0d\u5fae\u4fee\u6539\u4e86\u4e00\u4e0b\u5b9e\u73b0\u7684\u903b\u8f91: \u539f\u6587\u6863\u4e2d\u5bc4\u5b58\u5668\u662f\u4f4e\u4f4d\u5f02\u6216, \u7136\u540e\u53f3\u79fb; \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d, \u91c7\u7528\u7684\u9ad8\u4f4d\u5f02\u6216\u5e76\u4e14\u5de6\u79fb. \u91c7\u7528\u7b2c\u4e8c\u79cd\u65b9\u6848, \u4ee3\u7801\u7684\u5b9e\u73b0\u4f1a\u7a0d\u5fae\u7b80\u6d01\u4e00\u70b9. // The linear feedback shift register (LFSR) generates a pseudo-random bit sequence. It has a 15-bit shift register // with feedback. When clocked by the frequency timer, the low two bits (0 and 1) are XORed, all bits are shifted right // by one, and the result of the XOR is put into the now-empty high bit. If width mode is 1 (NR43), the XOR result is // ALSO put into bit 6 AFTER the shift, resulting in a 7-bit LFSR. The waveform output is bit 0 of the LFSR, INVERTED. struct Lfsr { reg: Rc<RefCell<Register>>, n: u16, } impl Lfsr { fn power_up(reg: Rc<RefCell<Register>>) -> Self { Self { reg, n: 0x0001 } } fn next(&mut self) -> bool { let s = if self.reg.borrow().get_width_mode_of_lfsr() { 0x06 } else { 0x0e }; let src = self.n; self.n <<= 1; let bit = ((src >> s) ^ (self.n >> s)) & 0x0001; self.n |= bit; (src >> s) & 0x0001 != 0x0000 } fn reload(&mut self) { self.n = 0x0001 } } \u8865\u5b8c\u566a\u97f3\u901a\u9053\u7684\u4ee3\u7801: struct ChannelNoise { reg: Rc<RefCell<Register>>, timer: Timer, lc: LengthCounter, ve: VolumeEnvelope, lfsr: Lfsr, blip: Blip, } impl ChannelNoise { fn power_up(blip: BlipBuf) -> ChannelNoise { let reg = Rc::new(RefCell::new(Register::power_up(Channel::Noise))); ChannelNoise { reg: reg.clone(), timer: Timer::power_up(4096), lc: LengthCounter::power_up(reg.clone()), ve: VolumeEnvelope::power_up(reg.clone()), lfsr: Lfsr::power_up(reg.clone()), blip: Blip::power_up(blip), } } fn next(&mut self, cycles: u32) { for _ in 0..self.timer.next(cycles) { let ampl = if !self.reg.borrow().get_trigger() || self.ve.volume == 0 { 0x00 } else if self.lfsr.next() { i32::from(self.ve.volume) } else { i32::from(self.ve.volume) * -1 }; self.blip.set(self.blip.from + self.timer.period, ampl); } } } impl Memory for ChannelNoise { fn get(&self, a: u16) -> u8 { match a { 0xff1f => self.reg.borrow().nrx0, 0xff20 => self.reg.borrow().nrx1, 0xff21 => self.reg.borrow().nrx2, 0xff22 => self.reg.borrow().nrx3, 0xff23 => self.reg.borrow().nrx4, _ => unreachable!(), } } fn set(&mut self, a: u16, v: u8) { match a { 0xff1f => self.reg.borrow_mut().nrx0 = v, 0xff20 => { self.reg.borrow_mut().nrx1 = v; self.lc.n = self.reg.borrow().get_length_load(); } 0xff21 => self.reg.borrow_mut().nrx2 = v, 0xff22 => { self.reg.borrow_mut().nrx3 = v; self.timer.period = period(self.reg.clone()); } 0xff23 => { self.reg.borrow_mut().nrx4 = v; if self.reg.borrow().get_trigger() { self.lc.reload(); self.ve.reload(); self.lfsr.reload(); } } _ => unreachable!(), } } }","title":"GB-\u97f3\u9891-\u767d\u566a\u97f3\u901a\u9053"},{"location":"content/gameboy/audio/noise/#_1","text":"\u566a\u97f3\u901a\u9053\u901a\u5e38\u7528\u4e8e\u53d1\u51fa\u4e00\u4e9b \"\u65e0\u89c4\u5219\u7684\u566a\u97f3\". \u65e9\u671f\u7684\u6e38\u620f\u4e3b\u673a\u7a7a\u95f4\u65e2\u5c0f\u53c8\u6602\u8d35, \u901a\u8fc7\u566a\u97f3\u901a\u9053\u6a21\u62df\u7206\u70b8\u58f0\u6216\u6e38\u620f\u80cc\u666f\u97f3 \"\u55e1\u55e1\" \u58f0, \u662f\u975e\u5e38\u5e38\u89c1\u7684\u4e00\u79cd\u505a\u6cd5. \u566a\u97f3\u901a\u9053\u7ed3\u6784\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u7ec4\u6210, \u5206\u522b\u662f\u957f\u5ea6\u8ba1\u6570\u5668, \u97f3\u91cf\u5305\u7edc\u548c\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668(Linear feedback shift register, LFSR). \u524d\u4e24\u4e2a\u7ec4\u4ef6\u7684\u529f\u80fd\u4e0e\u5176\u4ed6\u97f3\u9891\u901a\u9053\u4e00\u81f4, \u552f\u4e00\u533a\u522b\u5728\u4e8e LFSR: LFSR \u8fde\u63a5\u5728\u97f3\u91cf\u5305\u7edc\u4e4b\u540e, \u5b83\u53ef\u4ee5\u751f\u6210\u4e00\u8fde\u4e32 0, 1 \u5e8f\u5217, \u5982\u679c\u5f53\u524d\u751f\u6210\u7684\u662f 0, \u5219\u5c4f\u853d\u97f3\u91cf\u5305\u7edc\u7684\u8f93\u51fa; \u5982\u679c\u5f53\u524d\u751f\u6210\u7684\u662f 1, \u5219\u6b63\u5e38\u653e\u884c\u97f3\u91cf\u5305\u7edc\u7684\u8f93\u51fa.","title":"\u767d\u566a\u97f3\u901a\u9053"},{"location":"content/gameboy/audio/noise/#lfsr","text":"\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u662f\u6307\u7ed9\u5b9a\u524d\u4e00\u72b6\u6001\u7684\u8f93\u51fa, \u5c06\u8be5\u8f93\u51fa\u7684\u7ebf\u6027\u51fd\u6570\u518d\u7528\u4f5c\u8f93\u5165\u7684\u79fb\u4f4d\u5bc4\u5b58\u5668. \u5f02\u6216\u8fd0\u7b97\u662f\u6700\u5e38\u89c1\u7684\u5355\u6bd4\u7279\u7ebf\u6027\u51fd\u6570: \u5bf9\u5bc4\u5b58\u5668\u7684\u67d0\u4e9b\u4f4d\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c\u540e\u4f5c\u4e3a\u8f93\u5165, \u518d\u5bf9\u5bc4\u5b58\u5668\u4e2d\u7684\u5404\u6bd4\u7279\u8fdb\u884c\u6574\u4f53\u79fb\u4f4d. \u8d4b\u7ed9\u5bc4\u5b58\u5668\u7684\u521d\u59cb\u503c\u53eb\u505a \"\u79cd\u5b50\", \u56e0\u4e3a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u8fd0\u7b97\u662f\u786e\u5b9a\u6027\u7684, \u6240\u4ee5, \u7531\u5bc4\u5b58\u5668\u6240\u751f\u6210\u7684\u6570\u636e\u6d41\u5b8c\u5168\u51b3\u5b9a\u4e8e\u5bc4\u5b58\u5668\u5f53\u65f6\u6216\u8005\u4e4b\u524d\u7684\u72b6\u6001. \u800c\u4e14, \u7531\u4e8e\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u662f\u6709\u9650\u7684, \u5b83\u6700\u7ec8\u80af\u5b9a\u4f1a\u662f\u4e00\u4e2a\u91cd\u590d\u7684\u5faa\u73af. \u7136\u800c, \u901a\u8fc7\u672c\u539f\u591a\u9879\u5f0f, \u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u53ef\u4ee5\u751f\u6210\u770b\u8d77\u6765\u662f\u968f\u673a\u7684\u4e14\u5faa\u73af\u5468\u671f\u975e\u5e38\u957f\u7684\u5e8f\u5217. \u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u5e94\u7528\u5305\u62ec\u751f\u6210\u4f2a\u968f\u673a\u6570, \u4f2a\u968f\u673a\u566a\u58f0\u5e8f\u5217, \u5feb\u901f\u6570\u5b57\u8ba1\u6570\u5668, \u8fd8\u6709\u6270\u9891\u5668. \u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u5728\u786c\u4ef6\u548c\u8f6f\u4ef6\u65b9\u9762\u7684\u5e94\u7528\u90fd\u975e\u5e38\u5f97\u666e\u904d. Game Boy \u7684 LFSR \u53ef\u4ee5\u751f\u6210\u4f2a\u968f\u673a\u7684\u6bd4\u7279\u5e8f\u5217, \u5b83\u6709\u4e00\u4e2a\u5e26\u53cd\u9988\u7684 15 \u4f4d\u79fb\u4f4d\u5bc4\u5b58\u5668. \u5f53\u566a\u97f3\u901a\u9053\u7684\u5b9a\u65f6\u5668\u751f\u6210\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7\u65f6, LFSR \u4f4e\u4e24\u4f4d\uff080 \u548c 1\uff09\u88ab\u5f02\u6216, \u5e76\u4e14\u6240\u6709\u6bd4\u7279\u4f4d\u53f3\u79fb\u4e00\u4f4d, \u540c\u65f6\u5f02\u6216\u7684\u7ed3\u679c\u88ab\u653e\u5165\u73b0\u5728\u4e3a\u7a7a\u7684\u9ad8\u4f4d. \u5982\u679c\u5bbd\u5ea6\u6a21\u5f0f\u4e3a 1(\u7531 NR43 \u5bc4\u5b58\u5668\u51b3\u5b9a), \u5219\u5728\u79fb\u4f4d\u540e, \u5f02\u6216\u7ed3\u679c\u4e5f\u4f1a\u8fdb\u5165\u7b2c 6 \u6bd4\u7279\u4f4d, \u4ece\u800c\u4ea7\u751f 7 \u4f4d\u5bbd\u5ea6\u7684 LFSR. LFSR \u7684\u7b2c 0 \u4f4d\u7684\u53d6\u53cd\u5c06\u53c2\u4e0e\u6700\u7ec8\u6ce2\u5f62\u7684\u8ba1\u7b97.","title":"LFSR"},{"location":"content/gameboy/audio/noise/#ff20","text":"\u4f4d \u540d\u79f0 \u8bf4\u660e Bit 5-0 Sound length \u58f0\u97f3\u957f\u5ea6 \u7528\u4e8e\u957f\u5ea6\u8ba1\u6570\u5668(LengthCounter)\u8ba1\u6570\u7684\u521d\u59cb\u503c. \u5f53 NR44 \u7684\u7b2c 6 \u4f4d\u88ab\u8bbe\u7f6e\u4e3a 1 \u65f6, \u957f\u5ea6\u8ba1\u6570\u5668\u5c06\u52a0\u8f7d Sound Length.","title":"FF20"},{"location":"content/gameboy/audio/noise/#ff21","text":"\u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7-4 Initial Volume of envelope \u8303\u56f4\u4e3a(00-0F) (0=No Sound) Bit 3 Envelope Direction 0: \u51cf\u5c11, 1: \u589e\u52a0 Bit 2-0 Number of envelope sweep \u8303\u56f4 0-7, \u5982\u679c\u662f 0, \u5219\u505c\u6b62\u97f3\u91cf\u5305\u7edc","title":"FF21"},{"location":"content/gameboy/audio/noise/#ff22","text":"\u5728\u7ed9\u5b9a\u9891\u7387\u4e0b, \u58f0\u6ce2\u632f\u5e45\u5728\u9ad8\u548c\u4f4e\u4e4b\u95f4\u968f\u673a\u5207\u6362. \u8f83\u9ad8\u7684\u9891\u7387\u5c06\u4f7f\u566a\u58f0\u663e\u5f97 \"\u66f4\u67d4\u548c\". \u5f53 Bit 3 \u88ab\u8bbe\u7f6e\u65f6, \u8f93\u51fa\u5c06\u53d8\u5f97\u66f4\u52a0\u89c4\u5219, \u5e76\u4e14\u67d0\u4e9b\u9891\u7387\u542c\u8d77\u6765\u66f4\u50cf \"\u97f3\u8c03\" \u800c\u4e0d\u662f \"\u566a\u58f0\". \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7-4 Shift Clock Frequency \u548c Dividing Ratio of Frequencies \u4e00\u8d77\u51b3\u5b9a\u65f6\u949f\u9891\u7387 Bit 3 Counter Step/Width LSFR \u5bbd\u5ea6\u6a21\u5f0f Bit 2-0 Dividing Ratio of Frequencies \u548c Shift Clock Frequency \u4e00\u8d77\u51b3\u5b9a\u65f6\u949f\u9891\u7387 \u767d\u566a\u58f0\u901a\u9053\u5b9a\u65f6\u5668\u7684\u5468\u671f\u8ba1\u7b97\u516c\u5f0f\u4e3a: let d = match reg.borrow().get_dividor_code() { // Dividing Ratio of Frequencies 0 => 8, n => (u32::from(n) + 1) * 16, }; d << reg.borrow().get_clock_shift() // Shift Clock Frequency LSFR \u7684\u5bbd\u5ea6\u6709\u4e24\u79cd\u53ef\u80fd\u503c, \u5176\u7531 Counter Step/Width \u63a7\u5236. \u5f53\u4e3a 1 \u65f6, \u5bbd\u5ea6\u662f 0x06; \u5f53\u4e3a 0 \u65f6, \u5bbd\u5ea6\u662f 0x0e.","title":"FF22"},{"location":"content/gameboy/audio/noise/#ff23","text":"\u4e0e\u5176\u4ed6\u97f3\u9891\u901a\u9053\u7684\u6700\u540e\u4e00\u4e2a\u5bc4\u5b58\u5668\u6548\u679c\u4e00\u6837, \u533a\u522b\u5728\u4e8e\u8be5\u5bc4\u5b58\u5668\u7684\u4f4e 3 \u4f4d\u4e0d\u518d\u8868\u793a \"\u9891\u7387\u7684\u9ad8 3 \u4f4d\". \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7 Initial \u5199\u5165 1, \u5219\u91cd\u542f\u97f3\u9891\u7cfb\u7edf Bit 6 Counter/consecutive selection \u5199\u5165 1, \u5219\u957f\u5ea6\u8ba1\u6570\u5668\u5230\u671f\u540e\u505c\u6b62\u8f93\u51fa","title":"FF23"},{"location":"content/gameboy/audio/noise/#_2","text":"\u5728\u5b9e\u73b0 LFSR \u7684\u65f6\u5019, \u6211\u7a0d\u5fae\u4fee\u6539\u4e86\u4e00\u4e0b\u5b9e\u73b0\u7684\u903b\u8f91: \u539f\u6587\u6863\u4e2d\u5bc4\u5b58\u5668\u662f\u4f4e\u4f4d\u5f02\u6216, \u7136\u540e\u53f3\u79fb; \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d, \u91c7\u7528\u7684\u9ad8\u4f4d\u5f02\u6216\u5e76\u4e14\u5de6\u79fb. \u91c7\u7528\u7b2c\u4e8c\u79cd\u65b9\u6848, \u4ee3\u7801\u7684\u5b9e\u73b0\u4f1a\u7a0d\u5fae\u7b80\u6d01\u4e00\u70b9. // The linear feedback shift register (LFSR) generates a pseudo-random bit sequence. It has a 15-bit shift register // with feedback. When clocked by the frequency timer, the low two bits (0 and 1) are XORed, all bits are shifted right // by one, and the result of the XOR is put into the now-empty high bit. If width mode is 1 (NR43), the XOR result is // ALSO put into bit 6 AFTER the shift, resulting in a 7-bit LFSR. The waveform output is bit 0 of the LFSR, INVERTED. struct Lfsr { reg: Rc<RefCell<Register>>, n: u16, } impl Lfsr { fn power_up(reg: Rc<RefCell<Register>>) -> Self { Self { reg, n: 0x0001 } } fn next(&mut self) -> bool { let s = if self.reg.borrow().get_width_mode_of_lfsr() { 0x06 } else { 0x0e }; let src = self.n; self.n <<= 1; let bit = ((src >> s) ^ (self.n >> s)) & 0x0001; self.n |= bit; (src >> s) & 0x0001 != 0x0000 } fn reload(&mut self) { self.n = 0x0001 } } \u8865\u5b8c\u566a\u97f3\u901a\u9053\u7684\u4ee3\u7801: struct ChannelNoise { reg: Rc<RefCell<Register>>, timer: Timer, lc: LengthCounter, ve: VolumeEnvelope, lfsr: Lfsr, blip: Blip, } impl ChannelNoise { fn power_up(blip: BlipBuf) -> ChannelNoise { let reg = Rc::new(RefCell::new(Register::power_up(Channel::Noise))); ChannelNoise { reg: reg.clone(), timer: Timer::power_up(4096), lc: LengthCounter::power_up(reg.clone()), ve: VolumeEnvelope::power_up(reg.clone()), lfsr: Lfsr::power_up(reg.clone()), blip: Blip::power_up(blip), } } fn next(&mut self, cycles: u32) { for _ in 0..self.timer.next(cycles) { let ampl = if !self.reg.borrow().get_trigger() || self.ve.volume == 0 { 0x00 } else if self.lfsr.next() { i32::from(self.ve.volume) } else { i32::from(self.ve.volume) * -1 }; self.blip.set(self.blip.from + self.timer.period, ampl); } } } impl Memory for ChannelNoise { fn get(&self, a: u16) -> u8 { match a { 0xff1f => self.reg.borrow().nrx0, 0xff20 => self.reg.borrow().nrx1, 0xff21 => self.reg.borrow().nrx2, 0xff22 => self.reg.borrow().nrx3, 0xff23 => self.reg.borrow().nrx4, _ => unreachable!(), } } fn set(&mut self, a: u16, v: u8) { match a { 0xff1f => self.reg.borrow_mut().nrx0 = v, 0xff20 => { self.reg.borrow_mut().nrx1 = v; self.lc.n = self.reg.borrow().get_length_load(); } 0xff21 => self.reg.borrow_mut().nrx2 = v, 0xff22 => { self.reg.borrow_mut().nrx3 = v; self.timer.period = period(self.reg.clone()); } 0xff23 => { self.reg.borrow_mut().nrx4 = v; if self.reg.borrow().get_trigger() { self.lc.reload(); self.ve.reload(); self.lfsr.reload(); } } _ => unreachable!(), } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/audio/overview/","text":"\u81ea 20 \u4e16\u7eaa 80 \u5e74\u4ee3\u5230 20 \u4e16\u7eaa\u672b\u4e3a\u6b62, \u8bb8\u591a\u6e38\u620f\u673a\u7684\u97f3\u6548\u4e0e\u97f3\u4e50\u90fd\u9700\u8981\u4f9d\u9760\u5408\u6210\u5668\u82af\u7247\u6765\u5236\u4f5c, \u540c\u6837\u7684\u4e00\u6bb5\u6570\u636e\u5728\u4e0d\u540c\u7684\u82af\u7247\u4e0a\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u4e00\u6837\u7684\u58f0\u97f3. \u5f53\u65f6\u79d1\u6280\u7684\u5c40\u9650\u6027\u5f71\u54cd\u4e86\u6e38\u620f\u97f3\u4e50\u7684\u521b\u4f5c, \u6bd4\u5982\u9f13\u58f0\u6bd4\u8f83\u96be\u83b7\u5f97, \u53ea\u80fd\u901a\u8fc7\u77ed\u65f6\u95f4\u4fe1\u53f7, \u8109\u51b2\u6216\u662f\u7206\u70b8\u566a\u58f0\u6765\u6a21\u62df. \u73b0\u5728\u901a\u5e38\u79f0\u547c\u8fd9\u79cd\u97f3\u4e50\u4e3a 8bit \u97f3\u4e50, \u5176\u7279\u6709\u7684\u7c97\u7cd9\u548c\u751f\u786c\u7684\u97f3\u6548, \u4e0e\u9ad8\u6bd4\u7279\u7387\u97f3\u4e50\u5e26\u6765\u7684\u5e73\u6ed1\u7ec6\u817b\u7684\u58f0\u97f3\u5f62\u6210\u4e86\u9c9c\u660e\u7684\u5bf9\u6bd4. 8bit \u97f3\u4e50\u6700\u521d\u8d77\u6e90\u4e8e\u65e5\u672c, \u4e00\u540d\u6765\u81ea\u5173\u897f\u53eb\u505a\u897f\u89d2\u53cb\u5b8f\u7684\u5e74\u8f7b\u4eba\u5728 1978 \u5e74, \u7531\u4ed6\u6240\u8bbe\u8ba1\u7684\u8857\u673a\u6e38\u620f\u300a\u592a\u7a7a\u4fb5\u7565\u8005\u300b\u6210\u4e3a\u4e86\u7b2c\u4e00\u6b3e\u5177\u6709\u80cc\u666f\u97f3\u8f68\u7684\u6e38\u620f. \u5b83\u603b\u5171\u53ea\u6709\u5927\u7ea6 10 \u4e2a\u97f3\u6548, \u4f46\u8fd9\u4e9b\u97f3\u6548\u6216\u591a\u6216\u5c11\u4e3a\u6e38\u620f\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6c1b\u56f4\u611f. \u7531\u4e8e\u300a\u592a\u7a7a\u4fb5\u7565\u8005\u300b\u53d6\u5f97\u7684\u5de8\u5927\u6210\u529f, \u5728\u5b83\u4e4b\u540e\u7684\u8bb8\u591a\u6e38\u620f\u4e0e\u6e38\u620f\u673a\u90fd\u52a0\u5165\u4e86 8bit \u97f3\u4e50\u4e0e 8bit \u97f3\u4e50\u82af\u7247, \u5e76\u4e14\u4e5f\u76f4\u63a5\u5f71\u54cd\u4e86\u540e\u6765\u7684 Game Boy \u6e38\u620f\u673a. \u5728\u672c\u7ae0\u8282\u4e2d\u5c06\u63a2\u7a76 Game Boy \u7684\u97f3\u9891\u7cfb\u7edf, \u5e76\u6700\u7ec8\u5b9e\u73b0\u97f3\u9891\u7cfb\u7edf\u7684\u4eff\u771f.","title":"GB-\u97f3\u9891-\u6982\u89c8"},{"location":"content/gameboy/audio/play/","text":"\u5728\u8ba1\u7b97\u673a\u4e0a\u64ad\u653e \u73b0\u5728\u6211\u4eec\u62ff\u5230\u4e86\u6700\u7ec8\u7684\u97f3\u9891\u6570\u636e, \u6700\u540e\u4e00\u6b65\u662f\u901a\u8fc7\u524d\u9762\u63d0\u5230\u7684 cpal \u5e93\u6765\u5b9e\u9645\u5728\u4f60\u7684\u7535\u8111\u4e0a\u64ad\u653e\u8fd9\u4e9b\u6570\u636e. \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\u4e86\u5982\u4f55\u64ad\u653e\u8fd9\u4e9b\u6570\u636e. \u4ee3\u7801\u5b9e\u73b0 let device = cpal::default_output_device().unwrap(); let format = device.default_output_format().unwrap(); let format = cpal::Format { channels: 2, sample_rate: format.sample_rate, data_type: cpal::SampleFormat::F32, }; let event_loop = cpal::EventLoop::new(); let stream_id = event_loop.build_output_stream(&device, &format).unwrap(); event_loop.play_stream(stream_id); let apu = Apu::power_up(format.sample_rate.0); let apu_data = apu.buffer.clone(); mbrd.mmu.borrow_mut().apu = Some(apu); thread::spawn(move || { event_loop.run(move |_, stream_data| { let mut apu_data = apu_data.lock().unwrap(); if let cpal::StreamData::Output { buffer } = stream_data { let len = cmp::min(buffer.len() / 2, apu_data.len()); match buffer { cpal::UnknownTypeOutputBuffer::F32(mut buffer) => { for (i, (data_l, data_r)) in apu_data.drain(..len).enumerate() { buffer[i * 2] = data_l; buffer[i * 2 + 1] = data_r; } } cpal::UnknownTypeOutputBuffer::U16(mut buffer) => { for (i, (data_l, data_r)) in apu_data.drain(..len).enumerate() { buffer[i * 2] = (data_l * f32::from(std::i16::MAX) + f32::from(std::u16::MAX) / 2.0) as u16; buffer[i * 2 + 1] = (data_r * f32::from(std::i16::MAX) + f32::from(std::u16::MAX) / 2.0) as u16; } } cpal::UnknownTypeOutputBuffer::I16(mut buffer) => { for (i, (data_l, data_r)) in apu_data.drain(..len).enumerate() { buffer[i * 2] = (data_l * f32::from(std::i16::MAX)) as i16; buffer[i * 2 + 1] = (data_r * f32::from(std::i16::MAX)) as i16; } } } } }); }); \u8bfb\u8005\u53ef\u81ea\u884c\u5c06\u76f8\u5173\u4ee3\u7801\u8865\u5145\u5230 main \u51fd\u6570\u4e2d.","title":"GB-\u97f3\u9891-\u5728\u8ba1\u7b97\u673a\u4e0a\u64ad\u653e"},{"location":"content/gameboy/audio/play/#_1","text":"\u73b0\u5728\u6211\u4eec\u62ff\u5230\u4e86\u6700\u7ec8\u7684\u97f3\u9891\u6570\u636e, \u6700\u540e\u4e00\u6b65\u662f\u901a\u8fc7\u524d\u9762\u63d0\u5230\u7684 cpal \u5e93\u6765\u5b9e\u9645\u5728\u4f60\u7684\u7535\u8111\u4e0a\u64ad\u653e\u8fd9\u4e9b\u6570\u636e. \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\u4e86\u5982\u4f55\u64ad\u653e\u8fd9\u4e9b\u6570\u636e.","title":"\u5728\u8ba1\u7b97\u673a\u4e0a\u64ad\u653e"},{"location":"content/gameboy/audio/play/#_2","text":"let device = cpal::default_output_device().unwrap(); let format = device.default_output_format().unwrap(); let format = cpal::Format { channels: 2, sample_rate: format.sample_rate, data_type: cpal::SampleFormat::F32, }; let event_loop = cpal::EventLoop::new(); let stream_id = event_loop.build_output_stream(&device, &format).unwrap(); event_loop.play_stream(stream_id); let apu = Apu::power_up(format.sample_rate.0); let apu_data = apu.buffer.clone(); mbrd.mmu.borrow_mut().apu = Some(apu); thread::spawn(move || { event_loop.run(move |_, stream_data| { let mut apu_data = apu_data.lock().unwrap(); if let cpal::StreamData::Output { buffer } = stream_data { let len = cmp::min(buffer.len() / 2, apu_data.len()); match buffer { cpal::UnknownTypeOutputBuffer::F32(mut buffer) => { for (i, (data_l, data_r)) in apu_data.drain(..len).enumerate() { buffer[i * 2] = data_l; buffer[i * 2 + 1] = data_r; } } cpal::UnknownTypeOutputBuffer::U16(mut buffer) => { for (i, (data_l, data_r)) in apu_data.drain(..len).enumerate() { buffer[i * 2] = (data_l * f32::from(std::i16::MAX) + f32::from(std::u16::MAX) / 2.0) as u16; buffer[i * 2 + 1] = (data_r * f32::from(std::i16::MAX) + f32::from(std::u16::MAX) / 2.0) as u16; } } cpal::UnknownTypeOutputBuffer::I16(mut buffer) => { for (i, (data_l, data_r)) in apu_data.drain(..len).enumerate() { buffer[i * 2] = (data_l * f32::from(std::i16::MAX)) as i16; buffer[i * 2 + 1] = (data_r * f32::from(std::i16::MAX)) as i16; } } } } }); }); \u8bfb\u8005\u53ef\u81ea\u884c\u5c06\u76f8\u5173\u4ee3\u7801\u8865\u5145\u5230 main \u51fd\u6570\u4e2d.","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/audio/register/","text":"\u5bc4\u5b58\u5668 \u58f0\u97f3\u5bc4\u5b58\u5668\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u7684 0xff10 \u5230 0xff3f \u5730\u5740. \u6bcf\u4e2a\u97f3\u9891\u901a\u9053\u5747\u6709\u4e94\u4e2a\u903b\u8f91\u5bc4\u5b58\u5668, \u4f9d\u6b21\u547d\u540d\u4e3a NRx0 \u5230 NRx4, \u4f46\u6709\u4e9b\u901a\u9053\u53ef\u80fd\u4e0d\u4f1a\u4f7f\u7528 NRx0 \u5bc4\u5b58\u5668. \u6bcf\u4e2a\u5bc4\u5b58\u5668\u5747\u662f 8 \u4f4d\u5927\u5c0f, \u5b83\u7684 8 \u4e2a bit \u901a\u5e38\u88ab\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u4f4d\u6bb5, \u88ab\u4e0d\u540c\u7684\u903b\u8f91\u7a0b\u5e8f\u6216\u7535\u8def\u6240\u4f7f\u7528. \u4e0b\u8868\u5c55\u793a\u4e86\u6bcf\u4e2a\u5bc4\u5b58\u5668\u5728\u4e0d\u540c\u97f3\u9891\u901a\u9053\u4e2d\u7684\u4f5c\u7528. \u6807\u6709 \"-\" \u7684\u4f4d\u7684\u503c\u6ca1\u6709\u5b9e\u9645\u4f5c\u7528. \u5bf9\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u7684\u5f15\u7528\u610f\u5473\u7740\u5199\u5165\u7684\u6700\u540e\u4e00\u4e2a\u503c, \u5373\u867d\u7136 \"-\" \u4f4d\u4e0d\u4f1a\u88ab\u4f7f\u7528, \u4f46\u4f9d\u7136\u80fd\u88ab\u6b63\u5e38\u8bfb\u53d6. ----------------------------------------------------------------- Square 1 NR10 FF10 -PPP NSSS Sweep period, negate, shift NR11 FF11 DDLL LLLL Duty, Length load (64-L) NR12 FF12 VVVV APPP Starting volume, Envelope add mode, period NR13 FF13 FFFF FFFF Frequency LSB NR14 FF14 TL-- -FFF Trigger, Length enable, Frequency MSB Square 2 FF15 ---- ---- Not used NR21 FF16 DDLL LLLL Duty, Length load (64-L) NR22 FF17 VVVV APPP Starting volume, Envelope add mode, period NR23 FF18 FFFF FFFF Frequency LSB NR24 FF19 TL-- -FFF Trigger, Length enable, Frequency MSB Wave NR30 FF1A E--- ---- DAC power NR31 FF1B LLLL LLLL Length load (256-L) NR32 FF1C -VV- ---- Volume code (00=0%, 01=100%, 10=50%, 11=25%) NR33 FF1D FFFF FFFF Frequency LSB NR34 FF1E TL-- -FFF Trigger, Length enable, Frequency MSB Noise FF1F ---- ---- Not used NR41 FF20 --LL LLLL Length load (64-L) NR42 FF21 VVVV APPP Starting volume, Envelope add mode, period NR43 FF22 SSSS WDDD Clock shift, Width mode of LFSR, Divisor code NR44 FF23 TL-- ---- Trigger, Length enable Control/Status NR50 FF24 ALLL BRRR Vin L enable, Left vol, Vin R enable, Right vol NR51 FF25 NW21 NW21 Left enables, Right enables NR52 FF26 P--- NW21 Power control/status, Channel length statuses Not used FF27 ---- ---- .... ---- ---- FF2F ---- ---- Wave Table FF30 0000 1111 Samples 0 and 1 .... FF3F 0000 1111 Samples 30 and 31 \u521d\u6b21\u9605\u8bfb\u6b64\u8868\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e9b\u7591\u60d1, \u8fd9\u91cc\u4ee5\u6b64\u8868\u7684\u7b2c\u4e00\u4e2a\u5bc4\u5b58\u5668 Square1 \u7684 NR10 \u5bc4\u5b58\u5668\u8fdb\u884c\u89e3\u91ca\u8bf4\u660e: NR10 FF10 -PPP NSSS Sweep period, negate, shift NR10 \u662f\u5bc4\u5b58\u5668\u7684\u540d\u5b57, FF10 \u8868\u793a\u8be5\u5bc4\u5b58\u5668\u88ab\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u7684\u5730\u5740, \"-PPP NSSS Sweep period, negate, shift\" \u8868\u793a\u8be5\u5bc4\u5b58\u5668\u4f4e 3 \u4f4d\u7684\u52a9\u8bb0\u8bcd\u662f shift, \u7b2c 3 \u4f4d\u7684\u52a9\u8bb0\u8bcd\u662f negate, \u7b2c 4 \u5230 6 \u4f4d\u7684\u52a9\u8bb0\u8bcd\u662f Sweep period. \u63a7\u5236\u4e0e\u72b6\u6001\u5bc4\u5b58\u5668 \u6709 3 \u4e2a\u5bc4\u5b58\u5668\u53ef\u4ee5\u5bf9 Game Boy \u8fdb\u884c\u5168\u5c40\u7684\u7cfb\u7edf\u63a7\u5236, \u5b83\u4eec\u5206\u522b\u88ab\u6620\u5c04\u5230\u5185\u5b58\u5730\u5740\u7684 0xff24, 0xff25 \u4e0e 0xff26. 0xff24 \u5206\u522b\u63a7\u5236\u5de6\u58f0\u9053\u97f3\u91cf\u542f\u7528/\u7981\u7528, \u5de6\u58f0\u9053\u97f3\u91cf, \u53f3\u58f0\u9053\u97f3\u91cf\u542f\u7528/\u7981\u7528\u548c\u53f3\u58f0\u9053\u97f3\u91cf 0xff25 \u5206\u522b\u63a7\u5236\u5de6\u58f0\u9053\u542f\u7528/\u8b66\u7528\u548c\u53f3\u58f0\u9053\u542f\u7528/\u8b66\u7528 0xff26 \u5206\u522b\u63a7\u5236\u97f3\u9891\u7cfb\u7edf\u603b\u5f00\u5173\u4e0e 4 \u4e2a\u901a\u9053\u7684\u5f53\u524d\u72b6\u6001 0xff24 \u4e0e 0xff25 \u5bc4\u5b58\u5668\u4e2d\u7684\u4e24\u4e2a\u542f\u7528/\u8b66\u7528\u5f00\u5173\u6709\u6240\u533a\u522b, \u524d\u8005\u662f\u51b3\u5b9a\u662f\u5426\u5c06\u97f3\u91cf\u589e\u76ca/\u8870\u51cf\u5e94\u7528\u5230\u539f\u59cb\u6570\u636e\u4e0a, \u800c\u540e\u8005\u5219\u51b3\u5b9a\u662f\u5426\u5b8c\u5168\u5173\u95ed\u5de6\u53f3\u58f0\u9053\u7684\u97f3\u9891\u8f93\u51fa. 0xff25 \u5bc4\u5b58\u5668\u7684\u6bcf\u4e00\u4f4d\u8868\u793a\u5982\u4e0b \u4f4d Bit 7 \u767d\u566a\u58f0\u901a\u9053\u662f\u5426\u5141\u8bb8\u4ece\u5de6\u58f0\u9053\u8f93\u51fa Bit 6 \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u662f\u5426\u5141\u8bb8\u4ece\u5de6\u58f0\u9053\u8f93\u51fa Bit 5 \u65b9\u6ce2\u901a\u9053 2 \u662f\u5426\u5141\u8bb8\u4ece\u5de6\u58f0\u9053\u8f93\u51fa Bit 4 \u65b9\u6ce2\u901a\u9053 1 \u662f\u5426\u5141\u8bb8\u4ece\u5de6\u58f0\u9053\u8f93\u51fa Bit 3 \u767d\u566a\u58f0\u901a\u9053\u662f\u5426\u5141\u8bb8\u4ece\u53f3\u58f0\u9053\u8f93\u51fa Bit 2 \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u662f\u5426\u5141\u8bb8\u4ece\u53f3\u58f0\u9053\u8f93\u51fa Bit 1 \u65b9\u6ce2\u901a\u9053 2 \u662f\u5426\u5141\u8bb8\u4ece\u53f3\u58f0\u9053\u8f93\u51fa Bit 0 \u65b9\u6ce2\u901a\u9053 1 \u662f\u5426\u5141\u8bb8\u4ece\u53f3\u58f0\u9053\u8f93\u51fa 0xff26 \u5bc4\u5b58\u5668\u7684\u7b2c\u4e00\u4f4d\u901a\u5e38\u53ef\u4ee5\u662f 1, \u5f53\u7136\u524d\u63d0\u662f\u97f3\u9891\u7cfb\u7edf\u6b63\u5728\u8fd0\u884c\u65f6; \u800c\u540e 4 \u4f4d\u8868\u793a\u5f53\u524d 4 \u4e2a\u97f3\u9891\u901a\u9053\u7684\u72b6\u6001. \u5f53\u97f3\u9891\u901a\u9053\u6b63\u5728\u5de5\u4f5c\u65f6, \u5219\u76f8\u5e94\u4f4d\u4e3a 1, \u5426\u5219\u4e3a 0. \u56e0\u6b64, \u8003\u8651\u5982\u4e0b\u4e00\u79cd\u60c5\u5f62, \u65b9\u6ce2\u901a\u9053 2 \u88ab\u7981\u7528\u800c\u5176\u4ed6\u6240\u6709\u97f3\u9891\u901a\u9053\u5747\u5728\u6b63\u5e38\u6267\u884c, \u5219 0xff26 \u7684\u503c\u4e3a(\u4ee5\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a) | 1 | - | - | - | 1 | 1 | 0 | 1 | \u4ee3\u7801\u5b9e\u73b0 \u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b, \u8868\u660e\u5bc4\u5b58\u5668\u88ab\u5e94\u7528\u5728\u54ea\u4e2a\u97f3\u9891\u901a\u9053\u4e2d. #[derive(Clone, Eq, PartialEq)] enum Channel { Square1, Square2, Wave, Noise, } \u5b9a\u4e49\u5bc4\u5b58\u5668\u7ed3\u6784\u4f53, \u5b83\u62e5\u6709\u4e00\u4e2a channel \u5b57\u6bb5\u8868\u660e\u5f53\u524d\u7684\u97f3\u9891\u901a\u9053\u7c7b\u578b, \u4ee5\u53ca 5 \u4e2a u8 \u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\u7528\u4e8e\u5b58\u50a8\u6570\u636e. struct Register { channel: Channel, nrx0: u8, nrx1: u8, nrx2: u8, nrx3: u8, nrx4: u8, } \u5b9a\u4e49\u4e00\u4e9b\u7b80\u4fbf\u65b9\u6cd5\u6765\u5b8c\u6210\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u503c\u8bfb\u53d6\u548c\u4fee\u6539. \u67d0\u4e9b\u6570\u636e\u7c7b\u578b\u662f\u4e13\u7528\u4e8e\u67d0\u4e9b\u97f3\u9891\u901a\u9053\u7684, \u56e0\u6b64\u4f1a\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 assert \u8bed\u6cd5\u8fdb\u884c\u9650\u5b9a, \u53ef\u4ee5\u907f\u514d\u7c7b\u4f3c\u5728 Suqare 2 \u901a\u9053\u8bfb\u53d6 NRX0 \u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u4e00\u7c7b\u7684\u9519\u8bef. impl Register { fn get_sweep_period(&self) -> u8 { assert!(self.channel == Channel::Square1); (self.nrx0 >> 4) & 0x07 } fn get_negate(&self) -> bool { assert!(self.channel == Channel::Square1); self.nrx0 & 0x08 != 0x00 } fn get_shift(&self) -> u8 { assert!(self.channel == Channel::Square1); self.nrx0 & 0x07 } fn get_dac_power(&self) -> bool { assert!(self.channel == Channel::Wave); self.nrx0 & 0x80 != 0x00 } fn get_duty(&self) -> u8 { assert!(self.channel == Channel::Square1 || self.channel == Channel::Square2); self.nrx1 >> 6 } fn get_length_load(&self) -> u16 { if self.channel == Channel::Wave { (1 << 8) - u16::from(self.nrx1) } else { (1 << 6) - u16::from(self.nrx1 & 0x3f) } } fn get_starting_volume(&self) -> u8 { assert!(self.channel != Channel::Wave); self.nrx2 >> 4 } fn get_volume_code(&self) -> u8 { assert!(self.channel == Channel::Wave); (self.nrx2 >> 5) & 0x03 } fn get_envelope_add_mode(&self) -> bool { assert!(self.channel != Channel::Wave); self.nrx2 & 0x08 != 0x00 } fn get_period(&self) -> u8 { assert!(self.channel != Channel::Wave); self.nrx2 & 0x07 } fn get_frequency(&self) -> u16 { assert!(self.channel != Channel::Noise); u16::from(self.nrx4 & 0x07) << 8 | u16::from(self.nrx3) } fn set_frequency(&mut self, f: u16) { assert!(self.channel != Channel::Noise); let h = ((f >> 8) & 0x07) as u8; let l = f as u8; self.nrx4 = (self.nrx4 & 0xf8) | h; self.nrx3 = l; } fn get_clock_shift(&self) -> u8 { assert!(self.channel == Channel::Noise); self.nrx3 >> 4 } fn get_width_mode_of_lfsr(&self) -> bool { assert!(self.channel == Channel::Noise); self.nrx3 & 0x08 != 0x00 } fn get_dividor_code(&self) -> u8 { assert!(self.channel == Channel::Noise); self.nrx3 & 0x07 } fn get_trigger(&self) -> bool { self.nrx4 & 0x80 != 0x00 } fn set_trigger(&mut self, b: bool) { if b { self.nrx4 |= 0x80; } else { self.nrx4 &= 0x7f; }; } fn get_length_enable(&self) -> bool { self.nrx4 & 0x40 != 0x00 } } \u6700\u540e\u5199\u4e0a\u6784\u9020\u65b9\u6cd5. impl Register { fn power_up(channel: Channel) -> Self { Self { channel, nrx0: 0x00, nrx1: 0x00, nrx2: 0x00, nrx3: 0x00, nrx4: 0x00, } } }","title":"GB-\u97f3\u9891-\u5bc4\u5b58\u5668"},{"location":"content/gameboy/audio/register/#_1","text":"\u58f0\u97f3\u5bc4\u5b58\u5668\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u7684 0xff10 \u5230 0xff3f \u5730\u5740. \u6bcf\u4e2a\u97f3\u9891\u901a\u9053\u5747\u6709\u4e94\u4e2a\u903b\u8f91\u5bc4\u5b58\u5668, \u4f9d\u6b21\u547d\u540d\u4e3a NRx0 \u5230 NRx4, \u4f46\u6709\u4e9b\u901a\u9053\u53ef\u80fd\u4e0d\u4f1a\u4f7f\u7528 NRx0 \u5bc4\u5b58\u5668. \u6bcf\u4e2a\u5bc4\u5b58\u5668\u5747\u662f 8 \u4f4d\u5927\u5c0f, \u5b83\u7684 8 \u4e2a bit \u901a\u5e38\u88ab\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u4f4d\u6bb5, \u88ab\u4e0d\u540c\u7684\u903b\u8f91\u7a0b\u5e8f\u6216\u7535\u8def\u6240\u4f7f\u7528. \u4e0b\u8868\u5c55\u793a\u4e86\u6bcf\u4e2a\u5bc4\u5b58\u5668\u5728\u4e0d\u540c\u97f3\u9891\u901a\u9053\u4e2d\u7684\u4f5c\u7528. \u6807\u6709 \"-\" \u7684\u4f4d\u7684\u503c\u6ca1\u6709\u5b9e\u9645\u4f5c\u7528. \u5bf9\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u7684\u5f15\u7528\u610f\u5473\u7740\u5199\u5165\u7684\u6700\u540e\u4e00\u4e2a\u503c, \u5373\u867d\u7136 \"-\" \u4f4d\u4e0d\u4f1a\u88ab\u4f7f\u7528, \u4f46\u4f9d\u7136\u80fd\u88ab\u6b63\u5e38\u8bfb\u53d6. ----------------------------------------------------------------- Square 1 NR10 FF10 -PPP NSSS Sweep period, negate, shift NR11 FF11 DDLL LLLL Duty, Length load (64-L) NR12 FF12 VVVV APPP Starting volume, Envelope add mode, period NR13 FF13 FFFF FFFF Frequency LSB NR14 FF14 TL-- -FFF Trigger, Length enable, Frequency MSB Square 2 FF15 ---- ---- Not used NR21 FF16 DDLL LLLL Duty, Length load (64-L) NR22 FF17 VVVV APPP Starting volume, Envelope add mode, period NR23 FF18 FFFF FFFF Frequency LSB NR24 FF19 TL-- -FFF Trigger, Length enable, Frequency MSB Wave NR30 FF1A E--- ---- DAC power NR31 FF1B LLLL LLLL Length load (256-L) NR32 FF1C -VV- ---- Volume code (00=0%, 01=100%, 10=50%, 11=25%) NR33 FF1D FFFF FFFF Frequency LSB NR34 FF1E TL-- -FFF Trigger, Length enable, Frequency MSB Noise FF1F ---- ---- Not used NR41 FF20 --LL LLLL Length load (64-L) NR42 FF21 VVVV APPP Starting volume, Envelope add mode, period NR43 FF22 SSSS WDDD Clock shift, Width mode of LFSR, Divisor code NR44 FF23 TL-- ---- Trigger, Length enable Control/Status NR50 FF24 ALLL BRRR Vin L enable, Left vol, Vin R enable, Right vol NR51 FF25 NW21 NW21 Left enables, Right enables NR52 FF26 P--- NW21 Power control/status, Channel length statuses Not used FF27 ---- ---- .... ---- ---- FF2F ---- ---- Wave Table FF30 0000 1111 Samples 0 and 1 .... FF3F 0000 1111 Samples 30 and 31 \u521d\u6b21\u9605\u8bfb\u6b64\u8868\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e9b\u7591\u60d1, \u8fd9\u91cc\u4ee5\u6b64\u8868\u7684\u7b2c\u4e00\u4e2a\u5bc4\u5b58\u5668 Square1 \u7684 NR10 \u5bc4\u5b58\u5668\u8fdb\u884c\u89e3\u91ca\u8bf4\u660e: NR10 FF10 -PPP NSSS Sweep period, negate, shift NR10 \u662f\u5bc4\u5b58\u5668\u7684\u540d\u5b57, FF10 \u8868\u793a\u8be5\u5bc4\u5b58\u5668\u88ab\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u7684\u5730\u5740, \"-PPP NSSS Sweep period, negate, shift\" \u8868\u793a\u8be5\u5bc4\u5b58\u5668\u4f4e 3 \u4f4d\u7684\u52a9\u8bb0\u8bcd\u662f shift, \u7b2c 3 \u4f4d\u7684\u52a9\u8bb0\u8bcd\u662f negate, \u7b2c 4 \u5230 6 \u4f4d\u7684\u52a9\u8bb0\u8bcd\u662f Sweep period.","title":"\u5bc4\u5b58\u5668"},{"location":"content/gameboy/audio/register/#_2","text":"\u6709 3 \u4e2a\u5bc4\u5b58\u5668\u53ef\u4ee5\u5bf9 Game Boy \u8fdb\u884c\u5168\u5c40\u7684\u7cfb\u7edf\u63a7\u5236, \u5b83\u4eec\u5206\u522b\u88ab\u6620\u5c04\u5230\u5185\u5b58\u5730\u5740\u7684 0xff24, 0xff25 \u4e0e 0xff26. 0xff24 \u5206\u522b\u63a7\u5236\u5de6\u58f0\u9053\u97f3\u91cf\u542f\u7528/\u7981\u7528, \u5de6\u58f0\u9053\u97f3\u91cf, \u53f3\u58f0\u9053\u97f3\u91cf\u542f\u7528/\u7981\u7528\u548c\u53f3\u58f0\u9053\u97f3\u91cf 0xff25 \u5206\u522b\u63a7\u5236\u5de6\u58f0\u9053\u542f\u7528/\u8b66\u7528\u548c\u53f3\u58f0\u9053\u542f\u7528/\u8b66\u7528 0xff26 \u5206\u522b\u63a7\u5236\u97f3\u9891\u7cfb\u7edf\u603b\u5f00\u5173\u4e0e 4 \u4e2a\u901a\u9053\u7684\u5f53\u524d\u72b6\u6001 0xff24 \u4e0e 0xff25 \u5bc4\u5b58\u5668\u4e2d\u7684\u4e24\u4e2a\u542f\u7528/\u8b66\u7528\u5f00\u5173\u6709\u6240\u533a\u522b, \u524d\u8005\u662f\u51b3\u5b9a\u662f\u5426\u5c06\u97f3\u91cf\u589e\u76ca/\u8870\u51cf\u5e94\u7528\u5230\u539f\u59cb\u6570\u636e\u4e0a, \u800c\u540e\u8005\u5219\u51b3\u5b9a\u662f\u5426\u5b8c\u5168\u5173\u95ed\u5de6\u53f3\u58f0\u9053\u7684\u97f3\u9891\u8f93\u51fa. 0xff25 \u5bc4\u5b58\u5668\u7684\u6bcf\u4e00\u4f4d\u8868\u793a\u5982\u4e0b \u4f4d Bit 7 \u767d\u566a\u58f0\u901a\u9053\u662f\u5426\u5141\u8bb8\u4ece\u5de6\u58f0\u9053\u8f93\u51fa Bit 6 \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u662f\u5426\u5141\u8bb8\u4ece\u5de6\u58f0\u9053\u8f93\u51fa Bit 5 \u65b9\u6ce2\u901a\u9053 2 \u662f\u5426\u5141\u8bb8\u4ece\u5de6\u58f0\u9053\u8f93\u51fa Bit 4 \u65b9\u6ce2\u901a\u9053 1 \u662f\u5426\u5141\u8bb8\u4ece\u5de6\u58f0\u9053\u8f93\u51fa Bit 3 \u767d\u566a\u58f0\u901a\u9053\u662f\u5426\u5141\u8bb8\u4ece\u53f3\u58f0\u9053\u8f93\u51fa Bit 2 \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u662f\u5426\u5141\u8bb8\u4ece\u53f3\u58f0\u9053\u8f93\u51fa Bit 1 \u65b9\u6ce2\u901a\u9053 2 \u662f\u5426\u5141\u8bb8\u4ece\u53f3\u58f0\u9053\u8f93\u51fa Bit 0 \u65b9\u6ce2\u901a\u9053 1 \u662f\u5426\u5141\u8bb8\u4ece\u53f3\u58f0\u9053\u8f93\u51fa 0xff26 \u5bc4\u5b58\u5668\u7684\u7b2c\u4e00\u4f4d\u901a\u5e38\u53ef\u4ee5\u662f 1, \u5f53\u7136\u524d\u63d0\u662f\u97f3\u9891\u7cfb\u7edf\u6b63\u5728\u8fd0\u884c\u65f6; \u800c\u540e 4 \u4f4d\u8868\u793a\u5f53\u524d 4 \u4e2a\u97f3\u9891\u901a\u9053\u7684\u72b6\u6001. \u5f53\u97f3\u9891\u901a\u9053\u6b63\u5728\u5de5\u4f5c\u65f6, \u5219\u76f8\u5e94\u4f4d\u4e3a 1, \u5426\u5219\u4e3a 0. \u56e0\u6b64, \u8003\u8651\u5982\u4e0b\u4e00\u79cd\u60c5\u5f62, \u65b9\u6ce2\u901a\u9053 2 \u88ab\u7981\u7528\u800c\u5176\u4ed6\u6240\u6709\u97f3\u9891\u901a\u9053\u5747\u5728\u6b63\u5e38\u6267\u884c, \u5219 0xff26 \u7684\u503c\u4e3a(\u4ee5\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a) | 1 | - | - | - | 1 | 1 | 0 | 1 |","title":"\u63a7\u5236\u4e0e\u72b6\u6001\u5bc4\u5b58\u5668"},{"location":"content/gameboy/audio/register/#_3","text":"\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b, \u8868\u660e\u5bc4\u5b58\u5668\u88ab\u5e94\u7528\u5728\u54ea\u4e2a\u97f3\u9891\u901a\u9053\u4e2d. #[derive(Clone, Eq, PartialEq)] enum Channel { Square1, Square2, Wave, Noise, } \u5b9a\u4e49\u5bc4\u5b58\u5668\u7ed3\u6784\u4f53, \u5b83\u62e5\u6709\u4e00\u4e2a channel \u5b57\u6bb5\u8868\u660e\u5f53\u524d\u7684\u97f3\u9891\u901a\u9053\u7c7b\u578b, \u4ee5\u53ca 5 \u4e2a u8 \u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\u7528\u4e8e\u5b58\u50a8\u6570\u636e. struct Register { channel: Channel, nrx0: u8, nrx1: u8, nrx2: u8, nrx3: u8, nrx4: u8, } \u5b9a\u4e49\u4e00\u4e9b\u7b80\u4fbf\u65b9\u6cd5\u6765\u5b8c\u6210\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u503c\u8bfb\u53d6\u548c\u4fee\u6539. \u67d0\u4e9b\u6570\u636e\u7c7b\u578b\u662f\u4e13\u7528\u4e8e\u67d0\u4e9b\u97f3\u9891\u901a\u9053\u7684, \u56e0\u6b64\u4f1a\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 assert \u8bed\u6cd5\u8fdb\u884c\u9650\u5b9a, \u53ef\u4ee5\u907f\u514d\u7c7b\u4f3c\u5728 Suqare 2 \u901a\u9053\u8bfb\u53d6 NRX0 \u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u4e00\u7c7b\u7684\u9519\u8bef. impl Register { fn get_sweep_period(&self) -> u8 { assert!(self.channel == Channel::Square1); (self.nrx0 >> 4) & 0x07 } fn get_negate(&self) -> bool { assert!(self.channel == Channel::Square1); self.nrx0 & 0x08 != 0x00 } fn get_shift(&self) -> u8 { assert!(self.channel == Channel::Square1); self.nrx0 & 0x07 } fn get_dac_power(&self) -> bool { assert!(self.channel == Channel::Wave); self.nrx0 & 0x80 != 0x00 } fn get_duty(&self) -> u8 { assert!(self.channel == Channel::Square1 || self.channel == Channel::Square2); self.nrx1 >> 6 } fn get_length_load(&self) -> u16 { if self.channel == Channel::Wave { (1 << 8) - u16::from(self.nrx1) } else { (1 << 6) - u16::from(self.nrx1 & 0x3f) } } fn get_starting_volume(&self) -> u8 { assert!(self.channel != Channel::Wave); self.nrx2 >> 4 } fn get_volume_code(&self) -> u8 { assert!(self.channel == Channel::Wave); (self.nrx2 >> 5) & 0x03 } fn get_envelope_add_mode(&self) -> bool { assert!(self.channel != Channel::Wave); self.nrx2 & 0x08 != 0x00 } fn get_period(&self) -> u8 { assert!(self.channel != Channel::Wave); self.nrx2 & 0x07 } fn get_frequency(&self) -> u16 { assert!(self.channel != Channel::Noise); u16::from(self.nrx4 & 0x07) << 8 | u16::from(self.nrx3) } fn set_frequency(&mut self, f: u16) { assert!(self.channel != Channel::Noise); let h = ((f >> 8) & 0x07) as u8; let l = f as u8; self.nrx4 = (self.nrx4 & 0xf8) | h; self.nrx3 = l; } fn get_clock_shift(&self) -> u8 { assert!(self.channel == Channel::Noise); self.nrx3 >> 4 } fn get_width_mode_of_lfsr(&self) -> bool { assert!(self.channel == Channel::Noise); self.nrx3 & 0x08 != 0x00 } fn get_dividor_code(&self) -> u8 { assert!(self.channel == Channel::Noise); self.nrx3 & 0x07 } fn get_trigger(&self) -> bool { self.nrx4 & 0x80 != 0x00 } fn set_trigger(&mut self, b: bool) { if b { self.nrx4 |= 0x80; } else { self.nrx4 &= 0x7f; }; } fn get_length_enable(&self) -> bool { self.nrx4 & 0x40 != 0x00 } } \u6700\u540e\u5199\u4e0a\u6784\u9020\u65b9\u6cd5. impl Register { fn power_up(channel: Channel) -> Self { Self { channel, nrx0: 0x00, nrx1: 0x00, nrx2: 0x00, nrx3: 0x00, nrx4: 0x00, } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/audio/sound/","text":"\u58f0\u97f3\u7684\u6784\u6210 \u4eba\u8033\u6240\u80fd\u611f\u53d7\u5230\u7684\u58f0\u97f3, \u4e3b\u8981\u7531\u4e09\u4e2a\u56e0\u7d20\u6240\u6784\u6210, \u5373\u54cd\u5ea6, \u97f3\u8c03\u548c\u97f3\u8272, \u79f0\u4e3a\u58f0\u97f3\u7684\u4e09\u8981\u7d20. \u58f0\u97f3\u662f\u4e00\u79cd\u6ce2, \u632f\u5e45\u548c\u9891\u7387\u662f\u6ce2\u7684\u7269\u7406\u63cf\u8ff0, \u97f3\u8272\u5219\u504f\u5411\u4e3b\u89c2. \u54cd\u5ea6: \u58f0\u97f3\u7684\u5927\u5c0f, \u51b3\u5b9a\u4e8e\u7269\u4f53\u9707\u52a8\u5e45\u5ea6\u5927\u5c0f(\u5373\u632f\u5e45\u5927\u5c0f). \u97f3\u8c03: \u58f0\u97f3\u7684\u9ad8\u4f4e, \u6c7a\u5b9a\u4e8e\u7269\u4f53\u9707\u52a8\u901f\u5ea6\u5feb\u6162(\u5373\u9891\u7387\u9ad8\u4f4e). \u97f3\u8272: \u58f0\u97f3\u7684\u7279\u8272, \u6c7a\u5b9a\u4e8e\u58f0\u97f3\u7684\u6ce2\u5f62. \u54cd\u5ea6 \u58f0\u6ce2\u7684\u632f\u5e45\u8d8a\u5927, \u54cd\u5ea6\u8d8a\u5927; \u632f\u5e45\u8d8a\u5c0f, \u54cd\u5ea6\u8d8a\u5c0f. \u54cd\u5ea6\u7684\u5355\u4f4d\u662f\u5206\u8d1d(dB, decibel), \u4f46\u8981\u6ce8\u610f\u5206\u8d1d\u662f\u4e00\u4e2a\u6bd4\u4f8b\u63cf\u8ff0, \u6bd4\u5982\u96f6\u5206\u8d1d\u5e76\u4e0d\u4ee3\u8868\u6ca1\u6709\u58f0\u97f3, \u800c\u662f\u6307\u4eba\u8033\u80fd\u542c\u5230\u7684\u6700\u5c0f\u58f0\u97f3. 0 \u5206\u8d1d\u76f8\u8f83\u4e8e 10 \u5206\u8d1d, \u5f3a\u5ea6\u76f8\u5dee 10 \u500d, 0 \u5206\u8d1d\u76f8\u8f83\u4e8e 20 \u5206\u8d1d, \u5f37\u5ea6\u76f8\u5dee 100 \u500d. \u5b83\u4eec\u4e4b\u95f4\u5b58\u5728\u4e00\u4e2a\u5bf9\u6570\u5173\u7cfb. \u5982\u4e0b\u662f\u4e24\u4e2a\u9891\u7387\u76f8\u540c\u58f0\u6ce2\u7684\u6ce2\u5f62, \u5206\u522b\u4e3a $f(x)= sin(x)$ \u548c $f(x)= 1/2sin(x)$. \u5982\u679c\u4e0d\u8003\u8651\u4eba\u8033\u7684\u611f\u77e5\u8303\u56f4, \u5728\u4eba\u8033\u542c\u6765, \u524d\u8005\u4f1a\u6bd4\u540e\u8005\u66f4\u54cd. \u97f3\u8c03 \u58f0\u6ce2\u7684\u9891\u7387\u8d8a\u9ad8, \u97f3\u8c03\u8d8a\u9ad8, \u58f0\u97f3\u542c\u8d77\u6765\u611f\u89c9\u8d8a\u523a\u8033; \u9891\u7387\u8d8a\u4f4e, \u97f3\u8c03\u8d8a\u4f4e, \u58f0\u97f3\u542c\u8d77\u6765\u611f\u89c9\u8d8a\u4f4e\u6c89. \u9891\u7387\u4f4e\u7684\u58f0\u97f3\u7a7f\u900f\u529b\u66f4\u5f3a, \u6bd4\u5982\u4e00\u5230\u590f\u5929, \u8bb8\u591a\u5c0f\u533a\u5c31\u4f1a\u51fa\u73b0\u5927\u91cf\u5173\u4e8e\u90bb\u5c45\u5bb6\u7a7a\u8c03\u5916\u673a\u566a\u97f3\u7684\u6295\u8bc9, \u7a7a\u8c03\u5916\u673a\u53d1\u51fa\u7684\u566a\u97f3\u5176\u9891\u7387\u5c31\u975e\u5e38\u4f4e(\u4f4e\u9891\u566a\u97f3), \u56e0\u6b64\u5176\u7a7f\u900f\u6027\u975e\u5e38\u597d. \u5982\u4e0b\u662f\u4e24\u4e2a\u9891\u7387\u76f8\u540c\u58f0\u6ce2\u7684\u6ce2\u5f62, \u5206\u522b\u4e3a $f(x)= sin(x)$ \u548c $f(x)= sin(3x)$. \u5982\u679c\u4e0d\u8003\u8651\u4eba\u8033\u7684\u611f\u77e5\u8303\u56f4, \u5728\u4eba\u8033\u542c\u6765, \u524d\u8005\u4f1a\u6bd4\u540e\u8005\u66f4\u4f4e\u6c89. \u97f3\u8272 \u4e25\u683c\u6765\u8bb2\u97f3\u8272\u5e76\u4e0d\u662f\u4e00\u4e2a\u771f\u5b9e\u7684\u7269\u7406\u91cf, \u97f3\u8272\u662f\u8bb8\u591a\u7269\u7406\u91cf\u7684\u53e0\u52a0. \u6b63\u662f\u97f3\u8272\u624d\u80fd\u8ba9\u4eba\u7c7b\u5206\u522b\u4e0d\u540c\u7684\u4eba\u58f0\u548c\u4e50\u58f0. \u5728\u771f\u5b9e\u4e16\u754c\u4e2d, \u6211\u4eec\u5f88\u96be\u63a5\u89e6\u5230\u50cf $f(x)= sin(x)$ \u4e00\u6837\u5982\u6b64\u5b8c\u7f8e\u7684\u6ce2\u5f62, \u542c\u5230\u7684\u58f0\u97f3\u662f\u8bb8\u591a\u4e0d\u540c\u9891\u7387\u548c\u632f\u5e45\u58f0\u6ce2\u7684\u53e0\u52a0. \u4f46\u53e0\u52a0\u5b8c\u6210\u540e\u7684\u58f0\u6ce2\u53c8\u80fd\u8868\u73b0\u51fa\u6ce2\u7684\u7279\u6027. \u5982\u4e0b\u56fe\u6240\u793a\u7684\u6ce2\u5f62, \u4f60\u80fd\u660e\u663e\u611f\u89c9\u5230\u5b83\u662f\u4e00\u4e2a\u6ce2, \u4f46\u8fd9\u4e2a\u6ce2\u53c8\u6709\u70b9\u4e0d\u540c, \u56e0\u4e3a\u8be5\u6ce2\u662f\u4e3b\u6ce2 $f(x)= sin(x)$ \u4e0e\u8c10\u6ce2 $f(x)= cos(0.5x)$ \u7684\u53e0\u52a0: \u5373\u4f7f\u9891\u7387\u4e0e\u632f\u5e45\u90fd\u76f8\u540c\u7684\u58f0\u6ce2, \u56e0\u4e3a\u6240\u52a0\u5165\u7684\u8c10\u6ce2\u4e0d\u540c, \u6240\u8868\u73b0\u51fa\u6765\u7684\u97f3\u8272\u4e5f\u4e0d\u540c. \u5173\u4e8e\u5982\u4f55\u7ed8\u5236\u6ce2\u5f62\u56fe \u672c\u8282\u7684\u56fe\u7247\u5747\u7531 Python \u7684 Matplotlib \u5e93\u751f\u6210. Matplotlib \u662f\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u7ed8\u56fe\u5e93, \u5e38\u5e38\u7528\u4e8e\u5927\u6570\u636e\u5206\u6790\u4e0e\u673a\u5668\u5b66\u4e60\u573a\u666f. import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') plt.rcParams.update({'font.size': 22}) ax = plt.subplot() x = np.linspace(-5*np.pi, 5*np.pi, 256) ax.plot(x, np.sin(x), label='f(x) = sin(x)') x = np.linspace(-5*np.pi, 5*np.pi, 256) ax.plot(x, 0.5 * np.sin(x), label='f(x) = sin(x) * 0.5') ax.legend(loc='lower right') plt.show() import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') plt.rcParams.update({'font.size': 22}) ax = plt.subplot() x = np.linspace(-3*np.pi, 3*np.pi, 256) ax.plot(x, np.sin(x), label='f(x) = sin(x)') x = np.linspace(-3*np.pi, 3*np.pi, 256) ax.plot(x, np.sin(3 * x), label='f(x) = sin(3x)') ax.legend(loc='lower right') plt.show() import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') plt.rcParams.update({'font.size': 22}) ax = plt.subplot() x = np.linspace(-5*np.pi, 5*np.pi, 256) ax.plot(x, np.sin(x) + np.cos(0.5 * x), label='f(x) = sin(x) + cos(0.5x') ax.legend(loc='lower right') plt.show()","title":"GB-\u97f3\u9891-\u58f0\u97f3\u7684\u6784\u6210"},{"location":"content/gameboy/audio/sound/#_1","text":"\u4eba\u8033\u6240\u80fd\u611f\u53d7\u5230\u7684\u58f0\u97f3, \u4e3b\u8981\u7531\u4e09\u4e2a\u56e0\u7d20\u6240\u6784\u6210, \u5373\u54cd\u5ea6, \u97f3\u8c03\u548c\u97f3\u8272, \u79f0\u4e3a\u58f0\u97f3\u7684\u4e09\u8981\u7d20. \u58f0\u97f3\u662f\u4e00\u79cd\u6ce2, \u632f\u5e45\u548c\u9891\u7387\u662f\u6ce2\u7684\u7269\u7406\u63cf\u8ff0, \u97f3\u8272\u5219\u504f\u5411\u4e3b\u89c2. \u54cd\u5ea6: \u58f0\u97f3\u7684\u5927\u5c0f, \u51b3\u5b9a\u4e8e\u7269\u4f53\u9707\u52a8\u5e45\u5ea6\u5927\u5c0f(\u5373\u632f\u5e45\u5927\u5c0f). \u97f3\u8c03: \u58f0\u97f3\u7684\u9ad8\u4f4e, \u6c7a\u5b9a\u4e8e\u7269\u4f53\u9707\u52a8\u901f\u5ea6\u5feb\u6162(\u5373\u9891\u7387\u9ad8\u4f4e). \u97f3\u8272: \u58f0\u97f3\u7684\u7279\u8272, \u6c7a\u5b9a\u4e8e\u58f0\u97f3\u7684\u6ce2\u5f62.","title":"\u58f0\u97f3\u7684\u6784\u6210"},{"location":"content/gameboy/audio/sound/#_2","text":"\u58f0\u6ce2\u7684\u632f\u5e45\u8d8a\u5927, \u54cd\u5ea6\u8d8a\u5927; \u632f\u5e45\u8d8a\u5c0f, \u54cd\u5ea6\u8d8a\u5c0f. \u54cd\u5ea6\u7684\u5355\u4f4d\u662f\u5206\u8d1d(dB, decibel), \u4f46\u8981\u6ce8\u610f\u5206\u8d1d\u662f\u4e00\u4e2a\u6bd4\u4f8b\u63cf\u8ff0, \u6bd4\u5982\u96f6\u5206\u8d1d\u5e76\u4e0d\u4ee3\u8868\u6ca1\u6709\u58f0\u97f3, \u800c\u662f\u6307\u4eba\u8033\u80fd\u542c\u5230\u7684\u6700\u5c0f\u58f0\u97f3. 0 \u5206\u8d1d\u76f8\u8f83\u4e8e 10 \u5206\u8d1d, \u5f3a\u5ea6\u76f8\u5dee 10 \u500d, 0 \u5206\u8d1d\u76f8\u8f83\u4e8e 20 \u5206\u8d1d, \u5f37\u5ea6\u76f8\u5dee 100 \u500d. \u5b83\u4eec\u4e4b\u95f4\u5b58\u5728\u4e00\u4e2a\u5bf9\u6570\u5173\u7cfb. \u5982\u4e0b\u662f\u4e24\u4e2a\u9891\u7387\u76f8\u540c\u58f0\u6ce2\u7684\u6ce2\u5f62, \u5206\u522b\u4e3a $f(x)= sin(x)$ \u548c $f(x)= 1/2sin(x)$. \u5982\u679c\u4e0d\u8003\u8651\u4eba\u8033\u7684\u611f\u77e5\u8303\u56f4, \u5728\u4eba\u8033\u542c\u6765, \u524d\u8005\u4f1a\u6bd4\u540e\u8005\u66f4\u54cd.","title":"\u54cd\u5ea6"},{"location":"content/gameboy/audio/sound/#_3","text":"\u58f0\u6ce2\u7684\u9891\u7387\u8d8a\u9ad8, \u97f3\u8c03\u8d8a\u9ad8, \u58f0\u97f3\u542c\u8d77\u6765\u611f\u89c9\u8d8a\u523a\u8033; \u9891\u7387\u8d8a\u4f4e, \u97f3\u8c03\u8d8a\u4f4e, \u58f0\u97f3\u542c\u8d77\u6765\u611f\u89c9\u8d8a\u4f4e\u6c89. \u9891\u7387\u4f4e\u7684\u58f0\u97f3\u7a7f\u900f\u529b\u66f4\u5f3a, \u6bd4\u5982\u4e00\u5230\u590f\u5929, \u8bb8\u591a\u5c0f\u533a\u5c31\u4f1a\u51fa\u73b0\u5927\u91cf\u5173\u4e8e\u90bb\u5c45\u5bb6\u7a7a\u8c03\u5916\u673a\u566a\u97f3\u7684\u6295\u8bc9, \u7a7a\u8c03\u5916\u673a\u53d1\u51fa\u7684\u566a\u97f3\u5176\u9891\u7387\u5c31\u975e\u5e38\u4f4e(\u4f4e\u9891\u566a\u97f3), \u56e0\u6b64\u5176\u7a7f\u900f\u6027\u975e\u5e38\u597d. \u5982\u4e0b\u662f\u4e24\u4e2a\u9891\u7387\u76f8\u540c\u58f0\u6ce2\u7684\u6ce2\u5f62, \u5206\u522b\u4e3a $f(x)= sin(x)$ \u548c $f(x)= sin(3x)$. \u5982\u679c\u4e0d\u8003\u8651\u4eba\u8033\u7684\u611f\u77e5\u8303\u56f4, \u5728\u4eba\u8033\u542c\u6765, \u524d\u8005\u4f1a\u6bd4\u540e\u8005\u66f4\u4f4e\u6c89.","title":"\u97f3\u8c03"},{"location":"content/gameboy/audio/sound/#_4","text":"\u4e25\u683c\u6765\u8bb2\u97f3\u8272\u5e76\u4e0d\u662f\u4e00\u4e2a\u771f\u5b9e\u7684\u7269\u7406\u91cf, \u97f3\u8272\u662f\u8bb8\u591a\u7269\u7406\u91cf\u7684\u53e0\u52a0. \u6b63\u662f\u97f3\u8272\u624d\u80fd\u8ba9\u4eba\u7c7b\u5206\u522b\u4e0d\u540c\u7684\u4eba\u58f0\u548c\u4e50\u58f0. \u5728\u771f\u5b9e\u4e16\u754c\u4e2d, \u6211\u4eec\u5f88\u96be\u63a5\u89e6\u5230\u50cf $f(x)= sin(x)$ \u4e00\u6837\u5982\u6b64\u5b8c\u7f8e\u7684\u6ce2\u5f62, \u542c\u5230\u7684\u58f0\u97f3\u662f\u8bb8\u591a\u4e0d\u540c\u9891\u7387\u548c\u632f\u5e45\u58f0\u6ce2\u7684\u53e0\u52a0. \u4f46\u53e0\u52a0\u5b8c\u6210\u540e\u7684\u58f0\u6ce2\u53c8\u80fd\u8868\u73b0\u51fa\u6ce2\u7684\u7279\u6027. \u5982\u4e0b\u56fe\u6240\u793a\u7684\u6ce2\u5f62, \u4f60\u80fd\u660e\u663e\u611f\u89c9\u5230\u5b83\u662f\u4e00\u4e2a\u6ce2, \u4f46\u8fd9\u4e2a\u6ce2\u53c8\u6709\u70b9\u4e0d\u540c, \u56e0\u4e3a\u8be5\u6ce2\u662f\u4e3b\u6ce2 $f(x)= sin(x)$ \u4e0e\u8c10\u6ce2 $f(x)= cos(0.5x)$ \u7684\u53e0\u52a0: \u5373\u4f7f\u9891\u7387\u4e0e\u632f\u5e45\u90fd\u76f8\u540c\u7684\u58f0\u6ce2, \u56e0\u4e3a\u6240\u52a0\u5165\u7684\u8c10\u6ce2\u4e0d\u540c, \u6240\u8868\u73b0\u51fa\u6765\u7684\u97f3\u8272\u4e5f\u4e0d\u540c.","title":"\u97f3\u8272"},{"location":"content/gameboy/audio/sound/#_5","text":"\u672c\u8282\u7684\u56fe\u7247\u5747\u7531 Python \u7684 Matplotlib \u5e93\u751f\u6210. Matplotlib \u662f\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u7ed8\u56fe\u5e93, \u5e38\u5e38\u7528\u4e8e\u5927\u6570\u636e\u5206\u6790\u4e0e\u673a\u5668\u5b66\u4e60\u573a\u666f. import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') plt.rcParams.update({'font.size': 22}) ax = plt.subplot() x = np.linspace(-5*np.pi, 5*np.pi, 256) ax.plot(x, np.sin(x), label='f(x) = sin(x)') x = np.linspace(-5*np.pi, 5*np.pi, 256) ax.plot(x, 0.5 * np.sin(x), label='f(x) = sin(x) * 0.5') ax.legend(loc='lower right') plt.show() import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') plt.rcParams.update({'font.size': 22}) ax = plt.subplot() x = np.linspace(-3*np.pi, 3*np.pi, 256) ax.plot(x, np.sin(x), label='f(x) = sin(x)') x = np.linspace(-3*np.pi, 3*np.pi, 256) ax.plot(x, np.sin(3 * x), label='f(x) = sin(3x)') ax.legend(loc='lower right') plt.show() import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') plt.rcParams.update({'font.size': 22}) ax = plt.subplot() x = np.linspace(-5*np.pi, 5*np.pi, 256) ax.plot(x, np.sin(x) + np.cos(0.5 * x), label='f(x) = sin(x) + cos(0.5x') ax.legend(loc='lower right') plt.show()","title":"\u5173\u4e8e\u5982\u4f55\u7ed8\u5236\u6ce2\u5f62\u56fe"},{"location":"content/gameboy/audio/square/","text":"\u65b9\u6ce2\u901a\u9053 1 & 2 \u65b9\u6ce2\u901a\u9053 1 \u5177\u6709\u626b\u9891\u548c\u5305\u7edc\u529f\u80fd. \u4ece\u529f\u80fd\u7ec4\u4ef6\u6765\u8bf4, \u65b9\u6ce2\u901a\u9053 1 \u4e3b\u8981\u5305\u542b\u5b9a\u65f6\u5668, \u957f\u5ea6\u8ba1\u6570\u5668, \u97f3\u91cf\u8c03\u8282\u5668\u548c\u626b\u9891\u5668\u51e0\u4e2a\u529f\u80fd\u7ec4\u4ef6. \u5b83\u4e0e\u65b9\u6ce2\u901a\u9053 2 \u51e0\u4e4e\u4e00\u81f4, \u552f\u4e00\u533a\u522b\u662f\u65b9\u6ce2\u901a\u9053 2 \u4e0d\u5305\u542b\u626b\u9891\u5668. \u4e0b\u9762\u5c06\u5148\u884c\u4ecb\u7ecd\u65b9\u6ce2\u901a\u9053 1 \u7684\u5bc4\u5b58\u5668\u4e0e\u5176\u529f\u80fd\u7ec6\u8282. FF10 \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 6-4 Sweep Time \u626b\u9891\u5668\u5468\u671f Bit 3 Sweep Increase/Decrease 0: \u626b\u9891\u5668\u63d0\u5347\u9891\u7387 1: \u626b\u9891\u5668\u51cf\u5c11\u9891\u7387 Bit 2-0 Number of sweep shift \u626b\u9891\u5668\u7684\u79fb\u4f4d\u503c Sweep Time 000: sweep off - no freq change 001: 7.8 ms (1/128Hz) 010: 15.6 ms (2/128Hz) 011: 23.4 ms (3/128Hz) 100: 31.3 ms (4/128Hz) 101: 39.1 ms (5/128Hz) 110: 46.9 ms (6/128Hz) 111: 54.7 ms (7/128Hz) \u6bcf\u4e2a shift \u7684\u9891\u7387\u53d8\u5316(NR13, NR14)\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97, \u5176\u4e2d X(0) \u662f\u521d\u59cb\u9891\u7387, X(t-1) \u662f\u8ba1\u7b97\u540e\u7684\u9891\u7387: X(t) = X(t-1) +/- X(t-1)/2^n FF11 \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7-6 Wave Pattern Duty \u6ce2\u5f62\u5360\u7a7a\u6bd4\u6a21\u5f0f Bit 5-0 Sound length \u58f0\u97f3\u957f\u5ea6 Wave Duty Wave Duty \u7528\u4e8e\u63a7\u5236\u65b9\u6ce2\u901a\u9053 1 \u7684\u6ce2\u5f62\u5360\u7a7a\u6bd4. \u65b9\u6ce2\u901a\u9053 1 \u7684\u97f3\u9891\u8f93\u51fa\u4f1a\u88ab\u88c1\u526a, \u5728\u4ee5 8 \u4e3a\u5468\u671f\u7684\u65f6\u95f4\u5185, \u53ea\u6709\u5176\u4e2d\u56fa\u5b9a\u7684\u65f6\u95f4\u6bb5\u4f1a\u6709\u58f0\u6ce2\u8f93\u51fa, \u5176\u4f59\u65f6\u95f4\u65e0\u8bba\u539f\u59cb\u58f0\u6ce2\u7684\u632f\u5e45\u662f\u591a\u5c11, \u90fd\u4ee5 0 \u5bf9\u5f85. \u4e0b\u8868\u5217\u51fa\u4e86 Wave Duty \u4ece 0 \u5230 3 \u8fd9\u56db\u79cd\u60c5\u51b5\u5bf9\u5e94\u7684\u5360\u7a7a\u6bd4\u4fe1\u606f. \u5f53 Waveform \u4e2d\u7684\u67d0\u4f4d\u4e3a 0 \u65f6, \u5373\u8868\u793a\u5728\u4ee5 8 \u4e3a\u5468\u671f\u7684\u65f6\u95f4\u5185\u4e0d\u5141\u8bb8\u8be5\u65f6\u95f4\u6bb5\u8f93\u51fa\u97f3\u9891\u4fe1\u53f7. Duty Waveform Ratio 00 00000001 12.5% 01 10000001 25% 10 10000111 50% 11 01111110 75% Sound Length \u7528\u4e8e\u957f\u5ea6\u8ba1\u6570\u5668(LengthCounter) \u8ba1\u6570\u7684\u521d\u59cb\u503c. \u5f53 NR14 \u7684\u7b2c 6 \u4f4d\u88ab\u8bbe\u7f6e\u4e3a 1 \u65f6, \u957f\u5ea6\u8ba1\u6570\u5668\u5c06\u52a0\u8f7d Sound Length. FF12 \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7-4 Initial Volume of envelope \u8303\u56f4\u4e3a (00-0F) (0=No Sound) Bit 3 Envelope Direction 0: \u51cf\u5c11, 1: \u589e\u52a0 Bit 2-0 Number of envelope sweep \u8303\u56f4 0-7, \u5982\u679c\u662f 0, \u5219\u505c\u6b62\u97f3\u91cf\u5305\u7edc FF13 \u65b9\u6ce2\u901a\u9053 1 \u7684\u97f3\u9891\u9891\u7387\u662f 11 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570, 0xff13 \u5bc4\u5b58\u5668\u5b58\u50a8\u8be5\u6570\u5b57\u7684\u4f4e 8 \u4e3a. \u9ad8 3 \u4f4d\u5b58\u50a8\u5728 0xff14 \u5bc4\u5b58\u5668\u4e2d. FF14 \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7 Initial \u5199\u5165 1, \u5219\u91cd\u542f\u97f3\u9891\u7cfb\u7edf Bit 6 Counter/consecutive selection \u5199\u5165 1, \u5219\u957f\u5ea6\u8ba1\u6570\u5668\u5230\u671f\u540e\u505c\u6b62\u8f93\u51fa Bit 2-0 Frequency's higher 3 bits \u9891\u7387\u7684\u9ad8 3 \u4f4d \u9891\u7387\u7528\u6765\u8bbe\u7f6e\u97f3\u9891\u901a\u9053\u5185\u90e8\u8ba1\u6570\u5668\u7684\u503c, \u5176\u516c\u5f0f\u662f Peroid = (2048 - Frequency) * 4 \u65b9\u6ce2\u901a\u9053 2 \u4e0e\u65b9\u6ce2\u901a\u9053 1 \u7684\u533a\u522b \u65b9\u6ce2\u901a\u9053 2 \u4e0e\u65b9\u6ce2\u901a\u9053 1 \u9996\u5148\u5728\u5bc4\u5b58\u5668\u5730\u5740\u4e0a\u6709\u533a\u522b: \u5bc4\u5b58\u5668\u540d\u79f0 \u65b9\u6ce2\u901a\u9053 1 \u5730\u5740 \u65b9\u6ce2\u901a\u9053 2 \u5730\u5740 NRX0 0xff10 - NRX1 0xff11 0xff16 NRX2 0xff12 0xff17 NRX3 0xff13 0xff18 NRX4 0xff14 0xff19 \u5176\u6b21\u65b9\u6ce2\u901a\u9053 2 \u4e0d\u5305\u542b\u626b\u9891\u5668. \u5728\u4ee3\u7801\u5b9e\u73b0\u4e0a\u53ea\u9700\u8981\u5c4f\u853d\u626b\u9891\u5668\u76f8\u5173\u4ee3\u7801, \u5373\u53ef\u65e0\u7f1d\u8fc1\u79fb\u65b9\u6ce2\u901a\u9053 1 \u7684\u4ee3\u7801\u5230\u65b9\u6ce2\u901a\u9053 2. \u4e0d\u518d\u8d58\u8ff0. \u4ee3\u7801\u5b9e\u73b0 \u4e3a\u4e86\u4fdd\u5b58\u97f3\u9891\u6570\u636e, \u4ee3\u7801\u5185\u5c06\u7528\u5230 BlipBuf \u5e93. \u5bf9\u8be5\u5e93\u505a\u4e00\u6b21\u7b80\u5355\u7684\u5c01\u88c5: struct Blip { data: BlipBuf, from: u32, // \u6700\u540e\u4e00\u6b21\u6539\u53d8\u632f\u5e45\u7684\u65f6\u95f4\u70b9 ampl: i32, // \u5f53\u524d\u632f\u5e45 } impl Blip { fn power_up(data: BlipBuf) -> Self { Self { data, from: 0x0000_0000, ampl: 0x0000_0000, } } fn set(&mut self, time: u32, ampl: i32) { self.from = time; let d = ampl - self.ampl; self.ampl = ampl; self.data.add_delta(time, d); } } \u5728\u4e86\u89e3\u65b9\u6ce2\u901a\u9053\u7684\u7ec4\u4ef6\u540e, \u4ee3\u7801\u5b9e\u73b0\u5f02\u5e38\u7b80\u5355, \u4e3b\u8981\u5904\u7406\u597d next() \u51fd\u6570\u5c31\u53ef\u4ee5\u4e86. struct ChannelSquare { reg: Rc<RefCell<Register>>, timer: Timer, lc: LengthCounter, ve: VolumeEnvelope, fs: FrequencySweep, blip: Blip, idx: u8, } impl ChannelSquare { fn power_up(blip: BlipBuf, mode: Channel) -> ChannelSquare { let reg = Rc::new(RefCell::new(Register::power_up(mode.clone()))); ChannelSquare { reg: reg.clone(), timer: Timer::power_up(8192), lc: LengthCounter::power_up(reg.clone()), ve: VolumeEnvelope::power_up(reg.clone()), fs: FrequencySweep::power_up(reg.clone()), blip: Blip::power_up(blip), idx: 1, } } // This assumes no volume or sweep adjustments need to be done in the meantime fn next(&mut self, cycles: u32) { let pat = match self.reg.borrow().get_duty() { 0 => 0b0000_0001, 1 => 0b1000_0001, 2 => 0b1000_0111, 3 => 0b0111_1110, _ => unreachable!(), }; let vol = i32::from(self.ve.volume); for _ in 0..self.timer.next(cycles) { let ampl = if !self.reg.borrow().get_trigger() || self.ve.volume == 0 { 0x00 } else if (pat >> self.idx) & 0x01 != 0x00 { vol } else { vol * -1 }; self.blip.set(self.blip.from + self.timer.period, ampl); self.idx = (self.idx + 1) % 8; } } } \u4e4b\u540e\u4e3a\u65b9\u6ce2\u901a\u9053\u5b9e\u73b0\u5185\u5b58\u8bfb\u5199, \u6ce8\u610f\u5f53\u5199 0xff14 \u548c 0xff19 \u5185\u5b58\u65f6, \u5c06\u89e6\u53d1\u4e8b\u4ef6\u64cd\u4f5c. \u5176\u4e2d\u626b\u9891\u5668\u7684\u4e8b\u4ef6\u662f\u65b9\u6ce2\u901a\u9053 1 \u72ec\u6709\u7684. impl Memory for ChannelSquare { fn get(&self, a: u16) -> u8 { match a { 0xff10 | 0xff15 => self.reg.borrow().nrx0, 0xff11 | 0xff16 => self.reg.borrow().nrx1, 0xff12 | 0xff17 => self.reg.borrow().nrx2, 0xff13 | 0xff18 => self.reg.borrow().nrx3, 0xff14 | 0xff19 => self.reg.borrow().nrx4, _ => unreachable!(), } } fn set(&mut self, a: u16, v: u8) { match a { 0xff10 | 0xff15 => self.reg.borrow_mut().nrx0 = v, 0xff11 | 0xff16 => { self.reg.borrow_mut().nrx1 = v; self.lc.n = self.reg.borrow().get_length_load(); } 0xff12 | 0xff17 => self.reg.borrow_mut().nrx2 = v, 0xff13 | 0xff18 => { self.reg.borrow_mut().nrx3 = v; self.timer.period = period(self.reg.clone()); } 0xff14 | 0xff19 => { self.reg.borrow_mut().nrx4 = v; self.timer.period = period(self.reg.clone()); // Trigger Event // // Writing a value to NRx4 with bit 7 set causes the following things to occur: // // - Channel is enabled (see length counter). // - If length counter is zero, it is set to 64 (256 for wave channel). // - Frequency timer is reloaded with period. // - Volume envelope timer is reloaded with period. // - Channel volume is reloaded from NRx2. // - Noise channel's LFSR bits are all set to 1. // - Wave channel's position is set to 0 but sample buffer is NOT refilled. // - Square 1's sweep does several things (see frequency sweep). // // Note that if the channel's DAC is off, after the above actions occur the channel will be immediately // disabled again. if self.reg.borrow().get_trigger() { self.lc.reload(); self.ve.reload(); if self.reg.borrow().channel == Channel::Square1 { self.fs.reload(); } } } _ => unreachable!(), } } }","title":"GB-\u97f3\u9891-\u65b9\u6ce2\u901a\u9053 1 & 2"},{"location":"content/gameboy/audio/square/#1-2","text":"\u65b9\u6ce2\u901a\u9053 1 \u5177\u6709\u626b\u9891\u548c\u5305\u7edc\u529f\u80fd. \u4ece\u529f\u80fd\u7ec4\u4ef6\u6765\u8bf4, \u65b9\u6ce2\u901a\u9053 1 \u4e3b\u8981\u5305\u542b\u5b9a\u65f6\u5668, \u957f\u5ea6\u8ba1\u6570\u5668, \u97f3\u91cf\u8c03\u8282\u5668\u548c\u626b\u9891\u5668\u51e0\u4e2a\u529f\u80fd\u7ec4\u4ef6. \u5b83\u4e0e\u65b9\u6ce2\u901a\u9053 2 \u51e0\u4e4e\u4e00\u81f4, \u552f\u4e00\u533a\u522b\u662f\u65b9\u6ce2\u901a\u9053 2 \u4e0d\u5305\u542b\u626b\u9891\u5668. \u4e0b\u9762\u5c06\u5148\u884c\u4ecb\u7ecd\u65b9\u6ce2\u901a\u9053 1 \u7684\u5bc4\u5b58\u5668\u4e0e\u5176\u529f\u80fd\u7ec6\u8282.","title":"\u65b9\u6ce2\u901a\u9053 1 &amp; 2"},{"location":"content/gameboy/audio/square/#ff10","text":"\u4f4d \u540d\u79f0 \u8bf4\u660e Bit 6-4 Sweep Time \u626b\u9891\u5668\u5468\u671f Bit 3 Sweep Increase/Decrease 0: \u626b\u9891\u5668\u63d0\u5347\u9891\u7387 1: \u626b\u9891\u5668\u51cf\u5c11\u9891\u7387 Bit 2-0 Number of sweep shift \u626b\u9891\u5668\u7684\u79fb\u4f4d\u503c Sweep Time 000: sweep off - no freq change 001: 7.8 ms (1/128Hz) 010: 15.6 ms (2/128Hz) 011: 23.4 ms (3/128Hz) 100: 31.3 ms (4/128Hz) 101: 39.1 ms (5/128Hz) 110: 46.9 ms (6/128Hz) 111: 54.7 ms (7/128Hz) \u6bcf\u4e2a shift \u7684\u9891\u7387\u53d8\u5316(NR13, NR14)\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97, \u5176\u4e2d X(0) \u662f\u521d\u59cb\u9891\u7387, X(t-1) \u662f\u8ba1\u7b97\u540e\u7684\u9891\u7387: X(t) = X(t-1) +/- X(t-1)/2^n","title":"FF10"},{"location":"content/gameboy/audio/square/#ff11","text":"\u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7-6 Wave Pattern Duty \u6ce2\u5f62\u5360\u7a7a\u6bd4\u6a21\u5f0f Bit 5-0 Sound length \u58f0\u97f3\u957f\u5ea6 Wave Duty Wave Duty \u7528\u4e8e\u63a7\u5236\u65b9\u6ce2\u901a\u9053 1 \u7684\u6ce2\u5f62\u5360\u7a7a\u6bd4. \u65b9\u6ce2\u901a\u9053 1 \u7684\u97f3\u9891\u8f93\u51fa\u4f1a\u88ab\u88c1\u526a, \u5728\u4ee5 8 \u4e3a\u5468\u671f\u7684\u65f6\u95f4\u5185, \u53ea\u6709\u5176\u4e2d\u56fa\u5b9a\u7684\u65f6\u95f4\u6bb5\u4f1a\u6709\u58f0\u6ce2\u8f93\u51fa, \u5176\u4f59\u65f6\u95f4\u65e0\u8bba\u539f\u59cb\u58f0\u6ce2\u7684\u632f\u5e45\u662f\u591a\u5c11, \u90fd\u4ee5 0 \u5bf9\u5f85. \u4e0b\u8868\u5217\u51fa\u4e86 Wave Duty \u4ece 0 \u5230 3 \u8fd9\u56db\u79cd\u60c5\u51b5\u5bf9\u5e94\u7684\u5360\u7a7a\u6bd4\u4fe1\u606f. \u5f53 Waveform \u4e2d\u7684\u67d0\u4f4d\u4e3a 0 \u65f6, \u5373\u8868\u793a\u5728\u4ee5 8 \u4e3a\u5468\u671f\u7684\u65f6\u95f4\u5185\u4e0d\u5141\u8bb8\u8be5\u65f6\u95f4\u6bb5\u8f93\u51fa\u97f3\u9891\u4fe1\u53f7. Duty Waveform Ratio 00 00000001 12.5% 01 10000001 25% 10 10000111 50% 11 01111110 75% Sound Length \u7528\u4e8e\u957f\u5ea6\u8ba1\u6570\u5668(LengthCounter) \u8ba1\u6570\u7684\u521d\u59cb\u503c. \u5f53 NR14 \u7684\u7b2c 6 \u4f4d\u88ab\u8bbe\u7f6e\u4e3a 1 \u65f6, \u957f\u5ea6\u8ba1\u6570\u5668\u5c06\u52a0\u8f7d Sound Length.","title":"FF11"},{"location":"content/gameboy/audio/square/#ff12","text":"\u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7-4 Initial Volume of envelope \u8303\u56f4\u4e3a (00-0F) (0=No Sound) Bit 3 Envelope Direction 0: \u51cf\u5c11, 1: \u589e\u52a0 Bit 2-0 Number of envelope sweep \u8303\u56f4 0-7, \u5982\u679c\u662f 0, \u5219\u505c\u6b62\u97f3\u91cf\u5305\u7edc","title":"FF12"},{"location":"content/gameboy/audio/square/#ff13","text":"\u65b9\u6ce2\u901a\u9053 1 \u7684\u97f3\u9891\u9891\u7387\u662f 11 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570, 0xff13 \u5bc4\u5b58\u5668\u5b58\u50a8\u8be5\u6570\u5b57\u7684\u4f4e 8 \u4e3a. \u9ad8 3 \u4f4d\u5b58\u50a8\u5728 0xff14 \u5bc4\u5b58\u5668\u4e2d.","title":"FF13"},{"location":"content/gameboy/audio/square/#ff14","text":"\u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7 Initial \u5199\u5165 1, \u5219\u91cd\u542f\u97f3\u9891\u7cfb\u7edf Bit 6 Counter/consecutive selection \u5199\u5165 1, \u5219\u957f\u5ea6\u8ba1\u6570\u5668\u5230\u671f\u540e\u505c\u6b62\u8f93\u51fa Bit 2-0 Frequency's higher 3 bits \u9891\u7387\u7684\u9ad8 3 \u4f4d \u9891\u7387\u7528\u6765\u8bbe\u7f6e\u97f3\u9891\u901a\u9053\u5185\u90e8\u8ba1\u6570\u5668\u7684\u503c, \u5176\u516c\u5f0f\u662f Peroid = (2048 - Frequency) * 4","title":"FF14"},{"location":"content/gameboy/audio/square/#2-1","text":"\u65b9\u6ce2\u901a\u9053 2 \u4e0e\u65b9\u6ce2\u901a\u9053 1 \u9996\u5148\u5728\u5bc4\u5b58\u5668\u5730\u5740\u4e0a\u6709\u533a\u522b: \u5bc4\u5b58\u5668\u540d\u79f0 \u65b9\u6ce2\u901a\u9053 1 \u5730\u5740 \u65b9\u6ce2\u901a\u9053 2 \u5730\u5740 NRX0 0xff10 - NRX1 0xff11 0xff16 NRX2 0xff12 0xff17 NRX3 0xff13 0xff18 NRX4 0xff14 0xff19 \u5176\u6b21\u65b9\u6ce2\u901a\u9053 2 \u4e0d\u5305\u542b\u626b\u9891\u5668. \u5728\u4ee3\u7801\u5b9e\u73b0\u4e0a\u53ea\u9700\u8981\u5c4f\u853d\u626b\u9891\u5668\u76f8\u5173\u4ee3\u7801, \u5373\u53ef\u65e0\u7f1d\u8fc1\u79fb\u65b9\u6ce2\u901a\u9053 1 \u7684\u4ee3\u7801\u5230\u65b9\u6ce2\u901a\u9053 2. \u4e0d\u518d\u8d58\u8ff0.","title":"\u65b9\u6ce2\u901a\u9053 2 \u4e0e\u65b9\u6ce2\u901a\u9053 1 \u7684\u533a\u522b"},{"location":"content/gameboy/audio/square/#_1","text":"\u4e3a\u4e86\u4fdd\u5b58\u97f3\u9891\u6570\u636e, \u4ee3\u7801\u5185\u5c06\u7528\u5230 BlipBuf \u5e93. \u5bf9\u8be5\u5e93\u505a\u4e00\u6b21\u7b80\u5355\u7684\u5c01\u88c5: struct Blip { data: BlipBuf, from: u32, // \u6700\u540e\u4e00\u6b21\u6539\u53d8\u632f\u5e45\u7684\u65f6\u95f4\u70b9 ampl: i32, // \u5f53\u524d\u632f\u5e45 } impl Blip { fn power_up(data: BlipBuf) -> Self { Self { data, from: 0x0000_0000, ampl: 0x0000_0000, } } fn set(&mut self, time: u32, ampl: i32) { self.from = time; let d = ampl - self.ampl; self.ampl = ampl; self.data.add_delta(time, d); } } \u5728\u4e86\u89e3\u65b9\u6ce2\u901a\u9053\u7684\u7ec4\u4ef6\u540e, \u4ee3\u7801\u5b9e\u73b0\u5f02\u5e38\u7b80\u5355, \u4e3b\u8981\u5904\u7406\u597d next() \u51fd\u6570\u5c31\u53ef\u4ee5\u4e86. struct ChannelSquare { reg: Rc<RefCell<Register>>, timer: Timer, lc: LengthCounter, ve: VolumeEnvelope, fs: FrequencySweep, blip: Blip, idx: u8, } impl ChannelSquare { fn power_up(blip: BlipBuf, mode: Channel) -> ChannelSquare { let reg = Rc::new(RefCell::new(Register::power_up(mode.clone()))); ChannelSquare { reg: reg.clone(), timer: Timer::power_up(8192), lc: LengthCounter::power_up(reg.clone()), ve: VolumeEnvelope::power_up(reg.clone()), fs: FrequencySweep::power_up(reg.clone()), blip: Blip::power_up(blip), idx: 1, } } // This assumes no volume or sweep adjustments need to be done in the meantime fn next(&mut self, cycles: u32) { let pat = match self.reg.borrow().get_duty() { 0 => 0b0000_0001, 1 => 0b1000_0001, 2 => 0b1000_0111, 3 => 0b0111_1110, _ => unreachable!(), }; let vol = i32::from(self.ve.volume); for _ in 0..self.timer.next(cycles) { let ampl = if !self.reg.borrow().get_trigger() || self.ve.volume == 0 { 0x00 } else if (pat >> self.idx) & 0x01 != 0x00 { vol } else { vol * -1 }; self.blip.set(self.blip.from + self.timer.period, ampl); self.idx = (self.idx + 1) % 8; } } } \u4e4b\u540e\u4e3a\u65b9\u6ce2\u901a\u9053\u5b9e\u73b0\u5185\u5b58\u8bfb\u5199, \u6ce8\u610f\u5f53\u5199 0xff14 \u548c 0xff19 \u5185\u5b58\u65f6, \u5c06\u89e6\u53d1\u4e8b\u4ef6\u64cd\u4f5c. \u5176\u4e2d\u626b\u9891\u5668\u7684\u4e8b\u4ef6\u662f\u65b9\u6ce2\u901a\u9053 1 \u72ec\u6709\u7684. impl Memory for ChannelSquare { fn get(&self, a: u16) -> u8 { match a { 0xff10 | 0xff15 => self.reg.borrow().nrx0, 0xff11 | 0xff16 => self.reg.borrow().nrx1, 0xff12 | 0xff17 => self.reg.borrow().nrx2, 0xff13 | 0xff18 => self.reg.borrow().nrx3, 0xff14 | 0xff19 => self.reg.borrow().nrx4, _ => unreachable!(), } } fn set(&mut self, a: u16, v: u8) { match a { 0xff10 | 0xff15 => self.reg.borrow_mut().nrx0 = v, 0xff11 | 0xff16 => { self.reg.borrow_mut().nrx1 = v; self.lc.n = self.reg.borrow().get_length_load(); } 0xff12 | 0xff17 => self.reg.borrow_mut().nrx2 = v, 0xff13 | 0xff18 => { self.reg.borrow_mut().nrx3 = v; self.timer.period = period(self.reg.clone()); } 0xff14 | 0xff19 => { self.reg.borrow_mut().nrx4 = v; self.timer.period = period(self.reg.clone()); // Trigger Event // // Writing a value to NRx4 with bit 7 set causes the following things to occur: // // - Channel is enabled (see length counter). // - If length counter is zero, it is set to 64 (256 for wave channel). // - Frequency timer is reloaded with period. // - Volume envelope timer is reloaded with period. // - Channel volume is reloaded from NRx2. // - Noise channel's LFSR bits are all set to 1. // - Wave channel's position is set to 0 but sample buffer is NOT refilled. // - Square 1's sweep does several things (see frequency sweep). // // Note that if the channel's DAC is off, after the above actions occur the channel will be immediately // disabled again. if self.reg.borrow().get_trigger() { self.lc.reload(); self.ve.reload(); if self.reg.borrow().channel == Channel::Square1 { self.fs.reload(); } } } _ => unreachable!(), } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/audio/timer/","text":"512 Hz \u65f6\u949f\u4fe1\u53f7 Game Boy \u5185\u90e8\u5b58\u5728\u4e00\u4e2a 512 Hz \u65f6\u949f\u4fe1\u53f7, \u7528\u4e8e\u5411\u5e8f\u5217\u53d1\u751f\u5668(Frame Sequence)\u63d0\u4f9b\u4fe1\u53f7\u8f93\u5165. \u4e0b\u9762\u5c06\u5728\u4ee3\u7801\u4e2d\u5b9e\u73b0\u8be5\u65f6\u949f\u4fe1\u53f7. struct ChannelSquare {} struct ChannelWave {} struct ChannelNoise {} pub struct Apu { reg: Register, timer: Timer, channel1: ChannelSquare, channel2: ChannelSquare, channel3: ChannelWave, channel4: ChannelNoise, } impl Apu { pub fn power_up() -> Self { Self { reg: Register::power_up(Channel::Mixer), timer: Timer::power_up(4194304 / 512), channel1: ChannelSquare::power_up(), channel2: ChannelSquare::power_up(), channel3: ChannelWave::power_up(), channel4: ChannelNoise::power_up(), } } pub fn next(&mut self, cycles: u32) { if !self.reg.get_power() { return; } for _ in 0..self.timer.next(cycles) { self.channel1.next(self.timer.period); self.channel2.next(self.timer.period); self.channel3.next(self.timer.period); self.channel4.next(self.timer.period); // 512 Hz \u65f6\u949f\u4fe1\u53f7 // // ... Your Codes } } } \u7ed3\u6784\u4f53 Apu \u662f\u97f3\u9891\u6a21\u5757\u4e3b\u8981\u5bf9\u5916\u5bfc\u51fa\u7684\u7ed3\u6784\u7c7b\u578b, \u5b83\u9700\u8981\u88ab\u5d4c\u5165\u5185\u5b58\u7ba1\u7406\u6a21\u5757\u4e0a. \u6bcf\u5f53 CPU \u6267\u884c\u5b8c\u4e00\u6761\u6307\u4ee4, CPU \u901a\u77e5\u97f3\u9891\u6a21\u5757\u8be5\u6307\u4ee4\u7684\u6267\u884c\u5468\u671f, \u8fd9\u901a\u8fc7 next \u51fd\u6570\u5b8c\u6210. \u7531\u4e8e CPU \u7684\u65f6\u949f\u5468\u671f\u662f 4194304, \u56e0\u6b64\u4e3a\u4e86\u83b7\u53d6 512 Hz \u7684\u65f6\u949f\u4fe1\u53f7, \u53ea\u9700\u8981\u6bcf\u5f53 CPU \u6267\u884c\u6d88\u8017 4194304/512 \u5468\u671f\u65f6\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u4fe1\u53f7\u5373\u53ef. \u5728\u4ee3\u7801\u4e2d\u8868\u73b0\u6765\u770b, \u5c06\u4ee3\u7801\u5199\u5165 \"Your Codes\" \u4ee3\u7801\u5757\u5373\u53ef\u5b9e\u73b0\u6bcf\u79d2\u6267\u884c\u6307\u5b9a\u4ee3\u7801 512 \u6b21.","title":"GB-\u97f3\u9891-512 Hz \u65f6\u949f\u4fe1\u53f7"},{"location":"content/gameboy/audio/timer/#512-hz","text":"Game Boy \u5185\u90e8\u5b58\u5728\u4e00\u4e2a 512 Hz \u65f6\u949f\u4fe1\u53f7, \u7528\u4e8e\u5411\u5e8f\u5217\u53d1\u751f\u5668(Frame Sequence)\u63d0\u4f9b\u4fe1\u53f7\u8f93\u5165. \u4e0b\u9762\u5c06\u5728\u4ee3\u7801\u4e2d\u5b9e\u73b0\u8be5\u65f6\u949f\u4fe1\u53f7. struct ChannelSquare {} struct ChannelWave {} struct ChannelNoise {} pub struct Apu { reg: Register, timer: Timer, channel1: ChannelSquare, channel2: ChannelSquare, channel3: ChannelWave, channel4: ChannelNoise, } impl Apu { pub fn power_up() -> Self { Self { reg: Register::power_up(Channel::Mixer), timer: Timer::power_up(4194304 / 512), channel1: ChannelSquare::power_up(), channel2: ChannelSquare::power_up(), channel3: ChannelWave::power_up(), channel4: ChannelNoise::power_up(), } } pub fn next(&mut self, cycles: u32) { if !self.reg.get_power() { return; } for _ in 0..self.timer.next(cycles) { self.channel1.next(self.timer.period); self.channel2.next(self.timer.period); self.channel3.next(self.timer.period); self.channel4.next(self.timer.period); // 512 Hz \u65f6\u949f\u4fe1\u53f7 // // ... Your Codes } } } \u7ed3\u6784\u4f53 Apu \u662f\u97f3\u9891\u6a21\u5757\u4e3b\u8981\u5bf9\u5916\u5bfc\u51fa\u7684\u7ed3\u6784\u7c7b\u578b, \u5b83\u9700\u8981\u88ab\u5d4c\u5165\u5185\u5b58\u7ba1\u7406\u6a21\u5757\u4e0a. \u6bcf\u5f53 CPU \u6267\u884c\u5b8c\u4e00\u6761\u6307\u4ee4, CPU \u901a\u77e5\u97f3\u9891\u6a21\u5757\u8be5\u6307\u4ee4\u7684\u6267\u884c\u5468\u671f, \u8fd9\u901a\u8fc7 next \u51fd\u6570\u5b8c\u6210. \u7531\u4e8e CPU \u7684\u65f6\u949f\u5468\u671f\u662f 4194304, \u56e0\u6b64\u4e3a\u4e86\u83b7\u53d6 512 Hz \u7684\u65f6\u949f\u4fe1\u53f7, \u53ea\u9700\u8981\u6bcf\u5f53 CPU \u6267\u884c\u6d88\u8017 4194304/512 \u5468\u671f\u65f6\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u4fe1\u53f7\u5373\u53ef. \u5728\u4ee3\u7801\u4e2d\u8868\u73b0\u6765\u770b, \u5c06\u4ee3\u7801\u5199\u5165 \"Your Codes\" \u4ee3\u7801\u5757\u5373\u53ef\u5b9e\u73b0\u6bcf\u79d2\u6267\u884c\u6307\u5b9a\u4ee3\u7801 512 \u6b21.","title":"512 Hz \u65f6\u949f\u4fe1\u53f7"},{"location":"content/gameboy/audio/vol/","text":"\u97f3\u91cf\u5305\u7edc Game Boy \u97f3\u9891\u7cfb\u7edf\u7684\u6838\u5fc3\u672c\u8d28\u662f: \u8981\u60f3\u64ad\u653e\u58f0\u97f3, \u53ea\u8981\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u70b9\u5411\u7279\u5b9a\u7684\u5bc4\u5b58\u5668\u5199\u5165\u7279\u5b9a\u7684\u503c. \u6362\u53e5\u8bdd\u8bf4, Game Boy \u7684 CPU \u751f\u6210\u7684\u4fe1\u53f7\u662f\u5728\u65f6\u95f4-\u5e45\u5ea6\u5750\u6807\u8f74\u4e0a\u79bb\u6563\u7684\u4e00\u7cfb\u5217\u70b9. \u97f3\u91cf\u5305\u7edc\u7684\u4f5c\u7528\u4fbf\u662f\u5e73\u6ed1\u8fd9\u4e9b\u79bb\u6563\u7684\u70b9, \u540c\u65f6\u5411\u5176\u63d0\u4f9b\u4fe1\u53f7(\u97f3\u91cf)\u589e\u76ca\u6216\u8870\u51cf. \u97f3\u91cf\u5305\u7edc\u7531\u5e8f\u5217\u53d1\u751f\u5668\u4e3a\u5176\u63d0\u4f9b 64 Hz \u65f6\u949f. \u540c\u65f6\u5b83\u5185\u90e8\u5b58\u5728\u4e00\u4e2a\u8ba1\u6570\u5668, \u5f53\u65f6\u949f\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u65f6\u949f\u4fe1\u53f7\u5e76\u4e14\u97f3\u91cf\u5305\u7edc\u7684\u5468\u671f\u4e0d\u4e3a 0 \u65f6, \u5f53\u524d\u97f3\u91cf\u4e2d\u5c06\u52a0\u4e0a\u6216\u51cf\u53bb(\u7531 NRx2 \u8bbe\u5b9a)\u4e00\u4e2a\u503c\u6765\u8ba1\u7b97\u65b0\u97f3\u91cf, \u540c\u65f6\u8ba1\u6570\u5668\u51cf 1. \u5982\u679c\u6b64\u65b0\u97f3\u91cf\u5728 0 \u5230 15 \u8303\u56f4\u5185, \u5219\u97f3\u91cf\u4f1a\u66f4\u65b0, \u5426\u5219\u4fdd\u6301\u4e0d\u53d8, \u5e76\u4e14\u5728\u518d\u6b21\u89e6\u53d1\u901a\u9053\u4e4b\u524d\u4e0d\u4f1a\u5bf9\u5f53\u524d\u97f3\u91cf\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u81ea\u52a8\u589e\u52a0\u6216\u51cf\u5c11. \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u4e00\u70b9\u662f, \u5982\u679c\u97f3\u91cf\u5305\u7edc\u4e2d\u5b9a\u65f6\u5668\u7684\u5468\u671f\u4e3a 0, \u5219\u9ed8\u8ba4\u4ee5\u5468\u671f 8 \u66ff\u4ee3. \u4ee3\u7801\u5b9e\u73b0 \u4e0e\u97f3\u91cf\u5305\u7edc\u76f8\u5173\u7684\u5bc4\u5b58\u5668\u6570\u503c\u6709\u4e24\u4e2a, \u5206\u522b\u7531\u5bc4\u5b58\u5668\u7684\u4e24\u4e2a\u51fd\u6570 get_period() \u4e0e get_starting_volume() \u6307\u5b9a, \u4ee3\u8868\u8ba1\u65f6\u5668\u5468\u671f\u4e0e\u97f3\u91cf\u5305\u7edc\u7684\u521d\u59cb\u5316\u97f3\u91cf\u5927\u5c0f. struct VolumeEnvelope { reg: Rc<RefCell<Register>>, timer: Timer, volume: u8, } impl VolumeEnvelope { fn power_up(reg: Rc<RefCell<Register>>) -> Self { Self { reg, timer: Timer::power_up(8), volume: 0x00, } } fn reload(&mut self) { let p = self.reg.borrow().get_period(); self.timer.period = if p == 0 { 8 } else { u32::from(p) }; self.volume = self.reg.borrow().get_starting_volume(); } fn next(&mut self) { if self.reg.borrow().get_period() == 0 { return; } if self.timer.next(1) == 0x00 { return; }; // If this new volume within the 0 to 15 range, the volume is updated let v = if self.reg.borrow().get_envelope_add_mode() { self.volume.wrapping_add(1) } else { self.volume.wrapping_sub(1) }; if v <= 15 { self.volume = v; } } }","title":"GB-\u97f3\u9891-\u97f3\u91cf\u5305\u7edc"},{"location":"content/gameboy/audio/vol/#_1","text":"Game Boy \u97f3\u9891\u7cfb\u7edf\u7684\u6838\u5fc3\u672c\u8d28\u662f: \u8981\u60f3\u64ad\u653e\u58f0\u97f3, \u53ea\u8981\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u70b9\u5411\u7279\u5b9a\u7684\u5bc4\u5b58\u5668\u5199\u5165\u7279\u5b9a\u7684\u503c. \u6362\u53e5\u8bdd\u8bf4, Game Boy \u7684 CPU \u751f\u6210\u7684\u4fe1\u53f7\u662f\u5728\u65f6\u95f4-\u5e45\u5ea6\u5750\u6807\u8f74\u4e0a\u79bb\u6563\u7684\u4e00\u7cfb\u5217\u70b9. \u97f3\u91cf\u5305\u7edc\u7684\u4f5c\u7528\u4fbf\u662f\u5e73\u6ed1\u8fd9\u4e9b\u79bb\u6563\u7684\u70b9, \u540c\u65f6\u5411\u5176\u63d0\u4f9b\u4fe1\u53f7(\u97f3\u91cf)\u589e\u76ca\u6216\u8870\u51cf. \u97f3\u91cf\u5305\u7edc\u7531\u5e8f\u5217\u53d1\u751f\u5668\u4e3a\u5176\u63d0\u4f9b 64 Hz \u65f6\u949f. \u540c\u65f6\u5b83\u5185\u90e8\u5b58\u5728\u4e00\u4e2a\u8ba1\u6570\u5668, \u5f53\u65f6\u949f\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u65f6\u949f\u4fe1\u53f7\u5e76\u4e14\u97f3\u91cf\u5305\u7edc\u7684\u5468\u671f\u4e0d\u4e3a 0 \u65f6, \u5f53\u524d\u97f3\u91cf\u4e2d\u5c06\u52a0\u4e0a\u6216\u51cf\u53bb(\u7531 NRx2 \u8bbe\u5b9a)\u4e00\u4e2a\u503c\u6765\u8ba1\u7b97\u65b0\u97f3\u91cf, \u540c\u65f6\u8ba1\u6570\u5668\u51cf 1. \u5982\u679c\u6b64\u65b0\u97f3\u91cf\u5728 0 \u5230 15 \u8303\u56f4\u5185, \u5219\u97f3\u91cf\u4f1a\u66f4\u65b0, \u5426\u5219\u4fdd\u6301\u4e0d\u53d8, \u5e76\u4e14\u5728\u518d\u6b21\u89e6\u53d1\u901a\u9053\u4e4b\u524d\u4e0d\u4f1a\u5bf9\u5f53\u524d\u97f3\u91cf\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u81ea\u52a8\u589e\u52a0\u6216\u51cf\u5c11. \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u4e00\u70b9\u662f, \u5982\u679c\u97f3\u91cf\u5305\u7edc\u4e2d\u5b9a\u65f6\u5668\u7684\u5468\u671f\u4e3a 0, \u5219\u9ed8\u8ba4\u4ee5\u5468\u671f 8 \u66ff\u4ee3.","title":"\u97f3\u91cf\u5305\u7edc"},{"location":"content/gameboy/audio/vol/#_2","text":"\u4e0e\u97f3\u91cf\u5305\u7edc\u76f8\u5173\u7684\u5bc4\u5b58\u5668\u6570\u503c\u6709\u4e24\u4e2a, \u5206\u522b\u7531\u5bc4\u5b58\u5668\u7684\u4e24\u4e2a\u51fd\u6570 get_period() \u4e0e get_starting_volume() \u6307\u5b9a, \u4ee3\u8868\u8ba1\u65f6\u5668\u5468\u671f\u4e0e\u97f3\u91cf\u5305\u7edc\u7684\u521d\u59cb\u5316\u97f3\u91cf\u5927\u5c0f. struct VolumeEnvelope { reg: Rc<RefCell<Register>>, timer: Timer, volume: u8, } impl VolumeEnvelope { fn power_up(reg: Rc<RefCell<Register>>) -> Self { Self { reg, timer: Timer::power_up(8), volume: 0x00, } } fn reload(&mut self) { let p = self.reg.borrow().get_period(); self.timer.period = if p == 0 { 8 } else { u32::from(p) }; self.volume = self.reg.borrow().get_starting_volume(); } fn next(&mut self) { if self.reg.borrow().get_period() == 0 { return; } if self.timer.next(1) == 0x00 { return; }; // If this new volume within the 0 to 15 range, the volume is updated let v = if self.reg.borrow().get_envelope_add_mode() { self.volume.wrapping_add(1) } else { self.volume.wrapping_sub(1) }; if v <= 15 { self.volume = v; } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/audio/wave/","text":"\u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053 \u8be5\u901a\u9053\u53ef\u7528\u4e8e\u8f93\u51fa\u6570\u5b57\u97f3\u9891, \u6ce2\u5f62\u901a\u9053\u5185\u90e8\u4fdd\u5b58\u4e00\u4e2a 16 \u5b57\u8282\u957f\u5ea6\u7684\u6ce2\u5f62\u8868, \u6bcf 4 Bit \u91c7\u6837\u4e00\u6b21, \u56e0\u6b64\u6ce2\u5f62\u901a\u9053\u53ef\u4ee5\u64ad\u653e\u5468\u671f\u4e3a 32 \u7684\u97f3\u9891. \u6bcf\u4e2a\u5b57\u8282\u7f16\u7801\u4e24\u4e2a\u6837\u672c, \u5176\u4e2d\u9ad8\u4f4d\u5177\u6709\u8f83\u9ad8\u4f18\u5148\u7ea7. \u6ce2\u5f62\u901a\u9053\u540c\u65f6\u5177\u6709\u4e00\u4e2a\u4f4d\u7f6e\u8ba1\u6570\u5668, \u6807\u660e\u5f53\u524d\u5df2\u7ecf\u64ad\u653e\u5230\u6ce2\u8868\u7684\u7b2c\u51e0\u9879. FF1A \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7 Sound on/off DAC \u542f\u7528/\u7981\u7528\u6807\u5fd7 \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u540c\u65f6\u5177\u6709\u4e00\u4e2a DAC(\u6570\u4f4d\u8f6c\u6362\u5668)\u7ec4\u4ef6, \u5b83\u63a5\u6536\u6570\u5b57\u4fe1\u53f7\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6a21\u62df\u4fe1\u53f7. \u8be5\u7ec4\u4ef6\u7684\u5177\u4f53\u529f\u80fd\u8868\u8fbe\u4e3a: \u4ece\u6ce2\u8868\u63a5\u6536\u5f53\u524d\u91c7\u6837\u503c sample, \u7136\u540e\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6 volumn_code, \u6839\u636e volumn_code \u627e\u5230\u5bf9\u5e94\u7684 shift \u503c, \u5e76\u8fdb\u884c\u6309\u4f4d\u53f3\u79fb, \u6700\u7ec8\u8f93\u51fa sample >> shift. \u5373\u4f7f\u7981\u7528 DAC, \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u4f9d\u7136\u4f1a\u6b63\u5e38\u8fd0\u4f5c, \u53ea\u662f\u5176\u97f3\u9891\u8f93\u5165\u59cb\u7ec8\u4e3a 0. FF1B \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7-0 Sound length \u58f0\u97f3\u957f\u5ea6 \u7528\u4e8e\u957f\u5ea6\u8ba1\u6570\u5668(LengthCounter)\u8ba1\u6570\u7684\u521d\u59cb\u503c. \u5f53 NR34 \u7684\u7b2c 6 \u4f4d\u88ab\u8bbe\u7f6e\u4e3a 1 \u65f6, \u957f\u5ea6\u8ba1\u6570\u5668\u5c06\u52a0\u8f7d Sound Length. FF1C \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 6-5 Select output level \u8870\u51cf\u8f93\u51fa\u97f3\u91cf \u4e0d\u540c Select output level \u4e0b\u5bf9\u5e94\u7684\u97f3\u91cf\u8870\u51cf\u7684\u503c: 0: \u9759\u97f3. \u7531\u4e8e Wave RAM \u5185\u7684\u6570\u636e\u8303\u56f4\u4e3a 0 - 15, \u76f8\u5f53\u4e8e\u5bf9\u5176\u53f3\u79fb 4 \u4f4d. 1: 100% \u97f3\u91cf. \u4e0d\u505a\u5904\u7406. 2: 50% \u97f3\u91cf. \u76f8\u5f53\u4e8e\u5bf9 Wave RAM \u7684\u6570\u636e\u53f3\u79fb 1 \u4f4d. 3: 25% \u97f3\u91cf. \u76f8\u5f53\u4e8e\u5bf9 Wave RAM \u7684\u6570\u636e\u53f3\u79fb 2 \u4f4d. FF1D \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u7684\u97f3\u9891\u9891\u7387\u662f 11 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570, 0xff1d \u5bc4\u5b58\u5668\u5b58\u50a8\u8be5\u6570\u5b57\u7684\u4f4e 8 \u4e3a. \u9ad8 3 \u4f4d\u5b58\u50a8\u5728 0xff1e \u5bc4\u5b58\u5668\u4e2d. FF1E \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7 Initial \u5199\u5165 1, \u5219\u91cd\u542f\u97f3\u9891\u7cfb\u7edf Bit 6 Counter/consecutive selection \u5199\u5165 1, \u5219\u957f\u5ea6\u8ba1\u6570\u5668\u5230\u671f\u540e\u505c\u6b62\u8f93\u51fa Bit 2-0 Frequency's higher 3 bits \u9891\u7387\u7684\u9ad8 3 \u4f4d \u9891\u7387\u7528\u6765\u8bbe\u7f6e\u97f3\u9891\u901a\u9053\u5185\u90e8\u8ba1\u6570\u5668\u7684\u503c, \u5176\u516c\u5f0f\u662f Peroid = (2048 - Frequency) * 2 FF30-FF3F \u6ce2\u5f62\u91c7\u6837\u6570\u636e \u8be5\u5185\u5b58\u533a\u95f4\u5b58\u50a8\u4e86\u4efb\u610f\u58f0\u97f3\u6570\u636e\u7684\u6ce2\u5f62\u91c7\u6837\u6570\u636e. \u6bcf\u4e00\u4e2a\u91c7\u6837\u6570\u636e\u5360 4 \u4f4d(0 - 15), \u56e0\u6b64\u8be5\u5b58\u50a8\u533a\u53ef\u4ee5\u4fdd\u5b58 32 \u4e2a 4 \u4f4d\u97f3\u9891\u91c7\u6837, \u8fd9\u4e9b\u91c7\u6837\u6570\u636e\u5c06\u88ab\u64ad\u653e, \u64ad\u653e\u65f6\u9996\u5148\u64ad\u653e\u9ad8 4 \u4f4d. \u4ee3\u7801\u5b9e\u73b0 \u4ee3\u7801\u7ed3\u6784\u4e0e Square \u533a\u522b\u4e0d\u5927. \u9700\u8981\u6ce8\u610f\u7684\u662f\u5f53\u89e6\u53d1\u4e8b\u4ef6\u65f6, waveidx \u9700\u8981\u88ab\u91cd\u7f6e\u4e3a 0. // The wave channel plays a 32-entry wave table made up of 4-bit samples. Each byte encodes two samples, the first in // the high bits. The wave channel has a sample buffer and position counter. // The wave channel's frequency timer period is set to (2048-frequency)*2. When the timer generates a clock, the // position counter is advanced one sample in the wave table, looping back to the beginning when it goes past the end, // then a sample is read into the sample buffer from this NEW position. // The DAC receives the current value from the upper/lower nibble of the sample buffer, shifted right by the volume // control. // // Code Shift Volume // ----------------------- // 0 4 0% (silent) // 1 0 100% // 2 1 50% // 3 2 25% // Wave RAM can only be properly accessed when the channel is disabled (see obscure behavior). struct ChannelWave { reg: Rc<RefCell<Register>>, timer: Timer, lc: LengthCounter, blip: Blip, waveram: [u8; 16], waveidx: usize, } impl ChannelWave { fn power_up(blip: BlipBuf) -> ChannelWave { let reg = Rc::new(RefCell::new(Register::power_up(Channel::Wave))); ChannelWave { reg: reg.clone(), timer: Timer::power_up(8192), lc: LengthCounter::power_up(reg.clone()), blip: Blip::power_up(blip), waveram: [0x00; 16], waveidx: 0x00, } } fn next(&mut self, cycles: u32) { let s = match self.reg.borrow().get_volume_code() { 0 => 4, 1 => 0, 2 => 1, 3 => 2, _ => unreachable!(), }; for _ in 0..self.timer.next(cycles) { let sample = if self.waveidx & 0x01 == 0x00 { self.waveram[self.waveidx / 2] & 0x0f } else { self.waveram[self.waveidx / 2] >> 4 }; let ampl = if !self.reg.borrow().get_trigger() || !self.reg.borrow().get_dac_power() { 0x00 } else { i32::from(sample >> s) }; self.blip.set(self.blip.from + self.timer.period, ampl); self.waveidx = (self.waveidx + 1) % 32; } } } impl Memory for ChannelWave { fn get(&self, a: u16) -> u8 { match a { 0xff1a => self.reg.borrow().nrx0, 0xff1b => self.reg.borrow().nrx1, 0xff1c => self.reg.borrow().nrx2, 0xff1d => self.reg.borrow().nrx3, 0xff1e => self.reg.borrow().nrx4, 0xff30...0xff3f => self.waveram[a as usize - 0xff30], _ => unreachable!(), } } fn set(&mut self, a: u16, v: u8) { match a { 0xff1a => self.reg.borrow_mut().nrx0 = v, 0xff1b => { self.reg.borrow_mut().nrx1 = v; self.lc.n = self.reg.borrow().get_length_load(); } 0xff1c => self.reg.borrow_mut().nrx2 = v, 0xff1d => { self.reg.borrow_mut().nrx3 = v; self.timer.period = period(self.reg.clone()); } 0xff1e => { self.reg.borrow_mut().nrx4 = v; self.timer.period = period(self.reg.clone()); if self.reg.borrow().get_trigger() { self.lc.reload(); self.waveidx = 0x00; } } 0xff30...0xff3f => self.waveram[a as usize - 0xff30] = v, _ => unreachable!(), } } }","title":"GB-\u97f3\u9891-\u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053"},{"location":"content/gameboy/audio/wave/#_1","text":"\u8be5\u901a\u9053\u53ef\u7528\u4e8e\u8f93\u51fa\u6570\u5b57\u97f3\u9891, \u6ce2\u5f62\u901a\u9053\u5185\u90e8\u4fdd\u5b58\u4e00\u4e2a 16 \u5b57\u8282\u957f\u5ea6\u7684\u6ce2\u5f62\u8868, \u6bcf 4 Bit \u91c7\u6837\u4e00\u6b21, \u56e0\u6b64\u6ce2\u5f62\u901a\u9053\u53ef\u4ee5\u64ad\u653e\u5468\u671f\u4e3a 32 \u7684\u97f3\u9891. \u6bcf\u4e2a\u5b57\u8282\u7f16\u7801\u4e24\u4e2a\u6837\u672c, \u5176\u4e2d\u9ad8\u4f4d\u5177\u6709\u8f83\u9ad8\u4f18\u5148\u7ea7. \u6ce2\u5f62\u901a\u9053\u540c\u65f6\u5177\u6709\u4e00\u4e2a\u4f4d\u7f6e\u8ba1\u6570\u5668, \u6807\u660e\u5f53\u524d\u5df2\u7ecf\u64ad\u653e\u5230\u6ce2\u8868\u7684\u7b2c\u51e0\u9879.","title":"\u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053"},{"location":"content/gameboy/audio/wave/#ff1a","text":"\u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7 Sound on/off DAC \u542f\u7528/\u7981\u7528\u6807\u5fd7 \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u540c\u65f6\u5177\u6709\u4e00\u4e2a DAC(\u6570\u4f4d\u8f6c\u6362\u5668)\u7ec4\u4ef6, \u5b83\u63a5\u6536\u6570\u5b57\u4fe1\u53f7\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6a21\u62df\u4fe1\u53f7. \u8be5\u7ec4\u4ef6\u7684\u5177\u4f53\u529f\u80fd\u8868\u8fbe\u4e3a: \u4ece\u6ce2\u8868\u63a5\u6536\u5f53\u524d\u91c7\u6837\u503c sample, \u7136\u540e\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6 volumn_code, \u6839\u636e volumn_code \u627e\u5230\u5bf9\u5e94\u7684 shift \u503c, \u5e76\u8fdb\u884c\u6309\u4f4d\u53f3\u79fb, \u6700\u7ec8\u8f93\u51fa sample >> shift. \u5373\u4f7f\u7981\u7528 DAC, \u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u4f9d\u7136\u4f1a\u6b63\u5e38\u8fd0\u4f5c, \u53ea\u662f\u5176\u97f3\u9891\u8f93\u5165\u59cb\u7ec8\u4e3a 0.","title":"FF1A"},{"location":"content/gameboy/audio/wave/#ff1b","text":"\u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7-0 Sound length \u58f0\u97f3\u957f\u5ea6 \u7528\u4e8e\u957f\u5ea6\u8ba1\u6570\u5668(LengthCounter)\u8ba1\u6570\u7684\u521d\u59cb\u503c. \u5f53 NR34 \u7684\u7b2c 6 \u4f4d\u88ab\u8bbe\u7f6e\u4e3a 1 \u65f6, \u957f\u5ea6\u8ba1\u6570\u5668\u5c06\u52a0\u8f7d Sound Length.","title":"FF1B"},{"location":"content/gameboy/audio/wave/#ff1c","text":"\u4f4d \u540d\u79f0 \u8bf4\u660e Bit 6-5 Select output level \u8870\u51cf\u8f93\u51fa\u97f3\u91cf \u4e0d\u540c Select output level \u4e0b\u5bf9\u5e94\u7684\u97f3\u91cf\u8870\u51cf\u7684\u503c: 0: \u9759\u97f3. \u7531\u4e8e Wave RAM \u5185\u7684\u6570\u636e\u8303\u56f4\u4e3a 0 - 15, \u76f8\u5f53\u4e8e\u5bf9\u5176\u53f3\u79fb 4 \u4f4d. 1: 100% \u97f3\u91cf. \u4e0d\u505a\u5904\u7406. 2: 50% \u97f3\u91cf. \u76f8\u5f53\u4e8e\u5bf9 Wave RAM \u7684\u6570\u636e\u53f3\u79fb 1 \u4f4d. 3: 25% \u97f3\u91cf. \u76f8\u5f53\u4e8e\u5bf9 Wave RAM \u7684\u6570\u636e\u53f3\u79fb 2 \u4f4d.","title":"FF1C"},{"location":"content/gameboy/audio/wave/#ff1d","text":"\u53ef\u7f16\u7a0b\u6ce2\u5f62\u901a\u9053\u7684\u97f3\u9891\u9891\u7387\u662f 11 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570, 0xff1d \u5bc4\u5b58\u5668\u5b58\u50a8\u8be5\u6570\u5b57\u7684\u4f4e 8 \u4e3a. \u9ad8 3 \u4f4d\u5b58\u50a8\u5728 0xff1e \u5bc4\u5b58\u5668\u4e2d.","title":"FF1D"},{"location":"content/gameboy/audio/wave/#ff1e","text":"\u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7 Initial \u5199\u5165 1, \u5219\u91cd\u542f\u97f3\u9891\u7cfb\u7edf Bit 6 Counter/consecutive selection \u5199\u5165 1, \u5219\u957f\u5ea6\u8ba1\u6570\u5668\u5230\u671f\u540e\u505c\u6b62\u8f93\u51fa Bit 2-0 Frequency's higher 3 bits \u9891\u7387\u7684\u9ad8 3 \u4f4d \u9891\u7387\u7528\u6765\u8bbe\u7f6e\u97f3\u9891\u901a\u9053\u5185\u90e8\u8ba1\u6570\u5668\u7684\u503c, \u5176\u516c\u5f0f\u662f Peroid = (2048 - Frequency) * 2","title":"FF1E"},{"location":"content/gameboy/audio/wave/#ff30-ff3f","text":"\u8be5\u5185\u5b58\u533a\u95f4\u5b58\u50a8\u4e86\u4efb\u610f\u58f0\u97f3\u6570\u636e\u7684\u6ce2\u5f62\u91c7\u6837\u6570\u636e. \u6bcf\u4e00\u4e2a\u91c7\u6837\u6570\u636e\u5360 4 \u4f4d(0 - 15), \u56e0\u6b64\u8be5\u5b58\u50a8\u533a\u53ef\u4ee5\u4fdd\u5b58 32 \u4e2a 4 \u4f4d\u97f3\u9891\u91c7\u6837, \u8fd9\u4e9b\u91c7\u6837\u6570\u636e\u5c06\u88ab\u64ad\u653e, \u64ad\u653e\u65f6\u9996\u5148\u64ad\u653e\u9ad8 4 \u4f4d.","title":"FF30-FF3F \u6ce2\u5f62\u91c7\u6837\u6570\u636e"},{"location":"content/gameboy/audio/wave/#_2","text":"\u4ee3\u7801\u7ed3\u6784\u4e0e Square \u533a\u522b\u4e0d\u5927. \u9700\u8981\u6ce8\u610f\u7684\u662f\u5f53\u89e6\u53d1\u4e8b\u4ef6\u65f6, waveidx \u9700\u8981\u88ab\u91cd\u7f6e\u4e3a 0. // The wave channel plays a 32-entry wave table made up of 4-bit samples. Each byte encodes two samples, the first in // the high bits. The wave channel has a sample buffer and position counter. // The wave channel's frequency timer period is set to (2048-frequency)*2. When the timer generates a clock, the // position counter is advanced one sample in the wave table, looping back to the beginning when it goes past the end, // then a sample is read into the sample buffer from this NEW position. // The DAC receives the current value from the upper/lower nibble of the sample buffer, shifted right by the volume // control. // // Code Shift Volume // ----------------------- // 0 4 0% (silent) // 1 0 100% // 2 1 50% // 3 2 25% // Wave RAM can only be properly accessed when the channel is disabled (see obscure behavior). struct ChannelWave { reg: Rc<RefCell<Register>>, timer: Timer, lc: LengthCounter, blip: Blip, waveram: [u8; 16], waveidx: usize, } impl ChannelWave { fn power_up(blip: BlipBuf) -> ChannelWave { let reg = Rc::new(RefCell::new(Register::power_up(Channel::Wave))); ChannelWave { reg: reg.clone(), timer: Timer::power_up(8192), lc: LengthCounter::power_up(reg.clone()), blip: Blip::power_up(blip), waveram: [0x00; 16], waveidx: 0x00, } } fn next(&mut self, cycles: u32) { let s = match self.reg.borrow().get_volume_code() { 0 => 4, 1 => 0, 2 => 1, 3 => 2, _ => unreachable!(), }; for _ in 0..self.timer.next(cycles) { let sample = if self.waveidx & 0x01 == 0x00 { self.waveram[self.waveidx / 2] & 0x0f } else { self.waveram[self.waveidx / 2] >> 4 }; let ampl = if !self.reg.borrow().get_trigger() || !self.reg.borrow().get_dac_power() { 0x00 } else { i32::from(sample >> s) }; self.blip.set(self.blip.from + self.timer.period, ampl); self.waveidx = (self.waveidx + 1) % 32; } } } impl Memory for ChannelWave { fn get(&self, a: u16) -> u8 { match a { 0xff1a => self.reg.borrow().nrx0, 0xff1b => self.reg.borrow().nrx1, 0xff1c => self.reg.borrow().nrx2, 0xff1d => self.reg.borrow().nrx3, 0xff1e => self.reg.borrow().nrx4, 0xff30...0xff3f => self.waveram[a as usize - 0xff30], _ => unreachable!(), } } fn set(&mut self, a: u16, v: u8) { match a { 0xff1a => self.reg.borrow_mut().nrx0 = v, 0xff1b => { self.reg.borrow_mut().nrx1 = v; self.lc.n = self.reg.borrow().get_length_load(); } 0xff1c => self.reg.borrow_mut().nrx2 = v, 0xff1d => { self.reg.borrow_mut().nrx3 = v; self.timer.period = period(self.reg.clone()); } 0xff1e => { self.reg.borrow_mut().nrx4 = v; self.timer.period = period(self.reg.clone()); if self.reg.borrow().get_trigger() { self.lc.reload(); self.waveidx = 0x00; } } 0xff30...0xff3f => self.waveram[a as usize - 0xff30] = v, _ => unreachable!(), } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/cartridge/about_cartridge/","text":"\u6f2b\u8c08\u5361\u5e26 \u6e38\u620f\u5361\u5e26(Cartridge, \u6216\u8005 ROM)\u6307\u4fdd\u5b58 Game Boy \u6e38\u620f\u5185\u5bb9\u7684\u4ecb\u8d28. Game Boy \u7684 Cartridge \u548c\u5149\u76d8\u7b49\u5b58\u50a8\u4ecb\u8d28\u5e76\u4e0d\u76f8\u540c. Cartridge \u9664\u4e86\u5b58\u50a8\u6709\u6e38\u620f\u5185\u5bb9\u5916, \u8fd8\u53ef\u80fd\u5305\u542b\u73a9\u5bb6\u7684\u6e38\u620f\u5b58\u6863(\u53ef\u8bfb\u5199\u7684\u4e00\u5757\u5b58\u50a8\u7a7a\u95f4), \u4e00\u679a\u7535\u6c60, \u4e00\u4e2a\u5b9a\u65f6\u5668\u751a\u81f3\u662f\u4e00\u4e2a\u5149\u654f\u539f\u4ef6. \u6bd4\u8d77\u5355\u7eaf\u7684\u6570\u636e\u5b58\u50a8\u8bbe\u5907, \u5b83\u66f4\u50cf\u662f\u4e00\u4e2a\u4e13\u7528\u4e8e Game Boy \u6e38\u620f\u673a\u7684\u5916\u8bbe, \u5c31\u50cf\u4eca\u5929\u7684\u9f20\u6807\u548c\u952e\u76d8\u4e4b\u4e8e PC \u4e00\u6837. \u5728\u672c\u7ae0\u8282, \u8bfb\u8005\u5c06\u5b66\u4e60\u5230\u5982\u4f55\u89e3\u6790 Cartridge \u7684\u5185\u5bb9, \u7406\u89e3 Game Boy \u7684 Cartridge \u6570\u636e\u5b58\u50a8\u7ed3\u6784, \u771f\u6b63\u5f00\u59cb\u5b9e\u73b0 Game Boy \u4eff\u771f\u5668\u7684\u7b2c\u4e00\u6b65. \u5361\u5e26\u6700\u521d\u88ab\u5e94\u7528\u5728\u65e9\u671f\u7684\u5bb6\u7528\u7535\u8111\u4e2d, \u6b64\u65f6\u7684\u5bb6\u7528\u7535\u8111\u4f7f\u7528\u7279\u6b8a\u7684\u603b\u7ebf\u7aef\u53e3, \u80fd\u591f\u5c06\u5185\u542b\u8f6f\u4ef6\u7684\u5361\u5e26\u63d2\u5165\u8be5\u7aef\u53e3, \u5176\u6240\u5b58\u50a8\u7684\u6570\u636e\u53ef\u4ee5\u88ab\u76f4\u63a5\u5185\u5b58\u6620\u5c04\u5230\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4. \u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b, \u5361\u5e26\u7aef\u53e3\u7684\u8bbe\u8ba1\u76f8\u5f53\u7b80\u964b, \u5730\u5740\u548c\u6570\u636e\u603b\u7ebf\u901a\u8fc7\u8fb9\u7f18\u8fde\u63a5\u5668\u5b8c\u5168\u66b4\u9732\u5728\u5916. Game Boy \u7684\u6e38\u620f\u5361\u5e26\u4e5f\u662f\u5982\u6b64, \u5982\u4e0b\u56fe\u6240\u793a, \u8fd9\u662f\u4e00\u76d2\u88ab\u62c6\u5f00\u7684\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6\u94f6\u300b\u7684\u5361\u5e26(1999\u5e74\u53d1\u552e), \u56fe\u7247\u4e0b\u65b9\u4e00\u6392\u7684\u9ec4\u8272\u89e6\u70b9\u4fbf\u662f\u63d2\u69fd\u7aef\u53e3. \u5728\u90a3\u4e2a\u5e74\u4ee3\u73a9\u6e38\u620f\u662f\u4e00\u4ef6\u5962\u4f88\u7684\u4e8b\u60c5, \u5728\u5c0f\u5fc3\u7ffc\u7ffc\u7684\u8eb2\u907f\u7236\u6bcd\u548c\u8001\u5e08\u7684\u89c6\u7ebf\u540e, \u6709\u65f6\u4e5f\u65e0\u6cd5\u8ba9\u4eba\u5c3d\u5174: \u5f53\u628a\u6e38\u620f\u5361\u5e26\u63d2\u5165\u63d2\u69fd\u540e, \u6e38\u620f\u5728\u8fd0\u884c\u7684\u65f6\u5019\u5374\u83ab\u540d\u5176\u5999\u7684\u82b1\u5c4f. \u8fd9\u4e2a\u65f6\u5019\u6709\u7ecf\u9a8c\u7684\u5c0f\u4f19\u4f34\u5c31\u4f1a\u4f7f\u51fa\u7075\u9b42\u6280\u80fd\"\u5439\u6c14\"\u671d\u5361\u5e26\u63d2\u53e3\u5439\u6c14. \u867d\u7136\u90a3\u4e2a\u65f6\u5019\u4e0d\u77e5\u9053\u539f\u7406\u662f\u4ec0\u4e48, \u4f46\u5341\u6709\u516b\u4e5d\u80fd\u89e3\u51b3\u95ee\u9898. \u7b14\u8005\u5c0f\u65f6\u5019\u751a\u81f3\u603b\u7ed3\u51fa\u4e86\u4e00\u4e9b\"\u5439\u6c14\"\u7ecf\u9a8c, \u6bd4\u5982\u5728\u5439\u7684\u8fc7\u7a0b\u4e2d\u53e3\u8154\u9700\u8981\u4fdd\u6301\u5e72\u71e5, \u4e00\u6b21\u53ea\u80fd\u5439\u4e09\u4e0b\u7b49. \u5176\u5b9e\u7ec6\u7a76\u5176\u539f\u56e0, \u65e0\u975e\u662f\u957f\u65f6\u95f4\u66b4\u9732\u5728\u7a7a\u6c14\u4e2d\u7684\u63d2\u53e3\u548c\u63d2\u69fd\u88ab\u7ec6\u5c0f\u7684\u7070\u5c18\u6c61\u67d3\u5bfc\u81f4\u4e86\u63a5\u89e6\u4e0d\u826f, \u901a\u8fc7\u5439\u6c14\u53ef\u4ee5\u8fbe\u5230\u6e05\u6d01\u4f5c\u7528. \u76f8\u6bd4\u4e8e\u8f6f\u76d8, \u5149\u76d8\u7b49\u5176\u4ed6\u4ecb\u8d28, \u5c06\u8f6f\u4ef6\u50a8\u5b58\u5728\u5361\u5e26\u4e0a\u6709\u5176\u4f18\u52bf\u548c\u52a3\u52bf. \u7531\u4e8e\u5361\u5e26\u80fd\u88ab\u6620\u5c04\u5230\u7cfb\u7edf\u7684\u6807\u51c6\u5730\u5740\u7a7a\u95f4, \u56e0\u6b64\u5176\u5b58\u50a8\u7684\u8f6f\u4ef6\u80fd\u50cf\u5e38\u89c4\u5185\u5b58\u4e00\u6837\u88ab\u7cfb\u7edf\u53ca\u65f6\u8bfb\u53d6, \u800c\u4e0d\u5fc5\u4ece\u8f83\u6162\u7684\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u6570\u636e, \u518d\u4f20\u8f93\u5230\u5185\u5b58\u4e2d\u6267\u884c. \u8fd9\u80fd\u964d\u4f4e\u8f6f\u4ef6\u5bf9\u5185\u5b58\u7684\u9700\u6c42, \u5269\u4f59\u66f4\u591a\u7684\u53ef\u7528\u5185\u5b58\u7a7a\u95f4. \u4f46\u662f\u5361\u5e26\u901a\u5e38\u6bd4\u5149\u76d8\u7b49\u5176\u4ed6\u5b58\u50a8\u4ecb\u8d28\u6709\u7740\u66f4\u5c0f\u7684\u5bb9\u91cf\u4e14\u6210\u672c\u66f4\u9ad8, \u867d\u7136\u6709\u4e00\u4e9b\u6280\u672f\u6bd4\u5982 Bank Switching \u53ef\u4ee5\u7f13\u89e3\u8fd9\u4e9b\u95ee\u9898, \u4f46\u662f\u4e4b\u540e\u968f\u7740\u7a0b\u5e8f\u7684\u4f53\u79ef\u8d8a\u6765\u8d8a\u5e9e\u5927, \u66f4\u5927\u5bb9\u91cf\u4e14\u66f4\u4f4e\u6210\u672c\u7684\u5149\u76d8\u9010\u6e10\u5360\u636e\u4e86\u7edd\u5bf9\u7684\u4e0a\u98ce. \u5728\u73b0\u4ee3, \u7531\u4e8e\u78c1\u76d8\u548c NAND \u50a8\u5b58\u5668(\u5305\u62ec Flash \u5361, SD \u5361, SSD \u786c\u76d8\u7b49)\u6280\u672f\u7684\u53d1\u5c55\u6210\u719f, \u5361\u5e26\u9010\u6e10\u4ece\u4e2a\u4eba\u7535\u8111\u548c\u6e38\u620f\u4e3b\u673a\u4e2d\u6d88\u5931, \u4f46\u4ecd\u7136\u5728\u7279\u5b9a\u8303\u56f4\u5185\u88ab\u4f7f\u7528, \u6bd4\u5982\u4e00\u4e9b\u638c\u4e0a\u6e38\u620f\u673a, \u4f8b\u5982 Nintendo DS, Nintendo 3DS, Sony PlayStation Vita \u548c Nintendo Switch.","title":"GB-\u6e38\u620f\u5361\u5e26-\u6f2b\u8c08\u5361\u5e26"},{"location":"content/gameboy/cartridge/about_cartridge/#_1","text":"\u6e38\u620f\u5361\u5e26(Cartridge, \u6216\u8005 ROM)\u6307\u4fdd\u5b58 Game Boy \u6e38\u620f\u5185\u5bb9\u7684\u4ecb\u8d28. Game Boy \u7684 Cartridge \u548c\u5149\u76d8\u7b49\u5b58\u50a8\u4ecb\u8d28\u5e76\u4e0d\u76f8\u540c. Cartridge \u9664\u4e86\u5b58\u50a8\u6709\u6e38\u620f\u5185\u5bb9\u5916, \u8fd8\u53ef\u80fd\u5305\u542b\u73a9\u5bb6\u7684\u6e38\u620f\u5b58\u6863(\u53ef\u8bfb\u5199\u7684\u4e00\u5757\u5b58\u50a8\u7a7a\u95f4), \u4e00\u679a\u7535\u6c60, \u4e00\u4e2a\u5b9a\u65f6\u5668\u751a\u81f3\u662f\u4e00\u4e2a\u5149\u654f\u539f\u4ef6. \u6bd4\u8d77\u5355\u7eaf\u7684\u6570\u636e\u5b58\u50a8\u8bbe\u5907, \u5b83\u66f4\u50cf\u662f\u4e00\u4e2a\u4e13\u7528\u4e8e Game Boy \u6e38\u620f\u673a\u7684\u5916\u8bbe, \u5c31\u50cf\u4eca\u5929\u7684\u9f20\u6807\u548c\u952e\u76d8\u4e4b\u4e8e PC \u4e00\u6837. \u5728\u672c\u7ae0\u8282, \u8bfb\u8005\u5c06\u5b66\u4e60\u5230\u5982\u4f55\u89e3\u6790 Cartridge \u7684\u5185\u5bb9, \u7406\u89e3 Game Boy \u7684 Cartridge \u6570\u636e\u5b58\u50a8\u7ed3\u6784, \u771f\u6b63\u5f00\u59cb\u5b9e\u73b0 Game Boy \u4eff\u771f\u5668\u7684\u7b2c\u4e00\u6b65. \u5361\u5e26\u6700\u521d\u88ab\u5e94\u7528\u5728\u65e9\u671f\u7684\u5bb6\u7528\u7535\u8111\u4e2d, \u6b64\u65f6\u7684\u5bb6\u7528\u7535\u8111\u4f7f\u7528\u7279\u6b8a\u7684\u603b\u7ebf\u7aef\u53e3, \u80fd\u591f\u5c06\u5185\u542b\u8f6f\u4ef6\u7684\u5361\u5e26\u63d2\u5165\u8be5\u7aef\u53e3, \u5176\u6240\u5b58\u50a8\u7684\u6570\u636e\u53ef\u4ee5\u88ab\u76f4\u63a5\u5185\u5b58\u6620\u5c04\u5230\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4. \u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b, \u5361\u5e26\u7aef\u53e3\u7684\u8bbe\u8ba1\u76f8\u5f53\u7b80\u964b, \u5730\u5740\u548c\u6570\u636e\u603b\u7ebf\u901a\u8fc7\u8fb9\u7f18\u8fde\u63a5\u5668\u5b8c\u5168\u66b4\u9732\u5728\u5916. Game Boy \u7684\u6e38\u620f\u5361\u5e26\u4e5f\u662f\u5982\u6b64, \u5982\u4e0b\u56fe\u6240\u793a, \u8fd9\u662f\u4e00\u76d2\u88ab\u62c6\u5f00\u7684\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6\u94f6\u300b\u7684\u5361\u5e26(1999\u5e74\u53d1\u552e), \u56fe\u7247\u4e0b\u65b9\u4e00\u6392\u7684\u9ec4\u8272\u89e6\u70b9\u4fbf\u662f\u63d2\u69fd\u7aef\u53e3. \u5728\u90a3\u4e2a\u5e74\u4ee3\u73a9\u6e38\u620f\u662f\u4e00\u4ef6\u5962\u4f88\u7684\u4e8b\u60c5, \u5728\u5c0f\u5fc3\u7ffc\u7ffc\u7684\u8eb2\u907f\u7236\u6bcd\u548c\u8001\u5e08\u7684\u89c6\u7ebf\u540e, \u6709\u65f6\u4e5f\u65e0\u6cd5\u8ba9\u4eba\u5c3d\u5174: \u5f53\u628a\u6e38\u620f\u5361\u5e26\u63d2\u5165\u63d2\u69fd\u540e, \u6e38\u620f\u5728\u8fd0\u884c\u7684\u65f6\u5019\u5374\u83ab\u540d\u5176\u5999\u7684\u82b1\u5c4f. \u8fd9\u4e2a\u65f6\u5019\u6709\u7ecf\u9a8c\u7684\u5c0f\u4f19\u4f34\u5c31\u4f1a\u4f7f\u51fa\u7075\u9b42\u6280\u80fd\"\u5439\u6c14\"\u671d\u5361\u5e26\u63d2\u53e3\u5439\u6c14. \u867d\u7136\u90a3\u4e2a\u65f6\u5019\u4e0d\u77e5\u9053\u539f\u7406\u662f\u4ec0\u4e48, \u4f46\u5341\u6709\u516b\u4e5d\u80fd\u89e3\u51b3\u95ee\u9898. \u7b14\u8005\u5c0f\u65f6\u5019\u751a\u81f3\u603b\u7ed3\u51fa\u4e86\u4e00\u4e9b\"\u5439\u6c14\"\u7ecf\u9a8c, \u6bd4\u5982\u5728\u5439\u7684\u8fc7\u7a0b\u4e2d\u53e3\u8154\u9700\u8981\u4fdd\u6301\u5e72\u71e5, \u4e00\u6b21\u53ea\u80fd\u5439\u4e09\u4e0b\u7b49. \u5176\u5b9e\u7ec6\u7a76\u5176\u539f\u56e0, \u65e0\u975e\u662f\u957f\u65f6\u95f4\u66b4\u9732\u5728\u7a7a\u6c14\u4e2d\u7684\u63d2\u53e3\u548c\u63d2\u69fd\u88ab\u7ec6\u5c0f\u7684\u7070\u5c18\u6c61\u67d3\u5bfc\u81f4\u4e86\u63a5\u89e6\u4e0d\u826f, \u901a\u8fc7\u5439\u6c14\u53ef\u4ee5\u8fbe\u5230\u6e05\u6d01\u4f5c\u7528. \u76f8\u6bd4\u4e8e\u8f6f\u76d8, \u5149\u76d8\u7b49\u5176\u4ed6\u4ecb\u8d28, \u5c06\u8f6f\u4ef6\u50a8\u5b58\u5728\u5361\u5e26\u4e0a\u6709\u5176\u4f18\u52bf\u548c\u52a3\u52bf. \u7531\u4e8e\u5361\u5e26\u80fd\u88ab\u6620\u5c04\u5230\u7cfb\u7edf\u7684\u6807\u51c6\u5730\u5740\u7a7a\u95f4, \u56e0\u6b64\u5176\u5b58\u50a8\u7684\u8f6f\u4ef6\u80fd\u50cf\u5e38\u89c4\u5185\u5b58\u4e00\u6837\u88ab\u7cfb\u7edf\u53ca\u65f6\u8bfb\u53d6, \u800c\u4e0d\u5fc5\u4ece\u8f83\u6162\u7684\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u6570\u636e, \u518d\u4f20\u8f93\u5230\u5185\u5b58\u4e2d\u6267\u884c. \u8fd9\u80fd\u964d\u4f4e\u8f6f\u4ef6\u5bf9\u5185\u5b58\u7684\u9700\u6c42, \u5269\u4f59\u66f4\u591a\u7684\u53ef\u7528\u5185\u5b58\u7a7a\u95f4. \u4f46\u662f\u5361\u5e26\u901a\u5e38\u6bd4\u5149\u76d8\u7b49\u5176\u4ed6\u5b58\u50a8\u4ecb\u8d28\u6709\u7740\u66f4\u5c0f\u7684\u5bb9\u91cf\u4e14\u6210\u672c\u66f4\u9ad8, \u867d\u7136\u6709\u4e00\u4e9b\u6280\u672f\u6bd4\u5982 Bank Switching \u53ef\u4ee5\u7f13\u89e3\u8fd9\u4e9b\u95ee\u9898, \u4f46\u662f\u4e4b\u540e\u968f\u7740\u7a0b\u5e8f\u7684\u4f53\u79ef\u8d8a\u6765\u8d8a\u5e9e\u5927, \u66f4\u5927\u5bb9\u91cf\u4e14\u66f4\u4f4e\u6210\u672c\u7684\u5149\u76d8\u9010\u6e10\u5360\u636e\u4e86\u7edd\u5bf9\u7684\u4e0a\u98ce. \u5728\u73b0\u4ee3, \u7531\u4e8e\u78c1\u76d8\u548c NAND \u50a8\u5b58\u5668(\u5305\u62ec Flash \u5361, SD \u5361, SSD \u786c\u76d8\u7b49)\u6280\u672f\u7684\u53d1\u5c55\u6210\u719f, \u5361\u5e26\u9010\u6e10\u4ece\u4e2a\u4eba\u7535\u8111\u548c\u6e38\u620f\u4e3b\u673a\u4e2d\u6d88\u5931, \u4f46\u4ecd\u7136\u5728\u7279\u5b9a\u8303\u56f4\u5185\u88ab\u4f7f\u7528, \u6bd4\u5982\u4e00\u4e9b\u638c\u4e0a\u6e38\u620f\u673a, \u4f8b\u5982 Nintendo DS, Nintendo 3DS, Sony PlayStation Vita \u548c Nintendo Switch.","title":"\u6f2b\u8c08\u5361\u5e26"},{"location":"content/gameboy/cartridge/cartridge_header/","text":"Cartridge Header Cartridge \u4fdd\u5b58\u4e86\u6e38\u620f\u7684\u6c47\u7f16\u4ee3\u7801\u4e0e\u5168\u90e8\u4e8c\u8fdb\u5236\u6570\u636e(\u56fe\u50cf, \u97f3\u4e50\u7b49), \u5b83\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u6570\u636e\u5b58\u50a8\u683c\u5f0f. \u4e0e\u4f17\u591a\u5e38\u7528\u7684\u6587\u4ef6\u5b58\u50a8\u683c\u5f0f\u7c7b\u4f3c, Cartridge \u5728\u6587\u4ef6\u5f00\u5934\u4e5f\u6709\u4e00\u6bb5\u7279\u6b8a\u533a\u57df, \u88ab\u79f0\u4e3a Header(\u6587\u4ef6\u5934). Header \u5185\u5305\u542b\u4e86\u63cf\u8ff0\u8be5 Cartridge \u7684\u4fe1\u606f\u4ee5\u53ca\u5173\u4e8e\u5f15\u5bfc Game Boy \u6e38\u620f\u673a\u6b63\u5e38\u8bfb\u53d6\u6e38\u620f\u6570\u636e\u7684\u7a0b\u5e8f\u6307\u4ee4. Cartridge \u7684 Header \u533a\u4f4d\u4e8e Cartridge \u7684 0x0100-0x0140(\u7b2c 256 \u4e2a\u5b57\u8282\u5230\u7b2c 320 \u4e2a\u5b57\u8282)\u4f4d\u7f6e. \u6587\u4ef6\u5934\u662f\u4f4d\u4e8e\u6587\u4ef6\u5f00\u5934\u7684\u4e00\u6bb5\u627f\u62c5\u4e00\u5b9a\u4efb\u52a1\u7684\u6570\u636e, \u4e00\u822c\u90fd\u5728\u6587\u4ef6\u5f00\u5934\u90e8\u5206, \u4f46\u4e5f\u6709\u4e00\u4e9b\u4f4d\u4e8e\u6587\u4ef6\u7ed3\u5c3e, \u8fd9\u53d6\u51b3\u4e8e\u7279\u5b9a\u7684\u6587\u4ef6\u683c\u5f0f. \u6587\u4ef6\u5934\u901a\u5e38\u4fdd\u5b58\u8be5\u6587\u4ef6\u7684\u4e00\u4e9b\u4fe1\u606f, \u6bd4\u5982\u6570\u636e\u5b58\u50a8\u683c\u5f0f\u4e0e\u538b\u7f29\u65b9\u5f0f, \u7528\u4e8e\u5f15\u5bfc\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f\u6b63\u786e\u8bfb\u53d6\u6587\u4ef6\u4fe1\u606f. \u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e, \u6bd4\u5982\u4e00\u4e2a JPG \u683c\u5f0f\u7684\u56fe\u50cf\u6587\u4ef6, \u56fe\u50cf\u6d4f\u89c8\u5668\u65e0\u9700\u8bfb\u53d6\u6587\u4ef6\u7684\u5168\u90e8\u6570\u636e\u800c\u4ec5\u4ec5\u9700\u8981\u8bfb\u53d6 Header \u4e2d\u7684\u4e00\u90e8\u5206\u6570\u636e, \u5c31\u80fd\u83b7\u77e5\u56fe\u5f62\u7684\u957f\u5bbd\u7b49\u4fe1\u606f. 0100-0103 \u7a0b\u5e8f\u6267\u884c\u5165\u53e3 \u6bcf\u5f53\u6e38\u620f\u5361\u5e26\u63d2\u5165 Game Boy \u6e38\u620f\u673a\u540e, \u5c4f\u5e55\u5c06\u663e\u793a\u4efb\u5929\u5802\u7684 LOGO. \u5728\u663e\u793a\u5b8c\u6210\u4efb\u5929\u5802\u7684 LOGO \u540e, Game Boy \u5185\u7f6e\u7684\u542f\u52a8\u7a0b\u5e8f\u5c06\u4f1a\u628a\u7a0b\u5e8f\u8ba1\u6570\u5668 PC \u8bbe\u7f6e\u5230 0x0100 \u5730\u5740, \u4e4b\u540e, \u8be5\u533a\u6bb5\u4e2d\u5305\u542b\u7684\u7a0b\u5e8f\u6307\u4ee4\u4f1a\u4f7f\u7a0b\u5e8f\u8ba1\u6570\u5668\u8df3\u8f6c\u5230 Cartridge \u5185\u7684\u5b9e\u9645\u5165\u53e3\u5730\u5740. \u901a\u5e38\u6765\u8bb2, \u8fd9 4 \u4e2a Byte \u5305\u542b\u4e00\u4e2a NOP \u6307\u4ee4, \u548c\u4e00\u4e2a JP 0x0150 \u6307\u4ee4, \u8fd9\u4e24\u4e2a\u6307\u4ee4\u4f1a\u6307\u793a CPU \u8df3\u8f6c\u5230 0x0150 \u7684\u4f4d\u7f6e. \u901a\u5e38\u60c5\u51b5\u4e0b\u8fd9\u6bb5\u533a\u57df\u7684\u5730\u5740\u4e0e\u5176\u5bf9\u5e94\u7684\u503c\u5982\u4e0b\u8868\u6240\u793a. Addr Data 0x0100 0x00 0x0101 0xc3 0x0102 0x50 0x0103 0x01 \u5176\u7b49\u4ef7 ASM \u8868\u793a\u4e3a: NOP JUMP 0x0150 0104-0133 \u4efb\u5929\u5802\u7684 LOGO \u8be5\u5b57\u8282\u533a\u57df\u5b58\u50a8\u4e86\u4efb\u5929\u5802\u7684 LOGO \u56fe\u6807. \u5f53 Game Boy \u5f00\u673a\u7684\u65f6\u5019, \u9996\u5148\u4f1a\u663e\u793a\u8fd9\u90e8\u5206\u5185\u5bb9, \u4e4b\u540e\u9a8c\u8bc1\u8be5\u56fe\u50cf\u7684\u5185\u5bb9. \u5982\u679c\u8fd9\u90e8\u5206\u5185\u5bb9\u7684\u5b57\u8282\u4e0d\u6b63\u786e, \u5219\u4f1a\u9501\u5b9a\u81ea\u8eab\u5e76\u62d2\u7edd\u7ee7\u7eed\u8fd0\u884c. \u8fd9\u90e8\u5206\u5185\u5bb9\u7684 16 \u8fdb\u5236\u683c\u5f0f\u5982\u4e0b\u6240\u793a. CE ED 66 66 CC 0D 00 0B 03 73 00 83 00 0C 00 0D 00 08 11 1F 88 89 00 0E DC CC 6E E6 DD DD D9 99 BB BB 67 63 6E 0E EC CC DD DC 99 9F BB B9 33 3E \u5927\u90e8\u5206\u60c5\u51b5\u4e0b Game Boy \u53ea\u4f1a\u9a8c\u8bc1\u524d 0x18 \u5b57\u8282, \u4f46\u5076\u5c14\u4e5f\u4f1a\u6709\u9a8c\u8bc1\u5168\u90e8 0x30 \u5b57\u8282\u7684\u60c5\u51b5. \u4efb\u5929\u5802\u4e4b\u6240\u4ee5\u8981\u6c42\u5361\u5e26\u5185\u5fc5\u987b\u9644\u5e26\u8fd9\u90e8\u5206\u4fe1\u606f\u662f\u6709\u5386\u53f2\u539f\u56e0\u7684, \u56e0\u4e3a\u5728\u4e92\u8054\u7f51\u53d1\u5c55\u65e9\u671f, \u5404\u4e2a\u56fd\u5bb6\u7684\u7248\u6743\u6cd5/\u8457\u4f5c\u6743\u6cd5\u5e76\u4e0d\u5b8c\u5584, \u5e76\u4e0d\u90fd\u80fd\u975e\u5e38\u6743\u5a01\u7684\u754c\u5b9a\"\u5728\u7535\u8111\u4e0a\u590d\u5236\u7c98\u8d34\u7535\u5b50\u6587\u4ef6\u662f\u5426\u5c5e\u4e8e\u4fb5\u6743\", \u56e0\u6b64\u6709\u8bb8\u591a\u76d7\u7248\u5546\u590d\u5236\u6e38\u620f\u5361\u5e26\u7684\u5185\u5bb9\u5e76\u5236\u4f5c\u76d7\u7248\u5361\u5e26. \u4efb\u5929\u5802\u901a\u8fc7\u5728\u5361\u5e26\u4e2d\u52a0\u5165\u5546\u6807\u56fe\u50cf\u5e76\u5728 Game Boy \u6e38\u620f\u673a\u4e0a\u5f3a\u5236\u53bb\u9274\u5b9a\u5546\u6807\u5185\u5bb9, \u5de7\u5999\u7684\u5c06\u5bf9\u7248\u6743\u6216\u8457\u4f5c\u6743\u7684\u4fb5\u6743\u8f6c\u6362\u4e3a\u5bf9\u516c\u53f8\u5546\u6807\u7684\u4fb5\u6743--\u5546\u6807\u4fb5\u6743\u5728\u90a3\u65f6\u5019\u5df2\u7ecf\u6709\u975e\u5e38\u5b8c\u5584\u7684\u6cd5\u5f8b\u53bb\u754c\u5b9a\u4e86. \u5f53\u7136\u53e6\u4e00\u4e2a\u91cd\u8981\u65b9\u9762, \u52a0\u5165 LOGO \u4ea6\u6709\u52a9\u4e8e\u63d0\u5347\u516c\u53f8\u7684\u793e\u4f1a\u77e5\u540d\u5ea6, \u6bd4\u5982\u73b0\u4eca\u6bd4\u8f83\u6709\u540d\u7684\u6e38\u620f\u5f00\u53d1\u5f15\u64ce Unity, \u5982\u679c\u5f00\u53d1\u8005\u4f7f\u7528\u7684\u662f\u5176\u514d\u8d39\u7248, \u5176\u5236\u4f5c\u548c\u53d1\u884c\u7684\u6e38\u620f\u5728\u542f\u52a8\u65f6\u5219\u5fc5\u987b\u663e\u793a Unity \u7684 LOGO. 0134-0143 \u6807\u9898 \u8be5\u5b57\u8282\u533a\u57df\u5b58\u50a8\u4e86\u5361\u5e26\u7684\u6807\u9898. \u5361\u5e26\u7684\u6807\u9898\u603b\u662f\u5927\u5199\u7684 ASCII \u82f1\u6587\u5b57\u6bcd. \u5982\u679c\u6807\u9898\u957f\u5ea6\u5c0f\u4e8e 16 \u4e2a\u5b57\u7b26, \u5269\u4f59\u7684\u5b58\u50a8\u7a7a\u95f4\u5219\u5168\u90e8\u4f7f\u7528 0x00 \u586b\u5145. \u5728\u53d1\u660e Game Boy Color(CGB)\u524d, \u4efb\u5929\u5802\u5c06\u8fd9\u4e2a\u533a\u57df\u7684\u957f\u5ea6\u51cf\u5c11\u5230 15 \u4e2a\u5b57\u7b26, \u51e0\u4e2a\u6708\u4e4b\u540e\u4ed6\u4eec\u5c31\u53c8\u6709\u4e86\u5c06\u5b83\u51cf\u5c11\u5230 11 \u4e2a\u5b57\u7b26\u7684\u5947\u5999\u60f3\u6cd5. \u56e0\u6b64\u4e00\u4e2a Game Boy \u4eff\u771f\u5668\u603b\u662f\u9996\u5148\u9700\u8981\u5224\u65ad\u8fd9\u76d2\u5361\u5e26\u662f\u4e0d\u662f CGB \u5361\u5e26, \u7136\u540e\u518d\u9009\u7528\u6b63\u786e\u7684\u8bfb\u53d6\u65b9\u5f0f\u8bfb\u53d6\u6807\u9898. CGB \u6a21\u5f0f\u7684\u533a\u6bb5\u5185\u5bb9\u5982\u4e0b. 013F-0142 \u5236\u9020\u5546\u4ee3\u7801 \u5728\u975e CGB \u5361\u5e26\u4e2d, \u8fd9\u90e8\u5206\u5185\u5bb9\u662f\u6807\u9898\u7684\u4e00\u90e8\u5206. \u5728 CGB \u5361\u5e26\u4e2d, \u8fd9\u90e8\u5206\u5b58\u50a8\u4e86\u5236\u9020\u5546\u7684\u4ee3\u7801. \u6682\u65f6\u4e0d\u660e\u767d\u5982\u6b64\u8fd9\u822c\u505a\u6cd5\u6709\u4ec0\u4e48\u76ee\u7684\u548c\u6df1\u5c42\u6b21\u7684\u610f\u4e49. 0143 CGB \u6807\u5fd7 \u5728\u975e CGB \u5361\u5e26\u4e2d, \u8fd9\u90e8\u5206\u5185\u5bb9\u662f\u6807\u9898\u7684\u4e00\u90e8\u5206. \u5728 CGB \u5361\u5e26\u4e2d, \u5176\u9ad8\u4f4d\u8868\u793a\u8be5\u76d2\u5361\u5e26\u5df2\u542f\u7528 CGB \u529f\u80fd. \u5bf9\u4e8e CGB \u6765\u8bf4\u8fd9\u662f\u5fc5\u9700\u7684, \u5426\u5219 CGB \u4f1a\u5c06\u81ea\u8eab\u5207\u6362\u4e3a\u975e CGB \u6a21\u5f0f. \u5178\u578b\u503c\u4e3a: 0x80 - \u8be5\u6e38\u620f\u652f\u6301 CGB \u529f\u80fd, \u4f46\u540c\u6837\u80fd\u5728\u975e CGB \u6e38\u620f\u673a\u4e0a\u8fd0\u884c. 0xC0 - \u8be5\u6e38\u620f\u4ec5\u80fd\u8fd0\u884c\u5728 CGB \u6e38\u620f\u673a\u4e0a. \u5728 Game Boy \u5b9e\u673a\u4e0a, \u5982\u679c\u8bbe\u7f6e\u4e86\u7b2c 7 \u4f4d, \u4ee5\u53ca\u7b2c 2 \u6216\u7b2c 3 \u4f4d, \u4f1a\u5207\u6362\u5230\u7279\u6b8a\u7684\u975e CGB \u6a21\u5f0f, \u8be5\u6a21\u5f0f\u4e0b\u7cfb\u7edf\u8c03\u8272\u76d8\u672a\u521d\u59cb\u5316. \u76ee\u7684\u672a\u77e5, \u4f46\u731c\u6d4b\u6700\u7ec8\u8fd9\u5e94\u8be5\u7528\u4e8e\u7740\u8272\u5355\u8272\u6e38\u620f\u4e0a, \u8fd9\u4e9b\u5355\u8272\u6e38\u620f\u53ef\u80fd\u5728\u5361\u5e26\u7684\u67d0\u4e2a\u90e8\u5206\u81ea\u5df1\u8bbe\u5b9a\u4e86\u8c03\u8272\u76d8\u6570\u636e. 0144-0145 \u8bb8\u53ef\u534f\u8bae\u4ee3\u7801 \u4f7f\u7528\u4e24\u4e2a\u5b57\u8282\u5b58\u50a8\u8bb8\u53ef\u534f\u8bae\u7684\u4ee3\u7801, \u8fd9\u4e9b\u4ee3\u7801\u548c\u6e38\u620f\u516c\u53f8\u6216\u53d1\u5e03\u8005\u76f8\u5173. \u4e00\u4e9b\u5178\u578b\u7684\u4f8b\u5b50\u5982\u4e0b: 00 none 01 Nintendo R&D1 08 Capcom 13 Electronic Arts 18 Hudson Soft 19 b-ai 20 kss 22 pow 24 PCM Complete 25 san-x 28 Kemco Japan 29 seta 30 Viacom 31 Nintendo 32 Bandai 33 Ocean/Acclaim 34 Konami 35 Hector 37 Taito 38 Hudson 39 Banpresto 41 Ubi Soft 42 Atlus 44 Malibu 46 angel 47 Bullet-Proof 49 irem 50 Absolute 51 Acclaim 52 Activision 53 American sammy 54 Konami 55 Hi tech entertainment 56 LJN 57 Matchbox 58 Mattel 59 Milton Bradley 60 Titus 61 Virgin 64 LucasArts 67 Ocean 69 Electronic Arts 70 Infogrames 71 Interplay 72 Broderbund 73 sculptured 75 sci 78 THQ 79 Accolade 80 misawa 83 lozc 86 tokuma shoten i* 87 tsukuda ori* 91 Chunsoft 92 Video system 93 Ocean/Acclaim 95 Varie 96 Yonezawa/s'pal 97 Kaneko 99 Pack in soft A4 Konami (Yu-Gi-Oh!) 0146 SGB \u6807\u5fd7 \u8be5\u5b57\u8282\u544a\u77e5\u6e38\u620f\u662f\u5426\u652f\u6301 Super Game Boy(SGB)\u529f\u80fd, \u5e38\u89c1\u503c\u4e3a: 0x00: \u6e38\u620f\u4e0d\u652f\u6301 SGB \u529f\u80fd. 0x03: \u6e38\u620f\u652f\u6301 SGB \u529f\u80fd. \u5982\u679c\u6b64\u5b57\u8282\u8bbe\u7f6e\u4e3a 0x03 \u4ee5\u5916\u7684\u5176\u4ed6\u503c, \u5219\u89c6\u4e3a\u4e0d\u652f\u6301 SGB \u529f\u80fd. SGB \u662f Game Boy \u7684\u5468\u8fb9\u4ea7\u54c1, \u73a9\u5bb6\u53ef\u4ee5\u628a SGB \u63d2\u5230 SFC \u4e0a\u7136\u540e\u5728 SGB \u4e0a\u63d2\u4e0a\u4e00\u5f20 GB \u5361\u5e26, \u8fd9\u6837\u73a9\u5bb6\u5c31\u53ef\u4ee5\u5728\u7535\u89c6\u4e0a\u73a9 GB \u6e38\u620f\u4e86. 0147 \u5361\u5e26\u7c7b\u578b \u8be5\u5b57\u8282\u544a\u77e5\u6e38\u620f\u5361\u5e26\u6240\u4f7f\u7528\u7684 Memory Bank Controller \u7c7b\u578b(\u7f29\u5199\u4e3a MBC, \u4e0b\u4e00\u8282\u5c06\u4f1a\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u8ba8\u8bba), \u4ee5\u53ca\u6e38\u620f\u5361\u5e26\u4e2d\u662f\u5426\u4f7f\u7528\u4e86\u5176\u5b83\u5916\u90e8\u786c\u4ef6, \u6bd4\u5982\u7535\u6c60, \u7ea2\u5916\u7ebf\u611f\u5149\u5668, \u76f8\u673a\u7b49. \u901a\u5e38\u6765\u8bb2\u6709\u4ee5\u4e0b\u51e0\u79cd\u5e38\u89c1\u786c\u4ef6: ROM: \u4e0d\u53ef\u53d8\u5b58\u50a8, \u7528\u6765\u5b58\u50a8\u6e38\u620f\u672c\u4f53\u6570\u636e RAM: \u53ef\u53d8\u5b58\u50a8, \u901a\u5e38\u7528\u6765\u5b58\u50a8\u6e38\u620f\u8bb0\u5f55, \u5173\u95ed Game Boy \u540e\u6570\u636e\u6e05\u7a7a BATTERY: \u7535\u6c60, \u7528\u6765\u6301\u4e45\u5316\u5b58\u50a8 RAM \u4e2d\u7684\u5185\u5bb9, \u5173\u95ed Game Boy \u540e\u53ef\u5411 RAM \u4f9b\u7535\u4ece\u800c\u4fdd\u6301 RAM \u5185\u7684\u6570\u636e\u4e0d\u53d8. TIMER: \u5185\u90e8\u65f6\u949f, \u7528\u4e8e\u8bb0\u5f55\u65f6\u95f4. \u503c\u4e0e\u5176\u542b\u4e49\u7684\u5bf9\u7167\u5982\u4e0b\u6240\u793a: 0x00 ROM ONLY 0x19 MBC5 0x01 MBC1 0x1A MBC5+RAM 0x02 MBC1+RAM 0x1B MBC5+RAM+BATTERY 0x03 MBC1+RAM+BATTERY 0x1C MBC5+RUMBLE 0x05 MBC2 0x1D MBC5+RUMBLE+RAM 0x06 MBC2+BATTERY 0x1E MBC5+RUMBLE+RAM+BATTERY 0x08 ROM+RAM 0x20 MBC6 0x09 ROM+RAM+BATTERY 0x22 MBC7+SENSOR+RUMBLE+RAM+BATTERY 0x0B MMM01 0x0C MMM01+RAM 0x0D MMM01+RAM+BATTERY 0x0F MBC3+TIMER+BATTERY 0x10 MBC3+TIMER+RAM+BATTERY 0xFC POCKET CAMERA 0x11 MBC3 0xFD BANDAI TAMA5 0x12 MBC3+RAM 0xFE HuC3 0x13 MBC3+RAM+BATTERY 0xFF HuC1+RAM+BATTERY 0148 ROM \u5927\u5c0f \u8be5\u5b57\u8282\u6807\u660e\u8be5\u5361\u5e26\u7684 ROM \u5927\u5c0f. \u901a\u5e38\u662f 32KB \u7684\u6574\u6570\u500d. \u5e38\u7528\u7684\u503c\u4e0e\u5176\u5b9e\u9645\u8868\u793a\u7684\u5bb9\u91cf\u5927\u5c0f\u5bf9\u5e94\u5982\u4e0b: 0x00 - 32KByte (no ROM banking) 0x01 - 64KByte (4 banks) 0x02 - 128KByte (8 banks) 0x03 - 256KByte (16 banks) 0x04 - 512KByte (32 banks) 0x05 - 1MByte (64 banks) - only 63 banks used by MBC1 0x06 - 2MByte (128 banks) - only 125 banks used by MBC1 0x07 - 4MByte (256 banks) 0x08 - 8MByte (512 banks) 0x52 - 1.1MByte (72 banks) 0x53 - 1.2MByte (80 banks) 0x54 - 1.5MByte (96 banks) 0149 RAM \u5927\u5c0f \u8be5\u5b57\u8282\u6807\u660e\u8be5\u5361\u5e26\u4e2d\u5916\u90e8 RAM \u7684\u5927\u5c0f. \u5e38\u7528\u7684\u503c\u4e0e\u5176\u5b9e\u9645\u8868\u793a\u7684\u5bb9\u91cf\u5927\u5c0f\u5bf9\u5e94\u5982\u4e0b: 0x00 - None 0x01 - 2 KBytes 0x02 - 8 Kbytes 0x03 - 32 KBytes (4 banks of 8KBytes each) 0x04 - 128 KBytes (16 banks of 8KBytes each) 0x05 - 64 KBytes (8 banks of 8KBytes each) \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5f53\u4f7f\u7528\u7684\u662f MBC2 \u5361\u5e26\u65f6, \u8be5\u4f4d\u7f6e\u5fc5\u987b\u8bbe\u7f6e\u4e3a 0x00, \u5373\u4f7f MBC2 \u672c\u8eab\u5305\u542b\u4e00\u4e2a\u5185\u7f6e\u7684\u5bb9\u91cf\u4e3a 512 x 4bits \u7684 RAM. 014A \u53d1\u552e\u5730\u4ee3\u7801 \u8be5\u5b57\u8282\u6807\u660e\u8be5\u5361\u5e26\u662f\u5426\u5728\u975e\u65e5\u672c\u5730\u533a\u9500\u552e. \u53ea\u6709\u4e24\u4e2a\u53ef\u9009\u503c: 0x00 - Japanese 0x01 - Non-Japanese \u65e9\u671f Game Boy \u548c\u5176\u6e38\u620f\u5361\u5e26\u53ea\u5728\u65e5\u672c\u56fd\u5185\u5e02\u573a\u6709\u9500\u552e, \u4f46\u968f\u7740\u5b83\u7684\u6269\u5f20, \u5176\u53d1\u552e\u5730\u9010\u6e10\u6269\u5f20\u5230\u4e86\u7f8e\u56fd, \u6b27\u6d32, \u53f0\u6e7e\u7b49\u56fd\u5bb6\u548c\u5730\u533a. \u4ec5\u4ec5\u7528\u4e00\u4e2a\"\u662f/\u5426\u65e5\u672c\u5730\u533a\u53d1\u552e\"\u7684\u6807\u8bb0\u663e\u7136\u5df2\u7ecf\u65e0\u6cd5\u6ee1\u8db3\u9700\u8981, \u56e0\u6b64\u8be5\u5b57\u8282\u5b9e\u9645\u4e0a\u5904\u4e8e\u4e00\u4e2a\u6ca1\u4ec0\u4e48\u7528\u5904\u7684\u5c34\u5c2c\u5730\u4f4d. \u5728 0x014a \u4e4b\u540e\u7684 0x014b(\u65e7\u7684\u8bb8\u53ef\u534f\u8bae\u4ee3\u7801) \u548c 0x014c(\u7248\u672c\u53f7) \u5176\u5b9e\u90fd\u5904\u4e8e\u4e00\u79cd\u534a\u5e9f\u5f03\u72b6\u6001, \u56e0\u6b64\u4e0d\u518d\u8fc7\u591a\u7b14\u58a8\u8fdb\u884c\u4ecb\u7ecd. 014D \u6807\u9898\u6821\u9a8c\u548c \u8be5\u5b57\u8282\u5305\u542b\u5361\u5e26\u6807\u9898(0134-014C)\u7684 8 \u4f4d\u6821\u9a8c\u548c. \u6821\u9a8c\u548c\u8ba1\u7b97\u4f2a\u4ee3\u7801\u5982\u4e0b: x=0:FOR i=0134h TO 014Ch:x=x-MEM[i]-1:NEXT \u5176\u5bf9\u5e94\u7684 Rust \u4ee3\u7801\u53ef\u4ee5\u7528\u5982\u4e0b\u4e00\u4e2a\u7b80\u77ed\u51fd\u6570\u8868\u793a: fn check_checksum(rom: &[u8]) -> bool { let mut v: u8 = 0; for i in 0x0134..0x014d { v = v.wrapping_sub(rom[i]).wrapping_sub(1); } rom[0x014d] == v } \u8fd4\u56de\u7ed3\u679c\u7684\u4f4e 8 \u4f4d\u5fc5\u987b\u4e0e\u6b64\u6761\u76ee\u4e2d\u7684\u503c\u76f8\u540c. \u5982\u679c\u6b64\u6821\u9a8c\u548c\u4e0d\u6b63\u786e, \u5219\u6e38\u620f\u5c06\u4e0d\u4f1a\u88ab\u6267\u884c. 014E-014F \u5168\u5c40\u6821\u9a8c\u548c \u8be5\u5b57\u8282\u533a\u57df\u5305\u542b\u4e00\u4e2a 16 \u4f4d\u6821\u9a8c\u548c, \u6b64\u6821\u9a8c\u548c\u6821\u9a8c\u5361\u5e26\u7684\u5168\u90e8\u6570\u636e\u5185\u5bb9. Game Boy \u5e76\u4e0d\u4f1a\u4e3b\u52a8\u53bb\u9a8c\u8bc1\u8be5\u6821\u9a8c\u548c. \u7531\u4e8e\u7f3a\u4e4f\u76f8\u5173\u7684\u76f4\u63a5\u6280\u672f\u8d44\u6599, \u5168\u5c40\u6821\u9a8c\u548c\u7684\u8ba1\u7b97\u8fc7\u7a0b\u662f\u4ece\u5f00\u6e90\u7684 Game Boy \u5f15\u64ce GBDK \u7684\u6e90\u4ee3\u7801\u4e2d\u53cd\u63a8\u800c\u6765\u7684, \u5176 C \u8bed\u8a00\u6e90\u4ee3\u7801\u5982\u4e0b. chk = 0; cart[0x014E/SEGSIZE][0x014E%SEGSIZE] = 0; cart[0x014F/SEGSIZE][0x014F%SEGSIZE] = 0; for(i = 0; i < NBSEG; i++) for(pos = 0; pos < SEGSIZE; pos++) chk += cart[i][pos]; cart[0x014E/SEGSIZE][0x014E%SEGSIZE] = (chk>>8)&0xFF; cart[0x014F/SEGSIZE][0x014F%SEGSIZE] = chk&0xFF; \u5176\u4e2d\u53d8\u91cf chk(checksum) \u4e3a\u4e00\u4e2a unsigned long \u7c7b\u578b, \u5728\u5f00\u59cb\u8ba1\u7b97\u5168\u5c40\u6821\u9a8c\u548c\u4e4b\u524d, \u9996\u5148\u8bbe\u7f6e 0x014e \u4e0e 0x014f \u4e3a 0, \u7136\u540e\u9010\u5b57\u8282\u8bfb\u53d6 cartridge \u4e2d\u7684\u6570\u636e\u5e76\u4e0e chk \u76f8\u52a0. \u5faa\u73af\u7ed3\u675f\u540e, chk \u7684\u503c\u88ab\u4fdd\u5b58\u5728\u5730\u5740 0x014e \u4e0e 0x014f \u4e2d. \u793a\u4f8b\u4ee3\u7801 \u672c\u8282\u5c06\u4f1a\u7f16\u5199\u4e00\u6bb5\u7b80\u5355\u7684\u7a0b\u5e8f, \u7528\u6765\u89e3\u6790 Cartridge Header \u7684\u90e8\u5206\u4fe1\u606f. \u7528\u4f5c\u6d4b\u8bd5\u7684\u6e38\u620f ROM \u662f\u300aBoxes\u300b\u6e38\u620f, \u8bfb\u8005\u53ef\u4ee5\u5728 https://github.com/mohanson/gameboy/tree/master/res \u4e0b\u8f7d\u5230\u8be5\u6e38\u620f ROM. \u7a0b\u5e8f\u7684\u76ee\u7684\u662f\u8bfb\u53d6\u6e38\u620f\u7684\u6807\u9898, \u5e76\u786e\u8ba4\u5176\u6807\u9898\u6821\u9a8c\u548c\u6b63\u786e. use std::io::Read; // \u83b7\u53d6\u6e38\u620f\u5361\u5e26\u7684\u6807\u9898 fn rom_name(rom: &[u8]) -> String { let mut buf = String::new(); let ic = 0x0134; let oc = if rom[0x0143] == 0x80 { 0x013e } else { 0x0143 }; for i in ic..oc { match rom[i] { 0 => break, v => buf.push(v as char), } } buf } // \u9a8c\u8bc1\u6807\u9898\u6821\u9a8c\u548c fn check_checksum(rom: &[u8]) -> bool { let mut v: u8 = 0; for i in 0x0134..0x014d { v = v.wrapping_sub(rom[i]).wrapping_sub(1); } rom[0x014d] == v } fn main() -> Result<(), Box<std::error::Error>> { let mut f = std::fs::File::open(\"/src/gameboy/res/boxes.gb\")?; let mut rom = Vec::new(); f.read_to_end(&mut rom).unwrap(); assert!(rom.len() >= 0x0150); assert!(check_checksum(&rom[..])); let rom_name = rom_name(&rom[..]); println!(\"{}\", rom_name); // BOXES Ok(()) } \u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801, \u6b64\u6e38\u620f\u7684\u6807\u9898\u88ab\u6210\u529f\u6253\u5370\u81f3\u6807\u51c6\u8f93\u51fa. \u540c\u65f6, \u6ce8\u610f\u5230\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a asset \u8bed\u8a00\u6765\u5bf9\u6807\u9898\u6821\u9a8c\u548c\u8fdb\u884c\u65ad\u8a00. \u9664\u4e86\u83b7\u53d6\u6807\u9898\u4e4b\u5916, \u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u53bb\u5b8c\u5584\u8fd9\u90e8\u5206\u4ee3\u7801\u6765\u5c1d\u8bd5\u83b7\u53d6\u8f6f\u4ef6\u5f00\u53d1\u5546, \u53d1\u552e\u5730\u7b49\u4fe1\u606f.","title":"GB-\u6e38\u620f\u5361\u5e26-Header"},{"location":"content/gameboy/cartridge/cartridge_header/#cartridge-header","text":"Cartridge \u4fdd\u5b58\u4e86\u6e38\u620f\u7684\u6c47\u7f16\u4ee3\u7801\u4e0e\u5168\u90e8\u4e8c\u8fdb\u5236\u6570\u636e(\u56fe\u50cf, \u97f3\u4e50\u7b49), \u5b83\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u6570\u636e\u5b58\u50a8\u683c\u5f0f. \u4e0e\u4f17\u591a\u5e38\u7528\u7684\u6587\u4ef6\u5b58\u50a8\u683c\u5f0f\u7c7b\u4f3c, Cartridge \u5728\u6587\u4ef6\u5f00\u5934\u4e5f\u6709\u4e00\u6bb5\u7279\u6b8a\u533a\u57df, \u88ab\u79f0\u4e3a Header(\u6587\u4ef6\u5934). Header \u5185\u5305\u542b\u4e86\u63cf\u8ff0\u8be5 Cartridge \u7684\u4fe1\u606f\u4ee5\u53ca\u5173\u4e8e\u5f15\u5bfc Game Boy \u6e38\u620f\u673a\u6b63\u5e38\u8bfb\u53d6\u6e38\u620f\u6570\u636e\u7684\u7a0b\u5e8f\u6307\u4ee4. Cartridge \u7684 Header \u533a\u4f4d\u4e8e Cartridge \u7684 0x0100-0x0140(\u7b2c 256 \u4e2a\u5b57\u8282\u5230\u7b2c 320 \u4e2a\u5b57\u8282)\u4f4d\u7f6e. \u6587\u4ef6\u5934\u662f\u4f4d\u4e8e\u6587\u4ef6\u5f00\u5934\u7684\u4e00\u6bb5\u627f\u62c5\u4e00\u5b9a\u4efb\u52a1\u7684\u6570\u636e, \u4e00\u822c\u90fd\u5728\u6587\u4ef6\u5f00\u5934\u90e8\u5206, \u4f46\u4e5f\u6709\u4e00\u4e9b\u4f4d\u4e8e\u6587\u4ef6\u7ed3\u5c3e, \u8fd9\u53d6\u51b3\u4e8e\u7279\u5b9a\u7684\u6587\u4ef6\u683c\u5f0f. \u6587\u4ef6\u5934\u901a\u5e38\u4fdd\u5b58\u8be5\u6587\u4ef6\u7684\u4e00\u4e9b\u4fe1\u606f, \u6bd4\u5982\u6570\u636e\u5b58\u50a8\u683c\u5f0f\u4e0e\u538b\u7f29\u65b9\u5f0f, \u7528\u4e8e\u5f15\u5bfc\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f\u6b63\u786e\u8bfb\u53d6\u6587\u4ef6\u4fe1\u606f. \u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e, \u6bd4\u5982\u4e00\u4e2a JPG \u683c\u5f0f\u7684\u56fe\u50cf\u6587\u4ef6, \u56fe\u50cf\u6d4f\u89c8\u5668\u65e0\u9700\u8bfb\u53d6\u6587\u4ef6\u7684\u5168\u90e8\u6570\u636e\u800c\u4ec5\u4ec5\u9700\u8981\u8bfb\u53d6 Header \u4e2d\u7684\u4e00\u90e8\u5206\u6570\u636e, \u5c31\u80fd\u83b7\u77e5\u56fe\u5f62\u7684\u957f\u5bbd\u7b49\u4fe1\u606f.","title":"Cartridge Header"},{"location":"content/gameboy/cartridge/cartridge_header/#0100-0103","text":"\u6bcf\u5f53\u6e38\u620f\u5361\u5e26\u63d2\u5165 Game Boy \u6e38\u620f\u673a\u540e, \u5c4f\u5e55\u5c06\u663e\u793a\u4efb\u5929\u5802\u7684 LOGO. \u5728\u663e\u793a\u5b8c\u6210\u4efb\u5929\u5802\u7684 LOGO \u540e, Game Boy \u5185\u7f6e\u7684\u542f\u52a8\u7a0b\u5e8f\u5c06\u4f1a\u628a\u7a0b\u5e8f\u8ba1\u6570\u5668 PC \u8bbe\u7f6e\u5230 0x0100 \u5730\u5740, \u4e4b\u540e, \u8be5\u533a\u6bb5\u4e2d\u5305\u542b\u7684\u7a0b\u5e8f\u6307\u4ee4\u4f1a\u4f7f\u7a0b\u5e8f\u8ba1\u6570\u5668\u8df3\u8f6c\u5230 Cartridge \u5185\u7684\u5b9e\u9645\u5165\u53e3\u5730\u5740. \u901a\u5e38\u6765\u8bb2, \u8fd9 4 \u4e2a Byte \u5305\u542b\u4e00\u4e2a NOP \u6307\u4ee4, \u548c\u4e00\u4e2a JP 0x0150 \u6307\u4ee4, \u8fd9\u4e24\u4e2a\u6307\u4ee4\u4f1a\u6307\u793a CPU \u8df3\u8f6c\u5230 0x0150 \u7684\u4f4d\u7f6e. \u901a\u5e38\u60c5\u51b5\u4e0b\u8fd9\u6bb5\u533a\u57df\u7684\u5730\u5740\u4e0e\u5176\u5bf9\u5e94\u7684\u503c\u5982\u4e0b\u8868\u6240\u793a. Addr Data 0x0100 0x00 0x0101 0xc3 0x0102 0x50 0x0103 0x01 \u5176\u7b49\u4ef7 ASM \u8868\u793a\u4e3a: NOP JUMP 0x0150","title":"0100-0103 \u7a0b\u5e8f\u6267\u884c\u5165\u53e3"},{"location":"content/gameboy/cartridge/cartridge_header/#0104-0133-logo","text":"\u8be5\u5b57\u8282\u533a\u57df\u5b58\u50a8\u4e86\u4efb\u5929\u5802\u7684 LOGO \u56fe\u6807. \u5f53 Game Boy \u5f00\u673a\u7684\u65f6\u5019, \u9996\u5148\u4f1a\u663e\u793a\u8fd9\u90e8\u5206\u5185\u5bb9, \u4e4b\u540e\u9a8c\u8bc1\u8be5\u56fe\u50cf\u7684\u5185\u5bb9. \u5982\u679c\u8fd9\u90e8\u5206\u5185\u5bb9\u7684\u5b57\u8282\u4e0d\u6b63\u786e, \u5219\u4f1a\u9501\u5b9a\u81ea\u8eab\u5e76\u62d2\u7edd\u7ee7\u7eed\u8fd0\u884c. \u8fd9\u90e8\u5206\u5185\u5bb9\u7684 16 \u8fdb\u5236\u683c\u5f0f\u5982\u4e0b\u6240\u793a. CE ED 66 66 CC 0D 00 0B 03 73 00 83 00 0C 00 0D 00 08 11 1F 88 89 00 0E DC CC 6E E6 DD DD D9 99 BB BB 67 63 6E 0E EC CC DD DC 99 9F BB B9 33 3E \u5927\u90e8\u5206\u60c5\u51b5\u4e0b Game Boy \u53ea\u4f1a\u9a8c\u8bc1\u524d 0x18 \u5b57\u8282, \u4f46\u5076\u5c14\u4e5f\u4f1a\u6709\u9a8c\u8bc1\u5168\u90e8 0x30 \u5b57\u8282\u7684\u60c5\u51b5. \u4efb\u5929\u5802\u4e4b\u6240\u4ee5\u8981\u6c42\u5361\u5e26\u5185\u5fc5\u987b\u9644\u5e26\u8fd9\u90e8\u5206\u4fe1\u606f\u662f\u6709\u5386\u53f2\u539f\u56e0\u7684, \u56e0\u4e3a\u5728\u4e92\u8054\u7f51\u53d1\u5c55\u65e9\u671f, \u5404\u4e2a\u56fd\u5bb6\u7684\u7248\u6743\u6cd5/\u8457\u4f5c\u6743\u6cd5\u5e76\u4e0d\u5b8c\u5584, \u5e76\u4e0d\u90fd\u80fd\u975e\u5e38\u6743\u5a01\u7684\u754c\u5b9a\"\u5728\u7535\u8111\u4e0a\u590d\u5236\u7c98\u8d34\u7535\u5b50\u6587\u4ef6\u662f\u5426\u5c5e\u4e8e\u4fb5\u6743\", \u56e0\u6b64\u6709\u8bb8\u591a\u76d7\u7248\u5546\u590d\u5236\u6e38\u620f\u5361\u5e26\u7684\u5185\u5bb9\u5e76\u5236\u4f5c\u76d7\u7248\u5361\u5e26. \u4efb\u5929\u5802\u901a\u8fc7\u5728\u5361\u5e26\u4e2d\u52a0\u5165\u5546\u6807\u56fe\u50cf\u5e76\u5728 Game Boy \u6e38\u620f\u673a\u4e0a\u5f3a\u5236\u53bb\u9274\u5b9a\u5546\u6807\u5185\u5bb9, \u5de7\u5999\u7684\u5c06\u5bf9\u7248\u6743\u6216\u8457\u4f5c\u6743\u7684\u4fb5\u6743\u8f6c\u6362\u4e3a\u5bf9\u516c\u53f8\u5546\u6807\u7684\u4fb5\u6743--\u5546\u6807\u4fb5\u6743\u5728\u90a3\u65f6\u5019\u5df2\u7ecf\u6709\u975e\u5e38\u5b8c\u5584\u7684\u6cd5\u5f8b\u53bb\u754c\u5b9a\u4e86. \u5f53\u7136\u53e6\u4e00\u4e2a\u91cd\u8981\u65b9\u9762, \u52a0\u5165 LOGO \u4ea6\u6709\u52a9\u4e8e\u63d0\u5347\u516c\u53f8\u7684\u793e\u4f1a\u77e5\u540d\u5ea6, \u6bd4\u5982\u73b0\u4eca\u6bd4\u8f83\u6709\u540d\u7684\u6e38\u620f\u5f00\u53d1\u5f15\u64ce Unity, \u5982\u679c\u5f00\u53d1\u8005\u4f7f\u7528\u7684\u662f\u5176\u514d\u8d39\u7248, \u5176\u5236\u4f5c\u548c\u53d1\u884c\u7684\u6e38\u620f\u5728\u542f\u52a8\u65f6\u5219\u5fc5\u987b\u663e\u793a Unity \u7684 LOGO.","title":"0104-0133 \u4efb\u5929\u5802\u7684 LOGO"},{"location":"content/gameboy/cartridge/cartridge_header/#0134-0143","text":"\u8be5\u5b57\u8282\u533a\u57df\u5b58\u50a8\u4e86\u5361\u5e26\u7684\u6807\u9898. \u5361\u5e26\u7684\u6807\u9898\u603b\u662f\u5927\u5199\u7684 ASCII \u82f1\u6587\u5b57\u6bcd. \u5982\u679c\u6807\u9898\u957f\u5ea6\u5c0f\u4e8e 16 \u4e2a\u5b57\u7b26, \u5269\u4f59\u7684\u5b58\u50a8\u7a7a\u95f4\u5219\u5168\u90e8\u4f7f\u7528 0x00 \u586b\u5145. \u5728\u53d1\u660e Game Boy Color(CGB)\u524d, \u4efb\u5929\u5802\u5c06\u8fd9\u4e2a\u533a\u57df\u7684\u957f\u5ea6\u51cf\u5c11\u5230 15 \u4e2a\u5b57\u7b26, \u51e0\u4e2a\u6708\u4e4b\u540e\u4ed6\u4eec\u5c31\u53c8\u6709\u4e86\u5c06\u5b83\u51cf\u5c11\u5230 11 \u4e2a\u5b57\u7b26\u7684\u5947\u5999\u60f3\u6cd5. \u56e0\u6b64\u4e00\u4e2a Game Boy \u4eff\u771f\u5668\u603b\u662f\u9996\u5148\u9700\u8981\u5224\u65ad\u8fd9\u76d2\u5361\u5e26\u662f\u4e0d\u662f CGB \u5361\u5e26, \u7136\u540e\u518d\u9009\u7528\u6b63\u786e\u7684\u8bfb\u53d6\u65b9\u5f0f\u8bfb\u53d6\u6807\u9898. CGB \u6a21\u5f0f\u7684\u533a\u6bb5\u5185\u5bb9\u5982\u4e0b. 013F-0142 \u5236\u9020\u5546\u4ee3\u7801 \u5728\u975e CGB \u5361\u5e26\u4e2d, \u8fd9\u90e8\u5206\u5185\u5bb9\u662f\u6807\u9898\u7684\u4e00\u90e8\u5206. \u5728 CGB \u5361\u5e26\u4e2d, \u8fd9\u90e8\u5206\u5b58\u50a8\u4e86\u5236\u9020\u5546\u7684\u4ee3\u7801. \u6682\u65f6\u4e0d\u660e\u767d\u5982\u6b64\u8fd9\u822c\u505a\u6cd5\u6709\u4ec0\u4e48\u76ee\u7684\u548c\u6df1\u5c42\u6b21\u7684\u610f\u4e49. 0143 CGB \u6807\u5fd7 \u5728\u975e CGB \u5361\u5e26\u4e2d, \u8fd9\u90e8\u5206\u5185\u5bb9\u662f\u6807\u9898\u7684\u4e00\u90e8\u5206. \u5728 CGB \u5361\u5e26\u4e2d, \u5176\u9ad8\u4f4d\u8868\u793a\u8be5\u76d2\u5361\u5e26\u5df2\u542f\u7528 CGB \u529f\u80fd. \u5bf9\u4e8e CGB \u6765\u8bf4\u8fd9\u662f\u5fc5\u9700\u7684, \u5426\u5219 CGB \u4f1a\u5c06\u81ea\u8eab\u5207\u6362\u4e3a\u975e CGB \u6a21\u5f0f. \u5178\u578b\u503c\u4e3a: 0x80 - \u8be5\u6e38\u620f\u652f\u6301 CGB \u529f\u80fd, \u4f46\u540c\u6837\u80fd\u5728\u975e CGB \u6e38\u620f\u673a\u4e0a\u8fd0\u884c. 0xC0 - \u8be5\u6e38\u620f\u4ec5\u80fd\u8fd0\u884c\u5728 CGB \u6e38\u620f\u673a\u4e0a. \u5728 Game Boy \u5b9e\u673a\u4e0a, \u5982\u679c\u8bbe\u7f6e\u4e86\u7b2c 7 \u4f4d, \u4ee5\u53ca\u7b2c 2 \u6216\u7b2c 3 \u4f4d, \u4f1a\u5207\u6362\u5230\u7279\u6b8a\u7684\u975e CGB \u6a21\u5f0f, \u8be5\u6a21\u5f0f\u4e0b\u7cfb\u7edf\u8c03\u8272\u76d8\u672a\u521d\u59cb\u5316. \u76ee\u7684\u672a\u77e5, \u4f46\u731c\u6d4b\u6700\u7ec8\u8fd9\u5e94\u8be5\u7528\u4e8e\u7740\u8272\u5355\u8272\u6e38\u620f\u4e0a, \u8fd9\u4e9b\u5355\u8272\u6e38\u620f\u53ef\u80fd\u5728\u5361\u5e26\u7684\u67d0\u4e2a\u90e8\u5206\u81ea\u5df1\u8bbe\u5b9a\u4e86\u8c03\u8272\u76d8\u6570\u636e.","title":"0134-0143 \u6807\u9898"},{"location":"content/gameboy/cartridge/cartridge_header/#0144-0145","text":"\u4f7f\u7528\u4e24\u4e2a\u5b57\u8282\u5b58\u50a8\u8bb8\u53ef\u534f\u8bae\u7684\u4ee3\u7801, \u8fd9\u4e9b\u4ee3\u7801\u548c\u6e38\u620f\u516c\u53f8\u6216\u53d1\u5e03\u8005\u76f8\u5173. \u4e00\u4e9b\u5178\u578b\u7684\u4f8b\u5b50\u5982\u4e0b: 00 none 01 Nintendo R&D1 08 Capcom 13 Electronic Arts 18 Hudson Soft 19 b-ai 20 kss 22 pow 24 PCM Complete 25 san-x 28 Kemco Japan 29 seta 30 Viacom 31 Nintendo 32 Bandai 33 Ocean/Acclaim 34 Konami 35 Hector 37 Taito 38 Hudson 39 Banpresto 41 Ubi Soft 42 Atlus 44 Malibu 46 angel 47 Bullet-Proof 49 irem 50 Absolute 51 Acclaim 52 Activision 53 American sammy 54 Konami 55 Hi tech entertainment 56 LJN 57 Matchbox 58 Mattel 59 Milton Bradley 60 Titus 61 Virgin 64 LucasArts 67 Ocean 69 Electronic Arts 70 Infogrames 71 Interplay 72 Broderbund 73 sculptured 75 sci 78 THQ 79 Accolade 80 misawa 83 lozc 86 tokuma shoten i* 87 tsukuda ori* 91 Chunsoft 92 Video system 93 Ocean/Acclaim 95 Varie 96 Yonezawa/s'pal 97 Kaneko 99 Pack in soft A4 Konami (Yu-Gi-Oh!)","title":"0144-0145 \u8bb8\u53ef\u534f\u8bae\u4ee3\u7801"},{"location":"content/gameboy/cartridge/cartridge_header/#0146-sgb","text":"\u8be5\u5b57\u8282\u544a\u77e5\u6e38\u620f\u662f\u5426\u652f\u6301 Super Game Boy(SGB)\u529f\u80fd, \u5e38\u89c1\u503c\u4e3a: 0x00: \u6e38\u620f\u4e0d\u652f\u6301 SGB \u529f\u80fd. 0x03: \u6e38\u620f\u652f\u6301 SGB \u529f\u80fd. \u5982\u679c\u6b64\u5b57\u8282\u8bbe\u7f6e\u4e3a 0x03 \u4ee5\u5916\u7684\u5176\u4ed6\u503c, \u5219\u89c6\u4e3a\u4e0d\u652f\u6301 SGB \u529f\u80fd. SGB \u662f Game Boy \u7684\u5468\u8fb9\u4ea7\u54c1, \u73a9\u5bb6\u53ef\u4ee5\u628a SGB \u63d2\u5230 SFC \u4e0a\u7136\u540e\u5728 SGB \u4e0a\u63d2\u4e0a\u4e00\u5f20 GB \u5361\u5e26, \u8fd9\u6837\u73a9\u5bb6\u5c31\u53ef\u4ee5\u5728\u7535\u89c6\u4e0a\u73a9 GB \u6e38\u620f\u4e86.","title":"0146 SGB \u6807\u5fd7"},{"location":"content/gameboy/cartridge/cartridge_header/#0147","text":"\u8be5\u5b57\u8282\u544a\u77e5\u6e38\u620f\u5361\u5e26\u6240\u4f7f\u7528\u7684 Memory Bank Controller \u7c7b\u578b(\u7f29\u5199\u4e3a MBC, \u4e0b\u4e00\u8282\u5c06\u4f1a\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u8ba8\u8bba), \u4ee5\u53ca\u6e38\u620f\u5361\u5e26\u4e2d\u662f\u5426\u4f7f\u7528\u4e86\u5176\u5b83\u5916\u90e8\u786c\u4ef6, \u6bd4\u5982\u7535\u6c60, \u7ea2\u5916\u7ebf\u611f\u5149\u5668, \u76f8\u673a\u7b49. \u901a\u5e38\u6765\u8bb2\u6709\u4ee5\u4e0b\u51e0\u79cd\u5e38\u89c1\u786c\u4ef6: ROM: \u4e0d\u53ef\u53d8\u5b58\u50a8, \u7528\u6765\u5b58\u50a8\u6e38\u620f\u672c\u4f53\u6570\u636e RAM: \u53ef\u53d8\u5b58\u50a8, \u901a\u5e38\u7528\u6765\u5b58\u50a8\u6e38\u620f\u8bb0\u5f55, \u5173\u95ed Game Boy \u540e\u6570\u636e\u6e05\u7a7a BATTERY: \u7535\u6c60, \u7528\u6765\u6301\u4e45\u5316\u5b58\u50a8 RAM \u4e2d\u7684\u5185\u5bb9, \u5173\u95ed Game Boy \u540e\u53ef\u5411 RAM \u4f9b\u7535\u4ece\u800c\u4fdd\u6301 RAM \u5185\u7684\u6570\u636e\u4e0d\u53d8. TIMER: \u5185\u90e8\u65f6\u949f, \u7528\u4e8e\u8bb0\u5f55\u65f6\u95f4. \u503c\u4e0e\u5176\u542b\u4e49\u7684\u5bf9\u7167\u5982\u4e0b\u6240\u793a: 0x00 ROM ONLY 0x19 MBC5 0x01 MBC1 0x1A MBC5+RAM 0x02 MBC1+RAM 0x1B MBC5+RAM+BATTERY 0x03 MBC1+RAM+BATTERY 0x1C MBC5+RUMBLE 0x05 MBC2 0x1D MBC5+RUMBLE+RAM 0x06 MBC2+BATTERY 0x1E MBC5+RUMBLE+RAM+BATTERY 0x08 ROM+RAM 0x20 MBC6 0x09 ROM+RAM+BATTERY 0x22 MBC7+SENSOR+RUMBLE+RAM+BATTERY 0x0B MMM01 0x0C MMM01+RAM 0x0D MMM01+RAM+BATTERY 0x0F MBC3+TIMER+BATTERY 0x10 MBC3+TIMER+RAM+BATTERY 0xFC POCKET CAMERA 0x11 MBC3 0xFD BANDAI TAMA5 0x12 MBC3+RAM 0xFE HuC3 0x13 MBC3+RAM+BATTERY 0xFF HuC1+RAM+BATTERY","title":"0147 \u5361\u5e26\u7c7b\u578b"},{"location":"content/gameboy/cartridge/cartridge_header/#0148-rom","text":"\u8be5\u5b57\u8282\u6807\u660e\u8be5\u5361\u5e26\u7684 ROM \u5927\u5c0f. \u901a\u5e38\u662f 32KB \u7684\u6574\u6570\u500d. \u5e38\u7528\u7684\u503c\u4e0e\u5176\u5b9e\u9645\u8868\u793a\u7684\u5bb9\u91cf\u5927\u5c0f\u5bf9\u5e94\u5982\u4e0b: 0x00 - 32KByte (no ROM banking) 0x01 - 64KByte (4 banks) 0x02 - 128KByte (8 banks) 0x03 - 256KByte (16 banks) 0x04 - 512KByte (32 banks) 0x05 - 1MByte (64 banks) - only 63 banks used by MBC1 0x06 - 2MByte (128 banks) - only 125 banks used by MBC1 0x07 - 4MByte (256 banks) 0x08 - 8MByte (512 banks) 0x52 - 1.1MByte (72 banks) 0x53 - 1.2MByte (80 banks) 0x54 - 1.5MByte (96 banks)","title":"0148 ROM \u5927\u5c0f"},{"location":"content/gameboy/cartridge/cartridge_header/#0149-ram","text":"\u8be5\u5b57\u8282\u6807\u660e\u8be5\u5361\u5e26\u4e2d\u5916\u90e8 RAM \u7684\u5927\u5c0f. \u5e38\u7528\u7684\u503c\u4e0e\u5176\u5b9e\u9645\u8868\u793a\u7684\u5bb9\u91cf\u5927\u5c0f\u5bf9\u5e94\u5982\u4e0b: 0x00 - None 0x01 - 2 KBytes 0x02 - 8 Kbytes 0x03 - 32 KBytes (4 banks of 8KBytes each) 0x04 - 128 KBytes (16 banks of 8KBytes each) 0x05 - 64 KBytes (8 banks of 8KBytes each) \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5f53\u4f7f\u7528\u7684\u662f MBC2 \u5361\u5e26\u65f6, \u8be5\u4f4d\u7f6e\u5fc5\u987b\u8bbe\u7f6e\u4e3a 0x00, \u5373\u4f7f MBC2 \u672c\u8eab\u5305\u542b\u4e00\u4e2a\u5185\u7f6e\u7684\u5bb9\u91cf\u4e3a 512 x 4bits \u7684 RAM.","title":"0149 RAM \u5927\u5c0f"},{"location":"content/gameboy/cartridge/cartridge_header/#014a","text":"\u8be5\u5b57\u8282\u6807\u660e\u8be5\u5361\u5e26\u662f\u5426\u5728\u975e\u65e5\u672c\u5730\u533a\u9500\u552e. \u53ea\u6709\u4e24\u4e2a\u53ef\u9009\u503c: 0x00 - Japanese 0x01 - Non-Japanese \u65e9\u671f Game Boy \u548c\u5176\u6e38\u620f\u5361\u5e26\u53ea\u5728\u65e5\u672c\u56fd\u5185\u5e02\u573a\u6709\u9500\u552e, \u4f46\u968f\u7740\u5b83\u7684\u6269\u5f20, \u5176\u53d1\u552e\u5730\u9010\u6e10\u6269\u5f20\u5230\u4e86\u7f8e\u56fd, \u6b27\u6d32, \u53f0\u6e7e\u7b49\u56fd\u5bb6\u548c\u5730\u533a. \u4ec5\u4ec5\u7528\u4e00\u4e2a\"\u662f/\u5426\u65e5\u672c\u5730\u533a\u53d1\u552e\"\u7684\u6807\u8bb0\u663e\u7136\u5df2\u7ecf\u65e0\u6cd5\u6ee1\u8db3\u9700\u8981, \u56e0\u6b64\u8be5\u5b57\u8282\u5b9e\u9645\u4e0a\u5904\u4e8e\u4e00\u4e2a\u6ca1\u4ec0\u4e48\u7528\u5904\u7684\u5c34\u5c2c\u5730\u4f4d. \u5728 0x014a \u4e4b\u540e\u7684 0x014b(\u65e7\u7684\u8bb8\u53ef\u534f\u8bae\u4ee3\u7801) \u548c 0x014c(\u7248\u672c\u53f7) \u5176\u5b9e\u90fd\u5904\u4e8e\u4e00\u79cd\u534a\u5e9f\u5f03\u72b6\u6001, \u56e0\u6b64\u4e0d\u518d\u8fc7\u591a\u7b14\u58a8\u8fdb\u884c\u4ecb\u7ecd.","title":"014A \u53d1\u552e\u5730\u4ee3\u7801"},{"location":"content/gameboy/cartridge/cartridge_header/#014d","text":"\u8be5\u5b57\u8282\u5305\u542b\u5361\u5e26\u6807\u9898(0134-014C)\u7684 8 \u4f4d\u6821\u9a8c\u548c. \u6821\u9a8c\u548c\u8ba1\u7b97\u4f2a\u4ee3\u7801\u5982\u4e0b: x=0:FOR i=0134h TO 014Ch:x=x-MEM[i]-1:NEXT \u5176\u5bf9\u5e94\u7684 Rust \u4ee3\u7801\u53ef\u4ee5\u7528\u5982\u4e0b\u4e00\u4e2a\u7b80\u77ed\u51fd\u6570\u8868\u793a: fn check_checksum(rom: &[u8]) -> bool { let mut v: u8 = 0; for i in 0x0134..0x014d { v = v.wrapping_sub(rom[i]).wrapping_sub(1); } rom[0x014d] == v } \u8fd4\u56de\u7ed3\u679c\u7684\u4f4e 8 \u4f4d\u5fc5\u987b\u4e0e\u6b64\u6761\u76ee\u4e2d\u7684\u503c\u76f8\u540c. \u5982\u679c\u6b64\u6821\u9a8c\u548c\u4e0d\u6b63\u786e, \u5219\u6e38\u620f\u5c06\u4e0d\u4f1a\u88ab\u6267\u884c.","title":"014D \u6807\u9898\u6821\u9a8c\u548c"},{"location":"content/gameboy/cartridge/cartridge_header/#014e-014f","text":"\u8be5\u5b57\u8282\u533a\u57df\u5305\u542b\u4e00\u4e2a 16 \u4f4d\u6821\u9a8c\u548c, \u6b64\u6821\u9a8c\u548c\u6821\u9a8c\u5361\u5e26\u7684\u5168\u90e8\u6570\u636e\u5185\u5bb9. Game Boy \u5e76\u4e0d\u4f1a\u4e3b\u52a8\u53bb\u9a8c\u8bc1\u8be5\u6821\u9a8c\u548c. \u7531\u4e8e\u7f3a\u4e4f\u76f8\u5173\u7684\u76f4\u63a5\u6280\u672f\u8d44\u6599, \u5168\u5c40\u6821\u9a8c\u548c\u7684\u8ba1\u7b97\u8fc7\u7a0b\u662f\u4ece\u5f00\u6e90\u7684 Game Boy \u5f15\u64ce GBDK \u7684\u6e90\u4ee3\u7801\u4e2d\u53cd\u63a8\u800c\u6765\u7684, \u5176 C \u8bed\u8a00\u6e90\u4ee3\u7801\u5982\u4e0b. chk = 0; cart[0x014E/SEGSIZE][0x014E%SEGSIZE] = 0; cart[0x014F/SEGSIZE][0x014F%SEGSIZE] = 0; for(i = 0; i < NBSEG; i++) for(pos = 0; pos < SEGSIZE; pos++) chk += cart[i][pos]; cart[0x014E/SEGSIZE][0x014E%SEGSIZE] = (chk>>8)&0xFF; cart[0x014F/SEGSIZE][0x014F%SEGSIZE] = chk&0xFF; \u5176\u4e2d\u53d8\u91cf chk(checksum) \u4e3a\u4e00\u4e2a unsigned long \u7c7b\u578b, \u5728\u5f00\u59cb\u8ba1\u7b97\u5168\u5c40\u6821\u9a8c\u548c\u4e4b\u524d, \u9996\u5148\u8bbe\u7f6e 0x014e \u4e0e 0x014f \u4e3a 0, \u7136\u540e\u9010\u5b57\u8282\u8bfb\u53d6 cartridge \u4e2d\u7684\u6570\u636e\u5e76\u4e0e chk \u76f8\u52a0. \u5faa\u73af\u7ed3\u675f\u540e, chk \u7684\u503c\u88ab\u4fdd\u5b58\u5728\u5730\u5740 0x014e \u4e0e 0x014f \u4e2d.","title":"014E-014F \u5168\u5c40\u6821\u9a8c\u548c"},{"location":"content/gameboy/cartridge/cartridge_header/#_1","text":"\u672c\u8282\u5c06\u4f1a\u7f16\u5199\u4e00\u6bb5\u7b80\u5355\u7684\u7a0b\u5e8f, \u7528\u6765\u89e3\u6790 Cartridge Header \u7684\u90e8\u5206\u4fe1\u606f. \u7528\u4f5c\u6d4b\u8bd5\u7684\u6e38\u620f ROM \u662f\u300aBoxes\u300b\u6e38\u620f, \u8bfb\u8005\u53ef\u4ee5\u5728 https://github.com/mohanson/gameboy/tree/master/res \u4e0b\u8f7d\u5230\u8be5\u6e38\u620f ROM. \u7a0b\u5e8f\u7684\u76ee\u7684\u662f\u8bfb\u53d6\u6e38\u620f\u7684\u6807\u9898, \u5e76\u786e\u8ba4\u5176\u6807\u9898\u6821\u9a8c\u548c\u6b63\u786e. use std::io::Read; // \u83b7\u53d6\u6e38\u620f\u5361\u5e26\u7684\u6807\u9898 fn rom_name(rom: &[u8]) -> String { let mut buf = String::new(); let ic = 0x0134; let oc = if rom[0x0143] == 0x80 { 0x013e } else { 0x0143 }; for i in ic..oc { match rom[i] { 0 => break, v => buf.push(v as char), } } buf } // \u9a8c\u8bc1\u6807\u9898\u6821\u9a8c\u548c fn check_checksum(rom: &[u8]) -> bool { let mut v: u8 = 0; for i in 0x0134..0x014d { v = v.wrapping_sub(rom[i]).wrapping_sub(1); } rom[0x014d] == v } fn main() -> Result<(), Box<std::error::Error>> { let mut f = std::fs::File::open(\"/src/gameboy/res/boxes.gb\")?; let mut rom = Vec::new(); f.read_to_end(&mut rom).unwrap(); assert!(rom.len() >= 0x0150); assert!(check_checksum(&rom[..])); let rom_name = rom_name(&rom[..]); println!(\"{}\", rom_name); // BOXES Ok(()) } \u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801, \u6b64\u6e38\u620f\u7684\u6807\u9898\u88ab\u6210\u529f\u6253\u5370\u81f3\u6807\u51c6\u8f93\u51fa. \u540c\u65f6, \u6ce8\u610f\u5230\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a asset \u8bed\u8a00\u6765\u5bf9\u6807\u9898\u6821\u9a8c\u548c\u8fdb\u884c\u65ad\u8a00. \u9664\u4e86\u83b7\u53d6\u6807\u9898\u4e4b\u5916, \u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u53bb\u5b8c\u5584\u8fd9\u90e8\u5206\u4ee3\u7801\u6765\u5c1d\u8bd5\u83b7\u53d6\u8f6f\u4ef6\u5f00\u53d1\u5546, \u53d1\u552e\u5730\u7b49\u4fe1\u606f.","title":"\u793a\u4f8b\u4ee3\u7801"},{"location":"content/gameboy/cartridge/mbc1/","text":"MBC1 MBC1 \u662f Game Boy \u7684\u7b2c\u4e00\u6b3e MBC \u82af\u7247. \u4efb\u4f55\u540e\u7eed\u7684\u5347\u7ea7\u578b MBC \u82af\u7247\u5176\u5de5\u4f5c\u539f\u7406\u90fd\u4e0e MBC1 \u76f8\u4f3c, \u56e0\u6b64\u5c06\u6e38\u620f\u7a0b\u5e8f\u4ece\u4e00\u4e2a MBC1 \u82af\u7247\u5347\u7ea7\u5230\u53e6\u4e00\u4e2a MBC \u82af\u7247\u76f8\u5bf9\u5bb9\u6613, \u751a\u81f3\u53ef\u4ee5\u4f7f\u540c\u4e00\u4e2a\u6e38\u620f\u4e0e\u51e0\u79cd\u4e0d\u540c\u7c7b\u578b\u7684 MBC \u517c\u5bb9. MBC1 \u5730\u5740\u7a7a\u95f4\u5212\u5206 MBC1 \u82af\u7247\u7406\u8bba\u4e0a\u6700\u5927\u53ef\u62e5\u6709 128 \u4e2a ROM \u5b58\u50a8\u4f53, \u6bcf\u4e2a ROM \u5b58\u50a8\u4f53\u5927\u5c0f\u662f16KB; \u540c\u65f6\u62e5\u67094 \u4e2a RAM \u5b58\u50a8\u4f53, \u6bcf\u4e2a RAM \u5b58\u50a8\u4f53\u5927\u5c0f\u662f 8KB. MBC1 \u82af\u7247\u5c06 Game Boy \u5206\u914d\u7ed9\u6e38\u620f\u5361\u5e26\u7684\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4 0x0000...0x7fff \u548c 0xa000...0xbfff \u5212\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u72ec\u7acb\u533a\u95f4, \u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b. 1) 0000-3FFF ROM \u5b58\u50a8\u4f53 00 \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u603b\u662f\u6620\u5c04\u5230 ROM \u7684\u524d 16KB \u5b57\u8282\u7269\u7406\u5b58\u50a8, \u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a ROM \u5b58\u50a8\u4f53. \u5f53 CPU \u8bd5\u56fe\u8bfb\u53d6\u4e00\u4e2a\u5c5e\u4e8e\u8be5\u8303\u56f4\u5185\u7684\u5730\u5740\u65f6, \u5176\u5b9e\u9645\u8bfb\u53d6\u51fa\u7684\u5c31\u662f\u6e38\u620f\u5361\u5e26\u4fdd\u5b58\u5728\u8be5\u7269\u7406\u5730\u5740\u7684\u503c. 2) 4000-7FFF ROM \u5b58\u50a8\u4f53 01-7F \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u4e3a\u7b2c 0x01 \u5230 0x7f \u7f16\u53f7\u7684 ROM \u5b58\u50a8\u4f53. \u6ce8\u610f\u7684\u662f\u5176\u4e2d\u7f16\u53f7\u4e3a 0x20, 0x40 \u4e0e 0x60 \u7684\u5b58\u50a8\u4f53\u4e0d\u80fd\u88ab\u4f7f\u7528. \u56e0\u6b64 MBC1 \u82af\u7247\u5b9e\u9645\u4e0a\u6700\u5927\u53ef\u652f\u6301 125 \u4e2a ROM \u5b58\u50a8\u4f53, \u6700\u5927\u6570\u636e\u5b58\u50a8\u5bb9\u91cf\u4e3a 125 * 16KB ~= 2M. MBC1 \u82af\u7247\u5185\u90e8\u62e5\u6709\u4e00\u4e2a Bank Number \u5bc4\u5b58\u5668\u6765\u4fdd\u5b58\u5f53\u524d\u7684\u5b58\u50a8\u4f53\u7f16\u53f7. \u5f53 CPU \u8bd5\u56fe\u8bfb\u53d6\u4e00\u4e2a\u5c5e\u4e8e\u8be5\u8303\u56f4\u5185\u7684\u7cfb\u7edf\u5730\u5740\u65f6, \u5c06\u5b9e\u9645\u8bfb\u53d6\u51fa\u7269\u7406\u5730\u5740\u4e3a Bank Number * 0x4000 + Address - 0x4000 \u4fdd\u5b58\u7684\u503c. 3) A000-BFFF RAM \u5b58\u50a8\u4f53 00-03 \u8bfb\u5199\u533a\u57df. \u8be5\u533a\u57df\u7528\u4e8e\u8bfb\u5199\u6e38\u620f\u5361\u5e26\u4e2d\u7684\u5916\u90e8 RAM(\u5982\u679c\u6709\u7684\u8bdd). \u5916\u90e8 RAM \u901a\u5e38\u9700\u8981\u4f7f\u7528\u7535\u6c60\u505a\u6301\u4e45\u5316\u5b58\u50a8, \u5141\u8bb8\u5b58\u50a8\u6e38\u620f\u5b58\u6863\u6216\u5386\u53f2\u9ad8\u5206\u5217\u8868. \u5373\u4f7f\u5173\u95ed\u6e38\u620f\u673a\u6216\u8005\u4ece\u6e38\u620f\u673a\u4e2d\u79fb\u9664\u4e86\u5361\u5e26, RAM \u4e2d\u4fdd\u5b58\u7684\u6570\u636e\u4f9d\u7136\u4e0d\u4f1a\u4e22\u5931. \u4f46\u5982\u679c\u5361\u5e26\u4e2d\u7684\u7535\u6c60\u7535\u91cf\u8017\u5c3d, \u6216\u8005\u63d2\u62d4\u4e86\u7535\u6c60, \u6240\u6709\u6570\u636e\u5c06\u5316\u4e3a\u4e4c\u6709. \u6ce8\u610f, \u5982\u679c\u6e38\u620f\u5361\u5e26\u4e0d\u652f\u6301\u5916\u90e8 RAM \u7684\u8bdd, \u5bf9\u6b64\u533a\u57df\u7684\u4efb\u4f55\u8bfb\u64cd\u4f5c\u5747\u8fd4\u56de 0x00 \u503c. 4) 0000-1FFF RAM \u542f\u7528/\u7981\u7528\u6807\u5fd7 \u53ea\u5199\u533a\u57df. \u5728\u8bd5\u56fe\u8bfb\u53d6\u6216\u5199\u5165 RAM \u4e4b\u524d, \u5fc5\u987b\u901a\u8fc7\u5728\u8be5\u5730\u5740\u7a7a\u95f4\u5199\u5165\u7279\u5b9a\u503c\u6765\u542f\u7528\u5916\u90e8 RAM. Game Boy \u7684\u6e38\u620f\u5f00\u53d1\u624b\u518c\u4e0a\u5efa\u8bae\u6e38\u620f\u5f00\u53d1\u8005\u5728\u8bbf\u95ee\u5916\u90e8 RAM \u540e\u7acb\u5373\u7981\u7528\u5916\u90e8 RAM, \u4ee5\u4fdd\u62a4\u5176\u5185\u5bb9\u514d\u53d7\u6e38\u620f\u673a\u65ad\u7535\u671f\u95f4\u7684\u635f\u574f. \u901a\u5e38\u4f7f\u7528\u4ee5\u4e0b\u503c: 0x00 : \u7981\u7528 RAM, \u8fd9\u662f\u9ed8\u8ba4\u503c. 0x0a : \u542f\u7528 RAM. \u5b9e\u9645\u4e0a, \u53ea\u8981\u4f4e 4 \u4f4d\u662f 0x0a \u7684\u4efb\u4f55\u503c\u90fd\u4f1a\u542f\u7528 RAM, \u6bd4\u5982 0x1a, 0x2a\u7b49, \u800c\u4efb\u4f55\u5176\u5b83\u503c\u90fd\u4f1a\u7981\u7528 RAM. 5) 2000-3FFF ROM \u5b58\u50a8\u4f53\u7f16\u53f7 \u53ea\u5199\u533a\u57df. \u8be5\u533a\u57df\u88ab\u6620\u5c04\u5230 Bank Number \u5bc4\u5b58\u5668\u7684\u7b2c 0-4 \u4f4d, \u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u7684 ROM Bank Number. \u5982\u679c\u5199\u5165\u7684\u503c\u662f 0x00, \u7531\u4e8e\u7b2c\u4e00\u4e2a\u5206\u7ec4\u5df2\u7ecf\u88ab\u6c38\u4e45\u6620\u5c04\u5230 0x0000-0x3fff \u5730\u5740\u533a\u95f4, \u56e0\u6b64 MBC1 \u5c06\u628a 0x00 \u5f53\u4f5c 0x01 \u5904\u7406. \u540c\u65f6, \u5f53\u8bd5\u56fe\u5199\u5165 Bank 0x20, 0x40 \u548c 0x60 \u65f6\u4e5f\u4f1a\u53d1\u751f\u540c\u6837\u7684\u60c5\u51b5: MBC1 \u5c06\u628a\u8fd9\u4e9b\u503c\u7ffb\u8bd1\u4e3a Bank 0x21, 0x41 \u548c 0x61. \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e0d\u5b58\u5728\u7f16\u53f7\u4e3a 0x20, 0x40 \u4e0e 0x60 \u7684 ROM \u5b58\u50a8\u4f53\u7684\u539f\u56e0. 6) 4000-5FFF RAM \u5b58\u50a8\u4f53\u7f16\u53f7/ROM \u5b58\u50a8\u4f53\u7f16\u53f7\u7684\u9ad8 2 \u4f4d \u53ea\u5199\u533a\u57df. \u8be5\u533a\u57df\u88ab\u6620\u5c04\u5230 Bank Number \u5bc4\u5b58\u5668\u7684\u7b2c 5-6 \u4f4d. \u4efb\u4f55\u5199\u5165\u8be5\u5730\u5740\u533a\u95f4\u7684\u503c\u7684\u4f4e 2 \u4f4d\u5c06\u88ab\u5b58\u50a8\u5230\u5bc4\u5b58\u5668\u7684\u7b2c 5-6 \u4f4d. \u4e0e Bank Number\u5bc4\u5b58\u5668\u7684\u4f4e 5 \u4f4d\u7ec4\u5408, \u53ef\u7528\u4e8e\u8868\u8fbe\u5b8c\u6574\u7684 ROM Bank Number(\u8303\u56f4 0x00 - 0x7f), \u6216\u8005\u5355\u72ec\u4f5c\u4e3a RAM Bank Number(\u8303\u56f4 0x00 - 0x03). \u5177\u4f53\u7528\u4f5c RAM \u8fd8\u662f ROM \u53d6\u51b3\u4e8e\u5f53\u524d MBC \u82af\u7247\u6240\u5904\u7684\u72b6\u6001, \u5177\u4f53\u4ecb\u7ecd\u89c1\u4e0b\u65b9\"ROM/RAM \u6a21\u5f0f\u9009\u62e9\". 7) 6000-7FFF ROM/RAM \u6a21\u5f0f\u9009\u62e9 \u53ea\u5199\u533a\u57df. \u8be5\u533a\u57df\u88ab\u6620\u5c04\u5230 Bank \u5bc4\u5b58\u5668\u7684\u7b2c 7 \u4f4d, \u7528\u4e8e\u8868\u793a\u5f53\u524d\u7684 Bank Number \u5e94\u8be5\u88ab\u8868\u8fbe\u4e3a ROM Bank Number\u8fd8\u662f RAM Bank Number. \u5b83\u53ea\u6709\u4e24\u4e2a\u53ef\u9009\u503c: 0x00 ROM Bank Number \u6a21\u5f0f, \u9ed8\u8ba4 0x01 RAM Bank Number \u6a21\u5f0f \u6e38\u620f\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4e24\u79cd\u6a21\u5f0f\u4e4b\u95f4\u81ea\u7531\u5207\u6362, \u540c\u65f6\u5e76\u4e0d\u610f\u5473\u7740\u4f7f\u7528\u4e86 ROM Bank Number \u6a21\u5f0f\u5c31\u65e0\u6cd5\u518d\u8bbf\u95ee RAM. \u5176\u552f\u4e00\u7684\u9650\u5236\u662f\u5728 ROM \u6a21\u5f0f\u671f\u95f4\u53ea\u80fd\u4f7f\u7528 RAM \u5b58\u50a8\u4f53 0x00, \u5e76\u4e14\u5728 RAM \u6a21\u5f0f\u671f\u95f4\u53ea\u80fd\u4f7f\u7528 ROM \u5b58\u50a8\u4f53 0x00-0x1f. Bank Number \u5bc4\u5b58\u5668\u8be6\u89e3 \u5bc4\u5b58\u5668(Register)\u662f\u6709\u9650\u5b58\u8d2e\u5bb9\u91cf\u7684\u9ad8\u901f\u5b58\u8d2e\u90e8\u4ef6, \u5b83\u4eec\u7528\u6765\u6682\u5b58\u6307\u4ee4, \u6570\u636e\u548c\u5730\u5740. \u5bc4\u5b58\u5668\u901a\u5e38\u90fd\u662f\u4ee5\u4ed6\u4eec\u53ef\u4ee5\u4fdd\u5b58\u7684\u6bd4\u7279\u6570\u91cf\u6765\u4f30\u91cf, \u4e3e\u4f8b\u6765\u8bf4, \u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a u8, \u4e00\u4e2a 32 \u4f4d\u5bc4\u5b58\u5668\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a u32. \u5bc4\u5b58\u5668\u5e38\u5e38\u51fa\u73b0\u5728 CPU \u4e2d, \u4f46\u4e5f\u7ecf\u5e38\u51fa\u73b0\u5728\u5176\u4ed6\u786c\u4ef6\u7cfb\u7edf\u5185. \u4e0b\u56fe\u5c55\u793a\u4e86\u4e16\u754c\u6700\u65e9\u7684\u901a\u7528\u5546\u4e1a CPU: Intel 8080 CPU \u6240\u5305\u542b\u7684\u5bc4\u5b58\u5668. \u8be5 CPU \u4ec5\u5305\u542b A, Flags, B, C, D, E, H, L, PC \u4e0e SP 10 \u4e2a\u5bc4\u5b58\u5668. Game Boy \u7684 CPU \u4e0e 8080 CPU \u5341\u5206\u7c7b\u4f3c. \u56de\u5230 MBC1 \u7684 Bank Number \u5bc4\u5b58\u5668. Bank Number \u5bc4\u5b58\u5668\u5171 8 \u4f4d, \u6309\u7167\u529f\u80fd\u53ef\u4ee5\u5212\u5206\u4e3a 3 \u4e2a\u90e8\u5206: Bank Mode RAM Bank Bits ROM Bank Bits 1 bit 2 bit 5 bit \u5f53 Bank Mode \u7f6e\u4e3a 0 \u65f6, \u5f53\u524d\u5361\u5e26\u4e3a ROM Bank Number \u6a21\u5f0f, \u6b64\u65f6 ROM Bank Number = RAM Bank Bits + ROM Bank Bits RAM Bank Number = 0x00 \u5f53 Bank Mode \u7f6e\u4e3a 1 \u65f6, \u5f53\u524d\u5361\u5e26\u4e3a RAM Banking Mode \u6a21\u5f0f, \u6b64\u65f6 ROM Bank Number = ROM Bank Bits RAM Bank Number = RAM Bank Bits SRAM \u5728\u771f\u5b9e\u7684 Game Boy \u5361\u5e26\u4e2d, \u5916\u90e8 RAM , \u4e5f\u5c31\u662f MBC1 \u4e2d\u7cfb\u7edf\u5730\u5740\u4e3a 0xa000-0xbfff \u7684\u533a\u95f4, \u901a\u5e38\u4f7f\u7528\u4e00\u5757 3V \u7684\u7ebd\u6263\u7535\u6c60\u6765\u4fdd\u8bc1\u6570\u636e\u4e0d\u4e22\u5931. \u5bf9\u4e8e\u8fd9\u79cd\u6784\u9020\u7684\u5361\u5e26, \u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684\u540d\u8bcd\u6765\u6307\u4ee3\u5176\u5916\u90e8 RAM: \u9759\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668(Static Random Access Memory, SRAM). SRAM \u662f\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\u7684\u4e00\u79cd. \u6240\u8c13\u7684\"\u9759\u6001\", \u662f\u6307\u8fd9\u79cd\u5b58\u50a8\u5668\u53ea\u8981\u4fdd\u6301\u901a\u7535, \u91cc\u9762\u50a8\u5b58\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u6052\u5e38\u4fdd\u6301. \u76f8\u5bf9\u4e4b\u4e0b, \u52a8\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668(DRAM)\u91cc\u9762\u6240\u50a8\u5b58\u7684\u6570\u636e\u5c31\u9700\u8981\u5468\u671f\u6027\u5730\u66f4\u65b0. \u7136\u800c, \u5f53\u7535\u529b\u4f9b\u5e94\u505c\u6b62\u65f6, SRAM \u50a8\u5b58\u7684\u6570\u636e\u8fd8\u662f\u4f1a\u6d88\u5931(\u88ab\u79f0\u4e3a Volatile Memory), \u8fd9\u4e0e\u5728\u65ad\u7535\u540e\u8fd8\u80fd\u50a8\u5b58\u8d44\u6599\u7684 ROM \u6216 Flash Memory \u662f\u4e0d\u540c\u7684. Game Boy \u6e38\u620f\u5361\u5e26\u7684\u5916\u90e8 RAM \u7edd\u5927\u90e8\u5206\u90fd\u662f SRAM. \u5728\u4e00\u822c\u73a9\u5bb6\u7684\u6b63\u5e38\u4f7f\u7528\u4e0b, Game Boy \u4e2d\u7684\u7ebd\u6263\u7535\u6c60\u80fd\u4fdd\u8bc1\u6301\u7eed\u653e\u7535 2 \u5230 3 \u5e74, \u56e0\u6b64\u53ef\u4ee5\u4fdd\u8bc1\u5361\u5e26 2 \u5e74\u5185\u4e0d\u4f1a\u6389\u6863. \u4f46\u4e5f\u6709\u4f8b\u5916, \u6bd4\u5982\u5728\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6\u300b\u7cfb\u5217\u4e2d, \u5361\u5e26\u4e2d\u989d\u5916\u5b58\u5728\u4e00\u4e2a\u65f6\u949f\u7535\u8def, \u6b64\u65f6\u7ebd\u6263\u7535\u6c60\u9664\u4e86\u8981\u4f9b\u7535 SRAM \u8fd8\u8981\u4f9b\u7535\u65f6\u949f\u7535\u8def, \u8017\u7535\u91cf\u7684\u589e\u52a0\u5bfc\u81f4\u4e86\u7535\u6c60\u5bff\u547d\u7684\u4e25\u91cd\u4e0b\u964d, \u867d\u7136\u73b0\u5728\u4e0d\u662f\u5f88\u786e\u5b9a, \u4f46\u5728\u7b14\u8005\u5e7c\u65f6\u7684\u5370\u8c61\u4e2d, \u300a\u7cbe\u7075\u5b9d\u53ef\u68a6\u300b\u7cfb\u5217\u7684\u6e38\u620f\u5b58\u6863\u5927\u6982\u53ea\u80fd\u4fdd\u6301 1 \u5e74\u5de6\u53f3. \u4f46\u4ee4\u4eba\u82e6\u607c\u7684\u662f, \u8bb8\u591a\u6e38\u620f\u5361\u5e26\u4e3a\u4e86\u9632\u6b62\u7ebd\u6263\u7535\u6c60\u63a5\u89e6\u4e0d\u826f\u9020\u6210\u610f\u5916\u7684\u6389\u7535, \u4f1a\u9009\u62e9\u5c06\u7535\u6c60\u710a\u5728\u7535\u8def\u4e0a\u7684. \u8fd9\u610f\u5473\u7740, \u4e00\u65e6\u7535\u6c60\u7535\u91cf\u8017\u5c3d, \u73a9\u5bb6\u51e0\u4e4e\u65e0\u6cd5\u81ea\u5df1\u624b\u52a8\u66f4\u6362\u5b83. \u5c0f\u5356\u90e8\u7684\u8001\u677f\u4eec\u53ef\u80fd\u4f1a\u611f\u8c22\u8fd9\u79cd\u8bbe\u8ba1, \u56e0\u4e3a\u5b83\u751a\u81f3\u50ac\u751f\u51fa\u4e86\u4e00\u4e2a\u7ed9 Game Boy \u5361\u5e26\u6362\u7535\u6c60\u7684\u5c0f\u884c\u4e1a. \u5e78\u597d\u8981\u5728\u4eff\u771f\u5668\u4e0a\u5b9e\u73b0 SRAM, \u5e76\u4e0d\u9700\u8981\u771f\u7684\u53bb\u6a21\u62df\u4e00\u5757\u7ebd\u6263\u7535\u6c60. \u6240\u8981\u505a\u7684\u4e8b\u60c5\u975e\u5e38\u7b80\u5355: \u5728\u5408\u9002\u7684\u65f6\u5019, \u5c06 RAM \u4e2d\u7684\u6240\u6709\u5185\u5bb9\u5199\u5165\u5230\u672c\u5730\u6587\u4ef6\u4f5c\u4e3a\u5b58\u6863\u6587\u4ef6 \u5728\u4eff\u771f\u5668\u542f\u52a8\u7684\u65f6\u5019, \u8bfb\u53d6\u8be5\u5b58\u6863\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u5230 RAM \u5408\u9002\u7684\u5199\u5165\u65f6\u673a\u6709\u4e24\u4e2a: \u4e00\u662f\u5728\u5173\u95ed\u4eff\u771f\u5668\u7684\u65f6\u5019 \u4e8c\u662f\u5728 RAM \u542f\u7528/\u7981\u7528\u6807\u5fd7\u4ece True \u8f6c\u53d8\u4e3a False \u7684\u65f6\u5019, \u8fd9\u610f\u5473\u7740 CPU \u5df2\u7ecf\u5b8c\u6210\u4e86\u8bfb\u53d6/\u6539\u5199 RAM \u5185\u5bb9\u7684\u5de5\u4f5c. \u4e24\u79cd\u9009\u62e9\u5404\u6709\u4f18\u7f3a\u70b9. \u7b2c\u4e00\u79cd\u65b9\u5f0f\u4f1a\u5728\u7a81\u7136\u65ad\u7535, \u6216\u8005\u4eff\u771f\u5668\u5d29\u6e83\u7b49\u5f02\u5e38\u60c5\u51b5\u4e0b\u65e0\u6cd5\u6b63\u5e38\u5199\u5165\u6587\u4ef6; \u7b2c\u4e8c\u79cd\u9009\u62e9\u5219\u662f\u5199\u6587\u4ef6\u8fc7\u4e8e\u9891\u7e41, \u6bd4\u5982\u7b14\u8005\u5728\u6d4b\u8bd5\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6-\u6c34\u6676\u300b\u7684\u65f6\u5019\u53d1\u73b0\u6bcf\u79d2\u5199\u6587\u4ef6\u7684\u6b21\u6570\u8fbe\u5230\u4e86\u4e24\u4f4d\u6570(\u5f53\u7136\u8fd9\u548c\u5177\u4f53\u6e38\u620f\u6709\u5173, \u6709\u7684\u6e38\u620f\u5c31\u975e\u5e38\u8282\u7ea6). \u5173\u4e8e\u65f6\u673a\u7684\u9009\u62e9, \u672c\u4e66\u4e2d\u503e\u5411\u7b2c\u4e00\u79cd. \u4ee3\u7801\u5b9e\u73b0 \u4e07\u4e8b\u5177\u5907! MBC1 \u6e38\u620f\u5361\u5e26\u7684\u6240\u6709\u6280\u672f\u7ec6\u8282\u5747\u5df2\u4ecb\u7ecd\u5b8c\u6bd5, \u4e0b\u9762\u5f00\u59cb MBC1 \u7684\u4eff\u771f\u5b9e\u73b0. \u7531\u4e8e\u4e0d\u662f\u5168\u90e8\u7684\u5361\u5e26\u7c7b\u578b\u90fd\u5e26\u6709 SRAM, \u56e0\u6b64\u4f7f\u7528\u4e00\u4e2a\u6cdb\u578b Stable \u8868\u793a\u62e5\u6709 SRAM \u7684\u5361\u5e26, Stable \u6cdb\u578b\u53ef\u4ee5\u5c06\u6e38\u620f\u5361\u5e26\u7684\u5185\u5b58\u6570\u636e\u4ee5\u6587\u4ef6\u5f62\u5f0f\u901a\u8fc7 sav \u51fd\u6570\u4fdd\u5b58\u5230\u672c\u5730\u786c\u76d8\u4e0a. pub trait Stable { fn sav(&self); } MBC1 \u62e5\u6709\u4e24\u79cd Bank Mode \u7c7b\u578b, \u56e0\u6b64\u53ef\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b BankMode \u8fdb\u884c\u8868\u793a. enum BankMode { Rom, Ram, } \u5b9a\u4e49 MBC1 \u7ed3\u6784\u4f53, \u5176\u6210\u5458\u5305\u62ec ROM, RAM, \u5404\u4e2a\u524d\u6587\u4ecb\u7ecd\u7684\u5bc4\u5b58\u5668\u548c sav_path. \u8865\u5145\u8bf4\u660e\u7684\u662f sav_path \u6210\u5458, \u5b83\u8868\u793a\u5f53\u6267\u884c\u4fdd\u5b58\u64cd\u4f5c\u65f6\u6570\u636e\u6587\u4ef6\u5b58\u653e\u5728\u672c\u5730\u786c\u76d8\u4e0a\u7684\u8def\u5f84. pub struct Mbc1 { rom: Vec<u8>, ram: Vec<u8>, bank_mode: BankMode, bank: u8, ram_enable: bool, sav_path: PathBuf, } impl Mbc1 { pub fn power_up(rom: Vec<u8>, ram: Vec<u8>, sav: impl AsRef<Path>) -> Self { Mbc1 { rom, ram, bank_mode: BankMode::Rom, bank: 0x01, ram_enable: false, sav_path: PathBuf::from(sav.as_ref()), } } fn rom_bank(&self) -> usize { let n = match self.bank_mode { BankMode::Rom => self.bank & 0x7f, BankMode::Ram => self.bank & 0x1f, }; n as usize } fn ram_bank(&self) -> usize { let n = match self.bank_mode { BankMode::Rom => 0x00, BankMode::Ram => (self.bank & 0x60) >> 5, }; n as usize } } \u4e3a MBC1 \u5b9e\u73b0 Memory \u6cdb\u578b, \u4f7f\u5f97 CPU \u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61. \u8bfb\u5199\u89c4\u5219\u53ef\u53c2\u7167\"MBC1 \u5730\u5740\u7a7a\u95f4\u5212\u5206\"\u4e00\u8282. impl Memory for Mbc1 { fn get(&self, a: u16) -> u8 { match a { 0x0000...0x3fff => self.rom[a as usize], 0x4000...0x7fff => { let i = self.rom_bank() * 0x4000 + a as usize - 0x4000; self.rom[i] } 0xa000...0xbfff => { if self.ram_enable { let i = self.ram_bank() * 0x2000 + a as usize - 0xa000; self.ram[i] } else { 0x00 } } _ => 0x00, } } fn set(&mut self, a: u16, v: u8) { match a { 0xa000...0xbfff => { if self.ram_enable { let i = self.ram_bank() * 0x2000 + a as usize - 0xa000; self.ram[i] = v; } } 0x0000...0x1fff => { self.ram_enable = v & 0x0f == 0x0a; if !self.ram_enable { self.sav(); } } 0x2000...0x3fff => { let n = v & 0x1f; let n = match n { 0x00 => 0x01, _ => n, }; self.bank = (self.bank & 0x60) | n; } 0x4000...0x5fff => { let n = v & 0x03; self.bank = self.bank & 0x9f | (n << 5) } 0x6000...0x7fff => match v { 0x00 => self.bank_mode = BankMode::Rom, 0x01 => self.bank_mode = BankMode::Ram, n => panic!(\"Invalid cartridge type {}\", n), }, _ => {} } } } \u6700\u540e, \u4e3a MBC1 \u5b9e\u73b0 Stable \u6cdb\u578b. \u5f53\u8c03\u7528 sav \u51fd\u6570\u65f6, \u5982\u679c sav_path \u8def\u5f84\u4e0b\u5df2\u7ecf\u5b58\u5728\u6570\u636e\u6587\u4ef6, \u5219\u8986\u76d6\u65e7\u7684\u6587\u4ef6; \u5426\u5219\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6. \u88ab\u4fdd\u5b58\u7684\u6570\u636e\u5219\u662f\u6574\u4e2a RAM \u4e2d\u5b58\u50a8\u7684\u5185\u5bb9. impl Stable for Mbc1 { fn sav(&self) { if self.sav_path.to_str().unwrap().is_empty() { return; } File::create(self.sav_path.clone()) .and_then(|mut f| f.write_all(&self.ram)) .unwrap() } }","title":"GB-\u6e38\u620f\u5361\u5e26-MBC1"},{"location":"content/gameboy/cartridge/mbc1/#mbc1","text":"MBC1 \u662f Game Boy \u7684\u7b2c\u4e00\u6b3e MBC \u82af\u7247. \u4efb\u4f55\u540e\u7eed\u7684\u5347\u7ea7\u578b MBC \u82af\u7247\u5176\u5de5\u4f5c\u539f\u7406\u90fd\u4e0e MBC1 \u76f8\u4f3c, \u56e0\u6b64\u5c06\u6e38\u620f\u7a0b\u5e8f\u4ece\u4e00\u4e2a MBC1 \u82af\u7247\u5347\u7ea7\u5230\u53e6\u4e00\u4e2a MBC \u82af\u7247\u76f8\u5bf9\u5bb9\u6613, \u751a\u81f3\u53ef\u4ee5\u4f7f\u540c\u4e00\u4e2a\u6e38\u620f\u4e0e\u51e0\u79cd\u4e0d\u540c\u7c7b\u578b\u7684 MBC \u517c\u5bb9.","title":"MBC1"},{"location":"content/gameboy/cartridge/mbc1/#mbc1_1","text":"MBC1 \u82af\u7247\u7406\u8bba\u4e0a\u6700\u5927\u53ef\u62e5\u6709 128 \u4e2a ROM \u5b58\u50a8\u4f53, \u6bcf\u4e2a ROM \u5b58\u50a8\u4f53\u5927\u5c0f\u662f16KB; \u540c\u65f6\u62e5\u67094 \u4e2a RAM \u5b58\u50a8\u4f53, \u6bcf\u4e2a RAM \u5b58\u50a8\u4f53\u5927\u5c0f\u662f 8KB. MBC1 \u82af\u7247\u5c06 Game Boy \u5206\u914d\u7ed9\u6e38\u620f\u5361\u5e26\u7684\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4 0x0000...0x7fff \u548c 0xa000...0xbfff \u5212\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u72ec\u7acb\u533a\u95f4, \u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b. 1) 0000-3FFF ROM \u5b58\u50a8\u4f53 00 \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u603b\u662f\u6620\u5c04\u5230 ROM \u7684\u524d 16KB \u5b57\u8282\u7269\u7406\u5b58\u50a8, \u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a ROM \u5b58\u50a8\u4f53. \u5f53 CPU \u8bd5\u56fe\u8bfb\u53d6\u4e00\u4e2a\u5c5e\u4e8e\u8be5\u8303\u56f4\u5185\u7684\u5730\u5740\u65f6, \u5176\u5b9e\u9645\u8bfb\u53d6\u51fa\u7684\u5c31\u662f\u6e38\u620f\u5361\u5e26\u4fdd\u5b58\u5728\u8be5\u7269\u7406\u5730\u5740\u7684\u503c. 2) 4000-7FFF ROM \u5b58\u50a8\u4f53 01-7F \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u4e3a\u7b2c 0x01 \u5230 0x7f \u7f16\u53f7\u7684 ROM \u5b58\u50a8\u4f53. \u6ce8\u610f\u7684\u662f\u5176\u4e2d\u7f16\u53f7\u4e3a 0x20, 0x40 \u4e0e 0x60 \u7684\u5b58\u50a8\u4f53\u4e0d\u80fd\u88ab\u4f7f\u7528. \u56e0\u6b64 MBC1 \u82af\u7247\u5b9e\u9645\u4e0a\u6700\u5927\u53ef\u652f\u6301 125 \u4e2a ROM \u5b58\u50a8\u4f53, \u6700\u5927\u6570\u636e\u5b58\u50a8\u5bb9\u91cf\u4e3a 125 * 16KB ~= 2M. MBC1 \u82af\u7247\u5185\u90e8\u62e5\u6709\u4e00\u4e2a Bank Number \u5bc4\u5b58\u5668\u6765\u4fdd\u5b58\u5f53\u524d\u7684\u5b58\u50a8\u4f53\u7f16\u53f7. \u5f53 CPU \u8bd5\u56fe\u8bfb\u53d6\u4e00\u4e2a\u5c5e\u4e8e\u8be5\u8303\u56f4\u5185\u7684\u7cfb\u7edf\u5730\u5740\u65f6, \u5c06\u5b9e\u9645\u8bfb\u53d6\u51fa\u7269\u7406\u5730\u5740\u4e3a Bank Number * 0x4000 + Address - 0x4000 \u4fdd\u5b58\u7684\u503c. 3) A000-BFFF RAM \u5b58\u50a8\u4f53 00-03 \u8bfb\u5199\u533a\u57df. \u8be5\u533a\u57df\u7528\u4e8e\u8bfb\u5199\u6e38\u620f\u5361\u5e26\u4e2d\u7684\u5916\u90e8 RAM(\u5982\u679c\u6709\u7684\u8bdd). \u5916\u90e8 RAM \u901a\u5e38\u9700\u8981\u4f7f\u7528\u7535\u6c60\u505a\u6301\u4e45\u5316\u5b58\u50a8, \u5141\u8bb8\u5b58\u50a8\u6e38\u620f\u5b58\u6863\u6216\u5386\u53f2\u9ad8\u5206\u5217\u8868. \u5373\u4f7f\u5173\u95ed\u6e38\u620f\u673a\u6216\u8005\u4ece\u6e38\u620f\u673a\u4e2d\u79fb\u9664\u4e86\u5361\u5e26, RAM \u4e2d\u4fdd\u5b58\u7684\u6570\u636e\u4f9d\u7136\u4e0d\u4f1a\u4e22\u5931. \u4f46\u5982\u679c\u5361\u5e26\u4e2d\u7684\u7535\u6c60\u7535\u91cf\u8017\u5c3d, \u6216\u8005\u63d2\u62d4\u4e86\u7535\u6c60, \u6240\u6709\u6570\u636e\u5c06\u5316\u4e3a\u4e4c\u6709. \u6ce8\u610f, \u5982\u679c\u6e38\u620f\u5361\u5e26\u4e0d\u652f\u6301\u5916\u90e8 RAM \u7684\u8bdd, \u5bf9\u6b64\u533a\u57df\u7684\u4efb\u4f55\u8bfb\u64cd\u4f5c\u5747\u8fd4\u56de 0x00 \u503c. 4) 0000-1FFF RAM \u542f\u7528/\u7981\u7528\u6807\u5fd7 \u53ea\u5199\u533a\u57df. \u5728\u8bd5\u56fe\u8bfb\u53d6\u6216\u5199\u5165 RAM \u4e4b\u524d, \u5fc5\u987b\u901a\u8fc7\u5728\u8be5\u5730\u5740\u7a7a\u95f4\u5199\u5165\u7279\u5b9a\u503c\u6765\u542f\u7528\u5916\u90e8 RAM. Game Boy \u7684\u6e38\u620f\u5f00\u53d1\u624b\u518c\u4e0a\u5efa\u8bae\u6e38\u620f\u5f00\u53d1\u8005\u5728\u8bbf\u95ee\u5916\u90e8 RAM \u540e\u7acb\u5373\u7981\u7528\u5916\u90e8 RAM, \u4ee5\u4fdd\u62a4\u5176\u5185\u5bb9\u514d\u53d7\u6e38\u620f\u673a\u65ad\u7535\u671f\u95f4\u7684\u635f\u574f. \u901a\u5e38\u4f7f\u7528\u4ee5\u4e0b\u503c: 0x00 : \u7981\u7528 RAM, \u8fd9\u662f\u9ed8\u8ba4\u503c. 0x0a : \u542f\u7528 RAM. \u5b9e\u9645\u4e0a, \u53ea\u8981\u4f4e 4 \u4f4d\u662f 0x0a \u7684\u4efb\u4f55\u503c\u90fd\u4f1a\u542f\u7528 RAM, \u6bd4\u5982 0x1a, 0x2a\u7b49, \u800c\u4efb\u4f55\u5176\u5b83\u503c\u90fd\u4f1a\u7981\u7528 RAM. 5) 2000-3FFF ROM \u5b58\u50a8\u4f53\u7f16\u53f7 \u53ea\u5199\u533a\u57df. \u8be5\u533a\u57df\u88ab\u6620\u5c04\u5230 Bank Number \u5bc4\u5b58\u5668\u7684\u7b2c 0-4 \u4f4d, \u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u7684 ROM Bank Number. \u5982\u679c\u5199\u5165\u7684\u503c\u662f 0x00, \u7531\u4e8e\u7b2c\u4e00\u4e2a\u5206\u7ec4\u5df2\u7ecf\u88ab\u6c38\u4e45\u6620\u5c04\u5230 0x0000-0x3fff \u5730\u5740\u533a\u95f4, \u56e0\u6b64 MBC1 \u5c06\u628a 0x00 \u5f53\u4f5c 0x01 \u5904\u7406. \u540c\u65f6, \u5f53\u8bd5\u56fe\u5199\u5165 Bank 0x20, 0x40 \u548c 0x60 \u65f6\u4e5f\u4f1a\u53d1\u751f\u540c\u6837\u7684\u60c5\u51b5: MBC1 \u5c06\u628a\u8fd9\u4e9b\u503c\u7ffb\u8bd1\u4e3a Bank 0x21, 0x41 \u548c 0x61. \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e0d\u5b58\u5728\u7f16\u53f7\u4e3a 0x20, 0x40 \u4e0e 0x60 \u7684 ROM \u5b58\u50a8\u4f53\u7684\u539f\u56e0. 6) 4000-5FFF RAM \u5b58\u50a8\u4f53\u7f16\u53f7/ROM \u5b58\u50a8\u4f53\u7f16\u53f7\u7684\u9ad8 2 \u4f4d \u53ea\u5199\u533a\u57df. \u8be5\u533a\u57df\u88ab\u6620\u5c04\u5230 Bank Number \u5bc4\u5b58\u5668\u7684\u7b2c 5-6 \u4f4d. \u4efb\u4f55\u5199\u5165\u8be5\u5730\u5740\u533a\u95f4\u7684\u503c\u7684\u4f4e 2 \u4f4d\u5c06\u88ab\u5b58\u50a8\u5230\u5bc4\u5b58\u5668\u7684\u7b2c 5-6 \u4f4d. \u4e0e Bank Number\u5bc4\u5b58\u5668\u7684\u4f4e 5 \u4f4d\u7ec4\u5408, \u53ef\u7528\u4e8e\u8868\u8fbe\u5b8c\u6574\u7684 ROM Bank Number(\u8303\u56f4 0x00 - 0x7f), \u6216\u8005\u5355\u72ec\u4f5c\u4e3a RAM Bank Number(\u8303\u56f4 0x00 - 0x03). \u5177\u4f53\u7528\u4f5c RAM \u8fd8\u662f ROM \u53d6\u51b3\u4e8e\u5f53\u524d MBC \u82af\u7247\u6240\u5904\u7684\u72b6\u6001, \u5177\u4f53\u4ecb\u7ecd\u89c1\u4e0b\u65b9\"ROM/RAM \u6a21\u5f0f\u9009\u62e9\". 7) 6000-7FFF ROM/RAM \u6a21\u5f0f\u9009\u62e9 \u53ea\u5199\u533a\u57df. \u8be5\u533a\u57df\u88ab\u6620\u5c04\u5230 Bank \u5bc4\u5b58\u5668\u7684\u7b2c 7 \u4f4d, \u7528\u4e8e\u8868\u793a\u5f53\u524d\u7684 Bank Number \u5e94\u8be5\u88ab\u8868\u8fbe\u4e3a ROM Bank Number\u8fd8\u662f RAM Bank Number. \u5b83\u53ea\u6709\u4e24\u4e2a\u53ef\u9009\u503c: 0x00 ROM Bank Number \u6a21\u5f0f, \u9ed8\u8ba4 0x01 RAM Bank Number \u6a21\u5f0f \u6e38\u620f\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4e24\u79cd\u6a21\u5f0f\u4e4b\u95f4\u81ea\u7531\u5207\u6362, \u540c\u65f6\u5e76\u4e0d\u610f\u5473\u7740\u4f7f\u7528\u4e86 ROM Bank Number \u6a21\u5f0f\u5c31\u65e0\u6cd5\u518d\u8bbf\u95ee RAM. \u5176\u552f\u4e00\u7684\u9650\u5236\u662f\u5728 ROM \u6a21\u5f0f\u671f\u95f4\u53ea\u80fd\u4f7f\u7528 RAM \u5b58\u50a8\u4f53 0x00, \u5e76\u4e14\u5728 RAM \u6a21\u5f0f\u671f\u95f4\u53ea\u80fd\u4f7f\u7528 ROM \u5b58\u50a8\u4f53 0x00-0x1f.","title":"MBC1 \u5730\u5740\u7a7a\u95f4\u5212\u5206"},{"location":"content/gameboy/cartridge/mbc1/#bank-number","text":"\u5bc4\u5b58\u5668(Register)\u662f\u6709\u9650\u5b58\u8d2e\u5bb9\u91cf\u7684\u9ad8\u901f\u5b58\u8d2e\u90e8\u4ef6, \u5b83\u4eec\u7528\u6765\u6682\u5b58\u6307\u4ee4, \u6570\u636e\u548c\u5730\u5740. \u5bc4\u5b58\u5668\u901a\u5e38\u90fd\u662f\u4ee5\u4ed6\u4eec\u53ef\u4ee5\u4fdd\u5b58\u7684\u6bd4\u7279\u6570\u91cf\u6765\u4f30\u91cf, \u4e3e\u4f8b\u6765\u8bf4, \u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a u8, \u4e00\u4e2a 32 \u4f4d\u5bc4\u5b58\u5668\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a u32. \u5bc4\u5b58\u5668\u5e38\u5e38\u51fa\u73b0\u5728 CPU \u4e2d, \u4f46\u4e5f\u7ecf\u5e38\u51fa\u73b0\u5728\u5176\u4ed6\u786c\u4ef6\u7cfb\u7edf\u5185. \u4e0b\u56fe\u5c55\u793a\u4e86\u4e16\u754c\u6700\u65e9\u7684\u901a\u7528\u5546\u4e1a CPU: Intel 8080 CPU \u6240\u5305\u542b\u7684\u5bc4\u5b58\u5668. \u8be5 CPU \u4ec5\u5305\u542b A, Flags, B, C, D, E, H, L, PC \u4e0e SP 10 \u4e2a\u5bc4\u5b58\u5668. Game Boy \u7684 CPU \u4e0e 8080 CPU \u5341\u5206\u7c7b\u4f3c. \u56de\u5230 MBC1 \u7684 Bank Number \u5bc4\u5b58\u5668. Bank Number \u5bc4\u5b58\u5668\u5171 8 \u4f4d, \u6309\u7167\u529f\u80fd\u53ef\u4ee5\u5212\u5206\u4e3a 3 \u4e2a\u90e8\u5206: Bank Mode RAM Bank Bits ROM Bank Bits 1 bit 2 bit 5 bit \u5f53 Bank Mode \u7f6e\u4e3a 0 \u65f6, \u5f53\u524d\u5361\u5e26\u4e3a ROM Bank Number \u6a21\u5f0f, \u6b64\u65f6 ROM Bank Number = RAM Bank Bits + ROM Bank Bits RAM Bank Number = 0x00 \u5f53 Bank Mode \u7f6e\u4e3a 1 \u65f6, \u5f53\u524d\u5361\u5e26\u4e3a RAM Banking Mode \u6a21\u5f0f, \u6b64\u65f6 ROM Bank Number = ROM Bank Bits RAM Bank Number = RAM Bank Bits","title":"Bank Number \u5bc4\u5b58\u5668\u8be6\u89e3"},{"location":"content/gameboy/cartridge/mbc1/#sram","text":"\u5728\u771f\u5b9e\u7684 Game Boy \u5361\u5e26\u4e2d, \u5916\u90e8 RAM , \u4e5f\u5c31\u662f MBC1 \u4e2d\u7cfb\u7edf\u5730\u5740\u4e3a 0xa000-0xbfff \u7684\u533a\u95f4, \u901a\u5e38\u4f7f\u7528\u4e00\u5757 3V \u7684\u7ebd\u6263\u7535\u6c60\u6765\u4fdd\u8bc1\u6570\u636e\u4e0d\u4e22\u5931. \u5bf9\u4e8e\u8fd9\u79cd\u6784\u9020\u7684\u5361\u5e26, \u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684\u540d\u8bcd\u6765\u6307\u4ee3\u5176\u5916\u90e8 RAM: \u9759\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668(Static Random Access Memory, SRAM). SRAM \u662f\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\u7684\u4e00\u79cd. \u6240\u8c13\u7684\"\u9759\u6001\", \u662f\u6307\u8fd9\u79cd\u5b58\u50a8\u5668\u53ea\u8981\u4fdd\u6301\u901a\u7535, \u91cc\u9762\u50a8\u5b58\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u6052\u5e38\u4fdd\u6301. \u76f8\u5bf9\u4e4b\u4e0b, \u52a8\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668(DRAM)\u91cc\u9762\u6240\u50a8\u5b58\u7684\u6570\u636e\u5c31\u9700\u8981\u5468\u671f\u6027\u5730\u66f4\u65b0. \u7136\u800c, \u5f53\u7535\u529b\u4f9b\u5e94\u505c\u6b62\u65f6, SRAM \u50a8\u5b58\u7684\u6570\u636e\u8fd8\u662f\u4f1a\u6d88\u5931(\u88ab\u79f0\u4e3a Volatile Memory), \u8fd9\u4e0e\u5728\u65ad\u7535\u540e\u8fd8\u80fd\u50a8\u5b58\u8d44\u6599\u7684 ROM \u6216 Flash Memory \u662f\u4e0d\u540c\u7684. Game Boy \u6e38\u620f\u5361\u5e26\u7684\u5916\u90e8 RAM \u7edd\u5927\u90e8\u5206\u90fd\u662f SRAM. \u5728\u4e00\u822c\u73a9\u5bb6\u7684\u6b63\u5e38\u4f7f\u7528\u4e0b, Game Boy \u4e2d\u7684\u7ebd\u6263\u7535\u6c60\u80fd\u4fdd\u8bc1\u6301\u7eed\u653e\u7535 2 \u5230 3 \u5e74, \u56e0\u6b64\u53ef\u4ee5\u4fdd\u8bc1\u5361\u5e26 2 \u5e74\u5185\u4e0d\u4f1a\u6389\u6863. \u4f46\u4e5f\u6709\u4f8b\u5916, \u6bd4\u5982\u5728\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6\u300b\u7cfb\u5217\u4e2d, \u5361\u5e26\u4e2d\u989d\u5916\u5b58\u5728\u4e00\u4e2a\u65f6\u949f\u7535\u8def, \u6b64\u65f6\u7ebd\u6263\u7535\u6c60\u9664\u4e86\u8981\u4f9b\u7535 SRAM \u8fd8\u8981\u4f9b\u7535\u65f6\u949f\u7535\u8def, \u8017\u7535\u91cf\u7684\u589e\u52a0\u5bfc\u81f4\u4e86\u7535\u6c60\u5bff\u547d\u7684\u4e25\u91cd\u4e0b\u964d, \u867d\u7136\u73b0\u5728\u4e0d\u662f\u5f88\u786e\u5b9a, \u4f46\u5728\u7b14\u8005\u5e7c\u65f6\u7684\u5370\u8c61\u4e2d, \u300a\u7cbe\u7075\u5b9d\u53ef\u68a6\u300b\u7cfb\u5217\u7684\u6e38\u620f\u5b58\u6863\u5927\u6982\u53ea\u80fd\u4fdd\u6301 1 \u5e74\u5de6\u53f3. \u4f46\u4ee4\u4eba\u82e6\u607c\u7684\u662f, \u8bb8\u591a\u6e38\u620f\u5361\u5e26\u4e3a\u4e86\u9632\u6b62\u7ebd\u6263\u7535\u6c60\u63a5\u89e6\u4e0d\u826f\u9020\u6210\u610f\u5916\u7684\u6389\u7535, \u4f1a\u9009\u62e9\u5c06\u7535\u6c60\u710a\u5728\u7535\u8def\u4e0a\u7684. \u8fd9\u610f\u5473\u7740, \u4e00\u65e6\u7535\u6c60\u7535\u91cf\u8017\u5c3d, \u73a9\u5bb6\u51e0\u4e4e\u65e0\u6cd5\u81ea\u5df1\u624b\u52a8\u66f4\u6362\u5b83. \u5c0f\u5356\u90e8\u7684\u8001\u677f\u4eec\u53ef\u80fd\u4f1a\u611f\u8c22\u8fd9\u79cd\u8bbe\u8ba1, \u56e0\u4e3a\u5b83\u751a\u81f3\u50ac\u751f\u51fa\u4e86\u4e00\u4e2a\u7ed9 Game Boy \u5361\u5e26\u6362\u7535\u6c60\u7684\u5c0f\u884c\u4e1a. \u5e78\u597d\u8981\u5728\u4eff\u771f\u5668\u4e0a\u5b9e\u73b0 SRAM, \u5e76\u4e0d\u9700\u8981\u771f\u7684\u53bb\u6a21\u62df\u4e00\u5757\u7ebd\u6263\u7535\u6c60. \u6240\u8981\u505a\u7684\u4e8b\u60c5\u975e\u5e38\u7b80\u5355: \u5728\u5408\u9002\u7684\u65f6\u5019, \u5c06 RAM \u4e2d\u7684\u6240\u6709\u5185\u5bb9\u5199\u5165\u5230\u672c\u5730\u6587\u4ef6\u4f5c\u4e3a\u5b58\u6863\u6587\u4ef6 \u5728\u4eff\u771f\u5668\u542f\u52a8\u7684\u65f6\u5019, \u8bfb\u53d6\u8be5\u5b58\u6863\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u5230 RAM \u5408\u9002\u7684\u5199\u5165\u65f6\u673a\u6709\u4e24\u4e2a: \u4e00\u662f\u5728\u5173\u95ed\u4eff\u771f\u5668\u7684\u65f6\u5019 \u4e8c\u662f\u5728 RAM \u542f\u7528/\u7981\u7528\u6807\u5fd7\u4ece True \u8f6c\u53d8\u4e3a False \u7684\u65f6\u5019, \u8fd9\u610f\u5473\u7740 CPU \u5df2\u7ecf\u5b8c\u6210\u4e86\u8bfb\u53d6/\u6539\u5199 RAM \u5185\u5bb9\u7684\u5de5\u4f5c. \u4e24\u79cd\u9009\u62e9\u5404\u6709\u4f18\u7f3a\u70b9. \u7b2c\u4e00\u79cd\u65b9\u5f0f\u4f1a\u5728\u7a81\u7136\u65ad\u7535, \u6216\u8005\u4eff\u771f\u5668\u5d29\u6e83\u7b49\u5f02\u5e38\u60c5\u51b5\u4e0b\u65e0\u6cd5\u6b63\u5e38\u5199\u5165\u6587\u4ef6; \u7b2c\u4e8c\u79cd\u9009\u62e9\u5219\u662f\u5199\u6587\u4ef6\u8fc7\u4e8e\u9891\u7e41, \u6bd4\u5982\u7b14\u8005\u5728\u6d4b\u8bd5\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6-\u6c34\u6676\u300b\u7684\u65f6\u5019\u53d1\u73b0\u6bcf\u79d2\u5199\u6587\u4ef6\u7684\u6b21\u6570\u8fbe\u5230\u4e86\u4e24\u4f4d\u6570(\u5f53\u7136\u8fd9\u548c\u5177\u4f53\u6e38\u620f\u6709\u5173, \u6709\u7684\u6e38\u620f\u5c31\u975e\u5e38\u8282\u7ea6). \u5173\u4e8e\u65f6\u673a\u7684\u9009\u62e9, \u672c\u4e66\u4e2d\u503e\u5411\u7b2c\u4e00\u79cd.","title":"SRAM"},{"location":"content/gameboy/cartridge/mbc1/#_1","text":"\u4e07\u4e8b\u5177\u5907! MBC1 \u6e38\u620f\u5361\u5e26\u7684\u6240\u6709\u6280\u672f\u7ec6\u8282\u5747\u5df2\u4ecb\u7ecd\u5b8c\u6bd5, \u4e0b\u9762\u5f00\u59cb MBC1 \u7684\u4eff\u771f\u5b9e\u73b0. \u7531\u4e8e\u4e0d\u662f\u5168\u90e8\u7684\u5361\u5e26\u7c7b\u578b\u90fd\u5e26\u6709 SRAM, \u56e0\u6b64\u4f7f\u7528\u4e00\u4e2a\u6cdb\u578b Stable \u8868\u793a\u62e5\u6709 SRAM \u7684\u5361\u5e26, Stable \u6cdb\u578b\u53ef\u4ee5\u5c06\u6e38\u620f\u5361\u5e26\u7684\u5185\u5b58\u6570\u636e\u4ee5\u6587\u4ef6\u5f62\u5f0f\u901a\u8fc7 sav \u51fd\u6570\u4fdd\u5b58\u5230\u672c\u5730\u786c\u76d8\u4e0a. pub trait Stable { fn sav(&self); } MBC1 \u62e5\u6709\u4e24\u79cd Bank Mode \u7c7b\u578b, \u56e0\u6b64\u53ef\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b BankMode \u8fdb\u884c\u8868\u793a. enum BankMode { Rom, Ram, } \u5b9a\u4e49 MBC1 \u7ed3\u6784\u4f53, \u5176\u6210\u5458\u5305\u62ec ROM, RAM, \u5404\u4e2a\u524d\u6587\u4ecb\u7ecd\u7684\u5bc4\u5b58\u5668\u548c sav_path. \u8865\u5145\u8bf4\u660e\u7684\u662f sav_path \u6210\u5458, \u5b83\u8868\u793a\u5f53\u6267\u884c\u4fdd\u5b58\u64cd\u4f5c\u65f6\u6570\u636e\u6587\u4ef6\u5b58\u653e\u5728\u672c\u5730\u786c\u76d8\u4e0a\u7684\u8def\u5f84. pub struct Mbc1 { rom: Vec<u8>, ram: Vec<u8>, bank_mode: BankMode, bank: u8, ram_enable: bool, sav_path: PathBuf, } impl Mbc1 { pub fn power_up(rom: Vec<u8>, ram: Vec<u8>, sav: impl AsRef<Path>) -> Self { Mbc1 { rom, ram, bank_mode: BankMode::Rom, bank: 0x01, ram_enable: false, sav_path: PathBuf::from(sav.as_ref()), } } fn rom_bank(&self) -> usize { let n = match self.bank_mode { BankMode::Rom => self.bank & 0x7f, BankMode::Ram => self.bank & 0x1f, }; n as usize } fn ram_bank(&self) -> usize { let n = match self.bank_mode { BankMode::Rom => 0x00, BankMode::Ram => (self.bank & 0x60) >> 5, }; n as usize } } \u4e3a MBC1 \u5b9e\u73b0 Memory \u6cdb\u578b, \u4f7f\u5f97 CPU \u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61. \u8bfb\u5199\u89c4\u5219\u53ef\u53c2\u7167\"MBC1 \u5730\u5740\u7a7a\u95f4\u5212\u5206\"\u4e00\u8282. impl Memory for Mbc1 { fn get(&self, a: u16) -> u8 { match a { 0x0000...0x3fff => self.rom[a as usize], 0x4000...0x7fff => { let i = self.rom_bank() * 0x4000 + a as usize - 0x4000; self.rom[i] } 0xa000...0xbfff => { if self.ram_enable { let i = self.ram_bank() * 0x2000 + a as usize - 0xa000; self.ram[i] } else { 0x00 } } _ => 0x00, } } fn set(&mut self, a: u16, v: u8) { match a { 0xa000...0xbfff => { if self.ram_enable { let i = self.ram_bank() * 0x2000 + a as usize - 0xa000; self.ram[i] = v; } } 0x0000...0x1fff => { self.ram_enable = v & 0x0f == 0x0a; if !self.ram_enable { self.sav(); } } 0x2000...0x3fff => { let n = v & 0x1f; let n = match n { 0x00 => 0x01, _ => n, }; self.bank = (self.bank & 0x60) | n; } 0x4000...0x5fff => { let n = v & 0x03; self.bank = self.bank & 0x9f | (n << 5) } 0x6000...0x7fff => match v { 0x00 => self.bank_mode = BankMode::Rom, 0x01 => self.bank_mode = BankMode::Ram, n => panic!(\"Invalid cartridge type {}\", n), }, _ => {} } } } \u6700\u540e, \u4e3a MBC1 \u5b9e\u73b0 Stable \u6cdb\u578b. \u5f53\u8c03\u7528 sav \u51fd\u6570\u65f6, \u5982\u679c sav_path \u8def\u5f84\u4e0b\u5df2\u7ecf\u5b58\u5728\u6570\u636e\u6587\u4ef6, \u5219\u8986\u76d6\u65e7\u7684\u6587\u4ef6; \u5426\u5219\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6. \u88ab\u4fdd\u5b58\u7684\u6570\u636e\u5219\u662f\u6574\u4e2a RAM \u4e2d\u5b58\u50a8\u7684\u5185\u5bb9. impl Stable for Mbc1 { fn sav(&self) { if self.sav_path.to_str().unwrap().is_empty() { return; } File::create(self.sav_path.clone()) .and_then(|mut f| f.write_all(&self.ram)) .unwrap() } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/cartridge/mbc2/","text":"MBC2 MBC2 \u62e5\u6709\u56fa\u5b9a\u4e14\u81ea\u5e26\u7684 512x4bits RAM \u5e76\u540c\u65f6\u652f\u6301\u6700\u5927 256K ROM. MBC2 \u4e0e MBC1 \u975e\u5e38\u76f8\u4f3c\u4f46\u66f4\u52a0\u7684\u7b80\u5355. MBC2 \u5730\u5740\u7a7a\u95f4\u5212\u5206 MBC2 \u82af\u7247\u5c06 Game Boy \u5206\u914d\u7ed9\u6e38\u620f\u5361\u5e26\u7684\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4 0x0000...0x7fff \u548c 0xa000...0xbfff \u5212\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u72ec\u7acb\u533a\u95f4, \u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b. 1) 0000-3FFF ROM \u5b58\u50a8\u4f53 00 \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u603b\u662f\u6620\u5c04\u5230 ROM \u7684\u524d 16KB \u5b57\u8282\u7269\u7406\u5b58\u50a8. 2) 4000-7FFF ROM \u5b58\u50a8\u4f53 01-0F \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u4e3a\u7b2c 0x01 \u5230 0x0f \u7f16\u53f7\u7684 ROM \u5b58\u50a8\u4f53. 3) A000-A1FF 512x4 bits RAM \u8bfb\u5199\u533a\u57df. MBC2 \u82af\u7247\u4e0d\u652f\u6301\u5916\u90e8 RAM, \u4f5c\u4e3a\u66ff\u4ee3\u7684\u662f\u5185\u7f6e\u7684 512x4 bits RAM(\u88ab\u5305\u542b\u5728 MBC2 \u82af\u7247\u672c\u8eab\u4e2d). \u8fd9\u90e8\u5206\u5185\u7f6e\u7684 RAM \u4ecd\u7136\u9700\u8981\u5916\u90e8\u7535\u6c60\u6765\u9759\u6001\u4fdd\u5b58\u6570\u636e. \u7531\u4e8e\u6570\u636e\u7531 4bits \u7ec4\u6210, \u56e0\u6b64\u8be5\u5b58\u50a8\u533a\u4e2d\u53ea\u6709\u6bcf\u4e2a\u5b57\u8282\u7684\u4f4e 4 \u4f4d\u624d\u4f1a\u88ab\u4f7f\u7528. 4) 0000-1FFF RAM \u542f\u7528/\u7981\u7528\u6807\u5fd7 \u53ea\u5199\u533a\u57df. \u7528\u4e8e\u542f\u7528\u6216\u5173\u95ed RAM. \u53ea\u6709\u9ad8\u4f4d\u5730\u5740\u5b57\u8282\u7684\u6700\u4f4e\u6709\u6548\u4f4d\u4e3a\u96f6\u624d\u80fd\u542f\u7528/\u5173\u95ed RAM. \u4f8b\u5982, \u5411\u4ee5\u4e0b\u5730\u5740\u5199\u5165\u6570\u636e\u53ef\u7528\u4e8e\u542f\u7528/\u7981\u7528 RAM\uff1a0x0000-0x00ff, 0x0200-0x02ff, 0x0400-0x04ff, ..., 0x1E00-0x1EFF. \u5f53\u8f93\u5165\u6570\u636e\u7684\u4f4e 4 \u4f4d\u4e3a 0b1010 \u65f6, \u542f\u7528 RAM, \u5176\u4f59\u60c5\u51b5\u7981\u7528 RAM. \u4f8b\u5982\u5411 0x0000 \u5199\u5165 0x0a \u53ef\u7528\u4e8e\u542f\u7528 RAM. 5) 2000-3FFF ROM \u5b58\u50a8\u4f53\u7f16\u53f7 \u53ea\u5199\u533a\u57df. \u5411 0x2000-0x3fff \u5199\u5165\u7684\u6570\u503c\u7684\u4f4e 4 \u4f4d\u5c06\u4f5c\u4e3a\u5f53\u524d\u7684 ROM Bank Number. \u53ea\u6709\u9ad8\u4f4d\u5730\u5740\u5b57\u8282\u7684\u6700\u4f4e\u6709\u6548\u4f4d\u4e3a 1 \u624d\u80fd\u9009\u62e9 ROM \u5206\u7ec4. \u4f8b\u5982, \u5411\u4ee5\u4e0b\u5730\u5740\u5199\u5165\u6570\u636e\u53ef\u7528\u4e8e\u9009\u62e9 ROM Bank Number\uff1a0x2100-0x21ff, 0x2300-0x23ff, 0x2500-0x25ff, ..., 0x3f00-0x3fff. \u4ee3\u7801\u5b9e\u73b0 MBC2 \u7684\u4ee3\u7801\u4eff\u771f\u8fc7\u7a0b\u4e0e MBC1 \u5341\u5206\u76f8\u4f3c, \u751a\u81f3\u53ea\u662f\u9700\u8981\u7565\u5fae\u4fee\u6539 MBC1 \u7684\u4ee3\u7801\u5373\u53ef. \u5b9a\u4e49 MBC2 \u7ed3\u6784\u4f53, \u5176\u6210\u5458\u5305\u62ec ROM, RAM, \u5404\u4e2a\u524d\u6587\u4ecb\u7ecd\u7684\u5bc4\u5b58\u5668\u548c sav_path. pub struct Mbc2 { rom: Vec<u8>, ram: Vec<u8>, rom_bank: usize, ram_enable: bool, sav_path: PathBuf, } impl Mbc2 { pub fn power_up(rom: Vec<u8>, ram: Vec<u8>, sav: impl AsRef<Path>) -> Self { Self { rom, ram, rom_bank: 1, ram_enable: false, sav_path: PathBuf::from(sav.as_ref()), } } } \u4e3a MBC2 \u5b9e\u73b0 Memory \u6cdb\u578b, \u4f7f\u5f97 CPU \u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61. \u8bfb\u5199\u89c4\u5219\u53ef\u53c2\u7167\u524d\u6587\"MBC2 \u5730\u5740\u7a7a\u95f4\u5212\u5206\"\u4e00\u8282. impl Memory for Mbc2 { fn get(&self, a: u16) -> u8 { match a { 0x0000..=0x3fff => self.rom[a as usize], 0x4000..=0x7fff => { let i = self.rom_bank * 0x4000 + a as usize - 0x4000; self.rom[i] } 0xa000..=0xa1ff => { if self.ram_enable { self.ram[(a - 0xa000) as usize] } else { 0x00 } } _ => 0x00, } } fn set(&mut self, a: u16, v: u8) { // Only the lower 4 bits of the \"bytes\" in this memory area are used. let v = v & 0x0f; match a { 0xa000..=0xa1ff => { if self.ram_enable { self.ram[(a - 0xa000) as usize] = v } } 0x0000..=0x1fff => { if a & 0x0100 == 0 { self.ram_enable = v == 0x0a; } } 0x2000..=0x3fff => { if a & 0x0100 != 0 { self.rom_bank = v as usize; } } _ => {} } } } \u6700\u540e, \u4e3a MBC1 \u5b9e\u73b0 Stable \u6cdb\u578b. \u5f53\u8c03\u7528 sav \u51fd\u6570\u65f6, \u5982\u679c sav_path \u8def\u5f84\u4e0b\u5df2\u7ecf\u5b58\u5728\u6570\u636e\u6587\u4ef6, \u5219\u8986\u76d6\u65e7\u7684\u6587\u4ef6; \u5426\u5219\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6. \u88ab\u4fdd\u5b58\u7684\u6570\u636e\u5219\u662f\u6574\u4e2a RAM \u4e2d\u5b58\u50a8\u7684\u5185\u5bb9. impl Stable for Mbc2 { fn sav(&self) { rog::debugln!(\"Ram is being persisted\"); if self.sav_path.to_str().unwrap().is_empty() { return; } File::create(self.sav_path.clone()) .and_then(|mut f| f.write_all(&self.ram)) .unwrap() } }","title":"GB-\u6e38\u620f\u5361\u5e26-MBC2"},{"location":"content/gameboy/cartridge/mbc2/#mbc2","text":"MBC2 \u62e5\u6709\u56fa\u5b9a\u4e14\u81ea\u5e26\u7684 512x4bits RAM \u5e76\u540c\u65f6\u652f\u6301\u6700\u5927 256K ROM. MBC2 \u4e0e MBC1 \u975e\u5e38\u76f8\u4f3c\u4f46\u66f4\u52a0\u7684\u7b80\u5355.","title":"MBC2"},{"location":"content/gameboy/cartridge/mbc2/#mbc2_1","text":"MBC2 \u82af\u7247\u5c06 Game Boy \u5206\u914d\u7ed9\u6e38\u620f\u5361\u5e26\u7684\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4 0x0000...0x7fff \u548c 0xa000...0xbfff \u5212\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u72ec\u7acb\u533a\u95f4, \u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b. 1) 0000-3FFF ROM \u5b58\u50a8\u4f53 00 \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u603b\u662f\u6620\u5c04\u5230 ROM \u7684\u524d 16KB \u5b57\u8282\u7269\u7406\u5b58\u50a8. 2) 4000-7FFF ROM \u5b58\u50a8\u4f53 01-0F \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u4e3a\u7b2c 0x01 \u5230 0x0f \u7f16\u53f7\u7684 ROM \u5b58\u50a8\u4f53. 3) A000-A1FF 512x4 bits RAM \u8bfb\u5199\u533a\u57df. MBC2 \u82af\u7247\u4e0d\u652f\u6301\u5916\u90e8 RAM, \u4f5c\u4e3a\u66ff\u4ee3\u7684\u662f\u5185\u7f6e\u7684 512x4 bits RAM(\u88ab\u5305\u542b\u5728 MBC2 \u82af\u7247\u672c\u8eab\u4e2d). \u8fd9\u90e8\u5206\u5185\u7f6e\u7684 RAM \u4ecd\u7136\u9700\u8981\u5916\u90e8\u7535\u6c60\u6765\u9759\u6001\u4fdd\u5b58\u6570\u636e. \u7531\u4e8e\u6570\u636e\u7531 4bits \u7ec4\u6210, \u56e0\u6b64\u8be5\u5b58\u50a8\u533a\u4e2d\u53ea\u6709\u6bcf\u4e2a\u5b57\u8282\u7684\u4f4e 4 \u4f4d\u624d\u4f1a\u88ab\u4f7f\u7528. 4) 0000-1FFF RAM \u542f\u7528/\u7981\u7528\u6807\u5fd7 \u53ea\u5199\u533a\u57df. \u7528\u4e8e\u542f\u7528\u6216\u5173\u95ed RAM. \u53ea\u6709\u9ad8\u4f4d\u5730\u5740\u5b57\u8282\u7684\u6700\u4f4e\u6709\u6548\u4f4d\u4e3a\u96f6\u624d\u80fd\u542f\u7528/\u5173\u95ed RAM. \u4f8b\u5982, \u5411\u4ee5\u4e0b\u5730\u5740\u5199\u5165\u6570\u636e\u53ef\u7528\u4e8e\u542f\u7528/\u7981\u7528 RAM\uff1a0x0000-0x00ff, 0x0200-0x02ff, 0x0400-0x04ff, ..., 0x1E00-0x1EFF. \u5f53\u8f93\u5165\u6570\u636e\u7684\u4f4e 4 \u4f4d\u4e3a 0b1010 \u65f6, \u542f\u7528 RAM, \u5176\u4f59\u60c5\u51b5\u7981\u7528 RAM. \u4f8b\u5982\u5411 0x0000 \u5199\u5165 0x0a \u53ef\u7528\u4e8e\u542f\u7528 RAM. 5) 2000-3FFF ROM \u5b58\u50a8\u4f53\u7f16\u53f7 \u53ea\u5199\u533a\u57df. \u5411 0x2000-0x3fff \u5199\u5165\u7684\u6570\u503c\u7684\u4f4e 4 \u4f4d\u5c06\u4f5c\u4e3a\u5f53\u524d\u7684 ROM Bank Number. \u53ea\u6709\u9ad8\u4f4d\u5730\u5740\u5b57\u8282\u7684\u6700\u4f4e\u6709\u6548\u4f4d\u4e3a 1 \u624d\u80fd\u9009\u62e9 ROM \u5206\u7ec4. \u4f8b\u5982, \u5411\u4ee5\u4e0b\u5730\u5740\u5199\u5165\u6570\u636e\u53ef\u7528\u4e8e\u9009\u62e9 ROM Bank Number\uff1a0x2100-0x21ff, 0x2300-0x23ff, 0x2500-0x25ff, ..., 0x3f00-0x3fff.","title":"MBC2 \u5730\u5740\u7a7a\u95f4\u5212\u5206"},{"location":"content/gameboy/cartridge/mbc2/#_1","text":"MBC2 \u7684\u4ee3\u7801\u4eff\u771f\u8fc7\u7a0b\u4e0e MBC1 \u5341\u5206\u76f8\u4f3c, \u751a\u81f3\u53ea\u662f\u9700\u8981\u7565\u5fae\u4fee\u6539 MBC1 \u7684\u4ee3\u7801\u5373\u53ef. \u5b9a\u4e49 MBC2 \u7ed3\u6784\u4f53, \u5176\u6210\u5458\u5305\u62ec ROM, RAM, \u5404\u4e2a\u524d\u6587\u4ecb\u7ecd\u7684\u5bc4\u5b58\u5668\u548c sav_path. pub struct Mbc2 { rom: Vec<u8>, ram: Vec<u8>, rom_bank: usize, ram_enable: bool, sav_path: PathBuf, } impl Mbc2 { pub fn power_up(rom: Vec<u8>, ram: Vec<u8>, sav: impl AsRef<Path>) -> Self { Self { rom, ram, rom_bank: 1, ram_enable: false, sav_path: PathBuf::from(sav.as_ref()), } } } \u4e3a MBC2 \u5b9e\u73b0 Memory \u6cdb\u578b, \u4f7f\u5f97 CPU \u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61. \u8bfb\u5199\u89c4\u5219\u53ef\u53c2\u7167\u524d\u6587\"MBC2 \u5730\u5740\u7a7a\u95f4\u5212\u5206\"\u4e00\u8282. impl Memory for Mbc2 { fn get(&self, a: u16) -> u8 { match a { 0x0000..=0x3fff => self.rom[a as usize], 0x4000..=0x7fff => { let i = self.rom_bank * 0x4000 + a as usize - 0x4000; self.rom[i] } 0xa000..=0xa1ff => { if self.ram_enable { self.ram[(a - 0xa000) as usize] } else { 0x00 } } _ => 0x00, } } fn set(&mut self, a: u16, v: u8) { // Only the lower 4 bits of the \"bytes\" in this memory area are used. let v = v & 0x0f; match a { 0xa000..=0xa1ff => { if self.ram_enable { self.ram[(a - 0xa000) as usize] = v } } 0x0000..=0x1fff => { if a & 0x0100 == 0 { self.ram_enable = v == 0x0a; } } 0x2000..=0x3fff => { if a & 0x0100 != 0 { self.rom_bank = v as usize; } } _ => {} } } } \u6700\u540e, \u4e3a MBC1 \u5b9e\u73b0 Stable \u6cdb\u578b. \u5f53\u8c03\u7528 sav \u51fd\u6570\u65f6, \u5982\u679c sav_path \u8def\u5f84\u4e0b\u5df2\u7ecf\u5b58\u5728\u6570\u636e\u6587\u4ef6, \u5219\u8986\u76d6\u65e7\u7684\u6587\u4ef6; \u5426\u5219\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6. \u88ab\u4fdd\u5b58\u7684\u6570\u636e\u5219\u662f\u6574\u4e2a RAM \u4e2d\u5b58\u50a8\u7684\u5185\u5bb9. impl Stable for Mbc2 { fn sav(&self) { rog::debugln!(\"Ram is being persisted\"); if self.sav_path.to_str().unwrap().is_empty() { return; } File::create(self.sav_path.clone()) .and_then(|mut f| f.write_all(&self.ram)) .unwrap() } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/cartridge/mbc3/","text":"MBC3 \u4e0e MBC2 \u4e00\u6837, MBC3 \u4e5f\u4e0e MBC1 \u975e\u5e38\u7c7b\u4f3c, \u533a\u522b\u5728\u4e8e MBC3 \u5305\u542b\u4e00\u4e2a\u65b0\u7684\u786c\u4ef6\u8bbe\u5907: \u5b9e\u65f6\u65f6\u949f(RealTimeClock, RTC). \u5b9e\u65f6\u65f6\u949f\u7c7b\u4f3c\u4e00\u4e2a\u5185\u7f6e\u5728\u5361\u5e26\u4e2d\u7684\u65f6\u949f, \u901a\u8fc7\u5b83, \u6e38\u620f\u7a0b\u5f0f\u53ef\u4ee5\u83b7\u53d6\u5230\"\u6d41\u901d\u7684\u65f6\u95f4\", \u7528\u4ee5\u53cd\u5411\u63a8\u7b97\u5f53\u524d\u7684\u65e5\u671f, \u65f6\u523b, \u6e38\u620f\u65f6\u957f\u7b49\u4fe1\u606f. \u4e00\u4e2a\u5e7f\u4e3a\u4eba\u77e5\u7684\u6848\u4f8b\u662f MBC3 \u82af\u7247\u5728\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6\u300b\u6e38\u620f\u7cfb\u5217\u4e2d\u7684\u5e7f\u6cdb\u4f7f\u7528, \u5728\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6-\u6c34\u6676\u300b\u4e2d\u62e5\u6709\u4e0e\u73b0\u5b9e\u4e16\u754c\u4e00\u81f4\u7684\u663c\u591c\u7cfb\u7edf\u548c\u661f\u671f\u7cfb\u7edf: \u2014\u2014\u6709\u4e9b\u7cbe\u7075\u53ea\u51fa\u73b0\u5728\u767d\u5929\u6216\u591c\u665a, \u751a\u81f3\u662f\u7279\u6b8a\u7684\u9650\u5b9a\u7a00\u6709\u7cbe\u7075\u4e58\u9f99, \u53ea\u6709\u5728\u5468\u4e94\u9ec4\u660f\u624d\u4f1a\u51fa\u73b0\u5728 32 \u53f7\u9053\u8def\u6d1e\u7a74\u6df1\u5904\u6c34\u9762. RTC \u9700\u8981\u4e00\u4e2a\u5916\u90e8\u7684 32.768kHz Quartz \u632f\u8361\u5668\u548c\u4e00\u679a\u5916\u90e8\u7ebd\u6263\u7535\u6c60\u624d\u80fd\u5de5\u4f5c, \u56e0\u6b64\u5373\u4f7f Game Boy \u5173\u95ed\u540e, RTC \u4ecd\u7136\u4f1a\u4f9d\u9760\u7535\u6c60\u800c\u7ee7\u7eed\u5de5\u4f5c. \u4e0d\u8fc7\u4e5f\u6b63\u56e0\u4e3a\u5982\u6b64, MBC3 \u82af\u7247\u7535\u6c60\u7684\u8017\u7535\u901f\u5ea6\u660e\u663e\u52a0\u5feb. \u7cbe\u7075\u5b9d\u53ef\u68a6-\u6c34\u6676\u4e2d\u7684\u663c/\u591c\u7cfb\u7edf: MBC3 \u5730\u5740\u7a7a\u95f4\u5212\u5206 MBC3 \u82af\u7247\u5c06 Game Boy \u5206\u914d\u7ed9\u6e38\u620f\u5361\u5e26\u7684\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4 0x0000...0x7fff \u548c 0xa000...0xbfff \u5212\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u72ec\u7acb\u533a\u95f4, \u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b. 1) 0000-3FFF ROM \u5b58\u50a8\u4f53 00 \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u603b\u662f\u6620\u5c04\u5230 ROM \u7684\u524d 16KB \u5b57\u8282\u7269\u7406\u5b58\u50a8. 2) 4000-7FFF ROM \u5b58\u50a8\u4f53 01-7F \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u4e3a\u7b2c 0x01 \u5230 0x7f \u7f16\u53f7\u7684 ROM \u5b58\u50a8\u4f53. \u4e0e MBC1 \u903b\u8f91\u5927\u4f53\u76f8\u540c, \u4f46\u5b58\u50a8\u4f53 0x20h, 0x40h \u548c 0x60 \u53ef\u4ee5\u88ab\u6b63\u5e38\u4f7f\u7528\u4e86. 3) A000-BFFF RAM \u5b58\u50a8\u4f53 00-03 \u6216 RTC \u5bc4\u5b58\u5668 08-0C \u8bfb\u5199\u533a\u57df. \u5177\u4f53\u662f\u8bfb\u5199 RAM \u8fd8\u662f RTC \u5bc4\u5b58\u5668, \u53d6\u51b3\u4e8e\u5f53\u524d\u5361\u5e26\u7684 RAM Bank Number. \u5982\u679c\u5f53\u524d\u7684 RAM Bank Number \u5c0f\u4e8e\u7b49\u4e8e 3, \u5219\u8bfb\u5199\u6307\u5b9a RAM Bank Number \u5bf9\u5e94\u7684 RAM \u5206\u7ec4. \u5982\u679c\u5f53\u524d\u7684 RAM Bank Number \u5c5e\u4e8e 0x08-0x0c \u8303\u56f4, \u5219\u8bfb\u5199\u6307\u5b9a\u7684 RTC \u5bc4\u5b58\u5668. RTC \u5bc4\u5b58\u5668\u8be6\u7ec6\u89c4\u8303\u5c06\u5728\u540e\u6587\u8fdb\u884c\u4ecb\u7ecd. 4) 0000-1FFF RAM/RTC \u542f\u7528/\u7981\u7528\u6807\u5fd7 \u53ea\u5199\u533a\u57df. \u542f\u7528\u6216\u7981\u7528\u5916\u90e8 RAM \u4e0e RTC. \u5199\u5165 0x0a \u542f\u7528\u5916\u90e8 RAM \u4e0e RTC, \u5176\u4f59\u60c5\u51b5\u5219\u7981\u7528\u5b83\u4eec. 5) 2000-3FFF ROM Bank Number \u53ea\u5199\u533a\u57df. \u4e0e MBC1 \u7c7b\u4f3c, \u53ea\u662f ROM Bank Number \u5c06\u53d6\u5199\u5165\u503c\u7684\u540e 7 \u4f4d\u800c\u4e0d\u662f\u540e 5 \u4f4d, \u56e0\u6b64\u5b58\u50a8\u4f53\u7684\u6570\u91cf\u8303\u56f4\u6269\u5927\u5230 0x00 \u5230 0x7f. \u6ce8\u610f\u5f53\u5199\u5165\u503c\u662f 0x00 \u65f6, \u5219\u66ff\u6362\u4e3a 0x01. 6) 4000-5FFF RAM Bank Number \u53ea\u5199\u533a\u57df. \u5199\u5165\u503c\u7684\u540e 2 \u4f4d(\u8303\u56f4 0x00-0x03)\u5c06\u4f5c\u4e3a\u5361\u5e26\u5f53\u524d\u7684 RAM Bank Number. 7) 6000-7FFF \u9501\u5b58\u65f6\u949f\u6570\u636e \u53ea\u5199\u533a\u57df. \u9996\u5148\u5411\u8be5\u5730\u5740\u533a\u57df\u5199\u5165 0x00, \u7136\u540e\u5199\u5165 0x01, \u5f53\u524d\u7684\u65f6\u95f4\u6d41\u901d\u91cf\u5c06\u88ab\u9501\u5b58\u5230 RTC \u5bc4\u5b58\u5668\u4e2d. \u901a\u8fc7\u91cd\u590d\u5199\u5165 0x00 -> 0x01 \u8fd9\u4e2a\u8fc7\u7a0b, \u53ef\u4ee5\u4fee\u6539 RTC \u5bc4\u5b58\u5668\u4e2d\u9501\u5b58\u7684\u65f6\u95f4. \u6ce8\u610f, \u5982\u679c\u91cd\u590d\u5199\u5165 0x01 \u5e76\u4e0d\u4f1a\u6539\u53d8\u9501\u5b58\u7684\u65f6\u95f4\u503c. RTC \u5bc4\u5b58\u5668 RTC \u6a21\u5757\u5305\u542b 5 \u4e2a\u5bc4\u5b58\u5668: \u79d2\u5bc4\u5b58\u5668, \u5206\u5bc4\u5b58\u5668, \u5c0f\u65f6\u5bc4\u5b58\u5668, \u65e5\u5bc4\u5b58\u5668\u548c\u6807\u5fd7\u5bc4\u5b58\u5668. \u5b83\u8bb0\u5f55\u4e86\u81ea\u4e0a\u4e00\u6b21\u590d\u4f4d\u4ee5\u6765, \u603b\u5171\u6d41\u901d\u4e86\u591a\u5c11\u65f6\u95f4. \u5404\u4e2a\u5bc4\u5b58\u5668\u6240\u5904\u5730\u5740\u4e0e\u5176\u8bf4\u660e\u5982\u4e0b\u6240\u793a. 0x08 RTC S Seconds 0-59 (0-3Bh) 0x09 RTC M Minutes 0-59 (0-3Bh) 0x0A RTC H Hours 0-23 (0-17h) 0x0B RTC DL Lower 8 bits of Day Counter (0-FFh) 0x0C RTC DH Upper 1 bit of Day Counter, Carry Bit, Halt Flag Bit 0 Most significant bit of Day Counter (Bit 8) Bit 6 Halt (0=Active, 1=Stop Timer) Bit 7 Day Counter Carry Bit (1=Counter Overflow) \u6b63\u5e38\u60c5\u51b5\u4e0b, \u5728\u5199\u5165 RTC \u5bc4\u5b58\u5668\u4e4b\u524d\u5e94\u8be5\u5148\u7f6e\u4f4d Halt(0x0c \u5bc4\u5b58\u5668\u7684\u7b2c 6 \u4f4d)\u4e2d\u65ad RTC \u7684\u6267\u884c, \u5199\u5165\u5b8c\u6210\u540e\u518d\u91cd\u7f6e Halt. Day Counter(\u65e5\u8ba1\u6570\u5668)\u603b\u5171\u6709 9 \u4f4d, \u5305\u62ec 0x0b \u5bc4\u5b58\u5668\u672c\u8eab 8 \u4f4d\u4e0e 0x0c \u5bc4\u5b58\u5668\u7b2c 0 \u4f4d. \u5b83\u5141\u8bb8\u8ba1\u7b97 0-511(0x0000-0x01ff)\u8303\u56f4\u5185\u7684\u5929\u6570. \u5f53\u6b64\u503c\u6ea2\u51fa\u65f6, \u65e5\u8ba1\u6570\u5668\u8fdb\u4f4d\u4f4d(0x0c \u5bc4\u5b58\u5668\u7b2c 7 \u4f4d)\u7f6e 1. \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u8fdb\u4f4d\u4f4d\u4fdd\u6301\u7f6e\u4f4d\u72b6\u6001, \u76f4\u5230\u7a0b\u5e8f\u91cd\u7f6e\u5b83\u4e3a\u6b62. \u4ee3\u7801\u5b9e\u73b0 \u9996\u5148\u9700\u8981\u5b9e\u73b0 RTC \u7684\u4eff\u771f. \u8981\u6ce8\u610f, RTC \u540c RAM \u4e00\u6837, \u9700\u8981\u5728\u4eff\u771f\u5668\u5173\u95ed\u7684\u65f6\u5019\u5199\u6570\u636e\u5230\u672c\u5730\u6587\u4ef6, \u7136\u540e\u518d\u5728\u4eff\u771f\u5668\u542f\u52a8\u7684\u65f6\u5019\u8fdb\u884c\u52a0\u8f7d\u4ee5\u4fdd\u6301\u65f6\u95f4\u7684\u8fde\u8d2f\u6027. \u4e3a\u4e86\u83b7\u53d6\"\u6d41\u901d\u7684\u65f6\u95f4\", \u5728\u4eff\u771f\u5b9e\u73b0\u4e0a\u4f1a\u7a0d\u5fae\u505a\u4e00\u4e9b\u5c0f trick, zero \u5b57\u6bb5\u4fdd\u5b58\u7cfb\u7edf\u7684 timestamp, \u8fd9\u6837\u5f53\u9700\u8981\u53d6\u5f97\"\u6d41\u901d\u7684\u65f6\u95f4\"\u65f6, \u53ea\u9700\u8981\u5c06\u5f53\u524d\u7684 timestamp \u51cf\u53bb\u4e4b\u524d\u5b58\u50a8\u5728 zero \u5b57\u6bb5\u7684\u503c\u5373\u53ef. struct RealTimeClock { s: u8, m: u8, h: u8, dl: u8, dh: u8, zero: u64, sav_path: PathBuf, } impl RealTimeClock { fn power_up(sav_path: impl AsRef<Path>) -> Self { let zero = match std::fs::read(sav_path.as_ref()) { Ok(ok) => { let mut b: [u8; 8] = Default::default(); b.copy_from_slice(&ok); u64::from_be_bytes(b) } Err(_) => SystemTime::now() .duration_since(SystemTime::UNIX_EPOCH) .unwrap() .as_secs(), }; Self { zero, s: 0, m: 0, h: 0, dl: 0, dh: 0, sav_path: sav_path.as_ref().to_path_buf(), } } fn tic(&mut self) { let d = SystemTime::now() .duration_since(SystemTime::UNIX_EPOCH) .unwrap() .as_secs() - self.zero; self.s = (d % 60) as u8; self.m = (d / 60 % 60) as u8; self.h = (d / 3600 % 24) as u8; let days = (d / 3600 / 24) as u16; self.dl = (days % 256) as u8; match days { 0x0000..=0x00ff => {} 0x0100..=0x01ff => { self.dh |= 0x01; } _ => { self.dh |= 0x01; self.dh |= 0x80; } } } } \u4e3a RTC \u5b9e\u73b0 Memory \u6cdb\u578b, \u4f7f\u5f97 CPU \u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61. \u8bfb\u5199\u89c4\u5219\u53ef\u53c2\u7167\u524d\u6587\"RTC \u5bc4\u5b58\u5668\"\u4e00\u8282. impl Memory for RealTimeClock { fn get(&self, a: u16) -> u8 { match a { 0x08 => self.s, 0x09 => self.m, 0x0a => self.h, 0x0b => self.dl, 0x0c => self.dh, _ => panic!(\"No entry\"), } } fn set(&mut self, a: u16, v: u8) { match a { 0x08 => self.s = v, 0x09 => self.m = v, 0x0a => self.h = v, 0x0b => self.dl = v, 0x0c => self.dh = v, _ => panic!(\"No entry\"), } } } \u4e3a RTC \u5b9e\u73b0 Stable \u6cdb\u578b, \u4f7f\u5f97\u5176\u5728\u4eff\u771f\u5668\u5173\u95ed\u65f6\u53ef\u5199\u5165\u6570\u636e\u5230\u6587\u4ef6. impl Stable for RealTimeClock { fn sav(&self) { if self.sav_path.to_str().unwrap().is_empty() { return; } File::create(self.sav_path.clone()) .and_then(|mut f| f.write_all(&self.zero.to_be_bytes())) .unwrap() } } \u63a5\u7740\u518d\u5b9e\u73b0 MBC3 \u7684\u5b8c\u6574\u4eff\u771f, \u5b83\u540c\u6837\u4e0e\u4e4b\u524d\u7684 MBC1 \u6216 MBC2 \u975e\u5e38\u7c7b\u4f3c. \u5b9a\u4e49 MBC1 \u7ed3\u6784\u4f53, \u5176\u6210\u5458\u5305\u62ec ROM, RAM, RTC, \u5404\u4e2a\u524d\u6587\u4ecb\u7ecd\u7684\u5bc4\u5b58\u5668\u548c sav_path. pub struct Mbc3 { rom: Vec<u8>, ram: Vec<u8>, rtc: RealTimeClock, rom_bank: usize, ram_bank: usize, ram_enable: bool, sav_path: PathBuf, } impl Mbc3 { pub fn power_up(rom: Vec<u8>, ram: Vec<u8>, sav: impl AsRef<Path>, rtc: impl AsRef<Path>) -> Self { Self { rom, ram, rtc: RealTimeClock::power_up(rtc), rom_bank: 1, ram_bank: 0, ram_enable: false, sav_path: PathBuf::from(sav.as_ref()), } } } \u4e3a MBC3 \u5b9e\u73b0 Memory \u6cdb\u578b, \u4f7f\u5f97 CPU \u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61. \u8bfb\u5199\u89c4\u5219\u53ef\u53c2\u7167\u524d\u6587\"MBC3 \u5730\u5740\u7a7a\u95f4\u5212\u5206\"\u4e00\u8282. impl Memory for Mbc3 { fn get(&self, a: u16) -> u8 { match a { 0x0000..=0x3fff => self.rom[a as usize], 0x4000..=0x7fff => { let i = self.rom_bank * 0x4000 + a as usize - 0x4000; self.rom[i] } 0xa000..=0xbfff => { if self.ram_enable { if self.ram_bank <= 0x03 { let i = self.ram_bank * 0x2000 + a as usize - 0xa000; self.ram[i] } else { self.rtc.get(self.ram_bank as u16) } } else { 0x00 } } _ => 0x00, } } fn set(&mut self, a: u16, v: u8) { match a { 0xa000..=0xbfff => { if self.ram_enable { if self.ram_bank <= 0x03 { let i = self.ram_bank * 0x2000 + a as usize - 0xa000; self.ram[i] = v; } else { self.rtc.set(self.ram_bank as u16, v) } } } 0x0000..=0x1fff => { self.ram_enable = v & 0x0f == 0x0a; } 0x2000..=0x3fff => { let n = (v & 0x7f) as usize; let n = match n { 0x00 => 0x01, _ => n, }; self.rom_bank = n; } 0x4000..=0x5fff => { let n = (v & 0x0f) as usize; self.ram_bank = n; } 0x6000..=0x7fff => { if v & 0x01 != 0 { self.rtc.tic(); } } _ => {} } } } \u6700\u540e, \u4e3a MBC3 \u5b9e\u73b0 Stable \u6cdb\u578b. \u5f53\u8c03\u7528 sav \u51fd\u6570\u65f6, \u9664\u4e86\u4fdd\u5b58 MBC3 RAM \u4e2d\u7684\u5185\u5bb9\u5916, \u8fd8\u9700\u8981\u540c\u65f6\u8c03\u7528 RTC \u7684 sav \u51fd\u6570\u4ee5\u4fdd\u5b58 RTC \u4e2d\u7684\u5185\u5bb9. impl Stable for Mbc3 { fn sav(&self) { rog::debugln!(\"Ram is being persisted\"); self.rtc.sav(); if self.sav_path.to_str().unwrap().is_empty() { return; } File::create(self.sav_path.clone()) .and_then(|mut f| f.write_all(&self.ram)) .unwrap(); } }","title":"GB-\u6e38\u620f\u5361\u5e26-MBC3"},{"location":"content/gameboy/cartridge/mbc3/#mbc3","text":"\u4e0e MBC2 \u4e00\u6837, MBC3 \u4e5f\u4e0e MBC1 \u975e\u5e38\u7c7b\u4f3c, \u533a\u522b\u5728\u4e8e MBC3 \u5305\u542b\u4e00\u4e2a\u65b0\u7684\u786c\u4ef6\u8bbe\u5907: \u5b9e\u65f6\u65f6\u949f(RealTimeClock, RTC). \u5b9e\u65f6\u65f6\u949f\u7c7b\u4f3c\u4e00\u4e2a\u5185\u7f6e\u5728\u5361\u5e26\u4e2d\u7684\u65f6\u949f, \u901a\u8fc7\u5b83, \u6e38\u620f\u7a0b\u5f0f\u53ef\u4ee5\u83b7\u53d6\u5230\"\u6d41\u901d\u7684\u65f6\u95f4\", \u7528\u4ee5\u53cd\u5411\u63a8\u7b97\u5f53\u524d\u7684\u65e5\u671f, \u65f6\u523b, \u6e38\u620f\u65f6\u957f\u7b49\u4fe1\u606f. \u4e00\u4e2a\u5e7f\u4e3a\u4eba\u77e5\u7684\u6848\u4f8b\u662f MBC3 \u82af\u7247\u5728\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6\u300b\u6e38\u620f\u7cfb\u5217\u4e2d\u7684\u5e7f\u6cdb\u4f7f\u7528, \u5728\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6-\u6c34\u6676\u300b\u4e2d\u62e5\u6709\u4e0e\u73b0\u5b9e\u4e16\u754c\u4e00\u81f4\u7684\u663c\u591c\u7cfb\u7edf\u548c\u661f\u671f\u7cfb\u7edf: \u2014\u2014\u6709\u4e9b\u7cbe\u7075\u53ea\u51fa\u73b0\u5728\u767d\u5929\u6216\u591c\u665a, \u751a\u81f3\u662f\u7279\u6b8a\u7684\u9650\u5b9a\u7a00\u6709\u7cbe\u7075\u4e58\u9f99, \u53ea\u6709\u5728\u5468\u4e94\u9ec4\u660f\u624d\u4f1a\u51fa\u73b0\u5728 32 \u53f7\u9053\u8def\u6d1e\u7a74\u6df1\u5904\u6c34\u9762. RTC \u9700\u8981\u4e00\u4e2a\u5916\u90e8\u7684 32.768kHz Quartz \u632f\u8361\u5668\u548c\u4e00\u679a\u5916\u90e8\u7ebd\u6263\u7535\u6c60\u624d\u80fd\u5de5\u4f5c, \u56e0\u6b64\u5373\u4f7f Game Boy \u5173\u95ed\u540e, RTC \u4ecd\u7136\u4f1a\u4f9d\u9760\u7535\u6c60\u800c\u7ee7\u7eed\u5de5\u4f5c. \u4e0d\u8fc7\u4e5f\u6b63\u56e0\u4e3a\u5982\u6b64, MBC3 \u82af\u7247\u7535\u6c60\u7684\u8017\u7535\u901f\u5ea6\u660e\u663e\u52a0\u5feb. \u7cbe\u7075\u5b9d\u53ef\u68a6-\u6c34\u6676\u4e2d\u7684\u663c/\u591c\u7cfb\u7edf:","title":"MBC3"},{"location":"content/gameboy/cartridge/mbc3/#mbc3_1","text":"MBC3 \u82af\u7247\u5c06 Game Boy \u5206\u914d\u7ed9\u6e38\u620f\u5361\u5e26\u7684\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4 0x0000...0x7fff \u548c 0xa000...0xbfff \u5212\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u72ec\u7acb\u533a\u95f4, \u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b. 1) 0000-3FFF ROM \u5b58\u50a8\u4f53 00 \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u603b\u662f\u6620\u5c04\u5230 ROM \u7684\u524d 16KB \u5b57\u8282\u7269\u7406\u5b58\u50a8. 2) 4000-7FFF ROM \u5b58\u50a8\u4f53 01-7F \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u4e3a\u7b2c 0x01 \u5230 0x7f \u7f16\u53f7\u7684 ROM \u5b58\u50a8\u4f53. \u4e0e MBC1 \u903b\u8f91\u5927\u4f53\u76f8\u540c, \u4f46\u5b58\u50a8\u4f53 0x20h, 0x40h \u548c 0x60 \u53ef\u4ee5\u88ab\u6b63\u5e38\u4f7f\u7528\u4e86. 3) A000-BFFF RAM \u5b58\u50a8\u4f53 00-03 \u6216 RTC \u5bc4\u5b58\u5668 08-0C \u8bfb\u5199\u533a\u57df. \u5177\u4f53\u662f\u8bfb\u5199 RAM \u8fd8\u662f RTC \u5bc4\u5b58\u5668, \u53d6\u51b3\u4e8e\u5f53\u524d\u5361\u5e26\u7684 RAM Bank Number. \u5982\u679c\u5f53\u524d\u7684 RAM Bank Number \u5c0f\u4e8e\u7b49\u4e8e 3, \u5219\u8bfb\u5199\u6307\u5b9a RAM Bank Number \u5bf9\u5e94\u7684 RAM \u5206\u7ec4. \u5982\u679c\u5f53\u524d\u7684 RAM Bank Number \u5c5e\u4e8e 0x08-0x0c \u8303\u56f4, \u5219\u8bfb\u5199\u6307\u5b9a\u7684 RTC \u5bc4\u5b58\u5668. RTC \u5bc4\u5b58\u5668\u8be6\u7ec6\u89c4\u8303\u5c06\u5728\u540e\u6587\u8fdb\u884c\u4ecb\u7ecd. 4) 0000-1FFF RAM/RTC \u542f\u7528/\u7981\u7528\u6807\u5fd7 \u53ea\u5199\u533a\u57df. \u542f\u7528\u6216\u7981\u7528\u5916\u90e8 RAM \u4e0e RTC. \u5199\u5165 0x0a \u542f\u7528\u5916\u90e8 RAM \u4e0e RTC, \u5176\u4f59\u60c5\u51b5\u5219\u7981\u7528\u5b83\u4eec. 5) 2000-3FFF ROM Bank Number \u53ea\u5199\u533a\u57df. \u4e0e MBC1 \u7c7b\u4f3c, \u53ea\u662f ROM Bank Number \u5c06\u53d6\u5199\u5165\u503c\u7684\u540e 7 \u4f4d\u800c\u4e0d\u662f\u540e 5 \u4f4d, \u56e0\u6b64\u5b58\u50a8\u4f53\u7684\u6570\u91cf\u8303\u56f4\u6269\u5927\u5230 0x00 \u5230 0x7f. \u6ce8\u610f\u5f53\u5199\u5165\u503c\u662f 0x00 \u65f6, \u5219\u66ff\u6362\u4e3a 0x01. 6) 4000-5FFF RAM Bank Number \u53ea\u5199\u533a\u57df. \u5199\u5165\u503c\u7684\u540e 2 \u4f4d(\u8303\u56f4 0x00-0x03)\u5c06\u4f5c\u4e3a\u5361\u5e26\u5f53\u524d\u7684 RAM Bank Number. 7) 6000-7FFF \u9501\u5b58\u65f6\u949f\u6570\u636e \u53ea\u5199\u533a\u57df. \u9996\u5148\u5411\u8be5\u5730\u5740\u533a\u57df\u5199\u5165 0x00, \u7136\u540e\u5199\u5165 0x01, \u5f53\u524d\u7684\u65f6\u95f4\u6d41\u901d\u91cf\u5c06\u88ab\u9501\u5b58\u5230 RTC \u5bc4\u5b58\u5668\u4e2d. \u901a\u8fc7\u91cd\u590d\u5199\u5165 0x00 -> 0x01 \u8fd9\u4e2a\u8fc7\u7a0b, \u53ef\u4ee5\u4fee\u6539 RTC \u5bc4\u5b58\u5668\u4e2d\u9501\u5b58\u7684\u65f6\u95f4. \u6ce8\u610f, \u5982\u679c\u91cd\u590d\u5199\u5165 0x01 \u5e76\u4e0d\u4f1a\u6539\u53d8\u9501\u5b58\u7684\u65f6\u95f4\u503c.","title":"MBC3 \u5730\u5740\u7a7a\u95f4\u5212\u5206"},{"location":"content/gameboy/cartridge/mbc3/#rtc","text":"RTC \u6a21\u5757\u5305\u542b 5 \u4e2a\u5bc4\u5b58\u5668: \u79d2\u5bc4\u5b58\u5668, \u5206\u5bc4\u5b58\u5668, \u5c0f\u65f6\u5bc4\u5b58\u5668, \u65e5\u5bc4\u5b58\u5668\u548c\u6807\u5fd7\u5bc4\u5b58\u5668. \u5b83\u8bb0\u5f55\u4e86\u81ea\u4e0a\u4e00\u6b21\u590d\u4f4d\u4ee5\u6765, \u603b\u5171\u6d41\u901d\u4e86\u591a\u5c11\u65f6\u95f4. \u5404\u4e2a\u5bc4\u5b58\u5668\u6240\u5904\u5730\u5740\u4e0e\u5176\u8bf4\u660e\u5982\u4e0b\u6240\u793a. 0x08 RTC S Seconds 0-59 (0-3Bh) 0x09 RTC M Minutes 0-59 (0-3Bh) 0x0A RTC H Hours 0-23 (0-17h) 0x0B RTC DL Lower 8 bits of Day Counter (0-FFh) 0x0C RTC DH Upper 1 bit of Day Counter, Carry Bit, Halt Flag Bit 0 Most significant bit of Day Counter (Bit 8) Bit 6 Halt (0=Active, 1=Stop Timer) Bit 7 Day Counter Carry Bit (1=Counter Overflow) \u6b63\u5e38\u60c5\u51b5\u4e0b, \u5728\u5199\u5165 RTC \u5bc4\u5b58\u5668\u4e4b\u524d\u5e94\u8be5\u5148\u7f6e\u4f4d Halt(0x0c \u5bc4\u5b58\u5668\u7684\u7b2c 6 \u4f4d)\u4e2d\u65ad RTC \u7684\u6267\u884c, \u5199\u5165\u5b8c\u6210\u540e\u518d\u91cd\u7f6e Halt. Day Counter(\u65e5\u8ba1\u6570\u5668)\u603b\u5171\u6709 9 \u4f4d, \u5305\u62ec 0x0b \u5bc4\u5b58\u5668\u672c\u8eab 8 \u4f4d\u4e0e 0x0c \u5bc4\u5b58\u5668\u7b2c 0 \u4f4d. \u5b83\u5141\u8bb8\u8ba1\u7b97 0-511(0x0000-0x01ff)\u8303\u56f4\u5185\u7684\u5929\u6570. \u5f53\u6b64\u503c\u6ea2\u51fa\u65f6, \u65e5\u8ba1\u6570\u5668\u8fdb\u4f4d\u4f4d(0x0c \u5bc4\u5b58\u5668\u7b2c 7 \u4f4d)\u7f6e 1. \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u8fdb\u4f4d\u4f4d\u4fdd\u6301\u7f6e\u4f4d\u72b6\u6001, \u76f4\u5230\u7a0b\u5e8f\u91cd\u7f6e\u5b83\u4e3a\u6b62.","title":"RTC \u5bc4\u5b58\u5668"},{"location":"content/gameboy/cartridge/mbc3/#_1","text":"\u9996\u5148\u9700\u8981\u5b9e\u73b0 RTC \u7684\u4eff\u771f. \u8981\u6ce8\u610f, RTC \u540c RAM \u4e00\u6837, \u9700\u8981\u5728\u4eff\u771f\u5668\u5173\u95ed\u7684\u65f6\u5019\u5199\u6570\u636e\u5230\u672c\u5730\u6587\u4ef6, \u7136\u540e\u518d\u5728\u4eff\u771f\u5668\u542f\u52a8\u7684\u65f6\u5019\u8fdb\u884c\u52a0\u8f7d\u4ee5\u4fdd\u6301\u65f6\u95f4\u7684\u8fde\u8d2f\u6027. \u4e3a\u4e86\u83b7\u53d6\"\u6d41\u901d\u7684\u65f6\u95f4\", \u5728\u4eff\u771f\u5b9e\u73b0\u4e0a\u4f1a\u7a0d\u5fae\u505a\u4e00\u4e9b\u5c0f trick, zero \u5b57\u6bb5\u4fdd\u5b58\u7cfb\u7edf\u7684 timestamp, \u8fd9\u6837\u5f53\u9700\u8981\u53d6\u5f97\"\u6d41\u901d\u7684\u65f6\u95f4\"\u65f6, \u53ea\u9700\u8981\u5c06\u5f53\u524d\u7684 timestamp \u51cf\u53bb\u4e4b\u524d\u5b58\u50a8\u5728 zero \u5b57\u6bb5\u7684\u503c\u5373\u53ef. struct RealTimeClock { s: u8, m: u8, h: u8, dl: u8, dh: u8, zero: u64, sav_path: PathBuf, } impl RealTimeClock { fn power_up(sav_path: impl AsRef<Path>) -> Self { let zero = match std::fs::read(sav_path.as_ref()) { Ok(ok) => { let mut b: [u8; 8] = Default::default(); b.copy_from_slice(&ok); u64::from_be_bytes(b) } Err(_) => SystemTime::now() .duration_since(SystemTime::UNIX_EPOCH) .unwrap() .as_secs(), }; Self { zero, s: 0, m: 0, h: 0, dl: 0, dh: 0, sav_path: sav_path.as_ref().to_path_buf(), } } fn tic(&mut self) { let d = SystemTime::now() .duration_since(SystemTime::UNIX_EPOCH) .unwrap() .as_secs() - self.zero; self.s = (d % 60) as u8; self.m = (d / 60 % 60) as u8; self.h = (d / 3600 % 24) as u8; let days = (d / 3600 / 24) as u16; self.dl = (days % 256) as u8; match days { 0x0000..=0x00ff => {} 0x0100..=0x01ff => { self.dh |= 0x01; } _ => { self.dh |= 0x01; self.dh |= 0x80; } } } } \u4e3a RTC \u5b9e\u73b0 Memory \u6cdb\u578b, \u4f7f\u5f97 CPU \u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61. \u8bfb\u5199\u89c4\u5219\u53ef\u53c2\u7167\u524d\u6587\"RTC \u5bc4\u5b58\u5668\"\u4e00\u8282. impl Memory for RealTimeClock { fn get(&self, a: u16) -> u8 { match a { 0x08 => self.s, 0x09 => self.m, 0x0a => self.h, 0x0b => self.dl, 0x0c => self.dh, _ => panic!(\"No entry\"), } } fn set(&mut self, a: u16, v: u8) { match a { 0x08 => self.s = v, 0x09 => self.m = v, 0x0a => self.h = v, 0x0b => self.dl = v, 0x0c => self.dh = v, _ => panic!(\"No entry\"), } } } \u4e3a RTC \u5b9e\u73b0 Stable \u6cdb\u578b, \u4f7f\u5f97\u5176\u5728\u4eff\u771f\u5668\u5173\u95ed\u65f6\u53ef\u5199\u5165\u6570\u636e\u5230\u6587\u4ef6. impl Stable for RealTimeClock { fn sav(&self) { if self.sav_path.to_str().unwrap().is_empty() { return; } File::create(self.sav_path.clone()) .and_then(|mut f| f.write_all(&self.zero.to_be_bytes())) .unwrap() } } \u63a5\u7740\u518d\u5b9e\u73b0 MBC3 \u7684\u5b8c\u6574\u4eff\u771f, \u5b83\u540c\u6837\u4e0e\u4e4b\u524d\u7684 MBC1 \u6216 MBC2 \u975e\u5e38\u7c7b\u4f3c. \u5b9a\u4e49 MBC1 \u7ed3\u6784\u4f53, \u5176\u6210\u5458\u5305\u62ec ROM, RAM, RTC, \u5404\u4e2a\u524d\u6587\u4ecb\u7ecd\u7684\u5bc4\u5b58\u5668\u548c sav_path. pub struct Mbc3 { rom: Vec<u8>, ram: Vec<u8>, rtc: RealTimeClock, rom_bank: usize, ram_bank: usize, ram_enable: bool, sav_path: PathBuf, } impl Mbc3 { pub fn power_up(rom: Vec<u8>, ram: Vec<u8>, sav: impl AsRef<Path>, rtc: impl AsRef<Path>) -> Self { Self { rom, ram, rtc: RealTimeClock::power_up(rtc), rom_bank: 1, ram_bank: 0, ram_enable: false, sav_path: PathBuf::from(sav.as_ref()), } } } \u4e3a MBC3 \u5b9e\u73b0 Memory \u6cdb\u578b, \u4f7f\u5f97 CPU \u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61. \u8bfb\u5199\u89c4\u5219\u53ef\u53c2\u7167\u524d\u6587\"MBC3 \u5730\u5740\u7a7a\u95f4\u5212\u5206\"\u4e00\u8282. impl Memory for Mbc3 { fn get(&self, a: u16) -> u8 { match a { 0x0000..=0x3fff => self.rom[a as usize], 0x4000..=0x7fff => { let i = self.rom_bank * 0x4000 + a as usize - 0x4000; self.rom[i] } 0xa000..=0xbfff => { if self.ram_enable { if self.ram_bank <= 0x03 { let i = self.ram_bank * 0x2000 + a as usize - 0xa000; self.ram[i] } else { self.rtc.get(self.ram_bank as u16) } } else { 0x00 } } _ => 0x00, } } fn set(&mut self, a: u16, v: u8) { match a { 0xa000..=0xbfff => { if self.ram_enable { if self.ram_bank <= 0x03 { let i = self.ram_bank * 0x2000 + a as usize - 0xa000; self.ram[i] = v; } else { self.rtc.set(self.ram_bank as u16, v) } } } 0x0000..=0x1fff => { self.ram_enable = v & 0x0f == 0x0a; } 0x2000..=0x3fff => { let n = (v & 0x7f) as usize; let n = match n { 0x00 => 0x01, _ => n, }; self.rom_bank = n; } 0x4000..=0x5fff => { let n = (v & 0x0f) as usize; self.ram_bank = n; } 0x6000..=0x7fff => { if v & 0x01 != 0 { self.rtc.tic(); } } _ => {} } } } \u6700\u540e, \u4e3a MBC3 \u5b9e\u73b0 Stable \u6cdb\u578b. \u5f53\u8c03\u7528 sav \u51fd\u6570\u65f6, \u9664\u4e86\u4fdd\u5b58 MBC3 RAM \u4e2d\u7684\u5185\u5bb9\u5916, \u8fd8\u9700\u8981\u540c\u65f6\u8c03\u7528 RTC \u7684 sav \u51fd\u6570\u4ee5\u4fdd\u5b58 RTC \u4e2d\u7684\u5185\u5bb9. impl Stable for Mbc3 { fn sav(&self) { rog::debugln!(\"Ram is being persisted\"); self.rtc.sav(); if self.sav_path.to_str().unwrap().is_empty() { return; } File::create(self.sav_path.clone()) .and_then(|mut f| f.write_all(&self.ram)) .unwrap(); } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/cartridge/mbc5/","text":"MBC5 MBC5 \u662f\u5728 Game Boy \u6e38\u620f\u5361\u5e26\u6280\u672f\u53d1\u5c55\u672b\u671f\u63a8\u51fa\u7684\u6e38\u620f\u5361\u5e26\u7c7b\u578b. \u5b83\u7684 ROM \u5bb9\u91cf\u8fbe\u5230\u4e86 8M, RAM \u5bb9\u91cf\u5219\u662f 128K. \u5b83\u662f\u5386\u53f2\u4e0a\u7b2c\u4e8c\u53d7\u5f00\u53d1\u8005\u559c\u7231\u7684 MBC \u7c7b\u578b, \u5728\u603b\u5171 6000 \u4f59\u4e2a Game Boy \u6e38\u620f\u4e2d\u5360\u6bd4 45%, \u7b2c\u4e00\u540d\u5219\u662f MBC1, \u5360\u6bd4\u9ad8\u8fbe 50%. MBC5 \u5730\u5740\u7a7a\u95f4\u5212\u5206 MBC5 \u82af\u7247\u5c06 Game Boy \u5206\u914d\u7ed9\u6e38\u620f\u5361\u5e26\u7684\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4 0x0000...0x7fff \u548c 0xa000...0xbfff \u5212\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u72ec\u7acb\u533a\u95f4, \u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b. 1) 0000-3FFF ROM \u5b58\u50a8\u4f53 00 \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u603b\u662f\u6620\u5c04\u5230 ROM \u7684\u524d 16KB \u5b57\u8282\u7269\u7406\u5b58\u50a8. 2) 4000-7FFF ROM \u5b58\u50a8\u4f53 00-1FF \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u4e3a\u7b2c 0x01 \u5230 0x01ff \u7f16\u53f7\u7684 ROM \u5b58\u50a8\u4f53. 3) A000-BFFF RAM \u5b58\u50a8\u4f53 00-0F \u8bfb\u5199\u533a\u57df. \u8be5\u533a\u57df\u7528\u4e8e\u8bfb\u5199\u6e38\u620f\u5361\u5e26\u4e2d\u7684\u5916\u90e8 RAM(\u5982\u679c\u6709\u7684\u8bdd). 4) 0000-1FFF RAM \u542f\u7528/\u7981\u7528\u6807\u5fd7 \u53ea\u5199\u533a\u57df. \u903b\u8f91\u4e0e MBC1 \u5b8c\u5168\u4e00\u81f4. 5) 2000-2FFF ROM Bank Number \u7684\u4f4e 8 \u4f4d \u53ea\u5199\u533a\u57df. \u5b58\u50a8 ROM Bank Number \u7684\u4f4e 8 \u4f4d. \u6ce8\u610f\u4e0e\u5176\u4ed6 MBC \u7c7b\u578b\u4e0d\u540c\u7684\u662f, \u5982\u679c\u5199\u5165 0x00\u4e0d\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u6210 0x01. 6) 3000-3FFF ROM Bank Number\u7684\u7b2c 9 \u4f4d \u53ea\u5199\u533a\u57df. \u5b58\u50a8 ROM Bank Number \u7684\u7b2c 9 \u4f4d. \u53ea\u4f7f\u7528\u8f93\u5165\u6570\u636e\u7684\u6700\u4f4e\u4f4d, \u5176\u5b83\u4f4d\u7684\u6570\u636e\u4f1a\u88ab\u5ffd\u7565. 7) 4000-5FFF RAM Bank Number \u53ea\u5199\u533a\u57df. \u8f93\u5165\u6570\u636e\u7684\u4f4e 4 \u4f4d\u5c06\u4f5c\u4e3a\u5f53\u524d\u7684 RAM Bank Number. \u4ee3\u7801\u5b9e\u73b0 \u4e8b\u5b9e\u4e0a MBC5 \u7684\u4ee3\u7801\u6574\u4f53\u7ed3\u6784\u4e0e\u5176\u5b83 MBC \u7c7b\u578b\u540c\u6837\u6ca1\u6709\u591a\u5927\u533a\u522b. \u5b9a\u4e49 MBC5 \u7ed3\u6784\u4f53, \u5176\u6210\u5458\u5305\u62ec ROM, RAM, \u5404\u4e2a\u524d\u6587\u4ecb\u7ecd\u7684\u5bc4\u5b58\u5668\u548c sav_path. pub struct Mbc5 { rom: Vec<u8>, ram: Vec<u8>, rom_bank: usize, ram_bank: usize, ram_enable: bool, sav_path: PathBuf, } impl Mbc5 { pub fn power_up(rom: Vec<u8>, ram: Vec<u8>, sav: impl AsRef<Path>) -> Self { Self { rom, ram, rom_bank: 1, ram_bank: 0, ram_enable: false, sav_path: PathBuf::from(sav.as_ref()), } } } \u4e3a MBC5 \u5b9e\u73b0 Memory \u6cdb\u578b, \u4f7f\u5f97 CPU \u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61. \u8bfb\u5199\u89c4\u5219\u53ef\u53c2\u7167\u524d\u6587\"MBC5 \u5730\u5740\u7a7a\u95f4\u5212\u5206\"\u4e00\u8282. impl Memory for Mbc5 { fn get(&self, a: u16) -> u8 { match a { 0x0000..=0x3fff => self.rom[a as usize], 0x4000..=0x7fff => { let i = self.rom_bank * 0x4000 + a as usize - 0x4000; self.rom[i] } 0xa000..=0xbfff => { if self.ram_enable { let i = self.ram_bank * 0x2000 + a as usize - 0xa000; self.ram[i] } else { 0x00 } } _ => 0x00, } } fn set(&mut self, a: u16, v: u8) { match a { 0xa000..=0xbfff => { if self.ram_enable { let i = self.ram_bank * 0x2000 + a as usize - 0xa000; self.ram[i] = v; } } 0x0000..=0x1fff => { self.ram_enable = v & 0x0f == 0x0a; } 0x2000..=0x2fff => self.rom_bank = (self.rom_bank & 0x100) | (v as usize), 0x3000..=0x3fff => self.rom_bank = (self.rom_bank & 0x0ff) | (((v & 0x01) as usize) << 8), 0x4000..=0x5fff => self.ram_bank = (v & 0x0f) as usize, _ => {} } } } \u6700\u540e, \u4e3a MBC5 \u5b9e\u73b0 Stable \u6cdb\u578b. \u5f53\u8c03\u7528 sav \u51fd\u6570\u65f6, \u5982\u679c sav_path \u8def\u5f84\u4e0b\u5df2\u7ecf\u5b58\u5728\u6570\u636e\u6587\u4ef6, \u5219\u8986\u76d6\u65e7\u7684\u6587\u4ef6; \u5426\u5219\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6. \u88ab\u4fdd\u5b58\u7684\u6570\u636e\u5219\u662f\u6574\u4e2a RAM \u4e2d\u5b58\u50a8\u7684\u5185\u5bb9. impl Stable for Mbc5 { fn sav(&self) { rog::debugln!(\"Ram is being persisted\"); if self.sav_path.to_str().unwrap().is_empty() { return; } File::create(self.sav_path.clone()) .and_then(|mut f| f.write_all(&self.ram)) .unwrap() } }","title":"GB-\u6e38\u620f\u5361\u5e26-MBC5"},{"location":"content/gameboy/cartridge/mbc5/#mbc5","text":"MBC5 \u662f\u5728 Game Boy \u6e38\u620f\u5361\u5e26\u6280\u672f\u53d1\u5c55\u672b\u671f\u63a8\u51fa\u7684\u6e38\u620f\u5361\u5e26\u7c7b\u578b. \u5b83\u7684 ROM \u5bb9\u91cf\u8fbe\u5230\u4e86 8M, RAM \u5bb9\u91cf\u5219\u662f 128K. \u5b83\u662f\u5386\u53f2\u4e0a\u7b2c\u4e8c\u53d7\u5f00\u53d1\u8005\u559c\u7231\u7684 MBC \u7c7b\u578b, \u5728\u603b\u5171 6000 \u4f59\u4e2a Game Boy \u6e38\u620f\u4e2d\u5360\u6bd4 45%, \u7b2c\u4e00\u540d\u5219\u662f MBC1, \u5360\u6bd4\u9ad8\u8fbe 50%.","title":"MBC5"},{"location":"content/gameboy/cartridge/mbc5/#mbc5_1","text":"MBC5 \u82af\u7247\u5c06 Game Boy \u5206\u914d\u7ed9\u6e38\u620f\u5361\u5e26\u7684\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4 0x0000...0x7fff \u548c 0xa000...0xbfff \u5212\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u72ec\u7acb\u533a\u95f4, \u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b. 1) 0000-3FFF ROM \u5b58\u50a8\u4f53 00 \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u603b\u662f\u6620\u5c04\u5230 ROM \u7684\u524d 16KB \u5b57\u8282\u7269\u7406\u5b58\u50a8. 2) 4000-7FFF ROM \u5b58\u50a8\u4f53 00-1FF \u53ea\u8bfb\u533a\u57df. \u8be5\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u4e3a\u7b2c 0x01 \u5230 0x01ff \u7f16\u53f7\u7684 ROM \u5b58\u50a8\u4f53. 3) A000-BFFF RAM \u5b58\u50a8\u4f53 00-0F \u8bfb\u5199\u533a\u57df. \u8be5\u533a\u57df\u7528\u4e8e\u8bfb\u5199\u6e38\u620f\u5361\u5e26\u4e2d\u7684\u5916\u90e8 RAM(\u5982\u679c\u6709\u7684\u8bdd). 4) 0000-1FFF RAM \u542f\u7528/\u7981\u7528\u6807\u5fd7 \u53ea\u5199\u533a\u57df. \u903b\u8f91\u4e0e MBC1 \u5b8c\u5168\u4e00\u81f4. 5) 2000-2FFF ROM Bank Number \u7684\u4f4e 8 \u4f4d \u53ea\u5199\u533a\u57df. \u5b58\u50a8 ROM Bank Number \u7684\u4f4e 8 \u4f4d. \u6ce8\u610f\u4e0e\u5176\u4ed6 MBC \u7c7b\u578b\u4e0d\u540c\u7684\u662f, \u5982\u679c\u5199\u5165 0x00\u4e0d\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u6210 0x01. 6) 3000-3FFF ROM Bank Number\u7684\u7b2c 9 \u4f4d \u53ea\u5199\u533a\u57df. \u5b58\u50a8 ROM Bank Number \u7684\u7b2c 9 \u4f4d. \u53ea\u4f7f\u7528\u8f93\u5165\u6570\u636e\u7684\u6700\u4f4e\u4f4d, \u5176\u5b83\u4f4d\u7684\u6570\u636e\u4f1a\u88ab\u5ffd\u7565. 7) 4000-5FFF RAM Bank Number \u53ea\u5199\u533a\u57df. \u8f93\u5165\u6570\u636e\u7684\u4f4e 4 \u4f4d\u5c06\u4f5c\u4e3a\u5f53\u524d\u7684 RAM Bank Number.","title":"MBC5 \u5730\u5740\u7a7a\u95f4\u5212\u5206"},{"location":"content/gameboy/cartridge/mbc5/#_1","text":"\u4e8b\u5b9e\u4e0a MBC5 \u7684\u4ee3\u7801\u6574\u4f53\u7ed3\u6784\u4e0e\u5176\u5b83 MBC \u7c7b\u578b\u540c\u6837\u6ca1\u6709\u591a\u5927\u533a\u522b. \u5b9a\u4e49 MBC5 \u7ed3\u6784\u4f53, \u5176\u6210\u5458\u5305\u62ec ROM, RAM, \u5404\u4e2a\u524d\u6587\u4ecb\u7ecd\u7684\u5bc4\u5b58\u5668\u548c sav_path. pub struct Mbc5 { rom: Vec<u8>, ram: Vec<u8>, rom_bank: usize, ram_bank: usize, ram_enable: bool, sav_path: PathBuf, } impl Mbc5 { pub fn power_up(rom: Vec<u8>, ram: Vec<u8>, sav: impl AsRef<Path>) -> Self { Self { rom, ram, rom_bank: 1, ram_bank: 0, ram_enable: false, sav_path: PathBuf::from(sav.as_ref()), } } } \u4e3a MBC5 \u5b9e\u73b0 Memory \u6cdb\u578b, \u4f7f\u5f97 CPU \u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61. \u8bfb\u5199\u89c4\u5219\u53ef\u53c2\u7167\u524d\u6587\"MBC5 \u5730\u5740\u7a7a\u95f4\u5212\u5206\"\u4e00\u8282. impl Memory for Mbc5 { fn get(&self, a: u16) -> u8 { match a { 0x0000..=0x3fff => self.rom[a as usize], 0x4000..=0x7fff => { let i = self.rom_bank * 0x4000 + a as usize - 0x4000; self.rom[i] } 0xa000..=0xbfff => { if self.ram_enable { let i = self.ram_bank * 0x2000 + a as usize - 0xa000; self.ram[i] } else { 0x00 } } _ => 0x00, } } fn set(&mut self, a: u16, v: u8) { match a { 0xa000..=0xbfff => { if self.ram_enable { let i = self.ram_bank * 0x2000 + a as usize - 0xa000; self.ram[i] = v; } } 0x0000..=0x1fff => { self.ram_enable = v & 0x0f == 0x0a; } 0x2000..=0x2fff => self.rom_bank = (self.rom_bank & 0x100) | (v as usize), 0x3000..=0x3fff => self.rom_bank = (self.rom_bank & 0x0ff) | (((v & 0x01) as usize) << 8), 0x4000..=0x5fff => self.ram_bank = (v & 0x0f) as usize, _ => {} } } } \u6700\u540e, \u4e3a MBC5 \u5b9e\u73b0 Stable \u6cdb\u578b. \u5f53\u8c03\u7528 sav \u51fd\u6570\u65f6, \u5982\u679c sav_path \u8def\u5f84\u4e0b\u5df2\u7ecf\u5b58\u5728\u6570\u636e\u6587\u4ef6, \u5219\u8986\u76d6\u65e7\u7684\u6587\u4ef6; \u5426\u5219\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6. \u88ab\u4fdd\u5b58\u7684\u6570\u636e\u5219\u662f\u6574\u4e2a RAM \u4e2d\u5b58\u50a8\u7684\u5185\u5bb9. impl Stable for Mbc5 { fn sav(&self) { rog::debugln!(\"Ram is being persisted\"); if self.sav_path.to_str().unwrap().is_empty() { return; } File::create(self.sav_path.clone()) .and_then(|mut f| f.write_all(&self.ram)) .unwrap() } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/cartridge/memory_bank_controller/","text":"Memory Bank Controller \u81ea\u4ece\u8ba1\u7b97\u673a\u88ab\u53d1\u660e\u4ee5\u6765, \u8bb8\u591a\u8ba1\u7b97\u673a\u7cfb\u7edf\u90fd\u4e0d\u5f97\u4e0d\u9762\u5bf9\u4e00\u4e2a\u95ee\u9898: \u8ba1\u7b97\u673a\u4e0a\u6240\u8fd0\u884c\u7684\u7a0b\u5e8f\u9700\u8981\u8d8a\u6765\u8d8a\u591a\u7684\u5185\u5b58, \u4ee5\u81f3\u4e8e\u8d85\u51fa\u4e86\u5f53\u65f6\u7684\u786c\u4ef6\u80fd\u529b\u8303\u56f4. \u4f20\u7edf\u4e0a, \u6709\u4e24\u79cd\u65b9\u5f0f\u53ef\u4ee5\u6765\u5904\u7406\u8fd9\u4e2a\u95ee\u9898: \u589e\u52a0 CPU \u53ef\u5bfb\u5740\u7684\u5730\u5740\u7a7a\u95f4. \u8bbe\u8ba1\u4e00\u4e2a\u65b0\u7684\u62e5\u6709\u66f4\u591a\u5730\u5740\u603b\u7ebf\u7684 CPU, \u4f7f\u5176\u80fd\u591f\u5bfb\u5740\u66f4\u5927\u7684\u5185\u5b58\u91cf. \u8fd9\u662f\u4f18\u9009\u7684\u89e3\u51b3\u65b9\u6848, \u4f46\u662f\u9700\u8981\u65f6\u95f4\u548c\u91d1\u94b1\u6765\u89e3\u51b3\u95ee\u9898. \u6bd4\u5982\u8fd1\u51e0\u5e74\u5df2\u7ecf\u4e0d\u592a\u5e38\u89c1\u7684 32 \u4f4d\u7cfb\u7edf, \u56e0\u4e3a\u5176\u4f7f\u7528\u7684 32 \u4f4d CPU \u53ea\u80fd\u5bfb\u5740\u6700\u591a 4G \u5185\u5b58, \u65e0\u8bba\u662f\u64ad\u653e\u8d85\u6e05\u89c6\u9891\u8fd8\u662f\u73a9\u5927\u578b\u6e38\u620f\u90fd\u663e\u5f97\u6349\u895f\u89c1\u8098. \u865a\u62df\u5185\u5b58\u65b9\u6848. \u8fd9\u53ef\u4ee5\u662f\u6620\u5c04\u5230\u8f6f\u76d8\u4e0a\u7684 RAM, \u5f53 CPU \u9700\u8981\u65f6\u4ea4\u6362\u8f6f\u76d8\u4e0e\u5185\u5b58\u4e2d\u7684\u6570\u636e; \u6216\u662f\u5df2\u7ecf\u63d0\u524d\u9884\u5199\u7684 ROM \u5206\u5757\u6570\u636e. \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b, \u7cfb\u7edf\u786c\u4ef6\u53ea\u9700\u8981\u4e00\u70b9\u6269\u5c55, \u6210\u672c\u4f4e\u5ec9, \u4f46\u7cfb\u7edf\u4e2d\u7684\u4efb\u4f55\u8f6f\u4ef6\u5fc5\u987b\u77e5\u9053\u8be5\u865a\u62df\u5185\u5b58\u4f53\u7cfb\u7684\u5b58\u5728, \u624d\u80fd\u4f7f\u7528\u5b83. \u7531\u4e8e Game Boy \u662f\u4e00\u4e2a\u5b9a\u4ef7\u4eb2\u6c11\u7684\u638c\u4e0a\u6e38\u620f\u673a, \u4f7f\u7528\u6602\u8d35\u7684 CPU \u5c06\u6781\u5927\u63d0\u5347\u6210\u672c, \u56e0\u6b64\u4efb\u5929\u5802\u901a\u8fc7\u865a\u62df\u5185\u5b58\u7684\u65b9\u5f0f\u6765\u652f\u6301\u66f4\u5927\u7684\u5b58\u50a8\u7a7a\u95f4. Game Boy \u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143\u5206\u914d\u7ed9 Cartridge \u7684\u5185\u5b58\u8303\u56f4\u662f 0x0000...0x7fff \u548c 0xa000...0xbfff \u4e24\u4e2a\u533a\u95f4, \u603b\u8ba1 0x8000 + 0x2000 = 32k + 8k = 40k \u7684\u5b58\u50a8\u7a7a\u95f4, \u5176\u4e2d\u540e 8k \u88ab\u5206\u914d\u7ed9\u5916\u90e8\u5185\u5b58. \u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u7ed3\u8bba\u662f, \u5982\u679c\u76f4\u63a5\u5c06\u5361\u5e26\u7684\u7269\u7406\u5b58\u50a8\u6620\u5c04\u5230\u5185\u5b58\u7ba1\u7406\u5355\u5143\u7684\u5730\u5740, \u5361\u5e26\u7684\u6700\u5927\u5bb9\u91cf\u4e0d\u5f97\u8d85\u8fc7 32k. \u4e0d\u8fc7\u5e78\u8fd0\u7684\u662f, \u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7\u5185\u5d4c\u5728 Cartridge \u4e2d\u7684 Memory Bank Controller(\u5185\u5b58\u5b58\u50a8\u4f53\u63a7\u5236\u5668, \u7b80\u79f0 MBC)\u6280\u672f\u6765\u6269\u5c55\u6e38\u620f\u7684\u4f53\u79ef. CPU \u901a\u5e38\u53ea\u80fd\u4e0e\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4\u76f4\u63a5\u901a\u4fe1(\u9664 I/O \u53e3\u5916), \u56e0\u6b64\u5982\u679c\u4e00\u4e2a\u5916\u90e8\u8bbe\u5907\u671f\u671b\u4e0e CPU \u901a\u4fe1\u7684\u8bdd, \u53ef\u4ee5\u901a\u8fc7\u5c06\u81ea\u5df1\u7684\u5b58\u50a8\u7a7a\u95f4\u6620\u5c04\u5230\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4\u4e0a\u6765\u5b8c\u6210. MBC \u6280\u672f\u6b63\u662f\u4f4d\u4e8e\u8fd9\u5c42\"\u6620\u5c04\"\u8fc7\u7a0b\u4e2d. \u539f\u7406\u8be6\u89e3 Memory Bank Controller \u662f\u8ba1\u7b97\u673a\u8bbe\u8ba1\u4e2d\u7684\u4e00\u79cd\u5e38\u89c1\u6280\u672f, \u7528\u4e8e\u5c06\u53ef\u7528\u5b58\u50a8\u5bb9\u91cf\u589e\u52a0\u5230\u8d85\u51fa\u5904\u7406\u5668\u53ef\u76f4\u63a5\u5bfb\u5740\u7684\u8303\u56f4. \u5b83\u6700\u521d\u8d77\u6e90\u4e8e\u5c0f\u578b\u5d4c\u5165\u5f0f\u7cfb\u7edf, \u4e4b\u540e\u5728 8 \u4f4d\u673a\u4e0a\u53d1\u626c\u5149\u5927, \u5230\u73b0\u4ee3, \u4f9d\u7136\u53ef\u4ee5\u5728\u8bb8\u591a\u5fae\u673a\u7cfb\u7edf\u4e2d\u770b\u5230\u5b83\u7684\u8eab\u5f71(\u4e0d\u8fc7\u5728\u73b0\u4ee3\u5b83\u901a\u5e38\u88ab\u79f0\u4e3a Bank Switing, \u5b58\u50a8\u4f53\u5207\u6362, \u5b9e\u9645\u4e0a\u6307\u4ee3\u7684\u662f\u540c\u4e00\u4ef6\u4e8b\u7269). MBC \u88ab\u8ba4\u4e3a\u662f\u901a\u8fc7\u4e00\u4e9b\u5916\u90e8\u5bc4\u5b58\u5668\u6269\u5c55\u5904\u7406\u5668\u5730\u5740\u603b\u7ebf\u7684\u4e00\u79cd\u65b9\u5f0f, \u5b83\u7684\u539f\u7406\u5f02\u5e38\u7b80\u5355, \u4f8b\u5982, \u5177\u6709 16 \u4f4d\u5916\u90e8\u5730\u5740\u603b\u7ebf\u7684\u5904\u7406\u5668\u53ea\u80fd\u5bfb\u5740 2^16 = 65536 \u4e2a\u5b58\u50a8\u5668\u4f4d\u7f6e. \u5982\u679c\u5c06\u5916\u90e8\u9501\u5b58\u5668\u6dfb\u52a0\u5230\u7cfb\u7edf, \u5219\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u63a7\u5236\u4e24\u7ec4\u5b58\u50a8\u8bbe\u5907\u4e2d\u7684\u54ea\u4e00\u7ec4, \u6bcf\u4e2a\u5b58\u50a8\u8bbe\u5907\u5177\u6709 65536 \u4e2a\u5730\u5740. \u5904\u7406\u5668\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6216\u6e05\u9664\u9501\u5b58\u5668\u4f4d\u6765\u66f4\u6539\u5f53\u524d\u4f7f\u7528\u7684\u8bbe\u7f6e, \u5982\u56fe\u6240\u793a, \u5f53 CPU \u8bd5\u56fe\u8bfb\u53d6\u7cfb\u7edf\u5730\u5740\u4e3a 0x00001 \u7684\u503c\u65f6, \u6839\u636e\u9501\u5b58\u5668\u6807\u5fd7\u4f4d\u7684\u8bbe\u7f6e\u4e0e\u5426, \u5c06\u4ece\u7269\u7406\u5730\u5740\u4e2d\u5b9e\u9645\u8bfb\u53d6\u5230\u503c A \u6216\u8005\u503c C. \u7531\u4e8e\u5916\u90e8\u5b58\u50a8\u4f53\u9009\u62e9\u9501\u5b58\u5668(\u6216\u5bc4\u5b58\u5668)\u672a\u76f4\u63a5\u4e0e\u5904\u7406\u5668\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u8fde\u63a5, \u56e0\u6b64\u5f53\u7a0b\u5e8f\u8ba1\u6570\u5668\u6ea2\u51fa\u65f6, \u5b83\u4e0d\u4f1a\u81ea\u52a8\u66f4\u6539\u72b6\u6001. \u7531\u4e8e\u7a0b\u5e8f\u8ba1\u6570\u5668\u662f\u5904\u7406\u5668\u7684\u5185\u90e8\u5bc4\u5b58\u5668, \u56e0\u6b64\u5916\u90e8\u9501\u5b58\u5668\u65e0\u6cd5\u68c0\u6d4b\u5230\u6b64\u9519\u8bef, \u8fd9\u5bfc\u81f4\u7a0b\u5e8f\u65e0\u6cd5\u65e0\u7f1d\u4f7f\u7528\u989d\u5916\u7684\u5185\u5b58. \u53d6\u800c\u4ee3\u4e4b\u7684\u662f, \u5904\u7406\u5668\u5fc5\u987b\u660e\u786e\u5730\u6267\u884c\u5b58\u50a8\u4f53\u5207\u6362\u64cd\u4f5c, \u4ee5\u8bbf\u95ee\u989d\u5916\u7684\u5185\u5b58\u533a\u95f4. MBC \u8fd8\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u9650\u5236, \u56e0\u6b64\u5b83\u5e76\u975e\u662f\u4e07\u80fd\u7684. MBC \u5728\u8bb8\u591a\u89c6\u9891\u6e38\u620f\u673a\u4e2d\u90fd\u6709\u5e94\u7528. \u4f8b\u5982, Atari 2600 \u53ea\u80fd\u5bfb\u5740 4KB \u7684 ROM, \u56e0\u6b64, \u540e\u6765\u7684 2600 \u6e38\u620f\u5361\u5e26\u5305\u542b\u5176\u81ea\u5df1\u7684\u5b58\u50a8\u4f53\u5207\u6362\u786c\u4ef6, \u4ee5\u4fbf\u5141\u8bb8\u5361\u5e26\u5b58\u50a8\u66f4\u591a\u5185\u5bb9, \u4ece\u800c\u5141\u8bb8\u8fdb\u884c\u66f4\u590d\u6742\u7684\u6e38\u620f(\u590d\u6742\u7684\u6e38\u620f\u901a\u5e38\u62e5\u6709\u66f4\u591a\u7a0b\u5e8f\u4ee3\u7801, \u540c\u6837\u62e5\u6709\u66f4\u52a0\u5927\u91cf\u7684\u6e38\u620f\u6570\u636e, \u4f8b\u5982\u56fe\u5f62). Nintendo Entertainment System(NES)\u5305\u542b\u4e00\u4e2a\u6539\u8fdb\u7684 6502 \u6e38\u620f\u5361\u5e26, \u5176\u5361\u5e26\u53ef\u901a\u8fc7\u79f0\u4e3a\u591a\u5b58\u50a8\u63a7\u5236\u5668\u7684\u6280\u672f\u624b\u6bb5\u6765\u5207\u6362\u6765\u5bfb\u5740, \u4ece\u67d0\u65b9\u9762\u6765\u8bf4\u662f Game Boy \u7684 MBC \u7cfb\u7edf\u7684\u524d\u8eab. \u9664\u4e86 Game Boy \u4e4b\u5916, MBC \u7cfb\u7edf\u4ecd\u5728\u4ee5\u540e\u7684\u6e38\u620f\u7cfb\u7edf\u4e0a\u88ab\u5e7f\u6cdb\u4f7f\u7528, \u6bd4\u5982\u51e0\u4e2a\u5927\u5c0f\u8d85\u8fc7\u4e86 4MB \u7684 Sega Mega Drive \u76d2\u5f0f\u78c1\u5e26, \u4f7f\u7528\u7684\u4e5f\u662f\u6b64\u6280\u672f. \u901a\u8fc7\u5408\u7406\u7684\u4f7f\u7528 MBC, \u5728\u5df2\u77e5\u7684\u5df2\u751f\u4ea7\u7684\u6e38\u620f\u5361\u5e26\u4e2d, \u5bb9\u91cf\u6700\u5927\u7684\u5361\u5e26\u662f\u4e00\u6b3e\u53eb\u505a Densha de Go! \u7684\u6e38\u620f, \u5361\u5e26\u7c7b\u578b\u662f MBC5, \u652f\u6301 8M \u5b58\u50a8, \u662f 32k \u7684 256 \u500d. \u8fd9\u6b3e\u6e38\u620f\u662f\u4e00\u6b3e\u7535\u8f66\u6a21\u62df\u5668, \u5982\u56fe\u6240\u793a, \u73a9\u8d77\u6765\u4f3c\u4e4e\u5f88\u5e26\u611f. \u867d\u7136\u8bb8\u591a\u6e38\u620f\u5361\u5e26\u90fd\u4f7f\u7528\u4e86 MBC \u6280\u672f, \u4f46\u662f\u4e0d\u540c\u79cd\u7c7b\u7684\u5361\u5e26\u5176 MBC \u89c4\u683c\u90fd\u6709\u4e00\u4e9b\u7ec6\u5fae\u7684\u5dee\u522b. \u5e38\u89c1\u7684 Game Boy \u5361\u5e26\u7c7b\u578b\u6709 ROM Only, MBC1, MBC2, MBC3 \u548c MBC5 5 \u4e2a\u79cd\u7c7b, \u540e\u7eed\u7684\u5c0f\u8282\u5c06\u4f1a\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd.","title":"GB-\u6e38\u620f\u5361\u5e26-Memory Bank Controller"},{"location":"content/gameboy/cartridge/memory_bank_controller/#memory-bank-controller","text":"\u81ea\u4ece\u8ba1\u7b97\u673a\u88ab\u53d1\u660e\u4ee5\u6765, \u8bb8\u591a\u8ba1\u7b97\u673a\u7cfb\u7edf\u90fd\u4e0d\u5f97\u4e0d\u9762\u5bf9\u4e00\u4e2a\u95ee\u9898: \u8ba1\u7b97\u673a\u4e0a\u6240\u8fd0\u884c\u7684\u7a0b\u5e8f\u9700\u8981\u8d8a\u6765\u8d8a\u591a\u7684\u5185\u5b58, \u4ee5\u81f3\u4e8e\u8d85\u51fa\u4e86\u5f53\u65f6\u7684\u786c\u4ef6\u80fd\u529b\u8303\u56f4. \u4f20\u7edf\u4e0a, \u6709\u4e24\u79cd\u65b9\u5f0f\u53ef\u4ee5\u6765\u5904\u7406\u8fd9\u4e2a\u95ee\u9898: \u589e\u52a0 CPU \u53ef\u5bfb\u5740\u7684\u5730\u5740\u7a7a\u95f4. \u8bbe\u8ba1\u4e00\u4e2a\u65b0\u7684\u62e5\u6709\u66f4\u591a\u5730\u5740\u603b\u7ebf\u7684 CPU, \u4f7f\u5176\u80fd\u591f\u5bfb\u5740\u66f4\u5927\u7684\u5185\u5b58\u91cf. \u8fd9\u662f\u4f18\u9009\u7684\u89e3\u51b3\u65b9\u6848, \u4f46\u662f\u9700\u8981\u65f6\u95f4\u548c\u91d1\u94b1\u6765\u89e3\u51b3\u95ee\u9898. \u6bd4\u5982\u8fd1\u51e0\u5e74\u5df2\u7ecf\u4e0d\u592a\u5e38\u89c1\u7684 32 \u4f4d\u7cfb\u7edf, \u56e0\u4e3a\u5176\u4f7f\u7528\u7684 32 \u4f4d CPU \u53ea\u80fd\u5bfb\u5740\u6700\u591a 4G \u5185\u5b58, \u65e0\u8bba\u662f\u64ad\u653e\u8d85\u6e05\u89c6\u9891\u8fd8\u662f\u73a9\u5927\u578b\u6e38\u620f\u90fd\u663e\u5f97\u6349\u895f\u89c1\u8098. \u865a\u62df\u5185\u5b58\u65b9\u6848. \u8fd9\u53ef\u4ee5\u662f\u6620\u5c04\u5230\u8f6f\u76d8\u4e0a\u7684 RAM, \u5f53 CPU \u9700\u8981\u65f6\u4ea4\u6362\u8f6f\u76d8\u4e0e\u5185\u5b58\u4e2d\u7684\u6570\u636e; \u6216\u662f\u5df2\u7ecf\u63d0\u524d\u9884\u5199\u7684 ROM \u5206\u5757\u6570\u636e. \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b, \u7cfb\u7edf\u786c\u4ef6\u53ea\u9700\u8981\u4e00\u70b9\u6269\u5c55, \u6210\u672c\u4f4e\u5ec9, \u4f46\u7cfb\u7edf\u4e2d\u7684\u4efb\u4f55\u8f6f\u4ef6\u5fc5\u987b\u77e5\u9053\u8be5\u865a\u62df\u5185\u5b58\u4f53\u7cfb\u7684\u5b58\u5728, \u624d\u80fd\u4f7f\u7528\u5b83. \u7531\u4e8e Game Boy \u662f\u4e00\u4e2a\u5b9a\u4ef7\u4eb2\u6c11\u7684\u638c\u4e0a\u6e38\u620f\u673a, \u4f7f\u7528\u6602\u8d35\u7684 CPU \u5c06\u6781\u5927\u63d0\u5347\u6210\u672c, \u56e0\u6b64\u4efb\u5929\u5802\u901a\u8fc7\u865a\u62df\u5185\u5b58\u7684\u65b9\u5f0f\u6765\u652f\u6301\u66f4\u5927\u7684\u5b58\u50a8\u7a7a\u95f4. Game Boy \u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143\u5206\u914d\u7ed9 Cartridge \u7684\u5185\u5b58\u8303\u56f4\u662f 0x0000...0x7fff \u548c 0xa000...0xbfff \u4e24\u4e2a\u533a\u95f4, \u603b\u8ba1 0x8000 + 0x2000 = 32k + 8k = 40k \u7684\u5b58\u50a8\u7a7a\u95f4, \u5176\u4e2d\u540e 8k \u88ab\u5206\u914d\u7ed9\u5916\u90e8\u5185\u5b58. \u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u7ed3\u8bba\u662f, \u5982\u679c\u76f4\u63a5\u5c06\u5361\u5e26\u7684\u7269\u7406\u5b58\u50a8\u6620\u5c04\u5230\u5185\u5b58\u7ba1\u7406\u5355\u5143\u7684\u5730\u5740, \u5361\u5e26\u7684\u6700\u5927\u5bb9\u91cf\u4e0d\u5f97\u8d85\u8fc7 32k. \u4e0d\u8fc7\u5e78\u8fd0\u7684\u662f, \u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7\u5185\u5d4c\u5728 Cartridge \u4e2d\u7684 Memory Bank Controller(\u5185\u5b58\u5b58\u50a8\u4f53\u63a7\u5236\u5668, \u7b80\u79f0 MBC)\u6280\u672f\u6765\u6269\u5c55\u6e38\u620f\u7684\u4f53\u79ef. CPU \u901a\u5e38\u53ea\u80fd\u4e0e\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4\u76f4\u63a5\u901a\u4fe1(\u9664 I/O \u53e3\u5916), \u56e0\u6b64\u5982\u679c\u4e00\u4e2a\u5916\u90e8\u8bbe\u5907\u671f\u671b\u4e0e CPU \u901a\u4fe1\u7684\u8bdd, \u53ef\u4ee5\u901a\u8fc7\u5c06\u81ea\u5df1\u7684\u5b58\u50a8\u7a7a\u95f4\u6620\u5c04\u5230\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4\u4e0a\u6765\u5b8c\u6210. MBC \u6280\u672f\u6b63\u662f\u4f4d\u4e8e\u8fd9\u5c42\"\u6620\u5c04\"\u8fc7\u7a0b\u4e2d.","title":"Memory Bank Controller"},{"location":"content/gameboy/cartridge/memory_bank_controller/#_1","text":"Memory Bank Controller \u662f\u8ba1\u7b97\u673a\u8bbe\u8ba1\u4e2d\u7684\u4e00\u79cd\u5e38\u89c1\u6280\u672f, \u7528\u4e8e\u5c06\u53ef\u7528\u5b58\u50a8\u5bb9\u91cf\u589e\u52a0\u5230\u8d85\u51fa\u5904\u7406\u5668\u53ef\u76f4\u63a5\u5bfb\u5740\u7684\u8303\u56f4. \u5b83\u6700\u521d\u8d77\u6e90\u4e8e\u5c0f\u578b\u5d4c\u5165\u5f0f\u7cfb\u7edf, \u4e4b\u540e\u5728 8 \u4f4d\u673a\u4e0a\u53d1\u626c\u5149\u5927, \u5230\u73b0\u4ee3, \u4f9d\u7136\u53ef\u4ee5\u5728\u8bb8\u591a\u5fae\u673a\u7cfb\u7edf\u4e2d\u770b\u5230\u5b83\u7684\u8eab\u5f71(\u4e0d\u8fc7\u5728\u73b0\u4ee3\u5b83\u901a\u5e38\u88ab\u79f0\u4e3a Bank Switing, \u5b58\u50a8\u4f53\u5207\u6362, \u5b9e\u9645\u4e0a\u6307\u4ee3\u7684\u662f\u540c\u4e00\u4ef6\u4e8b\u7269). MBC \u88ab\u8ba4\u4e3a\u662f\u901a\u8fc7\u4e00\u4e9b\u5916\u90e8\u5bc4\u5b58\u5668\u6269\u5c55\u5904\u7406\u5668\u5730\u5740\u603b\u7ebf\u7684\u4e00\u79cd\u65b9\u5f0f, \u5b83\u7684\u539f\u7406\u5f02\u5e38\u7b80\u5355, \u4f8b\u5982, \u5177\u6709 16 \u4f4d\u5916\u90e8\u5730\u5740\u603b\u7ebf\u7684\u5904\u7406\u5668\u53ea\u80fd\u5bfb\u5740 2^16 = 65536 \u4e2a\u5b58\u50a8\u5668\u4f4d\u7f6e. \u5982\u679c\u5c06\u5916\u90e8\u9501\u5b58\u5668\u6dfb\u52a0\u5230\u7cfb\u7edf, \u5219\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u63a7\u5236\u4e24\u7ec4\u5b58\u50a8\u8bbe\u5907\u4e2d\u7684\u54ea\u4e00\u7ec4, \u6bcf\u4e2a\u5b58\u50a8\u8bbe\u5907\u5177\u6709 65536 \u4e2a\u5730\u5740. \u5904\u7406\u5668\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6216\u6e05\u9664\u9501\u5b58\u5668\u4f4d\u6765\u66f4\u6539\u5f53\u524d\u4f7f\u7528\u7684\u8bbe\u7f6e, \u5982\u56fe\u6240\u793a, \u5f53 CPU \u8bd5\u56fe\u8bfb\u53d6\u7cfb\u7edf\u5730\u5740\u4e3a 0x00001 \u7684\u503c\u65f6, \u6839\u636e\u9501\u5b58\u5668\u6807\u5fd7\u4f4d\u7684\u8bbe\u7f6e\u4e0e\u5426, \u5c06\u4ece\u7269\u7406\u5730\u5740\u4e2d\u5b9e\u9645\u8bfb\u53d6\u5230\u503c A \u6216\u8005\u503c C. \u7531\u4e8e\u5916\u90e8\u5b58\u50a8\u4f53\u9009\u62e9\u9501\u5b58\u5668(\u6216\u5bc4\u5b58\u5668)\u672a\u76f4\u63a5\u4e0e\u5904\u7406\u5668\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u8fde\u63a5, \u56e0\u6b64\u5f53\u7a0b\u5e8f\u8ba1\u6570\u5668\u6ea2\u51fa\u65f6, \u5b83\u4e0d\u4f1a\u81ea\u52a8\u66f4\u6539\u72b6\u6001. \u7531\u4e8e\u7a0b\u5e8f\u8ba1\u6570\u5668\u662f\u5904\u7406\u5668\u7684\u5185\u90e8\u5bc4\u5b58\u5668, \u56e0\u6b64\u5916\u90e8\u9501\u5b58\u5668\u65e0\u6cd5\u68c0\u6d4b\u5230\u6b64\u9519\u8bef, \u8fd9\u5bfc\u81f4\u7a0b\u5e8f\u65e0\u6cd5\u65e0\u7f1d\u4f7f\u7528\u989d\u5916\u7684\u5185\u5b58. \u53d6\u800c\u4ee3\u4e4b\u7684\u662f, \u5904\u7406\u5668\u5fc5\u987b\u660e\u786e\u5730\u6267\u884c\u5b58\u50a8\u4f53\u5207\u6362\u64cd\u4f5c, \u4ee5\u8bbf\u95ee\u989d\u5916\u7684\u5185\u5b58\u533a\u95f4. MBC \u8fd8\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u9650\u5236, \u56e0\u6b64\u5b83\u5e76\u975e\u662f\u4e07\u80fd\u7684. MBC \u5728\u8bb8\u591a\u89c6\u9891\u6e38\u620f\u673a\u4e2d\u90fd\u6709\u5e94\u7528. \u4f8b\u5982, Atari 2600 \u53ea\u80fd\u5bfb\u5740 4KB \u7684 ROM, \u56e0\u6b64, \u540e\u6765\u7684 2600 \u6e38\u620f\u5361\u5e26\u5305\u542b\u5176\u81ea\u5df1\u7684\u5b58\u50a8\u4f53\u5207\u6362\u786c\u4ef6, \u4ee5\u4fbf\u5141\u8bb8\u5361\u5e26\u5b58\u50a8\u66f4\u591a\u5185\u5bb9, \u4ece\u800c\u5141\u8bb8\u8fdb\u884c\u66f4\u590d\u6742\u7684\u6e38\u620f(\u590d\u6742\u7684\u6e38\u620f\u901a\u5e38\u62e5\u6709\u66f4\u591a\u7a0b\u5e8f\u4ee3\u7801, \u540c\u6837\u62e5\u6709\u66f4\u52a0\u5927\u91cf\u7684\u6e38\u620f\u6570\u636e, \u4f8b\u5982\u56fe\u5f62). Nintendo Entertainment System(NES)\u5305\u542b\u4e00\u4e2a\u6539\u8fdb\u7684 6502 \u6e38\u620f\u5361\u5e26, \u5176\u5361\u5e26\u53ef\u901a\u8fc7\u79f0\u4e3a\u591a\u5b58\u50a8\u63a7\u5236\u5668\u7684\u6280\u672f\u624b\u6bb5\u6765\u5207\u6362\u6765\u5bfb\u5740, \u4ece\u67d0\u65b9\u9762\u6765\u8bf4\u662f Game Boy \u7684 MBC \u7cfb\u7edf\u7684\u524d\u8eab. \u9664\u4e86 Game Boy \u4e4b\u5916, MBC \u7cfb\u7edf\u4ecd\u5728\u4ee5\u540e\u7684\u6e38\u620f\u7cfb\u7edf\u4e0a\u88ab\u5e7f\u6cdb\u4f7f\u7528, \u6bd4\u5982\u51e0\u4e2a\u5927\u5c0f\u8d85\u8fc7\u4e86 4MB \u7684 Sega Mega Drive \u76d2\u5f0f\u78c1\u5e26, \u4f7f\u7528\u7684\u4e5f\u662f\u6b64\u6280\u672f. \u901a\u8fc7\u5408\u7406\u7684\u4f7f\u7528 MBC, \u5728\u5df2\u77e5\u7684\u5df2\u751f\u4ea7\u7684\u6e38\u620f\u5361\u5e26\u4e2d, \u5bb9\u91cf\u6700\u5927\u7684\u5361\u5e26\u662f\u4e00\u6b3e\u53eb\u505a Densha de Go! \u7684\u6e38\u620f, \u5361\u5e26\u7c7b\u578b\u662f MBC5, \u652f\u6301 8M \u5b58\u50a8, \u662f 32k \u7684 256 \u500d. \u8fd9\u6b3e\u6e38\u620f\u662f\u4e00\u6b3e\u7535\u8f66\u6a21\u62df\u5668, \u5982\u56fe\u6240\u793a, \u73a9\u8d77\u6765\u4f3c\u4e4e\u5f88\u5e26\u611f. \u867d\u7136\u8bb8\u591a\u6e38\u620f\u5361\u5e26\u90fd\u4f7f\u7528\u4e86 MBC \u6280\u672f, \u4f46\u662f\u4e0d\u540c\u79cd\u7c7b\u7684\u5361\u5e26\u5176 MBC \u89c4\u683c\u90fd\u6709\u4e00\u4e9b\u7ec6\u5fae\u7684\u5dee\u522b. \u5e38\u89c1\u7684 Game Boy \u5361\u5e26\u7c7b\u578b\u6709 ROM Only, MBC1, MBC2, MBC3 \u548c MBC5 5 \u4e2a\u79cd\u7c7b, \u540e\u7eed\u7684\u5c0f\u8282\u5c06\u4f1a\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd.","title":"\u539f\u7406\u8be6\u89e3"},{"location":"content/gameboy/cartridge/others/","text":"Cartridge \u6a21\u5757\u5b8c\u6574\u4ee3\u7801 \u5728\u8fd9\u4e00\u8282, \u4e3b\u8981\u4e3a Cartridge \u6a21\u5757\u505a\u4e00\u4e2a\u6536\u5c3e\u5de5\u4f5c. \u4ece\u5de5\u7a0b\u89d2\u5ea6\u6765\u8bf4, Game Boy \u4eff\u771f\u5668\u5e76\u4e0d\u5173\u5fc3\u5177\u4f53\u7684 MBC \u7c7b\u578b, \u56e0\u6b64\u5b83\u4f1a\u671f\u671b Cartridge \u6a21\u5757\u63d0\u4f9b\u4e00\u4e2a\u5982\u4e0b\u7684\u516c\u5f00\u51fd\u6570: pub fn power_up(path: impl AsRef<Path>) -> Box<dyn Cartridge>; \u6b64\u51fd\u6570\u53ef\u4ee5\u89e3\u6790\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684 ROM \u6587\u4ef6, \u5e76\u6839\u636e Cartridge Header \u4e2d\u7684\u4fe1\u606f\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684 MBC \u5b9e\u73b0\u6765\u5305\u88c5 ROM \u6570\u636e, \u6700\u540e\u8fd4\u56de\u4e00\u4e2a Cartridge trait object. Cartridge trait \u5b9a\u4e49\u5982\u4e0b: pub trait Cartridge: Memory + Stable + Send { fn title(&self) -> String { let mut buf = String::new(); let ic = 0x0134; let oc = if self.get(0x0143) == 0x80 { 0x013e } else { 0x0143 }; for i in ic..oc { match self.get(i) { 0 => break, v => buf.push(v as char), } } buf } } \u5f53\u8bfb\u53d6\u5230 ROM \u7684\u6570\u636e\u65f6, \u6b63\u5982\u672c\u7ae0\u8282\u5f00\u5934\u6240\u8bb2\u7684, Game Boy \u4f1a\u9a8c\u8bc1\u6570\u636e\u7684\u5408\u6cd5\u6027, \u5982\u679c\u6570\u636e\u975e\u6cd5\u5219\u4e0d\u4f1a\u542f\u52a8\u6e38\u620f. \u6709\u4e24\u6b65\u9a8c\u8bc1\u8fc7\u7a0b, \u5206\u522b\u662f\u4efb\u5929\u5802\u7684 LOGO \u9a8c\u8bc1\u548c\u6807\u9898\u6821\u9a8c\u548c\u9a8c\u8bc1, \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b. const NINTENDO_LOGO: [u8; 48] = [ 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, ]; fn ensure_logo(cart: &dyn Cartridge) { for i in 0..48 { if cart.get(0x0104 + i as u16) != NINTENDO_LOGO[i as usize] { panic!(\"Nintendo logo is incorrect\") } } } fn ensure_header_checksum(cart: &dyn Cartridge) { let mut v: u8 = 0; for i in 0x0134..0x014d { v = v.wrapping_sub(cart.get(i)).wrapping_sub(1); } if cart.get(0x014d) != v { panic!(\"Cartridge's header checksum is incorrect\") } } \u540c\u65f6\u4e3a\u4e86\u7ed9 ROM \u548c RAM \u9884\u5206\u914d\u7a7a\u95f4, \u9700\u8981\u4ece Cartridge Header \u4e2d\u83b7\u53d6 ROM Size \u548c RAM Size. \u5b83\u4eec\u5728 Header \u4e2d\u5747\u53ea\u5360\u7528\u4e00\u4e2a\u5b57\u8282, \u5177\u4f53\u6620\u5c04\u5173\u7cfb\u5982\u4ee3\u7801\u5c55\u793a. // Specifies the ROM Size of the cartridge. Typically calculated as \"32KB shl N\". fn rom_size(b: u8) -> usize { let bank = 16384; match b { 0x00 => bank * 2, 0x01 => bank * 4, 0x02 => bank * 8, 0x03 => bank * 16, 0x04 => bank * 32, 0x05 => bank * 64, 0x06 => bank * 128, 0x07 => bank * 256, 0x08 => bank * 512, 0x52 => bank * 72, 0x53 => bank * 80, 0x54 => bank * 96, n => panic!(\"Unsupported rom size: 0x{:02x}\", n), } } // Specifies the size of the external RAM in the cartridge (if any). fn ram_size(b: u8) -> usize { match b { 0x00 => 0, 0x01 => 1024 * 2, 0x02 => 1024 * 8, 0x03 => 1024 * 32, 0x04 => 1024 * 128, 0x05 => 1024 * 64, n => panic!(\"Unsupported ram size: 0x{:02x}\", n), } } \u6700\u7ec8, \u5b8c\u5584 power_up \u51fd\u6570\u5982\u4e0b\u6240\u793a. pub fn power_up(path: impl AsRef<Path>) -> Box<dyn Cartridge> { let mut f = File::open(path.as_ref()).unwrap(); let mut rom = Vec::new(); f.read_to_end(&mut rom).unwrap(); if rom.len() < 0x150 { panic!(\"Missing required information area which located at 0100-014F\") } let rom_max = rom_size(rom[0x0148]); if rom.len() > rom_max { panic!(\"Rom size more than {}\", rom_max); } let cart: Box<dyn Cartridge> = match rom[0x0147] { 0x00 => Box::new(RomOnly::power_up(rom)), 0x01 => Box::new(Mbc1::power_up(rom, vec![], \"\")), 0x02 => { let ram_max = ram_size(rom[0x0149]); Box::new(Mbc1::power_up(rom, vec![0; ram_max], \"\")) } 0x03 => { let ram_max = ram_size(rom[0x0149]); let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); Box::new(Mbc1::power_up(rom, ram, sav_path)) } 0x05 => { let ram_max = 512; Box::new(Mbc2::power_up(rom, vec![0; ram_max], \"\")) } 0x06 => { let ram_max = 512; let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); Box::new(Mbc2::power_up(rom, ram, sav_path)) } 0x0f => { let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let rtc_path = path.as_ref().to_path_buf().with_extension(\"rtc\"); Box::new(Mbc3::power_up(rom, vec![], sav_path, rtc_path)) } 0x10 => { let ram_max = ram_size(rom[0x0149]); let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); let rtc_path = path.as_ref().to_path_buf().with_extension(\"rtc\"); Box::new(Mbc3::power_up(rom, ram, sav_path, rtc_path)) } 0x11 => Box::new(Mbc3::power_up(rom, vec![], \"\", \"\")), 0x12 => { let ram_max = ram_size(rom[0x0149]); Box::new(Mbc3::power_up(rom, vec![0; ram_max], \"\", \"\")) } 0x13 => { let ram_max = ram_size(rom[0x0149]); let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); Box::new(Mbc3::power_up(rom, ram, sav_path, \"\")) } 0x19 => Box::new(Mbc5::power_up(rom, vec![], \"\")), 0x1a => { let ram_max = ram_size(rom[0x0149]); Box::new(Mbc5::power_up(rom, vec![0; ram_max], \"\")) } 0x1b => { let ram_max = ram_size(rom[0x0149]); let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); Box::new(Mbc5::power_up(rom, ram, sav_path)) } 0xff => { let ram_max = ram_size(rom[0x0149]); let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); Box::new(HuC1::power_up(rom, ram, sav_path)) } n => panic!(\"Unsupported cartridge type: 0x{:02x}\", n), }; ensure_logo(cart.as_ref()); ensure_header_checksum(cart.as_ref()); cart } \u5728 Game Boy \u5e73\u53f0\u4e0a\u66fe\u8bde\u751f\u4e86\u65e0\u6570\u7684\u6e38\u620f, \u867d\u7136\u4e0d\u6562\u4fdd\u8bc1, \u4f46\u7edd\u5927\u591a\u6570\u6e38\u620f\u5361\u5e26\u7684\u4fe1\u606f\u90fd\u80fd\u5728 https://ladecadence.net/trastero/listado%20juegos%20gameboy.html \u7f51\u7ad9\u4e0a\u627e\u5230. \u8be5\u7f51\u7ad9\u4e0a\u603b\u5171\u62e5\u6709 6000 \u4f59\u4e2a Game Boy \u6e38\u620f\u5361\u5e26\u7684\u8be6\u7ec6\u4fe1\u606f, \u8fd9\u4e9b\u4fe1\u606f\u5305\u62ec: \u6e38\u620f\u540d\u79f0, ROM \u5927\u5c0f, RAM \u5927\u5c0f, MBC \u7c7b\u578b\u7b49. \u8bfb\u8005\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u6570\u636e\u5bf9\u81ea\u5df1\u7684 Cartridge \u6a21\u5757\u4ee3\u7801\u8fdb\u884c\u7b80\u5355\u6d4b\u8bd5.","title":"GB-\u6e38\u620f\u5361\u5e26-\u5b8c\u6574\u4ee3\u7801"},{"location":"content/gameboy/cartridge/others/#cartridge","text":"\u5728\u8fd9\u4e00\u8282, \u4e3b\u8981\u4e3a Cartridge \u6a21\u5757\u505a\u4e00\u4e2a\u6536\u5c3e\u5de5\u4f5c. \u4ece\u5de5\u7a0b\u89d2\u5ea6\u6765\u8bf4, Game Boy \u4eff\u771f\u5668\u5e76\u4e0d\u5173\u5fc3\u5177\u4f53\u7684 MBC \u7c7b\u578b, \u56e0\u6b64\u5b83\u4f1a\u671f\u671b Cartridge \u6a21\u5757\u63d0\u4f9b\u4e00\u4e2a\u5982\u4e0b\u7684\u516c\u5f00\u51fd\u6570: pub fn power_up(path: impl AsRef<Path>) -> Box<dyn Cartridge>; \u6b64\u51fd\u6570\u53ef\u4ee5\u89e3\u6790\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684 ROM \u6587\u4ef6, \u5e76\u6839\u636e Cartridge Header \u4e2d\u7684\u4fe1\u606f\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684 MBC \u5b9e\u73b0\u6765\u5305\u88c5 ROM \u6570\u636e, \u6700\u540e\u8fd4\u56de\u4e00\u4e2a Cartridge trait object. Cartridge trait \u5b9a\u4e49\u5982\u4e0b: pub trait Cartridge: Memory + Stable + Send { fn title(&self) -> String { let mut buf = String::new(); let ic = 0x0134; let oc = if self.get(0x0143) == 0x80 { 0x013e } else { 0x0143 }; for i in ic..oc { match self.get(i) { 0 => break, v => buf.push(v as char), } } buf } } \u5f53\u8bfb\u53d6\u5230 ROM \u7684\u6570\u636e\u65f6, \u6b63\u5982\u672c\u7ae0\u8282\u5f00\u5934\u6240\u8bb2\u7684, Game Boy \u4f1a\u9a8c\u8bc1\u6570\u636e\u7684\u5408\u6cd5\u6027, \u5982\u679c\u6570\u636e\u975e\u6cd5\u5219\u4e0d\u4f1a\u542f\u52a8\u6e38\u620f. \u6709\u4e24\u6b65\u9a8c\u8bc1\u8fc7\u7a0b, \u5206\u522b\u662f\u4efb\u5929\u5802\u7684 LOGO \u9a8c\u8bc1\u548c\u6807\u9898\u6821\u9a8c\u548c\u9a8c\u8bc1, \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b. const NINTENDO_LOGO: [u8; 48] = [ 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, ]; fn ensure_logo(cart: &dyn Cartridge) { for i in 0..48 { if cart.get(0x0104 + i as u16) != NINTENDO_LOGO[i as usize] { panic!(\"Nintendo logo is incorrect\") } } } fn ensure_header_checksum(cart: &dyn Cartridge) { let mut v: u8 = 0; for i in 0x0134..0x014d { v = v.wrapping_sub(cart.get(i)).wrapping_sub(1); } if cart.get(0x014d) != v { panic!(\"Cartridge's header checksum is incorrect\") } } \u540c\u65f6\u4e3a\u4e86\u7ed9 ROM \u548c RAM \u9884\u5206\u914d\u7a7a\u95f4, \u9700\u8981\u4ece Cartridge Header \u4e2d\u83b7\u53d6 ROM Size \u548c RAM Size. \u5b83\u4eec\u5728 Header \u4e2d\u5747\u53ea\u5360\u7528\u4e00\u4e2a\u5b57\u8282, \u5177\u4f53\u6620\u5c04\u5173\u7cfb\u5982\u4ee3\u7801\u5c55\u793a. // Specifies the ROM Size of the cartridge. Typically calculated as \"32KB shl N\". fn rom_size(b: u8) -> usize { let bank = 16384; match b { 0x00 => bank * 2, 0x01 => bank * 4, 0x02 => bank * 8, 0x03 => bank * 16, 0x04 => bank * 32, 0x05 => bank * 64, 0x06 => bank * 128, 0x07 => bank * 256, 0x08 => bank * 512, 0x52 => bank * 72, 0x53 => bank * 80, 0x54 => bank * 96, n => panic!(\"Unsupported rom size: 0x{:02x}\", n), } } // Specifies the size of the external RAM in the cartridge (if any). fn ram_size(b: u8) -> usize { match b { 0x00 => 0, 0x01 => 1024 * 2, 0x02 => 1024 * 8, 0x03 => 1024 * 32, 0x04 => 1024 * 128, 0x05 => 1024 * 64, n => panic!(\"Unsupported ram size: 0x{:02x}\", n), } } \u6700\u7ec8, \u5b8c\u5584 power_up \u51fd\u6570\u5982\u4e0b\u6240\u793a. pub fn power_up(path: impl AsRef<Path>) -> Box<dyn Cartridge> { let mut f = File::open(path.as_ref()).unwrap(); let mut rom = Vec::new(); f.read_to_end(&mut rom).unwrap(); if rom.len() < 0x150 { panic!(\"Missing required information area which located at 0100-014F\") } let rom_max = rom_size(rom[0x0148]); if rom.len() > rom_max { panic!(\"Rom size more than {}\", rom_max); } let cart: Box<dyn Cartridge> = match rom[0x0147] { 0x00 => Box::new(RomOnly::power_up(rom)), 0x01 => Box::new(Mbc1::power_up(rom, vec![], \"\")), 0x02 => { let ram_max = ram_size(rom[0x0149]); Box::new(Mbc1::power_up(rom, vec![0; ram_max], \"\")) } 0x03 => { let ram_max = ram_size(rom[0x0149]); let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); Box::new(Mbc1::power_up(rom, ram, sav_path)) } 0x05 => { let ram_max = 512; Box::new(Mbc2::power_up(rom, vec![0; ram_max], \"\")) } 0x06 => { let ram_max = 512; let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); Box::new(Mbc2::power_up(rom, ram, sav_path)) } 0x0f => { let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let rtc_path = path.as_ref().to_path_buf().with_extension(\"rtc\"); Box::new(Mbc3::power_up(rom, vec![], sav_path, rtc_path)) } 0x10 => { let ram_max = ram_size(rom[0x0149]); let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); let rtc_path = path.as_ref().to_path_buf().with_extension(\"rtc\"); Box::new(Mbc3::power_up(rom, ram, sav_path, rtc_path)) } 0x11 => Box::new(Mbc3::power_up(rom, vec![], \"\", \"\")), 0x12 => { let ram_max = ram_size(rom[0x0149]); Box::new(Mbc3::power_up(rom, vec![0; ram_max], \"\", \"\")) } 0x13 => { let ram_max = ram_size(rom[0x0149]); let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); Box::new(Mbc3::power_up(rom, ram, sav_path, \"\")) } 0x19 => Box::new(Mbc5::power_up(rom, vec![], \"\")), 0x1a => { let ram_max = ram_size(rom[0x0149]); Box::new(Mbc5::power_up(rom, vec![0; ram_max], \"\")) } 0x1b => { let ram_max = ram_size(rom[0x0149]); let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); Box::new(Mbc5::power_up(rom, ram, sav_path)) } 0xff => { let ram_max = ram_size(rom[0x0149]); let sav_path = path.as_ref().to_path_buf().with_extension(\"sav\"); let ram = ram_read(sav_path.clone(), ram_max); Box::new(HuC1::power_up(rom, ram, sav_path)) } n => panic!(\"Unsupported cartridge type: 0x{:02x}\", n), }; ensure_logo(cart.as_ref()); ensure_header_checksum(cart.as_ref()); cart } \u5728 Game Boy \u5e73\u53f0\u4e0a\u66fe\u8bde\u751f\u4e86\u65e0\u6570\u7684\u6e38\u620f, \u867d\u7136\u4e0d\u6562\u4fdd\u8bc1, \u4f46\u7edd\u5927\u591a\u6570\u6e38\u620f\u5361\u5e26\u7684\u4fe1\u606f\u90fd\u80fd\u5728 https://ladecadence.net/trastero/listado%20juegos%20gameboy.html \u7f51\u7ad9\u4e0a\u627e\u5230. \u8be5\u7f51\u7ad9\u4e0a\u603b\u5171\u62e5\u6709 6000 \u4f59\u4e2a Game Boy \u6e38\u620f\u5361\u5e26\u7684\u8be6\u7ec6\u4fe1\u606f, \u8fd9\u4e9b\u4fe1\u606f\u5305\u62ec: \u6e38\u620f\u540d\u79f0, ROM \u5927\u5c0f, RAM \u5927\u5c0f, MBC \u7c7b\u578b\u7b49. \u8bfb\u8005\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u6570\u636e\u5bf9\u81ea\u5df1\u7684 Cartridge \u6a21\u5757\u4ee3\u7801\u8fdb\u884c\u7b80\u5355\u6d4b\u8bd5.","title":"Cartridge \u6a21\u5757\u5b8c\u6574\u4ee3\u7801"},{"location":"content/gameboy/cartridge/rom_only/","text":"ROM Only \u4e0d\u8d85\u8fc7 32KB \u7684\u5c0f\u578b\u6e38\u620f\u4e0d\u9700\u8981\u4f7f\u7528 MBC \u82af\u7247: \u56e0\u4e3a\u5b83\u5df2\u7ecf\u53ef\u4ee5\u5b8c\u6574\u7684\u6620\u5c04\u5230\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4\u4e86. \u6b64\u79cd\u60c5\u51b5\u4e0b ROM \u88ab\u76f4\u63a5\u6620\u5c04\u5230 0x0000-0x7fff\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4. \u540c\u65f6\u5982\u679c\u5361\u5e26\u652f\u6301\u7684\u8bdd, \u53ef\u9009\u62e9\u5728 0xa000-0xbfff \u7cfb\u7edf\u5730\u5740\u7a7a\u95f4\u4e0a\u8fde\u63a5\u591a\u8fbe 8KB \u7684 RAM. \u8be5\u7c7b ROM \u901a\u5e38\u7528\u4f5c\u53d1\u5e03\u4f1a\u4e0a\u7684\u6280\u672f\u6f14\u793a\u548c DEMO \u4e4b\u7528, \u6bd4\u5982\u8fdb\u884c 3D \u753b\u9762\u7684\u6280\u672f\u5c55\u793a, \u58f0\u97f3\u548c\u97f3\u6548\u5c55\u793a\u7b49. \u4e0b\u56fe\u6240\u793a\u7684\u300a3D Wireframe Demo\u300b\u548c\u300a175 Sprite Parallax Starfield Demo\u300b\u7686\u66fe\u88ab\u7528\u4e8e Game Boy \u7684\u6280\u672f\u6f14\u793a, \u524d\u8005\u6f14\u793a\u4e86\u4e00\u4e2a\u4f1a\u968f\u65f6\u95f4\u6539\u53d8\u989c\u8272\u548c\u7a7a\u95f4\u4f4d\u7f6e\u7684\u4e09\u7ef4\u7684\u65b9\u5f62, \u540e\u8005\u5219\u662f\u62e5\u67094 \u4e2a\u56fe\u5c42, \u52a8\u6001\u7684\u80cc\u666f\u661f\u7a7a\u4e0e\u524d\u666f\u6f02\u6d6e\u6587\u5b57\u7684\u52a8\u753b. ROM Only \u82af\u7247\u7684\u6a21\u62df\u5b9e\u73b0\u662f\u5982\u6b64\u4e4b\u7b80\u5355\u4ee5\u81f3\u4e8e\u6b64\u65f6\u5e76\u4e0d\u9700\u8981\u82b1\u592a\u5927\u529b\u6c14. \u4f46\u4e3a\u4e86\u4fdd\u8bc1\u6269\u5c55\u6027, \u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u4f7f\u7528\u4e00\u4e9b Rust \u9ad8\u7ea7\u7528\u6cd5: \u6cdb\u578b. \u9996\u5148\u5b9a\u4e49\u4e00\u4e2a Memory \u6cdb\u578b, \u5b83\u62e5\u6709\u975e\u5e38\u7b80\u5355\u7684 get \u4e0e set \u65b9\u6cd5, \u8868\u793a\u4ece\u4e00\u4e2a\u5b58\u50a8(ROM \u6216 RAM)\u4e2d\u8bfb\u53d6\u4e00 Byte \u6570\u636e, \u6216\u5199\u5165\u4e00 Byte \u6570\u636e\u5230\u5b58\u50a8. pub trait Memory { fn get(&self, a: u16) -> u8; fn set(&mut self, a: u16, v: u8); } \u4e4b\u540e\u5f00\u59cb\u5b8c\u5584 ROM Only \u7684\u4ee3\u7801. \u7531\u4e8eROM Only \u5361\u5e26\u662f\u53ea\u8bfb\u7684, \u56e0\u6b64, \u53ef\u4ee5\u5ffd\u7565 Memory \u6cdb\u578b\u7684 set \u65b9\u6cd5. pub struct RomOnly { rom: Vec<u8>, } impl RomOnly { pub fn power_up(rom: Vec<u8>) -> Self { RomOnly { rom } } } impl Memory for RomOnly { fn get(&self, a: u16) -> u8 { self.rom[a as usize] } fn set(&mut self, _: u16, _: u8) {} } RomOnly \u7684 rom \u5b57\u6bb5\u5b58\u50a8 ROM \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e, \u540c\u65f6\u8be5\u7ed3\u6784\u4f53\u4f7f\u7528\u4e86\u4e00\u4e2a\u540d\u53eb \"power_up\" \u7684\u51fd\u6570(\u800c\u4e0d\u662f \"new\")\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u521d\u59cb\u5316\u65b9\u6cd5. \u4e4b\u6240\u4ee5\u5982\u6b64\u662f\u5e0c\u671b\u540d\u5b57 power_up(\u901a\u7535) \u80fd\u786e\u5207\u5730\u8ba9\u8bfb\u8005\u4ea7\u751f\"\u6211\u4eec\u5728\u5b9e\u73b0\u786c\u4ef6\u4eff\u771f\u5668\"\u7684\u611f\u89c9. \u4ee5\u540e\u7684\u4ee3\u7801\u4e5f\u5c06\u9075\u4ece\u8be5\u8bbe\u8ba1\u7406\u5ff5, \u5373\u4ee3\u7801\u5411\u786c\u4ef6\u9760\u62e2. \u521d\u59cb\u5316 RomOnly \u7ed3\u6784\u4f53\u7684\u65b9\u5f0f\u4e5f\u975e\u5e38\u7b80\u5355: \u4ece\u672c\u5730\u78c1\u76d8\u8bfb\u53d6 ROM \u6587\u4ef6\u7684\u5168\u90e8\u6570\u636e, \u5e76\u4f20\u5165 power_up \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5373\u53ef. fn main() -> Result<(), Box<dyn std::error::Error>> { let cart = RomOnly::power_up(std::fs::read(\"3D.gb\")?); println!(\"{:?}\", cart.get(0)); Ok(()) } \u5982\u6b64, Rom Only \u7c7b\u578b\u7684\u5361\u5e26\u7684\u4eff\u771f\u5b9e\u73b0\u4fbf\u5b8c\u6210\u4e86.","title":"GB-\u6e38\u620f\u5361\u5e26-ROM only"},{"location":"content/gameboy/cartridge/rom_only/#rom-only","text":"\u4e0d\u8d85\u8fc7 32KB \u7684\u5c0f\u578b\u6e38\u620f\u4e0d\u9700\u8981\u4f7f\u7528 MBC \u82af\u7247: \u56e0\u4e3a\u5b83\u5df2\u7ecf\u53ef\u4ee5\u5b8c\u6574\u7684\u6620\u5c04\u5230\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4\u4e86. \u6b64\u79cd\u60c5\u51b5\u4e0b ROM \u88ab\u76f4\u63a5\u6620\u5c04\u5230 0x0000-0x7fff\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4. \u540c\u65f6\u5982\u679c\u5361\u5e26\u652f\u6301\u7684\u8bdd, \u53ef\u9009\u62e9\u5728 0xa000-0xbfff \u7cfb\u7edf\u5730\u5740\u7a7a\u95f4\u4e0a\u8fde\u63a5\u591a\u8fbe 8KB \u7684 RAM. \u8be5\u7c7b ROM \u901a\u5e38\u7528\u4f5c\u53d1\u5e03\u4f1a\u4e0a\u7684\u6280\u672f\u6f14\u793a\u548c DEMO \u4e4b\u7528, \u6bd4\u5982\u8fdb\u884c 3D \u753b\u9762\u7684\u6280\u672f\u5c55\u793a, \u58f0\u97f3\u548c\u97f3\u6548\u5c55\u793a\u7b49. \u4e0b\u56fe\u6240\u793a\u7684\u300a3D Wireframe Demo\u300b\u548c\u300a175 Sprite Parallax Starfield Demo\u300b\u7686\u66fe\u88ab\u7528\u4e8e Game Boy \u7684\u6280\u672f\u6f14\u793a, \u524d\u8005\u6f14\u793a\u4e86\u4e00\u4e2a\u4f1a\u968f\u65f6\u95f4\u6539\u53d8\u989c\u8272\u548c\u7a7a\u95f4\u4f4d\u7f6e\u7684\u4e09\u7ef4\u7684\u65b9\u5f62, \u540e\u8005\u5219\u662f\u62e5\u67094 \u4e2a\u56fe\u5c42, \u52a8\u6001\u7684\u80cc\u666f\u661f\u7a7a\u4e0e\u524d\u666f\u6f02\u6d6e\u6587\u5b57\u7684\u52a8\u753b. ROM Only \u82af\u7247\u7684\u6a21\u62df\u5b9e\u73b0\u662f\u5982\u6b64\u4e4b\u7b80\u5355\u4ee5\u81f3\u4e8e\u6b64\u65f6\u5e76\u4e0d\u9700\u8981\u82b1\u592a\u5927\u529b\u6c14. \u4f46\u4e3a\u4e86\u4fdd\u8bc1\u6269\u5c55\u6027, \u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u4f7f\u7528\u4e00\u4e9b Rust \u9ad8\u7ea7\u7528\u6cd5: \u6cdb\u578b. \u9996\u5148\u5b9a\u4e49\u4e00\u4e2a Memory \u6cdb\u578b, \u5b83\u62e5\u6709\u975e\u5e38\u7b80\u5355\u7684 get \u4e0e set \u65b9\u6cd5, \u8868\u793a\u4ece\u4e00\u4e2a\u5b58\u50a8(ROM \u6216 RAM)\u4e2d\u8bfb\u53d6\u4e00 Byte \u6570\u636e, \u6216\u5199\u5165\u4e00 Byte \u6570\u636e\u5230\u5b58\u50a8. pub trait Memory { fn get(&self, a: u16) -> u8; fn set(&mut self, a: u16, v: u8); } \u4e4b\u540e\u5f00\u59cb\u5b8c\u5584 ROM Only \u7684\u4ee3\u7801. \u7531\u4e8eROM Only \u5361\u5e26\u662f\u53ea\u8bfb\u7684, \u56e0\u6b64, \u53ef\u4ee5\u5ffd\u7565 Memory \u6cdb\u578b\u7684 set \u65b9\u6cd5. pub struct RomOnly { rom: Vec<u8>, } impl RomOnly { pub fn power_up(rom: Vec<u8>) -> Self { RomOnly { rom } } } impl Memory for RomOnly { fn get(&self, a: u16) -> u8 { self.rom[a as usize] } fn set(&mut self, _: u16, _: u8) {} } RomOnly \u7684 rom \u5b57\u6bb5\u5b58\u50a8 ROM \u6587\u4ef6\u7684\u539f\u59cb\u6570\u636e, \u540c\u65f6\u8be5\u7ed3\u6784\u4f53\u4f7f\u7528\u4e86\u4e00\u4e2a\u540d\u53eb \"power_up\" \u7684\u51fd\u6570(\u800c\u4e0d\u662f \"new\")\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u521d\u59cb\u5316\u65b9\u6cd5. \u4e4b\u6240\u4ee5\u5982\u6b64\u662f\u5e0c\u671b\u540d\u5b57 power_up(\u901a\u7535) \u80fd\u786e\u5207\u5730\u8ba9\u8bfb\u8005\u4ea7\u751f\"\u6211\u4eec\u5728\u5b9e\u73b0\u786c\u4ef6\u4eff\u771f\u5668\"\u7684\u611f\u89c9. \u4ee5\u540e\u7684\u4ee3\u7801\u4e5f\u5c06\u9075\u4ece\u8be5\u8bbe\u8ba1\u7406\u5ff5, \u5373\u4ee3\u7801\u5411\u786c\u4ef6\u9760\u62e2. \u521d\u59cb\u5316 RomOnly \u7ed3\u6784\u4f53\u7684\u65b9\u5f0f\u4e5f\u975e\u5e38\u7b80\u5355: \u4ece\u672c\u5730\u78c1\u76d8\u8bfb\u53d6 ROM \u6587\u4ef6\u7684\u5168\u90e8\u6570\u636e, \u5e76\u4f20\u5165 power_up \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5373\u53ef. fn main() -> Result<(), Box<dyn std::error::Error>> { let cart = RomOnly::power_up(std::fs::read(\"3D.gb\")?); println!(\"{:?}\", cart.get(0)); Ok(()) } \u5982\u6b64, Rom Only \u7c7b\u578b\u7684\u5361\u5e26\u7684\u4eff\u771f\u5b9e\u73b0\u4fbf\u5b8c\u6210\u4e86.","title":"ROM Only"},{"location":"content/gameboy/cpu/alu/","text":"\u7b97\u672f\u903b\u8f91\u5355\u5143 ALU(Arithmetic Logic Unit, \u7b97\u672f\u903b\u8f91\u5355\u5143)\u662f CPU \u5bf9\u6574\u6570\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u548c\u4f4d\u8fd0\u7b97\u7684\u7ec4\u5408\u6570\u5b57\u7535\u8def, \u5176\u7531\u4e00\u7cfb\u5217\u7684\u95e8\u7535\u8def\u6784\u6210. \u5927\u90e8\u5206ALU\u90fd\u53ef\u4ee5\u5b8c\u6210\u4ee5\u4e0b\u8fd0\u7b97: \u6574\u6570\u7b97\u672f\u8fd0\u7b97(\u52a0, \u51cf, \u6709\u65f6\u8fd8\u5305\u62ec\u4e58\u548c\u9664, \u4e0d\u8fc7\u6210\u672c\u8f83\u9ad8) \u4f4d\u903b\u8f91\u8fd0\u7b97(\u4e0e, \u6216, \u975e, \u5f02\u6216) \u79fb\u4f4d\u8fd0\u7b97(\u5c06\u4e00\u4e2a\u5b57\u5411\u5de6\u6216\u5411\u53f3\u79fb\u4f4d\u6216\u6d6e\u52a8\u7279\u5b9a\u4f4d, \u800c\u65e0\u7b26\u53f7\u5ef6\u4f38) \u53ef\u4ee5\u53d1\u73b0 ALU \u5e76\u4e0d\u5904\u7406\u6d6e\u70b9\u6570, \u662f\u56e0\u4e3a\u6d6e\u70b9\u6570\u8fd0\u7b97\u4e00\u822c\u4ea4\u7531 FPU(Floating Point Unit, \u6d6e\u70b9\u8fd0\u7b97\u5355\u5143)\u5b8c\u6210. \u5728 CPU \u53d1\u5c55\u7684\u65e9\u671f, FPU \u66fe\u662f\u72ec\u7acb CPU \u5b58\u5728\u7684\u4e00\u4e2a\"\u6269\u5c55\"\u786c\u4ef6, \u6709\u70b9\u7c7b\u4f3c\u4eca\u5929\u7684 GPU \u4e0e CPU \u7684\u5173\u7cfb, \u4e0d\u8fc7\u968f\u7740\u79d1\u6280\u7684\u53d1\u5c55\u73b0\u4eca\u8bb8\u591a CPU \u90fd\u5185\u7f6e FPU \u4e86. \u989d\u5916\u8981\u63d0\u9192\u7684\u4e00\u4ef6\u4e8b\u662f ALU \u4e0e FPU \u5e76\u4e0d\u662f\u5bf9\u7acb\u7684, \u56e0\u4e3a FPU \u7535\u8def\u901a\u5e38\u4e5f\u6709\u5f88\u5927\u4e00\u90e8\u5206\u7531 ALU \u7535\u8def\u6784\u6210. ALU \u627f\u62c5\u4e86 CPU \u6700\u6838\u5fc3\u7684\u8ba1\u7b97\u80fd\u529b, \u5b83\u662f\u8ba1\u7b97\u673a\u4e4b\u6240\u4ee5\u79f0\u4e3a\"\u8ba1\u7b97\"\u673a\u7684\u5173\u952e. \u751a\u81f3\u4ece\u67d0\u4e00\u65b9\u9762\u6765\u8bf4, \u5982\u679c\u4e86\u89e3\u4e86 ALU, \u4e5f\u5c31\u4e86\u89e3\u4e86\u4ec0\u4e48\u662f\u8ba1\u7b97\u673a. \u5386\u53f2\u4e0a\u7b2c\u4e00\u5f20 ALU \u82af\u7247\u662f 74181, \u5982\u4e0b\u56fe\u6240\u793a, \u5176\u4e8e\u4e0a\u4e16\u7eaa\u4e03\u5341\u5e74\u4ee3\u53d1\u5e03. \u5b83\u662f\u8ba1\u7b97\u673a\u53f2\u4e0a\u7684\u4e00\u4e2a\u91cc\u7a0b\u7891, \u56e0\u4e3a\u5728\u5b83\u4e4b\u524d, \u4e3a\u4e86\u8ba9\u8ba1\u7b97\u673a\u6267\u884c\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f, \u901a\u5e38\u9700\u8981\u4f7f\u7528\u8005\u624b\u52a8\u8c03\u6574\u8ba1\u7b97\u673a\u7684\u903b\u8f91\u7535\u8def, \u8fd9\u8ba9\u8ba1\u7b97\u673a\u663e\u5f97\u4e0d\u90a3\u4e48\u901a\u7528, \u800c 74181 \u901a\u8fc7\u7f16\u7a0b\u7684\u65b9\u5f0f\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u7269\u7406\u7535\u8def\u7684\u524d\u63d0\u4e0b\u8ba9\u8ba1\u7b97\u673a\u53bb\u6267\u884c\u4e0d\u540c\u7684\u7a0b\u5e8f. \u4e0b\u56fe\u5c55\u793a\u4e86 74181 \u82af\u7247\u652f\u6301\u7684\u7b97\u672f\u4e0e\u903b\u8f91\u8fd0\u7b97, \u4ee5\u73b0\u4ee3\u7684\u773c\u89c2\u6765\u770b\u5176\u5341\u5206\u7b80\u964b, \u6bd4\u5982\u6ca1\u6709\u4f4d\u8fd0\u7b97\u529f\u80fd. \u540e\u7eed\u7684\u5c0f\u8282\u5c06\u8bd5\u56fe\u4f7f\u7528\u6700\u7b80\u5355\u7684\u95e8\u7535\u8def\u7ec4\u5408\u6765\u8bbe\u8ba1\u4e00\u4e2a\u8fdb\u884c 8 \u4f4d\u6574\u6570\u52a0\u6cd5\u8fd0\u7b97\u7684 ALU, \u8ba9\u8bfb\u8005\u53ef\u4ee5\u5bf9 ALU \u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u4e2a\u521d\u6b65\u5370\u8c61. \u6b63\u5982 ALU \u7684\u4e2d\u6587\u540d\u79f0\"\u7b97\u672f\u903b\u8f91\u5355\u5143\"\u63cf\u8ff0\u7684\u90a3\u6837, ALU \u786e\u5b9e\u7531\u4e24\u90e8\u5206\u6784\u6210: \u7b97\u672f\u5355\u5143(AU)\u4e0e\u903b\u8f91\u5355\u5143(LU). \u95e8\u7535\u8def \u4e3a\u4e86\u5b9e\u73b0\u548c\u5b8c\u6210\u4e00\u4e2a ALU, \u6211\u4eec\u5c06\u4ece\u6700\u57fa\u7840\u7684\u903b\u8f91\u7535\u8def\u95e8\u7535\u8def\u5f00\u59cb. \u7528\u4ee5\u5b9e\u73b0\u57fa\u672c\u903b\u8f91\u8fd0\u7b97\u548c\u590d\u5408\u903b\u8f91\u8fd0\u7b97\u7684\u5355\u5143\u7535\u8def\u79f0\u4e3a\u95e8\u7535\u8def. \u7535\u8def\u4e2d\u5b58\u5728\u4e09\u79cd\u57fa\u672c\u7684\u903b\u8f91\u5173\u7cfb: \u4e0e\u903b\u8f91, \u6216\u903b\u8f91, \u975e\u903b\u8f91. \u4e0e\u6b64\u76f8\u5bf9\u5e94, \u57fa\u672c\u7684\u95e8\u7535\u8def\u6709\u4e0e\u95e8, \u6216\u95e8, \u975e\u95e8(\u53cd\u76f8\u5668)\u548c\u5f02\u6216\u95e8\u7b49. \u5728\u7535\u8def\u56fe(Circuit Diagram)\u4e2d, \u5b83\u4eec\u53ef\u4ee5\u5206\u522b\u4f7f\u7528\u4e0b\u56fe\u6240\u793a\u7684 ANSI/IEEE Std 91-1984 \u903b\u8f91\u7b26\u53f7\u8868\u793a. \u4e0e\u95e8 \u4e0e\u95e8(AND)\u662f\u6570\u5b57\u903b\u8f91\u7535\u8def\u4e2d\u5b9e\u73b0\u903b\u8f91\u4e0e\u7684\u95e8\u7535\u8def, \u5176\u771f\u503c\u8868\u5982\u4e0b\u6240\u793a. \u771f\u503c\u8868\u662f\u4e00\u79cd\u4f7f\u7528\u4e8e\u903b\u8f91\u4e2d(\u7279\u522b\u662f\u5728\u8fde\u7ed3\u903b\u8f91\u4ee3\u6570, \u5e03\u5c14\u51fd\u6570\u548c\u547d\u9898\u903b\u8f91\u4e0a)\u7684\u4e00\u7c7b\u6570\u5b66\u7528\u8868, \u7528\u6765\u8ba1\u7b97\u903b\u8f91\u8868\u793a\u5f0f\u5728\u6bcf\u79cd\u8bba\u8bc1(\u5373\u6bcf\u79cd\u903b\u8f91\u53d8\u6570\u53d6\u503c\u7684\u7ec4\u5408)\u4e0a\u7684\u503c. \u5c24\u5176\u662f, \u771f\u503c\u8868\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u4e00\u4e2a\u547d\u9898\u8868\u793a\u5f0f\u662f\u5426\u5bf9\u6240\u6709\u5141\u8bb8\u7684\u8f93\u5165\u503c\u7686\u4e3a\u771f, \u4ea6\u5373\u662f\u5426\u4e3a\u903b\u8f91\u6709\u6548\u7684. A B A AND B 0 0 0 0 1 0 1 0 0 1 1 1 \u4ec5\u5f53\u8f93\u5165\u5747\u4e3a\u9ad8\u7535\u538b 1 \u65f6, \u8f93\u51fa\u624d\u4e3a\u9ad8\u7535\u538b 1; \u82e5\u8f93\u5165\u4e2d\u81f3\u591a\u6709\u4e00\u4e2a\u9ad8\u7535\u538b\u65f6, \u5219\u8f93\u51fa\u4e3a\u4f4e\u7535\u538b. \u6216\u95e8 \u6216\u95e8(OR)\u662f\u6570\u5b57\u903b\u8f91\u4e2d\u5b9e\u73b0\u903b\u8f91\u6216\u7684\u903b\u8f91\u95e8, \u5176\u771f\u503c\u8868\u5982\u4e0b\u6240\u793a. \u53ea\u8981\u4e24\u4e2a\u8f93\u5165\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a\u9ad8\u7535\u5e73 1, \u5219\u8f93\u51fa\u4e3a\u9ad8\u7535\u5e73 1; \u82e5\u4e24\u4e2a\u8f93\u5165\u5747\u4e3a\u4f4e\u7535\u5e73 0, \u8f93\u51fa\u624d\u4e3a\u4f4e\u7535\u5e73 0. A B A OR B 0 0 0 0 1 1 1 0 1 1 1 1 \u975e\u95e8 \u975e\u95e8(NOT)\u662f\u6570\u5b57\u903b\u8f91\u4e2d\u5b9e\u73b0\u903b\u8f91\u975e\u7684\u903b\u8f91\u95e8, \u5176\u771f\u503c\u8868\u5982\u4e0b\u6240\u793a. \u5b83\u7684\u4f5c\u7528\u662f\u5bf9\u8f93\u5165\u505a\u4e00\u6b21\u53cd\u76f8. A NOT A 0 1 1 0 \u5f02\u6216\u95e8 \u5f02\u6216\u95e8(XOR)\u662f\u6570\u5b57\u903b\u8f91\u4e2d\u5b9e\u73b0\u903b\u8f91\u5f02\u6216\u7684\u903b\u8f91\u95e8. \u82e5\u4e24\u4e2a\u8f93\u5165\u7684\u7535\u5e73\u76f8\u5f02, \u5219\u8f93\u51fa\u4e3a\u9ad8\u7535\u5e731; \u82e5\u4e24\u4e2a\u8f93\u5165\u7684\u7535\u5e73\u76f8\u540c, \u5219\u8f93\u51fa\u4e3a\u4f4e\u7535\u5e730. \u5373\u5982\u679c\u4e24\u4e2a\u8f93\u5165\u4e0d\u540c, \u5219\u5f02\u6216\u95e8\u8f93\u51fa\u9ad8\u7535\u5e731. \u5176\u771f\u503c\u8868\u5982\u4e0b\u6240\u793a. A B A XOR B 0 0 0 0 1 1 1 0 1 1 1 0 \u534a\u52a0\u5668 \u9996\u5148\u4ece\u6700\u7b80\u5355\u7684\u52a0\u6cd5\u8fd0\u7b97, \u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u52a0\u6cd5\u8fd0\u7b97\u5f00\u59cb. \u73b0\u5728\u6709\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570 A \u548c B, \u4ee5\u53ca A + B \u7684 Output \u7ed3\u679c, \u8fd9\u4e09\u8005\u90fd\u662f 0 \u6216 1 \u4e4b\u95f4\u7684\u4e00\u4e2a\u6570. \u5b83\u4eec\u4e4b\u95f4\u7684\u7ec4\u5408\u53ea\u6709 4 \u79cd, \u5176\u4e2d\u524d\u4e09\u79cd\u60c5\u51b5\u7684\u771f\u503c\u8868\u5982\u4e0b. A B Output 0 0 0 0 1 1 1 0 1 \u53ef\u4ee5\u53d1\u73b0, \u5728\u8fd9\u4e09\u79cd\u72b6\u6001\u4e0b, A \u4e0e B \u7684\u771f\u503c\u8868\u4e0e\u5f02\u6216\u95e8\u76f8\u540c. \u4f46\u662f\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u60c5\u51b5, \u5373 A \u4e0e B \u5747\u4e3a 1 \u65f6. A B Output 1 1 ? \u5f88\u660e\u663e 1 + 1 = 2, \u4f46\u662f 2 \u5374\u5df2\u7ecf\u8d85\u8fc7\u4e86\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u8868\u793a\u8303\u56f4. \u56e0\u6b64, \u9700\u8981\u5f15\u5165\u4e00\u4e2a\u989d\u5916\u7684\u8fdb\u4f4d\u6807\u5fd7, Carry Bit. \u56e0\u6b64, \u6700\u7ec8\u7684 A + B \u771f\u503c\u8868\u5982\u4e0b: A B Carry Bit Output 0 0 0 0 0 1 0 1 1 0 0 1 1 1 1 0 \u4ed4\u7ec6\u89c2\u5bdf Carry Bit \u4e0e A \u548c B \u4e4b\u95f4\u7684\u5173\u7cfb, \u53ef\u4ee5\u53d1\u73b0\u5b83\u4eec\u7684\u903b\u8f91\u5173\u7cfb\u7b26\u5408\u4e0e\u95e8. \u56e0\u6b64, \u53ea\u9700\u8981\u5728\u5f02\u6216\u95e8\u4e0a\u5e76\u8054\u4e00\u4e2a\u4e0e\u95e8, \u5c31\u80fd\u5236\u9020\u7b26\u5408\u4e0a\u8ff0\u771f\u503c\u8868\u7684\u5b9e\u9645\u7535\u8def. \u7535\u8def\u56fe\u4e0b\u56fe\u6240\u793a. \u5176\u4e2d\u8f93\u51fa S \u8868\u793a Sum, \u5373\u771f\u503c\u8868\u4e2d\u7684 Output, C \u8868\u793a Carry Bit. \u8fd9\u4e2a\u7535\u8def\u88ab\u79f0\u4e3a\u534a\u52a0\u5668(Half Adder), \u5b83\u4ec5\u4ec5\u901a\u8fc7\u4e24\u4e2a\u95e8\u7535\u8def\u4fbf\u5b9e\u73b0\u4e86\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u5b57\u7684\u52a0\u6cd5. \u5168\u52a0\u5668 \u73b0\u5728\u5c06\u4e0a\u9762\u7684\u534a\u52a0\u5668\u62bd\u8c61\u5316, \u8ba9\u5b83\u6210\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7ec4\u4ef6\u5e76\u9690\u85cf\u6389\u5176\u5185\u90e8\u7684\u903b\u8f91\u95e8\u7ec6\u8282, \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a. \u4e3a\u4e86\u5904\u7406\u771f\u6b63\u7684\u6574\u6570\u52a0\u6cd5, \u9700\u8981\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u7535\u8def: \u5168\u52a0\u5668(Full Adder). \u5168\u52a0\u5668\u5c06\u4e24\u4e2a\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u76f8\u52a0, \u5e76\u6839\u636e\u63a5\u6536\u5230\u7684\u4f4e\u4f4d\u8fdb\u4f4d\u4fe1\u53f7, \u8f93\u51fa\u548c\u4e0e\u8fdb\u4f4d\u8f93\u51fa. \u5168\u52a0\u5668\u7684\u4e09\u4e2a\u8f93\u5165\u4fe1\u53f7\u4e3a\u4e24\u4e2a\u52a0\u6570 A, B \u548c\u4f4e\u4f4d\u8fdb\u4f4d Cin. \u5168\u52a0\u5668\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u7ea7\u8054\u7684\u65b9\u5f0f, \u6784\u6210\u591a\u4f4d(\u5982 8 \u4f4d, 16 \u4f4d, 32 \u4f4d)\u4e8c\u8fdb\u5236\u6570\u52a0\u6cd5\u5668\u7684\u57fa\u672c\u90e8\u5206. \u5168\u52a0\u5668\u7684\u8f93\u51fa\u548c\u534a\u52a0\u5668\u7c7b\u4f3c, \u5305\u62ec\u5411\u9ad8\u4f4d\u7684\u8fdb\u4f4d\u4fe1\u53f7 Cout \u548c\u672c\u4f4d\u7684\u548c\u4fe1\u53f7 S. \u4e00\u4f4d\u5168\u52a0\u5668\u7684\u771f\u503c\u8868\u4e3a: A B Cin Cout S 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 \u5728\u5b9e\u9645\u7684\u5e94\u7528\u4e2d, \u5168\u52a0\u5668\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u7684\u65b9\u5f0f\u5236\u9020, \u4f8b\u5982\u76f4\u63a5\u5229\u7528\u6676\u4f53\u7ba1\u7ea7\u7684\u7535\u8def, \u6216\u8005\u7531\u5176\u4ed6\u73b0\u6210\u7684\u903b\u8f91\u95e8\u6765\u6784\u6210. \u672c\u4e66\u4ecb\u7ecd\u4e00\u79cd\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a\u534a\u52a0\u5668\u6765\u6784\u9020\u5168\u52a0\u5668\u7684\u65b9\u5f0f, \u5373\u5c06\u8f93\u5165\u7aef A \u548c B \u8fde\u63a5\u5230\u4e00\u4e2a\u534a\u52a0\u5668\u4e0a, \u7136\u540e\u5c06\u5176\u548c\u8f93\u51fa\u4fe1\u53f7\u4e0e\u8fdb\u4f4d\u8f93\u5165\u4fe1\u53f7\u5206\u522b\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u534a\u52a0\u5668\u7684\u4e24\u4e2a\u8f93\u5165, \u5e76\u5c06\u4e24\u4e2a\u8fdb\u4f4d\u8f93\u51fa\u4fe1\u53f7\u8fdb\u884c\u903b\u8f91\u6216\u8fd0\u7b97. \u7535\u8def\u56fe\u4e0b\u56fe\u6240\u793a. \u518d\u4e00\u6b21, \u53ef\u4ee5\u5c06\u5168\u52a0\u5668\u62bd\u8c61\u5316, \u8ba9\u5b83\u6210\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7ec4\u4ef6\u5e76\u9690\u85cf\u6389\u5176\u5185\u90e8\u7ec6\u8282. \u6574\u6570\u52a0\u6cd5 \u5728\u5b9e\u73b0\u5168\u52a0\u5668\u540e, \u4e0b\u4e00\u6b65\u4fbf\u662f\u5b9e\u73b0\u771f\u6b63\u7684\u6574\u6570\u52a0\u6cd5. \u5047\u8bbe\u9700\u6c42\u8981\u5b9e\u73b0\u4e24\u4e2a\u516b\u4f4d\u6574\u6570\u76f8\u52a0, \u7531\u4e8e\u5b83\u7531 8 \u4e2a\u4f4d\u6784\u6210, \u56e0\u6b64\u53ef\u4ee5\u5148\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb\u76f8\u52a0, \u6b64\u65f6\u4e0d\u9700\u8981\u5904\u7406\u4efb\u4f55\u8fdb\u4f4d, \u56e0\u4e3a\u8fd9\u662f\u7b2c\u4e00\u4e2a\u52a0\u6cd5, \u4f7f\u7528\u4e00\u4e2a\u534a\u52a0\u5668\u5c31\u80fd\u5f88\u597d\u7684\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1. \u4ece\u7b2c\u4e8c\u4f4d\u5f00\u59cb\u5230\u7b2c\u516b\u4f4d\u7ed3\u675f, \u7531\u4e8e\u6d89\u53ca\u524d\u4e00\u4f4d\u7684\u8fdb\u4f4d\u4fbf\u9700\u8981\u4f7f\u7528\u5168\u52a0\u5668\u6765\u5904\u7406\u524d\u4e00\u4e2a\u534a\u52a0\u5668\u4ea7\u751f\u7684\u8fdb\u4f4d\u6807\u5fd7 Carry Bit. \u6700\u7ec8\u83b7\u53d6\u516b\u4f4d\u6574\u6570\u76f8\u52a0\u7684\u7535\u8def\u56fe\u5982\u4e0b\u6240\u793a. \u8be5\u7535\u8def\u5b66\u540d\u53eb\u505a\"8 \u4f4d\u8fdb\u4f4d\u52a0\u6cd5\u5668\". \u6ce8\u610f\u8be5\u52a0\u6cd5\u5668\u6700\u540e\u6709\u4e00\u4e2a Carry Bit \u8f93\u51fa, \u5982\u679c\u8be5\u8f93\u51fa\u4f4d 1, \u8bf4\u660e\u4e24\u4e2a\u6570\u76f8\u52a0\u7684\u548c\u592a\u5927\u4e86, \u8d85\u8fc7\u4e86\u516b\u4f4d\u6574\u6570\u7684\u8868\u793a\u4e0a\u9650, \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0a\u53ef\u4ee5\u4f7f\u7528\u4e13\u7528\u540d\u8bcd\"\u6ea2\u51fa\"\u6765\u8868\u793a\u8fd9\u79cd\u60c5\u51b5. \u6ea2\u51fa\u901a\u5e38\u4f1a\u9020\u6210\u610f\u60f3\u4e0d\u5230\u6216\u4ee4\u4eba\u557c\u7b11\u7686\u975e\u7684 Bug, \u6bd4\u5982\u5728 FC \u6e38\u620f\u300a\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f\u300b\u5c31\u4e00\u76f4\u6d41\u4f20\u7740\u8fd9\u6837\u4e00\u4e2a\u4f20\u8bf4: \u9664\u666e\u901a\u6d41\u7a0b\u7684\u6e38\u620f\u5173\u5361\u5916, \u8fd8\u9690\u85cf\u7740\"\u6c34\u4e0b\u516b\u5173\", \u5728\u8fd9\u4e9b\u9690\u85cf\u5173\u5361\u4e2d, \u73a9\u5bb6\u80fd\u770b\u5230\u9c7c\u5728\u5929\u4e0a\u98de, \u4e91\u8dd1\u5230\u6c34\u9762\u4e0b\u7b49\u5947\u89c2. \u4e00\u4e9b\u8003\u636e\u515a\u786e\u5b9e\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u590d\u6742\u64cd\u4f5c\u901a\u8fc7\u5361 Bug \u7684\u65b9\u5f0f\u8fdb\u4e86\u8fd9\u6c34\u4e0b\u516b\u5173. \u6c34\u4e0b\u516b\u5173\u7684\u7531\u6765\u5c31\u662f\u6570\u503c\u6ea2\u51fa\u9020\u6210\u7684 Bug. \u53e6\u5916\u6709\u300a\u6885\u5fb7\u5e0c\u5c14\u7684\u6587\u660e\u300b\u7cfb\u5217\u6e38\u620f\u4e2d\u7684\u6897: \u5370\u5ea6\u9886\u8896\"\u6838\u5e73\"\u4f7f\u8005\u7518\u5730, \u56e0\u4e3a\u5728\u6b63\u5e38\u6e38\u620f\u6d41\u7a0b\u4e2d, \u7518\u5730\u62e5\u6709\u6781\u4f4e\u7684\u4fb5\u7565\u503c(\u8868\u793a\u4e3b\u52a8\u5bf9\u6e38\u620f\u4e16\u754c\u5185\u5176\u5b83\u56fd\u5bb6\u53d1\u8d77\u4fb5\u7565\u7684\u6982\u7387), \u4f46\u5f53\u6e38\u620f\u8fdb\u5165\u5230\u540e\u671f, \u901a\u8fc7\u53d1\u5c55\u4e00\u4e9b\u7279\u6b8a\u79d1\u6280\u53ef\u4ee5\u8fdb\u4e00\u6b65\u964d\u4f4e\u7518\u5730\u7684\u4fb5\u7565\u503c, \u6b64\u65f6\u51cf\u6cd5\u64cd\u4f5c\u6ea2\u51fa, \u7518\u5730\u7684\u4fb5\u7565\u503c\u4ece 0 \u53d8\u4e3a\u6b63\u7684 255, \u4e8e\u662f\u5c31\u80fd\u5728\u6e38\u620f\u4e2d\u770b\u5230\u7518\u5730\u75af\u72c2\u6254\u6838\u5f39\u7684\u5947\u89c2. \u5f53\u7136, \u8fd9\u4e2a Bug \u5728\u540e\u7eed\u7248\u672c\u7684\u6e38\u620f\u4e2d\u5df2\u7ecf\u88ab\u4fee\u590d. \u5728\u8bb8\u591a\u5ec9\u4ef7\u7684 ALU \u82af\u7247\u4e2d\u901a\u5e38\u4e0d\u5b58\u5728\u4e13\u95e8\u7684\u4e58\u6cd5\u7535\u8def, \u56e0\u4e3a\u4e58\u6cd5\u53ef\u4ee5\u7528\u52a0\u6cd5\u66ff\u4ee3, \u867d\u7136\u901f\u5ea6\u6162, \u4f46\u7ed3\u679c\u6b63\u786e. \u8fd9\u79cd\u66ff\u4ee3\u5e7f\u6cdb\u5e94\u7528\u5728\u50cf\u5fae\u6ce2\u7089, \u51b0\u7bb1\u7b49\u5bb6\u7535\u4e0a. \u4e8b\u5b9e\u4e0a\u5b9e\u73b0\u4e58\u6cd5\u5e76\u4e0d\u9700\u8981\u591a\u590d\u6742\u7684\u64cd\u4f5c, \u53ea\u662f\u9700\u8981\u66f4\u591a\u7684\u95e8\u7535\u8def\u800c\u5df2, \u8fd9\u4e9b\u5ec9\u4ef7\u82af\u7247\u4e3a\u4e86\u6781\u9650\u538b\u7f29\u6210\u672c\u800c\u9009\u62e9\u4e0d\u53bb\u5b9e\u73b0\u4e13\u95e8\u7684\u4e58\u6cd5\u7535\u8def(\u5f53\u7136\u5728\u5fae\u6ce2\u7089\u7b49\u5bb6\u7528\u7535\u5668\u4e0a\u4e5f\u7528\u4e0d\u5230\u592a\u590d\u6742\u7684\u4e58\u6cd5\u8fd0\u7b97, \u56e0\u6b64\u4e00\u4e9b\u6027\u80fd\u635f\u5931\u662f\u53ef\u4ee5\u63a5\u53d7\u7684). \u903b\u8f91\u8fd0\u7b97 ALU \u9664\u4e86\u505a\u7b97\u672f\u8fd0\u7b97\u5916, \u8fd8\u53ef\u4ee5\u505a\u903b\u8f91\u8fd0\u7b97. \u4ee5\u4e00\u4e2a\u4e0e\u95e8\u4e3e\u4f8b, \u5b83\u53ef\u4ee5\u8fdb\u884c\u4e24\u4e2a\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u4e0e\u64cd\u4f5c. \u4f46\u8fd9\u548c\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5e38\u7528\u7684\u4e0e\u64cd\u4f5c\u8fd8\u662f\u6709\u4e9b\u5dee\u8ddd\u7684. \u5728\u4ee3\u7801\u4e2d\u7684\u4e0e\u64cd\u4f5c\u5176\u8f93\u5165\u901a\u5e38\u662f\u4e00\u4e2a N \u4f4d\u6574\u6570, \u5982\u4e0b\u4ee3\u7801\u6240\u793a: fn main() { let a: u8 = 0x0f; // 0b00001111 let b: u8 = 0xf0; // 0b11110000 let c = a & b; // 0b00000000 println!(\"{:?}\", c); } \u4e0a\u8ff0\u4ee3\u7801\u6240\u6f14\u793a\u7684\u4e0e\u64cd\u4f5c\u5176\u4e24\u4e2a\u8f93\u5165\u5747\u662f\u516b\u4f4d\u65e0\u7b26\u53f7\u6574\u6570, \u5176\u8f93\u51fa\u4e5f\u662f\u516b\u4f4d\u65e0\u7b26\u53f7\u6574\u6570. \u4e5f\u5c31\u662f\u8bf4, \u5b83\u9700\u8981\u540c\u65f6\u5bf9 8 \u4e2a\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u8fdb\u884c\u4e0e\u64cd\u4f5c, \u5e76\u5f97\u5230 8 \u4e2a\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u7ed3\u679c. \u90a3\u4e48\u8be5\u5982\u4f55\u4f7f\u7528\u4e0e\u95e8\u6765\u5b8c\u6210\u5462? \u5176\u5b9e\u4e5f\u5f88\u7b80\u5355, \u53ef\u4ee5\u6784\u9020\u7535\u8def\u56fe\u5982\u4e0b. \u5c06 8 \u4f4d\u8f93\u5165\u5206\u522b\u8fde\u63a5\u5230 8 \u4e2a\u4e0e\u95e8\u4e0a, \u53ef\u4ee5\u6807\u8bb0\u4e3a A0, A1, ... ,A7, \u4ee3\u8868\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570. \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c, \u6807\u8bb0\u4e3a B0, B1, ... ,B7. \u8fd9 8 \u4e2a\u4e0e\u95e8\u7684\u8f93\u51fa, \u5206\u522b\u8bb0\u4e3a Y0, Y1, ... , Y7, \u5b83\u4eec\u53ef\u4ee5\u7ec4\u6210\u4e86\u4e00\u4e2a 8 \u4f4d\u6574\u6570, \u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u6574\u6570\u7684\u4e0e\u64cd\u4f5c. \u4e0e\u4e4b\u7c7b\u4f3c\u7684, \u5982\u679c\u8981\u5b8c\u6210\u6574\u6570\u7684\u6216\u64cd\u4f5c, \u53ea\u9700\u8981\u5c06\u4e0e\u95e8\u66ff\u6362\u4e3a\u6216\u95e8. \u5728\u73b0\u5b9e\u4e16\u754c\u4e2d, ALU \u901a\u5e38\u4e0d\u4f1a\u53ea\u5b8c\u6210\u4e00\u4e2a\u529f\u80fd, \u6bd4\u5982\u5e76\u6ca1\u6709\u4e13\u95e8\u7528\u4e8e\u4e0e\u8fd0\u7b97\u7684 ALU. \u53d6\u800c\u4ee3\u4e4b\u7684\u662f, \u4f1a\u6709\u4e00\u4e2a\u65e2\u53ef\u4ee5\u5b8c\u6210\u4e0e\u8fd0\u7b97\u53c8\u80fd\u5b8c\u6210\u6216\u8fd0\u7b97\u7b49\u591a\u79cd\u529f\u80fd\u7684 ALU. \u5f53 ALU \u83b7\u5f97\u8f93\u5165\u65f6, \u5b83\u4f1a\u540c\u65f6\u5c06\u8f93\u5165 A \u548c B \u4f20\u5165\u5230\u6240\u6709\u7535\u8def(\u4e0e\u64cd\u4f5c\u7535\u8def, \u6216\u64cd\u4f5c\u7535\u8def\u7b49), \u5e76\u5728\u540c\u4e00\u65f6\u95f4\u83b7\u5f97 A AND B, A OR B \u7b49\u7684\u5168\u90e8\u7ed3\u679c. \u6700\u540e\u4e3a\u4e86\u53d6\u5f97\u9700\u8981\u7684\u8ba1\u7b97\u7ed3\u679c\u548c\u629b\u5f03\u4e0d\u9700\u8981\u7684\u8ba1\u7b97\u7ed3\u679c, \u6240\u6709\u7684\u8f93\u51fa\u7ed3\u679c\u4f1a\u518d\u7ecf\u8fc7\u4e00\u4e2a\u9009\u62e9\u5668\u505a\u6700\u7ec8\u9009\u62e9. \u9009\u62e9\u5668\u4e5f\u662f\u7531\u95e8\u7535\u8def\u6784\u6210\u7684, \u8fd9\u91cc\u4e0d\u505a\u8fc7\u5ea6\u5c55\u5f00, \u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u67e5\u627e\u76f8\u5173\u8d44\u6599\u8fdb\u884c\u5b66\u4e60. \u5728\u672c\u8282\u7684\u6700\u540e, \u6211\u4eec\u518d\u56de\u5230\u5f00\u5934\u63d0\u5230\u7684 74181 \u82af\u7247. 74181 \u82af\u7247\u7684\u7ec4\u5408\u903b\u8f91\u7535\u8def\u5927\u7ea6\u53ea\u4f7f\u7528\u4e86 70 \u4e2a\u95e8\u7535\u8def, \u5176\u7535\u8def\u56fe\u5982\u4e0b\u6240\u793a: \u5982\u679c\u8bfb\u8005\u5bf9\u6b64\u611f\u5230\u5174\u8da3, \u751a\u81f3\u53ef\u4ee5\u8d2d\u4e70\u6750\u6599\u540e\u4f9d\u7167\u7535\u8def\u56fe\u81ea\u5df1\u52a8\u624b\u7ec4\u88c5\u4e00\u5f20 74181 \u82af\u7247\u51fa\u6765(\u867d\u7136 74181 \u82af\u7247\u5df2\u7ecf\u662f\u534a\u4e2a\u4e16\u7eaa\u524d\u7684\u4ea7\u7269, \u4f46\u8bbe\u8ba1\u548c\u5236\u4f5c\u4e00\u5f20\u82af\u7247\u7684\u539f\u7406\u901a\u7528, \u4e14\u5e76\u4e0d\u56f0\u96be). \u4e0d\u8fc7\u5bf9\u4e8e Game Boy \u6240\u4f7f\u7528\u7684 LR35902 CPU \u6765\u8bf4, ALU \u8981\u6bd4\u4e0a\u9762\u4ecb\u7ecd\u7684\u7a0d\u5fae\u590d\u6742\u4e00\u70b9. \u6bd4\u5982\u5728\u5bf9\u6574\u6570\u8fdb\u884c\u8fd0\u7b97\u65f6, \u9664\u4e86\u8fdb\u4f4d\u6807\u5fd7 Carry Bit \u5916, \u8fd8\u4f1a\u5305\u542b Zero Bit \u7528\u4e8e\u5224\u65ad Output \u662f\u5426\u4e3a 0, Half-Carry Bit \u5224\u65ad\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u7b2c 3 \u4f4d\u662f\u5426\u53d1\u751f\u4e86\u8fdb\u4f4d\u7b49. \u5b83\u4eec\u7684\u57fa\u672c\u539f\u7406\u662f\u76f8\u901a\u7684, \u5728\u540e\u9762\u7684\u5185\u5bb9\u4e2d\u4f1a\u518d\u6df1\u5165\u63a2\u8ba8. \u4f46\u773c\u524d\u5fc5\u987b\u89e3\u51b3\u4e00\u4e2a\u66f4\u91cd\u8981\u4e14\u7d27\u6025\u7684\u95ee\u9898:\u8981\u4ea4\u7ed9 ALU \u64cd\u4f5c\u7684 A \u548c B \u8fd9\u4e24\u4e2a\u64cd\u4f5c\u6570\u6570\u636e\u662f\u4ece\u54ea\u513f\u6765\u7684?","title":"GB-CPU-\u7b97\u672f\u903b\u8f91\u5355\u5143"},{"location":"content/gameboy/cpu/alu/#_1","text":"ALU(Arithmetic Logic Unit, \u7b97\u672f\u903b\u8f91\u5355\u5143)\u662f CPU \u5bf9\u6574\u6570\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u548c\u4f4d\u8fd0\u7b97\u7684\u7ec4\u5408\u6570\u5b57\u7535\u8def, \u5176\u7531\u4e00\u7cfb\u5217\u7684\u95e8\u7535\u8def\u6784\u6210. \u5927\u90e8\u5206ALU\u90fd\u53ef\u4ee5\u5b8c\u6210\u4ee5\u4e0b\u8fd0\u7b97: \u6574\u6570\u7b97\u672f\u8fd0\u7b97(\u52a0, \u51cf, \u6709\u65f6\u8fd8\u5305\u62ec\u4e58\u548c\u9664, \u4e0d\u8fc7\u6210\u672c\u8f83\u9ad8) \u4f4d\u903b\u8f91\u8fd0\u7b97(\u4e0e, \u6216, \u975e, \u5f02\u6216) \u79fb\u4f4d\u8fd0\u7b97(\u5c06\u4e00\u4e2a\u5b57\u5411\u5de6\u6216\u5411\u53f3\u79fb\u4f4d\u6216\u6d6e\u52a8\u7279\u5b9a\u4f4d, \u800c\u65e0\u7b26\u53f7\u5ef6\u4f38) \u53ef\u4ee5\u53d1\u73b0 ALU \u5e76\u4e0d\u5904\u7406\u6d6e\u70b9\u6570, \u662f\u56e0\u4e3a\u6d6e\u70b9\u6570\u8fd0\u7b97\u4e00\u822c\u4ea4\u7531 FPU(Floating Point Unit, \u6d6e\u70b9\u8fd0\u7b97\u5355\u5143)\u5b8c\u6210. \u5728 CPU \u53d1\u5c55\u7684\u65e9\u671f, FPU \u66fe\u662f\u72ec\u7acb CPU \u5b58\u5728\u7684\u4e00\u4e2a\"\u6269\u5c55\"\u786c\u4ef6, \u6709\u70b9\u7c7b\u4f3c\u4eca\u5929\u7684 GPU \u4e0e CPU \u7684\u5173\u7cfb, \u4e0d\u8fc7\u968f\u7740\u79d1\u6280\u7684\u53d1\u5c55\u73b0\u4eca\u8bb8\u591a CPU \u90fd\u5185\u7f6e FPU \u4e86. \u989d\u5916\u8981\u63d0\u9192\u7684\u4e00\u4ef6\u4e8b\u662f ALU \u4e0e FPU \u5e76\u4e0d\u662f\u5bf9\u7acb\u7684, \u56e0\u4e3a FPU \u7535\u8def\u901a\u5e38\u4e5f\u6709\u5f88\u5927\u4e00\u90e8\u5206\u7531 ALU \u7535\u8def\u6784\u6210. ALU \u627f\u62c5\u4e86 CPU \u6700\u6838\u5fc3\u7684\u8ba1\u7b97\u80fd\u529b, \u5b83\u662f\u8ba1\u7b97\u673a\u4e4b\u6240\u4ee5\u79f0\u4e3a\"\u8ba1\u7b97\"\u673a\u7684\u5173\u952e. \u751a\u81f3\u4ece\u67d0\u4e00\u65b9\u9762\u6765\u8bf4, \u5982\u679c\u4e86\u89e3\u4e86 ALU, \u4e5f\u5c31\u4e86\u89e3\u4e86\u4ec0\u4e48\u662f\u8ba1\u7b97\u673a. \u5386\u53f2\u4e0a\u7b2c\u4e00\u5f20 ALU \u82af\u7247\u662f 74181, \u5982\u4e0b\u56fe\u6240\u793a, \u5176\u4e8e\u4e0a\u4e16\u7eaa\u4e03\u5341\u5e74\u4ee3\u53d1\u5e03. \u5b83\u662f\u8ba1\u7b97\u673a\u53f2\u4e0a\u7684\u4e00\u4e2a\u91cc\u7a0b\u7891, \u56e0\u4e3a\u5728\u5b83\u4e4b\u524d, \u4e3a\u4e86\u8ba9\u8ba1\u7b97\u673a\u6267\u884c\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f, \u901a\u5e38\u9700\u8981\u4f7f\u7528\u8005\u624b\u52a8\u8c03\u6574\u8ba1\u7b97\u673a\u7684\u903b\u8f91\u7535\u8def, \u8fd9\u8ba9\u8ba1\u7b97\u673a\u663e\u5f97\u4e0d\u90a3\u4e48\u901a\u7528, \u800c 74181 \u901a\u8fc7\u7f16\u7a0b\u7684\u65b9\u5f0f\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u7269\u7406\u7535\u8def\u7684\u524d\u63d0\u4e0b\u8ba9\u8ba1\u7b97\u673a\u53bb\u6267\u884c\u4e0d\u540c\u7684\u7a0b\u5e8f. \u4e0b\u56fe\u5c55\u793a\u4e86 74181 \u82af\u7247\u652f\u6301\u7684\u7b97\u672f\u4e0e\u903b\u8f91\u8fd0\u7b97, \u4ee5\u73b0\u4ee3\u7684\u773c\u89c2\u6765\u770b\u5176\u5341\u5206\u7b80\u964b, \u6bd4\u5982\u6ca1\u6709\u4f4d\u8fd0\u7b97\u529f\u80fd. \u540e\u7eed\u7684\u5c0f\u8282\u5c06\u8bd5\u56fe\u4f7f\u7528\u6700\u7b80\u5355\u7684\u95e8\u7535\u8def\u7ec4\u5408\u6765\u8bbe\u8ba1\u4e00\u4e2a\u8fdb\u884c 8 \u4f4d\u6574\u6570\u52a0\u6cd5\u8fd0\u7b97\u7684 ALU, \u8ba9\u8bfb\u8005\u53ef\u4ee5\u5bf9 ALU \u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u4e2a\u521d\u6b65\u5370\u8c61. \u6b63\u5982 ALU \u7684\u4e2d\u6587\u540d\u79f0\"\u7b97\u672f\u903b\u8f91\u5355\u5143\"\u63cf\u8ff0\u7684\u90a3\u6837, ALU \u786e\u5b9e\u7531\u4e24\u90e8\u5206\u6784\u6210: \u7b97\u672f\u5355\u5143(AU)\u4e0e\u903b\u8f91\u5355\u5143(LU).","title":"\u7b97\u672f\u903b\u8f91\u5355\u5143"},{"location":"content/gameboy/cpu/alu/#_2","text":"\u4e3a\u4e86\u5b9e\u73b0\u548c\u5b8c\u6210\u4e00\u4e2a ALU, \u6211\u4eec\u5c06\u4ece\u6700\u57fa\u7840\u7684\u903b\u8f91\u7535\u8def\u95e8\u7535\u8def\u5f00\u59cb. \u7528\u4ee5\u5b9e\u73b0\u57fa\u672c\u903b\u8f91\u8fd0\u7b97\u548c\u590d\u5408\u903b\u8f91\u8fd0\u7b97\u7684\u5355\u5143\u7535\u8def\u79f0\u4e3a\u95e8\u7535\u8def. \u7535\u8def\u4e2d\u5b58\u5728\u4e09\u79cd\u57fa\u672c\u7684\u903b\u8f91\u5173\u7cfb: \u4e0e\u903b\u8f91, \u6216\u903b\u8f91, \u975e\u903b\u8f91. \u4e0e\u6b64\u76f8\u5bf9\u5e94, \u57fa\u672c\u7684\u95e8\u7535\u8def\u6709\u4e0e\u95e8, \u6216\u95e8, \u975e\u95e8(\u53cd\u76f8\u5668)\u548c\u5f02\u6216\u95e8\u7b49. \u5728\u7535\u8def\u56fe(Circuit Diagram)\u4e2d, \u5b83\u4eec\u53ef\u4ee5\u5206\u522b\u4f7f\u7528\u4e0b\u56fe\u6240\u793a\u7684 ANSI/IEEE Std 91-1984 \u903b\u8f91\u7b26\u53f7\u8868\u793a. \u4e0e\u95e8 \u4e0e\u95e8(AND)\u662f\u6570\u5b57\u903b\u8f91\u7535\u8def\u4e2d\u5b9e\u73b0\u903b\u8f91\u4e0e\u7684\u95e8\u7535\u8def, \u5176\u771f\u503c\u8868\u5982\u4e0b\u6240\u793a. \u771f\u503c\u8868\u662f\u4e00\u79cd\u4f7f\u7528\u4e8e\u903b\u8f91\u4e2d(\u7279\u522b\u662f\u5728\u8fde\u7ed3\u903b\u8f91\u4ee3\u6570, \u5e03\u5c14\u51fd\u6570\u548c\u547d\u9898\u903b\u8f91\u4e0a)\u7684\u4e00\u7c7b\u6570\u5b66\u7528\u8868, \u7528\u6765\u8ba1\u7b97\u903b\u8f91\u8868\u793a\u5f0f\u5728\u6bcf\u79cd\u8bba\u8bc1(\u5373\u6bcf\u79cd\u903b\u8f91\u53d8\u6570\u53d6\u503c\u7684\u7ec4\u5408)\u4e0a\u7684\u503c. \u5c24\u5176\u662f, \u771f\u503c\u8868\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u4e00\u4e2a\u547d\u9898\u8868\u793a\u5f0f\u662f\u5426\u5bf9\u6240\u6709\u5141\u8bb8\u7684\u8f93\u5165\u503c\u7686\u4e3a\u771f, \u4ea6\u5373\u662f\u5426\u4e3a\u903b\u8f91\u6709\u6548\u7684. A B A AND B 0 0 0 0 1 0 1 0 0 1 1 1 \u4ec5\u5f53\u8f93\u5165\u5747\u4e3a\u9ad8\u7535\u538b 1 \u65f6, \u8f93\u51fa\u624d\u4e3a\u9ad8\u7535\u538b 1; \u82e5\u8f93\u5165\u4e2d\u81f3\u591a\u6709\u4e00\u4e2a\u9ad8\u7535\u538b\u65f6, \u5219\u8f93\u51fa\u4e3a\u4f4e\u7535\u538b. \u6216\u95e8 \u6216\u95e8(OR)\u662f\u6570\u5b57\u903b\u8f91\u4e2d\u5b9e\u73b0\u903b\u8f91\u6216\u7684\u903b\u8f91\u95e8, \u5176\u771f\u503c\u8868\u5982\u4e0b\u6240\u793a. \u53ea\u8981\u4e24\u4e2a\u8f93\u5165\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a\u9ad8\u7535\u5e73 1, \u5219\u8f93\u51fa\u4e3a\u9ad8\u7535\u5e73 1; \u82e5\u4e24\u4e2a\u8f93\u5165\u5747\u4e3a\u4f4e\u7535\u5e73 0, \u8f93\u51fa\u624d\u4e3a\u4f4e\u7535\u5e73 0. A B A OR B 0 0 0 0 1 1 1 0 1 1 1 1 \u975e\u95e8 \u975e\u95e8(NOT)\u662f\u6570\u5b57\u903b\u8f91\u4e2d\u5b9e\u73b0\u903b\u8f91\u975e\u7684\u903b\u8f91\u95e8, \u5176\u771f\u503c\u8868\u5982\u4e0b\u6240\u793a. \u5b83\u7684\u4f5c\u7528\u662f\u5bf9\u8f93\u5165\u505a\u4e00\u6b21\u53cd\u76f8. A NOT A 0 1 1 0 \u5f02\u6216\u95e8 \u5f02\u6216\u95e8(XOR)\u662f\u6570\u5b57\u903b\u8f91\u4e2d\u5b9e\u73b0\u903b\u8f91\u5f02\u6216\u7684\u903b\u8f91\u95e8. \u82e5\u4e24\u4e2a\u8f93\u5165\u7684\u7535\u5e73\u76f8\u5f02, \u5219\u8f93\u51fa\u4e3a\u9ad8\u7535\u5e731; \u82e5\u4e24\u4e2a\u8f93\u5165\u7684\u7535\u5e73\u76f8\u540c, \u5219\u8f93\u51fa\u4e3a\u4f4e\u7535\u5e730. \u5373\u5982\u679c\u4e24\u4e2a\u8f93\u5165\u4e0d\u540c, \u5219\u5f02\u6216\u95e8\u8f93\u51fa\u9ad8\u7535\u5e731. \u5176\u771f\u503c\u8868\u5982\u4e0b\u6240\u793a. A B A XOR B 0 0 0 0 1 1 1 0 1 1 1 0","title":"\u95e8\u7535\u8def"},{"location":"content/gameboy/cpu/alu/#_3","text":"\u9996\u5148\u4ece\u6700\u7b80\u5355\u7684\u52a0\u6cd5\u8fd0\u7b97, \u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u52a0\u6cd5\u8fd0\u7b97\u5f00\u59cb. \u73b0\u5728\u6709\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570 A \u548c B, \u4ee5\u53ca A + B \u7684 Output \u7ed3\u679c, \u8fd9\u4e09\u8005\u90fd\u662f 0 \u6216 1 \u4e4b\u95f4\u7684\u4e00\u4e2a\u6570. \u5b83\u4eec\u4e4b\u95f4\u7684\u7ec4\u5408\u53ea\u6709 4 \u79cd, \u5176\u4e2d\u524d\u4e09\u79cd\u60c5\u51b5\u7684\u771f\u503c\u8868\u5982\u4e0b. A B Output 0 0 0 0 1 1 1 0 1 \u53ef\u4ee5\u53d1\u73b0, \u5728\u8fd9\u4e09\u79cd\u72b6\u6001\u4e0b, A \u4e0e B \u7684\u771f\u503c\u8868\u4e0e\u5f02\u6216\u95e8\u76f8\u540c. \u4f46\u662f\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u60c5\u51b5, \u5373 A \u4e0e B \u5747\u4e3a 1 \u65f6. A B Output 1 1 ? \u5f88\u660e\u663e 1 + 1 = 2, \u4f46\u662f 2 \u5374\u5df2\u7ecf\u8d85\u8fc7\u4e86\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u8868\u793a\u8303\u56f4. \u56e0\u6b64, \u9700\u8981\u5f15\u5165\u4e00\u4e2a\u989d\u5916\u7684\u8fdb\u4f4d\u6807\u5fd7, Carry Bit. \u56e0\u6b64, \u6700\u7ec8\u7684 A + B \u771f\u503c\u8868\u5982\u4e0b: A B Carry Bit Output 0 0 0 0 0 1 0 1 1 0 0 1 1 1 1 0 \u4ed4\u7ec6\u89c2\u5bdf Carry Bit \u4e0e A \u548c B \u4e4b\u95f4\u7684\u5173\u7cfb, \u53ef\u4ee5\u53d1\u73b0\u5b83\u4eec\u7684\u903b\u8f91\u5173\u7cfb\u7b26\u5408\u4e0e\u95e8. \u56e0\u6b64, \u53ea\u9700\u8981\u5728\u5f02\u6216\u95e8\u4e0a\u5e76\u8054\u4e00\u4e2a\u4e0e\u95e8, \u5c31\u80fd\u5236\u9020\u7b26\u5408\u4e0a\u8ff0\u771f\u503c\u8868\u7684\u5b9e\u9645\u7535\u8def. \u7535\u8def\u56fe\u4e0b\u56fe\u6240\u793a. \u5176\u4e2d\u8f93\u51fa S \u8868\u793a Sum, \u5373\u771f\u503c\u8868\u4e2d\u7684 Output, C \u8868\u793a Carry Bit. \u8fd9\u4e2a\u7535\u8def\u88ab\u79f0\u4e3a\u534a\u52a0\u5668(Half Adder), \u5b83\u4ec5\u4ec5\u901a\u8fc7\u4e24\u4e2a\u95e8\u7535\u8def\u4fbf\u5b9e\u73b0\u4e86\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u5b57\u7684\u52a0\u6cd5.","title":"\u534a\u52a0\u5668"},{"location":"content/gameboy/cpu/alu/#_4","text":"\u73b0\u5728\u5c06\u4e0a\u9762\u7684\u534a\u52a0\u5668\u62bd\u8c61\u5316, \u8ba9\u5b83\u6210\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7ec4\u4ef6\u5e76\u9690\u85cf\u6389\u5176\u5185\u90e8\u7684\u903b\u8f91\u95e8\u7ec6\u8282, \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a. \u4e3a\u4e86\u5904\u7406\u771f\u6b63\u7684\u6574\u6570\u52a0\u6cd5, \u9700\u8981\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u7535\u8def: \u5168\u52a0\u5668(Full Adder). \u5168\u52a0\u5668\u5c06\u4e24\u4e2a\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u76f8\u52a0, \u5e76\u6839\u636e\u63a5\u6536\u5230\u7684\u4f4e\u4f4d\u8fdb\u4f4d\u4fe1\u53f7, \u8f93\u51fa\u548c\u4e0e\u8fdb\u4f4d\u8f93\u51fa. \u5168\u52a0\u5668\u7684\u4e09\u4e2a\u8f93\u5165\u4fe1\u53f7\u4e3a\u4e24\u4e2a\u52a0\u6570 A, B \u548c\u4f4e\u4f4d\u8fdb\u4f4d Cin. \u5168\u52a0\u5668\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u7ea7\u8054\u7684\u65b9\u5f0f, \u6784\u6210\u591a\u4f4d(\u5982 8 \u4f4d, 16 \u4f4d, 32 \u4f4d)\u4e8c\u8fdb\u5236\u6570\u52a0\u6cd5\u5668\u7684\u57fa\u672c\u90e8\u5206. \u5168\u52a0\u5668\u7684\u8f93\u51fa\u548c\u534a\u52a0\u5668\u7c7b\u4f3c, \u5305\u62ec\u5411\u9ad8\u4f4d\u7684\u8fdb\u4f4d\u4fe1\u53f7 Cout \u548c\u672c\u4f4d\u7684\u548c\u4fe1\u53f7 S. \u4e00\u4f4d\u5168\u52a0\u5668\u7684\u771f\u503c\u8868\u4e3a: A B Cin Cout S 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 \u5728\u5b9e\u9645\u7684\u5e94\u7528\u4e2d, \u5168\u52a0\u5668\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u7684\u65b9\u5f0f\u5236\u9020, \u4f8b\u5982\u76f4\u63a5\u5229\u7528\u6676\u4f53\u7ba1\u7ea7\u7684\u7535\u8def, \u6216\u8005\u7531\u5176\u4ed6\u73b0\u6210\u7684\u903b\u8f91\u95e8\u6765\u6784\u6210. \u672c\u4e66\u4ecb\u7ecd\u4e00\u79cd\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a\u534a\u52a0\u5668\u6765\u6784\u9020\u5168\u52a0\u5668\u7684\u65b9\u5f0f, \u5373\u5c06\u8f93\u5165\u7aef A \u548c B \u8fde\u63a5\u5230\u4e00\u4e2a\u534a\u52a0\u5668\u4e0a, \u7136\u540e\u5c06\u5176\u548c\u8f93\u51fa\u4fe1\u53f7\u4e0e\u8fdb\u4f4d\u8f93\u5165\u4fe1\u53f7\u5206\u522b\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u534a\u52a0\u5668\u7684\u4e24\u4e2a\u8f93\u5165, \u5e76\u5c06\u4e24\u4e2a\u8fdb\u4f4d\u8f93\u51fa\u4fe1\u53f7\u8fdb\u884c\u903b\u8f91\u6216\u8fd0\u7b97. \u7535\u8def\u56fe\u4e0b\u56fe\u6240\u793a. \u518d\u4e00\u6b21, \u53ef\u4ee5\u5c06\u5168\u52a0\u5668\u62bd\u8c61\u5316, \u8ba9\u5b83\u6210\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7ec4\u4ef6\u5e76\u9690\u85cf\u6389\u5176\u5185\u90e8\u7ec6\u8282.","title":"\u5168\u52a0\u5668"},{"location":"content/gameboy/cpu/alu/#_5","text":"\u5728\u5b9e\u73b0\u5168\u52a0\u5668\u540e, \u4e0b\u4e00\u6b65\u4fbf\u662f\u5b9e\u73b0\u771f\u6b63\u7684\u6574\u6570\u52a0\u6cd5. \u5047\u8bbe\u9700\u6c42\u8981\u5b9e\u73b0\u4e24\u4e2a\u516b\u4f4d\u6574\u6570\u76f8\u52a0, \u7531\u4e8e\u5b83\u7531 8 \u4e2a\u4f4d\u6784\u6210, \u56e0\u6b64\u53ef\u4ee5\u5148\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb\u76f8\u52a0, \u6b64\u65f6\u4e0d\u9700\u8981\u5904\u7406\u4efb\u4f55\u8fdb\u4f4d, \u56e0\u4e3a\u8fd9\u662f\u7b2c\u4e00\u4e2a\u52a0\u6cd5, \u4f7f\u7528\u4e00\u4e2a\u534a\u52a0\u5668\u5c31\u80fd\u5f88\u597d\u7684\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1. \u4ece\u7b2c\u4e8c\u4f4d\u5f00\u59cb\u5230\u7b2c\u516b\u4f4d\u7ed3\u675f, \u7531\u4e8e\u6d89\u53ca\u524d\u4e00\u4f4d\u7684\u8fdb\u4f4d\u4fbf\u9700\u8981\u4f7f\u7528\u5168\u52a0\u5668\u6765\u5904\u7406\u524d\u4e00\u4e2a\u534a\u52a0\u5668\u4ea7\u751f\u7684\u8fdb\u4f4d\u6807\u5fd7 Carry Bit. \u6700\u7ec8\u83b7\u53d6\u516b\u4f4d\u6574\u6570\u76f8\u52a0\u7684\u7535\u8def\u56fe\u5982\u4e0b\u6240\u793a. \u8be5\u7535\u8def\u5b66\u540d\u53eb\u505a\"8 \u4f4d\u8fdb\u4f4d\u52a0\u6cd5\u5668\". \u6ce8\u610f\u8be5\u52a0\u6cd5\u5668\u6700\u540e\u6709\u4e00\u4e2a Carry Bit \u8f93\u51fa, \u5982\u679c\u8be5\u8f93\u51fa\u4f4d 1, \u8bf4\u660e\u4e24\u4e2a\u6570\u76f8\u52a0\u7684\u548c\u592a\u5927\u4e86, \u8d85\u8fc7\u4e86\u516b\u4f4d\u6574\u6570\u7684\u8868\u793a\u4e0a\u9650, \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0a\u53ef\u4ee5\u4f7f\u7528\u4e13\u7528\u540d\u8bcd\"\u6ea2\u51fa\"\u6765\u8868\u793a\u8fd9\u79cd\u60c5\u51b5. \u6ea2\u51fa\u901a\u5e38\u4f1a\u9020\u6210\u610f\u60f3\u4e0d\u5230\u6216\u4ee4\u4eba\u557c\u7b11\u7686\u975e\u7684 Bug, \u6bd4\u5982\u5728 FC \u6e38\u620f\u300a\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f\u300b\u5c31\u4e00\u76f4\u6d41\u4f20\u7740\u8fd9\u6837\u4e00\u4e2a\u4f20\u8bf4: \u9664\u666e\u901a\u6d41\u7a0b\u7684\u6e38\u620f\u5173\u5361\u5916, \u8fd8\u9690\u85cf\u7740\"\u6c34\u4e0b\u516b\u5173\", \u5728\u8fd9\u4e9b\u9690\u85cf\u5173\u5361\u4e2d, \u73a9\u5bb6\u80fd\u770b\u5230\u9c7c\u5728\u5929\u4e0a\u98de, \u4e91\u8dd1\u5230\u6c34\u9762\u4e0b\u7b49\u5947\u89c2. \u4e00\u4e9b\u8003\u636e\u515a\u786e\u5b9e\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u590d\u6742\u64cd\u4f5c\u901a\u8fc7\u5361 Bug \u7684\u65b9\u5f0f\u8fdb\u4e86\u8fd9\u6c34\u4e0b\u516b\u5173. \u6c34\u4e0b\u516b\u5173\u7684\u7531\u6765\u5c31\u662f\u6570\u503c\u6ea2\u51fa\u9020\u6210\u7684 Bug. \u53e6\u5916\u6709\u300a\u6885\u5fb7\u5e0c\u5c14\u7684\u6587\u660e\u300b\u7cfb\u5217\u6e38\u620f\u4e2d\u7684\u6897: \u5370\u5ea6\u9886\u8896\"\u6838\u5e73\"\u4f7f\u8005\u7518\u5730, \u56e0\u4e3a\u5728\u6b63\u5e38\u6e38\u620f\u6d41\u7a0b\u4e2d, \u7518\u5730\u62e5\u6709\u6781\u4f4e\u7684\u4fb5\u7565\u503c(\u8868\u793a\u4e3b\u52a8\u5bf9\u6e38\u620f\u4e16\u754c\u5185\u5176\u5b83\u56fd\u5bb6\u53d1\u8d77\u4fb5\u7565\u7684\u6982\u7387), \u4f46\u5f53\u6e38\u620f\u8fdb\u5165\u5230\u540e\u671f, \u901a\u8fc7\u53d1\u5c55\u4e00\u4e9b\u7279\u6b8a\u79d1\u6280\u53ef\u4ee5\u8fdb\u4e00\u6b65\u964d\u4f4e\u7518\u5730\u7684\u4fb5\u7565\u503c, \u6b64\u65f6\u51cf\u6cd5\u64cd\u4f5c\u6ea2\u51fa, \u7518\u5730\u7684\u4fb5\u7565\u503c\u4ece 0 \u53d8\u4e3a\u6b63\u7684 255, \u4e8e\u662f\u5c31\u80fd\u5728\u6e38\u620f\u4e2d\u770b\u5230\u7518\u5730\u75af\u72c2\u6254\u6838\u5f39\u7684\u5947\u89c2. \u5f53\u7136, \u8fd9\u4e2a Bug \u5728\u540e\u7eed\u7248\u672c\u7684\u6e38\u620f\u4e2d\u5df2\u7ecf\u88ab\u4fee\u590d. \u5728\u8bb8\u591a\u5ec9\u4ef7\u7684 ALU \u82af\u7247\u4e2d\u901a\u5e38\u4e0d\u5b58\u5728\u4e13\u95e8\u7684\u4e58\u6cd5\u7535\u8def, \u56e0\u4e3a\u4e58\u6cd5\u53ef\u4ee5\u7528\u52a0\u6cd5\u66ff\u4ee3, \u867d\u7136\u901f\u5ea6\u6162, \u4f46\u7ed3\u679c\u6b63\u786e. \u8fd9\u79cd\u66ff\u4ee3\u5e7f\u6cdb\u5e94\u7528\u5728\u50cf\u5fae\u6ce2\u7089, \u51b0\u7bb1\u7b49\u5bb6\u7535\u4e0a. \u4e8b\u5b9e\u4e0a\u5b9e\u73b0\u4e58\u6cd5\u5e76\u4e0d\u9700\u8981\u591a\u590d\u6742\u7684\u64cd\u4f5c, \u53ea\u662f\u9700\u8981\u66f4\u591a\u7684\u95e8\u7535\u8def\u800c\u5df2, \u8fd9\u4e9b\u5ec9\u4ef7\u82af\u7247\u4e3a\u4e86\u6781\u9650\u538b\u7f29\u6210\u672c\u800c\u9009\u62e9\u4e0d\u53bb\u5b9e\u73b0\u4e13\u95e8\u7684\u4e58\u6cd5\u7535\u8def(\u5f53\u7136\u5728\u5fae\u6ce2\u7089\u7b49\u5bb6\u7528\u7535\u5668\u4e0a\u4e5f\u7528\u4e0d\u5230\u592a\u590d\u6742\u7684\u4e58\u6cd5\u8fd0\u7b97, \u56e0\u6b64\u4e00\u4e9b\u6027\u80fd\u635f\u5931\u662f\u53ef\u4ee5\u63a5\u53d7\u7684).","title":"\u6574\u6570\u52a0\u6cd5"},{"location":"content/gameboy/cpu/alu/#_6","text":"ALU \u9664\u4e86\u505a\u7b97\u672f\u8fd0\u7b97\u5916, \u8fd8\u53ef\u4ee5\u505a\u903b\u8f91\u8fd0\u7b97. \u4ee5\u4e00\u4e2a\u4e0e\u95e8\u4e3e\u4f8b, \u5b83\u53ef\u4ee5\u8fdb\u884c\u4e24\u4e2a\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u4e0e\u64cd\u4f5c. \u4f46\u8fd9\u548c\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5e38\u7528\u7684\u4e0e\u64cd\u4f5c\u8fd8\u662f\u6709\u4e9b\u5dee\u8ddd\u7684. \u5728\u4ee3\u7801\u4e2d\u7684\u4e0e\u64cd\u4f5c\u5176\u8f93\u5165\u901a\u5e38\u662f\u4e00\u4e2a N \u4f4d\u6574\u6570, \u5982\u4e0b\u4ee3\u7801\u6240\u793a: fn main() { let a: u8 = 0x0f; // 0b00001111 let b: u8 = 0xf0; // 0b11110000 let c = a & b; // 0b00000000 println!(\"{:?}\", c); } \u4e0a\u8ff0\u4ee3\u7801\u6240\u6f14\u793a\u7684\u4e0e\u64cd\u4f5c\u5176\u4e24\u4e2a\u8f93\u5165\u5747\u662f\u516b\u4f4d\u65e0\u7b26\u53f7\u6574\u6570, \u5176\u8f93\u51fa\u4e5f\u662f\u516b\u4f4d\u65e0\u7b26\u53f7\u6574\u6570. \u4e5f\u5c31\u662f\u8bf4, \u5b83\u9700\u8981\u540c\u65f6\u5bf9 8 \u4e2a\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u8fdb\u884c\u4e0e\u64cd\u4f5c, \u5e76\u5f97\u5230 8 \u4e2a\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u7ed3\u679c. \u90a3\u4e48\u8be5\u5982\u4f55\u4f7f\u7528\u4e0e\u95e8\u6765\u5b8c\u6210\u5462? \u5176\u5b9e\u4e5f\u5f88\u7b80\u5355, \u53ef\u4ee5\u6784\u9020\u7535\u8def\u56fe\u5982\u4e0b. \u5c06 8 \u4f4d\u8f93\u5165\u5206\u522b\u8fde\u63a5\u5230 8 \u4e2a\u4e0e\u95e8\u4e0a, \u53ef\u4ee5\u6807\u8bb0\u4e3a A0, A1, ... ,A7, \u4ee3\u8868\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570. \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c, \u6807\u8bb0\u4e3a B0, B1, ... ,B7. \u8fd9 8 \u4e2a\u4e0e\u95e8\u7684\u8f93\u51fa, \u5206\u522b\u8bb0\u4e3a Y0, Y1, ... , Y7, \u5b83\u4eec\u53ef\u4ee5\u7ec4\u6210\u4e86\u4e00\u4e2a 8 \u4f4d\u6574\u6570, \u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u6574\u6570\u7684\u4e0e\u64cd\u4f5c. \u4e0e\u4e4b\u7c7b\u4f3c\u7684, \u5982\u679c\u8981\u5b8c\u6210\u6574\u6570\u7684\u6216\u64cd\u4f5c, \u53ea\u9700\u8981\u5c06\u4e0e\u95e8\u66ff\u6362\u4e3a\u6216\u95e8. \u5728\u73b0\u5b9e\u4e16\u754c\u4e2d, ALU \u901a\u5e38\u4e0d\u4f1a\u53ea\u5b8c\u6210\u4e00\u4e2a\u529f\u80fd, \u6bd4\u5982\u5e76\u6ca1\u6709\u4e13\u95e8\u7528\u4e8e\u4e0e\u8fd0\u7b97\u7684 ALU. \u53d6\u800c\u4ee3\u4e4b\u7684\u662f, \u4f1a\u6709\u4e00\u4e2a\u65e2\u53ef\u4ee5\u5b8c\u6210\u4e0e\u8fd0\u7b97\u53c8\u80fd\u5b8c\u6210\u6216\u8fd0\u7b97\u7b49\u591a\u79cd\u529f\u80fd\u7684 ALU. \u5f53 ALU \u83b7\u5f97\u8f93\u5165\u65f6, \u5b83\u4f1a\u540c\u65f6\u5c06\u8f93\u5165 A \u548c B \u4f20\u5165\u5230\u6240\u6709\u7535\u8def(\u4e0e\u64cd\u4f5c\u7535\u8def, \u6216\u64cd\u4f5c\u7535\u8def\u7b49), \u5e76\u5728\u540c\u4e00\u65f6\u95f4\u83b7\u5f97 A AND B, A OR B \u7b49\u7684\u5168\u90e8\u7ed3\u679c. \u6700\u540e\u4e3a\u4e86\u53d6\u5f97\u9700\u8981\u7684\u8ba1\u7b97\u7ed3\u679c\u548c\u629b\u5f03\u4e0d\u9700\u8981\u7684\u8ba1\u7b97\u7ed3\u679c, \u6240\u6709\u7684\u8f93\u51fa\u7ed3\u679c\u4f1a\u518d\u7ecf\u8fc7\u4e00\u4e2a\u9009\u62e9\u5668\u505a\u6700\u7ec8\u9009\u62e9. \u9009\u62e9\u5668\u4e5f\u662f\u7531\u95e8\u7535\u8def\u6784\u6210\u7684, \u8fd9\u91cc\u4e0d\u505a\u8fc7\u5ea6\u5c55\u5f00, \u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u67e5\u627e\u76f8\u5173\u8d44\u6599\u8fdb\u884c\u5b66\u4e60. \u5728\u672c\u8282\u7684\u6700\u540e, \u6211\u4eec\u518d\u56de\u5230\u5f00\u5934\u63d0\u5230\u7684 74181 \u82af\u7247. 74181 \u82af\u7247\u7684\u7ec4\u5408\u903b\u8f91\u7535\u8def\u5927\u7ea6\u53ea\u4f7f\u7528\u4e86 70 \u4e2a\u95e8\u7535\u8def, \u5176\u7535\u8def\u56fe\u5982\u4e0b\u6240\u793a: \u5982\u679c\u8bfb\u8005\u5bf9\u6b64\u611f\u5230\u5174\u8da3, \u751a\u81f3\u53ef\u4ee5\u8d2d\u4e70\u6750\u6599\u540e\u4f9d\u7167\u7535\u8def\u56fe\u81ea\u5df1\u52a8\u624b\u7ec4\u88c5\u4e00\u5f20 74181 \u82af\u7247\u51fa\u6765(\u867d\u7136 74181 \u82af\u7247\u5df2\u7ecf\u662f\u534a\u4e2a\u4e16\u7eaa\u524d\u7684\u4ea7\u7269, \u4f46\u8bbe\u8ba1\u548c\u5236\u4f5c\u4e00\u5f20\u82af\u7247\u7684\u539f\u7406\u901a\u7528, \u4e14\u5e76\u4e0d\u56f0\u96be). \u4e0d\u8fc7\u5bf9\u4e8e Game Boy \u6240\u4f7f\u7528\u7684 LR35902 CPU \u6765\u8bf4, ALU \u8981\u6bd4\u4e0a\u9762\u4ecb\u7ecd\u7684\u7a0d\u5fae\u590d\u6742\u4e00\u70b9. \u6bd4\u5982\u5728\u5bf9\u6574\u6570\u8fdb\u884c\u8fd0\u7b97\u65f6, \u9664\u4e86\u8fdb\u4f4d\u6807\u5fd7 Carry Bit \u5916, \u8fd8\u4f1a\u5305\u542b Zero Bit \u7528\u4e8e\u5224\u65ad Output \u662f\u5426\u4e3a 0, Half-Carry Bit \u5224\u65ad\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u7b2c 3 \u4f4d\u662f\u5426\u53d1\u751f\u4e86\u8fdb\u4f4d\u7b49. \u5b83\u4eec\u7684\u57fa\u672c\u539f\u7406\u662f\u76f8\u901a\u7684, \u5728\u540e\u9762\u7684\u5185\u5bb9\u4e2d\u4f1a\u518d\u6df1\u5165\u63a2\u8ba8. \u4f46\u773c\u524d\u5fc5\u987b\u89e3\u51b3\u4e00\u4e2a\u66f4\u91cd\u8981\u4e14\u7d27\u6025\u7684\u95ee\u9898:\u8981\u4ea4\u7ed9 ALU \u64cd\u4f5c\u7684 A \u548c B \u8fd9\u4e24\u4e2a\u64cd\u4f5c\u6570\u6570\u636e\u662f\u4ece\u54ea\u513f\u6765\u7684?","title":"\u903b\u8f91\u8fd0\u7b97"},{"location":"content/gameboy/cpu/cycles/","text":"LR35902 \u65f6\u949f\u5468\u671f\u4e0e\u9891\u7387\u4eff\u771f CPU \u7684\u65f6\u949f\u9891\u7387\u7b80\u5355\u8bf4\u5c31\u662f CPU \u8fd0\u7b97\u65f6\u7684\u5de5\u4f5c\u7684\u9891\u7387(1 \u79d2\u5185\u53d1\u751f\u7684\u540c\u6b65\u8109\u51b2\u6570)\u7684\u7b80\u79f0, \u5355\u4f4d\u662f Hz. \u5b83\u51b3\u5b9a\u8ba1\u7b97\u673a\u7684\u8fd0\u884c\u901f\u5ea6. \u5728 21 \u4e16\u7eaa\u521d\u7684\u65f6\u5019, \u8bb8\u591a DIY \u7231\u597d\u8005\u559c\u6b22\u5bf9 CPU \u505a\"\u8d85\u9891\"\u5904\u7406, \u5373\u628a CPU \u7684\u65f6\u8109\u901f\u5ea6\u63d0\u5347\u81f3\u9ad8\u4e8e\u5382\u65b9\u6240\u5b9a\u7684\u901f\u5ea6\u8fd0\u4f5c, \u4ece\u800c\u63d0\u5347\u6027\u80fd. \u4f46\u7531\u4e8e\u6b64\u79cd\u64cd\u4f5c\u4f1a\u5f71\u54cd CPU \u7684\u5bff\u547d\u548c\u7a33\u5b9a\u6027, \u8fd1\u4e9b\u5e74\u5df2\u7ecf\u9c9c\u5c11\u6709\u4eba\u518d\u8fd9\u4e48\u505a. Game Boy \u7684 LR35902 CPU \u7684\u65f6\u949f\u9891\u7387\u662f 4194304 Hz \u6216 4 MHz. \u6307\u4ee4\u5468\u671f \u6307\u4ee4\u5468\u671f\u662f\u6307 CPU \u6267\u884c\u4e00\u6761\u673a\u5668\u6307\u4ee4\u9700\u8981\u6d88\u8017\u7684\u65f6\u949f\u5468\u671f. LR35902 \u6307\u4ee4\u96c6\u7684\u6307\u4ee4\u5468\u671f\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u6570\u7ec4\u8868\u793a: 1) \u6807\u51c6\u6307\u4ee4\u96c6 // 0 1 2 3 4 5 6 7 8 9 a b c d e f [ 1, 3, 2, 2, 1, 1, 2, 1, 5, 2, 2, 2, 1, 1, 2, 1, // 0 0, 3, 2, 2, 1, 1, 2, 1, 3, 2, 2, 2, 1, 1, 2, 1, // 1 2, 3, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, // 2 2, 3, 2, 2, 3, 3, 3, 1, 2, 2, 2, 2, 1, 1, 2, 1, // 3 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // 4 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // 5 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // 6 2, 2, 2, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 1, 2, 1, // 7 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // 8 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // 9 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // a 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // b 2, 3, 3, 4, 3, 4, 2, 4, 2, 4, 3, 0, 3, 6, 2, 4, // c 2, 3, 3, 0, 3, 4, 2, 4, 2, 4, 3, 0, 3, 0, 2, 4, // d 3, 3, 2, 0, 0, 4, 2, 4, 4, 1, 4, 0, 0, 0, 2, 4, // e 3, 3, 2, 1, 0, 4, 2, 4, 3, 2, 4, 1, 0, 0, 2, 4, // f ] \u6bd4\u5982 Opcode \u4e3a 0x16 \u7684\u6307\u4ee4, \u53ef\u4ee5\u901a\u8fc7\u67e5\u627e\u4e0a\u8868\u7684\u7b2c\u4e00\u884c\u7b2c\u516d\u5217\u83b7\u53d6\u5b83\u7684\u6307\u4ee4\u5468\u671f\u8868\u793a. 2) \u6269\u5c55\u6307\u4ee4\u96c6 // 0 1 2 3 4 5 6 7 8 9 a b c d e f [ 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 0 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 1 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 2 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 3 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, // 4 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, // 5 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, // 6 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, // 7 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 8 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 9 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // a 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // b 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // c 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // d 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // e 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // f ] \u4e0a\u8ff0\u4e24\u4e2a\u6570\u7ec4\u91c7\u7528\u7684\u662f Game Boy \u786c\u4ef6\u89c4\u8303\u6587\u6863\u4e2d\u7684\"\u673a\u5668\u5468\u671f\"\u8868\u8ff0, \u4e14 1 \u4e2a\u673a\u5668\u5468\u671f\u7b49\u4e8e 4 \u4e2a CPU \u65f6\u949f\u5468\u671f. \u56e0\u6b64\u5f53\u9700\u8981\u5b9e\u9645\u4f7f\u7528\u7684\u65f6\u5019, \u9700\u8981\u4e58\u4e0a 4 \u518d\u884c\u8ba1\u7b97. \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f, \u6709\u56db\u79cd\u5e26\u6761\u4ef6\u7684\u6307\u4ee4\u6839\u636e\u6761\u4ef6\u4e0d\u540c\u53ef\u80fd\u6d88\u8017\u4e0d\u540c\u7684 CPU \u65f6\u949f\u5468\u671f, \u5b83\u4eec\u5206\u522b\u662f: JR IF: \u5982\u679c\u6761\u4ef6\u6210\u7acb, \u989d\u5916\u6d88\u8017 1 \u4e2a\u673a\u5668\u5468\u671f(4 \u4e2a\u65f6\u949f\u5468\u671f) RET IF: \u5982\u679c\u6761\u4ef6\u6210\u7acb, \u989d\u5916\u6d88\u8017 3 \u4e2a\u673a\u5668\u5468\u671f(12 \u4e2a\u65f6\u949f\u5468\u671f) CALL IF: \u5982\u679c\u6761\u4ef6\u6210\u7acb, \u989d\u5916\u6d88\u8017 3 \u4e2a\u673a\u5668\u5468\u671f(12 \u4e2a\u65f6\u949f\u5468\u671f) JUMP IF: \u5982\u679c\u6761\u4ef6\u6210\u7acb, \u989d\u5916\u6d88\u8017 1 \u4e2a\u673a\u5668\u5468\u671f(4 \u4e2a\u65f6\u949f\u5468\u671f) \u5728\u5b9e\u73b0\u4eff\u771f\u65f6, \u9996\u5148\u6839\u636e Opcode \u83b7\u53d6\u8be5\u6307\u4ee4\u6240\u56fa\u5b9a\u6d88\u8017\u7684\u6307\u4ee4\u5468\u671f, \u7136\u540e\u5224\u65ad\u8be5\u6307\u4ee4\u662f\u5426\u5305\u542b\u6761\u4ef6\u5224\u65ad\u4ee5\u53ca\u6761\u4ef6\u5224\u65ad\u662f\u5426\u6210\u7acb; \u82e5\u6210\u7acb, \u5219\u9700\u8981\u8ba1\u7b97\u989d\u5916\u6d88\u8017\u7684\u6307\u4ee4\u5468\u671f. \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\u6240\u793a. fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { ... } } ... } let ecycle = match opcode { 0x20 | 0x30 => { if self.reg.get_flag(Z) { 0x00 } else { 0x01 } } 0x28 | 0x38 => { if self.reg.get_flag(Z) { 0x01 } else { 0x00 } } 0xc0 | 0xd0 => { if self.reg.get_flag(Z) { 0x00 } else { 0x03 } } 0xc8 | 0xcc | 0xd8 | 0xdc => { if self.reg.get_flag(Z) { 0x03 } else { 0x00 } } 0xc2 | 0xd2 => { if self.reg.get_flag(Z) { 0x00 } else { 0x01 } } 0xca | 0xda => { if self.reg.get_flag(Z) { 0x01 } else { 0x00 } } 0xc4 | 0xd4 => { if self.reg.get_flag(Z) { 0x00 } else { 0x03 } } _ => 0x00, }; if opcode == 0xcb { CB_CYCLES[cbcode as usize] } else { OP_CYCLES[opcode as usize] + ecycle } } \u7531\u4e8e ex \u51fd\u6570\u8fd4\u56de\u7684\u662f\u673a\u5668\u5468\u671f, \u5728\u5b9e\u9645\u4f7f\u7528\u65f6\u5927\u591a\u9700\u8981\u8f6c\u6362\u4e3a\u65f6\u949f\u5468\u671f, \u6545\u6b64\u6dfb\u52a0\u4ee5\u4e0b\u51fd\u6570, \u5728\u83b7\u53d6\u673a\u5668\u5468\u671f\u540e\u4e58\u4ee5 4 \u518d\u505a\u8fd4\u56de. impl Cpu { pub fn next(&mut self) -> u32 { self.ex() * 4 } } \u9891\u7387\u4eff\u771f \u76ee\u524d\u5bb6\u7528\u7535\u8111\u7684 CPU \u9891\u7387\u5df2\u7ecf\u666e\u904d\u5230\u8fbe GHz \u7ea7\u522b, \u4e3a\u4e86\u5b8c\u6210 Game Boy \u4eff\u771f\u5668, \u4eff\u771f\u5668\u7cfb\u7edf\u5fc5\u987b\u4fdd\u8bc1\u5448\u73b0\u7ed9\u5916\u90e8\u7684\u884c\u4e3a\u4e0e\u771f\u5b9e\u786c\u4ef6\u4e00\u81f4, \u56e0\u6b64\u4eff\u771f\u5668\u7cfb\u7edf\u5fc5\u987b\u4eba\u4e3a\u9650\u5236 LR35902 CPU \u4eff\u771f\u4ee3\u7801\u7684\u8fd0\u884c\u901f\u5ea6. \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u6700\u7b80\u5355\u4e5f\u662f\u6700\u5e38\u7528\u7684\u65b9\u6cd5: CPU \u4eff\u771f\u5668\u6bcf\u6267\u884c\u4e00\u6bb5\u6307\u4ee4\u540e\u4f11\u7720\u4e00\u6bb5\u65f6\u95f4, \u4f7f\u6bcf 1 \u79d2\u65f6\u95f4\u5185\u4eff\u771f\u5668\u6267\u884c\u7684\u6240\u6709\u6307\u4ee4\u7684\u6307\u4ee4\u5468\u671f\u4e4b\u548c\u4e3a 4194304. \u4e3a\u6b64\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784 RTC(Real Time Clock), \u7ecf\u7531\u5b83\u7684\u63a7\u5236\u6765\u9650\u5236\u6a21\u62df CPU \u7684\u6267\u884c\u901f\u5ea6. \u4e0b\u9762\u7684\u903b\u8f91\u4ee3\u7801\u6240\u6267\u884c\u7684\u64cd\u4f5c\u662f\u53ef\u4ee5\u8868\u8ff0\u4e3a\u4ee5\u4e0b\u51e0\u6b65: \u8bb0\u5f55\u5f53\u524d\u7684\u7cfb\u7edf\u65f6\u95f4 T. \u5f00\u59cb\u6267\u884c\u6307\u4ee4, \u5f53\u88ab\u6267\u884c\u7684\u6307\u4ee4\u4eec\u7684\u6307\u4ee4\u5468\u671f\u4e4b\u548c\u8fbe\u5230 67108(4194304 / 1000 * 16)\u65f6, \u5219\u8fdb\u884c\u4f11\u7720, \u76f4\u5230\u7cfb\u7edf\u65f6\u95f4\u5230\u8fbe T + 16 \u6beb\u79d2. \u91cd\u590d\u6b65\u9aa4 1. 16 \u6beb\u79d2\u662f\u4e00\u4e2a\u5728\u6e38\u620f\u9886\u57df\u548c\u4eff\u771f\u5668\u9886\u57df\u975e\u5e38\u5e38\u89c1\u7684\u503c, \u56e0\u4e3a\u5b83\u4ee3\u8868\u4e86 60 \u5e27\u7387: 16 \u6beb\u79d2 * 60 ~= 1000 \u6beb\u79d2 ~= 1 \u79d2. \u867d\u7136\u5e76\u4e0d\u9700\u8981\u4e00\u5b9a\u662f 16, \u4f46 16 \u771f\u7684\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u6570\u5b57. \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\u6240\u793a. pub const CLOCK_FREQUENCY: u32 = 4_194_304; pub const STEP_TIME: u32 = 16; pub const STEP_CYCLES: u32 = (STEP_TIME as f64 / (1000_f64 / CLOCK_FREQUENCY as f64)) as u32; // Real time cpu provided to simulate real hardware speed. pub struct Rtc { pub cpu: Cpu, step_cycles: u32, step_zero: time::SystemTime, step_flip: bool, } impl Rtc { pub fn power_up(term: Term, mem: Rc<RefCell<Memory>>) -> Self { let cpu = Cpu::power_up(term, mem); Self { cpu, step_cycles: 0, step_zero: time::SystemTime::now(), step_flip: false, } } // Function next simulates real hardware execution speed, by // limiting the frequency of the function cpu.next(). pub fn next(&mut self) -> u32 { if self.step_cycles > STEP_CYCLES { self.step_flip = true; self.step_cycles -= STEP_CYCLES; let d = time::SystemTime::now().duration_since(self.step_zero).unwrap(); let s = u64::from(STEP_TIME.saturating_sub(d.as_millis() as u32)); thread::sleep(time::Duration::from_millis(s)); self.step_zero = self .step_zero .checked_add(time::Duration::from_millis(u64::from(STEP_TIME))) .unwrap(); } let cycles = self.cpu.next(); self.step_cycles += cycles; cycles } pub fn flip(&mut self) -> bool { let r = self.step_flip; if r { self.step_flip = false; } r } } \u5176\u4e2d flip \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c, \u7528\u4e8e\u5224\u65ad\u662f\u5426\u4ea7\u751f\u4e86\u65b0\u7684\u4e00\u5e27. \u5728\u540e\u671f\u5b9e\u73b0\u89c6\u9891\u753b\u9762\u548c\u6e38\u620f\u624b\u67c4\u65f6\u4f1a\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u51fd\u6570, \u56e0\u4e3a\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u6bcf\u79d2\u5bf9\u4e00\u4e2a\u6307\u5b9a\u6761\u4ef6\u8fdb\u884c 60 \u6b21\u5224\u65ad. \u5982\u6b64\u4e00\u6765, \u4e00\u4e2a\u6309\u7167\u771f\u5b9e\u786c\u4ef6\u901f\u5ea6\u6267\u884c\u7684 CPU \u5728\u4ee3\u7801\u4e2d\u8bde\u751f\u4e86!","title":"GB-CPU-LR35902\u65f6\u949f\u5468\u671f\u4e0e\u9891\u7387\u4eff\u771f"},{"location":"content/gameboy/cpu/cycles/#lr35902","text":"CPU \u7684\u65f6\u949f\u9891\u7387\u7b80\u5355\u8bf4\u5c31\u662f CPU \u8fd0\u7b97\u65f6\u7684\u5de5\u4f5c\u7684\u9891\u7387(1 \u79d2\u5185\u53d1\u751f\u7684\u540c\u6b65\u8109\u51b2\u6570)\u7684\u7b80\u79f0, \u5355\u4f4d\u662f Hz. \u5b83\u51b3\u5b9a\u8ba1\u7b97\u673a\u7684\u8fd0\u884c\u901f\u5ea6. \u5728 21 \u4e16\u7eaa\u521d\u7684\u65f6\u5019, \u8bb8\u591a DIY \u7231\u597d\u8005\u559c\u6b22\u5bf9 CPU \u505a\"\u8d85\u9891\"\u5904\u7406, \u5373\u628a CPU \u7684\u65f6\u8109\u901f\u5ea6\u63d0\u5347\u81f3\u9ad8\u4e8e\u5382\u65b9\u6240\u5b9a\u7684\u901f\u5ea6\u8fd0\u4f5c, \u4ece\u800c\u63d0\u5347\u6027\u80fd. \u4f46\u7531\u4e8e\u6b64\u79cd\u64cd\u4f5c\u4f1a\u5f71\u54cd CPU \u7684\u5bff\u547d\u548c\u7a33\u5b9a\u6027, \u8fd1\u4e9b\u5e74\u5df2\u7ecf\u9c9c\u5c11\u6709\u4eba\u518d\u8fd9\u4e48\u505a. Game Boy \u7684 LR35902 CPU \u7684\u65f6\u949f\u9891\u7387\u662f 4194304 Hz \u6216 4 MHz.","title":"LR35902 \u65f6\u949f\u5468\u671f\u4e0e\u9891\u7387\u4eff\u771f"},{"location":"content/gameboy/cpu/cycles/#_1","text":"\u6307\u4ee4\u5468\u671f\u662f\u6307 CPU \u6267\u884c\u4e00\u6761\u673a\u5668\u6307\u4ee4\u9700\u8981\u6d88\u8017\u7684\u65f6\u949f\u5468\u671f. LR35902 \u6307\u4ee4\u96c6\u7684\u6307\u4ee4\u5468\u671f\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u6570\u7ec4\u8868\u793a: 1) \u6807\u51c6\u6307\u4ee4\u96c6 // 0 1 2 3 4 5 6 7 8 9 a b c d e f [ 1, 3, 2, 2, 1, 1, 2, 1, 5, 2, 2, 2, 1, 1, 2, 1, // 0 0, 3, 2, 2, 1, 1, 2, 1, 3, 2, 2, 2, 1, 1, 2, 1, // 1 2, 3, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, // 2 2, 3, 2, 2, 3, 3, 3, 1, 2, 2, 2, 2, 1, 1, 2, 1, // 3 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // 4 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // 5 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // 6 2, 2, 2, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 1, 2, 1, // 7 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // 8 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // 9 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // a 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, // b 2, 3, 3, 4, 3, 4, 2, 4, 2, 4, 3, 0, 3, 6, 2, 4, // c 2, 3, 3, 0, 3, 4, 2, 4, 2, 4, 3, 0, 3, 0, 2, 4, // d 3, 3, 2, 0, 0, 4, 2, 4, 4, 1, 4, 0, 0, 0, 2, 4, // e 3, 3, 2, 1, 0, 4, 2, 4, 3, 2, 4, 1, 0, 0, 2, 4, // f ] \u6bd4\u5982 Opcode \u4e3a 0x16 \u7684\u6307\u4ee4, \u53ef\u4ee5\u901a\u8fc7\u67e5\u627e\u4e0a\u8868\u7684\u7b2c\u4e00\u884c\u7b2c\u516d\u5217\u83b7\u53d6\u5b83\u7684\u6307\u4ee4\u5468\u671f\u8868\u793a. 2) \u6269\u5c55\u6307\u4ee4\u96c6 // 0 1 2 3 4 5 6 7 8 9 a b c d e f [ 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 0 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 1 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 2 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 3 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, // 4 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, // 5 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, // 6 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, // 7 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 8 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // 9 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // a 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // b 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // c 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // d 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // e 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, // f ] \u4e0a\u8ff0\u4e24\u4e2a\u6570\u7ec4\u91c7\u7528\u7684\u662f Game Boy \u786c\u4ef6\u89c4\u8303\u6587\u6863\u4e2d\u7684\"\u673a\u5668\u5468\u671f\"\u8868\u8ff0, \u4e14 1 \u4e2a\u673a\u5668\u5468\u671f\u7b49\u4e8e 4 \u4e2a CPU \u65f6\u949f\u5468\u671f. \u56e0\u6b64\u5f53\u9700\u8981\u5b9e\u9645\u4f7f\u7528\u7684\u65f6\u5019, \u9700\u8981\u4e58\u4e0a 4 \u518d\u884c\u8ba1\u7b97. \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f, \u6709\u56db\u79cd\u5e26\u6761\u4ef6\u7684\u6307\u4ee4\u6839\u636e\u6761\u4ef6\u4e0d\u540c\u53ef\u80fd\u6d88\u8017\u4e0d\u540c\u7684 CPU \u65f6\u949f\u5468\u671f, \u5b83\u4eec\u5206\u522b\u662f: JR IF: \u5982\u679c\u6761\u4ef6\u6210\u7acb, \u989d\u5916\u6d88\u8017 1 \u4e2a\u673a\u5668\u5468\u671f(4 \u4e2a\u65f6\u949f\u5468\u671f) RET IF: \u5982\u679c\u6761\u4ef6\u6210\u7acb, \u989d\u5916\u6d88\u8017 3 \u4e2a\u673a\u5668\u5468\u671f(12 \u4e2a\u65f6\u949f\u5468\u671f) CALL IF: \u5982\u679c\u6761\u4ef6\u6210\u7acb, \u989d\u5916\u6d88\u8017 3 \u4e2a\u673a\u5668\u5468\u671f(12 \u4e2a\u65f6\u949f\u5468\u671f) JUMP IF: \u5982\u679c\u6761\u4ef6\u6210\u7acb, \u989d\u5916\u6d88\u8017 1 \u4e2a\u673a\u5668\u5468\u671f(4 \u4e2a\u65f6\u949f\u5468\u671f) \u5728\u5b9e\u73b0\u4eff\u771f\u65f6, \u9996\u5148\u6839\u636e Opcode \u83b7\u53d6\u8be5\u6307\u4ee4\u6240\u56fa\u5b9a\u6d88\u8017\u7684\u6307\u4ee4\u5468\u671f, \u7136\u540e\u5224\u65ad\u8be5\u6307\u4ee4\u662f\u5426\u5305\u542b\u6761\u4ef6\u5224\u65ad\u4ee5\u53ca\u6761\u4ef6\u5224\u65ad\u662f\u5426\u6210\u7acb; \u82e5\u6210\u7acb, \u5219\u9700\u8981\u8ba1\u7b97\u989d\u5916\u6d88\u8017\u7684\u6307\u4ee4\u5468\u671f. \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\u6240\u793a. fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { ... } } ... } let ecycle = match opcode { 0x20 | 0x30 => { if self.reg.get_flag(Z) { 0x00 } else { 0x01 } } 0x28 | 0x38 => { if self.reg.get_flag(Z) { 0x01 } else { 0x00 } } 0xc0 | 0xd0 => { if self.reg.get_flag(Z) { 0x00 } else { 0x03 } } 0xc8 | 0xcc | 0xd8 | 0xdc => { if self.reg.get_flag(Z) { 0x03 } else { 0x00 } } 0xc2 | 0xd2 => { if self.reg.get_flag(Z) { 0x00 } else { 0x01 } } 0xca | 0xda => { if self.reg.get_flag(Z) { 0x01 } else { 0x00 } } 0xc4 | 0xd4 => { if self.reg.get_flag(Z) { 0x00 } else { 0x03 } } _ => 0x00, }; if opcode == 0xcb { CB_CYCLES[cbcode as usize] } else { OP_CYCLES[opcode as usize] + ecycle } } \u7531\u4e8e ex \u51fd\u6570\u8fd4\u56de\u7684\u662f\u673a\u5668\u5468\u671f, \u5728\u5b9e\u9645\u4f7f\u7528\u65f6\u5927\u591a\u9700\u8981\u8f6c\u6362\u4e3a\u65f6\u949f\u5468\u671f, \u6545\u6b64\u6dfb\u52a0\u4ee5\u4e0b\u51fd\u6570, \u5728\u83b7\u53d6\u673a\u5668\u5468\u671f\u540e\u4e58\u4ee5 4 \u518d\u505a\u8fd4\u56de. impl Cpu { pub fn next(&mut self) -> u32 { self.ex() * 4 } }","title":"\u6307\u4ee4\u5468\u671f"},{"location":"content/gameboy/cpu/cycles/#_2","text":"\u76ee\u524d\u5bb6\u7528\u7535\u8111\u7684 CPU \u9891\u7387\u5df2\u7ecf\u666e\u904d\u5230\u8fbe GHz \u7ea7\u522b, \u4e3a\u4e86\u5b8c\u6210 Game Boy \u4eff\u771f\u5668, \u4eff\u771f\u5668\u7cfb\u7edf\u5fc5\u987b\u4fdd\u8bc1\u5448\u73b0\u7ed9\u5916\u90e8\u7684\u884c\u4e3a\u4e0e\u771f\u5b9e\u786c\u4ef6\u4e00\u81f4, \u56e0\u6b64\u4eff\u771f\u5668\u7cfb\u7edf\u5fc5\u987b\u4eba\u4e3a\u9650\u5236 LR35902 CPU \u4eff\u771f\u4ee3\u7801\u7684\u8fd0\u884c\u901f\u5ea6. \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u6700\u7b80\u5355\u4e5f\u662f\u6700\u5e38\u7528\u7684\u65b9\u6cd5: CPU \u4eff\u771f\u5668\u6bcf\u6267\u884c\u4e00\u6bb5\u6307\u4ee4\u540e\u4f11\u7720\u4e00\u6bb5\u65f6\u95f4, \u4f7f\u6bcf 1 \u79d2\u65f6\u95f4\u5185\u4eff\u771f\u5668\u6267\u884c\u7684\u6240\u6709\u6307\u4ee4\u7684\u6307\u4ee4\u5468\u671f\u4e4b\u548c\u4e3a 4194304. \u4e3a\u6b64\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784 RTC(Real Time Clock), \u7ecf\u7531\u5b83\u7684\u63a7\u5236\u6765\u9650\u5236\u6a21\u62df CPU \u7684\u6267\u884c\u901f\u5ea6. \u4e0b\u9762\u7684\u903b\u8f91\u4ee3\u7801\u6240\u6267\u884c\u7684\u64cd\u4f5c\u662f\u53ef\u4ee5\u8868\u8ff0\u4e3a\u4ee5\u4e0b\u51e0\u6b65: \u8bb0\u5f55\u5f53\u524d\u7684\u7cfb\u7edf\u65f6\u95f4 T. \u5f00\u59cb\u6267\u884c\u6307\u4ee4, \u5f53\u88ab\u6267\u884c\u7684\u6307\u4ee4\u4eec\u7684\u6307\u4ee4\u5468\u671f\u4e4b\u548c\u8fbe\u5230 67108(4194304 / 1000 * 16)\u65f6, \u5219\u8fdb\u884c\u4f11\u7720, \u76f4\u5230\u7cfb\u7edf\u65f6\u95f4\u5230\u8fbe T + 16 \u6beb\u79d2. \u91cd\u590d\u6b65\u9aa4 1. 16 \u6beb\u79d2\u662f\u4e00\u4e2a\u5728\u6e38\u620f\u9886\u57df\u548c\u4eff\u771f\u5668\u9886\u57df\u975e\u5e38\u5e38\u89c1\u7684\u503c, \u56e0\u4e3a\u5b83\u4ee3\u8868\u4e86 60 \u5e27\u7387: 16 \u6beb\u79d2 * 60 ~= 1000 \u6beb\u79d2 ~= 1 \u79d2. \u867d\u7136\u5e76\u4e0d\u9700\u8981\u4e00\u5b9a\u662f 16, \u4f46 16 \u771f\u7684\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u6570\u5b57. \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\u6240\u793a. pub const CLOCK_FREQUENCY: u32 = 4_194_304; pub const STEP_TIME: u32 = 16; pub const STEP_CYCLES: u32 = (STEP_TIME as f64 / (1000_f64 / CLOCK_FREQUENCY as f64)) as u32; // Real time cpu provided to simulate real hardware speed. pub struct Rtc { pub cpu: Cpu, step_cycles: u32, step_zero: time::SystemTime, step_flip: bool, } impl Rtc { pub fn power_up(term: Term, mem: Rc<RefCell<Memory>>) -> Self { let cpu = Cpu::power_up(term, mem); Self { cpu, step_cycles: 0, step_zero: time::SystemTime::now(), step_flip: false, } } // Function next simulates real hardware execution speed, by // limiting the frequency of the function cpu.next(). pub fn next(&mut self) -> u32 { if self.step_cycles > STEP_CYCLES { self.step_flip = true; self.step_cycles -= STEP_CYCLES; let d = time::SystemTime::now().duration_since(self.step_zero).unwrap(); let s = u64::from(STEP_TIME.saturating_sub(d.as_millis() as u32)); thread::sleep(time::Duration::from_millis(s)); self.step_zero = self .step_zero .checked_add(time::Duration::from_millis(u64::from(STEP_TIME))) .unwrap(); } let cycles = self.cpu.next(); self.step_cycles += cycles; cycles } pub fn flip(&mut self) -> bool { let r = self.step_flip; if r { self.step_flip = false; } r } } \u5176\u4e2d flip \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c, \u7528\u4e8e\u5224\u65ad\u662f\u5426\u4ea7\u751f\u4e86\u65b0\u7684\u4e00\u5e27. \u5728\u540e\u671f\u5b9e\u73b0\u89c6\u9891\u753b\u9762\u548c\u6e38\u620f\u624b\u67c4\u65f6\u4f1a\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u51fd\u6570, \u56e0\u4e3a\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u6bcf\u79d2\u5bf9\u4e00\u4e2a\u6307\u5b9a\u6761\u4ef6\u8fdb\u884c 60 \u6b21\u5224\u65ad. \u5982\u6b64\u4e00\u6765, \u4e00\u4e2a\u6309\u7167\u771f\u5b9e\u786c\u4ef6\u901f\u5ea6\u6267\u884c\u7684 CPU \u5728\u4ee3\u7801\u4e2d\u8bde\u751f\u4e86!","title":"\u9891\u7387\u4eff\u771f"},{"location":"content/gameboy/cpu/interrupts/","text":"LR35902 \u4e2d\u65ad \u4e2d\u65ad(Interrupt)\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u4e00\u4e2a\u672f\u8bed, \u6307 CPU \u63a5\u6536\u5230\u6765\u81ea\u786c\u4ef6\u6216\u8f6f\u4ef6\u7684\u4e8b\u4ef6\u4fe1\u53f7. \u6765\u81ea\u786c\u4ef6\u7684\u4e2d\u65ad\u79f0\u4e3a\u786c\u4ef6\u4e2d\u65ad, \u6765\u81ea\u8f6f\u4ef6\u7684\u4e2d\u65ad\u79f0\u4e3a\u8f6f\u4ef6\u4e2d\u65ad. \u5728\u63a5\u6536\u5230\u6765\u81ea\u5916\u56f4\u786c\u4ef6\u7684\u5f02\u6b65\u4fe1\u53f7, \u6216\u6765\u81ea\u8f6f\u4ef6\u7684\u540c\u6b65\u4fe1\u53f7\u4e4b\u540e, CPU \u5c06\u4f1a\u8fdb\u884c\u76f8\u5e94\u7684\u786c\u4ef6\u8f6f\u4ef6\u5904\u7406. \u53d1\u51fa\u4e2d\u65ad\u4fe1\u53f7\u79f0\u4e3a\u8fdb\u884c\u4e2d\u65ad\u8bf7\u6c42(Interrupt request, IRQ). \u786c\u4ef6\u4e2d\u65ad\u5c06\u5bfc\u81f4 CPU \u901a\u8fc7\u4e00\u4e2a\u8fd0\u884c\u65f6\u4e0a\u4e0b\u6587\u5207\u6362\u6765\u4fdd\u5b58\u5f53\u524d\u6267\u884c\u72b6\u6001(\u4ee5\u7a0b\u5e8f\u8ba1\u6570\u5668\u548c\u7a0b\u5e8f\u72b6\u6001\u5b57\u7b49\u5bc4\u5b58\u5668\u4fe1\u606f\u4e3a\u4e3b). \u8f6f\u4ef6\u4e2d\u65ad\u5219\u901a\u5e38\u4f5c\u4e3a CPU \u6307\u4ee4\u96c6\u4e2d\u7684\u4e00\u4e2a\u6307\u4ee4, \u4ee5\u53ef\u7f16\u7a0b\u7684\u65b9\u5f0f\u76f4\u63a5\u6307\u793a\u8fd9\u79cd\u8fd0\u884c\u4fe1\u606f\u5207\u6362, \u5e76\u5c06\u5904\u7406\u5bfc\u5411\u4e00\u6bb5\u4e2d\u65ad\u5904\u7406\u4ee3\u7801. \u4e2d\u65ad\u5728\u8ba1\u7b97\u673a\u591a\u4efb\u52a1\u5904\u7406, \u5c24\u5176\u662f\u5373\u65f6\u7cfb\u7edf\u4e2d\u5c24\u4e3a\u6709\u7528. \u8fd9\u6837\u7684\u7cfb\u7edf, \u5305\u62ec\u8fd0\u884c\u4e8e\u5176\u4e0a\u7684\u64cd\u4f5c\u7cfb\u7edf, \u4e5f\u88ab\u79f0\u4e3a\"\u4e2d\u65ad\u9a71\u52a8\u7684\"(interrupt-driven). \u4e2d\u65ad\u7684\u51e0\u4e2a\u8981\u70b9: \u4e2d\u65ad\u8bf7\u6c42\u6765\u81ea\u4e2d\u65ad\u6e90, \u4e2d\u65ad\u6e90\u901a\u5e38\u662f\u5916\u56f4\u786c\u4ef6. \u4e2d\u65ad\u4e0d\u662f\"\u5f02\u5e38\", \u800c\u662f CPU \u6b63\u5e38\u5904\u7406\u8fc7\u7a0b\u4e00\u90e8\u5206. CPU \u63a5\u53d7\u4e2d\u65ad\u8bf7\u6c42\u540e\u5c06\u6267\u884c\u8be5\u7c7b\u578b\u4e2d\u65ad\u8bf7\u6c42\u5bf9\u5e94\u7684\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f(ISR). CPU \u63a5\u53d7\u4e2d\u65ad\u8bf7\u6c42\u540e\u5c06\u8fdb\u884c\u4fdd\u7559\u73b0\u573a\u64cd\u4f5c, \u5728\u6267\u884c\u5b8c\u4e2d\u65ad\u8bf7\u6c42\u540e\u6267\u884c\u6062\u590d\u73b0\u573a\u64cd\u4f5c. \u4e2d\u65ad\u5b58\u5728\u4e2d\u65ad\u4f18\u5148\u7ea7\u7684\u6982\u5ff5, \u5373\u5f53\u591a\u4e2a\u4e2d\u65ad\u540c\u65f6\u5411\u5904\u7406\u5668\u53d1\u51fa\u8bf7\u6c42\u65f6, \u5904\u7406\u5668\u5c06\u5bf9\u8bf7\u6c42\u505a\u4f18\u5148\u7ea7\u7684\u6392\u5e8f. \u4e2d\u65ad\u53ef\u4ee5\u5b58\u5728/\u4e0d\u5b58\u5728\u5d4c\u5957, \u5373\u5f53 CPU \u6b63\u5728\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u65f6\u63a5\u53d7\u5230\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u4e2d\u65ad, CPU \u53ef\u4ee5\u9009\u62e9\"\u4e2d\u65ad\"\u5f53\u524d\u7684\u4e2d\u65ad\u8bf7\u6c42\u8f6c\u800c\u53bb\u6267\u884c\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u4e2d\u65ad\u8bf7\u6c42. LR35902 \u7528\u4e8e\u8d1f\u8d23\u5904\u7406\u4e2d\u65ad\u7684\u7ec4\u4ef6\u5305\u542b IME \u6807\u5fd7, IE \u5bc4\u5b58\u5668\u548c IF \u5bc4\u5b58\u5668\u7b49, \u73b0\u4ecb\u7ecd\u5982\u4e0b. IME \u6807\u5fd7, IE \u4e0e IF \u5bc4\u5b58\u5668 \u5728\u524d\u9762\u4ecb\u7ecd\u6807\u51c6\u6307\u4ee4\u96c6\u7684\u5c0f\u8282\u4e2d, \u5df2\u7ecf\u4e86\u89e3\u5230\u6709 3 \u4e2a\u6307\u4ee4 EI(0xfb), DI(0xf3) \u4e0e RETI(0xd9) \u53ef\u4ee5\u5206\u522b\u542f\u7528\u548c\u7981\u7528\u4e2d\u65ad. CPU \u901a\u8fc7 IME(interrupt master enable) \u6807\u5fd7\u7528\u6765\u4fdd\u5b58\u4e2d\u65ad\u662f\u5426\u88ab\u7981\u7528\u7684\u4fe1\u606f: EI \u6307\u4ee4\u4f7f IME \u7f6e\u4f4d, DI \u6307\u4ee4\u4f7f IME \u7f6e\u96f6. CPU \u5185\u6709\u4e24\u4e2a\u5bc4\u5b58\u5668\u53c2\u4e0e\u4e2d\u65ad\u7684\u903b\u8f91\u63a7\u5236, \u5b83\u4eec\u5206\u522b\u662f IE \u4e0e IF, \u5176\u5177\u4f53\u8bf4\u660e\u5982\u4e0b. IE IE(Interrupt Enable)\u5bc4\u5b58\u5668\u6620\u5c04\u81f3\u5730\u5740 0xffff, \u5b83\u540c\u6837\u63a7\u5236\u4e2d\u65ad\u7684\u542f\u7528\u6216\u7981\u7528, \u4f46\u4e0d\u540c\u7684\u662f\u5b83\u53ea\u8d1f\u8d23\u67d0\u4e00\u5177\u4f53\u7c7b\u578b\u7684\u4e2d\u65ad, \u4e0e IME \u4e4b\u95f4\u7684\u533a\u522b\u7c7b\u4f3c\u603b\u63a7\u5f00\u5173\u4e0e\u666e\u901a\u5f00\u5173\u7684\u533a\u522b. Game Boy \u603b\u5171\u4f1a\u4ea7\u751f 5 \u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4e2d\u65ad, \u5b83\u4eec\u5206\u522b\u662f: V-Blank LCD STAT Timer Serial Joypad \u8fd9\u4e9b\u4e2d\u65ad\u8bf7\u6c42\u5206\u522b\u6765\u81ea\u4e8e\u4e0d\u540c\u7684\u5916\u56f4\u786c\u4ef6: GPU, \u5185\u90e8\u5b9a\u65f6\u5668, \u4e32\u884c\u63a5\u53e3\u4e0e\u624b\u67c4\u7b49. IE \u5bc4\u5b58\u5668\u7684\u4f4e 5 \u4f4d\u63a7\u5236\u8fd9\u4e9b\u4e2d\u65ad\u8bf7\u6c42\u7684\u542f\u7528\u6216\u7981\u7528. \u4f4d \u540d\u79f0 \u8bf4\u660e 0 V-Blank Interrupt Enable (INT 40h) (1=Enable) 1 LCD STAT Interrupt Enable (INT 48h) (1=Enable) 2 Timer Interrupt Enable (INT 50h) (1=Enable) 3 Serial Interrupt Enable (INT 58h) (1=Enable) 4 Joypad Interrupt Enable (INT 60h) (1=Enable) IF IF(Interrupt Flag)\u5bc4\u5b58\u5668\u6620\u5c04\u81f3\u5730\u5740 0xff0f, \u8d1f\u8d23\u4fdd\u5b58\u5f53\u524d\u5df2\u7ecf\u4ea7\u751f\u7684\u4e2d\u65ad\u8bf7\u6c42. \u4f4d \u540d\u79f0 \u8bf4\u660e 0 V-Blank Interrupt Request (INT 40h) (1=Request) 1 LCD STAT Interrupt Request (INT 48h) (1=Request) 2 Timer Interrupt Request (INT 50h) (1=Request) 3 Serial Interrupt Request (INT 58h) (1=Request) 4 Joypad Interrupt Request (INT 60h) (1=Request) \u5f53\u5916\u56f4\u786c\u4ef6\u7684\u4e2d\u65ad\u4fe1\u53f7\u4ece\u4f4e\u7535\u5e73\u53d8\u4e3a\u9ad8\u7535\u5e73\u65f6, IF \u5bc4\u5b58\u5668\u4e2d\u7684\u76f8\u5e94\u4f4d\u7f6e\u4f4d. \u4f8b\u5982, \u5f53 LCD \u63a7\u5236\u5668\u8fdb\u5165 V-Blank \u5468\u671f\u65f6, \u7b2c 0 \u4f4d\u7f6e\u4f4d. \u4e2d\u65ad\u8bf7\u6c42\u4e0e\u6267\u884c \u5f53\u4e2d\u65ad\u8bf7\u6c42\u53d1\u751f\u65f6, IF \u5bc4\u5b58\u5668\u4e2d\u7684\u76f8\u5e94\u4f4d\u7f6e\u4f4d. \u53ea\u6709\u5f53 IME \u6807\u5fd7\u548c IE \u5bc4\u5b58\u5668\u4e2d\u7684\u76f8\u5e94\u4f4d\u90fd\u7f6e\u4f4d\u65f6, \u624d\u4f1a\u53d1\u751f\u5b9e\u9645\u7684\u4e2d\u65ad\u6267\u884c, \u5426\u5219\u4e2d\u65ad\u8bf7\u6c42\u5c06\"\u7b49\u5f85\"\u76f4\u5230 IME \u548c IE \u90fd\u5141\u8bb8\u5176\u6267\u884c. \u5f53\u4e2d\u65ad\u6267\u884c\u65f6, IF \u5bc4\u5b58\u5668\u4e2d\u7684\u76f8\u5e94\u4f4d\u5c06\u7531 CPU \u81ea\u52a8\u590d\u4f4d, \u5e76\u4e14 IME \u6807\u5fd7\u53d8\u4e3a\u6e05\u96f6\u72b6\u6001(\u5728\u7a0b\u5e8f\u91cd\u65b0\u542f\u7528\u4e2d\u65ad\u4e4b\u524d, \u901a\u5e38\u4f7f\u7528 RETI \u6307\u4ee4\u53d6\u6d88\u4efb\u4f55\u8fdb\u4e00\u6b65\u7684\u4e2d\u65ad). CPU \u5c06\u8c03\u7528\u4e2d\u65ad\u8bf7\u6c42\u5bf9\u5e94\u7684\u4e2d\u65ad\u5411\u91cf(\u5373 0x0040-0x0060 \u8303\u56f4\u5185\u7684\u5730\u5740, \u5982\u4e0a\u9762\u7684 IE \u548c IF \u5bc4\u5b58\u5668\u63cf\u8ff0\u6240\u793a). \u5728\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\u4e0b, \u53ef\u80fd\u4f1a\u53d1\u751f IF \u5bc4\u5b58\u5668\u4e2d\u591a\u4e2a\u4f4d\u7f6e\u4f4d\u7684\u60c5\u51b5, \u5373\u540c\u65f6\u8bf7\u6c42\u591a\u4e2a\u4e2d\u65ad: \u591a\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u540c\u65f6\u4ece\u4f4e\u7535\u5e73\u53d8\u4e3a\u9ad8\u7535\u5e73 \u5728\u4e00\u6bb5\u4e8b\u4ef6\u5185\u8bf7\u6c42\u4e86\u591a\u4e2a\u4e2d\u65ad, \u4f46 IME/IE \u5bc4\u5b58\u5668\u4e0d\u5141\u8bb8\u5176\u7acb\u5373\u6267\u884c \u7528\u6237\u624b\u52a8\u5411 IF \u5bc4\u5b58\u5668\u5199\u5165\u503c \u5982\u679c IME \u548c IE \u5141\u8bb8\u6267\u884c\u591a\u4e2a\u8bf7\u6c42\u7684\u4e2d\u65ad, \u5219\u9996\u5148\u6267\u884c\u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u4e2d\u65ad. \u4f18\u5148\u7ea7\u6309 IE \u548c IF \u5bc4\u5b58\u5668\u4e2d\u7684\u4f4d\u6392\u5e8f, \u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u662f\u4f4d 0(V-Blank), \u5177\u6709\u6700\u4f4e\u4f18\u5148\u7ea7\u7684\u4f4d 4(Joypad). \u4ee3\u7801\u5b9e\u73b0 \u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\u8868\u793a 5 \u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4e2d\u65ad: pub enum Flag { VBlank = 0, LCDStat = 1, Timer = 2, Serial = 3, Joypad = 4, } \u5b9a\u4e49 IF \u5bc4\u5b58\u5668\u5982\u4e0b. \u5f53 IF \u5bc4\u5b58\u5668\u6536\u5230\u4e0d\u540c\u7684\u4e2d\u65ad\u65f6, \u5176\u7279\u5b9a\u4f4d\u53ef\u4ee5\u88ab\u7f6e\u4f4d. pub struct Intf { pub data: u8, } impl Intf { pub fn power_up() -> Self { Self { data: 0x00 } } pub fn hi(&mut self, flag: Flag) { self.data |= 1 << flag as u8; } } \u4e3a CPU \u5b9e\u73b0\u4e2d\u65ad\u5904\u7406\u903b\u8f91. \u4e2d\u65ad\u5904\u7406\u51fd\u6570\u8fd4\u56de CPU \u673a\u5668\u5468\u671f, \u56e0\u4e3a LR35902 \u4e2d\u65ad\u5904\u7406\u56fa\u5b9a\u6d88\u8d39 4 \u4e2a\u673a\u5668\u5468\u671f, \u6240\u4ee5\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a 0 \u6216 4 \u4e4b\u4e00. impl Cpu { fn hi(&mut self) -> u32 { if !self.halted && !self.ei { return 0; } let intf = self.mem.borrow().get(0xff0f); let inte = self.mem.borrow().get(0xffff); let ii = intf & inte; if ii == 0x00 { return 0; } self.halted = false; if !self.ei { return 0; } self.ei = false; // Consumer an interrupter, the rest is written back to the register let n = ii.trailing_zeros(); let intf = intf & !(1 << n); self.mem.borrow_mut().set(0xff0f, intf); self.stack_add(self.reg.pc); // Set the PC to correspond interrupt process program: // V-Blank: 0x40 // LCD: 0x48 // TIMER: 0x50 // JOYPAD: 0x60 // Serial: 0x58 self.reg.pc = 0x0040 | ((n as u16) << 3); 4 } } \u6700\u540e, \u6bcf\u5f53 CPU \u6267\u884c\u6307\u4ee4\u4e4b\u524d\u90fd\u9700\u8981\u505a\u4e00\u6b21\u4e2d\u65ad\u5224\u65ad, \u56e0\u6b64\u5728 next \u51fd\u6570\u5185\u5199\u5165\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u5982\u4e0b: impl Cpu { pub fn next(&mut self) -> u32 { let mac = { let c = self.hi(); if c != 0 { c } else if self.halted { OP_CYCLES[0] } else { self.ex() } }; mac * 4 } }","title":"GB-CPU-LR35902\u4e2d\u65ad"},{"location":"content/gameboy/cpu/interrupts/#lr35902","text":"\u4e2d\u65ad(Interrupt)\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u4e00\u4e2a\u672f\u8bed, \u6307 CPU \u63a5\u6536\u5230\u6765\u81ea\u786c\u4ef6\u6216\u8f6f\u4ef6\u7684\u4e8b\u4ef6\u4fe1\u53f7. \u6765\u81ea\u786c\u4ef6\u7684\u4e2d\u65ad\u79f0\u4e3a\u786c\u4ef6\u4e2d\u65ad, \u6765\u81ea\u8f6f\u4ef6\u7684\u4e2d\u65ad\u79f0\u4e3a\u8f6f\u4ef6\u4e2d\u65ad. \u5728\u63a5\u6536\u5230\u6765\u81ea\u5916\u56f4\u786c\u4ef6\u7684\u5f02\u6b65\u4fe1\u53f7, \u6216\u6765\u81ea\u8f6f\u4ef6\u7684\u540c\u6b65\u4fe1\u53f7\u4e4b\u540e, CPU \u5c06\u4f1a\u8fdb\u884c\u76f8\u5e94\u7684\u786c\u4ef6\u8f6f\u4ef6\u5904\u7406. \u53d1\u51fa\u4e2d\u65ad\u4fe1\u53f7\u79f0\u4e3a\u8fdb\u884c\u4e2d\u65ad\u8bf7\u6c42(Interrupt request, IRQ). \u786c\u4ef6\u4e2d\u65ad\u5c06\u5bfc\u81f4 CPU \u901a\u8fc7\u4e00\u4e2a\u8fd0\u884c\u65f6\u4e0a\u4e0b\u6587\u5207\u6362\u6765\u4fdd\u5b58\u5f53\u524d\u6267\u884c\u72b6\u6001(\u4ee5\u7a0b\u5e8f\u8ba1\u6570\u5668\u548c\u7a0b\u5e8f\u72b6\u6001\u5b57\u7b49\u5bc4\u5b58\u5668\u4fe1\u606f\u4e3a\u4e3b). \u8f6f\u4ef6\u4e2d\u65ad\u5219\u901a\u5e38\u4f5c\u4e3a CPU \u6307\u4ee4\u96c6\u4e2d\u7684\u4e00\u4e2a\u6307\u4ee4, \u4ee5\u53ef\u7f16\u7a0b\u7684\u65b9\u5f0f\u76f4\u63a5\u6307\u793a\u8fd9\u79cd\u8fd0\u884c\u4fe1\u606f\u5207\u6362, \u5e76\u5c06\u5904\u7406\u5bfc\u5411\u4e00\u6bb5\u4e2d\u65ad\u5904\u7406\u4ee3\u7801. \u4e2d\u65ad\u5728\u8ba1\u7b97\u673a\u591a\u4efb\u52a1\u5904\u7406, \u5c24\u5176\u662f\u5373\u65f6\u7cfb\u7edf\u4e2d\u5c24\u4e3a\u6709\u7528. \u8fd9\u6837\u7684\u7cfb\u7edf, \u5305\u62ec\u8fd0\u884c\u4e8e\u5176\u4e0a\u7684\u64cd\u4f5c\u7cfb\u7edf, \u4e5f\u88ab\u79f0\u4e3a\"\u4e2d\u65ad\u9a71\u52a8\u7684\"(interrupt-driven). \u4e2d\u65ad\u7684\u51e0\u4e2a\u8981\u70b9: \u4e2d\u65ad\u8bf7\u6c42\u6765\u81ea\u4e2d\u65ad\u6e90, \u4e2d\u65ad\u6e90\u901a\u5e38\u662f\u5916\u56f4\u786c\u4ef6. \u4e2d\u65ad\u4e0d\u662f\"\u5f02\u5e38\", \u800c\u662f CPU \u6b63\u5e38\u5904\u7406\u8fc7\u7a0b\u4e00\u90e8\u5206. CPU \u63a5\u53d7\u4e2d\u65ad\u8bf7\u6c42\u540e\u5c06\u6267\u884c\u8be5\u7c7b\u578b\u4e2d\u65ad\u8bf7\u6c42\u5bf9\u5e94\u7684\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f(ISR). CPU \u63a5\u53d7\u4e2d\u65ad\u8bf7\u6c42\u540e\u5c06\u8fdb\u884c\u4fdd\u7559\u73b0\u573a\u64cd\u4f5c, \u5728\u6267\u884c\u5b8c\u4e2d\u65ad\u8bf7\u6c42\u540e\u6267\u884c\u6062\u590d\u73b0\u573a\u64cd\u4f5c. \u4e2d\u65ad\u5b58\u5728\u4e2d\u65ad\u4f18\u5148\u7ea7\u7684\u6982\u5ff5, \u5373\u5f53\u591a\u4e2a\u4e2d\u65ad\u540c\u65f6\u5411\u5904\u7406\u5668\u53d1\u51fa\u8bf7\u6c42\u65f6, \u5904\u7406\u5668\u5c06\u5bf9\u8bf7\u6c42\u505a\u4f18\u5148\u7ea7\u7684\u6392\u5e8f. \u4e2d\u65ad\u53ef\u4ee5\u5b58\u5728/\u4e0d\u5b58\u5728\u5d4c\u5957, \u5373\u5f53 CPU \u6b63\u5728\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u65f6\u63a5\u53d7\u5230\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u4e2d\u65ad, CPU \u53ef\u4ee5\u9009\u62e9\"\u4e2d\u65ad\"\u5f53\u524d\u7684\u4e2d\u65ad\u8bf7\u6c42\u8f6c\u800c\u53bb\u6267\u884c\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u4e2d\u65ad\u8bf7\u6c42. LR35902 \u7528\u4e8e\u8d1f\u8d23\u5904\u7406\u4e2d\u65ad\u7684\u7ec4\u4ef6\u5305\u542b IME \u6807\u5fd7, IE \u5bc4\u5b58\u5668\u548c IF \u5bc4\u5b58\u5668\u7b49, \u73b0\u4ecb\u7ecd\u5982\u4e0b.","title":"LR35902 \u4e2d\u65ad"},{"location":"content/gameboy/cpu/interrupts/#ime-ie-if","text":"\u5728\u524d\u9762\u4ecb\u7ecd\u6807\u51c6\u6307\u4ee4\u96c6\u7684\u5c0f\u8282\u4e2d, \u5df2\u7ecf\u4e86\u89e3\u5230\u6709 3 \u4e2a\u6307\u4ee4 EI(0xfb), DI(0xf3) \u4e0e RETI(0xd9) \u53ef\u4ee5\u5206\u522b\u542f\u7528\u548c\u7981\u7528\u4e2d\u65ad. CPU \u901a\u8fc7 IME(interrupt master enable) \u6807\u5fd7\u7528\u6765\u4fdd\u5b58\u4e2d\u65ad\u662f\u5426\u88ab\u7981\u7528\u7684\u4fe1\u606f: EI \u6307\u4ee4\u4f7f IME \u7f6e\u4f4d, DI \u6307\u4ee4\u4f7f IME \u7f6e\u96f6. CPU \u5185\u6709\u4e24\u4e2a\u5bc4\u5b58\u5668\u53c2\u4e0e\u4e2d\u65ad\u7684\u903b\u8f91\u63a7\u5236, \u5b83\u4eec\u5206\u522b\u662f IE \u4e0e IF, \u5176\u5177\u4f53\u8bf4\u660e\u5982\u4e0b. IE IE(Interrupt Enable)\u5bc4\u5b58\u5668\u6620\u5c04\u81f3\u5730\u5740 0xffff, \u5b83\u540c\u6837\u63a7\u5236\u4e2d\u65ad\u7684\u542f\u7528\u6216\u7981\u7528, \u4f46\u4e0d\u540c\u7684\u662f\u5b83\u53ea\u8d1f\u8d23\u67d0\u4e00\u5177\u4f53\u7c7b\u578b\u7684\u4e2d\u65ad, \u4e0e IME \u4e4b\u95f4\u7684\u533a\u522b\u7c7b\u4f3c\u603b\u63a7\u5f00\u5173\u4e0e\u666e\u901a\u5f00\u5173\u7684\u533a\u522b. Game Boy \u603b\u5171\u4f1a\u4ea7\u751f 5 \u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4e2d\u65ad, \u5b83\u4eec\u5206\u522b\u662f: V-Blank LCD STAT Timer Serial Joypad \u8fd9\u4e9b\u4e2d\u65ad\u8bf7\u6c42\u5206\u522b\u6765\u81ea\u4e8e\u4e0d\u540c\u7684\u5916\u56f4\u786c\u4ef6: GPU, \u5185\u90e8\u5b9a\u65f6\u5668, \u4e32\u884c\u63a5\u53e3\u4e0e\u624b\u67c4\u7b49. IE \u5bc4\u5b58\u5668\u7684\u4f4e 5 \u4f4d\u63a7\u5236\u8fd9\u4e9b\u4e2d\u65ad\u8bf7\u6c42\u7684\u542f\u7528\u6216\u7981\u7528. \u4f4d \u540d\u79f0 \u8bf4\u660e 0 V-Blank Interrupt Enable (INT 40h) (1=Enable) 1 LCD STAT Interrupt Enable (INT 48h) (1=Enable) 2 Timer Interrupt Enable (INT 50h) (1=Enable) 3 Serial Interrupt Enable (INT 58h) (1=Enable) 4 Joypad Interrupt Enable (INT 60h) (1=Enable) IF IF(Interrupt Flag)\u5bc4\u5b58\u5668\u6620\u5c04\u81f3\u5730\u5740 0xff0f, \u8d1f\u8d23\u4fdd\u5b58\u5f53\u524d\u5df2\u7ecf\u4ea7\u751f\u7684\u4e2d\u65ad\u8bf7\u6c42. \u4f4d \u540d\u79f0 \u8bf4\u660e 0 V-Blank Interrupt Request (INT 40h) (1=Request) 1 LCD STAT Interrupt Request (INT 48h) (1=Request) 2 Timer Interrupt Request (INT 50h) (1=Request) 3 Serial Interrupt Request (INT 58h) (1=Request) 4 Joypad Interrupt Request (INT 60h) (1=Request) \u5f53\u5916\u56f4\u786c\u4ef6\u7684\u4e2d\u65ad\u4fe1\u53f7\u4ece\u4f4e\u7535\u5e73\u53d8\u4e3a\u9ad8\u7535\u5e73\u65f6, IF \u5bc4\u5b58\u5668\u4e2d\u7684\u76f8\u5e94\u4f4d\u7f6e\u4f4d. \u4f8b\u5982, \u5f53 LCD \u63a7\u5236\u5668\u8fdb\u5165 V-Blank \u5468\u671f\u65f6, \u7b2c 0 \u4f4d\u7f6e\u4f4d.","title":"IME \u6807\u5fd7, IE \u4e0e IF \u5bc4\u5b58\u5668"},{"location":"content/gameboy/cpu/interrupts/#_1","text":"\u5f53\u4e2d\u65ad\u8bf7\u6c42\u53d1\u751f\u65f6, IF \u5bc4\u5b58\u5668\u4e2d\u7684\u76f8\u5e94\u4f4d\u7f6e\u4f4d. \u53ea\u6709\u5f53 IME \u6807\u5fd7\u548c IE \u5bc4\u5b58\u5668\u4e2d\u7684\u76f8\u5e94\u4f4d\u90fd\u7f6e\u4f4d\u65f6, \u624d\u4f1a\u53d1\u751f\u5b9e\u9645\u7684\u4e2d\u65ad\u6267\u884c, \u5426\u5219\u4e2d\u65ad\u8bf7\u6c42\u5c06\"\u7b49\u5f85\"\u76f4\u5230 IME \u548c IE \u90fd\u5141\u8bb8\u5176\u6267\u884c. \u5f53\u4e2d\u65ad\u6267\u884c\u65f6, IF \u5bc4\u5b58\u5668\u4e2d\u7684\u76f8\u5e94\u4f4d\u5c06\u7531 CPU \u81ea\u52a8\u590d\u4f4d, \u5e76\u4e14 IME \u6807\u5fd7\u53d8\u4e3a\u6e05\u96f6\u72b6\u6001(\u5728\u7a0b\u5e8f\u91cd\u65b0\u542f\u7528\u4e2d\u65ad\u4e4b\u524d, \u901a\u5e38\u4f7f\u7528 RETI \u6307\u4ee4\u53d6\u6d88\u4efb\u4f55\u8fdb\u4e00\u6b65\u7684\u4e2d\u65ad). CPU \u5c06\u8c03\u7528\u4e2d\u65ad\u8bf7\u6c42\u5bf9\u5e94\u7684\u4e2d\u65ad\u5411\u91cf(\u5373 0x0040-0x0060 \u8303\u56f4\u5185\u7684\u5730\u5740, \u5982\u4e0a\u9762\u7684 IE \u548c IF \u5bc4\u5b58\u5668\u63cf\u8ff0\u6240\u793a). \u5728\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\u4e0b, \u53ef\u80fd\u4f1a\u53d1\u751f IF \u5bc4\u5b58\u5668\u4e2d\u591a\u4e2a\u4f4d\u7f6e\u4f4d\u7684\u60c5\u51b5, \u5373\u540c\u65f6\u8bf7\u6c42\u591a\u4e2a\u4e2d\u65ad: \u591a\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u540c\u65f6\u4ece\u4f4e\u7535\u5e73\u53d8\u4e3a\u9ad8\u7535\u5e73 \u5728\u4e00\u6bb5\u4e8b\u4ef6\u5185\u8bf7\u6c42\u4e86\u591a\u4e2a\u4e2d\u65ad, \u4f46 IME/IE \u5bc4\u5b58\u5668\u4e0d\u5141\u8bb8\u5176\u7acb\u5373\u6267\u884c \u7528\u6237\u624b\u52a8\u5411 IF \u5bc4\u5b58\u5668\u5199\u5165\u503c \u5982\u679c IME \u548c IE \u5141\u8bb8\u6267\u884c\u591a\u4e2a\u8bf7\u6c42\u7684\u4e2d\u65ad, \u5219\u9996\u5148\u6267\u884c\u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u4e2d\u65ad. \u4f18\u5148\u7ea7\u6309 IE \u548c IF \u5bc4\u5b58\u5668\u4e2d\u7684\u4f4d\u6392\u5e8f, \u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u662f\u4f4d 0(V-Blank), \u5177\u6709\u6700\u4f4e\u4f18\u5148\u7ea7\u7684\u4f4d 4(Joypad).","title":"\u4e2d\u65ad\u8bf7\u6c42\u4e0e\u6267\u884c"},{"location":"content/gameboy/cpu/interrupts/#_2","text":"\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\u8868\u793a 5 \u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4e2d\u65ad: pub enum Flag { VBlank = 0, LCDStat = 1, Timer = 2, Serial = 3, Joypad = 4, } \u5b9a\u4e49 IF \u5bc4\u5b58\u5668\u5982\u4e0b. \u5f53 IF \u5bc4\u5b58\u5668\u6536\u5230\u4e0d\u540c\u7684\u4e2d\u65ad\u65f6, \u5176\u7279\u5b9a\u4f4d\u53ef\u4ee5\u88ab\u7f6e\u4f4d. pub struct Intf { pub data: u8, } impl Intf { pub fn power_up() -> Self { Self { data: 0x00 } } pub fn hi(&mut self, flag: Flag) { self.data |= 1 << flag as u8; } } \u4e3a CPU \u5b9e\u73b0\u4e2d\u65ad\u5904\u7406\u903b\u8f91. \u4e2d\u65ad\u5904\u7406\u51fd\u6570\u8fd4\u56de CPU \u673a\u5668\u5468\u671f, \u56e0\u4e3a LR35902 \u4e2d\u65ad\u5904\u7406\u56fa\u5b9a\u6d88\u8d39 4 \u4e2a\u673a\u5668\u5468\u671f, \u6240\u4ee5\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a 0 \u6216 4 \u4e4b\u4e00. impl Cpu { fn hi(&mut self) -> u32 { if !self.halted && !self.ei { return 0; } let intf = self.mem.borrow().get(0xff0f); let inte = self.mem.borrow().get(0xffff); let ii = intf & inte; if ii == 0x00 { return 0; } self.halted = false; if !self.ei { return 0; } self.ei = false; // Consumer an interrupter, the rest is written back to the register let n = ii.trailing_zeros(); let intf = intf & !(1 << n); self.mem.borrow_mut().set(0xff0f, intf); self.stack_add(self.reg.pc); // Set the PC to correspond interrupt process program: // V-Blank: 0x40 // LCD: 0x48 // TIMER: 0x50 // JOYPAD: 0x60 // Serial: 0x58 self.reg.pc = 0x0040 | ((n as u16) << 3); 4 } } \u6700\u540e, \u6bcf\u5f53 CPU \u6267\u884c\u6307\u4ee4\u4e4b\u524d\u90fd\u9700\u8981\u505a\u4e00\u6b21\u4e2d\u65ad\u5224\u65ad, \u56e0\u6b64\u5728 next \u51fd\u6570\u5185\u5199\u5165\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u5982\u4e0b: impl Cpu { pub fn next(&mut self) -> u32 { let mac = { let c = self.hi(); if c != 0 { c } else if self.halted { OP_CYCLES[0] } else { self.ex() } }; mac * 4 } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/cpu/isa/","text":"\u6307\u4ee4\u4e0e\u6307\u4ee4\u96c6 \u5230\u76ee\u524d\u4e3a\u6b62, \u867d\u7136 CPU \u5df2\u7ecf\u62e5\u6709\u4e86\u7b97\u672f\u903b\u8f91\u5355\u5143 ALU \u8fdb\u884c\u7b97\u672f\u903b\u8f91\u8fd0\u7b97\u548c\u4f7f\u7528\u5bc4\u5b58\u5668\u5b58\u50a8\u6570\u636e, \u4f46\u5b83\u4ecd\u7136\u7f3a\u5c11\u4e00\u4e9b\u6b63\u5e38\u5de5\u4f5c\u65f6\u9700\u8981\u7684\u4fe1\u606f. \u5c31\u50cf\u5efa\u7b51\u5de5\u4eba\u65e0\u6cd5\u4ec5\u4ec5\u4f9d\u9760\u6750\u6599\u548c\u5de5\u5177\u51ed\u7a7a\u9020\u51fa\u4e00\u680b\u9ad8\u697c\u5927\u53a6, \u9664\u975e\u5efa\u7b51\u5e08\u80fd\u4e3a\u5176\u63d0\u4f9b\u8be6\u7ec6\u7684\u5efa\u7b51\u56fe\u7eb8. CPU \u4e5f\u662f\u4e00\u6837\u7684, \u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u544a\u8bc9 CPU \u4e0b\u4e00\u6b65\u7684\u5de5\u4f5c\u5185\u5bb9, CPU \u624d\u80fd\u6709\u5e8f\u7684\u5c55\u5f00\u5de5\u4f5c. \u4ec0\u4e48\u662f\u6307\u4ee4 \u7c7b\u4f3c\u4eba\u4e0e\u4eba\u4e4b\u95f4\u7684\u4ea4\u6d41\u6240\u4f7f\u7528\u7684\u8bed\u8a00, \u5f00\u53d1\u8005\u4e0e CPU \u8fdb\u884c\u4ea4\u6d41\u4f7f\u7528\u7684\u8bed\u8a00\u88ab\u79f0\u4e3a\"\u673a\u5668\u8bed\u8a00\". \u73b0\u5b9e\u4e16\u754c\u7684\u82f1\u8bed\u7531\u5404\u79cd\u5355\u8bcd\u6784\u6210, \u5e76\u6709\u5176\u56fa\u5b9a\u7684\u8bed\u6cd5\u89c4\u5219, \u673a\u5668\u8bed\u8a00\u4e5f\u662f\u4e00\u6837\u7684, \u673a\u5668\u8bed\u8a00\u6240\u9650\u5b9a\u7684\u53ef\u4ee5\u4f7f\u7528\u7684\"\u5355\u8bcd\"\u53ca\u5176\u8bed\u6cd5\u89c4\u5219\u88ab\u79f0\u4e3a\"\u6307\u4ee4\u96c6\". \u987e\u540d\u601d\u4e49, \u6307\u4ee4\u96c6\u662f\u4e00\u7ec4\u6307\u4ee4\u7684\u96c6\u5408, \u6307\u4ee4\u5219\u662f CPU \u8fdb\u884c\u64cd\u4f5c\u7684\u6700\u5c0f\u5355\u5143. \u6307\u4ee4\u96c6\u662f\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e2d\u4e0e\u7a0b\u5e8f\u8bbe\u8ba1\u6709\u5173\u7684\u90e8\u5206, \u5305\u542b\u4e86\u57fa\u672c\u6570\u636e\u7c7b\u578b, \u6307\u4ee4\u96c6, \u5bc4\u5b58\u5668, \u5bfb\u5740\u6a21\u5f0f, \u5b58\u50a8\u4f53\u7cfb, \u4e2d\u65ad, \u5f02\u5e38\u5904\u7406\u4ee5\u53ca\u5916\u90e8 I/O. \u6307\u4ee4\u96c6\u5305\u542b\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u7801(Operation Code, \u7f29\u5199 OPCode), \u4ee5\u53ca\u7531\u7279\u5b9a\u5904\u7406\u5668\u6267\u884c\u7684\u57fa\u672c\u547d\u4ee4. \u6307\u4ee4\u96c6\u662f CPU \u5177\u4f53\u786c\u4ef6\u5b9e\u73b0\u4e0e\u5176\u4e0a\u5c42\u8fd0\u884c\u7684\u8f6f\u4ef6\u4e4b\u95f4\u7684\u4e00\u5c42\u62bd\u8c61, \u5b83\u8fde\u63a5\u5e94\u7528\u5c42\u4e0e\u5e95\u5c42\u786c\u4ef6, \u4f7f\u5f97\u5e94\u7528\u5c42\u8f6f\u4ef6\u65e0\u9700\u505a\u4efb\u4f55\u4fee\u6539\u4fbf\u80fd\u8fd0\u884c\u5728\u62e5\u6709\u76f8\u540c\u6307\u4ee4\u96c6\u67b6\u6784\u7684\u4e0d\u540c\u5904\u7406\u5668\u4e0a. \u6307\u4ee4\u96c6\u67b6\u6784\u662f\u533a\u5206\u4e0d\u540c CPU \u7684\u4e3b\u8981\u4f9d\u636e, \u5c31\u50cf Intel \u548c AMD \u867d\u7136\u5206\u522b\u63a8\u51fa\u4e86\u5f88\u591a\u4e0d\u540c\u578b\u53f7\u548c\u6027\u80fd\u7684 CPU, \u4f46\u5b83\u4eec\u4ecd\u7136\u88ab\u7edf\u4e00\u79f0\u4e3a x86 \u67b6\u6784. push h mov a,d inx h add h \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u6458\u6284\u81ea Game Boy CPU \u7684\u6d4b\u8bd5\u7528\u4f8b, \u5b83\u867d\u7136\u5185\u5bb9\u4e0d\u591a, \u4f46\u53ef\u4ee5\u5f88\u597d\u5bf9\u6307\u4ee4\u8fdb\u884c\u9610\u91ca. push h \u5c06\u5bc4\u5b58\u5668 H \u4e2d\u7684\u503c\u5165\u6808. \u6808(Stack)\u53c8\u79f0\u4e3a\u5806\u6808\u6216\u5806\u53e0, \u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u4e00\u79cd\u62bd\u8c61\u6570\u636e\u7c7b\u578b, \u53ea\u5141\u8bb8\u5728\u6709\u5e8f\u7684\u7ebf\u6027\u6570\u636e\u96c6\u5408\u7684\u4e00\u7aef(Top, \u6808\u9876)\u8fdb\u884c\u52a0\u5165\u6570\u636e(Push)\u548c\u79fb\u9664\u6570\u636e(Pop)\u7684\u8fd0\u7b97, \u6309\u7167\u540e\u8fdb\u5148\u51fa(LIFO, Last In First Out)\u7684\u539f\u7406\u8fd0\u4f5c. \u5c31 LR35902 CPU \u672c\u8eab\u6765\u8bf4, \u5b83\u672c\u8eab\u5e76\u6ca1\u6709\"\u6808\"\u8fd9\u6837\u7684\u771f\u5b9e\u786c\u4ef6\u7ed3\u6784, \u5b83\u7684\u6808\u662f\u5185\u5b58\u4e2d\u7684\u4e00\u5757\u7279\u6b8a\u7684\u8fde\u7eed\u533a\u57df, \u540c\u65f6\u6709\u4e00\u4e2a\u7f16\u53f7\u4e3a SP \u7684\u5bc4\u5b58\u5668\u8bb0\u5f55\u5f53\u524d\u7684\u6808\u9876\u5730\u5740. \u5982\u4e0b\u6240\u793a, \u73b0\u5728\u6709\u4e00\u5757\u521d\u59cb\u5316\u7684\u6808\u7ed3\u6784, \u6808\u6df1\u5ea6\u4e3a 10, \u540c\u65f6 SP \u5bc4\u5b58\u5668\u4fdd\u5b58\u7684\u503c\u662f 0x4000. +-------------+ | 0x4009 0x00 | | ... 0x00 | | ... 0x00 | | 0x4001 0x00 | | 0x4000 0x00 | <--- SP +-------------+ \u5982\u679c CPU \u6b64\u65f6\u6267\u884c\u5230 push 0xff \u64cd\u4f5c, \u5219\u64cd\u4f5c\u8fc7\u540e\u7684\u6808\u7ed3\u6784\u4e3a: +-------------+ | 0x4009 0x00 | | ... 0x00 | | ... 0x00 | | 0x4001 0x00 | <--- SP (SP \u52a0 1) | 0x4000 0xff | (0x4000 \u73b0\u5728\u4fdd\u5b58\u4e3a 0xff) +-------------+ \u6ce8\u610f\u7684\u662f, \u6808\u867d\u7136\u7279\u6b8a, \u4f46\u5b83\u4ecd\u7136\u662f\u5185\u5b58\u4e2d\u7684\u4e00\u5757\u533a\u57df, \u67d0\u4e9b\u60c5\u51b5\u4e0b\u4ecd\u7136\u5141\u8bb8\u5f00\u53d1\u8005\u65e0\u89c6\u6808\u7684\u89c4\u5219\u4efb\u610f\u64cd\u4f5c\u6808\u5185\u4efb\u610f\u5143\u7d20\u7684\u503c\u6216\u4f4d\u7f6e. \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u7279\u610f\u5728\u6307\u4ee4\u96c6\u4e2d\u52a0\u5165\u6808\u6307\u4ee4, \u6709\u4e00\u4e9b\u8bf4\u6cd5\u662f\u79f0\u65e9\u671f\u7684 CPU \u7684\u5bc4\u5b58\u5668\u6570\u91cf\u5341\u5206\u6709\u9650(\u6bd4\u5982 LR35902 \u53ea\u6709 8 \u4e2a\u5bc4\u5b58\u5668), \u540c\u65f6\u5f53\u65f6\u7684\u7f16\u8bd1\u5668\u4e0d\u591f\u667a\u80fd, \u4e3a\u7a0b\u5e8f\u4e2d\u4f17\u591a\u7684\u53d8\u91cf\u81ea\u52a8\u6700\u4f18\u7684\u5206\u914d\u5bc4\u5b58\u5668\u5e76\u4e0d\u5bb9\u6613, \u4f46\u5728\u6808\u7ed3\u6784\u4e0a\u5374\u5e76\u4e0d\u4f1a\u6709\u8fd9\u4e2a\u95ee\u9898. \u56e0\u6b64, \u8eb2\u5f00\u5bc4\u5b58\u5668\u5206\u914d\u7684\u96be\u9898\u800c\u4f7f\u7528\u6808\u7ed3\u6784\u5c31\u6210\u4e86\u4e00\u4e2a\u53ef\u884c\u7684\u9009\u62e9. \u540c\u65f6\u6709\u8bf4\u6cd5\u8ba4\u4e3a JVM \u91c7\u7528\u6808\u7ed3\u6784\u7684\u6700\u4e3b\u8981\u539f\u56e0\u4e4b\u4e00\u5c31\u662f\u4e0d\u4fe1\u4efb\u7f16\u8bd1\u5668\u7684\u5bc4\u5b58\u5668\u5206\u914d\u80fd\u529b. \u4f46\u662f\u4f7f\u7528\u6808\u76f8\u5173\u7684\u6307\u4ee4\u5e76\u975e\u6ca1\u6709\u4efb\u4f55\u4ee3\u4ef7, \u4ece\u7269\u7406\u7ed3\u6784\u4e0a\u6765\u8bf4, \u5bc4\u5b58\u5668\u4e0e CPU \u662f\u7269\u7406\u4e0a\u76f4\u63a5\u8fde\u63a5\u7684, \u8bfb\u53d6\u6570\u636e\u5ef6\u65f6\u6700\u77ed, \u800c\u6808\u5374\u5b58\u5728\u5185\u5b58\u4e2d, \u56e0\u6b64\u73b0\u4ee3\u7f16\u8bd1\u5668\u4e3a\u4e86\u6027\u80fd\u7740\u60f3, \u9664\u4e86\u5728\u51fd\u6570\u8c03\u7528\u60c5\u51b5\u4e0b\u901a\u5e38\u5f88\u5c11\u4f7f\u7528\u6808\u6307\u4ee4. mov a,d \u7b2c\u4e8c\u6761\u6307\u4ee4\u975e\u5e38\u5bb9\u6613\u7406\u89e3: \u5c06\u5bc4\u5b58\u5668 D \u4e2d\u7684\u503c\u8d4b\u503c(Move)\u5230\u5bc4\u5b58\u5668 A. inx h inx(Increment X index)\u5c06\u6307\u5b9a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u52a0\u4e00. \u6b64\u5904\u5bf9\u5bc4\u5b58\u5668 H \u5185\u7684\u503c\u505a\u52a0\u4e00\u64cd\u4f5c, \u5e76\u5c06\u7ed3\u679c\u56de\u5199\u5230\u5bc4\u5b58\u5668 H. add h \u6700\u540e\u4e00\u6761\u6c47\u7f16\u4ee3\u7801\u5c06\u5bc4\u5b58\u5668 H \u7684\u503c\u4e0e\u5bc4\u5b58\u5668 A \u7684\u503c\u76f8\u52a0, \u5e76\u5c06\u7ed3\u679c\u56de\u5199\u5230\u5bc4\u5b58\u5668 A. \u4e0e\u524d\u51e0\u6761\u6c47\u7f16\u4ee3\u7801\u4e0d\u540c, \u8be5\u884c\u4ee3\u7801\u6d89\u53ca\u7b97\u672f\u903b\u8f91\u8fd0\u7b97, \u56e0\u6b64\u9700\u8981 ALU \u7684\u4ecb\u5165. \u5bc4\u5b58\u5668 A \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5bc4\u5b58\u5668, \u4e5f\u88ab\u79f0\u4e3a\u7d2f\u52a0\u5668(Accumulator), \u901a\u5e38\u9ed8\u8ba4\u4f5c\u4e3a ALU \u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570, \u540c\u65f6 ALU \u7684\u8ba1\u7b97\u7ed3\u679c\u4e5f\u9ed8\u8ba4\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668 A \u4e2d. \u901a\u8fc7\u6307\u4ee4, \u5f00\u53d1\u8005\u4fbf\u53ef\u4ee5\u63a7\u5236 CPU \u7684\u8fd0\u884c\u8fc7\u7a0b. \u6307\u4ee4\u7c7b\u578b \u4e0d\u540c\u7684\u6307\u4ee4\u96c6\u5305\u542b\u4e0d\u540c\u7684\u6307\u4ee4, \u4f46\u5927\u90e8\u5206\u6307\u4ee4\u96c6\u7684\u6307\u4ee4\u90fd\u53ef\u4ee5\u5206\u6210\u5982\u4e0b\u51e0\u4e2a\u5927\u7c7b: \u6570\u636e\u4e0e\u5b58\u50a8\u6307\u4ee4 \u4fee\u6539\u5bc4\u5b58\u5668\u4e2d\u7684\u503c, \u5982 inx. \u2013 \u5bc4\u5b58\u5668\u4e0e\u5bc4\u5b58\u5668, \u5bc4\u5b58\u5668\u4e0e\u5185\u5b58\u95f4\u7684\u6570\u636e\u4ea4\u6362, \u5982 mov. \u7b97\u672f\u903b\u8f91\u6307\u4ee4 \u2013 \u7b97\u672f\u6307\u4ee4, \u5982\u52a0\u51cf\u4e58\u9664. \u2013 \u4f4d\u8fd0\u7b97\u6307\u4ee4. \u2013 \u6bd4\u8f83\u6307\u4ee4, \u5224\u65ad\u4e24\u4e2a\u6570\u636e\u7684\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb. \u4e0d\u8fc7\u901a\u5e38\u8be5\u7c7b\u6307\u4ee4\u53ef\u4ee5\u7528\u7b97\u672f\u51cf\u6cd5\u6307\u4ee4\u4ee3\u66ff. \u6d41\u7a0b\u63a7\u5236 \u2013 \u5206\u652f, \u8df3\u8dc3\u81f3\u7a0b\u5e8f\u67d0\u5730\u5740\u5e76\u6267\u884c\u76f8\u5e94\u6307\u4ee4, \u5982 jump(\u8df3\u8dc3) \u6307\u4ee4. \u2013 \u6761\u4ef6\u5206\u652f, \u5047\u8bbe\u67d0\u4e00\u6761\u4ef6\u6210\u7acb, \u5c31\u8df3\u5230\u7a0b\u5e8f\u7684\u53e6\u4e00\u4e2a\u4f4d\u7f6e, \u5e38\u89c1\u5982 jumpiz(Jump If flag zero is 1, \u5982\u679c Zero \u6807\u5fd7\u4e3a 1, \u5219\u8df3\u8dc3\u5230\u6307\u5b9a\u5730\u5740). \u2013 \u8c03\u7528, \u5728\u8df3\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u4e4b\u524d, \u5c06\u73b0\u5728\u6240\u8fd0\u884c\u7684\u6307\u4ee4\u7684\u4e0b\u4e00\u4e2a\u6307\u4ee4\u7684\u4f4d\u7f6e\u5b58\u50a8\u8d77\u6765, \u4f5c\u4e3a\u5b50\u7a0b\u5e8f\u8fd0\u884c\u5b8c\u8fd4\u56de\u7684\u5730\u5740. \u5e38\u89c1\u5982 call \u6307\u4ee4, \u884c\u4e3a\u975e\u5e38\u7c7b\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u8c03\u7528(\u4ece\u5f53\u524d\u4e0a\u4e0b\u6587\u8fdb\u5165\u51fd\u6570, \u6267\u884c\u5b8c\u51fd\u6570\u540e, \u8fd4\u56de\u521a\u624d\u7684\u4e0a\u4e0b\u6587\u73af\u5883). \u9664\u6b64\u4e4b\u5916, \u8fd8\u6709\u4e00\u4e9b\u6bd4\u8f83\u7279\u6b8a\u7684\u6307\u4ee4, \u6bd4\u5982\u4e2d\u65ad\u76f8\u5173\u7684\u6307\u4ee4, \u786c\u4ef6\u8bbe\u5907 Input/Output \u76f8\u5173\u7684\u6307\u4ee4, \u7a7a\u6307\u4ee4(\u4ec0\u4e48\u90fd\u4e0d\u5e72\u7684\u6307\u4ee4), \u751a\u81f3\u662f\u6682\u65f6\u5173\u95ed CPU \u7684\u6307\u4ee4. \u590d\u6742\u6307\u4ee4\u96c6\u4e0e\u7cbe\u7b80\u6307\u4ee4\u96c6 \u6307\u4ee4\u96c6\u662f CPU \u76f8\u5173\u7684, \u4e0d\u540c\u6307\u4ee4\u96c6\u4e4b\u95f4\u7684\u5dee\u5f02\u975e\u5e38\u660e\u663e. \u6bd4\u5982 x86 \u6307\u4ee4\u96c6\u5305\u542b\u6709\u4e0a\u5343\u4e2a\u6307\u4ee4, \u800c RISC-V \u6307\u4ee4\u96c6\u6700\u5c0f\u53ef\u4ee5\u53ea\u5305\u542b\u51e0\u5341\u4e2a\u6307\u4ee4. \u8fd9\u5f15\u51fa\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898: \u6307\u4ee4\u96c6\u4e2d\u7684\u6307\u4ee4\u6570\u91cf\u662f\u8d8a\u591a\u8d8a\u597d\u8fd8\u662f\u8d8a\u5c11\u8d8a\u597d? x86 \u6cdb\u6307\u4e00\u7cfb\u5217\u82f1\u7279\u5c14\u516c\u53f8\u7528\u4e8e\u5f00\u53d1\u5904\u7406\u5668\u7684\u6307\u4ee4\u96c6\u67b6\u6784, \u8fd9\u7c7b\u5904\u7406\u5668\u6700\u65e9\u4e3a 1978 \u5e74\u9762\u5e02\u7684 Intel 8086 CPU. \u8be5\u7cfb\u5217\u8f83\u65e9\u671f\u7684\u5904\u7406\u5668\u540d\u79f0\u662f\u4ee5\u6570\u5b57\u6765\u8868\u793a, \u4f8b\u5982 80x86. \u7531\u4e8e\u4ee5 86 \u4f5c\u4e3a\u7ed3\u5c3e, \u5305\u62ec Intel 8086, 80186, 80286, 80386 \u4ee5\u53ca 80486, \u56e0\u6b64\u5176\u67b6\u6784\u88ab\u79f0\u4e3a x86. \u7531\u4e8e\u6570\u5b57\u5e76\u4e0d\u80fd\u4f5c\u4e3a\u6ce8\u518c\u5546\u6807, Intel \u53ca\u5176\u7ade\u4e89\u8005\u5747\u5728\u65b0\u4e00\u4ee3\u5904\u7406\u5668\u4f7f\u7528\u53ef\u6ce8\u518c\u7684\u540d\u79f0, \u5982 Pentium. \u73b0\u65f6\u82f1\u7279\u5c14\u5c06\u5176\u79f0\u4e3a IA-32, \u5168\u540d\u4e3a Intel Architecture, 32-bit, \u4e00\u822c\u60c5\u5f62\u4e0b\u6307\u4ee3 32 \u4f4d\u7684\u67b6\u6784. RISC-V(\u53d1\u97f3\u4e3a\"risk-five\")\u662f\u4e00\u4e2a\u57fa\u4e8e\u7cbe\u7b80\u6307\u4ee4\u96c6(RISC)\u539f\u5219\u7684\u5f00\u6e90\u6307\u4ee4\u96c6\u67b6\u6784(ISA), \u7b80\u6613\u89e3\u91ca\u4e3a\u5f00\u6e90\u8f6f\u4ef6\u8fd0\u52a8\u76f8\u5bf9\u5e94\u7684\u4e00\u79cd\"\u5f00\u6e90\u786c\u4ef6\". \u8be5\u9879\u76ee 2010 \u5e74\u59cb\u4e8e\u52a0\u5dde\u5927\u5b66\u67cf\u514b\u83b1\u5206\u6821, \u4f46\u8bb8\u591a\u8d21\u732e\u8005\u662f\u8be5\u5927\u5b66\u4ee5\u5916\u7684\u5fd7\u613f\u8005\u548c\u884c\u4e1a\u5de5\u4f5c\u8005. \u8bd5\u60f3\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u95ee\u9898: \u4f5c\u4e3a\u4e00\u4e2a\u8ba1\u7b97\u673a\u4f7f\u7528\u8005, \u73b0\u9700\u8981\u8ba1\u7b97\u673a\u63d0\u4f9b\u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u5f00\u6839\u53f7\u7684\u80fd\u529b, \u5e94\u8be5\u5982\u4f55\u5b9e\u73b0? \u4ece CPU \u7684\u89d2\u5ea6\u6765\u770b\u7684\u8bdd, \u6709\u5982\u4e0b\u4e24\u6761\u8def\u53ef\u4ee5\u8d70: \u8bbe\u8ba1\u4e00\u4e2a\u4e13\u95e8\u7528\u4e8e\u5f00\u6839\u53f7\u7684 ALU \u7535\u8def, \u5e76\u6dfb\u52a0\u4e00\u4e2a\u5f00\u6839\u53f7\u6307\u4ee4\u5230\u6307\u4ee4\u96c6\u4e2d. \u4ec0\u4e48\u90fd\u4e0d\u505a. \u7b2c\u4e8c\u4e2a\u9009\u9879\u770b\u8d77\u6765\u6709\u70b9\u5947\u602a, \u4f46\u4e8b\u5b9e\u4e0a\u662f\u884c\u5f97\u901a\u7684, \u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u725b\u987f\u8fed\u4ee3\u6cd5\u6765\u5b9e\u73b0\u5f00\u6839\u53f7\u7684\u903b\u8f91. double MySqrt(double n) { double x = 1.0; //\u8bbe\u7f6e\u521d\u503c double p = 1e-5; //\u8bbe\u7f6e\u7cbe\u5ea6 while(fabs(x*x - n) > p) { x = (x + n / x) / 2.0; } return x; } \u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u5178\u578b\u7684\u4f7f\u7528\u725b\u987f\u8fed\u4ee3\u6cd5\u6c42\u5f00\u6839\u53f7\u7684\u5b9e\u73b0, \u53ef\u4ee5\u770b\u51fa\u5176\u53ea\u4f7f\u7528\u4e86\u4e00\u4e9b\u57fa\u672c\u7b97\u672f\u903b\u8f91\u8fd0\u7b97(\u52a0, \u51cf, \u4e58, \u9664, \u6bd4\u8f83). \u533a\u522b\u4e8e\u76f4\u63a5\u901a\u8fc7\u65b0\u589e ALU \u548c\u6307\u4ee4\u7684\u786c\u4ef6\u5b9e\u73b0, \u8fd9\u79cd\u65b9\u5f0f\u88ab\u79f0\u4f5c\u4e3a\u8f6f\u4ef6\u5b9e\u73b0. \u4f7f\u7528\u786c\u4ef6\u5b9e\u73b0\u7684\u4f18\u70b9\u662f\u6027\u80fd\u597d, \u800c\u7f3a\u70b9\u662f\u4f7f CPU \u4e0e\u6307\u4ee4\u96c6\u53d8\u5f97\u590d\u6742\uff1b\u4f7f\u7528\u8f6f\u4ef6\u5b9e\u73b0\u7684\u4f18\u7f3a\u70b9\u4e0e\u524d\u8005\u6b63\u597d\u76f8\u53cd. \u57fa\u4e8e\u8fd9\u4e24\u79cd\u4e0d\u540c\u7684\u7406\u5ff5, \u73b0\u4ee3\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u6307\u4ee4\u96c6\u8bbe\u8ba1\u601d\u7ef4: CISC(Complex Instruction Set Computing, \u590d\u6742\u6307\u4ee4\u96c6\u8fd0\u7b97)\u4e0e RISC(Reduced Instruction Set Computing, \u7cbe\u7b80\u6307\u4ee4\u96c6\u8fd0\u7b97). CISC \u5178\u578b\u7684\u5e94\u7528\u573a\u666f\u662f\u5fae\u8f6f\u7684 Windows \u4e0e\u82f9\u679c\u7684 OSX \u64cd\u4f5c\u7cfb\u7edf, \u800c RISC \u5374\u88ab\u5e7f\u6cdb\u5e94\u7528\u5728\u79fb\u52a8\u7aef\u5982 Android, IOS \u751a\u81f3\u662f\u5df2\u7ecf\u9000\u51fa\u5386\u53f2\u821e\u53f0\u7684 Windows Phone \u4e0a. \u8fd9\u4e24\u79cd CPU \u8bbe\u8ba1\u601d\u8def\u65e0\u5173\u5bf9\u9519, \u800c\u5728\u4e8e\u5bf9\u573a\u666f\u7684\u53d6\u820d. \u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\u9898, \u8fd9\u4e2a\u8bdd\u9898\u5c31\u662f\u6d6e\u70b9\u6570. \u7edd\u5927\u591a\u6570\u65e9\u671f CPU, \u751a\u81f3\u662f\u90e8\u5206\u73b0\u4ee3 CPU, \u5b83\u90fd\u662f\u4e0d\u652f\u6301\u6d6e\u70b9\u6570\u7684. \u5982\u679c\u8981\u5728\u8fd9\u79cd CPU \u4e0b\u8fdb\u884c\u6d6e\u70b9\u6570\u8fd0\u7b97, \u901a\u5e38\u4e5f\u53ea\u80fd\u91c7\u7528\u8f6f\u4ef6\u6a21\u62df\u7684\u5f62\u5f0f, \u5373\u6240\u8c13 soft-float. \u4ee5 gcc \u7f16\u8bd1\u5668\u4e3a\u4f8b, \u5b83\u63d0\u4f9b\u4e86\u53ef\u9009\u7684\u914d\u7f6e\u9879, \u7531\u5f00\u53d1\u8005\u51b3\u5b9a\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u662f\u4f7f\u7528 hard-float \u8fd8\u662f soft-float. \u5e38\u89c1\u7684\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b: $ gcc -g -msoft-float -mno-sse -m64 -lsoft-fp \u8be5\u547d\u4ee4\u53ef\u4ee5\u5f3a\u5236\u5728\u7f16\u8bd1\u65f6\u4f7f\u7528 soft-float. \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6, \u4e0d\u4f1a\u8c03\u7528\u4efb\u4f55\u6307\u4ee4\u96c6\u4e2d\u6d89\u53ca\u6d6e\u70b9\u6570\u7684\u6307\u4ee4.","title":"GB-CPU-\u6307\u4ee4\u4e0e\u6307\u4ee4\u96c6"},{"location":"content/gameboy/cpu/isa/#_1","text":"\u5230\u76ee\u524d\u4e3a\u6b62, \u867d\u7136 CPU \u5df2\u7ecf\u62e5\u6709\u4e86\u7b97\u672f\u903b\u8f91\u5355\u5143 ALU \u8fdb\u884c\u7b97\u672f\u903b\u8f91\u8fd0\u7b97\u548c\u4f7f\u7528\u5bc4\u5b58\u5668\u5b58\u50a8\u6570\u636e, \u4f46\u5b83\u4ecd\u7136\u7f3a\u5c11\u4e00\u4e9b\u6b63\u5e38\u5de5\u4f5c\u65f6\u9700\u8981\u7684\u4fe1\u606f. \u5c31\u50cf\u5efa\u7b51\u5de5\u4eba\u65e0\u6cd5\u4ec5\u4ec5\u4f9d\u9760\u6750\u6599\u548c\u5de5\u5177\u51ed\u7a7a\u9020\u51fa\u4e00\u680b\u9ad8\u697c\u5927\u53a6, \u9664\u975e\u5efa\u7b51\u5e08\u80fd\u4e3a\u5176\u63d0\u4f9b\u8be6\u7ec6\u7684\u5efa\u7b51\u56fe\u7eb8. CPU \u4e5f\u662f\u4e00\u6837\u7684, \u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u544a\u8bc9 CPU \u4e0b\u4e00\u6b65\u7684\u5de5\u4f5c\u5185\u5bb9, CPU \u624d\u80fd\u6709\u5e8f\u7684\u5c55\u5f00\u5de5\u4f5c.","title":"\u6307\u4ee4\u4e0e\u6307\u4ee4\u96c6"},{"location":"content/gameboy/cpu/isa/#_2","text":"\u7c7b\u4f3c\u4eba\u4e0e\u4eba\u4e4b\u95f4\u7684\u4ea4\u6d41\u6240\u4f7f\u7528\u7684\u8bed\u8a00, \u5f00\u53d1\u8005\u4e0e CPU \u8fdb\u884c\u4ea4\u6d41\u4f7f\u7528\u7684\u8bed\u8a00\u88ab\u79f0\u4e3a\"\u673a\u5668\u8bed\u8a00\". \u73b0\u5b9e\u4e16\u754c\u7684\u82f1\u8bed\u7531\u5404\u79cd\u5355\u8bcd\u6784\u6210, \u5e76\u6709\u5176\u56fa\u5b9a\u7684\u8bed\u6cd5\u89c4\u5219, \u673a\u5668\u8bed\u8a00\u4e5f\u662f\u4e00\u6837\u7684, \u673a\u5668\u8bed\u8a00\u6240\u9650\u5b9a\u7684\u53ef\u4ee5\u4f7f\u7528\u7684\"\u5355\u8bcd\"\u53ca\u5176\u8bed\u6cd5\u89c4\u5219\u88ab\u79f0\u4e3a\"\u6307\u4ee4\u96c6\". \u987e\u540d\u601d\u4e49, \u6307\u4ee4\u96c6\u662f\u4e00\u7ec4\u6307\u4ee4\u7684\u96c6\u5408, \u6307\u4ee4\u5219\u662f CPU \u8fdb\u884c\u64cd\u4f5c\u7684\u6700\u5c0f\u5355\u5143. \u6307\u4ee4\u96c6\u662f\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e2d\u4e0e\u7a0b\u5e8f\u8bbe\u8ba1\u6709\u5173\u7684\u90e8\u5206, \u5305\u542b\u4e86\u57fa\u672c\u6570\u636e\u7c7b\u578b, \u6307\u4ee4\u96c6, \u5bc4\u5b58\u5668, \u5bfb\u5740\u6a21\u5f0f, \u5b58\u50a8\u4f53\u7cfb, \u4e2d\u65ad, \u5f02\u5e38\u5904\u7406\u4ee5\u53ca\u5916\u90e8 I/O. \u6307\u4ee4\u96c6\u5305\u542b\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u7801(Operation Code, \u7f29\u5199 OPCode), \u4ee5\u53ca\u7531\u7279\u5b9a\u5904\u7406\u5668\u6267\u884c\u7684\u57fa\u672c\u547d\u4ee4. \u6307\u4ee4\u96c6\u662f CPU \u5177\u4f53\u786c\u4ef6\u5b9e\u73b0\u4e0e\u5176\u4e0a\u5c42\u8fd0\u884c\u7684\u8f6f\u4ef6\u4e4b\u95f4\u7684\u4e00\u5c42\u62bd\u8c61, \u5b83\u8fde\u63a5\u5e94\u7528\u5c42\u4e0e\u5e95\u5c42\u786c\u4ef6, \u4f7f\u5f97\u5e94\u7528\u5c42\u8f6f\u4ef6\u65e0\u9700\u505a\u4efb\u4f55\u4fee\u6539\u4fbf\u80fd\u8fd0\u884c\u5728\u62e5\u6709\u76f8\u540c\u6307\u4ee4\u96c6\u67b6\u6784\u7684\u4e0d\u540c\u5904\u7406\u5668\u4e0a. \u6307\u4ee4\u96c6\u67b6\u6784\u662f\u533a\u5206\u4e0d\u540c CPU \u7684\u4e3b\u8981\u4f9d\u636e, \u5c31\u50cf Intel \u548c AMD \u867d\u7136\u5206\u522b\u63a8\u51fa\u4e86\u5f88\u591a\u4e0d\u540c\u578b\u53f7\u548c\u6027\u80fd\u7684 CPU, \u4f46\u5b83\u4eec\u4ecd\u7136\u88ab\u7edf\u4e00\u79f0\u4e3a x86 \u67b6\u6784. push h mov a,d inx h add h \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u6458\u6284\u81ea Game Boy CPU \u7684\u6d4b\u8bd5\u7528\u4f8b, \u5b83\u867d\u7136\u5185\u5bb9\u4e0d\u591a, \u4f46\u53ef\u4ee5\u5f88\u597d\u5bf9\u6307\u4ee4\u8fdb\u884c\u9610\u91ca. push h \u5c06\u5bc4\u5b58\u5668 H \u4e2d\u7684\u503c\u5165\u6808. \u6808(Stack)\u53c8\u79f0\u4e3a\u5806\u6808\u6216\u5806\u53e0, \u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u4e00\u79cd\u62bd\u8c61\u6570\u636e\u7c7b\u578b, \u53ea\u5141\u8bb8\u5728\u6709\u5e8f\u7684\u7ebf\u6027\u6570\u636e\u96c6\u5408\u7684\u4e00\u7aef(Top, \u6808\u9876)\u8fdb\u884c\u52a0\u5165\u6570\u636e(Push)\u548c\u79fb\u9664\u6570\u636e(Pop)\u7684\u8fd0\u7b97, \u6309\u7167\u540e\u8fdb\u5148\u51fa(LIFO, Last In First Out)\u7684\u539f\u7406\u8fd0\u4f5c. \u5c31 LR35902 CPU \u672c\u8eab\u6765\u8bf4, \u5b83\u672c\u8eab\u5e76\u6ca1\u6709\"\u6808\"\u8fd9\u6837\u7684\u771f\u5b9e\u786c\u4ef6\u7ed3\u6784, \u5b83\u7684\u6808\u662f\u5185\u5b58\u4e2d\u7684\u4e00\u5757\u7279\u6b8a\u7684\u8fde\u7eed\u533a\u57df, \u540c\u65f6\u6709\u4e00\u4e2a\u7f16\u53f7\u4e3a SP \u7684\u5bc4\u5b58\u5668\u8bb0\u5f55\u5f53\u524d\u7684\u6808\u9876\u5730\u5740. \u5982\u4e0b\u6240\u793a, \u73b0\u5728\u6709\u4e00\u5757\u521d\u59cb\u5316\u7684\u6808\u7ed3\u6784, \u6808\u6df1\u5ea6\u4e3a 10, \u540c\u65f6 SP \u5bc4\u5b58\u5668\u4fdd\u5b58\u7684\u503c\u662f 0x4000. +-------------+ | 0x4009 0x00 | | ... 0x00 | | ... 0x00 | | 0x4001 0x00 | | 0x4000 0x00 | <--- SP +-------------+ \u5982\u679c CPU \u6b64\u65f6\u6267\u884c\u5230 push 0xff \u64cd\u4f5c, \u5219\u64cd\u4f5c\u8fc7\u540e\u7684\u6808\u7ed3\u6784\u4e3a: +-------------+ | 0x4009 0x00 | | ... 0x00 | | ... 0x00 | | 0x4001 0x00 | <--- SP (SP \u52a0 1) | 0x4000 0xff | (0x4000 \u73b0\u5728\u4fdd\u5b58\u4e3a 0xff) +-------------+ \u6ce8\u610f\u7684\u662f, \u6808\u867d\u7136\u7279\u6b8a, \u4f46\u5b83\u4ecd\u7136\u662f\u5185\u5b58\u4e2d\u7684\u4e00\u5757\u533a\u57df, \u67d0\u4e9b\u60c5\u51b5\u4e0b\u4ecd\u7136\u5141\u8bb8\u5f00\u53d1\u8005\u65e0\u89c6\u6808\u7684\u89c4\u5219\u4efb\u610f\u64cd\u4f5c\u6808\u5185\u4efb\u610f\u5143\u7d20\u7684\u503c\u6216\u4f4d\u7f6e. \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u7279\u610f\u5728\u6307\u4ee4\u96c6\u4e2d\u52a0\u5165\u6808\u6307\u4ee4, \u6709\u4e00\u4e9b\u8bf4\u6cd5\u662f\u79f0\u65e9\u671f\u7684 CPU \u7684\u5bc4\u5b58\u5668\u6570\u91cf\u5341\u5206\u6709\u9650(\u6bd4\u5982 LR35902 \u53ea\u6709 8 \u4e2a\u5bc4\u5b58\u5668), \u540c\u65f6\u5f53\u65f6\u7684\u7f16\u8bd1\u5668\u4e0d\u591f\u667a\u80fd, \u4e3a\u7a0b\u5e8f\u4e2d\u4f17\u591a\u7684\u53d8\u91cf\u81ea\u52a8\u6700\u4f18\u7684\u5206\u914d\u5bc4\u5b58\u5668\u5e76\u4e0d\u5bb9\u6613, \u4f46\u5728\u6808\u7ed3\u6784\u4e0a\u5374\u5e76\u4e0d\u4f1a\u6709\u8fd9\u4e2a\u95ee\u9898. \u56e0\u6b64, \u8eb2\u5f00\u5bc4\u5b58\u5668\u5206\u914d\u7684\u96be\u9898\u800c\u4f7f\u7528\u6808\u7ed3\u6784\u5c31\u6210\u4e86\u4e00\u4e2a\u53ef\u884c\u7684\u9009\u62e9. \u540c\u65f6\u6709\u8bf4\u6cd5\u8ba4\u4e3a JVM \u91c7\u7528\u6808\u7ed3\u6784\u7684\u6700\u4e3b\u8981\u539f\u56e0\u4e4b\u4e00\u5c31\u662f\u4e0d\u4fe1\u4efb\u7f16\u8bd1\u5668\u7684\u5bc4\u5b58\u5668\u5206\u914d\u80fd\u529b. \u4f46\u662f\u4f7f\u7528\u6808\u76f8\u5173\u7684\u6307\u4ee4\u5e76\u975e\u6ca1\u6709\u4efb\u4f55\u4ee3\u4ef7, \u4ece\u7269\u7406\u7ed3\u6784\u4e0a\u6765\u8bf4, \u5bc4\u5b58\u5668\u4e0e CPU \u662f\u7269\u7406\u4e0a\u76f4\u63a5\u8fde\u63a5\u7684, \u8bfb\u53d6\u6570\u636e\u5ef6\u65f6\u6700\u77ed, \u800c\u6808\u5374\u5b58\u5728\u5185\u5b58\u4e2d, \u56e0\u6b64\u73b0\u4ee3\u7f16\u8bd1\u5668\u4e3a\u4e86\u6027\u80fd\u7740\u60f3, \u9664\u4e86\u5728\u51fd\u6570\u8c03\u7528\u60c5\u51b5\u4e0b\u901a\u5e38\u5f88\u5c11\u4f7f\u7528\u6808\u6307\u4ee4. mov a,d \u7b2c\u4e8c\u6761\u6307\u4ee4\u975e\u5e38\u5bb9\u6613\u7406\u89e3: \u5c06\u5bc4\u5b58\u5668 D \u4e2d\u7684\u503c\u8d4b\u503c(Move)\u5230\u5bc4\u5b58\u5668 A. inx h inx(Increment X index)\u5c06\u6307\u5b9a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u52a0\u4e00. \u6b64\u5904\u5bf9\u5bc4\u5b58\u5668 H \u5185\u7684\u503c\u505a\u52a0\u4e00\u64cd\u4f5c, \u5e76\u5c06\u7ed3\u679c\u56de\u5199\u5230\u5bc4\u5b58\u5668 H. add h \u6700\u540e\u4e00\u6761\u6c47\u7f16\u4ee3\u7801\u5c06\u5bc4\u5b58\u5668 H \u7684\u503c\u4e0e\u5bc4\u5b58\u5668 A \u7684\u503c\u76f8\u52a0, \u5e76\u5c06\u7ed3\u679c\u56de\u5199\u5230\u5bc4\u5b58\u5668 A. \u4e0e\u524d\u51e0\u6761\u6c47\u7f16\u4ee3\u7801\u4e0d\u540c, \u8be5\u884c\u4ee3\u7801\u6d89\u53ca\u7b97\u672f\u903b\u8f91\u8fd0\u7b97, \u56e0\u6b64\u9700\u8981 ALU \u7684\u4ecb\u5165. \u5bc4\u5b58\u5668 A \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5bc4\u5b58\u5668, \u4e5f\u88ab\u79f0\u4e3a\u7d2f\u52a0\u5668(Accumulator), \u901a\u5e38\u9ed8\u8ba4\u4f5c\u4e3a ALU \u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570, \u540c\u65f6 ALU \u7684\u8ba1\u7b97\u7ed3\u679c\u4e5f\u9ed8\u8ba4\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668 A \u4e2d. \u901a\u8fc7\u6307\u4ee4, \u5f00\u53d1\u8005\u4fbf\u53ef\u4ee5\u63a7\u5236 CPU \u7684\u8fd0\u884c\u8fc7\u7a0b.","title":"\u4ec0\u4e48\u662f\u6307\u4ee4"},{"location":"content/gameboy/cpu/isa/#_3","text":"\u4e0d\u540c\u7684\u6307\u4ee4\u96c6\u5305\u542b\u4e0d\u540c\u7684\u6307\u4ee4, \u4f46\u5927\u90e8\u5206\u6307\u4ee4\u96c6\u7684\u6307\u4ee4\u90fd\u53ef\u4ee5\u5206\u6210\u5982\u4e0b\u51e0\u4e2a\u5927\u7c7b: \u6570\u636e\u4e0e\u5b58\u50a8\u6307\u4ee4 \u4fee\u6539\u5bc4\u5b58\u5668\u4e2d\u7684\u503c, \u5982 inx. \u2013 \u5bc4\u5b58\u5668\u4e0e\u5bc4\u5b58\u5668, \u5bc4\u5b58\u5668\u4e0e\u5185\u5b58\u95f4\u7684\u6570\u636e\u4ea4\u6362, \u5982 mov. \u7b97\u672f\u903b\u8f91\u6307\u4ee4 \u2013 \u7b97\u672f\u6307\u4ee4, \u5982\u52a0\u51cf\u4e58\u9664. \u2013 \u4f4d\u8fd0\u7b97\u6307\u4ee4. \u2013 \u6bd4\u8f83\u6307\u4ee4, \u5224\u65ad\u4e24\u4e2a\u6570\u636e\u7684\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb. \u4e0d\u8fc7\u901a\u5e38\u8be5\u7c7b\u6307\u4ee4\u53ef\u4ee5\u7528\u7b97\u672f\u51cf\u6cd5\u6307\u4ee4\u4ee3\u66ff. \u6d41\u7a0b\u63a7\u5236 \u2013 \u5206\u652f, \u8df3\u8dc3\u81f3\u7a0b\u5e8f\u67d0\u5730\u5740\u5e76\u6267\u884c\u76f8\u5e94\u6307\u4ee4, \u5982 jump(\u8df3\u8dc3) \u6307\u4ee4. \u2013 \u6761\u4ef6\u5206\u652f, \u5047\u8bbe\u67d0\u4e00\u6761\u4ef6\u6210\u7acb, \u5c31\u8df3\u5230\u7a0b\u5e8f\u7684\u53e6\u4e00\u4e2a\u4f4d\u7f6e, \u5e38\u89c1\u5982 jumpiz(Jump If flag zero is 1, \u5982\u679c Zero \u6807\u5fd7\u4e3a 1, \u5219\u8df3\u8dc3\u5230\u6307\u5b9a\u5730\u5740). \u2013 \u8c03\u7528, \u5728\u8df3\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u4e4b\u524d, \u5c06\u73b0\u5728\u6240\u8fd0\u884c\u7684\u6307\u4ee4\u7684\u4e0b\u4e00\u4e2a\u6307\u4ee4\u7684\u4f4d\u7f6e\u5b58\u50a8\u8d77\u6765, \u4f5c\u4e3a\u5b50\u7a0b\u5e8f\u8fd0\u884c\u5b8c\u8fd4\u56de\u7684\u5730\u5740. \u5e38\u89c1\u5982 call \u6307\u4ee4, \u884c\u4e3a\u975e\u5e38\u7c7b\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u8c03\u7528(\u4ece\u5f53\u524d\u4e0a\u4e0b\u6587\u8fdb\u5165\u51fd\u6570, \u6267\u884c\u5b8c\u51fd\u6570\u540e, \u8fd4\u56de\u521a\u624d\u7684\u4e0a\u4e0b\u6587\u73af\u5883). \u9664\u6b64\u4e4b\u5916, \u8fd8\u6709\u4e00\u4e9b\u6bd4\u8f83\u7279\u6b8a\u7684\u6307\u4ee4, \u6bd4\u5982\u4e2d\u65ad\u76f8\u5173\u7684\u6307\u4ee4, \u786c\u4ef6\u8bbe\u5907 Input/Output \u76f8\u5173\u7684\u6307\u4ee4, \u7a7a\u6307\u4ee4(\u4ec0\u4e48\u90fd\u4e0d\u5e72\u7684\u6307\u4ee4), \u751a\u81f3\u662f\u6682\u65f6\u5173\u95ed CPU \u7684\u6307\u4ee4.","title":"\u6307\u4ee4\u7c7b\u578b"},{"location":"content/gameboy/cpu/isa/#_4","text":"\u6307\u4ee4\u96c6\u662f CPU \u76f8\u5173\u7684, \u4e0d\u540c\u6307\u4ee4\u96c6\u4e4b\u95f4\u7684\u5dee\u5f02\u975e\u5e38\u660e\u663e. \u6bd4\u5982 x86 \u6307\u4ee4\u96c6\u5305\u542b\u6709\u4e0a\u5343\u4e2a\u6307\u4ee4, \u800c RISC-V \u6307\u4ee4\u96c6\u6700\u5c0f\u53ef\u4ee5\u53ea\u5305\u542b\u51e0\u5341\u4e2a\u6307\u4ee4. \u8fd9\u5f15\u51fa\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898: \u6307\u4ee4\u96c6\u4e2d\u7684\u6307\u4ee4\u6570\u91cf\u662f\u8d8a\u591a\u8d8a\u597d\u8fd8\u662f\u8d8a\u5c11\u8d8a\u597d? x86 \u6cdb\u6307\u4e00\u7cfb\u5217\u82f1\u7279\u5c14\u516c\u53f8\u7528\u4e8e\u5f00\u53d1\u5904\u7406\u5668\u7684\u6307\u4ee4\u96c6\u67b6\u6784, \u8fd9\u7c7b\u5904\u7406\u5668\u6700\u65e9\u4e3a 1978 \u5e74\u9762\u5e02\u7684 Intel 8086 CPU. \u8be5\u7cfb\u5217\u8f83\u65e9\u671f\u7684\u5904\u7406\u5668\u540d\u79f0\u662f\u4ee5\u6570\u5b57\u6765\u8868\u793a, \u4f8b\u5982 80x86. \u7531\u4e8e\u4ee5 86 \u4f5c\u4e3a\u7ed3\u5c3e, \u5305\u62ec Intel 8086, 80186, 80286, 80386 \u4ee5\u53ca 80486, \u56e0\u6b64\u5176\u67b6\u6784\u88ab\u79f0\u4e3a x86. \u7531\u4e8e\u6570\u5b57\u5e76\u4e0d\u80fd\u4f5c\u4e3a\u6ce8\u518c\u5546\u6807, Intel \u53ca\u5176\u7ade\u4e89\u8005\u5747\u5728\u65b0\u4e00\u4ee3\u5904\u7406\u5668\u4f7f\u7528\u53ef\u6ce8\u518c\u7684\u540d\u79f0, \u5982 Pentium. \u73b0\u65f6\u82f1\u7279\u5c14\u5c06\u5176\u79f0\u4e3a IA-32, \u5168\u540d\u4e3a Intel Architecture, 32-bit, \u4e00\u822c\u60c5\u5f62\u4e0b\u6307\u4ee3 32 \u4f4d\u7684\u67b6\u6784. RISC-V(\u53d1\u97f3\u4e3a\"risk-five\")\u662f\u4e00\u4e2a\u57fa\u4e8e\u7cbe\u7b80\u6307\u4ee4\u96c6(RISC)\u539f\u5219\u7684\u5f00\u6e90\u6307\u4ee4\u96c6\u67b6\u6784(ISA), \u7b80\u6613\u89e3\u91ca\u4e3a\u5f00\u6e90\u8f6f\u4ef6\u8fd0\u52a8\u76f8\u5bf9\u5e94\u7684\u4e00\u79cd\"\u5f00\u6e90\u786c\u4ef6\". \u8be5\u9879\u76ee 2010 \u5e74\u59cb\u4e8e\u52a0\u5dde\u5927\u5b66\u67cf\u514b\u83b1\u5206\u6821, \u4f46\u8bb8\u591a\u8d21\u732e\u8005\u662f\u8be5\u5927\u5b66\u4ee5\u5916\u7684\u5fd7\u613f\u8005\u548c\u884c\u4e1a\u5de5\u4f5c\u8005. \u8bd5\u60f3\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u95ee\u9898: \u4f5c\u4e3a\u4e00\u4e2a\u8ba1\u7b97\u673a\u4f7f\u7528\u8005, \u73b0\u9700\u8981\u8ba1\u7b97\u673a\u63d0\u4f9b\u8ba1\u7b97\u4e00\u4e2a\u6570\u7684\u5f00\u6839\u53f7\u7684\u80fd\u529b, \u5e94\u8be5\u5982\u4f55\u5b9e\u73b0? \u4ece CPU \u7684\u89d2\u5ea6\u6765\u770b\u7684\u8bdd, \u6709\u5982\u4e0b\u4e24\u6761\u8def\u53ef\u4ee5\u8d70: \u8bbe\u8ba1\u4e00\u4e2a\u4e13\u95e8\u7528\u4e8e\u5f00\u6839\u53f7\u7684 ALU \u7535\u8def, \u5e76\u6dfb\u52a0\u4e00\u4e2a\u5f00\u6839\u53f7\u6307\u4ee4\u5230\u6307\u4ee4\u96c6\u4e2d. \u4ec0\u4e48\u90fd\u4e0d\u505a. \u7b2c\u4e8c\u4e2a\u9009\u9879\u770b\u8d77\u6765\u6709\u70b9\u5947\u602a, \u4f46\u4e8b\u5b9e\u4e0a\u662f\u884c\u5f97\u901a\u7684, \u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u725b\u987f\u8fed\u4ee3\u6cd5\u6765\u5b9e\u73b0\u5f00\u6839\u53f7\u7684\u903b\u8f91. double MySqrt(double n) { double x = 1.0; //\u8bbe\u7f6e\u521d\u503c double p = 1e-5; //\u8bbe\u7f6e\u7cbe\u5ea6 while(fabs(x*x - n) > p) { x = (x + n / x) / 2.0; } return x; } \u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u5178\u578b\u7684\u4f7f\u7528\u725b\u987f\u8fed\u4ee3\u6cd5\u6c42\u5f00\u6839\u53f7\u7684\u5b9e\u73b0, \u53ef\u4ee5\u770b\u51fa\u5176\u53ea\u4f7f\u7528\u4e86\u4e00\u4e9b\u57fa\u672c\u7b97\u672f\u903b\u8f91\u8fd0\u7b97(\u52a0, \u51cf, \u4e58, \u9664, \u6bd4\u8f83). \u533a\u522b\u4e8e\u76f4\u63a5\u901a\u8fc7\u65b0\u589e ALU \u548c\u6307\u4ee4\u7684\u786c\u4ef6\u5b9e\u73b0, \u8fd9\u79cd\u65b9\u5f0f\u88ab\u79f0\u4f5c\u4e3a\u8f6f\u4ef6\u5b9e\u73b0. \u4f7f\u7528\u786c\u4ef6\u5b9e\u73b0\u7684\u4f18\u70b9\u662f\u6027\u80fd\u597d, \u800c\u7f3a\u70b9\u662f\u4f7f CPU \u4e0e\u6307\u4ee4\u96c6\u53d8\u5f97\u590d\u6742\uff1b\u4f7f\u7528\u8f6f\u4ef6\u5b9e\u73b0\u7684\u4f18\u7f3a\u70b9\u4e0e\u524d\u8005\u6b63\u597d\u76f8\u53cd. \u57fa\u4e8e\u8fd9\u4e24\u79cd\u4e0d\u540c\u7684\u7406\u5ff5, \u73b0\u4ee3\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u6307\u4ee4\u96c6\u8bbe\u8ba1\u601d\u7ef4: CISC(Complex Instruction Set Computing, \u590d\u6742\u6307\u4ee4\u96c6\u8fd0\u7b97)\u4e0e RISC(Reduced Instruction Set Computing, \u7cbe\u7b80\u6307\u4ee4\u96c6\u8fd0\u7b97). CISC \u5178\u578b\u7684\u5e94\u7528\u573a\u666f\u662f\u5fae\u8f6f\u7684 Windows \u4e0e\u82f9\u679c\u7684 OSX \u64cd\u4f5c\u7cfb\u7edf, \u800c RISC \u5374\u88ab\u5e7f\u6cdb\u5e94\u7528\u5728\u79fb\u52a8\u7aef\u5982 Android, IOS \u751a\u81f3\u662f\u5df2\u7ecf\u9000\u51fa\u5386\u53f2\u821e\u53f0\u7684 Windows Phone \u4e0a. \u8fd9\u4e24\u79cd CPU \u8bbe\u8ba1\u601d\u8def\u65e0\u5173\u5bf9\u9519, \u800c\u5728\u4e8e\u5bf9\u573a\u666f\u7684\u53d6\u820d. \u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\u9898, \u8fd9\u4e2a\u8bdd\u9898\u5c31\u662f\u6d6e\u70b9\u6570. \u7edd\u5927\u591a\u6570\u65e9\u671f CPU, \u751a\u81f3\u662f\u90e8\u5206\u73b0\u4ee3 CPU, \u5b83\u90fd\u662f\u4e0d\u652f\u6301\u6d6e\u70b9\u6570\u7684. \u5982\u679c\u8981\u5728\u8fd9\u79cd CPU \u4e0b\u8fdb\u884c\u6d6e\u70b9\u6570\u8fd0\u7b97, \u901a\u5e38\u4e5f\u53ea\u80fd\u91c7\u7528\u8f6f\u4ef6\u6a21\u62df\u7684\u5f62\u5f0f, \u5373\u6240\u8c13 soft-float. \u4ee5 gcc \u7f16\u8bd1\u5668\u4e3a\u4f8b, \u5b83\u63d0\u4f9b\u4e86\u53ef\u9009\u7684\u914d\u7f6e\u9879, \u7531\u5f00\u53d1\u8005\u51b3\u5b9a\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u662f\u4f7f\u7528 hard-float \u8fd8\u662f soft-float. \u5e38\u89c1\u7684\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b: $ gcc -g -msoft-float -mno-sse -m64 -lsoft-fp \u8be5\u547d\u4ee4\u53ef\u4ee5\u5f3a\u5236\u5728\u7f16\u8bd1\u65f6\u4f7f\u7528 soft-float. \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6, \u4e0d\u4f1a\u8c03\u7528\u4efb\u4f55\u6307\u4ee4\u96c6\u4e2d\u6d89\u53ca\u6d6e\u70b9\u6570\u7684\u6307\u4ee4.","title":"\u590d\u6742\u6307\u4ee4\u96c6\u4e0e\u7cbe\u7b80\u6307\u4ee4\u96c6"},{"location":"content/gameboy/cpu/lr35902_extension/","text":"LR35902 \u6269\u5c55\u6307\u4ee4\u96c6 \u6807\u51c6\u7684\u7b97\u672f\u903b\u8f91\u6307\u4ee4\u901a\u5e38\u5c06\u7ed3\u679c\u5199\u56de\u5230\u5bc4\u5b58\u5668 A. \u5b83\u4eec\u6240\u5b8c\u6210\u4efb\u52a1\u53ef\u4ee5\u7528\u5982\u4e0b\u8bed\u8a00\u63cf\u8ff0: \u4ece\u5bc4\u5b58\u5668 A \u62ff\u51fa\u6570\u636e, \u8fdb\u884c\u4e00\u4e9b\u7b97\u672f\u903b\u8f91\u8fd0\u7b97\u540e\u518d\u91cd\u65b0\u653e\u56de\u5bc4\u5b58\u5668 A. \u60f3\u8c61\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u9700\u6c42: \u5bf9\u5bc4\u5b58\u5668 B \u5185\u5b58\u50a8\u7684\u6570\u636e\u53f3\u79fb\u4e00\u4f4d. \u5982\u4e0b\u7684\u64cd\u4f5c\u6b65\u9aa4\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u65b9\u6848: \u5c06\u5bc4\u5b58\u5668 A \u7684\u503c\u4fdd\u5b58\u5230\u5185\u5b58\u4e2d. \u5c06\u5bc4\u5b58\u5668 B \u7684\u503c\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668 A. \u5c06\u5bc4\u5b58\u5668 A \u53f3\u79fb\u4e00\u4f4d. \u5c06\u5bc4\u5b58\u5668 A \u7684\u503c\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668 B. \u5c06\u7b2c\u4e00\u6b65\u4fdd\u5b58\u7684\u503c\u5199\u56de\u5bc4\u5b58\u5668 A. \u8fd9\u6837\u64cd\u4f5c\u663e\u5f97\u6709\u70b9\u9ebb\u70e6, \u5982\u679c\u53ef\u4ee5\u76f4\u63a5\u5bf9\u5bc4\u5b58\u5668 B \u7684\u6570\u636e\u8fdb\u884c\u4f4d\u79fb\u8fd0\u7b97\u5c31\u597d\u4e86! \u4f46\u662f LR35902 \u662f 8 \u4f4d CPU, \u56e0\u6b64\u5982\u679c\u4f7f\u7528\u4e00\u4e2a Byte \u6765\u8868\u793a\u4e00\u4e2a\u64cd\u4f5c\u7801\u7684\u8bdd, \u5176\u6700\u591a\u53ea\u5141\u8bb8\u8868\u793a 2^8 = 256 \u4e2a\u6307\u4ee4, \u5982\u679c\u8bfb\u8005\u66fe\u6ce8\u610f\u4e0a\u4e00\u8282\u4e2d\u6807\u51c6\u6307\u4ee4\u96c6\u7684\u64cd\u4f5c\u7801\u4e2a\u6570\u7684\u8bdd, \u4f1a\u53d1\u73b0\u5355\u5355\u6807\u51c6\u6307\u4ee4\u96c6\u5c31\u5df2\u7ecf\u6709\u63a5\u8fd1 256 \u4e2a\u4e86. \u73b0\u5728\u5df2\u7ecf\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u4f4d\u6765\u4e3a\u4e0d\u540c\u7684\u5bc4\u5b58\u5668\u90fd\u5b9e\u73b0\u7b97\u672f\u903b\u8f91\u6307\u4ee4, \u90a3\u4e48, \u662f\u5426\u53ef\u4ee5\u5c06\u6307\u4ee4\u6269\u5c55\u5230\u4e24\u4e2a Byte\uff1f \u4ec0\u4e48\u662f\u6269\u5c55\u6307\u4ee4\u96c6 \u6269\u5c55\u6307\u4ee4\u96c6\u662f\u6307\u4e3a CPU \u589e\u52a0\u65b0\u7684\u6307\u4ee4\u96c6, \u8fd9\u4e9b\u6269\u5c55\u6307\u4ee4\u53ef\u4ee5\u63d0\u9ad8 CPU \u5904\u7406\u6570\u5b66\u8fd0\u7b97\u7684\u80fd\u529b. \u5728\u73b0\u4ee3 CPU \u4e2d, \u5e38\u89c1\u7684\u6709 MMX, SSE \u7b49\u6269\u5c55\u6307\u4ee4\u96c6. \u4e00\u4e2a\u65e9\u671f\u7684\u6bd4\u8f83\u8457\u540d\u7684\u6269\u5c55\u6307\u4ee4\u96c6\u51fa\u73b0\u5728\u4e0a\u4e16\u7eaa 70 \u5e74\u4ee3\u7684\u8857\u673a\u6e38\u620f\u592a\u7a7a\u4fb5\u7565\u8005(\u5176\u6e38\u620f\u753b\u9762\u5982\u4e0b\u56fe\u6240\u793a), \u8be5\u8857\u673a\u4f7f\u7528 Intel 8080 CPU, \u4f46 Intel 8080 CPU \u7684\u6807\u51c6\u6307\u4ee4\u96c6\u4e0d\u5e26\u6570\u5b57\u7684\u79fb\u4f4d\u6307\u4ee4, \u56e0\u6b64\u8be5\u8857\u673a\u9009\u62e9\u901a\u8fc7\u5916\u63a5\u786c\u4ef6\u7535\u8def, \u901a\u8fc7 CPU I/O \u4e32\u53e3\u6765\u5b9e\u73b0\u79fb\u4f4d\u64cd\u4f5c. LR35902 \u7684\u6269\u5c55\u6307\u4ee4\u5927\u5c0f\u662f\u4e24\u4e2a Byte, \u5176\u4e2d\u7b2c\u4e00\u4e2a Byte \u56fa\u5b9a\u662f 0xcb. \u56e0\u6b64\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d, \u5982\u679c\u53d1\u73b0\u53d6\u5f97\u7684\u6307\u4ee4\u662f 0xcb, \u5219\u9700\u8981\u7ee7\u7eed\u53d6\u4e00\u4e2a Byte. \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b: fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { ... } } ... } } \u4e0b\u9762\u7ed9\u51fa\u4e86\u6269\u5c55\u6307\u4ee4\u7684\u6458\u8981\u4ee5\u53ca\u4eff\u771f\u5b9e\u73b0. \u5982\u679c\u8be5\u6307\u4ee4\u5f71\u54cd\u4e86\u6807\u5fd7\u4f4d, \u5219\u4f1a\u5728\u6307\u4ee4\u63cf\u8ff0\u4e2d\u6307\u660e. \u5faa\u73af\u548c\u79fb\u4f4d\u64cd\u4f5c RLC r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u5de6\u79fb. \u6700\u9ad8\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u9ad8\u4f4d. 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RLC B 00 8 RLC C 01 8 RLC D 02 8 RLC E 03 8 RLC H 04 8 RLC L 05 8 RLC (HL) 06 16 RLC A 07 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x00 => self.reg.b = self.alu_rlc(self.reg.b), 0x01 => self.reg.c = self.alu_rlc(self.reg.c), 0x02 => self.reg.d = self.alu_rlc(self.reg.d), 0x03 => self.reg.e = self.alu_rlc(self.reg.e), 0x04 => self.reg.h = self.alu_rlc(self.reg.h), 0x05 => self.reg.l = self.alu_rlc(self.reg.l), 0x06 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_rlc(v); self.mem.borrow_mut().set(a, h); } 0x07 => self.reg.a = self.alu_rlc(self.reg.a), ... } } ... } } RRC r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u53f3\u79fb. \u6700\u4f4e\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RRC B 08 8 RRC C 09 8 RRC D 0a 8 RRC E 0b 8 RRC H 0c 8 RRC L 0d 8 RRC (HL) 0e 16 RRC A 0f 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x08 => self.reg.b = self.alu_rrc(self.reg.b), 0x09 => self.reg.c = self.alu_rrc(self.reg.c), 0x0a => self.reg.d = self.alu_rrc(self.reg.d), 0x0b => self.reg.e = self.alu_rrc(self.reg.e), 0x0c => self.reg.h = self.alu_rrc(self.reg.h), 0x0d => self.reg.l = self.alu_rrc(self.reg.l), 0x0e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_rrc(v); self.mem.borrow_mut().set(a, h); } 0x0f => self.reg.a = self.alu_rrc(self.reg.a), ... } } ... } } RL r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u5de6\u79fb\u8fd0\u7b97. \u6ea2\u51fa\u6807\u5fd7\u4f4d\u8865\u5145\u6700\u4f4e\u4f4d, \u540c\u65f6\u6700\u9ad8\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u9ad8\u4f4d. 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RL B 10 8 RL C 11 8 RL D 12 8 RL E 13 8 RL H 14 8 RL L 15 8 RL (HL) 16 16 RL A 17 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x10 => self.reg.b = self.alu_rl(self.reg.b), 0x11 => self.reg.c = self.alu_rl(self.reg.c), 0x12 => self.reg.d = self.alu_rl(self.reg.d), 0x13 => self.reg.e = self.alu_rl(self.reg.e), 0x14 => self.reg.h = self.alu_rl(self.reg.h), 0x15 => self.reg.l = self.alu_rl(self.reg.l), 0x16 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_rl(v); self.mem.borrow_mut().set(a, h); } 0x17 => self.reg.a = self.alu_rl(self.reg.a), ... } } ... } } RR r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u53f3\u79fb\u8fd0\u7b97. \u6ea2\u51fa\u6807\u5fd7\u4f4d\u79fb\u52a8\u81f3\u6700\u9ad8\u4f4d, \u540c\u65f6\u6700\u4f4e\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u6570\u636e\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RR B 18 8 RR C 19 8 RR D 1a 8 RR E 1b 8 RR H 1c 8 RR L 1d 8 RR (HL) 1e 16 RR A 1f 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x18 => self.reg.b = self.alu_rr(self.reg.b), 0x19 => self.reg.c = self.alu_rr(self.reg.c), 0x1a => self.reg.d = self.alu_rr(self.reg.d), 0x1b => self.reg.e = self.alu_rr(self.reg.e), 0x1c => self.reg.h = self.alu_rr(self.reg.h), 0x1d => self.reg.l = self.alu_rr(self.reg.l), 0x1e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_rr(v); self.mem.borrow_mut().set(a, h); } 0x1f => self.reg.a = self.alu_rr(self.reg.a), ... } } ... } } SLA r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u5de6\u79fb\u8fd0\u7b97. \u6700\u9ad8\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d, \u6700\u4f4e\u4f4d\u8bbe\u7f6e\u4e3a\u96f6. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u6570\u636e\u6700\u9ad8\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SLA B 20 8 SLA C 21 8 SLA D 22 8 SLA E 23 8 SLA H 24 8 SLA L 25 8 SLA (HL) 26 16 SLA A 27 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Shift n left into Carry. LSB of n set to 0. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 7 data fn alu_sla(&mut self, a: u8) -> u8 { let c = (a & 0x80) >> 7 == 0x01; let r = a << 1; self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x20 => self.reg.b = self.alu_sla(self.reg.b), 0x21 => self.reg.c = self.alu_sla(self.reg.c), 0x22 => self.reg.d = self.alu_sla(self.reg.d), 0x23 => self.reg.e = self.alu_sla(self.reg.e), 0x24 => self.reg.h = self.alu_sla(self.reg.h), 0x25 => self.reg.l = self.alu_sla(self.reg.l), 0x26 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_sla(v); self.mem.borrow_mut().set(a, h); } 0x27 => self.reg.a = self.alu_sla(self.reg.a), ... } } ... } } SRA r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u53f3\u79fb\u8fd0\u7b97. \u6700\u4f4e\u4f4d\u4fdd\u5b58\u5165\u6ea2\u51fa\u6807\u5fd7\u4f4d, \u6700\u9ad8\u4f4d\u4fdd\u6301\u4e0d\u53d8. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u6570\u636e\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SRA B 28 8 SRA C 29 8 SRA D 2a 8 SRA E 2b 8 SRA H 2c 8 SRA L 2d 8 SRA (HL) 2e 16 SRA A 2f 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Shift n right into Carry. MSB doesn't change. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 0 data. fn alu_sra(&mut self, a: u8) -> u8 { let c = a & 0x01 == 0x01; let r = (a >> 1) | (a & 0x80); self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x28 => self.reg.b = self.alu_sra(self.reg.b), 0x29 => self.reg.c = self.alu_sra(self.reg.c), 0x2a => self.reg.d = self.alu_sra(self.reg.d), 0x2b => self.reg.e = self.alu_sra(self.reg.e), 0x2c => self.reg.h = self.alu_sra(self.reg.h), 0x2d => self.reg.l = self.alu_sra(self.reg.l), 0x2e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_sra(v); self.mem.borrow_mut().set(a, h); } 0x2f => self.reg.a = self.alu_sra(self.reg.a), ... } } ... } } SRL r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u53f3\u79fb\u8fd0\u7b97. \u6700\u4f4e\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d, \u6700\u9ad8\u4f4d\u7f6e\u96f6. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u6570\u636e\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SRL B 38 8 SRL C 39 8 SRL D 3a 8 SRL E 3b 8 SRL H 3c 8 SRL L 3d 8 SRL (HL) 3e 16 SRL A 3f 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Shift n right into Carry. MSB set to 0. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 0 data. fn alu_srl(&mut self, a: u8) -> u8 { let c = a & 0x01 == 0x01; let r = a >> 1; self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x38 => self.reg.b = self.alu_srl(self.reg.b), 0x39 => self.reg.c = self.alu_srl(self.reg.c), 0x3a => self.reg.d = self.alu_srl(self.reg.d), 0x3b => self.reg.e = self.alu_srl(self.reg.e), 0x3c => self.reg.h = self.alu_srl(self.reg.h), 0x3d => self.reg.l = self.alu_srl(self.reg.l), 0x3e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_srl(v); self.mem.borrow_mut().set(a, h); } 0x3f => self.reg.a = self.alu_srl(self.reg.a), ... } } ... } } \u4ea4\u6362 SWAP r8 1) \u63cf\u8ff0 \u4ea4\u6362\u76ee\u6807\u5bc4\u5b58\u5668\u9ad8 4 \u4f4d\u4e0e\u4f4e 4 \u4f4d\u7684\u6bd4\u7279. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u7f6e\u96f6 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SWAP B 30 8 SWAP C 31 8 SWAP D 32 8 SWAP E 33 8 SWAP H 34 8 SWAP L 35 8 SWAP (HL) 36 16 SWAP A 37 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Swap upper & lower nibles of n. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Reset. fn alu_swap(&mut self, a: u8) -> u8 { self.reg.set_flag(C, false); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, a == 0x00); (a >> 4) | (a << 4) } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x30 => self.reg.b = self.alu_swap(self.reg.b), 0x31 => self.reg.c = self.alu_swap(self.reg.c), 0x32 => self.reg.d = self.alu_swap(self.reg.d), 0x33 => self.reg.e = self.alu_swap(self.reg.e), 0x34 => self.reg.h = self.alu_swap(self.reg.h), 0x35 => self.reg.l = self.alu_swap(self.reg.l), 0x36 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_swap(v); self.mem.borrow_mut().set(a, h); } 0x37 => self.reg.a = self.alu_swap(self.reg.a), ... } } ... } } \u4f4d\u6570\u636e\u83b7\u53d6\u4e0e\u8bbe\u7f6e BIT 1) \u63cf\u8ff0 \u53d6\u5f97\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d\u6307\u5b9a\u7684 bit \u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u5982\u679c\u6307\u5b9a\u5bc4\u5b58\u5668\u7684\u6307\u5b9a bit \u4f4d\u4e3a\u96f6, \u5219\u7f6e\u96f6. N - \u7f6e\u96f6 H - \u7f6e\u4f4d C - \u4fdd\u6301\u4e0d\u53d8 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles BIT B, 0 40 8 BIT C, 0 41 8 BIT D, 0 42 8 BIT E, 0 43 8 BIT H, 0 44 8 BIT L, 0 45 8 BIT (HL), 0 46 16 BIT A, 0 47 8 BIT B, 1 48 8 BIT C, 1 49 8 BIT D, 1 4a 8 BIT E, 1 4b 8 BIT H, 1 4c 8 BIT L, 1 4d 8 BIT (HL), 1 4e 16 BIT A, 1 4f 8 BIT B, 2 50 8 BIT C, 2 51 8 BIT D, 2 52 8 BIT E, 2 53 8 BIT H, 2 54 8 BIT L, 2 55 8 BIT (HL), 2 56 16 BIT A, 2 57 8 BIT B, 3 58 8 BIT C, 3 59 8 BIT D, 3 5a 8 BIT E, 3 5b 8 BIT H, 3 5c 8 BIT L, 3 5d 8 BIT (HL), 3 5e 16 BIT A, 3 5f 8 BIT B, 4 60 8 BIT C, 4 61 8 BIT D, 4 62 8 BIT E, 4 63 8 BIT H, 4 64 8 BIT L, 4 65 8 BIT (HL), 4 66 16 BIT A, 4 67 8 BIT B, 5 68 8 BIT C, 5 69 8 BIT D, 5 6a 8 BIT E, 5 6b 8 BIT H, 5 6c 8 BIT L, 5 6d 8 BIT (HL), 5 6e 16 BIT A, 5 6f 8 BIT B, 6 70 8 BIT C, 6 71 8 BIT D, 6 72 8 BIT E, 6 73 8 BIT H, 6 74 8 BIT L, 6 75 8 BIT (HL), 6 76 16 BIT A, 6 77 8 BIT B, 7 78 8 BIT C, 7 79 8 BIT D, 7 7a 8 BIT E, 7 7b 8 BIT H, 7 7c 8 BIT L, 7 7d 8 BIT (HL), 7 7e 16 BIT A, 7 7f 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Test bit b in register r. // b = 0 - 7, r = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if bit b of register r is 0. // N - Reset. // H - Set. // C - Not affected fn alu_bit(&mut self, a: u8, b: u8) { let r = a & (1 << b) == 0x00; self.reg.set_flag(H, true); self.reg.set_flag(N, false); self.reg.set_flag(Z, r); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x40 => self.alu_bit(self.reg.b, 0), 0x41 => self.alu_bit(self.reg.c, 0), 0x42 => self.alu_bit(self.reg.d, 0), 0x43 => self.alu_bit(self.reg.e, 0), 0x44 => self.alu_bit(self.reg.h, 0), 0x45 => self.alu_bit(self.reg.l, 0), 0x46 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 0); } 0x47 => self.alu_bit(self.reg.a, 0), 0x48 => self.alu_bit(self.reg.b, 1), 0x49 => self.alu_bit(self.reg.c, 1), 0x4a => self.alu_bit(self.reg.d, 1), 0x4b => self.alu_bit(self.reg.e, 1), 0x4c => self.alu_bit(self.reg.h, 1), 0x4d => self.alu_bit(self.reg.l, 1), 0x4e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 1); } 0x4f => self.alu_bit(self.reg.a, 1), 0x50 => self.alu_bit(self.reg.b, 2), 0x51 => self.alu_bit(self.reg.c, 2), 0x52 => self.alu_bit(self.reg.d, 2), 0x53 => self.alu_bit(self.reg.e, 2), 0x54 => self.alu_bit(self.reg.h, 2), 0x55 => self.alu_bit(self.reg.l, 2), 0x56 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 2); } 0x57 => self.alu_bit(self.reg.a, 2), 0x58 => self.alu_bit(self.reg.b, 3), 0x59 => self.alu_bit(self.reg.c, 3), 0x5a => self.alu_bit(self.reg.d, 3), 0x5b => self.alu_bit(self.reg.e, 3), 0x5c => self.alu_bit(self.reg.h, 3), 0x5d => self.alu_bit(self.reg.l, 3), 0x5e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 3); } 0x5f => self.alu_bit(self.reg.a, 3), 0x60 => self.alu_bit(self.reg.b, 4), 0x61 => self.alu_bit(self.reg.c, 4), 0x62 => self.alu_bit(self.reg.d, 4), 0x63 => self.alu_bit(self.reg.e, 4), 0x64 => self.alu_bit(self.reg.h, 4), 0x65 => self.alu_bit(self.reg.l, 4), 0x66 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 4); } 0x67 => self.alu_bit(self.reg.a, 4), 0x68 => self.alu_bit(self.reg.b, 5), 0x69 => self.alu_bit(self.reg.c, 5), 0x6a => self.alu_bit(self.reg.d, 5), 0x6b => self.alu_bit(self.reg.e, 5), 0x6c => self.alu_bit(self.reg.h, 5), 0x6d => self.alu_bit(self.reg.l, 5), 0x6e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 5); } 0x6f => self.alu_bit(self.reg.a, 5), 0x70 => self.alu_bit(self.reg.b, 6), 0x71 => self.alu_bit(self.reg.c, 6), 0x72 => self.alu_bit(self.reg.d, 6), 0x73 => self.alu_bit(self.reg.e, 6), 0x74 => self.alu_bit(self.reg.h, 6), 0x75 => self.alu_bit(self.reg.l, 6), 0x76 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 6); } 0x77 => self.alu_bit(self.reg.a, 6), 0x78 => self.alu_bit(self.reg.b, 7), 0x79 => self.alu_bit(self.reg.c, 7), 0x7a => self.alu_bit(self.reg.d, 7), 0x7b => self.alu_bit(self.reg.e, 7), 0x7c => self.alu_bit(self.reg.h, 7), 0x7d => self.alu_bit(self.reg.l, 7), 0x7e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 7); } 0x7f => self.alu_bit(self.reg.a, 7), ... } } ... } } RES 1) \u63cf\u8ff0 \u7f6e\u96f6\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d\u6307\u5b9a\u7684 bit \u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RES B, 0 80 8 RES C, 0 81 8 RES D, 0 82 8 RES E, 0 83 8 RES H, 0 84 8 RES L, 0 85 8 RES (HL), 0 86 16 RES A, 0 87 8 RES B, 1 88 8 RES C, 1 89 8 RES D, 1 8a 8 RES E, 1 8b 8 RES H, 1 8c 8 RES L, 1 8d 8 RES (HL), 1 8e 16 RES A, 1 8f 8 RES B, 2 90 8 RES C, 2 91 8 RES D, 2 92 8 RES E, 2 93 8 RES H, 2 94 8 RES L, 2 95 8 RES (HL), 2 96 16 RES A, 2 97 8 RES B, 3 98 8 RES C, 3 99 8 RES D, 3 9a 8 RES E, 3 9b 8 RES H, 3 9c 8 RES L, 3 9d 8 RES (HL), 3 9e 16 RES A, 3 9f 8 RES B, 4 a0 8 RES C, 4 a1 8 RES D, 4 a2 8 RES E, 4 a3 8 RES H, 4 a4 8 RES L, 4 a5 8 RES (HL), 4 a6 16 RES A, 4 a7 8 RES B, 5 a8 8 RES C, 5 a9 8 RES D, 5 aa 8 RES E, 5 ab 8 RES H, 5 ac 8 RES L, 5 ad 8 RES (HL), 5 ae 16 RES A, 5 af 8 RES B, 6 b0 8 RES C, 6 b1 8 RES D, 6 b2 8 RES E, 6 b3 8 RES H, 6 b4 8 RES L, 6 b5 8 RES (HL), 6 b6 16 RES A, 6 b7 8 RES B, 7 b8 8 RES C, 7 b9 8 RES D, 7 ba 8 RES E, 7 bb 8 RES H, 7 bc 8 RES L, 7 bd 8 RES (HL), 7 be 16 RES A, 7 bf 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Reset bit b in register r. // b = 0 - 7, r = A,B,C,D,E,H,L,(HL) // // Flags affected: None. fn alu_res(&mut self, a: u8, b: u8) -> u8 { a & !(1 << b) } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x80 => self.reg.b = self.alu_res(self.reg.b, 0), 0x81 => self.reg.c = self.alu_res(self.reg.c, 0), 0x82 => self.reg.d = self.alu_res(self.reg.d, 0), 0x83 => self.reg.e = self.alu_res(self.reg.e, 0), 0x84 => self.reg.h = self.alu_res(self.reg.h, 0), 0x85 => self.reg.l = self.alu_res(self.reg.l, 0), 0x86 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 0); self.mem.borrow_mut().set(a, h); } 0x87 => self.reg.a = self.alu_res(self.reg.a, 0), 0x88 => self.reg.b = self.alu_res(self.reg.b, 1), 0x89 => self.reg.c = self.alu_res(self.reg.c, 1), 0x8a => self.reg.d = self.alu_res(self.reg.d, 1), 0x8b => self.reg.e = self.alu_res(self.reg.e, 1), 0x8c => self.reg.h = self.alu_res(self.reg.h, 1), 0x8d => self.reg.l = self.alu_res(self.reg.l, 1), 0x8e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 1); self.mem.borrow_mut().set(a, h); } 0x8f => self.reg.a = self.alu_res(self.reg.a, 1), 0x90 => self.reg.b = self.alu_res(self.reg.b, 2), 0x91 => self.reg.c = self.alu_res(self.reg.c, 2), 0x92 => self.reg.d = self.alu_res(self.reg.d, 2), 0x93 => self.reg.e = self.alu_res(self.reg.e, 2), 0x94 => self.reg.h = self.alu_res(self.reg.h, 2), 0x95 => self.reg.l = self.alu_res(self.reg.l, 2), 0x96 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 2); self.mem.borrow_mut().set(a, h); } 0x97 => self.reg.a = self.alu_res(self.reg.a, 2), 0x98 => self.reg.b = self.alu_res(self.reg.b, 3), 0x99 => self.reg.c = self.alu_res(self.reg.c, 3), 0x9a => self.reg.d = self.alu_res(self.reg.d, 3), 0x9b => self.reg.e = self.alu_res(self.reg.e, 3), 0x9c => self.reg.h = self.alu_res(self.reg.h, 3), 0x9d => self.reg.l = self.alu_res(self.reg.l, 3), 0x9e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 3); self.mem.borrow_mut().set(a, h); } 0x9f => self.reg.a = self.alu_res(self.reg.a, 3), 0xa0 => self.reg.b = self.alu_res(self.reg.b, 4), 0xa1 => self.reg.c = self.alu_res(self.reg.c, 4), 0xa2 => self.reg.d = self.alu_res(self.reg.d, 4), 0xa3 => self.reg.e = self.alu_res(self.reg.e, 4), 0xa4 => self.reg.h = self.alu_res(self.reg.h, 4), 0xa5 => self.reg.l = self.alu_res(self.reg.l, 4), 0xa6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 4); self.mem.borrow_mut().set(a, h); } 0xa7 => self.reg.a = self.alu_res(self.reg.a, 4), 0xa8 => self.reg.b = self.alu_res(self.reg.b, 5), 0xa9 => self.reg.c = self.alu_res(self.reg.c, 5), 0xaa => self.reg.d = self.alu_res(self.reg.d, 5), 0xab => self.reg.e = self.alu_res(self.reg.e, 5), 0xac => self.reg.h = self.alu_res(self.reg.h, 5), 0xad => self.reg.l = self.alu_res(self.reg.l, 5), 0xae => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 5); self.mem.borrow_mut().set(a, h); } 0xaf => self.reg.a = self.alu_res(self.reg.a, 5), 0xb0 => self.reg.b = self.alu_res(self.reg.b, 6), 0xb1 => self.reg.c = self.alu_res(self.reg.c, 6), 0xb2 => self.reg.d = self.alu_res(self.reg.d, 6), 0xb3 => self.reg.e = self.alu_res(self.reg.e, 6), 0xb4 => self.reg.h = self.alu_res(self.reg.h, 6), 0xb5 => self.reg.l = self.alu_res(self.reg.l, 6), 0xb6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 6); self.mem.borrow_mut().set(a, h); } 0xb7 => self.reg.a = self.alu_res(self.reg.a, 6), 0xb8 => self.reg.b = self.alu_res(self.reg.b, 7), 0xb9 => self.reg.c = self.alu_res(self.reg.c, 7), 0xba => self.reg.d = self.alu_res(self.reg.d, 7), 0xbb => self.reg.e = self.alu_res(self.reg.e, 7), 0xbc => self.reg.h = self.alu_res(self.reg.h, 7), 0xbd => self.reg.l = self.alu_res(self.reg.l, 7), 0xbe => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 7); self.mem.borrow_mut().set(a, h); } 0xbf => self.reg.a = self.alu_res(self.reg.a, 7), ... } } ... } } SET 1) \u63cf\u8ff0 \u7f6e\u4f4d\u5bc4\u5b58\u5668\u4e2d\u6307\u5b9a\u7684 bit \u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SET B, 0 c0 8 SET C, 0 c1 8 SET D, 0 c2 8 SET E, 0 c3 8 SET H, 0 c4 8 SET L, 0 c5 8 SET (HL), 0 c6 16 SET A, 0 c7 8 SET B, 1 c8 8 SET C, 1 c9 8 SET D, 1 ca 8 SET E, 1 cb 8 SET H, 1 cc 8 SET L, 1 cd 8 SET (HL), 1 ce 16 SET A, 1 cf 8 SET B, 2 d0 8 SET C, 2 d1 8 SET D, 2 d2 8 SET E, 2 d3 8 SET H, 2 d4 8 SET L, 2 d5 8 SET (HL), 2 d6 16 SET A, 2 d7 8 SET B, 3 d8 8 SET C, 3 d9 8 SET D, 3 da 8 SET E, 3 db 8 SET H, 3 dc 8 SET L, 3 dd 8 SET (HL), 3 de 16 SET A, 3 df 8 SET B, 4 e0 8 SET C, 4 e1 8 SET D, 4 e2 8 SET E, 4 e3 8 SET H, 4 e4 8 SET L, 4 e5 8 SET (HL), 4 e6 16 SET A, 4 e7 8 SET B, 5 e8 8 SET C, 5 e9 8 SET D, 5 ea 8 SET E, 5 eb 8 SET H, 5 ec 8 SET L, 5 ed 8 SET (HL), 5 ee 16 SET A, 5 ef 8 SET B, 6 f0 8 SET C, 6 f1 8 SET D, 6 f2 8 SET E, 6 f3 8 SET H, 6 f4 8 SET L, 6 f5 8 SET (HL), 6 f6 16 SET A, 6 f7 8 SET B, 7 f8 8 SET C, 7 f9 8 SET D, 7 fa 8 SET E, 7 fb 8 SET H, 7 fc 8 SET L, 7 fd 8 SET (HL), 7 fe 16 SET A, 7 ff 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Set bit b in register r. // b = 0 - 7, r = A,B,C,D,E,H,L,(HL) // // Flags affected: None. fn alu_set(&mut self, a: u8, b: u8) -> u8 { a | (1 << b) } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0xc0 => self.reg.b = self.alu_set(self.reg.b, 0), 0xc1 => self.reg.c = self.alu_set(self.reg.c, 0), 0xc2 => self.reg.d = self.alu_set(self.reg.d, 0), 0xc3 => self.reg.e = self.alu_set(self.reg.e, 0), 0xc4 => self.reg.h = self.alu_set(self.reg.h, 0), 0xc5 => self.reg.l = self.alu_set(self.reg.l, 0), 0xc6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 0); self.mem.borrow_mut().set(a, h); } 0xc7 => self.reg.a = self.alu_set(self.reg.a, 0), 0xc8 => self.reg.b = self.alu_set(self.reg.b, 1), 0xc9 => self.reg.c = self.alu_set(self.reg.c, 1), 0xca => self.reg.d = self.alu_set(self.reg.d, 1), 0xcb => self.reg.e = self.alu_set(self.reg.e, 1), 0xcc => self.reg.h = self.alu_set(self.reg.h, 1), 0xcd => self.reg.l = self.alu_set(self.reg.l, 1), 0xce => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 1); self.mem.borrow_mut().set(a, h); } 0xcf => self.reg.a = self.alu_set(self.reg.a, 1), 0xd0 => self.reg.b = self.alu_set(self.reg.b, 2), 0xd1 => self.reg.c = self.alu_set(self.reg.c, 2), 0xd2 => self.reg.d = self.alu_set(self.reg.d, 2), 0xd3 => self.reg.e = self.alu_set(self.reg.e, 2), 0xd4 => self.reg.h = self.alu_set(self.reg.h, 2), 0xd5 => self.reg.l = self.alu_set(self.reg.l, 2), 0xd6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 2); self.mem.borrow_mut().set(a, h); } 0xd7 => self.reg.a = self.alu_set(self.reg.a, 2), 0xd8 => self.reg.b = self.alu_set(self.reg.b, 3), 0xd9 => self.reg.c = self.alu_set(self.reg.c, 3), 0xda => self.reg.d = self.alu_set(self.reg.d, 3), 0xdb => self.reg.e = self.alu_set(self.reg.e, 3), 0xdc => self.reg.h = self.alu_set(self.reg.h, 3), 0xdd => self.reg.l = self.alu_set(self.reg.l, 3), 0xde => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 3); self.mem.borrow_mut().set(a, h); } 0xdf => self.reg.a = self.alu_set(self.reg.a, 3), 0xe0 => self.reg.b = self.alu_set(self.reg.b, 4), 0xe1 => self.reg.c = self.alu_set(self.reg.c, 4), 0xe2 => self.reg.d = self.alu_set(self.reg.d, 4), 0xe3 => self.reg.e = self.alu_set(self.reg.e, 4), 0xe4 => self.reg.h = self.alu_set(self.reg.h, 4), 0xe5 => self.reg.l = self.alu_set(self.reg.l, 4), 0xe6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 4); self.mem.borrow_mut().set(a, h); } 0xe7 => self.reg.a = self.alu_set(self.reg.a, 4), 0xe8 => self.reg.b = self.alu_set(self.reg.b, 5), 0xe9 => self.reg.c = self.alu_set(self.reg.c, 5), 0xea => self.reg.d = self.alu_set(self.reg.d, 5), 0xeb => self.reg.e = self.alu_set(self.reg.e, 5), 0xec => self.reg.h = self.alu_set(self.reg.h, 5), 0xed => self.reg.l = self.alu_set(self.reg.l, 5), 0xee => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 5); self.mem.borrow_mut().set(a, h); } 0xef => self.reg.a = self.alu_set(self.reg.a, 5), 0xf0 => self.reg.b = self.alu_set(self.reg.b, 6), 0xf1 => self.reg.c = self.alu_set(self.reg.c, 6), 0xf2 => self.reg.d = self.alu_set(self.reg.d, 6), 0xf3 => self.reg.e = self.alu_set(self.reg.e, 6), 0xf4 => self.reg.h = self.alu_set(self.reg.h, 6), 0xf5 => self.reg.l = self.alu_set(self.reg.l, 6), 0xf6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 6); self.mem.borrow_mut().set(a, h); } 0xf7 => self.reg.a = self.alu_set(self.reg.a, 6), 0xf8 => self.reg.b = self.alu_set(self.reg.b, 7), 0xf9 => self.reg.c = self.alu_set(self.reg.c, 7), 0xfa => self.reg.d = self.alu_set(self.reg.d, 7), 0xfb => self.reg.e = self.alu_set(self.reg.e, 7), 0xfc => self.reg.h = self.alu_set(self.reg.h, 7), 0xfd => self.reg.l = self.alu_set(self.reg.l, 7), 0xfe => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 7); self.mem.borrow_mut().set(a, h); } 0xff => self.reg.a = self.alu_set(self.reg.a, 7), ... } } ... } }","title":"GB-CPU-LR35902\u6269\u5c55\u6307\u4ee4\u96c6"},{"location":"content/gameboy/cpu/lr35902_extension/#lr35902","text":"\u6807\u51c6\u7684\u7b97\u672f\u903b\u8f91\u6307\u4ee4\u901a\u5e38\u5c06\u7ed3\u679c\u5199\u56de\u5230\u5bc4\u5b58\u5668 A. \u5b83\u4eec\u6240\u5b8c\u6210\u4efb\u52a1\u53ef\u4ee5\u7528\u5982\u4e0b\u8bed\u8a00\u63cf\u8ff0: \u4ece\u5bc4\u5b58\u5668 A \u62ff\u51fa\u6570\u636e, \u8fdb\u884c\u4e00\u4e9b\u7b97\u672f\u903b\u8f91\u8fd0\u7b97\u540e\u518d\u91cd\u65b0\u653e\u56de\u5bc4\u5b58\u5668 A. \u60f3\u8c61\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u9700\u6c42: \u5bf9\u5bc4\u5b58\u5668 B \u5185\u5b58\u50a8\u7684\u6570\u636e\u53f3\u79fb\u4e00\u4f4d. \u5982\u4e0b\u7684\u64cd\u4f5c\u6b65\u9aa4\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u65b9\u6848: \u5c06\u5bc4\u5b58\u5668 A \u7684\u503c\u4fdd\u5b58\u5230\u5185\u5b58\u4e2d. \u5c06\u5bc4\u5b58\u5668 B \u7684\u503c\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668 A. \u5c06\u5bc4\u5b58\u5668 A \u53f3\u79fb\u4e00\u4f4d. \u5c06\u5bc4\u5b58\u5668 A \u7684\u503c\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668 B. \u5c06\u7b2c\u4e00\u6b65\u4fdd\u5b58\u7684\u503c\u5199\u56de\u5bc4\u5b58\u5668 A. \u8fd9\u6837\u64cd\u4f5c\u663e\u5f97\u6709\u70b9\u9ebb\u70e6, \u5982\u679c\u53ef\u4ee5\u76f4\u63a5\u5bf9\u5bc4\u5b58\u5668 B \u7684\u6570\u636e\u8fdb\u884c\u4f4d\u79fb\u8fd0\u7b97\u5c31\u597d\u4e86! \u4f46\u662f LR35902 \u662f 8 \u4f4d CPU, \u56e0\u6b64\u5982\u679c\u4f7f\u7528\u4e00\u4e2a Byte \u6765\u8868\u793a\u4e00\u4e2a\u64cd\u4f5c\u7801\u7684\u8bdd, \u5176\u6700\u591a\u53ea\u5141\u8bb8\u8868\u793a 2^8 = 256 \u4e2a\u6307\u4ee4, \u5982\u679c\u8bfb\u8005\u66fe\u6ce8\u610f\u4e0a\u4e00\u8282\u4e2d\u6807\u51c6\u6307\u4ee4\u96c6\u7684\u64cd\u4f5c\u7801\u4e2a\u6570\u7684\u8bdd, \u4f1a\u53d1\u73b0\u5355\u5355\u6807\u51c6\u6307\u4ee4\u96c6\u5c31\u5df2\u7ecf\u6709\u63a5\u8fd1 256 \u4e2a\u4e86. \u73b0\u5728\u5df2\u7ecf\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u4f4d\u6765\u4e3a\u4e0d\u540c\u7684\u5bc4\u5b58\u5668\u90fd\u5b9e\u73b0\u7b97\u672f\u903b\u8f91\u6307\u4ee4, \u90a3\u4e48, \u662f\u5426\u53ef\u4ee5\u5c06\u6307\u4ee4\u6269\u5c55\u5230\u4e24\u4e2a Byte\uff1f","title":"LR35902 \u6269\u5c55\u6307\u4ee4\u96c6"},{"location":"content/gameboy/cpu/lr35902_extension/#_1","text":"\u6269\u5c55\u6307\u4ee4\u96c6\u662f\u6307\u4e3a CPU \u589e\u52a0\u65b0\u7684\u6307\u4ee4\u96c6, \u8fd9\u4e9b\u6269\u5c55\u6307\u4ee4\u53ef\u4ee5\u63d0\u9ad8 CPU \u5904\u7406\u6570\u5b66\u8fd0\u7b97\u7684\u80fd\u529b. \u5728\u73b0\u4ee3 CPU \u4e2d, \u5e38\u89c1\u7684\u6709 MMX, SSE \u7b49\u6269\u5c55\u6307\u4ee4\u96c6. \u4e00\u4e2a\u65e9\u671f\u7684\u6bd4\u8f83\u8457\u540d\u7684\u6269\u5c55\u6307\u4ee4\u96c6\u51fa\u73b0\u5728\u4e0a\u4e16\u7eaa 70 \u5e74\u4ee3\u7684\u8857\u673a\u6e38\u620f\u592a\u7a7a\u4fb5\u7565\u8005(\u5176\u6e38\u620f\u753b\u9762\u5982\u4e0b\u56fe\u6240\u793a), \u8be5\u8857\u673a\u4f7f\u7528 Intel 8080 CPU, \u4f46 Intel 8080 CPU \u7684\u6807\u51c6\u6307\u4ee4\u96c6\u4e0d\u5e26\u6570\u5b57\u7684\u79fb\u4f4d\u6307\u4ee4, \u56e0\u6b64\u8be5\u8857\u673a\u9009\u62e9\u901a\u8fc7\u5916\u63a5\u786c\u4ef6\u7535\u8def, \u901a\u8fc7 CPU I/O \u4e32\u53e3\u6765\u5b9e\u73b0\u79fb\u4f4d\u64cd\u4f5c. LR35902 \u7684\u6269\u5c55\u6307\u4ee4\u5927\u5c0f\u662f\u4e24\u4e2a Byte, \u5176\u4e2d\u7b2c\u4e00\u4e2a Byte \u56fa\u5b9a\u662f 0xcb. \u56e0\u6b64\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d, \u5982\u679c\u53d1\u73b0\u53d6\u5f97\u7684\u6307\u4ee4\u662f 0xcb, \u5219\u9700\u8981\u7ee7\u7eed\u53d6\u4e00\u4e2a Byte. \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b: fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { ... } } ... } } \u4e0b\u9762\u7ed9\u51fa\u4e86\u6269\u5c55\u6307\u4ee4\u7684\u6458\u8981\u4ee5\u53ca\u4eff\u771f\u5b9e\u73b0. \u5982\u679c\u8be5\u6307\u4ee4\u5f71\u54cd\u4e86\u6807\u5fd7\u4f4d, \u5219\u4f1a\u5728\u6307\u4ee4\u63cf\u8ff0\u4e2d\u6307\u660e.","title":"\u4ec0\u4e48\u662f\u6269\u5c55\u6307\u4ee4\u96c6"},{"location":"content/gameboy/cpu/lr35902_extension/#_2","text":"RLC r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u5de6\u79fb. \u6700\u9ad8\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u9ad8\u4f4d. 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RLC B 00 8 RLC C 01 8 RLC D 02 8 RLC E 03 8 RLC H 04 8 RLC L 05 8 RLC (HL) 06 16 RLC A 07 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x00 => self.reg.b = self.alu_rlc(self.reg.b), 0x01 => self.reg.c = self.alu_rlc(self.reg.c), 0x02 => self.reg.d = self.alu_rlc(self.reg.d), 0x03 => self.reg.e = self.alu_rlc(self.reg.e), 0x04 => self.reg.h = self.alu_rlc(self.reg.h), 0x05 => self.reg.l = self.alu_rlc(self.reg.l), 0x06 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_rlc(v); self.mem.borrow_mut().set(a, h); } 0x07 => self.reg.a = self.alu_rlc(self.reg.a), ... } } ... } } RRC r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u53f3\u79fb. \u6700\u4f4e\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RRC B 08 8 RRC C 09 8 RRC D 0a 8 RRC E 0b 8 RRC H 0c 8 RRC L 0d 8 RRC (HL) 0e 16 RRC A 0f 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x08 => self.reg.b = self.alu_rrc(self.reg.b), 0x09 => self.reg.c = self.alu_rrc(self.reg.c), 0x0a => self.reg.d = self.alu_rrc(self.reg.d), 0x0b => self.reg.e = self.alu_rrc(self.reg.e), 0x0c => self.reg.h = self.alu_rrc(self.reg.h), 0x0d => self.reg.l = self.alu_rrc(self.reg.l), 0x0e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_rrc(v); self.mem.borrow_mut().set(a, h); } 0x0f => self.reg.a = self.alu_rrc(self.reg.a), ... } } ... } } RL r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u5de6\u79fb\u8fd0\u7b97. \u6ea2\u51fa\u6807\u5fd7\u4f4d\u8865\u5145\u6700\u4f4e\u4f4d, \u540c\u65f6\u6700\u9ad8\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u9ad8\u4f4d. 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RL B 10 8 RL C 11 8 RL D 12 8 RL E 13 8 RL H 14 8 RL L 15 8 RL (HL) 16 16 RL A 17 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x10 => self.reg.b = self.alu_rl(self.reg.b), 0x11 => self.reg.c = self.alu_rl(self.reg.c), 0x12 => self.reg.d = self.alu_rl(self.reg.d), 0x13 => self.reg.e = self.alu_rl(self.reg.e), 0x14 => self.reg.h = self.alu_rl(self.reg.h), 0x15 => self.reg.l = self.alu_rl(self.reg.l), 0x16 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_rl(v); self.mem.borrow_mut().set(a, h); } 0x17 => self.reg.a = self.alu_rl(self.reg.a), ... } } ... } } RR r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u53f3\u79fb\u8fd0\u7b97. \u6ea2\u51fa\u6807\u5fd7\u4f4d\u79fb\u52a8\u81f3\u6700\u9ad8\u4f4d, \u540c\u65f6\u6700\u4f4e\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u6570\u636e\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RR B 18 8 RR C 19 8 RR D 1a 8 RR E 1b 8 RR H 1c 8 RR L 1d 8 RR (HL) 1e 16 RR A 1f 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x18 => self.reg.b = self.alu_rr(self.reg.b), 0x19 => self.reg.c = self.alu_rr(self.reg.c), 0x1a => self.reg.d = self.alu_rr(self.reg.d), 0x1b => self.reg.e = self.alu_rr(self.reg.e), 0x1c => self.reg.h = self.alu_rr(self.reg.h), 0x1d => self.reg.l = self.alu_rr(self.reg.l), 0x1e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_rr(v); self.mem.borrow_mut().set(a, h); } 0x1f => self.reg.a = self.alu_rr(self.reg.a), ... } } ... } } SLA r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u5de6\u79fb\u8fd0\u7b97. \u6700\u9ad8\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d, \u6700\u4f4e\u4f4d\u8bbe\u7f6e\u4e3a\u96f6. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u6570\u636e\u6700\u9ad8\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SLA B 20 8 SLA C 21 8 SLA D 22 8 SLA E 23 8 SLA H 24 8 SLA L 25 8 SLA (HL) 26 16 SLA A 27 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Shift n left into Carry. LSB of n set to 0. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 7 data fn alu_sla(&mut self, a: u8) -> u8 { let c = (a & 0x80) >> 7 == 0x01; let r = a << 1; self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x20 => self.reg.b = self.alu_sla(self.reg.b), 0x21 => self.reg.c = self.alu_sla(self.reg.c), 0x22 => self.reg.d = self.alu_sla(self.reg.d), 0x23 => self.reg.e = self.alu_sla(self.reg.e), 0x24 => self.reg.h = self.alu_sla(self.reg.h), 0x25 => self.reg.l = self.alu_sla(self.reg.l), 0x26 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_sla(v); self.mem.borrow_mut().set(a, h); } 0x27 => self.reg.a = self.alu_sla(self.reg.a), ... } } ... } } SRA r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u53f3\u79fb\u8fd0\u7b97. \u6700\u4f4e\u4f4d\u4fdd\u5b58\u5165\u6ea2\u51fa\u6807\u5fd7\u4f4d, \u6700\u9ad8\u4f4d\u4fdd\u6301\u4e0d\u53d8. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u6570\u636e\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SRA B 28 8 SRA C 29 8 SRA D 2a 8 SRA E 2b 8 SRA H 2c 8 SRA L 2d 8 SRA (HL) 2e 16 SRA A 2f 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Shift n right into Carry. MSB doesn't change. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 0 data. fn alu_sra(&mut self, a: u8) -> u8 { let c = a & 0x01 == 0x01; let r = (a >> 1) | (a & 0x80); self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x28 => self.reg.b = self.alu_sra(self.reg.b), 0x29 => self.reg.c = self.alu_sra(self.reg.c), 0x2a => self.reg.d = self.alu_sra(self.reg.d), 0x2b => self.reg.e = self.alu_sra(self.reg.e), 0x2c => self.reg.h = self.alu_sra(self.reg.h), 0x2d => self.reg.l = self.alu_sra(self.reg.l), 0x2e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_sra(v); self.mem.borrow_mut().set(a, h); } 0x2f => self.reg.a = self.alu_sra(self.reg.a), ... } } ... } } SRL r8 1) \u63cf\u8ff0 \u76ee\u6807\u5bc4\u5b58\u5668\u6309\u4f4d\u53f3\u79fb\u8fd0\u7b97. \u6700\u4f4e\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d, \u6700\u9ad8\u4f4d\u7f6e\u96f6. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u6570\u636e\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SRL B 38 8 SRL C 39 8 SRL D 3a 8 SRL E 3b 8 SRL H 3c 8 SRL L 3d 8 SRL (HL) 3e 16 SRL A 3f 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Shift n right into Carry. MSB set to 0. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 0 data. fn alu_srl(&mut self, a: u8) -> u8 { let c = a & 0x01 == 0x01; let r = a >> 1; self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x38 => self.reg.b = self.alu_srl(self.reg.b), 0x39 => self.reg.c = self.alu_srl(self.reg.c), 0x3a => self.reg.d = self.alu_srl(self.reg.d), 0x3b => self.reg.e = self.alu_srl(self.reg.e), 0x3c => self.reg.h = self.alu_srl(self.reg.h), 0x3d => self.reg.l = self.alu_srl(self.reg.l), 0x3e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_srl(v); self.mem.borrow_mut().set(a, h); } 0x3f => self.reg.a = self.alu_srl(self.reg.a), ... } } ... } }","title":"\u5faa\u73af\u548c\u79fb\u4f4d\u64cd\u4f5c"},{"location":"content/gameboy/cpu/lr35902_extension/#_3","text":"SWAP r8 1) \u63cf\u8ff0 \u4ea4\u6362\u76ee\u6807\u5bc4\u5b58\u5668\u9ad8 4 \u4f4d\u4e0e\u4f4e 4 \u4f4d\u7684\u6bd4\u7279. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u7f6e\u96f6 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SWAP B 30 8 SWAP C 31 8 SWAP D 32 8 SWAP E 33 8 SWAP H 34 8 SWAP L 35 8 SWAP (HL) 36 16 SWAP A 37 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Swap upper & lower nibles of n. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Reset. fn alu_swap(&mut self, a: u8) -> u8 { self.reg.set_flag(C, false); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, a == 0x00); (a >> 4) | (a << 4) } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x30 => self.reg.b = self.alu_swap(self.reg.b), 0x31 => self.reg.c = self.alu_swap(self.reg.c), 0x32 => self.reg.d = self.alu_swap(self.reg.d), 0x33 => self.reg.e = self.alu_swap(self.reg.e), 0x34 => self.reg.h = self.alu_swap(self.reg.h), 0x35 => self.reg.l = self.alu_swap(self.reg.l), 0x36 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_swap(v); self.mem.borrow_mut().set(a, h); } 0x37 => self.reg.a = self.alu_swap(self.reg.a), ... } } ... } }","title":"\u4ea4\u6362"},{"location":"content/gameboy/cpu/lr35902_extension/#_4","text":"BIT 1) \u63cf\u8ff0 \u53d6\u5f97\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d\u6307\u5b9a\u7684 bit \u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u5982\u679c\u6307\u5b9a\u5bc4\u5b58\u5668\u7684\u6307\u5b9a bit \u4f4d\u4e3a\u96f6, \u5219\u7f6e\u96f6. N - \u7f6e\u96f6 H - \u7f6e\u4f4d C - \u4fdd\u6301\u4e0d\u53d8 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles BIT B, 0 40 8 BIT C, 0 41 8 BIT D, 0 42 8 BIT E, 0 43 8 BIT H, 0 44 8 BIT L, 0 45 8 BIT (HL), 0 46 16 BIT A, 0 47 8 BIT B, 1 48 8 BIT C, 1 49 8 BIT D, 1 4a 8 BIT E, 1 4b 8 BIT H, 1 4c 8 BIT L, 1 4d 8 BIT (HL), 1 4e 16 BIT A, 1 4f 8 BIT B, 2 50 8 BIT C, 2 51 8 BIT D, 2 52 8 BIT E, 2 53 8 BIT H, 2 54 8 BIT L, 2 55 8 BIT (HL), 2 56 16 BIT A, 2 57 8 BIT B, 3 58 8 BIT C, 3 59 8 BIT D, 3 5a 8 BIT E, 3 5b 8 BIT H, 3 5c 8 BIT L, 3 5d 8 BIT (HL), 3 5e 16 BIT A, 3 5f 8 BIT B, 4 60 8 BIT C, 4 61 8 BIT D, 4 62 8 BIT E, 4 63 8 BIT H, 4 64 8 BIT L, 4 65 8 BIT (HL), 4 66 16 BIT A, 4 67 8 BIT B, 5 68 8 BIT C, 5 69 8 BIT D, 5 6a 8 BIT E, 5 6b 8 BIT H, 5 6c 8 BIT L, 5 6d 8 BIT (HL), 5 6e 16 BIT A, 5 6f 8 BIT B, 6 70 8 BIT C, 6 71 8 BIT D, 6 72 8 BIT E, 6 73 8 BIT H, 6 74 8 BIT L, 6 75 8 BIT (HL), 6 76 16 BIT A, 6 77 8 BIT B, 7 78 8 BIT C, 7 79 8 BIT D, 7 7a 8 BIT E, 7 7b 8 BIT H, 7 7c 8 BIT L, 7 7d 8 BIT (HL), 7 7e 16 BIT A, 7 7f 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Test bit b in register r. // b = 0 - 7, r = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if bit b of register r is 0. // N - Reset. // H - Set. // C - Not affected fn alu_bit(&mut self, a: u8, b: u8) { let r = a & (1 << b) == 0x00; self.reg.set_flag(H, true); self.reg.set_flag(N, false); self.reg.set_flag(Z, r); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x40 => self.alu_bit(self.reg.b, 0), 0x41 => self.alu_bit(self.reg.c, 0), 0x42 => self.alu_bit(self.reg.d, 0), 0x43 => self.alu_bit(self.reg.e, 0), 0x44 => self.alu_bit(self.reg.h, 0), 0x45 => self.alu_bit(self.reg.l, 0), 0x46 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 0); } 0x47 => self.alu_bit(self.reg.a, 0), 0x48 => self.alu_bit(self.reg.b, 1), 0x49 => self.alu_bit(self.reg.c, 1), 0x4a => self.alu_bit(self.reg.d, 1), 0x4b => self.alu_bit(self.reg.e, 1), 0x4c => self.alu_bit(self.reg.h, 1), 0x4d => self.alu_bit(self.reg.l, 1), 0x4e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 1); } 0x4f => self.alu_bit(self.reg.a, 1), 0x50 => self.alu_bit(self.reg.b, 2), 0x51 => self.alu_bit(self.reg.c, 2), 0x52 => self.alu_bit(self.reg.d, 2), 0x53 => self.alu_bit(self.reg.e, 2), 0x54 => self.alu_bit(self.reg.h, 2), 0x55 => self.alu_bit(self.reg.l, 2), 0x56 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 2); } 0x57 => self.alu_bit(self.reg.a, 2), 0x58 => self.alu_bit(self.reg.b, 3), 0x59 => self.alu_bit(self.reg.c, 3), 0x5a => self.alu_bit(self.reg.d, 3), 0x5b => self.alu_bit(self.reg.e, 3), 0x5c => self.alu_bit(self.reg.h, 3), 0x5d => self.alu_bit(self.reg.l, 3), 0x5e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 3); } 0x5f => self.alu_bit(self.reg.a, 3), 0x60 => self.alu_bit(self.reg.b, 4), 0x61 => self.alu_bit(self.reg.c, 4), 0x62 => self.alu_bit(self.reg.d, 4), 0x63 => self.alu_bit(self.reg.e, 4), 0x64 => self.alu_bit(self.reg.h, 4), 0x65 => self.alu_bit(self.reg.l, 4), 0x66 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 4); } 0x67 => self.alu_bit(self.reg.a, 4), 0x68 => self.alu_bit(self.reg.b, 5), 0x69 => self.alu_bit(self.reg.c, 5), 0x6a => self.alu_bit(self.reg.d, 5), 0x6b => self.alu_bit(self.reg.e, 5), 0x6c => self.alu_bit(self.reg.h, 5), 0x6d => self.alu_bit(self.reg.l, 5), 0x6e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 5); } 0x6f => self.alu_bit(self.reg.a, 5), 0x70 => self.alu_bit(self.reg.b, 6), 0x71 => self.alu_bit(self.reg.c, 6), 0x72 => self.alu_bit(self.reg.d, 6), 0x73 => self.alu_bit(self.reg.e, 6), 0x74 => self.alu_bit(self.reg.h, 6), 0x75 => self.alu_bit(self.reg.l, 6), 0x76 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 6); } 0x77 => self.alu_bit(self.reg.a, 6), 0x78 => self.alu_bit(self.reg.b, 7), 0x79 => self.alu_bit(self.reg.c, 7), 0x7a => self.alu_bit(self.reg.d, 7), 0x7b => self.alu_bit(self.reg.e, 7), 0x7c => self.alu_bit(self.reg.h, 7), 0x7d => self.alu_bit(self.reg.l, 7), 0x7e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); self.alu_bit(v, 7); } 0x7f => self.alu_bit(self.reg.a, 7), ... } } ... } } RES 1) \u63cf\u8ff0 \u7f6e\u96f6\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d\u6307\u5b9a\u7684 bit \u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RES B, 0 80 8 RES C, 0 81 8 RES D, 0 82 8 RES E, 0 83 8 RES H, 0 84 8 RES L, 0 85 8 RES (HL), 0 86 16 RES A, 0 87 8 RES B, 1 88 8 RES C, 1 89 8 RES D, 1 8a 8 RES E, 1 8b 8 RES H, 1 8c 8 RES L, 1 8d 8 RES (HL), 1 8e 16 RES A, 1 8f 8 RES B, 2 90 8 RES C, 2 91 8 RES D, 2 92 8 RES E, 2 93 8 RES H, 2 94 8 RES L, 2 95 8 RES (HL), 2 96 16 RES A, 2 97 8 RES B, 3 98 8 RES C, 3 99 8 RES D, 3 9a 8 RES E, 3 9b 8 RES H, 3 9c 8 RES L, 3 9d 8 RES (HL), 3 9e 16 RES A, 3 9f 8 RES B, 4 a0 8 RES C, 4 a1 8 RES D, 4 a2 8 RES E, 4 a3 8 RES H, 4 a4 8 RES L, 4 a5 8 RES (HL), 4 a6 16 RES A, 4 a7 8 RES B, 5 a8 8 RES C, 5 a9 8 RES D, 5 aa 8 RES E, 5 ab 8 RES H, 5 ac 8 RES L, 5 ad 8 RES (HL), 5 ae 16 RES A, 5 af 8 RES B, 6 b0 8 RES C, 6 b1 8 RES D, 6 b2 8 RES E, 6 b3 8 RES H, 6 b4 8 RES L, 6 b5 8 RES (HL), 6 b6 16 RES A, 6 b7 8 RES B, 7 b8 8 RES C, 7 b9 8 RES D, 7 ba 8 RES E, 7 bb 8 RES H, 7 bc 8 RES L, 7 bd 8 RES (HL), 7 be 16 RES A, 7 bf 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Reset bit b in register r. // b = 0 - 7, r = A,B,C,D,E,H,L,(HL) // // Flags affected: None. fn alu_res(&mut self, a: u8, b: u8) -> u8 { a & !(1 << b) } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0x80 => self.reg.b = self.alu_res(self.reg.b, 0), 0x81 => self.reg.c = self.alu_res(self.reg.c, 0), 0x82 => self.reg.d = self.alu_res(self.reg.d, 0), 0x83 => self.reg.e = self.alu_res(self.reg.e, 0), 0x84 => self.reg.h = self.alu_res(self.reg.h, 0), 0x85 => self.reg.l = self.alu_res(self.reg.l, 0), 0x86 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 0); self.mem.borrow_mut().set(a, h); } 0x87 => self.reg.a = self.alu_res(self.reg.a, 0), 0x88 => self.reg.b = self.alu_res(self.reg.b, 1), 0x89 => self.reg.c = self.alu_res(self.reg.c, 1), 0x8a => self.reg.d = self.alu_res(self.reg.d, 1), 0x8b => self.reg.e = self.alu_res(self.reg.e, 1), 0x8c => self.reg.h = self.alu_res(self.reg.h, 1), 0x8d => self.reg.l = self.alu_res(self.reg.l, 1), 0x8e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 1); self.mem.borrow_mut().set(a, h); } 0x8f => self.reg.a = self.alu_res(self.reg.a, 1), 0x90 => self.reg.b = self.alu_res(self.reg.b, 2), 0x91 => self.reg.c = self.alu_res(self.reg.c, 2), 0x92 => self.reg.d = self.alu_res(self.reg.d, 2), 0x93 => self.reg.e = self.alu_res(self.reg.e, 2), 0x94 => self.reg.h = self.alu_res(self.reg.h, 2), 0x95 => self.reg.l = self.alu_res(self.reg.l, 2), 0x96 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 2); self.mem.borrow_mut().set(a, h); } 0x97 => self.reg.a = self.alu_res(self.reg.a, 2), 0x98 => self.reg.b = self.alu_res(self.reg.b, 3), 0x99 => self.reg.c = self.alu_res(self.reg.c, 3), 0x9a => self.reg.d = self.alu_res(self.reg.d, 3), 0x9b => self.reg.e = self.alu_res(self.reg.e, 3), 0x9c => self.reg.h = self.alu_res(self.reg.h, 3), 0x9d => self.reg.l = self.alu_res(self.reg.l, 3), 0x9e => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 3); self.mem.borrow_mut().set(a, h); } 0x9f => self.reg.a = self.alu_res(self.reg.a, 3), 0xa0 => self.reg.b = self.alu_res(self.reg.b, 4), 0xa1 => self.reg.c = self.alu_res(self.reg.c, 4), 0xa2 => self.reg.d = self.alu_res(self.reg.d, 4), 0xa3 => self.reg.e = self.alu_res(self.reg.e, 4), 0xa4 => self.reg.h = self.alu_res(self.reg.h, 4), 0xa5 => self.reg.l = self.alu_res(self.reg.l, 4), 0xa6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 4); self.mem.borrow_mut().set(a, h); } 0xa7 => self.reg.a = self.alu_res(self.reg.a, 4), 0xa8 => self.reg.b = self.alu_res(self.reg.b, 5), 0xa9 => self.reg.c = self.alu_res(self.reg.c, 5), 0xaa => self.reg.d = self.alu_res(self.reg.d, 5), 0xab => self.reg.e = self.alu_res(self.reg.e, 5), 0xac => self.reg.h = self.alu_res(self.reg.h, 5), 0xad => self.reg.l = self.alu_res(self.reg.l, 5), 0xae => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 5); self.mem.borrow_mut().set(a, h); } 0xaf => self.reg.a = self.alu_res(self.reg.a, 5), 0xb0 => self.reg.b = self.alu_res(self.reg.b, 6), 0xb1 => self.reg.c = self.alu_res(self.reg.c, 6), 0xb2 => self.reg.d = self.alu_res(self.reg.d, 6), 0xb3 => self.reg.e = self.alu_res(self.reg.e, 6), 0xb4 => self.reg.h = self.alu_res(self.reg.h, 6), 0xb5 => self.reg.l = self.alu_res(self.reg.l, 6), 0xb6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 6); self.mem.borrow_mut().set(a, h); } 0xb7 => self.reg.a = self.alu_res(self.reg.a, 6), 0xb8 => self.reg.b = self.alu_res(self.reg.b, 7), 0xb9 => self.reg.c = self.alu_res(self.reg.c, 7), 0xba => self.reg.d = self.alu_res(self.reg.d, 7), 0xbb => self.reg.e = self.alu_res(self.reg.e, 7), 0xbc => self.reg.h = self.alu_res(self.reg.h, 7), 0xbd => self.reg.l = self.alu_res(self.reg.l, 7), 0xbe => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_res(v, 7); self.mem.borrow_mut().set(a, h); } 0xbf => self.reg.a = self.alu_res(self.reg.a, 7), ... } } ... } } SET 1) \u63cf\u8ff0 \u7f6e\u4f4d\u5bc4\u5b58\u5668\u4e2d\u6307\u5b9a\u7684 bit \u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SET B, 0 c0 8 SET C, 0 c1 8 SET D, 0 c2 8 SET E, 0 c3 8 SET H, 0 c4 8 SET L, 0 c5 8 SET (HL), 0 c6 16 SET A, 0 c7 8 SET B, 1 c8 8 SET C, 1 c9 8 SET D, 1 ca 8 SET E, 1 cb 8 SET H, 1 cc 8 SET L, 1 cd 8 SET (HL), 1 ce 16 SET A, 1 cf 8 SET B, 2 d0 8 SET C, 2 d1 8 SET D, 2 d2 8 SET E, 2 d3 8 SET H, 2 d4 8 SET L, 2 d5 8 SET (HL), 2 d6 16 SET A, 2 d7 8 SET B, 3 d8 8 SET C, 3 d9 8 SET D, 3 da 8 SET E, 3 db 8 SET H, 3 dc 8 SET L, 3 dd 8 SET (HL), 3 de 16 SET A, 3 df 8 SET B, 4 e0 8 SET C, 4 e1 8 SET D, 4 e2 8 SET E, 4 e3 8 SET H, 4 e4 8 SET L, 4 e5 8 SET (HL), 4 e6 16 SET A, 4 e7 8 SET B, 5 e8 8 SET C, 5 e9 8 SET D, 5 ea 8 SET E, 5 eb 8 SET H, 5 ec 8 SET L, 5 ed 8 SET (HL), 5 ee 16 SET A, 5 ef 8 SET B, 6 f0 8 SET C, 6 f1 8 SET D, 6 f2 8 SET E, 6 f3 8 SET H, 6 f4 8 SET L, 6 f5 8 SET (HL), 6 f6 16 SET A, 6 f7 8 SET B, 7 f8 8 SET C, 7 f9 8 SET D, 7 fa 8 SET E, 7 fb 8 SET H, 7 fc 8 SET L, 7 fd 8 SET (HL), 7 fe 16 SET A, 7 ff 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Set bit b in register r. // b = 0 - 7, r = A,B,C,D,E,H,L,(HL) // // Flags affected: None. fn alu_set(&mut self, a: u8, b: u8) -> u8 { a | (1 << b) } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcb => { cbcode = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; match cbcode { 0xc0 => self.reg.b = self.alu_set(self.reg.b, 0), 0xc1 => self.reg.c = self.alu_set(self.reg.c, 0), 0xc2 => self.reg.d = self.alu_set(self.reg.d, 0), 0xc3 => self.reg.e = self.alu_set(self.reg.e, 0), 0xc4 => self.reg.h = self.alu_set(self.reg.h, 0), 0xc5 => self.reg.l = self.alu_set(self.reg.l, 0), 0xc6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 0); self.mem.borrow_mut().set(a, h); } 0xc7 => self.reg.a = self.alu_set(self.reg.a, 0), 0xc8 => self.reg.b = self.alu_set(self.reg.b, 1), 0xc9 => self.reg.c = self.alu_set(self.reg.c, 1), 0xca => self.reg.d = self.alu_set(self.reg.d, 1), 0xcb => self.reg.e = self.alu_set(self.reg.e, 1), 0xcc => self.reg.h = self.alu_set(self.reg.h, 1), 0xcd => self.reg.l = self.alu_set(self.reg.l, 1), 0xce => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 1); self.mem.borrow_mut().set(a, h); } 0xcf => self.reg.a = self.alu_set(self.reg.a, 1), 0xd0 => self.reg.b = self.alu_set(self.reg.b, 2), 0xd1 => self.reg.c = self.alu_set(self.reg.c, 2), 0xd2 => self.reg.d = self.alu_set(self.reg.d, 2), 0xd3 => self.reg.e = self.alu_set(self.reg.e, 2), 0xd4 => self.reg.h = self.alu_set(self.reg.h, 2), 0xd5 => self.reg.l = self.alu_set(self.reg.l, 2), 0xd6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 2); self.mem.borrow_mut().set(a, h); } 0xd7 => self.reg.a = self.alu_set(self.reg.a, 2), 0xd8 => self.reg.b = self.alu_set(self.reg.b, 3), 0xd9 => self.reg.c = self.alu_set(self.reg.c, 3), 0xda => self.reg.d = self.alu_set(self.reg.d, 3), 0xdb => self.reg.e = self.alu_set(self.reg.e, 3), 0xdc => self.reg.h = self.alu_set(self.reg.h, 3), 0xdd => self.reg.l = self.alu_set(self.reg.l, 3), 0xde => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 3); self.mem.borrow_mut().set(a, h); } 0xdf => self.reg.a = self.alu_set(self.reg.a, 3), 0xe0 => self.reg.b = self.alu_set(self.reg.b, 4), 0xe1 => self.reg.c = self.alu_set(self.reg.c, 4), 0xe2 => self.reg.d = self.alu_set(self.reg.d, 4), 0xe3 => self.reg.e = self.alu_set(self.reg.e, 4), 0xe4 => self.reg.h = self.alu_set(self.reg.h, 4), 0xe5 => self.reg.l = self.alu_set(self.reg.l, 4), 0xe6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 4); self.mem.borrow_mut().set(a, h); } 0xe7 => self.reg.a = self.alu_set(self.reg.a, 4), 0xe8 => self.reg.b = self.alu_set(self.reg.b, 5), 0xe9 => self.reg.c = self.alu_set(self.reg.c, 5), 0xea => self.reg.d = self.alu_set(self.reg.d, 5), 0xeb => self.reg.e = self.alu_set(self.reg.e, 5), 0xec => self.reg.h = self.alu_set(self.reg.h, 5), 0xed => self.reg.l = self.alu_set(self.reg.l, 5), 0xee => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 5); self.mem.borrow_mut().set(a, h); } 0xef => self.reg.a = self.alu_set(self.reg.a, 5), 0xf0 => self.reg.b = self.alu_set(self.reg.b, 6), 0xf1 => self.reg.c = self.alu_set(self.reg.c, 6), 0xf2 => self.reg.d = self.alu_set(self.reg.d, 6), 0xf3 => self.reg.e = self.alu_set(self.reg.e, 6), 0xf4 => self.reg.h = self.alu_set(self.reg.h, 6), 0xf5 => self.reg.l = self.alu_set(self.reg.l, 6), 0xf6 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 6); self.mem.borrow_mut().set(a, h); } 0xf7 => self.reg.a = self.alu_set(self.reg.a, 6), 0xf8 => self.reg.b = self.alu_set(self.reg.b, 7), 0xf9 => self.reg.c = self.alu_set(self.reg.c, 7), 0xfa => self.reg.d = self.alu_set(self.reg.d, 7), 0xfb => self.reg.e = self.alu_set(self.reg.e, 7), 0xfc => self.reg.h = self.alu_set(self.reg.h, 7), 0xfd => self.reg.l = self.alu_set(self.reg.l, 7), 0xfe => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_set(v, 7); self.mem.borrow_mut().set(a, h); } 0xff => self.reg.a = self.alu_set(self.reg.a, 7), ... } } ... } }","title":"\u4f4d\u6570\u636e\u83b7\u53d6\u4e0e\u8bbe\u7f6e"},{"location":"content/gameboy/cpu/lr35902_standard/","text":"LR35902 \u6807\u51c6\u6307\u4ee4\u96c6 LR35902 \u62e5\u6709\u4e24\u5957\u6307\u4ee4\u96c6, \u4e00\u5957\u662f 8 \u4f4d\u6307\u4ee4\u96c6, \u53e6\u4e00\u5957\u5219\u662f 16 \u4f4d\u6307\u4ee4\u96c6, \u5176\u4e2d 16 \u4f4d\u6307\u4ee4\u96c6\u7684\u64cd\u4f5c\u7801\u56fa\u5b9a\u4ee5 0xcb \u4f5c\u4e3a\u524d\u7f00. 16 \u4f4d\u6307\u4ee4\u96c6\u4e5f\u5e38\u88ab\u79f0\u4f5c\u6269\u5c55\u6307\u4ee4\u96c6, \u56e0\u4e3a\u539f\u7248 z80 CPU \u4e0d\u652f\u6301\u79fb\u4f4d\u64cd\u4f5c, \u6240\u4ee5 LR35902 \u901a\u8fc7\u5916\u63a5\u6269\u5c55\u7535\u8def\u7684\u5f62\u5f0f\u989d\u5916\u6dfb\u52a0\u4e86\u79fb\u4f4d\u6307\u4ee4. \u5173\u4e8e\u5176\u6807\u51c6\u6307\u4ee4\u96c6\u4e0e\u6269\u5f20\u6307\u4ee4\u96c6, \u53ef\u4ee5\u5728\u7f51\u7ad9 http://www.pastraiser.com/cpu/gameboy/gameboy_opcodes.html \u4e0a\u627e\u5230\u5b83\u7684\u7b80\u8981\u6982\u89c8. \u6211\u4eec\u9996\u5148\u5c06\u805a\u7126\u5728\u6807\u51c6\u6307\u4ee4\u96c6\u4e0a, \u8fd9\u5957\u6307\u4ee4\u88ab\u540c\u65f6\u5e94\u7528\u5728\u8bf8\u5982 Intel 8080, z80 \u548c LR35902 \u7b49 CPU \u4e0a, \u66f4\u662f\u5982\u4eca x86 \u67b6\u6784\u7684\u524d\u8eab. \u8bf7\u6ce8\u610f, \u5bf9 CPU \u6307\u4ee4\u96c6\u7684\u4eff\u771f\u662f\u4e00\u4e2a\u7e41\u7410\u4e14\u4e0d\u80fd\u51fa\u4efb\u4f55\u5dee\u9519\u7684\u5de5\u7a0b, \u521d\u5b66\u8005\u901a\u5e38\u4f1a\u82b1\u5927\u91cf\u7684\u65f6\u95f4\u5728\u8c03\u5f0f\u4e0a. \u66f4\u7cdf\u7cd5\u7684\u662f, \u9664\u975e\u5df2\u7ecf\u5b8c\u6210\u4e86\u6574\u4e2a\u9879\u76ee, \u4e0d\u7136\u51e0\u4e4e\u65e0\u6cd5\u5728\u5f00\u53d1\u9636\u6bb5\u9a8c\u8bc1\u81ea\u5df1\u5199\u7684\u4ee3\u7801\u662f\u5426\u6b63\u786e. \u56e0\u6b64\u8bf7\u505a\u597d\u51c6\u5907, \u5e76\u4e14\u5728\u9047\u5230\u56f0\u96be\u65f6\u4e0d\u5fc5\u8fc7\u4e8e\u6cae\u4e27! \u7ed3\u6784\u4f53\u5b9a\u4e49 \u5728\u5f00\u59cb\u4e4b\u524d, \u5b9a\u4e49\u5982\u4e0b\u7684\u5bf9 CPU \u7ed3\u6784\u8fdb\u884c\u4eff\u771f\u7684\u7ed3\u6784\u4f53, \u540e\u7eed\u6240\u6709\u7684\u5f00\u53d1\u90fd\u5c06\u56f4\u7ed5\u8be5\u7ed3\u6784\u4f53\u8fdb\u884c. pub struct Cpu { pub reg: Register, // \u5bc4\u5b58\u5668 pub mem: Rc<RefCell<dyn Memory>>, // \u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u7a7a\u95f4 pub halted: bool, // \u8868\u660e CPU \u662f\u5426\u5904\u4e8e\u5de5\u4f5c\u72b6\u6001 pub ei: bool, // enable interrupt \u7684\u7b80\u5199, \u8868\u660e CPU \u662f\u5426\u63a5\u6536\u786c\u4ef6\u4e2d\u65ad } \u540c\u65f6\u4e3a\u8be5\u7ed3\u6784\u4f53\u5b9e\u73b0\u4e24\u4e2a\u6839\u636e\u5f53\u524d PC \u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6 u8 \u548c u16 \u7684\u4e24\u4e2a\u51fd\u6570, \u8bb0\u5f97\u8bfb\u53d6\u6570\u636e\u540e\u9700\u8981\u51c6\u786e\u5730\u79fb\u52a8 PC: \u5982\u679c\u8bfb\u53d6\u7684\u662f u8 \u6570\u636e\u5219 PC \u52a0 1, \u5982\u679c\u662f u16 \u6570\u636e\u5219 PC \u52a0 2. impl Cpu { fn imm(&mut self) -> u8 { let v = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; v } fn imm_word(&mut self) -> u16 { let v = self.mem.borrow().get_word(self.reg.pc); self.reg.pc += 2; v } } \u6b64\u5904\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282, u16 \u6570\u636e\u4f4e\u4f4d\u6570\u636e\u5728\u5185\u5b58\u524d\u534a\u90e8\u5206, \u9ad8\u4f4d\u6570\u636e\u5728\u540e\u534a\u90e8\u5206. \u6bd4\u5982\u6570\u5b57 0x0150, \u5176\u5185\u5b58\u5206\u5e03\u5219\u662f 0x50, 0x01. \u8fd9\u5728\u8ba1\u7b97\u673a\u4e2d\u88ab\u79f0\u4e3a\u5c0f\u7aef\u5e8f(Little endian). \u5982\u4f55\u53d6\u6307\u4e0e\u6267\u884c CPU \u603b\u662f\u4e0d\u65ad\u7684\u6839\u636e\u5f53\u524d PC \u8fdb\u884c\u53d6\u6307\u8fc7\u7a0b, \u5e76\u4e14\u5728\u6307\u4ee4\u88ab\u53d6\u6307\u540e, \u8fdb\u5165\u6307\u4ee4\u6267\u884c\u8fc7\u7a0b. \u4e3a CPU \u6dfb\u52a0\u5982\u4e0b\u7684\u6307\u4ee4\u6267\u884c\u51fd\u6570: fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { ... } } \u5176\u4e2d Opcode \u4e3a\u64cd\u4f5c\u7801, \u4e0d\u540c\u7684 Opcode \u4ee3\u8868\u4e0d\u540c\u7684\u6307\u4ee4, \u5728\u4ee3\u7801\u5b9e\u73b0\u4e2d\u9700\u8981\u4f7f\u7528 match \u8bed\u53e5\u5bf9 Opcode \u8fdb\u884c\u5339\u914d. \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a u32, \u4ee3\u8868\u8be5\u6307\u4ee4\u6240\u6d88\u8017\u7684\u673a\u5668\u5468\u671f(CPU \u6267\u884c\u8be5\u6307\u4ee4\u6240\u82b1\u8d39\u7684\u65f6\u95f4). \u4e0b\u9762\u7ed9\u51fa\u4e86\u6807\u51c6\u6307\u4ee4\u7684\u6458\u8981\u4e0e\u4eff\u771f\u5b9e\u73b0. \u5982\u679c\u8be5\u6307\u4ee4\u5f71\u54cd\u4e86\u6807\u5fd7\u4f4d\u5bc4\u5b58\u5668 Flag, \u5219\u4f1a\u5728\u6307\u4ee4\u63cf\u8ff0\u4e2d\u7279\u522b\u6307\u660e. \u5728\u6b64\u7ea6\u5b9a\u6307\u4ee4\u7684\u4e66\u5199\u65b9\u6cd5\u5982\u4e0b: Instruction (Parameter1) (Parameter2) Instruction: \u6307\u4ee4\u7684\u82f1\u6587\u7f29\u5199 Parameter1/Parameter2: \u6307\u4ee4\u7684\u53c2\u6570 \u5176\u4e2d Parameter \u53ef\u4ee5\u662f\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5\u4e4b\u4e00: \u7279\u5b9a\u5bc4\u5b58\u5668: \u7279\u5b9a\u7684\u76ee\u6807\u5bc4\u5b58\u5668, \u53ef\u4ee5\u662f\u4efb\u610f 8 \u4f4d\u5bc4\u5b58\u5668\u6216 16 \u4f4d\u7ec4\u5408\u5bc4\u5b58\u5668\u4e4b\u4e00. r8: 8 \u4f4d\u5bc4\u5b58\u5668. \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668 A, F, B, C, D, E, H \u6216 L. d8: 8 \u4f4d\u7acb\u5373\u6570. \u7acb\u5373\u6570\u662f\u6307\u91c7\u7528\u7acb\u5373\u5bfb\u5740\u65b9\u5f0f\u6307\u4ee4\u4e2d\u7ed9\u51fa\u7684\u6570, \u8be5\u6570\u503c\u7d27\u8ddf\u5728\u64cd\u4f5c\u7801\u4e4b\u540e. r16: 16 \u4f4d\u5bc4\u5b58\u5668. \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668 AF, BC, DE \u6216 HL. d16: 16\u4f4d\u7acb\u5373\u6570. (r16): \u4ee5 16 \u4f4d\u5bc4\u5b58\u5668\u6240\u5b58\u50a8\u6570\u636e\u89c6\u4e3a\u5185\u5b58\u5730\u5740\u53d6\u5f97\u7684\u6570 (d16): \u4ee5 16 \u4f4d\u7acb\u5373\u6570\u6240\u5b58\u50a8\u6570\u636e\u89c6\u4e3a\u5185\u5b58\u5730\u5740\u53d6\u5f97\u7684\u6570 (a8): \u4ee5 0xff00 \u4e0e 8 \u4f4d\u7acb\u5373\u53c2\u6570\u7684\u6216\u8fd0\u7b97\u7ed3\u679c\u89c6\u4e3a\u5185\u5b58\u5730\u5740\u53d6\u5f97\u7684\u6570 8 \u4f4d\u6570\u636e\u52a0\u8f7d LD r8, d8 1) \u63cf\u8ff0 \u5c06\u4e00\u4e2a 8 \u4f4d\u7684\u7acb\u5373\u53c2\u6570\u5199\u5165\u5230\u76f8\u5e94\u7684 8 \u4f4d\u5bc4\u5b58\u5668\u4e2d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 \u4e0b\u8868\u5206\u4e3a 4 \u5217, \u7b2c\u4e00\u5217 Instruction \u8868\u793a\u6307\u4ee4\u7684\u7f29\u5199\u7c7b\u578b, \u7b2c\u4e8c\u5217 Parameters \u8868\u793a\u8be6\u7ec6\u7684\u53c2\u6570\u7b7e\u540d, \u7b2c\u4e09\u5217 Opcode \u4e3a\u6307\u4ee4\u7684\u64cd\u4f5c\u7801(16\u8fdb\u5236\u8868\u793a), \u6700\u540e\u4e00\u5217 Cycles \u4e3a\u6307\u4ee4\u6240\u9700\u6d88\u8017\u7684\u65f6\u949f\u5468\u671f. \u6bd4\u5982\u4e0b\u8868\u7b2c\u4e00\u884c, \u5c31\u8868\u793a\u5982\u679c CPU \u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u5230 0x06, \u5219\u5c06\u4e4b\u89c6\u4e3a LD B, n \u6307\u4ee4\u5904\u7406, \u5904\u7406\u8fc7\u7a0b\u5c06\u6d88\u8017 8 \u4e2a\u65f6\u949f\u5468\u671f. \u540e\u6587\u540c. Instruction Parameters Opcode Cycles LD B, n 06 8 LD C, n 0e 8 LD D, n 16 8 LD E, n 1e 8 LD H, n 26 8 LD L, n 2e 8 LD (HL), n 36 8 LD A, n 3e 8 4) \u4ee3\u7801\u5b9e\u73b0 \u6307\u4ee4\u7684\u4eff\u771f\u4ee3\u7801\u9700\u586b\u5199\u5165\u524d\u6587\u7684 ex() \u51fd\u6570\u7684 match \u8bed\u53e5\u5185. \u6570\u636e\u52a0\u8f7d\u7684\u4ee3\u7801\u5b9e\u73b0\u8f83\u4e3a\u7b80\u5355, \u9996\u5148\u4f7f\u7528 self.imm() \u8bfb\u53d6\u4e00\u4e2a 8 \u4f4d\u7acb\u5373\u6570, \u7136\u540e\u8d4b\u503c\u5230\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u5373\u53ef. \u7a0d\u5fae\u9700\u8981\u6ce8\u610f\u7684\u662f Opcode \u4e3a 36 \u65f6, \u7acb\u5373\u6570\u4e0d\u662f\u8d4b\u503c\u7ed9 HL \u5bc4\u5b58\u5668, \u800c\u662f\u8d4b\u503c\u7ed9\u4ee5 HL \u5bc4\u5b58\u5668\u5b58\u50a8\u6570\u636e\u4e3a\u5730\u5740\u7684\u5185\u5b58\u4e2d. fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x06 => self.reg.b = self.imm(), 0x0e => self.reg.c = self.imm(), 0x16 => self.reg.d = self.imm(), 0x1e => self.reg.e = self.imm(), 0x26 => self.reg.h = self.imm(), 0x2e => self.reg.l = self.imm(), 0x36 => { let a = self.reg.get_hl(); let v = self.imm(); self.mem.borrow_mut().set(a, v); } 0x3e => self.reg.a = self.imm(), ... } } LD r8, r8 1) \u63cf\u8ff0 \u5c06\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668\u7684\u503c\u5199\u5165\u5230\u53e6\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD B, B 40 4 LD B, C 41 4 LD B, D 42 4 LD B, E 43 4 LD B, H 44 4 LD B, L 45 4 LD B, (HL) 46 8 LD B, A 47 4 LD C, B 48 4 LD C, C 49 4 LD C, D 4A 4 LD C, E 4B 4 LD C, H 4C 4 LD C, L 4D 4 LD C, (HL) 4E 8 LD C, A 4F 4 LD D, B 50 4 LD D, C 51 4 LD D, D 52 4 LD D, E 53 4 LD D, H 54 4 LD D, L 55 4 LD D, (HL) 56 8 LD D, A 57 4 LD E, B 58 4 LD E, C 59 4 LD E, D 5A 4 LD E, E 5B 4 LD E, H 5C 4 LD E, L 5D 4 LD E, (HL) 5E 8 LD E, A 5F 4 LD H, B 60 4 LD H, C 61 4 LD H, D 62 4 LD H, E 63 4 LD H, H 64 4 LD H, L 65 4 LD H, (HL) 66 8 LD H, A 67 4 LD L, B 68 4 LD L, C 69 4 LD L, D 6A 4 LD L, E 6B 4 LD L, H 6C 4 LD L, L 6D 4 LD L, (HL) 6E 8 LD L, A 6F 4 LD (HL), B 70 8 LD (HL), C 71 8 LD (HL), D 72 8 LD (HL), E 73 8 LD (HL), H 74 8 LD (HL), L 75 8 LD (HL), A 77 8 LD A, B 78 4 LD A, C 79 4 LD A, D 7A 4 LD A, E 7B 4 LD A, H 7C 4 LD A, L 7D 4 LD A, (HL) 7E 8 LD A, A 7F 4 LD (BC), A 02 8 LD (DE), A 12 8 LD A, (BC) 0a 8 LD A, (DE) 1a 8 \u8868\u4e2d\u6709\u4e00\u7c7b\u6307\u4ee4\u53ef\u80fd\u4f1a\u5f15\u8d77\u8bfb\u8005\u56f0\u60d1, \u4ee5 0x40 Opcode \u4e3a\u4f8b, \u5b83\u53ef\u8868\u793a\u4e3a LD B, B, \u5176\u4e24\u4e2a\u53c2\u6570\u5747\u662f B, \u5176\u542b\u4e49\u662f\"\u8bfb\u53d6\u5bc4\u5b58\u5668 B \u7684\u503c, \u5e76\u5199\u5165\u5bc4\u5b58\u5668 B\". \u4ece\u7ed3\u679c\u4e0a\u6765\u8bf4, \u5b83\u4e0d\u4f1a\u5f15\u8d77\u4efb\u4f55\u5bc4\u5b58\u5668\u5185\u5bb9\u7684\u53d8\u5316, \u4f46\u8be5\u64cd\u4f5c\u4ecd\u7136\u9700\u8981\u6d88\u8017 CPU \u7684\u65f6\u949f\u5468\u671f. \u5728\u540e\u6587\u4f1a\u6709\u4e13\u95e8\u7ae0\u8282\u5bf9\u6b64\u8fdb\u884c\u4ecb\u7ecd. 4) \u4ee3\u7801\u5b9e\u73b0 \u4ee3\u7801\u5b9e\u73b0\u76f8\u5bf9\u7b80\u5355, \u53ea\u9700\u8981\u8bfb\u53d6\u5bf9\u5e94\u7684 8 \u4f4d\u6570\u636e\u5e76\u5199\u5165\u76ee\u6807\u5bc4\u5b58\u5668\u5373\u53ef. fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x40 => {} 0x41 => self.reg.b = self.reg.c, 0x42 => self.reg.b = self.reg.d, 0x43 => self.reg.b = self.reg.e, 0x44 => self.reg.b = self.reg.h, 0x45 => self.reg.b = self.reg.l, 0x46 => self.reg.b = self.mem.borrow().get(self.reg.get_hl()), 0x47 => self.reg.b = self.reg.a, 0x48 => self.reg.c = self.reg.b, 0x49 => {} 0x4a => self.reg.c = self.reg.d, 0x4b => self.reg.c = self.reg.e, 0x4c => self.reg.c = self.reg.h, 0x4d => self.reg.c = self.reg.l, 0x4e => self.reg.c = self.mem.borrow().get(self.reg.get_hl()), 0x4f => self.reg.c = self.reg.a, 0x50 => self.reg.d = self.reg.b, 0x51 => self.reg.d = self.reg.c, 0x52 => {} 0x53 => self.reg.d = self.reg.e, 0x54 => self.reg.d = self.reg.h, 0x55 => self.reg.d = self.reg.l, 0x56 => self.reg.d = self.mem.borrow().get(self.reg.get_hl()), 0x57 => self.reg.d = self.reg.a, 0x58 => self.reg.e = self.reg.b, 0x59 => self.reg.e = self.reg.c, 0x5a => self.reg.e = self.reg.d, 0x5b => {} 0x5c => self.reg.e = self.reg.h, 0x5d => self.reg.e = self.reg.l, 0x5e => self.reg.e = self.mem.borrow().get(self.reg.get_hl()), 0x5f => self.reg.e = self.reg.a, 0x60 => self.reg.h = self.reg.b, 0x61 => self.reg.h = self.reg.c, 0x62 => self.reg.h = self.reg.d, 0x63 => self.reg.h = self.reg.e, 0x64 => {} 0x65 => self.reg.h = self.reg.l, 0x66 => self.reg.h = self.mem.borrow().get(self.reg.get_hl()), 0x67 => self.reg.h = self.reg.a, 0x68 => self.reg.l = self.reg.b, 0x69 => self.reg.l = self.reg.c, 0x6a => self.reg.l = self.reg.d, 0x6b => self.reg.l = self.reg.e, 0x6c => self.reg.l = self.reg.h, 0x6d => {} 0x6e => self.reg.l = self.mem.borrow().get(self.reg.get_hl()), 0x6f => self.reg.l = self.reg.a, 0x70 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.b), 0x71 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.c), 0x72 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.d), 0x73 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.e), 0x74 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.h), 0x75 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.l), 0x77 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.a), 0x78 => self.reg.a = self.reg.b, 0x79 => self.reg.a = self.reg.c, 0x7a => self.reg.a = self.reg.d, 0x7b => self.reg.a = self.reg.e, 0x7c => self.reg.a = self.reg.h, 0x7d => self.reg.a = self.reg.l, 0x7e => self.reg.a = self.mem.borrow().get(self.reg.get_hl()), 0x7f => {}, 0x02 => self.mem.borrow_mut().set(self.reg.get_bc(), self.reg.a), 0x12 => self.mem.borrow_mut().set(self.reg.get_de(), self.reg.a), 0x0a => self.reg.a = self.mem.borrow().get(self.reg.get_bc()), 0x1a => self.reg.a = self.mem.borrow().get(self.reg.get_de()), ... } } LD (C), A 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u7684\u503c\u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 0xff00 | \u5bc4\u5b58\u5668 C \u6307\u5b9a). 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (C), A e2 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xe2 => self.mem.borrow_mut().set(0xff00 | u16::from(self.reg.c), self.reg.a), ... } } LD A, (C) 1) \u63cf\u8ff0 \u5c06\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 0xff00 | \u5bc4\u5b58\u5668 C \u6307\u5b9a)\u7684\u503c\u5199\u5165\u5bc4\u5b58\u5668 A. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD A, (C) f2 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xf2 => self.reg.a = self.mem.borrow().get(0xff00 | u16::from(self.reg.c)), ... } } LD (HL+), A 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 HL \u5bc4\u5b58\u5668\u6307\u5b9a), \u540c\u65f6 HL \u81ea\u589e. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (HL+), A 22 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x22 => { let a = self.reg.get_hl(); self.mem.borrow_mut().set(a, self.reg.a); self.reg.set_hl(a + 1); } ... } } LD (HL-), A 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 HL \u5bc4\u5b58\u5668\u6307\u5b9a), \u540c\u65f6 HL \u81ea\u51cf. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (HL-), A 22 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x32 => { let a = self.reg.get_hl(); self.mem.borrow_mut().set(a, self.reg.a); self.reg.set_hl(a - 1); } ... } } LD A, (HL+) 1) \u63cf\u8ff0 \u5c06\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 HL \u5bc4\u5b58\u5668\u6307\u5b9a)\u7684\u503c\u5199\u5165\u5bc4\u5b58\u5668 A, \u540c\u65f6 HL \u81ea\u589e. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD A, (HL+) 22 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x2a => { let v = self.reg.get_hl(); self.reg.a = self.mem.borrow().get(v); self.reg.set_hl(v + 1); } ... } } LD A, (HL-) 1) \u63cf\u8ff0 \u5c06\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 HL \u5bc4\u5b58\u5668\u6307\u5b9a)\u7684\u503c\u5199\u5165\u5bc4\u5b58\u5668 A, \u540c\u65f6 HL \u81ea\u51cf. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD A, (HL-) 22 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x3a => { let v = self.reg.get_hl(); self.reg.a = self.mem.borrow().get(v); self.reg.set_hl(v - 1); } ... } } LD (d8), A 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u7684\u503c\u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 0xff00 | 8 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a). 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (d8), A e0 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xe0 => { let a = 0xff00 | u16::from(self.imm()); self.mem.borrow_mut().set(a, self.reg.a); } ... } } LD A, (a8) 1) \u63cf\u8ff0 \u5c06\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 0xff00 | 8 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a)\u7684\u503c\u5199\u5165\u5bc4\u5b58\u5668 A. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD A, (d8) f0 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xf0 => { let a = 0xff00 | u16::from(self.imm()); self.reg.a = self.mem.borrow().get(a); } ... } } LD (d16), A 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u7684\u503c\u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 16 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a). 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (a16), A ea 16 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xea => { let a = self.imm_word(); self.mem.borrow_mut().set(a, self.reg.a); } ... } } LD A, (d16) 1) \u63cf\u8ff0 \u5c06\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 16 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a)\u7684\u503c\u5199\u5165\u5bc4\u5b58\u5668 A. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD A, (a16) fa 16 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xfa => { let a = self.imm_word(); self.reg.a = self.mem.borrow().get(a); } ... } } 16 \u4f4d\u6570\u636e\u52a0\u8f7d LD r16, d16 1) \u63cf\u8ff0 \u5c06 16 \u4f4d\u7acb\u5373\u53c2\u6570\u5199\u5165\u76f8\u5e94 16 \u4f4d\u5bc4\u5b58\u5668\u4e2d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD BC, d16 01 12 LD DE, d16 11 12 LD HL, d16 21 12 LD SP, d16 31 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x01 | 0x11 | 0x21 | 0x31 => { let v = self.imm_word(); match opcode { 0x01 => self.reg.set_bc(v), 0x11 => self.reg.set_de(v), 0x21 => self.reg.set_hl(v), 0x31 => self.reg.sp = v, _ => {} } } ... } } LD SP, HL 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 HL \u5199\u5165\u5230\u5bc4\u5b58\u5668 SP. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD SP, HL f9 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xf9 => self.reg.sp = self.reg.get_hl(), ... } } LD HL, SP + d8 1) \u63cf\u8ff0 \u5c06 SP \u5bc4\u5b58\u5668 + \u6709\u7b26\u53f7 8 \u4f4d\u7acb\u5373\u53c2\u6570\u7684\u7ed3\u679c\u5199\u5165\u5bc4\u5b58\u5668 HL. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u7f6e\u96f6 N - \u7f6e\u96f6 H - \u7b2c 3 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u7b2c 7 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD SP, d8 f8 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xf8 => { let a = self.reg.sp; let b = i16::from(self.imm() as i8) as u16; self.reg.set_flag(C, (a & 0x00ff) + (b & 0x00ff) > 0x00ff); self.reg.set_flag(H, (a & 0x000f) + (b & 0x000f) > 0x000f); self.reg.set_flag(N, false); self.reg.set_flag(Z, false); self.reg.set_hl(a.wrapping_add(b)); } ... } } LD (d16), SP 1) \u63cf\u8ff0 \u5c06 SP \u5bc4\u5b58\u5668\u7684\u503c\u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 16 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a). 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (d16), SP 0x08 20 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x08 => { let a = self.imm_word(); self.mem.borrow_mut().set_word(a, self.reg.sp); } ... } } PUSH 1) \u63cf\u8ff0 \u6808\u6307\u4ee4. \u5c06\u76f8\u5e94 16 \u4f4d\u5bc4\u5b58\u5668\u7684\u503c\u5165\u6808. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles PUSH BC 0xc5 20 PUSH DE 0xd5 20 PUSH HL 0xe5 20 PUSH AF 0xf5 20 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { fn stack_push(&mut self, v: u16) { self.reg.sp -= 2; self.mem.borrow_mut().set_word(self.reg.sp, v); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc5 => self.stack_add(self.reg.get_bc()), 0xd5 => self.stack_add(self.reg.get_de()), 0xe5 => self.stack_add(self.reg.get_hl()), 0xf5 => self.stack_add(self.reg.get_af()), ... } } POP 1) \u63cf\u8ff0 \u6808\u6307\u4ee4. \u51fa\u6808\u5e76\u5c06\u6570\u636e\u5199\u5165\u76f8\u5e94 16 \u4f4d\u5bc4\u5b58\u5668. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles POP BC 0xc1 20 POP DE 0xd1 20 POP HL 0xe1 20 POP AF 0xf1 20 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { fn stack_pop(&mut self) -> u16 { let r = self.mem.borrow().get_word(self.reg.sp); self.reg.sp += 2; r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc1 | 0xf1 | 0xd1 | 0xe1 => { let v = self.stack_pop(); match opcode { 0xc1 => self.reg.set_bc(v), 0xd1 => self.reg.set_de(v), 0xe1 => self.reg.set_hl(v), 0xf1 => self.reg.set_af(v), _ => {} } } ... } } 8 \u4f4d\u7b97\u6570\u903b\u8f91\u8fd0\u7b97 ADD A, r8/d8 1) \u63cf\u8ff0 \u7b97\u672f\u52a0\u6cd5\u8fd0\u7b97. \u5c06\u6307\u5b9a\u7684 8 \u4f4d\u6570\u4e0e\u5bc4\u5b58\u5668 A \u76f8\u52a0, \u5e76\u5c06\u7ed3\u679c\u56de\u5199\u5165\u5bc4\u5b58\u5668 A. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7b2c 3 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u7b2c 7 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles ADD B 0x80 4 ADD C 0x81 4 ADD D 0x82 4 ADD E 0x83 4 ADD H 0x84 4 ADD L 0x85 4 ADD (HL) 0x86 8 ADD A 0x87 4 ADD (d8) 0xc6 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Add n to A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Set if carry from bit 3. // C - Set if carry from bit 7. fn alu_add(&mut self, n: u8) { let a = self.reg.a; let r = a.wrapping_add(n); self.reg.set_flag(C, u16::from(a) + u16::from(n) > 0xff); self.reg.set_flag(H, (a & 0x0f) + (n & 0x0f) > 0x0f); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x80 => self.alu_add(self.reg.b), 0x81 => self.alu_add(self.reg.c), 0x82 => self.alu_add(self.reg.d), 0x83 => self.alu_add(self.reg.e), 0x84 => self.alu_add(self.reg.h), 0x85 => self.alu_add(self.reg.l), 0x86 => { let v = self.mem.borrow().get(self.reg.get_hl()); self.alu_add(v); } 0x87 => self.alu_add(self.reg.a), 0xc6 => { let v = self.imm(); self.alu_add(v); } ... } } ADC A, r8/d8 1) \u63cf\u8ff0 \u5e26\u8fdb\u4f4d\u7684\u7b97\u672f\u52a0\u6cd5\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7b2c 3 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u7b2c 7 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles ADC B 0x88 4 ADC C 0x89 4 ADC D 0x8a 4 ADC E 0x8b 4 ADC H 0x8c 4 ADC L 0x8d 4 ADC (HL) 0x8e 8 ADC A 0x8f 4 ADC (d8) 0xce 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Add n to A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Set if carry from bit 3. // C - Set if carry from bit 7. fn alu_adc(&mut self, n: u8) { let a = self.reg.a; let c = u8::from(self.reg.get_flag(C)); let r = a.wrapping_add(n).wrapping_add(c); self.reg .set_flag(C, u16::from(a) + u16::from(n) + u16::from(c) > 0xff); self.reg .set_flag(H, (a & 0x0f) + (n & 0x0f) + (c & 0x0f) > 0x0f); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x88 => self.alu_adc(self.reg.b), 0x89 => self.alu_adc(self.reg.c), 0x8a => self.alu_adc(self.reg.d), 0x8b => self.alu_adc(self.reg.e), 0x8c => self.alu_adc(self.reg.h), 0x8d => self.alu_adc(self.reg.l), 0x8e => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_adc(a); } 0x8f => self.alu_adc(self.reg.a), 0xce => { let v = self.imm(); self.alu_adc(v); } ... } } SUB A, r8/d8 1) \u63cf\u8ff0 \u7b97\u672f\u51cf\u6cd5\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u4f4d H - \u7b2c 4 \u4f4d\u501f\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u6ca1\u6709\u53d1\u751f\u501f\u4f4d, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SUB B 0x90 4 SUB C 0x91 4 SUB D 0x92 4 SUB E 0x93 4 SUB H 0x94 4 SUB L 0x95 4 SUB (HL) 0x96 8 SUB A 0x97 4 SUB (d8) 0xd6 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Subtract n from A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Set. // H - Set if no borrow from bit 4. // C - Set if no borrow fn alu_sub(&mut self, n: u8) { let a = self.reg.a; let r = a.wrapping_sub(n); self.reg.set_flag(C, u16::from(a) < u16::from(n)); self.reg.set_flag(H, (a & 0x0f) < (n & 0x0f)); self.reg.set_flag(N, true); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x90 => self.alu_sub(self.reg.b), 0x91 => self.alu_sub(self.reg.c), 0x92 => self.alu_sub(self.reg.d), 0x93 => self.alu_sub(self.reg.e), 0x94 => self.alu_sub(self.reg.h), 0x95 => self.alu_sub(self.reg.l), 0x96 => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_sub(a); } 0x97 => self.alu_sub(self.reg.a), 0xd6 => { let v = self.imm(); self.alu_sub(v); } ... } } SBC A, r8/d8 1) \u63cf\u8ff0 \u5e26\u501f\u4f4d\u7684\u7b97\u672f\u51cf\u6cd5\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u4f4d H - \u7b2c 4 \u4f4d\u501f\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u6ca1\u6709\u53d1\u751f\u501f\u4f4d, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SBC B 0x98 4 SBC C 0x99 4 SBC D 0x9a 4 SBC E 0x9b 4 SBC H 0x9c 4 SBC L 0x9d 4 SBC (HL) 0x9e 8 SBC A 0x9f 4 SBC (d8) 0xde 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Subtract n + Carry flag from A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Set. // H - Set if no borrow from bit 4. // C - Set if no borrow. fn alu_sbc(&mut self, n: u8) { let a = self.reg.a; let c = u8::from(self.reg.get_flag(C)); let r = a.wrapping_sub(n).wrapping_sub(c); self.reg .set_flag(C, u16::from(a) < u16::from(n) + u16::from(c)); self.reg.set_flag(H, (a & 0x0f) < (n & 0x0f) + c); self.reg.set_flag(N, true); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x98 => self.alu_sbc(self.reg.b), 0x99 => self.alu_sbc(self.reg.c), 0x9a => self.alu_sbc(self.reg.d), 0x9b => self.alu_sbc(self.reg.e), 0x9c => self.alu_sbc(self.reg.h), 0x9d => self.alu_sbc(self.reg.l), 0x9e => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_sbc(a); } 0x9f => self.alu_sbc(self.reg.a), 0xde => { let v = self.imm(); self.alu_sbc(v); } ... } } AND A, r8/d8 1) \u63cf\u8ff0 \u903b\u8f91\u548c\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u4f4d C - \u7f6e\u96f6 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles AND B 0xa0 4 AND C 0xa1 4 AND D 0xa2 4 AND E 0xa3 4 AND H 0xa4 4 AND L 0xa5 4 AND (HL) 0xa6 8 AND A 0xa7 4 AND (d8) 0xe6 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Logically AND n with A, result in A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Set. // C - Reset fn alu_and(&mut self, n: u8) { let r = self.reg.a & n; self.reg.set_flag(C, false); self.reg.set_flag(H, true); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xa0 => self.alu_and(self.reg.b), 0xa1 => self.alu_and(self.reg.c), 0xa2 => self.alu_and(self.reg.d), 0xa3 => self.alu_and(self.reg.e), 0xa4 => self.alu_and(self.reg.h), 0xa5 => self.alu_and(self.reg.l), 0xa6 => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_and(a); } 0xa7 => self.alu_and(self.reg.a), 0xe6 => { let v = self.imm(); self.alu_and(v); } ... } } OR A, r8/d8 1) \u63cf\u8ff0 \u903b\u8f91\u6216\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u7f6e\u96f6 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles OR B 0xb0 4 OR C 0xb1 4 OR D 0xb2 4 OR E 0xb3 4 OR H 0xb4 4 OR L 0xb5 4 OR (HL) 0xb6 8 OR A 0xb7 4 OR (d8) 0xf6 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Logical OR n with register A, result in A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Reset. fn alu_or(&mut self, n: u8) { let r = self.reg.a | n; self.reg.set_flag(C, false); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xb0 => self.alu_or(self.reg.b), 0xb1 => self.alu_or(self.reg.c), 0xb2 => self.alu_or(self.reg.d), 0xb3 => self.alu_or(self.reg.e), 0xb4 => self.alu_or(self.reg.h), 0xb5 => self.alu_or(self.reg.l), 0xb6 => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_or(a); } 0xb7 => self.alu_or(self.reg.a), 0xf6 => { let v = self.imm(); self.alu_or(v); } ... } } XOR A, r8/d8 1) \u63cf\u8ff0 \u903b\u8f91\u5f02\u6216\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u7f6e\u96f6 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles XOR B 0xa8 4 XOR C 0xa9 4 XOR D 0xaa 4 XOR E 0xab 4 XOR H 0xac 4 XOR L 0xad 4 XOR (HL) 0xae 8 XOR A 0xaf 4 XOR (d8) 0xee 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Logical exclusive OR n with register A, result in A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Reset. fn alu_xor(&mut self, n: u8) { let r = self.reg.a ^ n; self.reg.set_flag(C, false); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xa8 => self.alu_xor(self.reg.b), 0xa9 => self.alu_xor(self.reg.c), 0xaa => self.alu_xor(self.reg.d), 0xab => self.alu_xor(self.reg.e), 0xac => self.alu_xor(self.reg.h), 0xad => self.alu_xor(self.reg.l), 0xae => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_xor(a); } 0xaf => self.alu_xor(self.reg.a), 0xee => { let v = self.imm(); self.alu_xor(v); } ... } } CP A, r8/d8 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u4e0e\u76f8\u5e94 8 \u4f4d\u6570\u636e\u8fdb\u884c\u6bd4\u8f83. \u8be5\u6307\u4ee4\u7c7b\u4f3c\u4e00\u4e2a A - n \u51cf\u6cd5\u6307\u4ee4, \u4f46\u8ba1\u7b97\u7ed3\u679c\u88ab\u4e22\u5f03\u4e86. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u4f4d H - \u7b2c 4 \u4f4d\u501f\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u6ca1\u6709\u53d1\u751f\u501f\u4f4d, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles CP B 0xb8 4 CP C 0xb9 4 CP D 0xba 4 CP E 0xbb 4 CP H 0xbc 4 CP L 0xbd 4 CP (HL) 0xbe 8 CP A 0xbf 4 CP (d8) 0xfe 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Compare A with n. This is basically an A - n subtraction // instruction but the results are thrown away. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. (Set if A = n.) // N - Set. // H - Set if no borrow from bit 4. // C - Set for no borrow. (Set if A < n.) fn alu_cp(&mut self, n: u8) { let r = self.reg.a; self.alu_sub(n); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xb8 => self.alu_cp(self.reg.b), 0xb9 => self.alu_cp(self.reg.c), 0xba => self.alu_cp(self.reg.d), 0xbb => self.alu_cp(self.reg.e), 0xbc => self.alu_cp(self.reg.h), 0xbd => self.alu_cp(self.reg.l), 0xbe => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_cp(a); } 0xbf => self.alu_cp(self.reg.a), 0xfe => { let v = self.imm(); self.alu_cp(v); } ... } } INC r8 1) \u63cf\u8ff0 \u76f8\u5e94 8 \u4f4d\u5bc4\u5b58\u5668\u81ea\u589e. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7b2c 3 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u4fdd\u6301\u4e0d\u53d8 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles INC B 0x04 4 INC C 0x0c 4 INC D 0x14 4 INC E 0x1c 4 INC H 0x24 4 INC L 0x2c 4 INC (HL) 0x34 12 INC A 0x3c 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Increment register n. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Set if carry from bit 3. // C - Not affected. fn alu_inc(&mut self, a: u8) -> u8 { let r = a.wrapping_add(1); self.reg.set_flag(H, (a & 0x0f) + 0x01 > 0x0f); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x04 => self.reg.b = self.alu_inc(self.reg.b), 0x0c => self.reg.c = self.alu_inc(self.reg.c), 0x14 => self.reg.d = self.alu_inc(self.reg.d), 0x1c => self.reg.e = self.alu_inc(self.reg.e), 0x24 => self.reg.h = self.alu_inc(self.reg.h), 0x2c => self.reg.l = self.alu_inc(self.reg.l), 0x34 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_inc(v); self.mem.borrow_mut().set(a, h); } 0x3c => self.reg.a = self.alu_inc(self.reg.a), ... } } DEC r8 1) \u63cf\u8ff0 \u76f8\u5e94 8 \u4f4d\u5bc4\u5b58\u5668\u81ea\u51cf. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u4f4d H - \u7b2c 4 \u4f4d\u501f\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u4fdd\u6301\u4e0d\u53d8 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles DEC B 0x05 4 DEC C 0x0d 4 DEC D 0x15 4 DEC E 0x1d 4 DEC H 0x25 4 DEC L 0x2d 4 DEC (HL) 0x35 12 DEC A 0x3d 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Decrement register n. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if reselt is zero. // N - Set. // H - Set if no borrow from bit 4. // C - Not affected fn alu_dec(&mut self, a: u8) -> u8 { let r = a.wrapping_sub(1); self.reg.set_flag(H, a.trailing_zeros() >= 4); self.reg.set_flag(N, true); self.reg.set_flag(Z, r == 0); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x05 => self.reg.b = self.alu_dec(self.reg.b), 0x0d => self.reg.c = self.alu_dec(self.reg.c), 0x15 => self.reg.d = self.alu_dec(self.reg.d), 0x1d => self.reg.e = self.alu_dec(self.reg.e), 0x25 => self.reg.h = self.alu_dec(self.reg.h), 0x2d => self.reg.l = self.alu_dec(self.reg.l), 0x35 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_dec(v); self.mem.borrow_mut().set(a, h); } 0x3d => self.reg.a = self.alu_dec(self.reg.a), ... } } 16 \u4f4d\u7b97\u6570\u903b\u8f91\u8fd0\u7b97 ADD HL, r16 1) \u63cf\u8ff0 \u7b97\u6570\u52a0\u6cd5\u8fd0\u7b97. \u5c06\u5bc4\u5b58\u5668 HL \u4e0e\u76f8\u5e94 16 \u4f4d\u6570\u636e\u76f8\u52a0, \u5e76\u5c06\u7ed3\u679c\u5199\u5165 HL. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u4fdd\u6301\u4e0d\u53d8 N - \u7f6e\u96f6 H - \u7b2c 11 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u7b2c 15 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles ADD (HL), BC 0x09 8 ADD (HL), DE 0x19 8 ADD (HL), HL 0x29 8 ADD (HL), SP 0x39 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Add n to HL // n = BC,DE,HL,SP // // Flags affected: // Z - Not affected. // N - Reset. // H - Set if carry from bit 11. // C - Set if carry from bit 15. fn alu_add_hl(&mut self, n: u16) { let a = self.reg.get_hl(); let r = a.wrapping_add(n); self.reg.set_flag(C, a > 0xffff - n); self.reg.set_flag(H, (a & 0x0fff) + (n & 0x0fff) > 0x0fff); self.reg.set_flag(N, false); self.reg.set_hl(r); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x09 => self.alu_add_hl(self.reg.get_bc()), 0x19 => self.alu_add_hl(self.reg.get_de()), 0x29 => self.alu_add_hl(self.reg.get_hl()), 0x39 => self.alu_add_hl(self.reg.sp), ... } } ADD SP, d8 1) \u63cf\u8ff0 \u7b97\u6570\u52a0\u6cd5\u8fd0\u7b97. \u5c06\u5bc4\u5b58\u5668 SP \u4e0e 8 \u4f4d\u7acb\u5373\u53c2\u6570\u76f8\u52a0, \u5e76\u5c06\u7ed3\u679c\u5199\u5165 SP. \u7acb\u5373\u53c2\u6570\u4ee5\u6709\u7b26\u53f7 8 \u6574\u6570\u8868\u793a. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u7f6e\u96f6 N - \u7f6e\u96f6 H - \u7b2c 4 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u7b2c 7 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles ADD SP, (d8) 0xe8 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Add n to Stack Pointer (SP). // n = one byte signed immediate value (#). // // Flags affected: // Z - Reset. // N - Reset. // H - Set or reset according to operation. // C - Set or reset according to operation. fn alu_add_sp(&mut self) { let a = self.reg.sp; let b = i16::from(self.imm() as i8) as u16; self.reg.set_flag(C, (a & 0x00ff) + (b & 0x00ff) > 0x00ff); self.reg.set_flag(H, (a & 0x000f) + (b & 0x000f) > 0x000f); self.reg.set_flag(N, false); self.reg.set_flag(Z, false); self.reg.sp = a.wrapping_add(b); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xe8 => self.alu_add_sp(), ... } } INC r16 1) \u63cf\u8ff0 \u76f8\u5e94 16 \u4f4d\u5bc4\u5b58\u5668\u81ea\u589e. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles INC BC 0x03 8 INC DE 0x13 8 INC HL 0x23 8 INC SP 0x33 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x03 => { let v = self.reg.get_bc().wrapping_add(1); self.reg.set_bc(v); } 0x13 => { let v = self.reg.get_de().wrapping_add(1); self.reg.set_de(v); } 0x23 => { let v = self.reg.get_hl().wrapping_add(1); self.reg.set_hl(v); } 0x33 => { let v = self.reg.sp.wrapping_add(1); self.reg.sp = v; } ... } } DEC r16 1) \u63cf\u8ff0 \u76f8\u5e94 16 \u4f4d\u5bc4\u5b58\u5668\u81ea\u51cf. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles DEC BC 0x0b 8 DEC DE 0x1b 8 DEC HL 0x2b 8 DEC SP 0x3b 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x0b => { let v = self.reg.get_bc().wrapping_sub(1); self.reg.set_bc(v); } 0x1b => { let v = self.reg.get_de().wrapping_sub(1); self.reg.set_de(v); } 0x2b => { let v = self.reg.get_hl().wrapping_sub(1); self.reg.set_hl(v); } 0x3b => { let v = self.reg.sp.wrapping_sub(1); self.reg.sp = v; } ... } } \u6742\u9879 DAA 1) \u63cf\u8ff0 \u8be5\u6307\u4ee4\u8c03\u6574\u5bc4\u5b58\u5668 A, \u4ee5\u4fbf\u83b7\u5f97\u4e8c\u8fdb\u5236\u7f16\u7801\u5341\u8fdb\u5236(BCD)\u7684\u6b63\u786e\u8868\u793a. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u4fdd\u6301\u4e0d\u53d8 H - \u7f6e\u96f6 C - \u6839\u636e\u64cd\u4f5c\u5224\u65ad 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles DAA - 0x27 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Decimal adjust register A. This instruction adjusts register // A so that the correct representation of Binary // Coded Decimal (BCD) is obtained. // // Flags affected: // Z - Set if register A is zero. // N - Not affected. // H - Reset. // C - Set or reset according to operation fn alu_daa(&mut self) { let mut a = self.reg.a; let mut adjust = if self.reg.get_flag(C) { 0x60 } else { 0x00 }; if self.reg.get_flag(H) { adjust |= 0x06; }; if !self.reg.get_flag(N) { if a & 0x0f > 0x09 { adjust |= 0x06; }; if a > 0x99 { adjust |= 0x60; }; a = a.wrapping_add(adjust); } else { a = a.wrapping_sub(adjust); } self.reg.set_flag(C, adjust >= 0x60); self.reg.set_flag(H, false); self.reg.set_flag(Z, a == 0x00); self.reg.a = a; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x27 => self.alu_daa(), ... } } CPL 1) \u63cf\u8ff0 \u5bf9\u5bc4\u5b58\u5668 A \u53d6\u53cd. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u4fdd\u6301\u4e0d\u53d8 N - \u7f6e\u4f4d H - \u7f6e\u4f4d C - \u4fdd\u6301\u4e0d\u53d8 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles CPL - 0x2f 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Complement A register. (Flip all bits.) // // Flags affected: // Z - Not affected. // N - Set. // H - Set. // C - Not affected. fn alu_cpl(&mut self) { self.reg.a = !self.reg.a; self.reg.set_flag(H, true); self.reg.set_flag(N, true); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x2f => self.alu_cpl(), ... } } CCF 1) \u63cf\u8ff0 \u5bf9\u8fdb\u4f4d\u6807\u5fd7\u4f4d\u53d6\u53cd. \u5982\u679c\u5f53\u524d\u8fdb\u4f4d\u6807\u5fd7\u4f4d\u4e3a 1, \u5219\u7f6e\u96f6\uff1b\u5426\u5219\u7f6e\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u4fdd\u6301\u4e0d\u53d8 N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u53d6\u53cd 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles CCF - 0x3f 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Complement carry flag. If C flag is set, then reset it. // If C flag is reset, then set it. // Flags affected: // // Z - Not affected. // N - Reset. // H - Reset. // C - Complemented. fn alu_ccf(&mut self) { let v = !self.reg.get_flag(C); self.reg.set_flag(C, v); self.reg.set_flag(H, false); self.reg.set_flag(N, false); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x3f => self.alu_ccf(), ... } } SCF 1) \u63cf\u8ff0 \u7f6e\u4f4d\u8fdb\u4f4d\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u4fdd\u6301\u4e0d\u53d8 N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SCF - 0x37 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Set Carry flag. // // Flags affected: // Z - Not affected. // N - Reset. // H - Reset. // C - Set. fn alu_scf(&mut self) { self.reg.set_flag(C, true); self.reg.set_flag(H, false); self.reg.set_flag(N, false); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x37 => self.alu_scf(), ... } } NOP 1) \u63cf\u8ff0 \u4e0d\u505a\u64cd\u4f5c. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles NOP - 0x00 20 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x00 => {}, ... } } HALT 1) \u63cf\u8ff0 \u5173\u95ed CPU, \u76f4\u5230\u53d1\u751f\u65b0\u7684\u4e2d\u65ad\u4e8b\u4ef6. \u5728\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u5c3d\u53ef\u80fd\u4f7f\u7528\u5b83\u53ef\u4ee5\u964d\u4f4e\u80fd\u8017. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles HALT - 0x76 4 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x76 => self.halted = true, ... } } STOP 1) \u63cf\u8ff0 \u5728\u6309\u4e0b\u6309\u94ae\u4e4b\u524d\u6682\u505c CPU \u548c LCD \u663e\u793a. \u4eff\u771f\u5668\u5b9e\u73b0\u65f6\u65e0\u9700\u505a\u7279\u6b8a\u5904\u7406. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0. 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles STOP - 0x10 4 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x10 => {}, ... } } DI/EI 1) \u63cf\u8ff0 DI(Disable Interrupt)\u6307\u4ee4\u7981\u7528\u4e2d\u65ad\u4f46\u4e0d\u7acb\u5373\u7981\u7528. \u6267\u884c DI \u540e\u5728\u4e0b\u4e00\u4e2a\u6307\u4ee4\u65f6\u7981\u7528\u4e2d\u65ad. EI(Enable Interrupt)\u6307\u4ee4\u542f\u7528\u4e2d\u65ad, \u8be5\u6307\u4ee4\u58f0\u660e\u542f\u7528\u4e2d\u65ad\u4f46\u4e0d\u80fd\u7acb\u5373\u6267\u884c. \u6267\u884c EI \u540e, \u5728\u4e0b\u4e00\u4e2a\u6307\u4ee4\u65f6\u542f\u7528\u4e2d\u65ad. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles DI - 0xf3 4 EI - 0xfb 4 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xf3 => self.ei = false, 0xfb => self.ei = true, ... } } \u5faa\u73af\u548c\u79fb\u4f4d\u64cd\u4f5c \u79fb\u4f4d\u64cd\u4f5c\u662f\u4f4d\u64cd\u4f5c\u7684\u4e00\u79cd. \u79fb\u4f4d\u8fd0\u7b97\u53ef\u4ee5\u5728\u4e8c\u8fdb\u5236\u7684\u57fa\u7840\u4e0a\u5bf9\u6570\u5b57\u8fdb\u884c\u5e73\u79fb. \u6309\u7167\u5e73\u79fb\u7684\u65b9\u5411\u548c\u586b\u5145\u6570\u5b57\u7684\u89c4\u5219\u5206\u4e3a\u591a\u79cd: \u5de6\u79fb, \u5e26\u7b26\u53f7\u53f3\u79fb, \u65e0\u7b26\u53f7\u53f3\u79fb, \u5faa\u73af\u5de6\u79fb, \u5faa\u73af\u53f3\u79fb\u7b49. \u5de6\u79fb\u8fd0\u7b97\u662f\u5c06\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u7684\u64cd\u4f5c\u6570\u6309\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570\u5411\u5de6\u79fb\u52a8, \u79fb\u51fa\u4f4d\u88ab\u4e22\u5f03, \u53f3\u8fb9\u79fb\u51fa\u7684\u7a7a\u4f4d\u4e00\u5f8b\u8865 0. \u53f3\u79fb\u8fd0\u7b97\u662f\u5c06\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u7684\u64cd\u4f5c\u6570\u6309\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570\u5411\u53f3\u79fb\u52a8, \u79fb\u51fa\u4f4d\u88ab\u4e22\u5f03, \u5de6\u8fb9\u79fb\u51fa\u7684\u7a7a\u4f4d\u4e00\u5f8b\u8865 0, \u6216\u8005\u8865\u7b26\u53f7\u4f4d, \u8fd9\u7531\u4e0d\u540c\u7684\u673a\u5668\u800c\u5b9a. \u5728\u4f7f\u7528\u8865\u7801\u4f5c\u4e3a\u673a\u5668\u6570\u7684\u673a\u5668\u4e2d, \u6b63\u6570\u7684\u7b26\u53f7\u4f4d\u4e3a 0, \u8d1f\u6570\u7684\u7b26\u53f7\u4f4d\u4e3a 1. RLCA 1) \u63cf\u8ff0 \u6309\u4f4d\u5de6\u79fb\u8fd0\u7b97. \u6700\u9ad8\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u9ad8\u4f4d. 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RLCA - 0x07 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Rotate A left. Old bit 7 to Carry flag. // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 7 data. fn alu_rlc(&mut self, a: u8) -> u8 { let c = (a & 0x80) >> 7 == 0x01; let r = (a << 1) | u8::from(c); self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x07 => { self.reg.a = self.alu_rlc(self.reg.a); self.reg.set_flag(Z, false); } ... } } RLA 1) \u63cf\u8ff0 \u6309\u4f4d\u5de6\u79fb\u8fd0\u7b97. \u6ea2\u51fa\u6807\u5fd7\u4f4d\u8865\u5145\u6700\u4f4e\u4f4d, \u540c\u65f6\u6700\u9ad8\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u9ad8\u4f4d. 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RLA - 0x17 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Rotate A left through Carry flag. // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 7 data. fn alu_rl(&mut self, a: u8) -> u8 { let c = (a & 0x80) >> 7 == 0x01; let r = (a << 1) + u8::from(self.reg.get_flag(C)); self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x17 => { self.reg.a = self.alu_rl(self.reg.a); self.reg.set_flag(Z, false); } ... } } RRCA 1) \u63cf\u8ff0 \u6309\u4f4d\u53f3\u79fb\u8fd0\u7b97. \u6700\u4f4e\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RRCA - 0x0f 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Rotate A right. Old bit 0 to Carry flag. // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 0 data fn alu_rrc(&mut self, a: u8) -> u8 { let c = a & 0x01 == 0x01; let r = if c { 0x80 | (a >> 1) } else { (a >> 1) }; self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x0f => { self.reg.a = self.alu_rrc(self.reg.a); self.reg.set_flag(Z, false); } ... } } RRA 1) \u63cf\u8ff0 \u6309\u4f4d\u53f3\u79fb\u8fd0\u7b97. \u6ea2\u51fa\u6807\u5fd7\u4f4d\u79fb\u52a8\u81f3\u6700\u9ad8\u4f4d, \u540c\u65f6\u6700\u4f4e\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u6570\u636e\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RRA - 0x1f 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Rotate A right through Carry flag. // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 0 data. fn alu_rr(&mut self, a: u8) -> u8 { let c = a & 0x01 == 0x01; let r = if self.reg.get_flag(C) { 0x80 | (a >> 1) } else { a >> 1 }; self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x1f => { self.reg.a = self.alu_rr(self.reg.a); self.reg.set_flag(Z, false); } ... } } \u5206\u652f\u8df3\u8f6c \u5728\u6b63\u5f0f\u4ecb\u7ecd LR35902 \u7684\u5206\u652f/\u8df3\u8f6c\u6307\u4ee4\u524d, \u5148\u5bf9\u8be5\u5904\u7406\u5668\u7684\u5206\u652f\u6307\u4ee4\u7c7b\u578b\u8fdb\u884c\u7b80\u5355\u7684\u4ecb\u7ecd. \u5bf9\u4e8e\u7edd\u5927\u90e8\u5206\u5904\u7406\u5668\u6765\u8bf4, \u5206\u652f\u6307\u4ee4\u5e38\u5e38\u88ab\u5206\u7c7b\u4e3a\u5982\u4e0b\u4e24\u7c7b: \u65e0\u6761\u4ef6\u5206\u652f\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u6307\u4ee4\u662f\u6307\u65e0\u9700\u5224\u65ad\u6761\u4ef6\u4e00\u5b9a\u4f1a\u53d1\u751f\u7684\u8df3\u8f6c\u6307\u4ee4. \u800c\u6309\u7167\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u8ba1\u7b97\u65b9\u5f0f, \u8fd8\u53ef\u4ee5\u88ab\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5: \u2013 \u65e0\u6761\u4ef6\u76f4\u63a5\u5730\u5740\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u8df3\u8f6c\u76ee\u6807\u5730\u5740\u662f\u76f4\u63a5\u4ece\u6307\u4ee4\u7f16\u7801\u7684\u7acb\u5373\u53c2\u6570\u4e2d\u83b7\u5f97\u7684. \u2013 \u65e0\u6761\u4ef6\u95f4\u63a5\u5730\u5740\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u8df3\u8f6c\u76ee\u6807\u5730\u5740\u4ece\u5bc4\u5b58\u5668\u4e2d\u53d6\u5f97(\u6216\u6dfb\u52a0\u4e00\u5b9a\u91cf\u7684\u8ba1\u7b97). \u6709\u6761\u4ef6\u5206\u652f\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u6307\u4ee4\u662f\u6307\u5728\u8df3\u8f6c\u524d\u9700\u8981\u5224\u65ad\u6761\u4ef6\u662f\u5426\u6210\u7acb\u800c\u51b3\u5b9a\u662f\u5426\u53d1\u751f\u8df3\u8f6c\u7684\u6307\u4ee4. \u540c\u6837\u6309\u7167\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u8ba1\u7b97\u65b9\u5f0f, \u8fd8\u53ef\u4ee5\u88ab\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5: \u2013 \u5e26\u6761\u4ef6\u76f4\u63a5\u5730\u5740\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u8df3\u8f6c\u76ee\u6807\u5730\u5740\u662f\u76f4\u63a5\u4ece\u6307\u4ee4\u7f16\u7801\u7684\u7acb\u5373\u53c2\u6570\u4e2d\u83b7\u5f97\u7684. \u2013 \u5e26\u6761\u4ef6\u95f4\u63a5\u5730\u5740\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u8df3\u8f6c\u76ee\u6807\u5730\u5740\u4ece\u5bc4\u5b58\u5668\u4e2d\u53d6\u5f97(\u6216\u6dfb\u52a0\u4e00\u5b9a\u91cf\u7684\u8ba1\u7b97). \u5bf9\u4e8e\u5e26\u6761\u4ef6\u5206\u652f/\u8df3\u8f6c\u6307\u4ee4\u800c\u8a00, \u662f\u5426\u53d1\u751f\u8df3\u8f6c, \u5904\u7406\u5668\u5c06\u6d88\u8017\u4e0d\u540c\u7684\u65f6\u949f\u5468\u671f. \u7406\u8bba\u4e0a\u53ea\u6709\u5728\u6267\u884c\u9636\u6bb5\u5b8c\u6210\u540e, \u624d\u80fd\u591f\u786e\u5207\u7684\u89e3\u6790\u51fa\u8be5\u6307\u4ee4\u6d88\u8017\u7684\u65f6\u949f\u5468\u671f\u548c\u76ee\u6807\u8df3\u8f6c\u5730\u5740, \u5728\u4eff\u771f\u5668\u7684\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u9700\u8981\u7279\u522b\u6ce8\u610f. \u5bf9\u4e8e\u73b0\u5b9e\u4e16\u754c\u7684\u5904\u7406\u5668\u800c\u8a00, \u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd, \u5728\u53d6\u6307\u65f6\u4f1a\u4f7f\u7528\u5206\u652f\u9884\u6d4b(Branch Prediction)\u6280\u672f. \u8be5\u6280\u672f\u9884\u6d4b\u5206\u652f\u6307\u4ee4\u662f\u5426\u9700\u8981\u8df3\u8f6c\u4ee5\u53ca\u8df3\u8f6c\u5730\u5740\u662f\u4ec0\u4e48, \u4e5f\u5c31\u662f\u8df3\u8f6c\u7684\"\u65b9\u5411\"\u548c\"\u5730\u5740\". \u53d6\u6307\u65f6\u5bf9\u6307\u4ee4\u8fdb\u884c\u9884\u6d4b\u7684\u65b9\u5f0f\u88ab\u79f0\u4e3a\u9884\u6d4b\u53d6\u6307(Speculative Fetch), \u5bf9\u9884\u53d6\u7684\u6307\u4ee4\u8fdb\u884c\u6267\u884c\u4e5f\u88ab\u79f0\u4e3a\u9884\u6d4b\u6267\u884c(Speculative Exectution). \u73b0\u4ee3\u5904\u7406\u5668\u5df2\u7ecf\u53ef\u4ee5\u975e\u5e38\u9ad8\u6548\u7684\u5bf9\u5206\u652f\u8fdb\u884c\u9884\u6d4b, \u9884\u6d4b\u6b63\u786e\u7387\u4e00\u822c\u5728 90% \u5230 99%. JUMP 1)\u63cf\u8ff0 \u8df3\u8f6c\u5230\u6307\u5b9a\u7684\u5730\u5740. \u5730\u5740\u7531 16 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a. 2)\u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3)\u6307\u4ee4 Instruction Parameters Opcode Cycles JUMP (d16) 0xc3 12 4)\u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc3 => self.reg.pc = self.imm_word(), 0xe9 => self.reg.pc = self.reg.get_hl(), ... } } JUMP IF 1)\u63cf\u8ff0 \u5e26\u6761\u4ef6\u7684 JUMP \u6307\u4ee4. \u6761\u4ef6\u7531\u4e0b\u8868\u6307\u5b9a. 2)\u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3)\u6307\u4ee4 Instruction Parameters Opcode Cycles JUMP IF Z == 0 (d16) 0xc2 12 JUMP IF z != 0 (d16) 0xca 12 JUMP IF c == 0 (d16) 0xd2 12 JUMP IF c != 0 (d16) 0xda 12 4)\u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc2 | 0xca | 0xd2 | 0xda => { let pc = self.imm_word(); let cond = match opcode { 0xc2 => !self.reg.get_flag(Z), 0xca => self.reg.get_flag(Z), 0xd2 => !self.reg.get_flag(C), 0xda => self.reg.get_flag(C), _ => panic!(\"\"), }; if cond { self.reg.pc = pc; } } ... } } JR 1) \u63cf\u8ff0 \u8bfb\u53d6\u4e00\u4e2a 8 \u4f4d\u6709\u7b26\u53f7\u7acb\u5373\u53c2\u6570 n, \u5e76\u8df3\u8f6c\u5230 pc + n \u4f4d\u7f6e. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles JR (d8) 0x18 8 4)\u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Add n to current address and jump to it. // n = one byte signed immediate value fn alu_jr(&mut self, n: u8) { let n = n as i8; self.reg.pc = ((u32::from(self.reg.pc) as i32) + i32::from(n)) as u16; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x18 => { let n = self.imm(); self.alu_jr(n); } ... } } JR IF 1) \u63cf\u8ff0 \u5e26\u6761\u4ef6\u7684 JR \u6307\u4ee4. \u6761\u4ef6\u7531\u4e0b\u8868\u6307\u5b9a. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles JR IF z == 0 - 0x20 8 JR IF z == 1 - 0x28 8 JR IF c == 0 - 0x30 8 JR IF c == 1 - 0x38 8 4)\u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x20 | 0x28 | 0x30 | 0x38 => { let cond = match opcode { 0x20 => !self.reg.get_flag(Z), 0x28 => self.reg.get_flag(Z), 0x30 => !self.reg.get_flag(C), 0x38 => self.reg.get_flag(C), _ => panic!(\"\"), }; let n = self.imm(); if cond { self.alu_jr(n); } } ... } } \u8c03\u7528 \u8c03\u7528\u547d\u4ee4\u901a\u5e38\u6cdb\u6307 CALL \u7c7b\u578b\u7684\u6307\u4ee4. \u5b83\u4eec\u7528\u4e8e\u5904\u7406\u4e3b\u7a0b\u5e8f\u4e0e\u5b50\u7a0b\u5e8f\u4e4b\u95f4\u7684\u8c03\u7528\u5173\u7cfb. \u7ecf\u5178\u7684\u4e3b\u7a0b\u5e8f/\u5b50\u7a0b\u5e8f\u5207\u6362\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a. \u5b50\u7a0b\u5e8f\u662f\u7528\u4e8e\u5b8c\u6210\u7279\u5b9a\u529f\u80fd\u7684\u4e00\u6bb5\u7a0b\u5e8f. \u5f53\u4e3b\u7a0b\u5e8f(\u8c03\u7528\u7a0b\u5e8f)\u9700\u8981\u6267\u884c\u8fd9\u4e2a\u529f\u80fd\u65f6, \u91c7\u7528 CALL \u8c03\u7528\u6307\u4ee4\u8f6c\u79fb\u5230\u8be5\u5b50\u7a0b\u5e8f\u7684\u8d77\u59cb\u5904\u6267\u884c. \u5f53\u8fd0\u884c\u5b8c\u5b50\u7a0b\u5e8f\u529f\u80fd\u540e, \u91c7\u7528 RET \u8fd4\u56de\u6307\u4ee4\u56de\u5230\u4e3b\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c. CALL 1) \u63cf\u8ff0 \u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u538b\u5165\u5806\u6808, \u5e76\u8df3\u8f6c\u5230\u76f8\u5e94\u5730\u5740(\u7531 16 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a). \u7c7b\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u8c03\u7528. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles CALL - 0xcd 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcd => { let nn = self.imm_word(); self.stack_add(self.reg.pc); self.reg.pc = nn; } ... } } CALL IF 1) \u63cf\u8ff0 \u5e26\u6761\u4ef6\u7684 CALL \u6307\u4ee4. \u6761\u4ef6\u7531\u4e0b\u8868\u6307\u5b9a. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles CALL IF z == 0 - 0xc4 12 CALL IF z == 1 - 0xcc 12 CALL IF c == 0 - 0xd4 12 CALL IF c == 1 - 0xdc 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc4 | 0xcc | 0xd4 | 0xdc => { let cond = match opcode { 0xc4 => !self.reg.get_flag(Z), 0xcc => self.reg.get_flag(Z), 0xd4 => !self.reg.get_flag(C), 0xdc => self.reg.get_flag(C), _ => panic!(\"\"), }; let nn = self.imm_word(); if cond { self.stack_add(self.reg.pc); self.reg.pc = nn; } } ... } } \u590d\u4f4d RST 1) \u63cf\u8ff0 \u5c06\u5f53\u524d\u5730\u5740\u63a8\u9001\u5230\u5806\u6808, \u5e76\u8df3\u8f6c\u5230\u67d0\u4e2a\u56fa\u5b9a\u5730\u5740. \u5730\u5740\u89c1\u4e0b\u8868. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RST 0x00 0xc7 32 RST 0x08 0xcf 32 RST 0x10 0xd7 32 RST 0x18 0xdf 32 RST 0x20 0xe7 32 RST 0x28 0xef 32 RST 0x30 0xf7 32 RST 0x38 0xcf 32 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc7 => { self.stack_add(self.reg.pc); self.reg.pc = 0x00; } 0xcf => { self.stack_add(self.reg.pc); self.reg.pc = 0x08; } 0xd7 => { self.stack_add(self.reg.pc); self.reg.pc = 0x10; } 0xdf => { self.stack_add(self.reg.pc); self.reg.pc = 0x18; } 0xe7 => { self.stack_add(self.reg.pc); self.reg.pc = 0x20; } 0xef => { self.stack_add(self.reg.pc); self.reg.pc = 0x28; } 0xf7 => { self.stack_add(self.reg.pc); self.reg.pc = 0x30; } 0xff => { self.stack_add(self.reg.pc); self.reg.pc = 0x38; } ... } } \u8fd4\u56de RET 1) \u63cf\u8ff0 \u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a 16 \u4f4d\u5730\u5740, \u5e76\u8df3\u8f6c\u5230\u8be5\u5730\u5740. \u5b83\u7c7b\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684 Return \u8bed\u53e5. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RET - 0xc9 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc9 => self.reg.pc = self.stack_pop(), ... } } RET IF 1) \u63cf\u8ff0 \u5e26\u6761\u4ef6\u7684 RET \u6307\u4ee4. \u6761\u4ef6\u7531\u4e0b\u8868\u6307\u5b9a. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RET IF z == 0 - 0xc0 8 RET IF z == 1 - 0xc8 8 RET IF c == 0 - 0xd0 8 RET IF c == 1 - 0xd8 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc0 | 0xc8 | 0xd0 | 0xd8 => { let cond = match opcode { 0xc0 => !self.reg.get_flag(Z), 0xc8 => self.reg.get_flag(Z), 0xd0 => !self.reg.get_flag(C), 0xd8 => self.reg.get_flag(C), _ => panic!(\"\"), }; if cond { self.reg.pc = self.stack_pop(); } } ... } } RETI 1) \u63cf\u8ff0 \u6267\u884c RET \u6307\u4ee4\u5e76\u542f\u7528\u4e2d\u65ad. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RETI _ 0xd9 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xd9 => { self.reg.pc = self.stack_pop(); self.ei = true; } ... } }","title":"GB-CPU-LR35902\u6807\u51c6\u6307\u4ee4\u96c6"},{"location":"content/gameboy/cpu/lr35902_standard/#lr35902","text":"LR35902 \u62e5\u6709\u4e24\u5957\u6307\u4ee4\u96c6, \u4e00\u5957\u662f 8 \u4f4d\u6307\u4ee4\u96c6, \u53e6\u4e00\u5957\u5219\u662f 16 \u4f4d\u6307\u4ee4\u96c6, \u5176\u4e2d 16 \u4f4d\u6307\u4ee4\u96c6\u7684\u64cd\u4f5c\u7801\u56fa\u5b9a\u4ee5 0xcb \u4f5c\u4e3a\u524d\u7f00. 16 \u4f4d\u6307\u4ee4\u96c6\u4e5f\u5e38\u88ab\u79f0\u4f5c\u6269\u5c55\u6307\u4ee4\u96c6, \u56e0\u4e3a\u539f\u7248 z80 CPU \u4e0d\u652f\u6301\u79fb\u4f4d\u64cd\u4f5c, \u6240\u4ee5 LR35902 \u901a\u8fc7\u5916\u63a5\u6269\u5c55\u7535\u8def\u7684\u5f62\u5f0f\u989d\u5916\u6dfb\u52a0\u4e86\u79fb\u4f4d\u6307\u4ee4. \u5173\u4e8e\u5176\u6807\u51c6\u6307\u4ee4\u96c6\u4e0e\u6269\u5f20\u6307\u4ee4\u96c6, \u53ef\u4ee5\u5728\u7f51\u7ad9 http://www.pastraiser.com/cpu/gameboy/gameboy_opcodes.html \u4e0a\u627e\u5230\u5b83\u7684\u7b80\u8981\u6982\u89c8. \u6211\u4eec\u9996\u5148\u5c06\u805a\u7126\u5728\u6807\u51c6\u6307\u4ee4\u96c6\u4e0a, \u8fd9\u5957\u6307\u4ee4\u88ab\u540c\u65f6\u5e94\u7528\u5728\u8bf8\u5982 Intel 8080, z80 \u548c LR35902 \u7b49 CPU \u4e0a, \u66f4\u662f\u5982\u4eca x86 \u67b6\u6784\u7684\u524d\u8eab. \u8bf7\u6ce8\u610f, \u5bf9 CPU \u6307\u4ee4\u96c6\u7684\u4eff\u771f\u662f\u4e00\u4e2a\u7e41\u7410\u4e14\u4e0d\u80fd\u51fa\u4efb\u4f55\u5dee\u9519\u7684\u5de5\u7a0b, \u521d\u5b66\u8005\u901a\u5e38\u4f1a\u82b1\u5927\u91cf\u7684\u65f6\u95f4\u5728\u8c03\u5f0f\u4e0a. \u66f4\u7cdf\u7cd5\u7684\u662f, \u9664\u975e\u5df2\u7ecf\u5b8c\u6210\u4e86\u6574\u4e2a\u9879\u76ee, \u4e0d\u7136\u51e0\u4e4e\u65e0\u6cd5\u5728\u5f00\u53d1\u9636\u6bb5\u9a8c\u8bc1\u81ea\u5df1\u5199\u7684\u4ee3\u7801\u662f\u5426\u6b63\u786e. \u56e0\u6b64\u8bf7\u505a\u597d\u51c6\u5907, \u5e76\u4e14\u5728\u9047\u5230\u56f0\u96be\u65f6\u4e0d\u5fc5\u8fc7\u4e8e\u6cae\u4e27!","title":"LR35902 \u6807\u51c6\u6307\u4ee4\u96c6"},{"location":"content/gameboy/cpu/lr35902_standard/#_1","text":"\u5728\u5f00\u59cb\u4e4b\u524d, \u5b9a\u4e49\u5982\u4e0b\u7684\u5bf9 CPU \u7ed3\u6784\u8fdb\u884c\u4eff\u771f\u7684\u7ed3\u6784\u4f53, \u540e\u7eed\u6240\u6709\u7684\u5f00\u53d1\u90fd\u5c06\u56f4\u7ed5\u8be5\u7ed3\u6784\u4f53\u8fdb\u884c. pub struct Cpu { pub reg: Register, // \u5bc4\u5b58\u5668 pub mem: Rc<RefCell<dyn Memory>>, // \u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u7a7a\u95f4 pub halted: bool, // \u8868\u660e CPU \u662f\u5426\u5904\u4e8e\u5de5\u4f5c\u72b6\u6001 pub ei: bool, // enable interrupt \u7684\u7b80\u5199, \u8868\u660e CPU \u662f\u5426\u63a5\u6536\u786c\u4ef6\u4e2d\u65ad } \u540c\u65f6\u4e3a\u8be5\u7ed3\u6784\u4f53\u5b9e\u73b0\u4e24\u4e2a\u6839\u636e\u5f53\u524d PC \u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6 u8 \u548c u16 \u7684\u4e24\u4e2a\u51fd\u6570, \u8bb0\u5f97\u8bfb\u53d6\u6570\u636e\u540e\u9700\u8981\u51c6\u786e\u5730\u79fb\u52a8 PC: \u5982\u679c\u8bfb\u53d6\u7684\u662f u8 \u6570\u636e\u5219 PC \u52a0 1, \u5982\u679c\u662f u16 \u6570\u636e\u5219 PC \u52a0 2. impl Cpu { fn imm(&mut self) -> u8 { let v = self.mem.borrow().get(self.reg.pc); self.reg.pc += 1; v } fn imm_word(&mut self) -> u16 { let v = self.mem.borrow().get_word(self.reg.pc); self.reg.pc += 2; v } } \u6b64\u5904\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282, u16 \u6570\u636e\u4f4e\u4f4d\u6570\u636e\u5728\u5185\u5b58\u524d\u534a\u90e8\u5206, \u9ad8\u4f4d\u6570\u636e\u5728\u540e\u534a\u90e8\u5206. \u6bd4\u5982\u6570\u5b57 0x0150, \u5176\u5185\u5b58\u5206\u5e03\u5219\u662f 0x50, 0x01. \u8fd9\u5728\u8ba1\u7b97\u673a\u4e2d\u88ab\u79f0\u4e3a\u5c0f\u7aef\u5e8f(Little endian).","title":"\u7ed3\u6784\u4f53\u5b9a\u4e49"},{"location":"content/gameboy/cpu/lr35902_standard/#_2","text":"CPU \u603b\u662f\u4e0d\u65ad\u7684\u6839\u636e\u5f53\u524d PC \u8fdb\u884c\u53d6\u6307\u8fc7\u7a0b, \u5e76\u4e14\u5728\u6307\u4ee4\u88ab\u53d6\u6307\u540e, \u8fdb\u5165\u6307\u4ee4\u6267\u884c\u8fc7\u7a0b. \u4e3a CPU \u6dfb\u52a0\u5982\u4e0b\u7684\u6307\u4ee4\u6267\u884c\u51fd\u6570: fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { ... } } \u5176\u4e2d Opcode \u4e3a\u64cd\u4f5c\u7801, \u4e0d\u540c\u7684 Opcode \u4ee3\u8868\u4e0d\u540c\u7684\u6307\u4ee4, \u5728\u4ee3\u7801\u5b9e\u73b0\u4e2d\u9700\u8981\u4f7f\u7528 match \u8bed\u53e5\u5bf9 Opcode \u8fdb\u884c\u5339\u914d. \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a u32, \u4ee3\u8868\u8be5\u6307\u4ee4\u6240\u6d88\u8017\u7684\u673a\u5668\u5468\u671f(CPU \u6267\u884c\u8be5\u6307\u4ee4\u6240\u82b1\u8d39\u7684\u65f6\u95f4). \u4e0b\u9762\u7ed9\u51fa\u4e86\u6807\u51c6\u6307\u4ee4\u7684\u6458\u8981\u4e0e\u4eff\u771f\u5b9e\u73b0. \u5982\u679c\u8be5\u6307\u4ee4\u5f71\u54cd\u4e86\u6807\u5fd7\u4f4d\u5bc4\u5b58\u5668 Flag, \u5219\u4f1a\u5728\u6307\u4ee4\u63cf\u8ff0\u4e2d\u7279\u522b\u6307\u660e. \u5728\u6b64\u7ea6\u5b9a\u6307\u4ee4\u7684\u4e66\u5199\u65b9\u6cd5\u5982\u4e0b: Instruction (Parameter1) (Parameter2) Instruction: \u6307\u4ee4\u7684\u82f1\u6587\u7f29\u5199 Parameter1/Parameter2: \u6307\u4ee4\u7684\u53c2\u6570 \u5176\u4e2d Parameter \u53ef\u4ee5\u662f\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5\u4e4b\u4e00: \u7279\u5b9a\u5bc4\u5b58\u5668: \u7279\u5b9a\u7684\u76ee\u6807\u5bc4\u5b58\u5668, \u53ef\u4ee5\u662f\u4efb\u610f 8 \u4f4d\u5bc4\u5b58\u5668\u6216 16 \u4f4d\u7ec4\u5408\u5bc4\u5b58\u5668\u4e4b\u4e00. r8: 8 \u4f4d\u5bc4\u5b58\u5668. \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668 A, F, B, C, D, E, H \u6216 L. d8: 8 \u4f4d\u7acb\u5373\u6570. \u7acb\u5373\u6570\u662f\u6307\u91c7\u7528\u7acb\u5373\u5bfb\u5740\u65b9\u5f0f\u6307\u4ee4\u4e2d\u7ed9\u51fa\u7684\u6570, \u8be5\u6570\u503c\u7d27\u8ddf\u5728\u64cd\u4f5c\u7801\u4e4b\u540e. r16: 16 \u4f4d\u5bc4\u5b58\u5668. \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668 AF, BC, DE \u6216 HL. d16: 16\u4f4d\u7acb\u5373\u6570. (r16): \u4ee5 16 \u4f4d\u5bc4\u5b58\u5668\u6240\u5b58\u50a8\u6570\u636e\u89c6\u4e3a\u5185\u5b58\u5730\u5740\u53d6\u5f97\u7684\u6570 (d16): \u4ee5 16 \u4f4d\u7acb\u5373\u6570\u6240\u5b58\u50a8\u6570\u636e\u89c6\u4e3a\u5185\u5b58\u5730\u5740\u53d6\u5f97\u7684\u6570 (a8): \u4ee5 0xff00 \u4e0e 8 \u4f4d\u7acb\u5373\u53c2\u6570\u7684\u6216\u8fd0\u7b97\u7ed3\u679c\u89c6\u4e3a\u5185\u5b58\u5730\u5740\u53d6\u5f97\u7684\u6570","title":"\u5982\u4f55\u53d6\u6307\u4e0e\u6267\u884c"},{"location":"content/gameboy/cpu/lr35902_standard/#8","text":"LD r8, d8 1) \u63cf\u8ff0 \u5c06\u4e00\u4e2a 8 \u4f4d\u7684\u7acb\u5373\u53c2\u6570\u5199\u5165\u5230\u76f8\u5e94\u7684 8 \u4f4d\u5bc4\u5b58\u5668\u4e2d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 \u4e0b\u8868\u5206\u4e3a 4 \u5217, \u7b2c\u4e00\u5217 Instruction \u8868\u793a\u6307\u4ee4\u7684\u7f29\u5199\u7c7b\u578b, \u7b2c\u4e8c\u5217 Parameters \u8868\u793a\u8be6\u7ec6\u7684\u53c2\u6570\u7b7e\u540d, \u7b2c\u4e09\u5217 Opcode \u4e3a\u6307\u4ee4\u7684\u64cd\u4f5c\u7801(16\u8fdb\u5236\u8868\u793a), \u6700\u540e\u4e00\u5217 Cycles \u4e3a\u6307\u4ee4\u6240\u9700\u6d88\u8017\u7684\u65f6\u949f\u5468\u671f. \u6bd4\u5982\u4e0b\u8868\u7b2c\u4e00\u884c, \u5c31\u8868\u793a\u5982\u679c CPU \u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u5230 0x06, \u5219\u5c06\u4e4b\u89c6\u4e3a LD B, n \u6307\u4ee4\u5904\u7406, \u5904\u7406\u8fc7\u7a0b\u5c06\u6d88\u8017 8 \u4e2a\u65f6\u949f\u5468\u671f. \u540e\u6587\u540c. Instruction Parameters Opcode Cycles LD B, n 06 8 LD C, n 0e 8 LD D, n 16 8 LD E, n 1e 8 LD H, n 26 8 LD L, n 2e 8 LD (HL), n 36 8 LD A, n 3e 8 4) \u4ee3\u7801\u5b9e\u73b0 \u6307\u4ee4\u7684\u4eff\u771f\u4ee3\u7801\u9700\u586b\u5199\u5165\u524d\u6587\u7684 ex() \u51fd\u6570\u7684 match \u8bed\u53e5\u5185. \u6570\u636e\u52a0\u8f7d\u7684\u4ee3\u7801\u5b9e\u73b0\u8f83\u4e3a\u7b80\u5355, \u9996\u5148\u4f7f\u7528 self.imm() \u8bfb\u53d6\u4e00\u4e2a 8 \u4f4d\u7acb\u5373\u6570, \u7136\u540e\u8d4b\u503c\u5230\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u5373\u53ef. \u7a0d\u5fae\u9700\u8981\u6ce8\u610f\u7684\u662f Opcode \u4e3a 36 \u65f6, \u7acb\u5373\u6570\u4e0d\u662f\u8d4b\u503c\u7ed9 HL \u5bc4\u5b58\u5668, \u800c\u662f\u8d4b\u503c\u7ed9\u4ee5 HL \u5bc4\u5b58\u5668\u5b58\u50a8\u6570\u636e\u4e3a\u5730\u5740\u7684\u5185\u5b58\u4e2d. fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x06 => self.reg.b = self.imm(), 0x0e => self.reg.c = self.imm(), 0x16 => self.reg.d = self.imm(), 0x1e => self.reg.e = self.imm(), 0x26 => self.reg.h = self.imm(), 0x2e => self.reg.l = self.imm(), 0x36 => { let a = self.reg.get_hl(); let v = self.imm(); self.mem.borrow_mut().set(a, v); } 0x3e => self.reg.a = self.imm(), ... } } LD r8, r8 1) \u63cf\u8ff0 \u5c06\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668\u7684\u503c\u5199\u5165\u5230\u53e6\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD B, B 40 4 LD B, C 41 4 LD B, D 42 4 LD B, E 43 4 LD B, H 44 4 LD B, L 45 4 LD B, (HL) 46 8 LD B, A 47 4 LD C, B 48 4 LD C, C 49 4 LD C, D 4A 4 LD C, E 4B 4 LD C, H 4C 4 LD C, L 4D 4 LD C, (HL) 4E 8 LD C, A 4F 4 LD D, B 50 4 LD D, C 51 4 LD D, D 52 4 LD D, E 53 4 LD D, H 54 4 LD D, L 55 4 LD D, (HL) 56 8 LD D, A 57 4 LD E, B 58 4 LD E, C 59 4 LD E, D 5A 4 LD E, E 5B 4 LD E, H 5C 4 LD E, L 5D 4 LD E, (HL) 5E 8 LD E, A 5F 4 LD H, B 60 4 LD H, C 61 4 LD H, D 62 4 LD H, E 63 4 LD H, H 64 4 LD H, L 65 4 LD H, (HL) 66 8 LD H, A 67 4 LD L, B 68 4 LD L, C 69 4 LD L, D 6A 4 LD L, E 6B 4 LD L, H 6C 4 LD L, L 6D 4 LD L, (HL) 6E 8 LD L, A 6F 4 LD (HL), B 70 8 LD (HL), C 71 8 LD (HL), D 72 8 LD (HL), E 73 8 LD (HL), H 74 8 LD (HL), L 75 8 LD (HL), A 77 8 LD A, B 78 4 LD A, C 79 4 LD A, D 7A 4 LD A, E 7B 4 LD A, H 7C 4 LD A, L 7D 4 LD A, (HL) 7E 8 LD A, A 7F 4 LD (BC), A 02 8 LD (DE), A 12 8 LD A, (BC) 0a 8 LD A, (DE) 1a 8 \u8868\u4e2d\u6709\u4e00\u7c7b\u6307\u4ee4\u53ef\u80fd\u4f1a\u5f15\u8d77\u8bfb\u8005\u56f0\u60d1, \u4ee5 0x40 Opcode \u4e3a\u4f8b, \u5b83\u53ef\u8868\u793a\u4e3a LD B, B, \u5176\u4e24\u4e2a\u53c2\u6570\u5747\u662f B, \u5176\u542b\u4e49\u662f\"\u8bfb\u53d6\u5bc4\u5b58\u5668 B \u7684\u503c, \u5e76\u5199\u5165\u5bc4\u5b58\u5668 B\". \u4ece\u7ed3\u679c\u4e0a\u6765\u8bf4, \u5b83\u4e0d\u4f1a\u5f15\u8d77\u4efb\u4f55\u5bc4\u5b58\u5668\u5185\u5bb9\u7684\u53d8\u5316, \u4f46\u8be5\u64cd\u4f5c\u4ecd\u7136\u9700\u8981\u6d88\u8017 CPU \u7684\u65f6\u949f\u5468\u671f. \u5728\u540e\u6587\u4f1a\u6709\u4e13\u95e8\u7ae0\u8282\u5bf9\u6b64\u8fdb\u884c\u4ecb\u7ecd. 4) \u4ee3\u7801\u5b9e\u73b0 \u4ee3\u7801\u5b9e\u73b0\u76f8\u5bf9\u7b80\u5355, \u53ea\u9700\u8981\u8bfb\u53d6\u5bf9\u5e94\u7684 8 \u4f4d\u6570\u636e\u5e76\u5199\u5165\u76ee\u6807\u5bc4\u5b58\u5668\u5373\u53ef. fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x40 => {} 0x41 => self.reg.b = self.reg.c, 0x42 => self.reg.b = self.reg.d, 0x43 => self.reg.b = self.reg.e, 0x44 => self.reg.b = self.reg.h, 0x45 => self.reg.b = self.reg.l, 0x46 => self.reg.b = self.mem.borrow().get(self.reg.get_hl()), 0x47 => self.reg.b = self.reg.a, 0x48 => self.reg.c = self.reg.b, 0x49 => {} 0x4a => self.reg.c = self.reg.d, 0x4b => self.reg.c = self.reg.e, 0x4c => self.reg.c = self.reg.h, 0x4d => self.reg.c = self.reg.l, 0x4e => self.reg.c = self.mem.borrow().get(self.reg.get_hl()), 0x4f => self.reg.c = self.reg.a, 0x50 => self.reg.d = self.reg.b, 0x51 => self.reg.d = self.reg.c, 0x52 => {} 0x53 => self.reg.d = self.reg.e, 0x54 => self.reg.d = self.reg.h, 0x55 => self.reg.d = self.reg.l, 0x56 => self.reg.d = self.mem.borrow().get(self.reg.get_hl()), 0x57 => self.reg.d = self.reg.a, 0x58 => self.reg.e = self.reg.b, 0x59 => self.reg.e = self.reg.c, 0x5a => self.reg.e = self.reg.d, 0x5b => {} 0x5c => self.reg.e = self.reg.h, 0x5d => self.reg.e = self.reg.l, 0x5e => self.reg.e = self.mem.borrow().get(self.reg.get_hl()), 0x5f => self.reg.e = self.reg.a, 0x60 => self.reg.h = self.reg.b, 0x61 => self.reg.h = self.reg.c, 0x62 => self.reg.h = self.reg.d, 0x63 => self.reg.h = self.reg.e, 0x64 => {} 0x65 => self.reg.h = self.reg.l, 0x66 => self.reg.h = self.mem.borrow().get(self.reg.get_hl()), 0x67 => self.reg.h = self.reg.a, 0x68 => self.reg.l = self.reg.b, 0x69 => self.reg.l = self.reg.c, 0x6a => self.reg.l = self.reg.d, 0x6b => self.reg.l = self.reg.e, 0x6c => self.reg.l = self.reg.h, 0x6d => {} 0x6e => self.reg.l = self.mem.borrow().get(self.reg.get_hl()), 0x6f => self.reg.l = self.reg.a, 0x70 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.b), 0x71 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.c), 0x72 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.d), 0x73 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.e), 0x74 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.h), 0x75 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.l), 0x77 => self.mem.borrow_mut().set(self.reg.get_hl(), self.reg.a), 0x78 => self.reg.a = self.reg.b, 0x79 => self.reg.a = self.reg.c, 0x7a => self.reg.a = self.reg.d, 0x7b => self.reg.a = self.reg.e, 0x7c => self.reg.a = self.reg.h, 0x7d => self.reg.a = self.reg.l, 0x7e => self.reg.a = self.mem.borrow().get(self.reg.get_hl()), 0x7f => {}, 0x02 => self.mem.borrow_mut().set(self.reg.get_bc(), self.reg.a), 0x12 => self.mem.borrow_mut().set(self.reg.get_de(), self.reg.a), 0x0a => self.reg.a = self.mem.borrow().get(self.reg.get_bc()), 0x1a => self.reg.a = self.mem.borrow().get(self.reg.get_de()), ... } } LD (C), A 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u7684\u503c\u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 0xff00 | \u5bc4\u5b58\u5668 C \u6307\u5b9a). 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (C), A e2 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xe2 => self.mem.borrow_mut().set(0xff00 | u16::from(self.reg.c), self.reg.a), ... } } LD A, (C) 1) \u63cf\u8ff0 \u5c06\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 0xff00 | \u5bc4\u5b58\u5668 C \u6307\u5b9a)\u7684\u503c\u5199\u5165\u5bc4\u5b58\u5668 A. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD A, (C) f2 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xf2 => self.reg.a = self.mem.borrow().get(0xff00 | u16::from(self.reg.c)), ... } } LD (HL+), A 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 HL \u5bc4\u5b58\u5668\u6307\u5b9a), \u540c\u65f6 HL \u81ea\u589e. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (HL+), A 22 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x22 => { let a = self.reg.get_hl(); self.mem.borrow_mut().set(a, self.reg.a); self.reg.set_hl(a + 1); } ... } } LD (HL-), A 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 HL \u5bc4\u5b58\u5668\u6307\u5b9a), \u540c\u65f6 HL \u81ea\u51cf. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (HL-), A 22 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x32 => { let a = self.reg.get_hl(); self.mem.borrow_mut().set(a, self.reg.a); self.reg.set_hl(a - 1); } ... } } LD A, (HL+) 1) \u63cf\u8ff0 \u5c06\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 HL \u5bc4\u5b58\u5668\u6307\u5b9a)\u7684\u503c\u5199\u5165\u5bc4\u5b58\u5668 A, \u540c\u65f6 HL \u81ea\u589e. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD A, (HL+) 22 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x2a => { let v = self.reg.get_hl(); self.reg.a = self.mem.borrow().get(v); self.reg.set_hl(v + 1); } ... } } LD A, (HL-) 1) \u63cf\u8ff0 \u5c06\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 HL \u5bc4\u5b58\u5668\u6307\u5b9a)\u7684\u503c\u5199\u5165\u5bc4\u5b58\u5668 A, \u540c\u65f6 HL \u81ea\u51cf. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD A, (HL-) 22 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x3a => { let v = self.reg.get_hl(); self.reg.a = self.mem.borrow().get(v); self.reg.set_hl(v - 1); } ... } } LD (d8), A 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u7684\u503c\u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 0xff00 | 8 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a). 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (d8), A e0 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xe0 => { let a = 0xff00 | u16::from(self.imm()); self.mem.borrow_mut().set(a, self.reg.a); } ... } } LD A, (a8) 1) \u63cf\u8ff0 \u5c06\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 0xff00 | 8 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a)\u7684\u503c\u5199\u5165\u5bc4\u5b58\u5668 A. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD A, (d8) f0 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xf0 => { let a = 0xff00 | u16::from(self.imm()); self.reg.a = self.mem.borrow().get(a); } ... } } LD (d16), A 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u7684\u503c\u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 16 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a). 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (a16), A ea 16 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xea => { let a = self.imm_word(); self.mem.borrow_mut().set(a, self.reg.a); } ... } } LD A, (d16) 1) \u63cf\u8ff0 \u5c06\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 16 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a)\u7684\u503c\u5199\u5165\u5bc4\u5b58\u5668 A. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD A, (a16) fa 16 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xfa => { let a = self.imm_word(); self.reg.a = self.mem.borrow().get(a); } ... } }","title":"8 \u4f4d\u6570\u636e\u52a0\u8f7d"},{"location":"content/gameboy/cpu/lr35902_standard/#16","text":"LD r16, d16 1) \u63cf\u8ff0 \u5c06 16 \u4f4d\u7acb\u5373\u53c2\u6570\u5199\u5165\u76f8\u5e94 16 \u4f4d\u5bc4\u5b58\u5668\u4e2d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD BC, d16 01 12 LD DE, d16 11 12 LD HL, d16 21 12 LD SP, d16 31 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x01 | 0x11 | 0x21 | 0x31 => { let v = self.imm_word(); match opcode { 0x01 => self.reg.set_bc(v), 0x11 => self.reg.set_de(v), 0x21 => self.reg.set_hl(v), 0x31 => self.reg.sp = v, _ => {} } } ... } } LD SP, HL 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 HL \u5199\u5165\u5230\u5bc4\u5b58\u5668 SP. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD SP, HL f9 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xf9 => self.reg.sp = self.reg.get_hl(), ... } } LD HL, SP + d8 1) \u63cf\u8ff0 \u5c06 SP \u5bc4\u5b58\u5668 + \u6709\u7b26\u53f7 8 \u4f4d\u7acb\u5373\u53c2\u6570\u7684\u7ed3\u679c\u5199\u5165\u5bc4\u5b58\u5668 HL. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u7f6e\u96f6 N - \u7f6e\u96f6 H - \u7b2c 3 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u7b2c 7 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD SP, d8 f8 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xf8 => { let a = self.reg.sp; let b = i16::from(self.imm() as i8) as u16; self.reg.set_flag(C, (a & 0x00ff) + (b & 0x00ff) > 0x00ff); self.reg.set_flag(H, (a & 0x000f) + (b & 0x000f) > 0x000f); self.reg.set_flag(N, false); self.reg.set_flag(Z, false); self.reg.set_hl(a.wrapping_add(b)); } ... } } LD (d16), SP 1) \u63cf\u8ff0 \u5c06 SP \u5bc4\u5b58\u5668\u7684\u503c\u5199\u5165\u76ee\u6807\u5185\u5b58\u5730\u5740(\u7531 16 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a). 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles LD (d16), SP 0x08 20 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x08 => { let a = self.imm_word(); self.mem.borrow_mut().set_word(a, self.reg.sp); } ... } } PUSH 1) \u63cf\u8ff0 \u6808\u6307\u4ee4. \u5c06\u76f8\u5e94 16 \u4f4d\u5bc4\u5b58\u5668\u7684\u503c\u5165\u6808. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles PUSH BC 0xc5 20 PUSH DE 0xd5 20 PUSH HL 0xe5 20 PUSH AF 0xf5 20 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { fn stack_push(&mut self, v: u16) { self.reg.sp -= 2; self.mem.borrow_mut().set_word(self.reg.sp, v); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc5 => self.stack_add(self.reg.get_bc()), 0xd5 => self.stack_add(self.reg.get_de()), 0xe5 => self.stack_add(self.reg.get_hl()), 0xf5 => self.stack_add(self.reg.get_af()), ... } } POP 1) \u63cf\u8ff0 \u6808\u6307\u4ee4. \u51fa\u6808\u5e76\u5c06\u6570\u636e\u5199\u5165\u76f8\u5e94 16 \u4f4d\u5bc4\u5b58\u5668. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles POP BC 0xc1 20 POP DE 0xd1 20 POP HL 0xe1 20 POP AF 0xf1 20 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { fn stack_pop(&mut self) -> u16 { let r = self.mem.borrow().get_word(self.reg.sp); self.reg.sp += 2; r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc1 | 0xf1 | 0xd1 | 0xe1 => { let v = self.stack_pop(); match opcode { 0xc1 => self.reg.set_bc(v), 0xd1 => self.reg.set_de(v), 0xe1 => self.reg.set_hl(v), 0xf1 => self.reg.set_af(v), _ => {} } } ... } }","title":"16 \u4f4d\u6570\u636e\u52a0\u8f7d"},{"location":"content/gameboy/cpu/lr35902_standard/#8_1","text":"ADD A, r8/d8 1) \u63cf\u8ff0 \u7b97\u672f\u52a0\u6cd5\u8fd0\u7b97. \u5c06\u6307\u5b9a\u7684 8 \u4f4d\u6570\u4e0e\u5bc4\u5b58\u5668 A \u76f8\u52a0, \u5e76\u5c06\u7ed3\u679c\u56de\u5199\u5165\u5bc4\u5b58\u5668 A. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7b2c 3 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u7b2c 7 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles ADD B 0x80 4 ADD C 0x81 4 ADD D 0x82 4 ADD E 0x83 4 ADD H 0x84 4 ADD L 0x85 4 ADD (HL) 0x86 8 ADD A 0x87 4 ADD (d8) 0xc6 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Add n to A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Set if carry from bit 3. // C - Set if carry from bit 7. fn alu_add(&mut self, n: u8) { let a = self.reg.a; let r = a.wrapping_add(n); self.reg.set_flag(C, u16::from(a) + u16::from(n) > 0xff); self.reg.set_flag(H, (a & 0x0f) + (n & 0x0f) > 0x0f); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x80 => self.alu_add(self.reg.b), 0x81 => self.alu_add(self.reg.c), 0x82 => self.alu_add(self.reg.d), 0x83 => self.alu_add(self.reg.e), 0x84 => self.alu_add(self.reg.h), 0x85 => self.alu_add(self.reg.l), 0x86 => { let v = self.mem.borrow().get(self.reg.get_hl()); self.alu_add(v); } 0x87 => self.alu_add(self.reg.a), 0xc6 => { let v = self.imm(); self.alu_add(v); } ... } } ADC A, r8/d8 1) \u63cf\u8ff0 \u5e26\u8fdb\u4f4d\u7684\u7b97\u672f\u52a0\u6cd5\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7b2c 3 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u7b2c 7 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles ADC B 0x88 4 ADC C 0x89 4 ADC D 0x8a 4 ADC E 0x8b 4 ADC H 0x8c 4 ADC L 0x8d 4 ADC (HL) 0x8e 8 ADC A 0x8f 4 ADC (d8) 0xce 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Add n to A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Set if carry from bit 3. // C - Set if carry from bit 7. fn alu_adc(&mut self, n: u8) { let a = self.reg.a; let c = u8::from(self.reg.get_flag(C)); let r = a.wrapping_add(n).wrapping_add(c); self.reg .set_flag(C, u16::from(a) + u16::from(n) + u16::from(c) > 0xff); self.reg .set_flag(H, (a & 0x0f) + (n & 0x0f) + (c & 0x0f) > 0x0f); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x88 => self.alu_adc(self.reg.b), 0x89 => self.alu_adc(self.reg.c), 0x8a => self.alu_adc(self.reg.d), 0x8b => self.alu_adc(self.reg.e), 0x8c => self.alu_adc(self.reg.h), 0x8d => self.alu_adc(self.reg.l), 0x8e => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_adc(a); } 0x8f => self.alu_adc(self.reg.a), 0xce => { let v = self.imm(); self.alu_adc(v); } ... } } SUB A, r8/d8 1) \u63cf\u8ff0 \u7b97\u672f\u51cf\u6cd5\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u4f4d H - \u7b2c 4 \u4f4d\u501f\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u6ca1\u6709\u53d1\u751f\u501f\u4f4d, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SUB B 0x90 4 SUB C 0x91 4 SUB D 0x92 4 SUB E 0x93 4 SUB H 0x94 4 SUB L 0x95 4 SUB (HL) 0x96 8 SUB A 0x97 4 SUB (d8) 0xd6 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Subtract n from A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Set. // H - Set if no borrow from bit 4. // C - Set if no borrow fn alu_sub(&mut self, n: u8) { let a = self.reg.a; let r = a.wrapping_sub(n); self.reg.set_flag(C, u16::from(a) < u16::from(n)); self.reg.set_flag(H, (a & 0x0f) < (n & 0x0f)); self.reg.set_flag(N, true); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x90 => self.alu_sub(self.reg.b), 0x91 => self.alu_sub(self.reg.c), 0x92 => self.alu_sub(self.reg.d), 0x93 => self.alu_sub(self.reg.e), 0x94 => self.alu_sub(self.reg.h), 0x95 => self.alu_sub(self.reg.l), 0x96 => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_sub(a); } 0x97 => self.alu_sub(self.reg.a), 0xd6 => { let v = self.imm(); self.alu_sub(v); } ... } } SBC A, r8/d8 1) \u63cf\u8ff0 \u5e26\u501f\u4f4d\u7684\u7b97\u672f\u51cf\u6cd5\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u4f4d H - \u7b2c 4 \u4f4d\u501f\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u6ca1\u6709\u53d1\u751f\u501f\u4f4d, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SBC B 0x98 4 SBC C 0x99 4 SBC D 0x9a 4 SBC E 0x9b 4 SBC H 0x9c 4 SBC L 0x9d 4 SBC (HL) 0x9e 8 SBC A 0x9f 4 SBC (d8) 0xde 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Subtract n + Carry flag from A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Set. // H - Set if no borrow from bit 4. // C - Set if no borrow. fn alu_sbc(&mut self, n: u8) { let a = self.reg.a; let c = u8::from(self.reg.get_flag(C)); let r = a.wrapping_sub(n).wrapping_sub(c); self.reg .set_flag(C, u16::from(a) < u16::from(n) + u16::from(c)); self.reg.set_flag(H, (a & 0x0f) < (n & 0x0f) + c); self.reg.set_flag(N, true); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x98 => self.alu_sbc(self.reg.b), 0x99 => self.alu_sbc(self.reg.c), 0x9a => self.alu_sbc(self.reg.d), 0x9b => self.alu_sbc(self.reg.e), 0x9c => self.alu_sbc(self.reg.h), 0x9d => self.alu_sbc(self.reg.l), 0x9e => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_sbc(a); } 0x9f => self.alu_sbc(self.reg.a), 0xde => { let v = self.imm(); self.alu_sbc(v); } ... } } AND A, r8/d8 1) \u63cf\u8ff0 \u903b\u8f91\u548c\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u4f4d C - \u7f6e\u96f6 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles AND B 0xa0 4 AND C 0xa1 4 AND D 0xa2 4 AND E 0xa3 4 AND H 0xa4 4 AND L 0xa5 4 AND (HL) 0xa6 8 AND A 0xa7 4 AND (d8) 0xe6 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Logically AND n with A, result in A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Set. // C - Reset fn alu_and(&mut self, n: u8) { let r = self.reg.a & n; self.reg.set_flag(C, false); self.reg.set_flag(H, true); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xa0 => self.alu_and(self.reg.b), 0xa1 => self.alu_and(self.reg.c), 0xa2 => self.alu_and(self.reg.d), 0xa3 => self.alu_and(self.reg.e), 0xa4 => self.alu_and(self.reg.h), 0xa5 => self.alu_and(self.reg.l), 0xa6 => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_and(a); } 0xa7 => self.alu_and(self.reg.a), 0xe6 => { let v = self.imm(); self.alu_and(v); } ... } } OR A, r8/d8 1) \u63cf\u8ff0 \u903b\u8f91\u6216\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u7f6e\u96f6 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles OR B 0xb0 4 OR C 0xb1 4 OR D 0xb2 4 OR E 0xb3 4 OR H 0xb4 4 OR L 0xb5 4 OR (HL) 0xb6 8 OR A 0xb7 4 OR (d8) 0xf6 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Logical OR n with register A, result in A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Reset. fn alu_or(&mut self, n: u8) { let r = self.reg.a | n; self.reg.set_flag(C, false); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xb0 => self.alu_or(self.reg.b), 0xb1 => self.alu_or(self.reg.c), 0xb2 => self.alu_or(self.reg.d), 0xb3 => self.alu_or(self.reg.e), 0xb4 => self.alu_or(self.reg.h), 0xb5 => self.alu_or(self.reg.l), 0xb6 => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_or(a); } 0xb7 => self.alu_or(self.reg.a), 0xf6 => { let v = self.imm(); self.alu_or(v); } ... } } XOR A, r8/d8 1) \u63cf\u8ff0 \u903b\u8f91\u5f02\u6216\u8fd0\u7b97. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u7f6e\u96f6 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles XOR B 0xa8 4 XOR C 0xa9 4 XOR D 0xaa 4 XOR E 0xab 4 XOR H 0xac 4 XOR L 0xad 4 XOR (HL) 0xae 8 XOR A 0xaf 4 XOR (d8) 0xee 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Logical exclusive OR n with register A, result in A. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Reset. fn alu_xor(&mut self, n: u8) { let r = self.reg.a ^ n; self.reg.set_flag(C, false); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xa8 => self.alu_xor(self.reg.b), 0xa9 => self.alu_xor(self.reg.c), 0xaa => self.alu_xor(self.reg.d), 0xab => self.alu_xor(self.reg.e), 0xac => self.alu_xor(self.reg.h), 0xad => self.alu_xor(self.reg.l), 0xae => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_xor(a); } 0xaf => self.alu_xor(self.reg.a), 0xee => { let v = self.imm(); self.alu_xor(v); } ... } } CP A, r8/d8 1) \u63cf\u8ff0 \u5c06\u5bc4\u5b58\u5668 A \u4e0e\u76f8\u5e94 8 \u4f4d\u6570\u636e\u8fdb\u884c\u6bd4\u8f83. \u8be5\u6307\u4ee4\u7c7b\u4f3c\u4e00\u4e2a A - n \u51cf\u6cd5\u6307\u4ee4, \u4f46\u8ba1\u7b97\u7ed3\u679c\u88ab\u4e22\u5f03\u4e86. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u4f4d H - \u7b2c 4 \u4f4d\u501f\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u6ca1\u6709\u53d1\u751f\u501f\u4f4d, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles CP B 0xb8 4 CP C 0xb9 4 CP D 0xba 4 CP E 0xbb 4 CP H 0xbc 4 CP L 0xbd 4 CP (HL) 0xbe 8 CP A 0xbf 4 CP (d8) 0xfe 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Compare A with n. This is basically an A - n subtraction // instruction but the results are thrown away. // n = A,B,C,D,E,H,L,(HL),# // // Flags affected: // Z - Set if result is zero. (Set if A = n.) // N - Set. // H - Set if no borrow from bit 4. // C - Set for no borrow. (Set if A < n.) fn alu_cp(&mut self, n: u8) { let r = self.reg.a; self.alu_sub(n); self.reg.a = r; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xb8 => self.alu_cp(self.reg.b), 0xb9 => self.alu_cp(self.reg.c), 0xba => self.alu_cp(self.reg.d), 0xbb => self.alu_cp(self.reg.e), 0xbc => self.alu_cp(self.reg.h), 0xbd => self.alu_cp(self.reg.l), 0xbe => { let a = self.mem.borrow().get(self.reg.get_hl()); self.alu_cp(a); } 0xbf => self.alu_cp(self.reg.a), 0xfe => { let v = self.imm(); self.alu_cp(v); } ... } } INC r8 1) \u63cf\u8ff0 \u76f8\u5e94 8 \u4f4d\u5bc4\u5b58\u5668\u81ea\u589e. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7b2c 3 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u4fdd\u6301\u4e0d\u53d8 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles INC B 0x04 4 INC C 0x0c 4 INC D 0x14 4 INC E 0x1c 4 INC H 0x24 4 INC L 0x2c 4 INC (HL) 0x34 12 INC A 0x3c 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Increment register n. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Set if carry from bit 3. // C - Not affected. fn alu_inc(&mut self, a: u8) -> u8 { let r = a.wrapping_add(1); self.reg.set_flag(H, (a & 0x0f) + 0x01 > 0x0f); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x04 => self.reg.b = self.alu_inc(self.reg.b), 0x0c => self.reg.c = self.alu_inc(self.reg.c), 0x14 => self.reg.d = self.alu_inc(self.reg.d), 0x1c => self.reg.e = self.alu_inc(self.reg.e), 0x24 => self.reg.h = self.alu_inc(self.reg.h), 0x2c => self.reg.l = self.alu_inc(self.reg.l), 0x34 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_inc(v); self.mem.borrow_mut().set(a, h); } 0x3c => self.reg.a = self.alu_inc(self.reg.a), ... } } DEC r8 1) \u63cf\u8ff0 \u76f8\u5e94 8 \u4f4d\u5bc4\u5b58\u5668\u81ea\u51cf. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u4f4d H - \u7b2c 4 \u4f4d\u501f\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u4fdd\u6301\u4e0d\u53d8 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles DEC B 0x05 4 DEC C 0x0d 4 DEC D 0x15 4 DEC E 0x1d 4 DEC H 0x25 4 DEC L 0x2d 4 DEC (HL) 0x35 12 DEC A 0x3d 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Decrement register n. // n = A,B,C,D,E,H,L,(HL) // // Flags affected: // Z - Set if reselt is zero. // N - Set. // H - Set if no borrow from bit 4. // C - Not affected fn alu_dec(&mut self, a: u8) -> u8 { let r = a.wrapping_sub(1); self.reg.set_flag(H, a.trailing_zeros() >= 4); self.reg.set_flag(N, true); self.reg.set_flag(Z, r == 0); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x05 => self.reg.b = self.alu_dec(self.reg.b), 0x0d => self.reg.c = self.alu_dec(self.reg.c), 0x15 => self.reg.d = self.alu_dec(self.reg.d), 0x1d => self.reg.e = self.alu_dec(self.reg.e), 0x25 => self.reg.h = self.alu_dec(self.reg.h), 0x2d => self.reg.l = self.alu_dec(self.reg.l), 0x35 => { let a = self.reg.get_hl(); let v = self.mem.borrow().get(a); let h = self.alu_dec(v); self.mem.borrow_mut().set(a, h); } 0x3d => self.reg.a = self.alu_dec(self.reg.a), ... } }","title":"8 \u4f4d\u7b97\u6570\u903b\u8f91\u8fd0\u7b97"},{"location":"content/gameboy/cpu/lr35902_standard/#16_1","text":"ADD HL, r16 1) \u63cf\u8ff0 \u7b97\u6570\u52a0\u6cd5\u8fd0\u7b97. \u5c06\u5bc4\u5b58\u5668 HL \u4e0e\u76f8\u5e94 16 \u4f4d\u6570\u636e\u76f8\u52a0, \u5e76\u5c06\u7ed3\u679c\u5199\u5165 HL. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u4fdd\u6301\u4e0d\u53d8 N - \u7f6e\u96f6 H - \u7b2c 11 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u7b2c 15 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles ADD (HL), BC 0x09 8 ADD (HL), DE 0x19 8 ADD (HL), HL 0x29 8 ADD (HL), SP 0x39 8 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Add n to HL // n = BC,DE,HL,SP // // Flags affected: // Z - Not affected. // N - Reset. // H - Set if carry from bit 11. // C - Set if carry from bit 15. fn alu_add_hl(&mut self, n: u16) { let a = self.reg.get_hl(); let r = a.wrapping_add(n); self.reg.set_flag(C, a > 0xffff - n); self.reg.set_flag(H, (a & 0x0fff) + (n & 0x0fff) > 0x0fff); self.reg.set_flag(N, false); self.reg.set_hl(r); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x09 => self.alu_add_hl(self.reg.get_bc()), 0x19 => self.alu_add_hl(self.reg.get_de()), 0x29 => self.alu_add_hl(self.reg.get_hl()), 0x39 => self.alu_add_hl(self.reg.sp), ... } } ADD SP, d8 1) \u63cf\u8ff0 \u7b97\u6570\u52a0\u6cd5\u8fd0\u7b97. \u5c06\u5bc4\u5b58\u5668 SP \u4e0e 8 \u4f4d\u7acb\u5373\u53c2\u6570\u76f8\u52a0, \u5e76\u5c06\u7ed3\u679c\u5199\u5165 SP. \u7acb\u5373\u53c2\u6570\u4ee5\u6709\u7b26\u53f7 8 \u6574\u6570\u8868\u793a. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u7f6e\u96f6 N - \u7f6e\u96f6 H - \u7b2c 4 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d C - \u7b2c 7 \u4f4d\u8fdb\u4f4d\u65f6, \u5219\u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles ADD SP, (d8) 0xe8 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Add n to Stack Pointer (SP). // n = one byte signed immediate value (#). // // Flags affected: // Z - Reset. // N - Reset. // H - Set or reset according to operation. // C - Set or reset according to operation. fn alu_add_sp(&mut self) { let a = self.reg.sp; let b = i16::from(self.imm() as i8) as u16; self.reg.set_flag(C, (a & 0x00ff) + (b & 0x00ff) > 0x00ff); self.reg.set_flag(H, (a & 0x000f) + (b & 0x000f) > 0x000f); self.reg.set_flag(N, false); self.reg.set_flag(Z, false); self.reg.sp = a.wrapping_add(b); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xe8 => self.alu_add_sp(), ... } } INC r16 1) \u63cf\u8ff0 \u76f8\u5e94 16 \u4f4d\u5bc4\u5b58\u5668\u81ea\u589e. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles INC BC 0x03 8 INC DE 0x13 8 INC HL 0x23 8 INC SP 0x33 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x03 => { let v = self.reg.get_bc().wrapping_add(1); self.reg.set_bc(v); } 0x13 => { let v = self.reg.get_de().wrapping_add(1); self.reg.set_de(v); } 0x23 => { let v = self.reg.get_hl().wrapping_add(1); self.reg.set_hl(v); } 0x33 => { let v = self.reg.sp.wrapping_add(1); self.reg.sp = v; } ... } } DEC r16 1) \u63cf\u8ff0 \u76f8\u5e94 16 \u4f4d\u5bc4\u5b58\u5668\u81ea\u51cf. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles DEC BC 0x0b 8 DEC DE 0x1b 8 DEC HL 0x2b 8 DEC SP 0x3b 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x0b => { let v = self.reg.get_bc().wrapping_sub(1); self.reg.set_bc(v); } 0x1b => { let v = self.reg.get_de().wrapping_sub(1); self.reg.set_de(v); } 0x2b => { let v = self.reg.get_hl().wrapping_sub(1); self.reg.set_hl(v); } 0x3b => { let v = self.reg.sp.wrapping_sub(1); self.reg.sp = v; } ... } }","title":"16 \u4f4d\u7b97\u6570\u903b\u8f91\u8fd0\u7b97"},{"location":"content/gameboy/cpu/lr35902_standard/#_3","text":"DAA 1) \u63cf\u8ff0 \u8be5\u6307\u4ee4\u8c03\u6574\u5bc4\u5b58\u5668 A, \u4ee5\u4fbf\u83b7\u5f97\u4e8c\u8fdb\u5236\u7f16\u7801\u5341\u8fdb\u5236(BCD)\u7684\u6b63\u786e\u8868\u793a. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u4fdd\u6301\u4e0d\u53d8 H - \u7f6e\u96f6 C - \u6839\u636e\u64cd\u4f5c\u5224\u65ad 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles DAA - 0x27 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Decimal adjust register A. This instruction adjusts register // A so that the correct representation of Binary // Coded Decimal (BCD) is obtained. // // Flags affected: // Z - Set if register A is zero. // N - Not affected. // H - Reset. // C - Set or reset according to operation fn alu_daa(&mut self) { let mut a = self.reg.a; let mut adjust = if self.reg.get_flag(C) { 0x60 } else { 0x00 }; if self.reg.get_flag(H) { adjust |= 0x06; }; if !self.reg.get_flag(N) { if a & 0x0f > 0x09 { adjust |= 0x06; }; if a > 0x99 { adjust |= 0x60; }; a = a.wrapping_add(adjust); } else { a = a.wrapping_sub(adjust); } self.reg.set_flag(C, adjust >= 0x60); self.reg.set_flag(H, false); self.reg.set_flag(Z, a == 0x00); self.reg.a = a; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x27 => self.alu_daa(), ... } } CPL 1) \u63cf\u8ff0 \u5bf9\u5bc4\u5b58\u5668 A \u53d6\u53cd. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u4fdd\u6301\u4e0d\u53d8 N - \u7f6e\u4f4d H - \u7f6e\u4f4d C - \u4fdd\u6301\u4e0d\u53d8 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles CPL - 0x2f 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Complement A register. (Flip all bits.) // // Flags affected: // Z - Not affected. // N - Set. // H - Set. // C - Not affected. fn alu_cpl(&mut self) { self.reg.a = !self.reg.a; self.reg.set_flag(H, true); self.reg.set_flag(N, true); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x2f => self.alu_cpl(), ... } } CCF 1) \u63cf\u8ff0 \u5bf9\u8fdb\u4f4d\u6807\u5fd7\u4f4d\u53d6\u53cd. \u5982\u679c\u5f53\u524d\u8fdb\u4f4d\u6807\u5fd7\u4f4d\u4e3a 1, \u5219\u7f6e\u96f6\uff1b\u5426\u5219\u7f6e\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u4fdd\u6301\u4e0d\u53d8 N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u53d6\u53cd 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles CCF - 0x3f 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Complement carry flag. If C flag is set, then reset it. // If C flag is reset, then set it. // Flags affected: // // Z - Not affected. // N - Reset. // H - Reset. // C - Complemented. fn alu_ccf(&mut self) { let v = !self.reg.get_flag(C); self.reg.set_flag(C, v); self.reg.set_flag(H, false); self.reg.set_flag(N, false); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x3f => self.alu_ccf(), ... } } SCF 1) \u63cf\u8ff0 \u7f6e\u4f4d\u8fdb\u4f4d\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u4fdd\u6301\u4e0d\u53d8 N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u7f6e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles SCF - 0x37 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Set Carry flag. // // Flags affected: // Z - Not affected. // N - Reset. // H - Reset. // C - Set. fn alu_scf(&mut self) { self.reg.set_flag(C, true); self.reg.set_flag(H, false); self.reg.set_flag(N, false); } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x37 => self.alu_scf(), ... } } NOP 1) \u63cf\u8ff0 \u4e0d\u505a\u64cd\u4f5c. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles NOP - 0x00 20 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x00 => {}, ... } } HALT 1) \u63cf\u8ff0 \u5173\u95ed CPU, \u76f4\u5230\u53d1\u751f\u65b0\u7684\u4e2d\u65ad\u4e8b\u4ef6. \u5728\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u5c3d\u53ef\u80fd\u4f7f\u7528\u5b83\u53ef\u4ee5\u964d\u4f4e\u80fd\u8017. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles HALT - 0x76 4 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x76 => self.halted = true, ... } } STOP 1) \u63cf\u8ff0 \u5728\u6309\u4e0b\u6309\u94ae\u4e4b\u524d\u6682\u505c CPU \u548c LCD \u663e\u793a. \u4eff\u771f\u5668\u5b9e\u73b0\u65f6\u65e0\u9700\u505a\u7279\u6b8a\u5904\u7406. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0. 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles STOP - 0x10 4 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x10 => {}, ... } } DI/EI 1) \u63cf\u8ff0 DI(Disable Interrupt)\u6307\u4ee4\u7981\u7528\u4e2d\u65ad\u4f46\u4e0d\u7acb\u5373\u7981\u7528. \u6267\u884c DI \u540e\u5728\u4e0b\u4e00\u4e2a\u6307\u4ee4\u65f6\u7981\u7528\u4e2d\u65ad. EI(Enable Interrupt)\u6307\u4ee4\u542f\u7528\u4e2d\u65ad, \u8be5\u6307\u4ee4\u58f0\u660e\u542f\u7528\u4e2d\u65ad\u4f46\u4e0d\u80fd\u7acb\u5373\u6267\u884c. \u6267\u884c EI \u540e, \u5728\u4e0b\u4e00\u4e2a\u6307\u4ee4\u65f6\u542f\u7528\u4e2d\u65ad. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles DI - 0xf3 4 EI - 0xfb 4 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xf3 => self.ei = false, 0xfb => self.ei = true, ... } }","title":"\u6742\u9879"},{"location":"content/gameboy/cpu/lr35902_standard/#_4","text":"\u79fb\u4f4d\u64cd\u4f5c\u662f\u4f4d\u64cd\u4f5c\u7684\u4e00\u79cd. \u79fb\u4f4d\u8fd0\u7b97\u53ef\u4ee5\u5728\u4e8c\u8fdb\u5236\u7684\u57fa\u7840\u4e0a\u5bf9\u6570\u5b57\u8fdb\u884c\u5e73\u79fb. \u6309\u7167\u5e73\u79fb\u7684\u65b9\u5411\u548c\u586b\u5145\u6570\u5b57\u7684\u89c4\u5219\u5206\u4e3a\u591a\u79cd: \u5de6\u79fb, \u5e26\u7b26\u53f7\u53f3\u79fb, \u65e0\u7b26\u53f7\u53f3\u79fb, \u5faa\u73af\u5de6\u79fb, \u5faa\u73af\u53f3\u79fb\u7b49. \u5de6\u79fb\u8fd0\u7b97\u662f\u5c06\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u7684\u64cd\u4f5c\u6570\u6309\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570\u5411\u5de6\u79fb\u52a8, \u79fb\u51fa\u4f4d\u88ab\u4e22\u5f03, \u53f3\u8fb9\u79fb\u51fa\u7684\u7a7a\u4f4d\u4e00\u5f8b\u8865 0. \u53f3\u79fb\u8fd0\u7b97\u662f\u5c06\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u7684\u64cd\u4f5c\u6570\u6309\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570\u5411\u53f3\u79fb\u52a8, \u79fb\u51fa\u4f4d\u88ab\u4e22\u5f03, \u5de6\u8fb9\u79fb\u51fa\u7684\u7a7a\u4f4d\u4e00\u5f8b\u8865 0, \u6216\u8005\u8865\u7b26\u53f7\u4f4d, \u8fd9\u7531\u4e0d\u540c\u7684\u673a\u5668\u800c\u5b9a. \u5728\u4f7f\u7528\u8865\u7801\u4f5c\u4e3a\u673a\u5668\u6570\u7684\u673a\u5668\u4e2d, \u6b63\u6570\u7684\u7b26\u53f7\u4f4d\u4e3a 0, \u8d1f\u6570\u7684\u7b26\u53f7\u4f4d\u4e3a 1. RLCA 1) \u63cf\u8ff0 \u6309\u4f4d\u5de6\u79fb\u8fd0\u7b97. \u6700\u9ad8\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u9ad8\u4f4d. 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RLCA - 0x07 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Rotate A left. Old bit 7 to Carry flag. // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 7 data. fn alu_rlc(&mut self, a: u8) -> u8 { let c = (a & 0x80) >> 7 == 0x01; let r = (a << 1) | u8::from(c); self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x07 => { self.reg.a = self.alu_rlc(self.reg.a); self.reg.set_flag(Z, false); } ... } } RLA 1) \u63cf\u8ff0 \u6309\u4f4d\u5de6\u79fb\u8fd0\u7b97. \u6ea2\u51fa\u6807\u5fd7\u4f4d\u8865\u5145\u6700\u4f4e\u4f4d, \u540c\u65f6\u6700\u9ad8\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u9ad8\u4f4d. 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RLA - 0x17 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Rotate A left through Carry flag. // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 7 data. fn alu_rl(&mut self, a: u8) -> u8 { let c = (a & 0x80) >> 7 == 0x01; let r = (a << 1) + u8::from(self.reg.get_flag(C)); self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x17 => { self.reg.a = self.alu_rl(self.reg.a); self.reg.set_flag(Z, false); } ... } } RRCA 1) \u63cf\u8ff0 \u6309\u4f4d\u53f3\u79fb\u8fd0\u7b97. \u6700\u4f4e\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u503c\u7684\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RRCA - 0x0f 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Rotate A right. Old bit 0 to Carry flag. // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 0 data fn alu_rrc(&mut self, a: u8) -> u8 { let c = a & 0x01 == 0x01; let r = if c { 0x80 | (a >> 1) } else { (a >> 1) }; self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x0f => { self.reg.a = self.alu_rrc(self.reg.a); self.reg.set_flag(Z, false); } ... } } RRA 1) \u63cf\u8ff0 \u6309\u4f4d\u53f3\u79fb\u8fd0\u7b97. \u6ea2\u51fa\u6807\u5fd7\u4f4d\u79fb\u52a8\u81f3\u6700\u9ad8\u4f4d, \u540c\u65f6\u6700\u4f4e\u4f4d\u79fb\u52a8\u81f3\u6ea2\u51fa\u6807\u5fd7\u4f4d. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 Z - \u8ba1\u7b97\u7ed3\u679c\u4e3a\u96f6, \u5219\u7f6e\u4f4d N - \u7f6e\u96f6 H - \u7f6e\u96f6 C - \u539f\u59cb\u6570\u636e\u6700\u4f4e\u4f4d 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RRA - 0x1f 4 4) \u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Rotate A right through Carry flag. // // Flags affected: // Z - Set if result is zero. // N - Reset. // H - Reset. // C - Contains old bit 0 data. fn alu_rr(&mut self, a: u8) -> u8 { let c = a & 0x01 == 0x01; let r = if self.reg.get_flag(C) { 0x80 | (a >> 1) } else { a >> 1 }; self.reg.set_flag(C, c); self.reg.set_flag(H, false); self.reg.set_flag(N, false); self.reg.set_flag(Z, r == 0x00); r } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x1f => { self.reg.a = self.alu_rr(self.reg.a); self.reg.set_flag(Z, false); } ... } }","title":"\u5faa\u73af\u548c\u79fb\u4f4d\u64cd\u4f5c"},{"location":"content/gameboy/cpu/lr35902_standard/#_5","text":"\u5728\u6b63\u5f0f\u4ecb\u7ecd LR35902 \u7684\u5206\u652f/\u8df3\u8f6c\u6307\u4ee4\u524d, \u5148\u5bf9\u8be5\u5904\u7406\u5668\u7684\u5206\u652f\u6307\u4ee4\u7c7b\u578b\u8fdb\u884c\u7b80\u5355\u7684\u4ecb\u7ecd. \u5bf9\u4e8e\u7edd\u5927\u90e8\u5206\u5904\u7406\u5668\u6765\u8bf4, \u5206\u652f\u6307\u4ee4\u5e38\u5e38\u88ab\u5206\u7c7b\u4e3a\u5982\u4e0b\u4e24\u7c7b: \u65e0\u6761\u4ef6\u5206\u652f\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u6307\u4ee4\u662f\u6307\u65e0\u9700\u5224\u65ad\u6761\u4ef6\u4e00\u5b9a\u4f1a\u53d1\u751f\u7684\u8df3\u8f6c\u6307\u4ee4. \u800c\u6309\u7167\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u8ba1\u7b97\u65b9\u5f0f, \u8fd8\u53ef\u4ee5\u88ab\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5: \u2013 \u65e0\u6761\u4ef6\u76f4\u63a5\u5730\u5740\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u8df3\u8f6c\u76ee\u6807\u5730\u5740\u662f\u76f4\u63a5\u4ece\u6307\u4ee4\u7f16\u7801\u7684\u7acb\u5373\u53c2\u6570\u4e2d\u83b7\u5f97\u7684. \u2013 \u65e0\u6761\u4ef6\u95f4\u63a5\u5730\u5740\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u8df3\u8f6c\u76ee\u6807\u5730\u5740\u4ece\u5bc4\u5b58\u5668\u4e2d\u53d6\u5f97(\u6216\u6dfb\u52a0\u4e00\u5b9a\u91cf\u7684\u8ba1\u7b97). \u6709\u6761\u4ef6\u5206\u652f\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u6307\u4ee4\u662f\u6307\u5728\u8df3\u8f6c\u524d\u9700\u8981\u5224\u65ad\u6761\u4ef6\u662f\u5426\u6210\u7acb\u800c\u51b3\u5b9a\u662f\u5426\u53d1\u751f\u8df3\u8f6c\u7684\u6307\u4ee4. \u540c\u6837\u6309\u7167\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u8ba1\u7b97\u65b9\u5f0f, \u8fd8\u53ef\u4ee5\u88ab\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5: \u2013 \u5e26\u6761\u4ef6\u76f4\u63a5\u5730\u5740\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u8df3\u8f6c\u76ee\u6807\u5730\u5740\u662f\u76f4\u63a5\u4ece\u6307\u4ee4\u7f16\u7801\u7684\u7acb\u5373\u53c2\u6570\u4e2d\u83b7\u5f97\u7684. \u2013 \u5e26\u6761\u4ef6\u95f4\u63a5\u5730\u5740\u8df3\u8f6c. \u8be5\u7c7b\u578b\u7684\u8df3\u8f6c\u76ee\u6807\u5730\u5740\u4ece\u5bc4\u5b58\u5668\u4e2d\u53d6\u5f97(\u6216\u6dfb\u52a0\u4e00\u5b9a\u91cf\u7684\u8ba1\u7b97). \u5bf9\u4e8e\u5e26\u6761\u4ef6\u5206\u652f/\u8df3\u8f6c\u6307\u4ee4\u800c\u8a00, \u662f\u5426\u53d1\u751f\u8df3\u8f6c, \u5904\u7406\u5668\u5c06\u6d88\u8017\u4e0d\u540c\u7684\u65f6\u949f\u5468\u671f. \u7406\u8bba\u4e0a\u53ea\u6709\u5728\u6267\u884c\u9636\u6bb5\u5b8c\u6210\u540e, \u624d\u80fd\u591f\u786e\u5207\u7684\u89e3\u6790\u51fa\u8be5\u6307\u4ee4\u6d88\u8017\u7684\u65f6\u949f\u5468\u671f\u548c\u76ee\u6807\u8df3\u8f6c\u5730\u5740, \u5728\u4eff\u771f\u5668\u7684\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u9700\u8981\u7279\u522b\u6ce8\u610f. \u5bf9\u4e8e\u73b0\u5b9e\u4e16\u754c\u7684\u5904\u7406\u5668\u800c\u8a00, \u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd, \u5728\u53d6\u6307\u65f6\u4f1a\u4f7f\u7528\u5206\u652f\u9884\u6d4b(Branch Prediction)\u6280\u672f. \u8be5\u6280\u672f\u9884\u6d4b\u5206\u652f\u6307\u4ee4\u662f\u5426\u9700\u8981\u8df3\u8f6c\u4ee5\u53ca\u8df3\u8f6c\u5730\u5740\u662f\u4ec0\u4e48, \u4e5f\u5c31\u662f\u8df3\u8f6c\u7684\"\u65b9\u5411\"\u548c\"\u5730\u5740\". \u53d6\u6307\u65f6\u5bf9\u6307\u4ee4\u8fdb\u884c\u9884\u6d4b\u7684\u65b9\u5f0f\u88ab\u79f0\u4e3a\u9884\u6d4b\u53d6\u6307(Speculative Fetch), \u5bf9\u9884\u53d6\u7684\u6307\u4ee4\u8fdb\u884c\u6267\u884c\u4e5f\u88ab\u79f0\u4e3a\u9884\u6d4b\u6267\u884c(Speculative Exectution). \u73b0\u4ee3\u5904\u7406\u5668\u5df2\u7ecf\u53ef\u4ee5\u975e\u5e38\u9ad8\u6548\u7684\u5bf9\u5206\u652f\u8fdb\u884c\u9884\u6d4b, \u9884\u6d4b\u6b63\u786e\u7387\u4e00\u822c\u5728 90% \u5230 99%. JUMP 1)\u63cf\u8ff0 \u8df3\u8f6c\u5230\u6307\u5b9a\u7684\u5730\u5740. \u5730\u5740\u7531 16 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a. 2)\u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3)\u6307\u4ee4 Instruction Parameters Opcode Cycles JUMP (d16) 0xc3 12 4)\u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc3 => self.reg.pc = self.imm_word(), 0xe9 => self.reg.pc = self.reg.get_hl(), ... } } JUMP IF 1)\u63cf\u8ff0 \u5e26\u6761\u4ef6\u7684 JUMP \u6307\u4ee4. \u6761\u4ef6\u7531\u4e0b\u8868\u6307\u5b9a. 2)\u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3)\u6307\u4ee4 Instruction Parameters Opcode Cycles JUMP IF Z == 0 (d16) 0xc2 12 JUMP IF z != 0 (d16) 0xca 12 JUMP IF c == 0 (d16) 0xd2 12 JUMP IF c != 0 (d16) 0xda 12 4)\u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc2 | 0xca | 0xd2 | 0xda => { let pc = self.imm_word(); let cond = match opcode { 0xc2 => !self.reg.get_flag(Z), 0xca => self.reg.get_flag(Z), 0xd2 => !self.reg.get_flag(C), 0xda => self.reg.get_flag(C), _ => panic!(\"\"), }; if cond { self.reg.pc = pc; } } ... } } JR 1) \u63cf\u8ff0 \u8bfb\u53d6\u4e00\u4e2a 8 \u4f4d\u6709\u7b26\u53f7\u7acb\u5373\u53c2\u6570 n, \u5e76\u8df3\u8f6c\u5230 pc + n \u4f4d\u7f6e. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles JR (d8) 0x18 8 4)\u4ee3\u7801\u5b9e\u73b0 impl Cpu { // Add n to current address and jump to it. // n = one byte signed immediate value fn alu_jr(&mut self, n: u8) { let n = n as i8; self.reg.pc = ((u32::from(self.reg.pc) as i32) + i32::from(n)) as u16; } } fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x18 => { let n = self.imm(); self.alu_jr(n); } ... } } JR IF 1) \u63cf\u8ff0 \u5e26\u6761\u4ef6\u7684 JR \u6307\u4ee4. \u6761\u4ef6\u7531\u4e0b\u8868\u6307\u5b9a. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles JR IF z == 0 - 0x20 8 JR IF z == 1 - 0x28 8 JR IF c == 0 - 0x30 8 JR IF c == 1 - 0x38 8 4)\u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0x20 | 0x28 | 0x30 | 0x38 => { let cond = match opcode { 0x20 => !self.reg.get_flag(Z), 0x28 => self.reg.get_flag(Z), 0x30 => !self.reg.get_flag(C), 0x38 => self.reg.get_flag(C), _ => panic!(\"\"), }; let n = self.imm(); if cond { self.alu_jr(n); } } ... } }","title":"\u5206\u652f\u8df3\u8f6c"},{"location":"content/gameboy/cpu/lr35902_standard/#_6","text":"\u8c03\u7528\u547d\u4ee4\u901a\u5e38\u6cdb\u6307 CALL \u7c7b\u578b\u7684\u6307\u4ee4. \u5b83\u4eec\u7528\u4e8e\u5904\u7406\u4e3b\u7a0b\u5e8f\u4e0e\u5b50\u7a0b\u5e8f\u4e4b\u95f4\u7684\u8c03\u7528\u5173\u7cfb. \u7ecf\u5178\u7684\u4e3b\u7a0b\u5e8f/\u5b50\u7a0b\u5e8f\u5207\u6362\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a. \u5b50\u7a0b\u5e8f\u662f\u7528\u4e8e\u5b8c\u6210\u7279\u5b9a\u529f\u80fd\u7684\u4e00\u6bb5\u7a0b\u5e8f. \u5f53\u4e3b\u7a0b\u5e8f(\u8c03\u7528\u7a0b\u5e8f)\u9700\u8981\u6267\u884c\u8fd9\u4e2a\u529f\u80fd\u65f6, \u91c7\u7528 CALL \u8c03\u7528\u6307\u4ee4\u8f6c\u79fb\u5230\u8be5\u5b50\u7a0b\u5e8f\u7684\u8d77\u59cb\u5904\u6267\u884c. \u5f53\u8fd0\u884c\u5b8c\u5b50\u7a0b\u5e8f\u529f\u80fd\u540e, \u91c7\u7528 RET \u8fd4\u56de\u6307\u4ee4\u56de\u5230\u4e3b\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c. CALL 1) \u63cf\u8ff0 \u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u538b\u5165\u5806\u6808, \u5e76\u8df3\u8f6c\u5230\u76f8\u5e94\u5730\u5740(\u7531 16 \u4f4d\u7acb\u5373\u53c2\u6570\u6307\u5b9a). \u7c7b\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u8c03\u7528. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles CALL - 0xcd 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xcd => { let nn = self.imm_word(); self.stack_add(self.reg.pc); self.reg.pc = nn; } ... } } CALL IF 1) \u63cf\u8ff0 \u5e26\u6761\u4ef6\u7684 CALL \u6307\u4ee4. \u6761\u4ef6\u7531\u4e0b\u8868\u6307\u5b9a. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles CALL IF z == 0 - 0xc4 12 CALL IF z == 1 - 0xcc 12 CALL IF c == 0 - 0xd4 12 CALL IF c == 1 - 0xdc 12 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc4 | 0xcc | 0xd4 | 0xdc => { let cond = match opcode { 0xc4 => !self.reg.get_flag(Z), 0xcc => self.reg.get_flag(Z), 0xd4 => !self.reg.get_flag(C), 0xdc => self.reg.get_flag(C), _ => panic!(\"\"), }; let nn = self.imm_word(); if cond { self.stack_add(self.reg.pc); self.reg.pc = nn; } } ... } }","title":"\u8c03\u7528"},{"location":"content/gameboy/cpu/lr35902_standard/#_7","text":"RST 1) \u63cf\u8ff0 \u5c06\u5f53\u524d\u5730\u5740\u63a8\u9001\u5230\u5806\u6808, \u5e76\u8df3\u8f6c\u5230\u67d0\u4e2a\u56fa\u5b9a\u5730\u5740. \u5730\u5740\u89c1\u4e0b\u8868. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RST 0x00 0xc7 32 RST 0x08 0xcf 32 RST 0x10 0xd7 32 RST 0x18 0xdf 32 RST 0x20 0xe7 32 RST 0x28 0xef 32 RST 0x30 0xf7 32 RST 0x38 0xcf 32 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc7 => { self.stack_add(self.reg.pc); self.reg.pc = 0x00; } 0xcf => { self.stack_add(self.reg.pc); self.reg.pc = 0x08; } 0xd7 => { self.stack_add(self.reg.pc); self.reg.pc = 0x10; } 0xdf => { self.stack_add(self.reg.pc); self.reg.pc = 0x18; } 0xe7 => { self.stack_add(self.reg.pc); self.reg.pc = 0x20; } 0xef => { self.stack_add(self.reg.pc); self.reg.pc = 0x28; } 0xf7 => { self.stack_add(self.reg.pc); self.reg.pc = 0x30; } 0xff => { self.stack_add(self.reg.pc); self.reg.pc = 0x38; } ... } }","title":"\u590d\u4f4d"},{"location":"content/gameboy/cpu/lr35902_standard/#_8","text":"RET 1) \u63cf\u8ff0 \u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a 16 \u4f4d\u5730\u5740, \u5e76\u8df3\u8f6c\u5230\u8be5\u5730\u5740. \u5b83\u7c7b\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684 Return \u8bed\u53e5. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RET - 0xc9 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc9 => self.reg.pc = self.stack_pop(), ... } } RET IF 1) \u63cf\u8ff0 \u5e26\u6761\u4ef6\u7684 RET \u6307\u4ee4. \u6761\u4ef6\u7531\u4e0b\u8868\u6307\u5b9a. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RET IF z == 0 - 0xc0 8 RET IF z == 1 - 0xc8 8 RET IF c == 0 - 0xd0 8 RET IF c == 1 - 0xd8 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xc0 | 0xc8 | 0xd0 | 0xd8 => { let cond = match opcode { 0xc0 => !self.reg.get_flag(Z), 0xc8 => self.reg.get_flag(Z), 0xd0 => !self.reg.get_flag(C), 0xd8 => self.reg.get_flag(C), _ => panic!(\"\"), }; if cond { self.reg.pc = self.stack_pop(); } } ... } } RETI 1) \u63cf\u8ff0 \u6267\u884c RET \u6307\u4ee4\u5e76\u542f\u7528\u4e2d\u65ad. 2) \u6807\u5fd7\u4f4d\u53d8\u5316 \u65e0 3) \u6307\u4ee4 Instruction Parameters Opcode Cycles RETI _ 0xd9 8 4) \u4ee3\u7801\u5b9e\u73b0 fn ex(&mut self) -> u32 { let opcode = self.imm(); match opcode { 0xd9 => { self.reg.pc = self.stack_pop(); self.ei = true; } ... } }","title":"\u8fd4\u56de"},{"location":"content/gameboy/cpu/mmu/","text":"\u5185\u5b58\u7ba1\u7406\u5355\u5143 \u5185\u5b58\u7ba1\u7406\u5355\u5143(Memory Management Unit, MMU), \u6709\u65f6\u79f0\u4f5c\u5206\u9875\u5185\u5b58\u7ba1\u7406\u5355\u5143(Paged Memory Management Unit, PMMU). \u5b83\u662f\u4e00\u79cd\u8d1f\u8d23\u5904\u7406\u4e2d\u592e\u5904\u7406\u5668\u7684\u5185\u5b58\u8bbf\u95ee\u8bf7\u6c42\u7684\u8ba1\u7b97\u673a\u786c\u4ef6. \u5728 Game Boy \u4e2d, \u5b83\u7684\u529f\u80fd\u4e3b\u8981\u662f\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u8f6c\u6362, \u5373\u865a\u62df\u5185\u5b58\u7ba1\u7406. Game Boy \u4f9b\u7ed9 CPU \u6240\u4f7f\u7528\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8fde\u7eed\u7ebf\u6027\u533a\u57df. Game Boy \u901a\u8fc7\u5185\u5b58\u7ba1\u7406\u5355\u5143\u7684\u63a7\u5236, \u5c06\u4e0d\u540c\u7684\u5916\u90e8\u8f6f\u786c\u4ef6\u7684\u5b58\u50a8\u7a7a\u95f4\u62fc\u63a5\u4e3a\u4e00\u5757\u8fde\u7eed\u7684\u5927\u5c0f\u4e3a 65536 \u7684\u533a\u57df. \u56e0\u6b64\u5f53 CPU \u8bd5\u56fe\u8bbf\u95ee\u67d0\u4e2a\u5730\u5740\u7684\u5185\u5b58\u6570\u636e\u65f6, \u5b9e\u9645\u8bbf\u95ee\u5230\u7684\u53ef\u80fd\u662f\u67d0\u4e2a\u5916\u90e8\u786c\u4ef6\u7684\u5b58\u50a8\u7a7a\u95f4, \u6bd4\u5982\u6e38\u620f\u5361\u5e26\u4e2d\u5b58\u50a8\u7684\u6570\u636e. CPU \u53ef\u8bbf\u95ee\u7684\u6240\u6709\u533a\u57df\u4e0e\u5916\u90e8\u8f6f\u786c\u4ef6\u7684\u6620\u5c04\u5173\u7cfb\u5982\u4e0b\uff1a \u5730\u5740 \u8bf4\u660e \u5907\u6ce8 0xffff Interrupt Enable Flag \u4e2d\u65ad\u6807\u5fd7 0xff80-0xfffe Zero Page - 127 bytes \u5185\u5b58 HRAM 0xff00-0xff7f Hardware I/O Registers \u786c\u4ef6 IO 0xfea0-0xfeff Unusable Memory \u672a\u4f7f\u7528 0xfe00-0xfe9f OAM - Object Attribute Memory GPU 0xe000-0xfdff Echo RAM - Reserved, Do Not Use WRAM 0xd000-0xdfff Internal RAM - Bank 1-7 (switchable - CGB only) \u5185\u5b58 WRAM 0xc000-0xcfff Internal RAM - Bank 0 (fixed) \u5185\u5b58 WRAM 0xa000-0xbfff Cartridge RAM (If Available) \u5361\u5e26 0x9c00-0x9fff BG Map Data 2 GPU 0x9800-0x9bff BG Map Data 1 GPU 0x8000-0x97ff Character RAM GPU 0x4000-0x7fff Cartridge ROM - Switchable Banks 1-xx \u5361\u5e26 0x0150-0x3fff Cartridge ROM - Bank 0 (fixed) \u5361\u5e26 0x0100-0x014f Cartridge Header Area \u5361\u5e26 0x0000-0x00ff Restart and Interrupt Vectors \u91cd\u542f\u548c\u4e2d\u65ad\u5411\u91cf \u53ef\u770b\u5230\u6574\u4e2a\u53ef\u7d22\u5f15\u5185\u5b58\u533a\u57df\u88ab\u4e0d\u540c\u7684\u8f6f\u786c\u4ef6\u5206\u5272, \u8fd9\u91cc\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e00\u70b9\u7684\u662f 0xff00-0xff7f \u533a\u57df, \u8be5\u90e8\u5206\u5185\u5b58\u901a\u5e38\u7528\u4e8e\u5904\u7406\u786c\u4ef6\u7684 IO, \u5e38\u89c1\u7684\u6bd4\u5982\u6e38\u620f\u63a7\u5236\u5668\u7684\u8f93\u5165, \u97f3\u91cf\u8c03\u8282\u6309\u94ae, \u5c4f\u5e55\u4eae\u5ea6\u8c03\u8282\u6309\u94ae\u7b49\u5916\u90e8\u8f93\u5165. CPU \u901a\u8fc7\u786c\u4ef6\u4e2d\u65ad\u6765\u5904\u7406\u8fd9\u4e9b\u5916\u90e8\u8f93\u5165\u5e76\u7ed9\u51fa\u53cd\u9988, \u56e0\u6b64\u624d\u4f7f\u5f97\u8ba1\u7b97\u673a\u8868\u73b0\u51fa\u53ef\u4ea4\u4e92\u6027. \u5185\u5b58\u7ba1\u7406\u5355\u5143\u7684\u4ee3\u7801\u5b9e\u73b0\u8f83\u4e3a\u7b80\u5355, \u6b64\u5904\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u5927\u81f4\u6846\u67b6, \u4f46\u7531\u4e8e\u6b64\u65f6\u9664 CPU \u4e0e\u5361\u5e26\u6a21\u5757\u5916\u5e76\u6ca1\u6709\u5b9e\u73b0\u5176\u4f59\u529f\u80fd\u6a21\u5757, \u56e0\u6b64\u4ee3\u7801\u4e2d\u5728\u6d89\u53ca\u8fd9\u4e9b\u672a\u5b9e\u73b0\u7684\u6a21\u5757\u65f6\u4f1a\u9884\u7559\u7a7a\u4f4d. \u4e00\u4f46\u8fd9\u4e9b\u6a21\u5757\u88ab\u5b9e\u73b0\u5c31\u53ef\u4ee5\u7acb\u5373\u52a0\u5165\u8fd9\u4e2a\u6846\u67b6. pub struct Mmunit { pub cartridge: Box<Cartridge>, // \u5361\u5e26 pub apu: Option<Apu>, // \u97f3\u9891 APU pub gpu: Gpu, // \u89c6\u9891 GPU pub joypad: Joypad, // \u63a7\u5236\u5668 pub serial: Serial, // \u4e32\u884c\u901a\u884c, \u8d1f\u8d23\u4e0e\u5176\u4ed6 Game Boy \u4ea4\u6362\u6570\u636e pub shift: bool, // \u4e0e speed \u4e00\u8d77\u5904\u7406\u8fd0\u884c\u901f\u5ea6(\u5355/\u53cc\u500d\u901f) pub speed: Speed, // \u4e0e shift \u4e00\u8d77\u5904\u7406\u8fd0\u884c\u901f\u5ea6(\u5355/\u53cc\u500d\u901f) pub term: Term, // \u6e38\u620f\u673a\u578b\u53f7 pub timer: Timer, // \u5b9a\u65f6\u5668 inte: u8, // \u4e0e intf \u4e00\u8d77\u5904\u7406\u4e2d\u65ad intf: Rc<RefCell<Intf>>, // \u4e0e inte \u4e00\u8d77\u5904\u7406\u4e2d\u65ad hdma: Hdma, // \u89c6\u9891 GPU \u7684\u4e00\u90e8\u5206 hram: [u8; 0x7f], // \u89c6\u9891 GPU \u7684\u4e00\u90e8\u5206 wram: [u8; 0x8000], // \u4e0e wram_bank \u4e00\u8d77\u7ba1\u7406\u5185\u90e8\u5185\u5b58 wram_bank: usize, // \u4e0e wram \u4e00\u8d77\u7ba1\u7406\u5185\u90e8\u5185\u5b58 } \u540c\u65f6\u5185\u5b58\u7ba1\u7406\u5355\u5143\u7edf\u4e00\u5bf9\u5916\u63d0\u4f9b 0x0000-0xffff \u8303\u56f4\u7684\u5185\u5b58\u8bfb\u5199. \u73b0\u5728\u53ef\u6682\u65f6\u5ffd\u7565\u6bcf\u4e2a\u5185\u5b58\u533a\u95f4\u7684\u8bfb\u5199\u903b\u8f91, \u800c\u53ea\u9700\u8981\u5173\u5fc3\u5185\u5b58\u8303\u56f4\u5730\u5740\u6240\u5bf9\u5e94\u7684\u8f6f\u786c\u4ef6\u6a21\u5757\u5373\u53ef. \u7531\u4e8e Cartridge \u6a21\u5757\u73b0\u5df2\u5b9e\u73b0, \u56e0\u6b64 Cartridge \u53ef\u4ee5\u5d4c\u5165\u5230 MMU \u5185\u4e86. impl Memory for Mmunit { fn get(&self, a: u16) -> u8 { match a { 0x0000...0x7fff => self.cartridge.get(a), // Cartridge 0x8000...0x9fff => unimplement!(), // GPU 0xa000...0xbfff => self.cartridge.get(a), // Cartridge 0xc000...0xcfff => unimplement!(), // WRAM 0xd000...0xdfff => unimplement!(), // WRAM 0xe000...0xefff => unimplement!(), // WRAM 0xf000...0xfdff => unimplement!(), // WRAM 0xfe00...0xfe9f => unimplement!(), // GPU 0xfea0...0xfeff => unimplement!(), // Unused 0xff00 => unimplement!(), // Joypad 0xff01...0xff02 => unimplement!(), // Serial 0xff04...0xff07 => unimplement!(), // Timer 0xff0f => unimplement!(), // Interrupt 0xff10...0xff3f => unimplement!(), // APU 0xff4d => unimplement!(), // Speed 0xff40...0xff45 | 0xff47...0xff4b | 0xff4f => unimplement!(), // GPU 0xff51...0xff55 => unimplement!(), // HDMA 0xff68...0xff6b => unimplement!(), // GPU 0xff70 => unimplement!(), // WRAM 0xff80...0xfffe => unimplement!(), // HRAM 0xffff => unimplement!(), // Interrupe _ => 0x00, } } fn set(&mut self, a: u16, v: u8) { match a { 0x0000...0x7fff => self.cartridge.set(a, v), // Cartridge 0x8000...0x9fff => unimplement!(), // GPU 0xa000...0xbfff => self.cartridge.set(a, v), // Cartridge 0xc000...0xcfff => unimplement!(), // WRAM 0xd000...0xdfff => unimplement!(), // WRAM 0xe000...0xefff => unimplement!(), // WRAM 0xf000...0xfdff => unimplement!(), // WRAM 0xfe00...0xfe9f => unimplement!(), // GPU 0xfea0...0xfeff => unimplement!(), // Unused 0xff00 => unimplement!(), // Joypad 0xff01...0xff02 => unimplement!(), // Serial 0xff04...0xff07 => unimplement!(), // Timer 0xff0f => unimplement!(), // Interrupt 0xff10...0xff3f => unimplement!(), // APU 0xff4d => unimplement!(), // Speed 0xff40...0xff45 | 0xff47...0xff4b | 0xff4f => unimplement!(), // GPU 0xff51...0xff55 => unimplement!(), // HDMA 0xff68...0xff6b => unimplement!(), // GPU 0xff70 => unimplement!(), // WRAM 0xff80...0xfffe => unimplement!(), // HRAM 0xffff => unimplement!(), // Interrupe _ => 0x00, } } } \u8fd8\u8bb0\u5f97 CPU \u7684 power_up \u51fd\u6570\u5417\uff1f\u5728\u521d\u59cb\u5316 CPU \u65f6, \u9700\u8981\u5c06 MMU \u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u5165\u5373\u53ef\u5b8c\u6210\u5bf9 CPU \u7684\u521d\u59cb\u5316. \u8fd9\u6837, CPU \u6240\u8bbf\u95ee\u7684\u7cfb\u7edf\u5185\u5b58\u5b9e\u8d28\u4e0a\u5c31\u5206\u5e03\u5728\u5361\u5e26\u3001GPU\u3001\u6e38\u620f\u624b\u67c4\u7b49\u591a\u4e2a\u8bbe\u5907\u4e0a\u4e86. impl Cpu { pub fn power_up(term: Term, mem: Rc<RefCell<dyn Memory>>) -> Self { ... } } \u4e3b\u677f CPU, \u786c\u76d8, \u7f51\u5361, \u5916\u8bbe, \u65e0\u8bba\u662f\u4ec0\u4e48\u786c\u4ef6\u8bbe\u5907, \u90fd\u8981\u63d2\u5728\u8ba1\u7b97\u673a\u4e3b\u677f\u4e0a, \u53ef\u89c1\u4e3b\u677f\u5bf9\u8ba1\u7b97\u673a\u7cfb\u7edf\u6765\u8bf4\u662f\u591a\u4e48\u91cd\u8981. \u901a\u5e38\u800c\u8a00, \u4e3b\u677f\u7684\u5347\u7ea7\u6362\u4ee3\u662f\u8ddf\u7740 CPU \u7684\u5347\u7ea7\u6362\u4ee3\u800c\u6765\u7684, \u7531\u4e8e\u4e3b\u677f\u4e0a\u7684\u82af\u7247\u7ec4\u9700\u8981\u914d\u5408 CPU \u8fdb\u884c\u534f\u540c\u5de5\u4f5c, \u540c\u65f6\u53c8\u8981\u914d\u5408\u8bb8\u591a\u65b0\u6280\u672f, \u65b0\u6280\u80fd\u548c\u65b0\u5916\u8bbe, \u56e0\u6b64\u4ece\u67d0\u4e00\u65b9\u9762\u6765\u8bf4, \u4e3b\u677f\u7684\u53d1\u5c55\u53ef\u4ee5\u4ee3\u8868\u8ba1\u7b97\u673a\u7684\u53d1\u5c55. \u4e3b\u677f\u4e0e CPU \u6709\u663e\u8457\u7684\u4e0d\u540c, \u6bcf\u4e00\u4ee3 CPU \u7684\u8fdb\u5316\u90fd\u6709\u8ff9\u53ef\u5faa, \u5176\u7ee7\u627f\u81ea\u8c01, \u4f18\u5316\u4e86\u4ec0\u4e48\u5730\u65b9\u7b49, \u4f46\u6bcf\u4e00\u4ee3\u4e3b\u677f\u90fd\u51e0\u4e4e\u662f\u91cd\u65b0\u8bbe\u8ba1\u7684. Game Boy \u7684\u4e3b\u677f\u7ed3\u6784\u7ecf\u8fc7\u7b80\u5316, \u53ef\u4ee5\u7528\u4e0b\u793a\u7684\u7ed3\u6784\u56fe\u6765\u8868\u793a\uff1a \u7531\u4e8e MMU \u7ba1\u7406\u7740\u5168\u90e8\u7684\u5916\u90e8\u786c\u4ef6, \u4e14 CPU \u53ea\u4e0e MMU \u8fdb\u884c\u901a\u4fe1, \u56e0\u6b64\u76ee\u524d\u6765\u8bb2, \u4e3b\u677f\u7684\u4ee3\u7801\u5b9e\u73b0\u4e0a\u53ea\u6709\u4e24\u4e2a\u6210\u5458. \u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d, \u4f1a\u6162\u6162\u518d\u4e3a\u4e3b\u677f\u8865\u5145\u989d\u5916\u7684\u4ee3\u7801. use super::cpu::Rtc; use super::mmunit::Mmunit; use std::cell::RefCell; use std::path::Path; use std::rc::Rc; pub struct MotherBoard { pub mmu: Rc<RefCell<Mmunit>>, pub cpu: Rtc, } impl MotherBoard { pub fn power_up(path: impl AsRef<Path>) -> Self { let mmu = Rc::new(RefCell::new(Mmunit::power_up(path))); let cpu = Rtc::power_up(mmu.borrow().term, mmu.clone()); Self { mmu, cpu } } }","title":"GB-CPU-\u5185\u5b58\u7ba1\u7406\u5355\u5143\u4e0e\u4e3b\u677f"},{"location":"content/gameboy/cpu/mmu/#_1","text":"\u5185\u5b58\u7ba1\u7406\u5355\u5143(Memory Management Unit, MMU), \u6709\u65f6\u79f0\u4f5c\u5206\u9875\u5185\u5b58\u7ba1\u7406\u5355\u5143(Paged Memory Management Unit, PMMU). \u5b83\u662f\u4e00\u79cd\u8d1f\u8d23\u5904\u7406\u4e2d\u592e\u5904\u7406\u5668\u7684\u5185\u5b58\u8bbf\u95ee\u8bf7\u6c42\u7684\u8ba1\u7b97\u673a\u786c\u4ef6. \u5728 Game Boy \u4e2d, \u5b83\u7684\u529f\u80fd\u4e3b\u8981\u662f\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u8f6c\u6362, \u5373\u865a\u62df\u5185\u5b58\u7ba1\u7406. Game Boy \u4f9b\u7ed9 CPU \u6240\u4f7f\u7528\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8fde\u7eed\u7ebf\u6027\u533a\u57df. Game Boy \u901a\u8fc7\u5185\u5b58\u7ba1\u7406\u5355\u5143\u7684\u63a7\u5236, \u5c06\u4e0d\u540c\u7684\u5916\u90e8\u8f6f\u786c\u4ef6\u7684\u5b58\u50a8\u7a7a\u95f4\u62fc\u63a5\u4e3a\u4e00\u5757\u8fde\u7eed\u7684\u5927\u5c0f\u4e3a 65536 \u7684\u533a\u57df. \u56e0\u6b64\u5f53 CPU \u8bd5\u56fe\u8bbf\u95ee\u67d0\u4e2a\u5730\u5740\u7684\u5185\u5b58\u6570\u636e\u65f6, \u5b9e\u9645\u8bbf\u95ee\u5230\u7684\u53ef\u80fd\u662f\u67d0\u4e2a\u5916\u90e8\u786c\u4ef6\u7684\u5b58\u50a8\u7a7a\u95f4, \u6bd4\u5982\u6e38\u620f\u5361\u5e26\u4e2d\u5b58\u50a8\u7684\u6570\u636e. CPU \u53ef\u8bbf\u95ee\u7684\u6240\u6709\u533a\u57df\u4e0e\u5916\u90e8\u8f6f\u786c\u4ef6\u7684\u6620\u5c04\u5173\u7cfb\u5982\u4e0b\uff1a \u5730\u5740 \u8bf4\u660e \u5907\u6ce8 0xffff Interrupt Enable Flag \u4e2d\u65ad\u6807\u5fd7 0xff80-0xfffe Zero Page - 127 bytes \u5185\u5b58 HRAM 0xff00-0xff7f Hardware I/O Registers \u786c\u4ef6 IO 0xfea0-0xfeff Unusable Memory \u672a\u4f7f\u7528 0xfe00-0xfe9f OAM - Object Attribute Memory GPU 0xe000-0xfdff Echo RAM - Reserved, Do Not Use WRAM 0xd000-0xdfff Internal RAM - Bank 1-7 (switchable - CGB only) \u5185\u5b58 WRAM 0xc000-0xcfff Internal RAM - Bank 0 (fixed) \u5185\u5b58 WRAM 0xa000-0xbfff Cartridge RAM (If Available) \u5361\u5e26 0x9c00-0x9fff BG Map Data 2 GPU 0x9800-0x9bff BG Map Data 1 GPU 0x8000-0x97ff Character RAM GPU 0x4000-0x7fff Cartridge ROM - Switchable Banks 1-xx \u5361\u5e26 0x0150-0x3fff Cartridge ROM - Bank 0 (fixed) \u5361\u5e26 0x0100-0x014f Cartridge Header Area \u5361\u5e26 0x0000-0x00ff Restart and Interrupt Vectors \u91cd\u542f\u548c\u4e2d\u65ad\u5411\u91cf \u53ef\u770b\u5230\u6574\u4e2a\u53ef\u7d22\u5f15\u5185\u5b58\u533a\u57df\u88ab\u4e0d\u540c\u7684\u8f6f\u786c\u4ef6\u5206\u5272, \u8fd9\u91cc\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e00\u70b9\u7684\u662f 0xff00-0xff7f \u533a\u57df, \u8be5\u90e8\u5206\u5185\u5b58\u901a\u5e38\u7528\u4e8e\u5904\u7406\u786c\u4ef6\u7684 IO, \u5e38\u89c1\u7684\u6bd4\u5982\u6e38\u620f\u63a7\u5236\u5668\u7684\u8f93\u5165, \u97f3\u91cf\u8c03\u8282\u6309\u94ae, \u5c4f\u5e55\u4eae\u5ea6\u8c03\u8282\u6309\u94ae\u7b49\u5916\u90e8\u8f93\u5165. CPU \u901a\u8fc7\u786c\u4ef6\u4e2d\u65ad\u6765\u5904\u7406\u8fd9\u4e9b\u5916\u90e8\u8f93\u5165\u5e76\u7ed9\u51fa\u53cd\u9988, \u56e0\u6b64\u624d\u4f7f\u5f97\u8ba1\u7b97\u673a\u8868\u73b0\u51fa\u53ef\u4ea4\u4e92\u6027. \u5185\u5b58\u7ba1\u7406\u5355\u5143\u7684\u4ee3\u7801\u5b9e\u73b0\u8f83\u4e3a\u7b80\u5355, \u6b64\u5904\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u5927\u81f4\u6846\u67b6, \u4f46\u7531\u4e8e\u6b64\u65f6\u9664 CPU \u4e0e\u5361\u5e26\u6a21\u5757\u5916\u5e76\u6ca1\u6709\u5b9e\u73b0\u5176\u4f59\u529f\u80fd\u6a21\u5757, \u56e0\u6b64\u4ee3\u7801\u4e2d\u5728\u6d89\u53ca\u8fd9\u4e9b\u672a\u5b9e\u73b0\u7684\u6a21\u5757\u65f6\u4f1a\u9884\u7559\u7a7a\u4f4d. \u4e00\u4f46\u8fd9\u4e9b\u6a21\u5757\u88ab\u5b9e\u73b0\u5c31\u53ef\u4ee5\u7acb\u5373\u52a0\u5165\u8fd9\u4e2a\u6846\u67b6. pub struct Mmunit { pub cartridge: Box<Cartridge>, // \u5361\u5e26 pub apu: Option<Apu>, // \u97f3\u9891 APU pub gpu: Gpu, // \u89c6\u9891 GPU pub joypad: Joypad, // \u63a7\u5236\u5668 pub serial: Serial, // \u4e32\u884c\u901a\u884c, \u8d1f\u8d23\u4e0e\u5176\u4ed6 Game Boy \u4ea4\u6362\u6570\u636e pub shift: bool, // \u4e0e speed \u4e00\u8d77\u5904\u7406\u8fd0\u884c\u901f\u5ea6(\u5355/\u53cc\u500d\u901f) pub speed: Speed, // \u4e0e shift \u4e00\u8d77\u5904\u7406\u8fd0\u884c\u901f\u5ea6(\u5355/\u53cc\u500d\u901f) pub term: Term, // \u6e38\u620f\u673a\u578b\u53f7 pub timer: Timer, // \u5b9a\u65f6\u5668 inte: u8, // \u4e0e intf \u4e00\u8d77\u5904\u7406\u4e2d\u65ad intf: Rc<RefCell<Intf>>, // \u4e0e inte \u4e00\u8d77\u5904\u7406\u4e2d\u65ad hdma: Hdma, // \u89c6\u9891 GPU \u7684\u4e00\u90e8\u5206 hram: [u8; 0x7f], // \u89c6\u9891 GPU \u7684\u4e00\u90e8\u5206 wram: [u8; 0x8000], // \u4e0e wram_bank \u4e00\u8d77\u7ba1\u7406\u5185\u90e8\u5185\u5b58 wram_bank: usize, // \u4e0e wram \u4e00\u8d77\u7ba1\u7406\u5185\u90e8\u5185\u5b58 } \u540c\u65f6\u5185\u5b58\u7ba1\u7406\u5355\u5143\u7edf\u4e00\u5bf9\u5916\u63d0\u4f9b 0x0000-0xffff \u8303\u56f4\u7684\u5185\u5b58\u8bfb\u5199. \u73b0\u5728\u53ef\u6682\u65f6\u5ffd\u7565\u6bcf\u4e2a\u5185\u5b58\u533a\u95f4\u7684\u8bfb\u5199\u903b\u8f91, \u800c\u53ea\u9700\u8981\u5173\u5fc3\u5185\u5b58\u8303\u56f4\u5730\u5740\u6240\u5bf9\u5e94\u7684\u8f6f\u786c\u4ef6\u6a21\u5757\u5373\u53ef. \u7531\u4e8e Cartridge \u6a21\u5757\u73b0\u5df2\u5b9e\u73b0, \u56e0\u6b64 Cartridge \u53ef\u4ee5\u5d4c\u5165\u5230 MMU \u5185\u4e86. impl Memory for Mmunit { fn get(&self, a: u16) -> u8 { match a { 0x0000...0x7fff => self.cartridge.get(a), // Cartridge 0x8000...0x9fff => unimplement!(), // GPU 0xa000...0xbfff => self.cartridge.get(a), // Cartridge 0xc000...0xcfff => unimplement!(), // WRAM 0xd000...0xdfff => unimplement!(), // WRAM 0xe000...0xefff => unimplement!(), // WRAM 0xf000...0xfdff => unimplement!(), // WRAM 0xfe00...0xfe9f => unimplement!(), // GPU 0xfea0...0xfeff => unimplement!(), // Unused 0xff00 => unimplement!(), // Joypad 0xff01...0xff02 => unimplement!(), // Serial 0xff04...0xff07 => unimplement!(), // Timer 0xff0f => unimplement!(), // Interrupt 0xff10...0xff3f => unimplement!(), // APU 0xff4d => unimplement!(), // Speed 0xff40...0xff45 | 0xff47...0xff4b | 0xff4f => unimplement!(), // GPU 0xff51...0xff55 => unimplement!(), // HDMA 0xff68...0xff6b => unimplement!(), // GPU 0xff70 => unimplement!(), // WRAM 0xff80...0xfffe => unimplement!(), // HRAM 0xffff => unimplement!(), // Interrupe _ => 0x00, } } fn set(&mut self, a: u16, v: u8) { match a { 0x0000...0x7fff => self.cartridge.set(a, v), // Cartridge 0x8000...0x9fff => unimplement!(), // GPU 0xa000...0xbfff => self.cartridge.set(a, v), // Cartridge 0xc000...0xcfff => unimplement!(), // WRAM 0xd000...0xdfff => unimplement!(), // WRAM 0xe000...0xefff => unimplement!(), // WRAM 0xf000...0xfdff => unimplement!(), // WRAM 0xfe00...0xfe9f => unimplement!(), // GPU 0xfea0...0xfeff => unimplement!(), // Unused 0xff00 => unimplement!(), // Joypad 0xff01...0xff02 => unimplement!(), // Serial 0xff04...0xff07 => unimplement!(), // Timer 0xff0f => unimplement!(), // Interrupt 0xff10...0xff3f => unimplement!(), // APU 0xff4d => unimplement!(), // Speed 0xff40...0xff45 | 0xff47...0xff4b | 0xff4f => unimplement!(), // GPU 0xff51...0xff55 => unimplement!(), // HDMA 0xff68...0xff6b => unimplement!(), // GPU 0xff70 => unimplement!(), // WRAM 0xff80...0xfffe => unimplement!(), // HRAM 0xffff => unimplement!(), // Interrupe _ => 0x00, } } } \u8fd8\u8bb0\u5f97 CPU \u7684 power_up \u51fd\u6570\u5417\uff1f\u5728\u521d\u59cb\u5316 CPU \u65f6, \u9700\u8981\u5c06 MMU \u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u5165\u5373\u53ef\u5b8c\u6210\u5bf9 CPU \u7684\u521d\u59cb\u5316. \u8fd9\u6837, CPU \u6240\u8bbf\u95ee\u7684\u7cfb\u7edf\u5185\u5b58\u5b9e\u8d28\u4e0a\u5c31\u5206\u5e03\u5728\u5361\u5e26\u3001GPU\u3001\u6e38\u620f\u624b\u67c4\u7b49\u591a\u4e2a\u8bbe\u5907\u4e0a\u4e86. impl Cpu { pub fn power_up(term: Term, mem: Rc<RefCell<dyn Memory>>) -> Self { ... } }","title":"\u5185\u5b58\u7ba1\u7406\u5355\u5143"},{"location":"content/gameboy/cpu/mmu/#_2","text":"CPU, \u786c\u76d8, \u7f51\u5361, \u5916\u8bbe, \u65e0\u8bba\u662f\u4ec0\u4e48\u786c\u4ef6\u8bbe\u5907, \u90fd\u8981\u63d2\u5728\u8ba1\u7b97\u673a\u4e3b\u677f\u4e0a, \u53ef\u89c1\u4e3b\u677f\u5bf9\u8ba1\u7b97\u673a\u7cfb\u7edf\u6765\u8bf4\u662f\u591a\u4e48\u91cd\u8981. \u901a\u5e38\u800c\u8a00, \u4e3b\u677f\u7684\u5347\u7ea7\u6362\u4ee3\u662f\u8ddf\u7740 CPU \u7684\u5347\u7ea7\u6362\u4ee3\u800c\u6765\u7684, \u7531\u4e8e\u4e3b\u677f\u4e0a\u7684\u82af\u7247\u7ec4\u9700\u8981\u914d\u5408 CPU \u8fdb\u884c\u534f\u540c\u5de5\u4f5c, \u540c\u65f6\u53c8\u8981\u914d\u5408\u8bb8\u591a\u65b0\u6280\u672f, \u65b0\u6280\u80fd\u548c\u65b0\u5916\u8bbe, \u56e0\u6b64\u4ece\u67d0\u4e00\u65b9\u9762\u6765\u8bf4, \u4e3b\u677f\u7684\u53d1\u5c55\u53ef\u4ee5\u4ee3\u8868\u8ba1\u7b97\u673a\u7684\u53d1\u5c55. \u4e3b\u677f\u4e0e CPU \u6709\u663e\u8457\u7684\u4e0d\u540c, \u6bcf\u4e00\u4ee3 CPU \u7684\u8fdb\u5316\u90fd\u6709\u8ff9\u53ef\u5faa, \u5176\u7ee7\u627f\u81ea\u8c01, \u4f18\u5316\u4e86\u4ec0\u4e48\u5730\u65b9\u7b49, \u4f46\u6bcf\u4e00\u4ee3\u4e3b\u677f\u90fd\u51e0\u4e4e\u662f\u91cd\u65b0\u8bbe\u8ba1\u7684. Game Boy \u7684\u4e3b\u677f\u7ed3\u6784\u7ecf\u8fc7\u7b80\u5316, \u53ef\u4ee5\u7528\u4e0b\u793a\u7684\u7ed3\u6784\u56fe\u6765\u8868\u793a\uff1a \u7531\u4e8e MMU \u7ba1\u7406\u7740\u5168\u90e8\u7684\u5916\u90e8\u786c\u4ef6, \u4e14 CPU \u53ea\u4e0e MMU \u8fdb\u884c\u901a\u4fe1, \u56e0\u6b64\u76ee\u524d\u6765\u8bb2, \u4e3b\u677f\u7684\u4ee3\u7801\u5b9e\u73b0\u4e0a\u53ea\u6709\u4e24\u4e2a\u6210\u5458. \u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d, \u4f1a\u6162\u6162\u518d\u4e3a\u4e3b\u677f\u8865\u5145\u989d\u5916\u7684\u4ee3\u7801. use super::cpu::Rtc; use super::mmunit::Mmunit; use std::cell::RefCell; use std::path::Path; use std::rc::Rc; pub struct MotherBoard { pub mmu: Rc<RefCell<Mmunit>>, pub cpu: Rtc, } impl MotherBoard { pub fn power_up(path: impl AsRef<Path>) -> Self { let mmu = Rc::new(RefCell::new(Mmunit::power_up(path))); let cpu = Rtc::power_up(mmu.borrow().term, mmu.clone()); Self { mmu, cpu } } }","title":"\u4e3b\u677f"},{"location":"content/gameboy/cpu/overview/","text":"\u4e2d\u592e\u5904\u7406\u5668 CPU, \u4e2d\u6587\u540d\u4e2d\u592e\u5904\u7406\u5355\u5143, \u53c8\u79f0\u4e3a\u5904\u7406\u5668, \u662f\u8ba1\u7b97\u673a\u7684\u6838\u5fc3. \u4e00\u4e9b\u5f00\u53d1\u8005\u5bb9\u6613\u5c06 CPU \u4e0e Core(\u5904\u7406\u5668\u6838)\u641e\u6df7\u6dc6, \u7b80\u5355\u6765\u8bf4, Core \u662f\u5904\u7406\u5668\u5185\u90e8\u6700\u4e3a\u6838\u5fc3\u7684\u90e8\u5206, \u800c CPU \u662f Core \u4e0e\u5176\u5b83\u4e00\u4e9b\u5916\u90e8\u7535\u8def\u5982\u5b58\u50a8\u5668\u7684\u7edf\u79f0. CPU \u7684\u5386\u53f2\u53d1\u5c55\u6700\u65e9\u53ef\u8ffd\u6eaf\u5230 18 \u4e16\u7eaa: Si(\u7845)\u5143\u7d20\u7684\u53d1\u73b0. \u5e74\u4efd \u4e8b\u4ef6 1823 Si(\u7845)\u88ab\u53d1\u73b0, \u8fd9\u662f\u6784\u6210\u73b0\u4eca CPU \u6700\u4e3a\u91cd\u8981\u7684\u5143\u7d20. 1903 \u5c3c\u53e4\u62c9\u00b7\u7279\u65af\u62c9(Nikola Tesla)\u5728 1903 \u5e74\u4e3a\u79f0\u4e3a\"\u95e8\"\u548c\"\u5f00\u5173\"\u7684\u7535\u6c14\u903b\u8f91\u7535\u8def\u7533\u8bf7\u4e86\u4e13\u5229. 1947 \u7b2c\u4e00\u53ea\u6676\u4f53\u7ba1\u5728\u5b9e\u9a8c\u5ba4\u8bde\u751f. 1958 \u7b2c\u4e00\u4e2a\u96c6\u6210\u7535\u8def\u88ab\u5b9e\u73b0. 1960 IBM \u5728\u7ebd\u7ea6\u5f00\u53d1\u4e86\u7b2c\u4e00\u4e2a\u6676\u4f53\u7ba1\u81ea\u52a8\u6279\u91cf\u751f\u4ea7\u8bbe\u65bd. 1968 \u82f1\u7279\u5c14\u516c\u53f8\u7531\u7f57\u4f2f\u7279\u00b7\u8bfa\u4f0a\u65af\u548c\u6208\u767b\u00b7\u6469\u5c14\u4e8e1968\u5e74\u521b\u7acb. 1969 AMD \u6210\u7acb. 1971 \u82f1\u7279\u5c14\u5728 Ted Hoff \u7684\u5e2e\u52a9\u4e0b\u4e8e 1971 \u5e74 11 \u6708 15 \u65e5\u63a8\u51fa\u4e86\u7b2c\u4e00\u4e2a\u5fae\u5904\u7406\u5668, \u5373 Intel 4004. 1972 Intel 8008 CPU \u53d1\u5e03. 1974 Intel 8080 CPU \u53d1\u5e03, \u6210\u4e3a\u8ba1\u7b97\u673a\u884c\u4e1a\u7684\u6807\u51c6. 1976 Intel 8085/8086 CPU \u53d1\u5e03. 1979 Intel 8088 CPU \u53d1\u5e03. 1982 Intel 80286 CPU \u53d1\u5e03. 1985 Intel 80386 CPU \u53d1\u5e03. 1987 SPARC \u5904\u7406\u5668\u7531 Sun \u516c\u53f8\u9996\u6b21\u63a8\u51fa. 1988 Intel 80386SX CPU \u53d1\u5e03. 1989 Cyrix \u53d1\u5e03\u4e86\u4ed6\u4eec\u7684\u7b2c\u4e00\u4e2a\u534f\u5904\u7406\u5668 FasMath 83D87 \u548c 83S87. 1991 AMD \u63a8\u51fa AM386 \u5fae\u5904\u7406\u5668\u7cfb\u5217. 1993 Intel \u63a8\u51fa Pentium(\u5954\u817e) \u7cfb\u5217\u5904\u7406\u5668. 1994 Intel \u53d1\u5e03\u7b2c\u4e8c\u4ee3 Pentium \u5904\u7406\u5668. 1995 Cyrix \u53d1\u5e03\u4e86 Cx5x86 \u5904\u7406\u5668, \u8bd5\u56fe\u4e0e Intel Pentium \u5904\u7406\u5668\u7ade\u4e89. 1996 Cyrix \u53d1\u5e03\u4e86\u4ed6\u4eec\u7684 MediaGX \u5904\u7406\u5668. \u8be5\u5904\u7406\u5668\u5c06\u5904\u7406\u5668\u4e0e\u58f0\u97f3\u548c\u89c6\u9891\u5904\u7406\u7ed3\u5408\u5728\u4e00\u4e2a\u82af\u7247\u4e0a. 1996 AMD \u53d1\u5e03\u4e86\u7b2c\u4e00\u6b3e\u5b8c\u5168\u81ea\u7814\u7684 K5 \u5904\u7406\u5668. 1997 AMD \u53d1\u5e03 K6 \u5904\u7406\u5668. 1997 Intel Pentium II \u53d1\u5e03. 1998 Intel \u53d1\u5e03 Xeon processor. 1999 Intel \u53d1\u5e03 Celeron(\u8d5b\u626c) \u5904\u7406\u5668. 1999 Intel Pentium III \u53d1\u5e03. 2000 AMD \u53d1\u5e03 Duron \u5904\u7406\u5668. 2000 \u7531\u4e8e\u6545\u969c, Intel \u53ec\u56de\u90e8\u5206 Pentium III \u5904\u7406\u5668. 2001 Intel Pentium 4 \u53d1\u5e03. 2003 Intel Pentium M \u53d1\u5e03. 2003 AMD \u53d1\u5e03\u4e86\u9996\u6b3e\u5355\u6838 Opteron CPU. 2006 Intel \u63a8\u51fa\u4e86\u5e26\u6709 2 \u6838\u5fc3\u7684 E6300 \u5904\u7406\u5668. 2007 Intel \u63a8\u51fa\u591a\u6b3e\u53cc\u6838\u5904\u7406\u5668: Q6600, E4300, Q6700 E4400, E4500, E4600 \u7b49. 2008 Intel \u63a8\u51fa\u591a\u6b3e\u53cc\u6838\u5904\u7406\u5668: Q9300, Q9450, E4700 \u7b49. 2008 i7 \u5904\u7406\u5668\u53d1\u5e03. 2009 AMD \u63a8\u51fa Athlon II X2 \u5904\u7406\u5668. 2009 i5 \u5904\u7406\u5668\u53d1\u5e03(\u6ca1\u9519, \u5148\u6709\u7684 i7 \u5904\u7406\u5668). 2010 i3 \u5904\u7406\u5668\u53d1\u5e03(\u6ca1\u9519). 2010 AMD \u53d1\u5e03 Phenom II X6. 2011 AMD \u53d1\u5e03\u79fb\u52a8\u7aef\u5904\u7406\u5668 A4-3300M, A4-3310MX. 2012 AMD \u53d1\u5e03\u79fb\u52a8\u7aef\u5904\u7406\u5668 A10-5700, A10-5800K. 2013 Intel \u53d1\u5e03\u7b2c\u4e00\u5f20\u5e26\u6838\u663e\u7684\u5904\u7406\u5668. 2017 i9 \u5904\u7406\u5668\u53d1\u5e03. 2018 Intel \u53d1\u5e03\u7b2c\u4e00\u5f20\u4e3a\u79fb\u52a8\u7aef\u8bbe\u8ba1\u7684 i9 \u5904\u7406\u5668 i9-8950HK. \u8bb8\u591a\u4eba\u8ba4\u4e3a Game Boy \u7684 CPU \u662f Intel \u7684 8080 CPU \u6216 Zillog Z80 CPU(Intel 8080 \u4e3a\u82f1\u7279\u5c14\u65e9\u671f\u53d1\u5e03\u7684\u5904\u7406\u5668, \u5b83\u4e8e 1974 \u5e74 4 \u6708\u53d1\u5e03, \u662f\u4e00\u679a 8 \u4f4d\u5143\u5904\u7406\u5668, \u5305\u542b 6000 \u4e2a\u6676\u4f53\u7ba1, \u9891\u7387\u4e3a 2MHz, \u4ea6\u662f\u4e16\u754c\u4e0a\u7b2c\u4e00\u679a\u6709\u5546\u4e1a\u610f\u4e49\u7684\u901a\u7528\u5904\u7406\u5668. \u5b83\u548c\u65e9\u5148\u7684\u5c1d\u8bd5 8008 CPU \u5960\u5b9a\u4e86\u4eca\u5929\u82f1\u7279\u5c14\u516c\u53f8 x86 \u7cfb\u5217\u5fae\u5904\u7406\u5668\u6307\u4ee4\u96c6\u7684\u57fa\u7840. \u800c Z80 CPU \u662f\u7531 Zilog \u63a8\u51fa\u7684 8 \u4f4d\u5fae\u5904\u7406\u5668, \u4f7f\u7528\u4e0a\u517c\u5bb9 Intel 8080 CPU, \u4e0e\u524d\u8005\u662f\u7ade\u4e89\u5173\u7cfb), \u8fd9\u5176\u5b9e\u662f\u4e0d\u51c6\u786e\u7684. Game Boy \u6240\u4f7f\u7528\u7684 CPU \u662f\u4efb\u5929\u5802\u7279\u522b\u5b9a\u5236\u7684\u57fa\u4e8e Z80 \u7684\u884d\u751f\u82af\u7247, \u5176\u5b98\u65b9\u540d\u79f0\u662f Sharp LR35902(\u82af\u7247\u5982\u56fe\u6240\u793a). LR35902 \u5904\u7406\u5668\u7684\u57fa\u7840\u7ed3\u6784, \u5c24\u5176\u662f\u5bc4\u5b58\u5668\u4e0e\u57fa\u7840\u6307\u4ee4\u96c6\u4e0e Z80 CPU \u6ca1\u6709\u592a\u591a\u533a\u522b, \u4f46\u5b83\u79fb\u9664\u4e86 Z80 CPU \u4e2d\u591a\u4f59\u7684\u5bc4\u5b58\u5668, \u5e76\u5c06\u6d89\u53ca\u4f4d\u64cd\u4f5c\u7684\u6269\u5c55\u6307\u4ee4\u96c6\u88ab\u989d\u5916\u52a0\u5165\u5230\u4e86 LR35902. \u5728\u672c\u7ae0\u4e2d\u5c06\u9996\u5148\u63a2\u7a76\u51af\u00b7\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u4e0b CPU \u7684\u5de5\u4f5c\u539f\u7406, \u968f\u540e\u4ee5\u5b9e\u73b0 LR35902 CPU \u7684\u786c\u4ef6\u4eff\u771f\u6765\u7ed3\u675f\u672c\u7ae0.","title":"GB-CPU-\u6982\u89c8"},{"location":"content/gameboy/cpu/overview/#_1","text":"CPU, \u4e2d\u6587\u540d\u4e2d\u592e\u5904\u7406\u5355\u5143, \u53c8\u79f0\u4e3a\u5904\u7406\u5668, \u662f\u8ba1\u7b97\u673a\u7684\u6838\u5fc3. \u4e00\u4e9b\u5f00\u53d1\u8005\u5bb9\u6613\u5c06 CPU \u4e0e Core(\u5904\u7406\u5668\u6838)\u641e\u6df7\u6dc6, \u7b80\u5355\u6765\u8bf4, Core \u662f\u5904\u7406\u5668\u5185\u90e8\u6700\u4e3a\u6838\u5fc3\u7684\u90e8\u5206, \u800c CPU \u662f Core \u4e0e\u5176\u5b83\u4e00\u4e9b\u5916\u90e8\u7535\u8def\u5982\u5b58\u50a8\u5668\u7684\u7edf\u79f0. CPU \u7684\u5386\u53f2\u53d1\u5c55\u6700\u65e9\u53ef\u8ffd\u6eaf\u5230 18 \u4e16\u7eaa: Si(\u7845)\u5143\u7d20\u7684\u53d1\u73b0. \u5e74\u4efd \u4e8b\u4ef6 1823 Si(\u7845)\u88ab\u53d1\u73b0, \u8fd9\u662f\u6784\u6210\u73b0\u4eca CPU \u6700\u4e3a\u91cd\u8981\u7684\u5143\u7d20. 1903 \u5c3c\u53e4\u62c9\u00b7\u7279\u65af\u62c9(Nikola Tesla)\u5728 1903 \u5e74\u4e3a\u79f0\u4e3a\"\u95e8\"\u548c\"\u5f00\u5173\"\u7684\u7535\u6c14\u903b\u8f91\u7535\u8def\u7533\u8bf7\u4e86\u4e13\u5229. 1947 \u7b2c\u4e00\u53ea\u6676\u4f53\u7ba1\u5728\u5b9e\u9a8c\u5ba4\u8bde\u751f. 1958 \u7b2c\u4e00\u4e2a\u96c6\u6210\u7535\u8def\u88ab\u5b9e\u73b0. 1960 IBM \u5728\u7ebd\u7ea6\u5f00\u53d1\u4e86\u7b2c\u4e00\u4e2a\u6676\u4f53\u7ba1\u81ea\u52a8\u6279\u91cf\u751f\u4ea7\u8bbe\u65bd. 1968 \u82f1\u7279\u5c14\u516c\u53f8\u7531\u7f57\u4f2f\u7279\u00b7\u8bfa\u4f0a\u65af\u548c\u6208\u767b\u00b7\u6469\u5c14\u4e8e1968\u5e74\u521b\u7acb. 1969 AMD \u6210\u7acb. 1971 \u82f1\u7279\u5c14\u5728 Ted Hoff \u7684\u5e2e\u52a9\u4e0b\u4e8e 1971 \u5e74 11 \u6708 15 \u65e5\u63a8\u51fa\u4e86\u7b2c\u4e00\u4e2a\u5fae\u5904\u7406\u5668, \u5373 Intel 4004. 1972 Intel 8008 CPU \u53d1\u5e03. 1974 Intel 8080 CPU \u53d1\u5e03, \u6210\u4e3a\u8ba1\u7b97\u673a\u884c\u4e1a\u7684\u6807\u51c6. 1976 Intel 8085/8086 CPU \u53d1\u5e03. 1979 Intel 8088 CPU \u53d1\u5e03. 1982 Intel 80286 CPU \u53d1\u5e03. 1985 Intel 80386 CPU \u53d1\u5e03. 1987 SPARC \u5904\u7406\u5668\u7531 Sun \u516c\u53f8\u9996\u6b21\u63a8\u51fa. 1988 Intel 80386SX CPU \u53d1\u5e03. 1989 Cyrix \u53d1\u5e03\u4e86\u4ed6\u4eec\u7684\u7b2c\u4e00\u4e2a\u534f\u5904\u7406\u5668 FasMath 83D87 \u548c 83S87. 1991 AMD \u63a8\u51fa AM386 \u5fae\u5904\u7406\u5668\u7cfb\u5217. 1993 Intel \u63a8\u51fa Pentium(\u5954\u817e) \u7cfb\u5217\u5904\u7406\u5668. 1994 Intel \u53d1\u5e03\u7b2c\u4e8c\u4ee3 Pentium \u5904\u7406\u5668. 1995 Cyrix \u53d1\u5e03\u4e86 Cx5x86 \u5904\u7406\u5668, \u8bd5\u56fe\u4e0e Intel Pentium \u5904\u7406\u5668\u7ade\u4e89. 1996 Cyrix \u53d1\u5e03\u4e86\u4ed6\u4eec\u7684 MediaGX \u5904\u7406\u5668. \u8be5\u5904\u7406\u5668\u5c06\u5904\u7406\u5668\u4e0e\u58f0\u97f3\u548c\u89c6\u9891\u5904\u7406\u7ed3\u5408\u5728\u4e00\u4e2a\u82af\u7247\u4e0a. 1996 AMD \u53d1\u5e03\u4e86\u7b2c\u4e00\u6b3e\u5b8c\u5168\u81ea\u7814\u7684 K5 \u5904\u7406\u5668. 1997 AMD \u53d1\u5e03 K6 \u5904\u7406\u5668. 1997 Intel Pentium II \u53d1\u5e03. 1998 Intel \u53d1\u5e03 Xeon processor. 1999 Intel \u53d1\u5e03 Celeron(\u8d5b\u626c) \u5904\u7406\u5668. 1999 Intel Pentium III \u53d1\u5e03. 2000 AMD \u53d1\u5e03 Duron \u5904\u7406\u5668. 2000 \u7531\u4e8e\u6545\u969c, Intel \u53ec\u56de\u90e8\u5206 Pentium III \u5904\u7406\u5668. 2001 Intel Pentium 4 \u53d1\u5e03. 2003 Intel Pentium M \u53d1\u5e03. 2003 AMD \u53d1\u5e03\u4e86\u9996\u6b3e\u5355\u6838 Opteron CPU. 2006 Intel \u63a8\u51fa\u4e86\u5e26\u6709 2 \u6838\u5fc3\u7684 E6300 \u5904\u7406\u5668. 2007 Intel \u63a8\u51fa\u591a\u6b3e\u53cc\u6838\u5904\u7406\u5668: Q6600, E4300, Q6700 E4400, E4500, E4600 \u7b49. 2008 Intel \u63a8\u51fa\u591a\u6b3e\u53cc\u6838\u5904\u7406\u5668: Q9300, Q9450, E4700 \u7b49. 2008 i7 \u5904\u7406\u5668\u53d1\u5e03. 2009 AMD \u63a8\u51fa Athlon II X2 \u5904\u7406\u5668. 2009 i5 \u5904\u7406\u5668\u53d1\u5e03(\u6ca1\u9519, \u5148\u6709\u7684 i7 \u5904\u7406\u5668). 2010 i3 \u5904\u7406\u5668\u53d1\u5e03(\u6ca1\u9519). 2010 AMD \u53d1\u5e03 Phenom II X6. 2011 AMD \u53d1\u5e03\u79fb\u52a8\u7aef\u5904\u7406\u5668 A4-3300M, A4-3310MX. 2012 AMD \u53d1\u5e03\u79fb\u52a8\u7aef\u5904\u7406\u5668 A10-5700, A10-5800K. 2013 Intel \u53d1\u5e03\u7b2c\u4e00\u5f20\u5e26\u6838\u663e\u7684\u5904\u7406\u5668. 2017 i9 \u5904\u7406\u5668\u53d1\u5e03. 2018 Intel \u53d1\u5e03\u7b2c\u4e00\u5f20\u4e3a\u79fb\u52a8\u7aef\u8bbe\u8ba1\u7684 i9 \u5904\u7406\u5668 i9-8950HK. \u8bb8\u591a\u4eba\u8ba4\u4e3a Game Boy \u7684 CPU \u662f Intel \u7684 8080 CPU \u6216 Zillog Z80 CPU(Intel 8080 \u4e3a\u82f1\u7279\u5c14\u65e9\u671f\u53d1\u5e03\u7684\u5904\u7406\u5668, \u5b83\u4e8e 1974 \u5e74 4 \u6708\u53d1\u5e03, \u662f\u4e00\u679a 8 \u4f4d\u5143\u5904\u7406\u5668, \u5305\u542b 6000 \u4e2a\u6676\u4f53\u7ba1, \u9891\u7387\u4e3a 2MHz, \u4ea6\u662f\u4e16\u754c\u4e0a\u7b2c\u4e00\u679a\u6709\u5546\u4e1a\u610f\u4e49\u7684\u901a\u7528\u5904\u7406\u5668. \u5b83\u548c\u65e9\u5148\u7684\u5c1d\u8bd5 8008 CPU \u5960\u5b9a\u4e86\u4eca\u5929\u82f1\u7279\u5c14\u516c\u53f8 x86 \u7cfb\u5217\u5fae\u5904\u7406\u5668\u6307\u4ee4\u96c6\u7684\u57fa\u7840. \u800c Z80 CPU \u662f\u7531 Zilog \u63a8\u51fa\u7684 8 \u4f4d\u5fae\u5904\u7406\u5668, \u4f7f\u7528\u4e0a\u517c\u5bb9 Intel 8080 CPU, \u4e0e\u524d\u8005\u662f\u7ade\u4e89\u5173\u7cfb), \u8fd9\u5176\u5b9e\u662f\u4e0d\u51c6\u786e\u7684. Game Boy \u6240\u4f7f\u7528\u7684 CPU \u662f\u4efb\u5929\u5802\u7279\u522b\u5b9a\u5236\u7684\u57fa\u4e8e Z80 \u7684\u884d\u751f\u82af\u7247, \u5176\u5b98\u65b9\u540d\u79f0\u662f Sharp LR35902(\u82af\u7247\u5982\u56fe\u6240\u793a). LR35902 \u5904\u7406\u5668\u7684\u57fa\u7840\u7ed3\u6784, \u5c24\u5176\u662f\u5bc4\u5b58\u5668\u4e0e\u57fa\u7840\u6307\u4ee4\u96c6\u4e0e Z80 CPU \u6ca1\u6709\u592a\u591a\u533a\u522b, \u4f46\u5b83\u79fb\u9664\u4e86 Z80 CPU \u4e2d\u591a\u4f59\u7684\u5bc4\u5b58\u5668, \u5e76\u5c06\u6d89\u53ca\u4f4d\u64cd\u4f5c\u7684\u6269\u5c55\u6307\u4ee4\u96c6\u88ab\u989d\u5916\u52a0\u5165\u5230\u4e86 LR35902. \u5728\u672c\u7ae0\u4e2d\u5c06\u9996\u5148\u63a2\u7a76\u51af\u00b7\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u4e0b CPU \u7684\u5de5\u4f5c\u539f\u7406, \u968f\u540e\u4ee5\u5b9e\u73b0 LR35902 CPU \u7684\u786c\u4ef6\u4eff\u771f\u6765\u7ed3\u675f\u672c\u7ae0.","title":"\u4e2d\u592e\u5904\u7406\u5668"},{"location":"content/gameboy/cpu/pipeline/","text":"\u5904\u7406\u5668\u6d41\u6c34\u7ebf\u6982\u8ff0 \u672c\u8282\u5c06\u8ba8\u8bba CPU \u8bbe\u8ba1\u4e2d\u7684\u4e00\u4e2a\u77e5\u8bc6: \u6d41\u6c34\u7ebf. \u5b83\u548c\u672c\u4e66\u8981\u5b9e\u73b0\u7684 Game Boy \u4eff\u771f\u5668\u5e76\u6ca1\u6709\u592a\u5927\u5173\u7cfb, \u8bfb\u8005\u5b8c\u5168\u53ef\u4ee5\u5c06\u672c\u8282\u4f5c\u4e3a\u4e00\u4e2a\u6269\u5c55\u9605\u8bfb. \u4f46\u662f\u4e86\u89e3\u6d41\u6c34\u7ebf\u5bb9\u6613\u5e2e\u52a9\u8bfb\u8005\u66f4\u597d\u7684\u53bb\u5b9e\u73b0 CPU \u4eff\u771f\u5668. \u6d41\u6c34\u7ebf\u7684\u6982\u5ff5 \u6d41\u6c34\u7ebf\u7684\u6982\u5ff5\u6700\u65e9\u8d77\u6e90\u4e8e\u5de5\u5382, \u5047\u8bbe\u67d0\u5730\u6709\u4e2a\u6c7d\u8f66\u751f\u4ea7\u5de5\u5382, \u751f\u6210\u4e00\u8f86\u6210\u54c1\u8f66\u7684\u751f\u4ea7\u8fc7\u7a0b\u5206\u4e3a\u5e95\u76d8\u751f\u4ea7, \u8f66\u8f6e\u751f\u4ea7\u548c\u6700\u540e\u7ec4\u88c5\u4e09\u4e2a\u6b65\u9aa4. \u6bcf\u4e2a\u5e95\u76d8\u9700\u8981\u6d88\u8017\u4e00\u4e2a\u5de5\u4eba 10 \u79d2, \u8f66\u8f6e\u9700\u8981\u6d88\u8017\u5de5\u4eba 20 \u79d2, \u7ec4\u88c5\u9700\u8981\u6d88\u8017\u5de5\u4eba 15 \u79d2. \u56e0\u6b64\u751f\u4ea7\u4e00\u8f86\u5b8c\u6574\u7684\u6c7d\u8f66, \u603b\u5171\u9700\u8981\u6d88\u8017 45 \u79d2\u65f6\u95f4. \u4f46\u8fd9\u79cd\u751f\u4ea7\u6a21\u578b\u4e0b\u6709\u4e00\u4e2a\u95ee\u9898, \u5c31\u662f\u5f53\u751f\u4ea7\u8f66\u8f6e\u65f6, \u7b2c\u4e00\u4e2a\u751f\u4ea7\u5e95\u76d8\u7684\u5de5\u4eba\u662f\u95f2\u7f6e\u7684. \u8fd9\u65f6\u5019, \u53ef\u4ee5\u8ba9\u7b2c\u4e00\u4e2a\u5de5\u4eba\u751f\u4ea7\u5b8c\u7b2c\u4e00\u8f86\u8f66\u7684\u5e95\u76d8\u540e, \u7acb\u5373\u6295\u5165\u53bb\u751f\u4ea7\u7b2c\u4e8c\u8f86\u8f66\u7684\u5e95\u76d8, \u8fd9\u6837\u4e0b\u6765\u5e73\u5747\u4e00\u8f86\u8f66\u53ea\u9700\u8981\u82b1\u8d39 3 \u4e2a\u5de5\u4eba\u4e2d\u6700\u8017\u65f6\u7684\u90a3\u4e2a\u5de5\u4eba, \u4e5f\u5c31\u662f 20 \u79d2\u65f6\u95f4. \u5904\u7406\u5668\u4e2d\u4e5f\u6709\u4e2a\u7ecf\u5178\u7684 5 \u7ea7\u6d41\u6c34\u7ebf\u6a21\u578b, \u5b83\u6765\u81ea MIPS(MIPS architecture, MIPS \u67b6\u6784), \u5728\u6b64\u6d41\u6c34\u7ebf\u6a21\u578b\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u751f\u547d\u5468\u671f\u6709\u5982\u4e0b\u8fc7\u7a0b: \u53d6\u6307. \u53d6\u6307(Instruction Fetch)\u662f\u6307\u628a\u6307\u4ee4\u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u51fa\u6765\u7684\u8fc7\u7a0b. \u8bd1\u7801. \u8bd1\u7801(Instruction Decode)\u662f\u6307\u5c06\u6307\u4ee4\u8fdb\u884c\u7ffb\u8bd1\u7684\u8fc7\u7a0b. \u7ecf\u8fc7\u8be5\u6b65\u9aa4\u540e, \u6307\u4ee4\u9700\u8981\u8bfb\u53d6\u54ea\u4e9b\u5bc4\u5b58\u5668\u4ee5\u53ca\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u5c06\u88ab\u53d6\u51fa. \u6267\u884c. \u6267\u884c(Instruction Execute)\u4f7f\u7528\u7684\u4e3b\u8981\u7684\u90e8\u4ef6\u5c31\u662f ALU(\u7b97\u672f\u903b\u8f91\u90e8\u4ef6\u8fd0\u7b97\u5668), \u662f\u6307\u5bf9\u6307\u4ee4\u771f\u6b63\u8fdb\u884c\u8fd0\u7b97\u7684\u8fc7\u7a0b. CPU \u4e2d\u7edd\u5927\u90e8\u5206\u7684\u8ba1\u7b97\u64cd\u4f5c\u90fd\u662f\u5728\u8fd9\u91cc\u9762\u5b8c\u6210\u7684. \u5e38\u89c1\u7684\u64cd\u4f5c\u6bd4\u5982\u8fdb\u884c\u6570\u5b57\u7684\u52a0\u51cf\u4e58\u9664\u7b49. \u8bbf\u95ee. \u8bbf\u95ee(Memory Access)\u662f\u6307\u8bfb\u53d6/\u5199\u5165\u6570\u636e\u5230\u5185\u5b58\u4e2d\u7684\u8fc7\u7a0b. \u56de\u5199. \u56de\u5199(Write Back)\u662f\u6307\u5c06\u8fd0\u7b97\u7ed3\u679c\u5199\u56de\u5bc4\u5b58\u5668\u7684\u8fc7\u7a0b. \u8be5\u503c\u53ef\u4ee5\u662f\u6267\u884c\u9636\u6bb5\u7684\u7ed3\u679c, \u4e5f\u53ef\u4ee5\u662f\u8bbf\u95ee\u9636\u6bb5\u7684\u7ed3\u679c, \u5177\u4f53\u53d6\u51b3\u4e8e\u6307\u4ee4\u7c7b\u578b. \u5728 CPU \u8bbe\u8ba1\u4e2d, \u53ef\u4ee5\u91c7\u7528\u7c7b\u4f3c\u5de5\u5382\u4e2d\u7684\u6d41\u6c34\u7ebf\u65b9\u5f0f\u4ee5\u63d0\u9ad8\u6027\u80fd. \u5f53\u7b2c\u4e00\u6761\u6307\u4ee4\u4ece\u53d6\u6307\u9636\u6bb5\u8fdb\u5165\u8bd1\u7801\u9636\u6bb5\u540e, \u53d6\u6307\u6a21\u5757\u5c06\u7acb\u5373\u8fdb\u884c\u7b2c\u4e8c\u6761\u6307\u4ee4\u7684\u53d6\u6307\u64cd\u4f5c, \u5e76\u4f9d\u6b21\u7c7b\u63a8, \u7406\u8bba\u4e0a\u6bcf\u4e00\u6761\u6307\u4ee4\u7684\u6267\u884c\u5468\u671f\u7b49\u4e8e 5 \u7ea7\u6d41\u6c34\u7ebf\u4e2d\u8017\u65f6\u6700\u957f\u7684\u4e00\u7ea7\u7684\u6267\u884c\u5468\u671f. \u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a(IF: \u8bfb\u53d6\u6307\u4ee4, ID: \u6307\u4ee4\u89e3\u7801, EX: \u8fd0\u884c, MEM: \u5b58\u50a8\u5668\u8bbf\u95ee, WB: \u5199\u56de\u5bc4\u5b58\u5668). \u5e76\u975e\u6240\u6709\u5904\u7406\u5668\u90fd\u662f\u6d41\u6c34\u7ebf\u5316\u7684, \u4e00\u4e9b\u65e9\u671f\u5904\u7406\u5668\u5c31\u672a\u4f7f\u7528\u6d41\u6c34\u7ebf\u8bbe\u8ba1. \u4f46\u8fd9\u4e9b\u672a\u6d41\u6c34\u7ebf\u5316\u7684\u67b6\u6784\u8fd0\u884c\u6548\u7387\u5f88\u4f4e, \u56e0\u4e3a\u6709\u4e9b\u5904\u7406\u5668\u7684\u6a21\u5757\u5728\u5176\u4ed6\u6a21\u5757\u8fd0\u884c\u65f6\u662f\u95f2\u7f6e\u7684. \u6d41\u6c34\u7ebf\u867d\u5e76\u4e0d\u4f1a\u5b8c\u5168\u6d88\u9664 CPU \u7684\u95f2\u7f6e\u65f6\u95f4, \u4f46\u662f\u80fd\u591f\u8ba9\u8fd9\u4e9b\u6a21\u5757\u5e76\u53d1\u8fd0\u4f5c\u800c\u5927\u5e45\u63d0\u5347\u7a0b\u5e8f\u8fd0\u884c\u7684\u6548\u7387. \u6d41\u6c34\u7ebf\u7684\u5176\u4e2d\u4e00\u4e2a\u7ea7\u8d8a\u7b80\u5355, \u5219\u5904\u7406\u5b83\u7684\u9891\u7387\u5c31\u53ef\u4ee5\u8d8a\u9ad8. \u73b0\u4ee3\u7684\u4e2d\u592e\u5904\u7406\u5668\u4e2d\u4e00\u4e2a\u6307\u4ee4\u6d41\u6c34\u7ebf\u53ef\u4ee5\u957f\u4e8e 30 \u7ea7. \u901a\u5e38\u6765\u8bb2, \u5728\u4e00\u5b9a\u8303\u56f4\u5185, \u6d41\u6c34\u7ebf\u7ea7\u522b\u8d8a\u591a, \u5355\u4e2a\u6307\u4ee4\u7684\u8fd0\u884c\u901f\u5ea6\u8d8a\u6162, \u4f46 CPU \u6574\u4f53\u541e\u5410\u91cf\u5374\u8d8a\u9ad8, \u56e0\u4e3a\u540c\u4e00\u65f6\u95f4\u53ef\u4ee5\u5904\u7406\u66f4\u591a\u6307\u4ee4. \u4f46\u51e1\u4e8b\u90fd\u6709\u53cd\u4f8b, \u6bd4\u5982 Intel \u7684 Pentium 4(\u5954\u817e 4)\u7cfb\u5217\u5904\u7406\u5668, \u5176\u8bbe\u8ba1\u7684\u6d41\u6c34\u7ebf\u7531\u4e8e\u8fc7\u957f(\u603b\u5171 31 \u7ea7\u7684\u6d41\u6c34\u7ebf), \u867d\u7136\u83b7\u5f97\u4e86\u5728\u90a3\u4e2a\u5e74\u4ee3\u6781\u9ad8\u7684\u4e3b\u9891, \u4f46\u7efc\u5408\u6027\u80fd\u5374\u5b8c\u5168\u8ddf\u4e0d\u4e0a, \u843d\u5f97\u4e2a\u9ad8\u9891\u4f4e\u80fd\u7684\u81ed\u540d. \u5f53\u65f6 AMD \u4e3b\u6253\u7684\u662f K8 \u5904\u7406\u5668, \u8fd9\u4e5f\u662f\u5386\u53f2\u4e0a\u552f\u4e00\u4e00\u6bb5\u65f6\u95f4 AMD CPU \u6027\u80fd\u5b8c\u5168\u8d85\u8fc7 Intel CPU \u7684\u65f6\u4ee3, \u4e0d\u8fc7\u8fd9\u6bb5\u8f89\u714c\u7684\u5386\u53f2\u9a6c\u4e0a\u5c31\u56e0\u4e3a Intel \u7684\u9177\u777f\u7cfb\u5217(Intel Core)\u5904\u7406\u5668\u7684\u51fa\u73b0\u800c\u7ec8\u7ed3\u4e86. \u98ce\u9669 \u98ce\u9669(hazard)\u662f\u6307\u5728\u8ba1\u7b97\u673a CPU \u7684\u5fae\u4f53\u7cfb\u7ed3\u6784\u4e2d, \u6307\u4ee4\u6d41\u6c34\u7ebf\u4e71\u5e8f\u6267\u884c\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5f97\u5230\u4e0d\u6b63\u786e\u7684\u8ba1\u7b97\u7ed3\u679c. \u4e00\u4e2a\u6307\u4ee4\u5728\u6267\u884c\u7684\u65f6\u5019, \u5982\u679c\u9700\u8981\u7b49\u5f85\u6d41\u6c34\u7ebf\u4e0a\u524d\u4e00\u4e2a\u6307\u4ee4\u5148\u6267\u884c\u5b8c\u6bd5\u7684\u8bdd, \u90a3\u4e48\u8fd9\u4e24\u4e2a\u6307\u4ee4\u76f8\u4e92\u4e4b\u95f4\u5f7c\u6b64\u6709\u4f9d\u8d56\u5173\u7cfb. \u6709 3 \u7c7b\u5178\u578b\u7684\u98ce\u9669: \u8d44\u6e90\u51b2\u7a81: \u6d41\u6c34\u7ebf\u4e0a\u7684\u4e00\u4e2a\u6307\u4ee4\u9700\u8981\u4f7f\u7528\u5df2\u7ecf\u88ab\u53e6\u4e00\u4e2a\u6307\u4ee4\u5360\u636e\u7684\u8d44\u6e90. \u6570\u636e\u51b2\u7a81. \u6307\u4ee4\u5c42\u7684\u6570\u636e\u51b2\u7a81: \u6307\u4ee4\u9700\u8981\u7684\u6570\u636e\u8fd8\u6ca1\u6709\u8ba1\u7b97\u51fa\u6765 \u4f20\u8f93\u5c42\u7684\u6570\u636e\u51b2\u7a81: \u6307\u4ee4\u9700\u8981\u7684\u6570\u636e\u8fd8\u6ca1\u6709\u88ab\u5b58\u5165\u5bc4\u5b58\u5668 \u63a7\u5236\u6d41\u51b2\u7a81: \u6d41\u6c34\u7ebf\u5fc5\u987b\u7b49\u5f85\u4e00\u4e2a\u6709\u6761\u4ef6\u7684\u8df3\u8f6c\u6307\u4ee4\u662f\u5426\u4f1a\u88ab\u6267\u884c. \u8fd9\u4e9b\u51b2\u7a81\u5bfc\u81f4\u76f8\u5bf9\u5e94\u7684\u6307\u4ee4, \u5fc5\u987b\u5728\u6d41\u6c34\u7ebf\u7684\u5f00\u59cb\u5904\u7b49\u5019, \u8fd9\u4f1a\u5728\u6d41\u6c34\u7ebf\u4e0a\u5bfc\u81f4\u7a7a\u7f3a. \u8fd9\u6837\u7684\u8bdd\u6d41\u6c34\u7ebf\u5c31\u4e0d\u80fd\u987a\u5229\u8fd0\u884c, \u5904\u7406\u901f\u5ea6\u4fbf\u5f00\u59cb\u4e0b\u964d. \u56e0\u6b64\u8981\u5c3d\u91cf\u907f\u514d\u8fd9\u6837\u7684\u51b2\u7a81, \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u6765\u907f\u514d\u51b2\u7a81: \u901a\u8fc7\u589e\u52a0\u529f\u80fd\u5355\u4f4d\u53ef\u4ee5\u89e3\u51b3\u8d44\u6e90\u51b2\u7a81. \u901a\u8fc7\u628a\u6d41\u6c34\u7ebf\u540e\u9762\u7684\u8ba1\u7b97\u7ed3\u679c\u7acb\u523b\u5411\u524d\u4f20\u53ef\u4ee5\u907f\u514d\u8bb8\u591a\u6570\u636e\u51b2\u7a81. \u901a\u8fc7\u5206\u652f\u9884\u6d4b\u5668\u53ef\u4ee5\u907f\u514d\u63a7\u5236\u51b2\u7a81. \u5728\u8fd9\u91cc\u5904\u7406\u5668\u9884\u6d4b\u6027\u5730\u7ee7\u7eed\u8fd0\u7b97, \u76f4\u5230\u6b63\u5f0f\u9884\u6d4b\u662f\u6b63\u786e\u4e3a\u6b62. \u5047\u5982\u9884\u6d4b\u9519\u8bef\u7684\u8bdd\u90a3\u4e48\u5728\u5176\u4e2d\u5df2\u7ecf\u6267\u884c\u7684\u6307\u4ee4\u8981\u88ab\u63a8\u7ffb. \u5c24\u5176\u6d41\u6c34\u7ebf\u975e\u5e38\u957f\u7684\u5904\u7406\u5668\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8981\u6d6a\u8d39\u8bb8\u591a\u65f6\u95f4. \u56e0\u6b64\u8fd9\u4e9b\u5904\u7406\u5668\u62e5\u6709\u975e\u5e38\u9ad8\u7ea7\u7684\u5206\u652f\u9884\u6d4b\u6280\u672f, \u53ea\u6709\u767e\u5206\u4e4b\u4e00\u7684\u5206\u652f\u9884\u6d4b\u4f1a\u53d1\u751f\u9519\u8bef, \u5176\u6d41\u6c34\u7ebf\u9700\u8981\u6e05\u9664. \u957f\u6d41\u6c34\u7ebf\u7684\u4f18\u70b9\u5728\u4e8e\u5b83\u80fd\u591f\u5927\u5927\u5730\u63d0\u9ad8\u5904\u7406\u5668\u901f\u5ea6, \u4f46\u7f3a\u70b9\u5728\u4e8e\u8bb8\u591a\u6307\u4ee4\u88ab\u540c\u65f6\u6267\u884c, \u5047\u5982\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7684\u8bdd\u6574\u4e2a\u6d41\u6c34\u7ebf\u4e0a\u6240\u6709\u7684\u6307\u4ee4\u5168\u90e8\u8981\u88ab\u53d6\u6d88, \u6d41\u6c34\u7ebf\u8981\u88ab\u91cd\u65b0\u5145\u6ee1. \u8fd9\u9700\u8981\u4ece\u5b58\u50a8\u5668\u6216\u8005\u4e2d\u592e\u5904\u7406\u5668\u7f13\u5b58\u4e2d\u8c03\u7528\u6307\u4ee4, \u5bfc\u81f4\u5ef6\u8fdf\u65f6\u95f4, \u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\u5904\u7406\u5668\u6ca1\u6709\u5de5\u4f5c. \u5728\u4eff\u771f\u5668\u5f00\u53d1\u9886\u57df, \u5bf9\u4e00\u679a\u6d41\u6c34\u7ebf\u6a21\u578b\u7684\u5904\u7406\u5668\u8fdb\u884c\u4eff\u771f\u5668\u5b9e\u73b0\u7684\u65f6\u5019, \u4f1a\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f: \u5355\u6307\u4ee4\u7ebf\u6027\u6267\u884c \u591a\u6307\u4ee4\u5e76\u884c\u6267\u884c \u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5b8c\u5168\u9075\u5b88\u786c\u4ef6\u89c4\u8303, \u4f46\u7f3a\u70b9\u5728\u4e8e\u5f00\u53d1\u8005\u5fc5\u987b\u81ea\u5df1\u5b9e\u73b0\u5206\u652f\u9884\u6d4b\u548c\u98ce\u9669\u5904\u7406, \u5982\u679c\u5e0c\u671b\u66f4\u52a0\u8d34\u8fd1\u786c\u4ef6\u5b9e\u73b0\u7684\u8bdd, \u53ef\u80fd\u8fd8\u9700\u8981\u5b9e\u73b0\u7f13\u5b58\u6a21\u62df\u7b49\u5404\u79cd\u529f\u80fd, \u4ece\u4ee3\u7801\u91cf\u548c\u590d\u6742\u5ea6\u4e0a\u6765\u8bf4\u4f1a\u6bd4\u7b2c\u4e00\u79cd\u9ad8\u4e0d\u5c11. \u540c\u65f6, \u7b2c\u4e8c\u79cd\u5b9e\u73b0\u65b9\u5f0f\u4e00\u822c\u4e0d\u4f1a\u7528\u5728\u5b9e\u9645\u9879\u76ee\u4e0a, \u5176\u66f4\u591a\u7528\u4e8e\u6559\u5b66\u6216\u6d4b\u8bd5\u76ee\u7684. \u603b\u7684\u800c\u8a00, \u672c\u4e66\u5c06\u91c7\u53d6\u76f8\u5bf9\u7b80\u5355\u4e14\u6027\u80fd\u66f4\u597d\u7684\u5355\u6307\u4ee4\u7ebf\u6027\u6267\u884c\u65b9\u5f0f. \u81ea\u6b64\u5173\u4e8e CPU \u7684\u524d\u7f6e\u77e5\u8bc6\u8bb2\u8ff0\u5b8c\u6bd5, \u662f\u65f6\u5019\u5411 LR35902 \u82af\u7247\u53d1\u8d77\u771f\u6b63\u7684\u6311\u6218\u4e86!","title":"GB-CPU-\u6d41\u6c34\u7ebf"},{"location":"content/gameboy/cpu/pipeline/#_1","text":"\u672c\u8282\u5c06\u8ba8\u8bba CPU \u8bbe\u8ba1\u4e2d\u7684\u4e00\u4e2a\u77e5\u8bc6: \u6d41\u6c34\u7ebf. \u5b83\u548c\u672c\u4e66\u8981\u5b9e\u73b0\u7684 Game Boy \u4eff\u771f\u5668\u5e76\u6ca1\u6709\u592a\u5927\u5173\u7cfb, \u8bfb\u8005\u5b8c\u5168\u53ef\u4ee5\u5c06\u672c\u8282\u4f5c\u4e3a\u4e00\u4e2a\u6269\u5c55\u9605\u8bfb. \u4f46\u662f\u4e86\u89e3\u6d41\u6c34\u7ebf\u5bb9\u6613\u5e2e\u52a9\u8bfb\u8005\u66f4\u597d\u7684\u53bb\u5b9e\u73b0 CPU \u4eff\u771f\u5668.","title":"\u5904\u7406\u5668\u6d41\u6c34\u7ebf\u6982\u8ff0"},{"location":"content/gameboy/cpu/pipeline/#_2","text":"\u6d41\u6c34\u7ebf\u7684\u6982\u5ff5\u6700\u65e9\u8d77\u6e90\u4e8e\u5de5\u5382, \u5047\u8bbe\u67d0\u5730\u6709\u4e2a\u6c7d\u8f66\u751f\u4ea7\u5de5\u5382, \u751f\u6210\u4e00\u8f86\u6210\u54c1\u8f66\u7684\u751f\u4ea7\u8fc7\u7a0b\u5206\u4e3a\u5e95\u76d8\u751f\u4ea7, \u8f66\u8f6e\u751f\u4ea7\u548c\u6700\u540e\u7ec4\u88c5\u4e09\u4e2a\u6b65\u9aa4. \u6bcf\u4e2a\u5e95\u76d8\u9700\u8981\u6d88\u8017\u4e00\u4e2a\u5de5\u4eba 10 \u79d2, \u8f66\u8f6e\u9700\u8981\u6d88\u8017\u5de5\u4eba 20 \u79d2, \u7ec4\u88c5\u9700\u8981\u6d88\u8017\u5de5\u4eba 15 \u79d2. \u56e0\u6b64\u751f\u4ea7\u4e00\u8f86\u5b8c\u6574\u7684\u6c7d\u8f66, \u603b\u5171\u9700\u8981\u6d88\u8017 45 \u79d2\u65f6\u95f4. \u4f46\u8fd9\u79cd\u751f\u4ea7\u6a21\u578b\u4e0b\u6709\u4e00\u4e2a\u95ee\u9898, \u5c31\u662f\u5f53\u751f\u4ea7\u8f66\u8f6e\u65f6, \u7b2c\u4e00\u4e2a\u751f\u4ea7\u5e95\u76d8\u7684\u5de5\u4eba\u662f\u95f2\u7f6e\u7684. \u8fd9\u65f6\u5019, \u53ef\u4ee5\u8ba9\u7b2c\u4e00\u4e2a\u5de5\u4eba\u751f\u4ea7\u5b8c\u7b2c\u4e00\u8f86\u8f66\u7684\u5e95\u76d8\u540e, \u7acb\u5373\u6295\u5165\u53bb\u751f\u4ea7\u7b2c\u4e8c\u8f86\u8f66\u7684\u5e95\u76d8, \u8fd9\u6837\u4e0b\u6765\u5e73\u5747\u4e00\u8f86\u8f66\u53ea\u9700\u8981\u82b1\u8d39 3 \u4e2a\u5de5\u4eba\u4e2d\u6700\u8017\u65f6\u7684\u90a3\u4e2a\u5de5\u4eba, \u4e5f\u5c31\u662f 20 \u79d2\u65f6\u95f4. \u5904\u7406\u5668\u4e2d\u4e5f\u6709\u4e2a\u7ecf\u5178\u7684 5 \u7ea7\u6d41\u6c34\u7ebf\u6a21\u578b, \u5b83\u6765\u81ea MIPS(MIPS architecture, MIPS \u67b6\u6784), \u5728\u6b64\u6d41\u6c34\u7ebf\u6a21\u578b\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u751f\u547d\u5468\u671f\u6709\u5982\u4e0b\u8fc7\u7a0b: \u53d6\u6307. \u53d6\u6307(Instruction Fetch)\u662f\u6307\u628a\u6307\u4ee4\u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u51fa\u6765\u7684\u8fc7\u7a0b. \u8bd1\u7801. \u8bd1\u7801(Instruction Decode)\u662f\u6307\u5c06\u6307\u4ee4\u8fdb\u884c\u7ffb\u8bd1\u7684\u8fc7\u7a0b. \u7ecf\u8fc7\u8be5\u6b65\u9aa4\u540e, \u6307\u4ee4\u9700\u8981\u8bfb\u53d6\u54ea\u4e9b\u5bc4\u5b58\u5668\u4ee5\u53ca\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u5c06\u88ab\u53d6\u51fa. \u6267\u884c. \u6267\u884c(Instruction Execute)\u4f7f\u7528\u7684\u4e3b\u8981\u7684\u90e8\u4ef6\u5c31\u662f ALU(\u7b97\u672f\u903b\u8f91\u90e8\u4ef6\u8fd0\u7b97\u5668), \u662f\u6307\u5bf9\u6307\u4ee4\u771f\u6b63\u8fdb\u884c\u8fd0\u7b97\u7684\u8fc7\u7a0b. CPU \u4e2d\u7edd\u5927\u90e8\u5206\u7684\u8ba1\u7b97\u64cd\u4f5c\u90fd\u662f\u5728\u8fd9\u91cc\u9762\u5b8c\u6210\u7684. \u5e38\u89c1\u7684\u64cd\u4f5c\u6bd4\u5982\u8fdb\u884c\u6570\u5b57\u7684\u52a0\u51cf\u4e58\u9664\u7b49. \u8bbf\u95ee. \u8bbf\u95ee(Memory Access)\u662f\u6307\u8bfb\u53d6/\u5199\u5165\u6570\u636e\u5230\u5185\u5b58\u4e2d\u7684\u8fc7\u7a0b. \u56de\u5199. \u56de\u5199(Write Back)\u662f\u6307\u5c06\u8fd0\u7b97\u7ed3\u679c\u5199\u56de\u5bc4\u5b58\u5668\u7684\u8fc7\u7a0b. \u8be5\u503c\u53ef\u4ee5\u662f\u6267\u884c\u9636\u6bb5\u7684\u7ed3\u679c, \u4e5f\u53ef\u4ee5\u662f\u8bbf\u95ee\u9636\u6bb5\u7684\u7ed3\u679c, \u5177\u4f53\u53d6\u51b3\u4e8e\u6307\u4ee4\u7c7b\u578b. \u5728 CPU \u8bbe\u8ba1\u4e2d, \u53ef\u4ee5\u91c7\u7528\u7c7b\u4f3c\u5de5\u5382\u4e2d\u7684\u6d41\u6c34\u7ebf\u65b9\u5f0f\u4ee5\u63d0\u9ad8\u6027\u80fd. \u5f53\u7b2c\u4e00\u6761\u6307\u4ee4\u4ece\u53d6\u6307\u9636\u6bb5\u8fdb\u5165\u8bd1\u7801\u9636\u6bb5\u540e, \u53d6\u6307\u6a21\u5757\u5c06\u7acb\u5373\u8fdb\u884c\u7b2c\u4e8c\u6761\u6307\u4ee4\u7684\u53d6\u6307\u64cd\u4f5c, \u5e76\u4f9d\u6b21\u7c7b\u63a8, \u7406\u8bba\u4e0a\u6bcf\u4e00\u6761\u6307\u4ee4\u7684\u6267\u884c\u5468\u671f\u7b49\u4e8e 5 \u7ea7\u6d41\u6c34\u7ebf\u4e2d\u8017\u65f6\u6700\u957f\u7684\u4e00\u7ea7\u7684\u6267\u884c\u5468\u671f. \u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a(IF: \u8bfb\u53d6\u6307\u4ee4, ID: \u6307\u4ee4\u89e3\u7801, EX: \u8fd0\u884c, MEM: \u5b58\u50a8\u5668\u8bbf\u95ee, WB: \u5199\u56de\u5bc4\u5b58\u5668). \u5e76\u975e\u6240\u6709\u5904\u7406\u5668\u90fd\u662f\u6d41\u6c34\u7ebf\u5316\u7684, \u4e00\u4e9b\u65e9\u671f\u5904\u7406\u5668\u5c31\u672a\u4f7f\u7528\u6d41\u6c34\u7ebf\u8bbe\u8ba1. \u4f46\u8fd9\u4e9b\u672a\u6d41\u6c34\u7ebf\u5316\u7684\u67b6\u6784\u8fd0\u884c\u6548\u7387\u5f88\u4f4e, \u56e0\u4e3a\u6709\u4e9b\u5904\u7406\u5668\u7684\u6a21\u5757\u5728\u5176\u4ed6\u6a21\u5757\u8fd0\u884c\u65f6\u662f\u95f2\u7f6e\u7684. \u6d41\u6c34\u7ebf\u867d\u5e76\u4e0d\u4f1a\u5b8c\u5168\u6d88\u9664 CPU \u7684\u95f2\u7f6e\u65f6\u95f4, \u4f46\u662f\u80fd\u591f\u8ba9\u8fd9\u4e9b\u6a21\u5757\u5e76\u53d1\u8fd0\u4f5c\u800c\u5927\u5e45\u63d0\u5347\u7a0b\u5e8f\u8fd0\u884c\u7684\u6548\u7387. \u6d41\u6c34\u7ebf\u7684\u5176\u4e2d\u4e00\u4e2a\u7ea7\u8d8a\u7b80\u5355, \u5219\u5904\u7406\u5b83\u7684\u9891\u7387\u5c31\u53ef\u4ee5\u8d8a\u9ad8. \u73b0\u4ee3\u7684\u4e2d\u592e\u5904\u7406\u5668\u4e2d\u4e00\u4e2a\u6307\u4ee4\u6d41\u6c34\u7ebf\u53ef\u4ee5\u957f\u4e8e 30 \u7ea7. \u901a\u5e38\u6765\u8bb2, \u5728\u4e00\u5b9a\u8303\u56f4\u5185, \u6d41\u6c34\u7ebf\u7ea7\u522b\u8d8a\u591a, \u5355\u4e2a\u6307\u4ee4\u7684\u8fd0\u884c\u901f\u5ea6\u8d8a\u6162, \u4f46 CPU \u6574\u4f53\u541e\u5410\u91cf\u5374\u8d8a\u9ad8, \u56e0\u4e3a\u540c\u4e00\u65f6\u95f4\u53ef\u4ee5\u5904\u7406\u66f4\u591a\u6307\u4ee4. \u4f46\u51e1\u4e8b\u90fd\u6709\u53cd\u4f8b, \u6bd4\u5982 Intel \u7684 Pentium 4(\u5954\u817e 4)\u7cfb\u5217\u5904\u7406\u5668, \u5176\u8bbe\u8ba1\u7684\u6d41\u6c34\u7ebf\u7531\u4e8e\u8fc7\u957f(\u603b\u5171 31 \u7ea7\u7684\u6d41\u6c34\u7ebf), \u867d\u7136\u83b7\u5f97\u4e86\u5728\u90a3\u4e2a\u5e74\u4ee3\u6781\u9ad8\u7684\u4e3b\u9891, \u4f46\u7efc\u5408\u6027\u80fd\u5374\u5b8c\u5168\u8ddf\u4e0d\u4e0a, \u843d\u5f97\u4e2a\u9ad8\u9891\u4f4e\u80fd\u7684\u81ed\u540d. \u5f53\u65f6 AMD \u4e3b\u6253\u7684\u662f K8 \u5904\u7406\u5668, \u8fd9\u4e5f\u662f\u5386\u53f2\u4e0a\u552f\u4e00\u4e00\u6bb5\u65f6\u95f4 AMD CPU \u6027\u80fd\u5b8c\u5168\u8d85\u8fc7 Intel CPU \u7684\u65f6\u4ee3, \u4e0d\u8fc7\u8fd9\u6bb5\u8f89\u714c\u7684\u5386\u53f2\u9a6c\u4e0a\u5c31\u56e0\u4e3a Intel \u7684\u9177\u777f\u7cfb\u5217(Intel Core)\u5904\u7406\u5668\u7684\u51fa\u73b0\u800c\u7ec8\u7ed3\u4e86.","title":"\u6d41\u6c34\u7ebf\u7684\u6982\u5ff5"},{"location":"content/gameboy/cpu/pipeline/#_3","text":"\u98ce\u9669(hazard)\u662f\u6307\u5728\u8ba1\u7b97\u673a CPU \u7684\u5fae\u4f53\u7cfb\u7ed3\u6784\u4e2d, \u6307\u4ee4\u6d41\u6c34\u7ebf\u4e71\u5e8f\u6267\u884c\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5f97\u5230\u4e0d\u6b63\u786e\u7684\u8ba1\u7b97\u7ed3\u679c. \u4e00\u4e2a\u6307\u4ee4\u5728\u6267\u884c\u7684\u65f6\u5019, \u5982\u679c\u9700\u8981\u7b49\u5f85\u6d41\u6c34\u7ebf\u4e0a\u524d\u4e00\u4e2a\u6307\u4ee4\u5148\u6267\u884c\u5b8c\u6bd5\u7684\u8bdd, \u90a3\u4e48\u8fd9\u4e24\u4e2a\u6307\u4ee4\u76f8\u4e92\u4e4b\u95f4\u5f7c\u6b64\u6709\u4f9d\u8d56\u5173\u7cfb. \u6709 3 \u7c7b\u5178\u578b\u7684\u98ce\u9669: \u8d44\u6e90\u51b2\u7a81: \u6d41\u6c34\u7ebf\u4e0a\u7684\u4e00\u4e2a\u6307\u4ee4\u9700\u8981\u4f7f\u7528\u5df2\u7ecf\u88ab\u53e6\u4e00\u4e2a\u6307\u4ee4\u5360\u636e\u7684\u8d44\u6e90. \u6570\u636e\u51b2\u7a81. \u6307\u4ee4\u5c42\u7684\u6570\u636e\u51b2\u7a81: \u6307\u4ee4\u9700\u8981\u7684\u6570\u636e\u8fd8\u6ca1\u6709\u8ba1\u7b97\u51fa\u6765 \u4f20\u8f93\u5c42\u7684\u6570\u636e\u51b2\u7a81: \u6307\u4ee4\u9700\u8981\u7684\u6570\u636e\u8fd8\u6ca1\u6709\u88ab\u5b58\u5165\u5bc4\u5b58\u5668 \u63a7\u5236\u6d41\u51b2\u7a81: \u6d41\u6c34\u7ebf\u5fc5\u987b\u7b49\u5f85\u4e00\u4e2a\u6709\u6761\u4ef6\u7684\u8df3\u8f6c\u6307\u4ee4\u662f\u5426\u4f1a\u88ab\u6267\u884c. \u8fd9\u4e9b\u51b2\u7a81\u5bfc\u81f4\u76f8\u5bf9\u5e94\u7684\u6307\u4ee4, \u5fc5\u987b\u5728\u6d41\u6c34\u7ebf\u7684\u5f00\u59cb\u5904\u7b49\u5019, \u8fd9\u4f1a\u5728\u6d41\u6c34\u7ebf\u4e0a\u5bfc\u81f4\u7a7a\u7f3a. \u8fd9\u6837\u7684\u8bdd\u6d41\u6c34\u7ebf\u5c31\u4e0d\u80fd\u987a\u5229\u8fd0\u884c, \u5904\u7406\u901f\u5ea6\u4fbf\u5f00\u59cb\u4e0b\u964d. \u56e0\u6b64\u8981\u5c3d\u91cf\u907f\u514d\u8fd9\u6837\u7684\u51b2\u7a81, \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u6765\u907f\u514d\u51b2\u7a81: \u901a\u8fc7\u589e\u52a0\u529f\u80fd\u5355\u4f4d\u53ef\u4ee5\u89e3\u51b3\u8d44\u6e90\u51b2\u7a81. \u901a\u8fc7\u628a\u6d41\u6c34\u7ebf\u540e\u9762\u7684\u8ba1\u7b97\u7ed3\u679c\u7acb\u523b\u5411\u524d\u4f20\u53ef\u4ee5\u907f\u514d\u8bb8\u591a\u6570\u636e\u51b2\u7a81. \u901a\u8fc7\u5206\u652f\u9884\u6d4b\u5668\u53ef\u4ee5\u907f\u514d\u63a7\u5236\u51b2\u7a81. \u5728\u8fd9\u91cc\u5904\u7406\u5668\u9884\u6d4b\u6027\u5730\u7ee7\u7eed\u8fd0\u7b97, \u76f4\u5230\u6b63\u5f0f\u9884\u6d4b\u662f\u6b63\u786e\u4e3a\u6b62. \u5047\u5982\u9884\u6d4b\u9519\u8bef\u7684\u8bdd\u90a3\u4e48\u5728\u5176\u4e2d\u5df2\u7ecf\u6267\u884c\u7684\u6307\u4ee4\u8981\u88ab\u63a8\u7ffb. \u5c24\u5176\u6d41\u6c34\u7ebf\u975e\u5e38\u957f\u7684\u5904\u7406\u5668\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8981\u6d6a\u8d39\u8bb8\u591a\u65f6\u95f4. \u56e0\u6b64\u8fd9\u4e9b\u5904\u7406\u5668\u62e5\u6709\u975e\u5e38\u9ad8\u7ea7\u7684\u5206\u652f\u9884\u6d4b\u6280\u672f, \u53ea\u6709\u767e\u5206\u4e4b\u4e00\u7684\u5206\u652f\u9884\u6d4b\u4f1a\u53d1\u751f\u9519\u8bef, \u5176\u6d41\u6c34\u7ebf\u9700\u8981\u6e05\u9664. \u957f\u6d41\u6c34\u7ebf\u7684\u4f18\u70b9\u5728\u4e8e\u5b83\u80fd\u591f\u5927\u5927\u5730\u63d0\u9ad8\u5904\u7406\u5668\u901f\u5ea6, \u4f46\u7f3a\u70b9\u5728\u4e8e\u8bb8\u591a\u6307\u4ee4\u88ab\u540c\u65f6\u6267\u884c, \u5047\u5982\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7684\u8bdd\u6574\u4e2a\u6d41\u6c34\u7ebf\u4e0a\u6240\u6709\u7684\u6307\u4ee4\u5168\u90e8\u8981\u88ab\u53d6\u6d88, \u6d41\u6c34\u7ebf\u8981\u88ab\u91cd\u65b0\u5145\u6ee1. \u8fd9\u9700\u8981\u4ece\u5b58\u50a8\u5668\u6216\u8005\u4e2d\u592e\u5904\u7406\u5668\u7f13\u5b58\u4e2d\u8c03\u7528\u6307\u4ee4, \u5bfc\u81f4\u5ef6\u8fdf\u65f6\u95f4, \u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\u5904\u7406\u5668\u6ca1\u6709\u5de5\u4f5c. \u5728\u4eff\u771f\u5668\u5f00\u53d1\u9886\u57df, \u5bf9\u4e00\u679a\u6d41\u6c34\u7ebf\u6a21\u578b\u7684\u5904\u7406\u5668\u8fdb\u884c\u4eff\u771f\u5668\u5b9e\u73b0\u7684\u65f6\u5019, \u4f1a\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f: \u5355\u6307\u4ee4\u7ebf\u6027\u6267\u884c \u591a\u6307\u4ee4\u5e76\u884c\u6267\u884c \u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5b8c\u5168\u9075\u5b88\u786c\u4ef6\u89c4\u8303, \u4f46\u7f3a\u70b9\u5728\u4e8e\u5f00\u53d1\u8005\u5fc5\u987b\u81ea\u5df1\u5b9e\u73b0\u5206\u652f\u9884\u6d4b\u548c\u98ce\u9669\u5904\u7406, \u5982\u679c\u5e0c\u671b\u66f4\u52a0\u8d34\u8fd1\u786c\u4ef6\u5b9e\u73b0\u7684\u8bdd, \u53ef\u80fd\u8fd8\u9700\u8981\u5b9e\u73b0\u7f13\u5b58\u6a21\u62df\u7b49\u5404\u79cd\u529f\u80fd, \u4ece\u4ee3\u7801\u91cf\u548c\u590d\u6742\u5ea6\u4e0a\u6765\u8bf4\u4f1a\u6bd4\u7b2c\u4e00\u79cd\u9ad8\u4e0d\u5c11. \u540c\u65f6, \u7b2c\u4e8c\u79cd\u5b9e\u73b0\u65b9\u5f0f\u4e00\u822c\u4e0d\u4f1a\u7528\u5728\u5b9e\u9645\u9879\u76ee\u4e0a, \u5176\u66f4\u591a\u7528\u4e8e\u6559\u5b66\u6216\u6d4b\u8bd5\u76ee\u7684. \u603b\u7684\u800c\u8a00, \u672c\u4e66\u5c06\u91c7\u53d6\u76f8\u5bf9\u7b80\u5355\u4e14\u6027\u80fd\u66f4\u597d\u7684\u5355\u6307\u4ee4\u7ebf\u6027\u6267\u884c\u65b9\u5f0f. \u81ea\u6b64\u5173\u4e8e CPU \u7684\u524d\u7f6e\u77e5\u8bc6\u8bb2\u8ff0\u5b8c\u6bd5, \u662f\u65f6\u5019\u5411 LR35902 \u82af\u7247\u53d1\u8d77\u771f\u6b63\u7684\u6311\u6218\u4e86!","title":"\u98ce\u9669"},{"location":"content/gameboy/cpu/register/","text":"\u5bc4\u5b58\u5668\u4e0e\u5b58\u50a8\u7cfb\u7edf ALU \u53ef\u4ee5\u5b8c\u6210\u5bf9\u6570\u636e\u7684\u7b97\u6570\u548c\u903b\u8f91\u8fd0\u7b97, \u672c\u5c0f\u8282\u5c06\u8981\u4ecb\u7ecd\u7684\u662f\u5982\u4f55\u5bf9\u6570\u636e\u8fdb\u884c\u5b58\u50a8. \u5728\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e0b\u5b58\u50a8\u7cfb\u7edf\u901a\u5e38\u5206\u4e3a\u5982\u4e0b\u51e0\u4e2a\u5c42\u6b21: \u5bc4\u5b58\u5668. \u5bf9\u4e8e CPU \u6765\u8bf4\u62e5\u6709\u6700\u5feb\u7684\u8bbf\u95ee\u901f\u5ea6. \u5728 8 \u4f4d\u5904\u7406\u5668, \u6bcf\u4e2a\u5bc4\u5b58\u5668\u5c31\u662f 8 \u4f4d. \u9ad8\u901f\u7f13\u5b58(L1-L3: SRAM) \u7b2c\u4e00\u7ea7\u9ad8\u901f\u7f13\u5b58(L1): \u901a\u5e38\u8bbf\u95ee\u53ea\u9700\u8981\u51e0\u4e2a\u5468\u671f, \u901a\u5e38\u662f\u51e0\u5341\u4e2a KB. \u7b2c\u4e8c\u7ea7\u9ad8\u901f\u7f13\u5b58(L2): \u6bd4 L1 \u7ea6\u6709 2 \u5230 10 \u500d\u8f83\u9ad8\u5ef6\u8fdf\u6027, \u901a\u5e38\u662f\u51e0\u767e\u4e2a KB \u6216\u66f4\u591a. \u7b2c\u4e09\u7ea7\u9ad8\u901f\u7f13\u5b58(L3)(\u4e0d\u4e00\u5b9a\u6709): \u6bd4 L2 \u66f4\u9ad8\u7684\u5ef6\u8fdf\u6027, \u901a\u5e38\u6709\u6570 MB \u4e4b\u5927. \u7b2c\u56db\u7ea7\u9ad8\u901f\u7f13\u5b58(L4)(\u4e0d\u666e\u904d): CPU \u5916\u90e8\u7684 DRAM, \u4f46\u901f\u5ea6\u8f83\u4e3b\u5b58\u9ad8. \u4e3b\u5b58(DRAM): \u8bbf\u95ee\u9700\u8981\u51e0\u767e\u4e2a\u5468\u671f, \u53ef\u4ee5\u5927\u5230\u6570\u5341 GB. \u78c1\u76d8\u5b58\u50a8: \u9700\u8981\u6210\u5343\u4e0a\u767e\u4e2a\u5468\u671f, \u5bb9\u91cf\u975e\u5e38\u5927. \u5728 Windows \u7cfb\u7edf\u4e0b\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u67e5\u770b CPU \u7684\u9ad8\u901f\u7f13\u5b58\u4fe1\u606f, \u5176\u4f4d\u4e8e\u4efb\u52a1\u7ba1\u7406\u5668\u7684\u6027\u80fd\u5206\u9875\u4e0b. \u6bcf\u4e00\u5c42\u76f8\u8f83\u4e8e\u4e0b\u4e00\u5c42\u76f8\u6bd4\u90fd\u62e5\u6709\u8f83\u9ad8\u7684\u901f\u5ea6\u548c\u8f83\u4f4e\u5ef6\u8fdf\u6027, \u4ee5\u53ca\u8f83\u5c0f\u7684\u5bb9\u91cf(\u4e5f\u6709\u5c11\u91cf\u4f8b\u5916, \u5982 AMD \u65e9\u671f\u7684 Duron CPU). \u5927\u90e8\u5206\u73b0\u4eca\u7684\u4e2d\u592e\u5904\u7406\u5668\u7684\u901f\u5ea6\u90fd\u975e\u5e38\u7684\u5feb. \u5927\u90e8\u5206\u7a0b\u5e8f\u5de5\u4f5c\u91cf\u9700\u8981\u5b58\u50a8\u5668\u8bbf\u95ee, \u7531\u4e8e\u9ad8\u901f\u7f13\u5b58\u7684\u6548\u7387\u548c\u5b58\u50a8\u5668\u4f20\u8f93\u4f4d\u4e8e\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e0d\u540c\u7b49\u7ea7, \u6240\u4ee5\u5b9e\u9645\u4e0a\u4f1a\u9650\u5236\u5904\u7406\u7684\u901f\u5ea6, \u5bfc\u81f4\u4e2d\u592e\u5904\u7406\u5668\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u7b49\u5f85\u5b58\u50a8\u5668 I/O \u5b8c\u6210\u5de5\u4f5c. \u5bc4\u5b58\u5668\u4e0e\u9ad8\u901f\u7f13\u5b58\u5176\u786c\u4ef6\u7535\u8def\u5b9e\u73b0\u539f\u7406\u6bd4\u8f83\u7c7b\u4f3c, \u90fd\u662f SRAM(\u9759\u6001\u968f\u673a\u5b58\u50a8\u5668), \u8fd9\u7c7b\u786c\u4ef6\u7684\u7279\u70b9\u662f\u8bfb\u5199\u901f\u5ea6\u5feb, \u4f46\u662f\u6210\u672c\u8d35, \u6240\u4ee5\u4e00\u822c\u5bb9\u91cf\u90fd\u4e0d\u662f\u5f88\u5927. \u5230\u4e3b\u5b58\u65f6, \u901a\u5e38\u91c7\u7528 DRAM, \u57fa\u672c\u5355\u5143\u7531\u4e00\u4e2a\u6676\u4f53\u7ba1\u548c\u4e00\u4e2a\u7535\u5bb9\u7ec4\u6210, \u76f8\u5bf9\u5ec9\u4ef7, \u4e0d\u8fc7\u7531\u4e8e\u4f7f\u7528\u7535\u5bb9\u5145\u653e\u7535\u7684\u9ad8\u4f4e\u7535\u5e73\u8868\u793a 0 \u548c 1, \u56e0\u6b64\u9700\u8981\u4e0d\u65ad\u5237\u65b0. \u5bc4\u5b58\u5668\u662f CPU \u4e2d\u91cd\u8981\u7684\u7ec4\u6210\u90e8\u5206, \u5b83\u4eec\u53ef\u7528\u6765\u6682\u5b58\u6307\u4ee4, \u6570\u636e\u548c\u5730\u5740. \u8981\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u5bc4\u5b58\u5668\u5e76\u4e0d\u96be, \u53ea\u9700\u8981\u51e0\u4e2a\u95e8\u7535\u8def\u518d\u52a0\u4e0a\u4e00\u70b9\u70b9\u7684\u601d\u8003. \u5c06\u57fa\u672c\u95e8\u7535\u8def\u7684\u8f93\u51fa\u8fde\u63a5\u81f3\u8f93\u5165 \u9996\u5148, \u6765\u601d\u8003\u4e00\u4e0b\u8be5\u573a\u666f: \u5982\u679c\u5c06\u4e00\u4e2a\u6216\u95e8\u7684\u8f93\u5165\u63a5\u5165\u5230\u5b83\u7684\u8f93\u5165\u4e0a, \u4f1a\u53d1\u751f\u751f\u4e48\u4e8b\u60c5? \u5047\u8bbe\u8be5\u6216\u95e8\u7684\u8f93\u5165 A \u4e0e B \u7684\u521d\u59cb\u503c\u5747\u4e3a 0, \u6b64\u65f6\u4e09\u4e2a\u7aef\u53e3\u72b6\u6001(A=0, B=0, Y=0). \u5982\u679c\u6b64\u65f6 A \u4ece 0 \u53d8\u4e3a 1, \u6b64\u65f6\u4e09\u4e2a\u7aef\u53e3\u72b6\u6001(A=1, B=0, Y=1). \u8f93\u51fa Y \u53cd\u9988\u81f3\u8f93\u5165 B, \u6b64\u65f6\u4e09\u4e2a\u7aef\u53e3\u72b6\u6001(A=1, B=1, Y=1). \u5728\u6b64\u540e\u7684\u65f6\u95f4,\u65e0\u8bba A \u5982\u4f55\u6539\u53d8, \u7531\u4e8e B \u59cb\u7ec8\u4e3a 1, \u56e0\u6b64\u8f93\u51fa Y \u5c06\u59cb\u7ec8\u4e3a 1. \u6ca1\u9519! \u4ec5\u4ec5\u901a\u8fc7\u7b80\u5355\u7684\u6539\u53d8, \u4e00\u4e2a\u80fd\"\u6301\u4e45\u5b58\u50a8(\u8f93\u51fa)\u4e8c\u8fdb\u5236\u6570\u5b57 1\"\u7684\u7535\u8def\u4fbf\u8bde\u751f\u4e86. \u4f5c\u4e3a\u4e00\u9053\u7b80\u5355\u7684\u601d\u8003\u9898, \u8bfb\u8005\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u80fd\"\u6301\u4e45\u5b58\u50a8\u4e8c\u8fdb\u5236\u6570\u5b57 0\"\u7684\u7535\u8def\u5417? \u9501\u5b58\u5668\u4e0e\u5bc4\u5b58\u5668 \u9501\u5b58\u5668(Latch)\u662f\u4e00\u4e2a\u80fd\u9501\u5b58\u548c\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u5b57 0 \u6216 1 \u7684\u7535\u8def, \u5b83\u6709\u4e24\u4e2a\u8f93\u5165 Data Input \u548c Write Enable, \u4ee5\u53ca\u4e00\u4e2a\u8f93\u51fa Data Output, \u5176\u7ecf\u5178\u5b9e\u73b0\u7684\u7535\u8def\u56fe\u5982\u4e0b\u6240\u793a. Write Enable \u8f93\u5165\u7528\u6765\u4fdd\u62a4, Data Output \u8f93\u51fa\u9632\u6b62\u88ab\u4fee\u6539. \u5f53 Write Enable \u4e3a 0 \u65f6, \u65e0\u8bba\u662f\u5426\u6539\u53d8 Data Input \u7684\u503c, Data Output \u90fd\u4e0d\u4f1a\u6539\u53d8; \u5f53 Write Enable \u4e3a 1 \u65f6, Data Output \u8ddf\u968f Data Input \u7684\u6539\u53d8\u800c\u6539\u53d8. Data Output \u4ece 1 \u53d8\u4e3a 0 \u7684\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u590d\u4f4d\u6216\u6e05\u96f6, \u4ece 0 \u53d8\u4e3a 1 \u7684\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u7f6e\u4f4d\u6216\u7f6e\u5e7a. \u6709\u65f6\u5019\u4e5f\u7528\u5927\u5199\u5b57\u6bcd R(Reset) \u548c S(Set) \u6765\u8868\u8fbe\u590d\u4f4d\u4e0e\u7f6e\u4f4d. \u6240\u8c13\u7684\u9501\u5b58\u5668,\u5c31\u662f\u8f93\u51fa\u7aef\u7684\u72b6\u6001\u4e0d\u4f1a\u968f\u8f93\u5165\u7aef\u7684\u72b6\u6001\u53d8\u5316\u800c\u53d8\u5316, \u4ec5\u5728\u6709\u9501\u5b58\u4fe1\u53f7(Write Enable)\u65f6\u8f93\u5165\u7684\u72b6\u6001\u624d\u88ab\u4fdd\u5b58\u5230\u8f93\u51fa, \u76f4\u5230\u4e0b\u4e00\u4e2a\u9501\u5b58\u4fe1\u53f7\u5230\u6765\u65f6\u624d\u6539\u53d8. \u5728\u6709\u4e86\u80fd\u9501\u5b58 1 \u4e2a\u6bd4\u7279\u7684\u9501\u5b58\u5668\u540e, \u81ea\u7136\u800c\u7136\u60f3\u5230\u53bb\u9501\u5b58\u66f4\u5927\u5bbd\u5ea6\u7684\u6570\u636e, \u6bd4\u5982\u4e00\u4e2a u8 \u6574\u6570. \u8fd9\u79cd\u80fd\u5b58\u50a8\u591a\u4e2a\u6bd4\u7279\u7684\u7535\u8def\u88ab\u79f0\u4e3a\u5bc4\u5b58\u5668. \u901a\u5e38\u6765\u8bb2\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u5bc4\u5b58\u5668, \u4e00\u79cd\u7c7b\u578b\u7684\u5bc4\u5b58\u5668\u4f7f\u7528\u591a\u4e2a\u9501\u5b58\u5668\u6784\u6210, \u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u5bc4\u5b58\u5668\u4f7f\u7528\u591a\u4e2a\u89e6\u53d1\u5668\u6784\u6210. \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u7c7b\u578b\u7684\u5bc4\u5b58\u5668\u6765\u8bf4, \u53ea\u8981\u5c06\u8bb8\u591a\u9501\u5b58\u5668\u5e76\u6392, \u6bd4\u5982 8 \u4e2a\u9501\u5b58\u5668, \u90a3\u8fd9\u4e2a\u7535\u8def\u5c31\u80fd\u9501\u5b58\u4e00\u4e2a u8 \u6570\u636e\u800c\u6784\u6210\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668. \u81f3\u4e8e\u89e6\u53d1\u5668\u7684\u8bdd, \u5b83\u548c\u9501\u5b58\u5668\u540c\u6837\u80fd\u5b58\u50a8\u6570\u636e\u5e76\u6784\u6210\u5bc4\u5b58\u5668, \u4f46\u5176\u5e95\u5c42\u539f\u7406\u7a0d\u6709\u4e0d\u540c: \u9501\u5b58\u5668\u662f\u4e00\u79cd\u5bf9\u8109\u51b2\u7535\u5e73(\u4e5f\u5c31\u662f 0 \u6216\u8005 1)\u654f\u611f\u7684\u5b58\u50a8\u5355\u5143\u7535\u8def, \u800c\u89e6\u53d1\u5668\u662f\u4e00\u79cd\u5bf9\u8109\u51b2\u8fb9\u6cbf(\u5373\u4e0a\u5347\u6cbf\u6216\u8005\u4e0b\u964d\u6cbf)\u654f\u611f\u7684\u5b58\u50a8\u7535\u8def.","title":"GB-CPU-\u5bc4\u5b58\u5668\u4e0e\u5b58\u50a8\u7cfb\u7edf"},{"location":"content/gameboy/cpu/register/#_1","text":"ALU \u53ef\u4ee5\u5b8c\u6210\u5bf9\u6570\u636e\u7684\u7b97\u6570\u548c\u903b\u8f91\u8fd0\u7b97, \u672c\u5c0f\u8282\u5c06\u8981\u4ecb\u7ecd\u7684\u662f\u5982\u4f55\u5bf9\u6570\u636e\u8fdb\u884c\u5b58\u50a8. \u5728\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e0b\u5b58\u50a8\u7cfb\u7edf\u901a\u5e38\u5206\u4e3a\u5982\u4e0b\u51e0\u4e2a\u5c42\u6b21: \u5bc4\u5b58\u5668. \u5bf9\u4e8e CPU \u6765\u8bf4\u62e5\u6709\u6700\u5feb\u7684\u8bbf\u95ee\u901f\u5ea6. \u5728 8 \u4f4d\u5904\u7406\u5668, \u6bcf\u4e2a\u5bc4\u5b58\u5668\u5c31\u662f 8 \u4f4d. \u9ad8\u901f\u7f13\u5b58(L1-L3: SRAM) \u7b2c\u4e00\u7ea7\u9ad8\u901f\u7f13\u5b58(L1): \u901a\u5e38\u8bbf\u95ee\u53ea\u9700\u8981\u51e0\u4e2a\u5468\u671f, \u901a\u5e38\u662f\u51e0\u5341\u4e2a KB. \u7b2c\u4e8c\u7ea7\u9ad8\u901f\u7f13\u5b58(L2): \u6bd4 L1 \u7ea6\u6709 2 \u5230 10 \u500d\u8f83\u9ad8\u5ef6\u8fdf\u6027, \u901a\u5e38\u662f\u51e0\u767e\u4e2a KB \u6216\u66f4\u591a. \u7b2c\u4e09\u7ea7\u9ad8\u901f\u7f13\u5b58(L3)(\u4e0d\u4e00\u5b9a\u6709): \u6bd4 L2 \u66f4\u9ad8\u7684\u5ef6\u8fdf\u6027, \u901a\u5e38\u6709\u6570 MB \u4e4b\u5927. \u7b2c\u56db\u7ea7\u9ad8\u901f\u7f13\u5b58(L4)(\u4e0d\u666e\u904d): CPU \u5916\u90e8\u7684 DRAM, \u4f46\u901f\u5ea6\u8f83\u4e3b\u5b58\u9ad8. \u4e3b\u5b58(DRAM): \u8bbf\u95ee\u9700\u8981\u51e0\u767e\u4e2a\u5468\u671f, \u53ef\u4ee5\u5927\u5230\u6570\u5341 GB. \u78c1\u76d8\u5b58\u50a8: \u9700\u8981\u6210\u5343\u4e0a\u767e\u4e2a\u5468\u671f, \u5bb9\u91cf\u975e\u5e38\u5927. \u5728 Windows \u7cfb\u7edf\u4e0b\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u67e5\u770b CPU \u7684\u9ad8\u901f\u7f13\u5b58\u4fe1\u606f, \u5176\u4f4d\u4e8e\u4efb\u52a1\u7ba1\u7406\u5668\u7684\u6027\u80fd\u5206\u9875\u4e0b. \u6bcf\u4e00\u5c42\u76f8\u8f83\u4e8e\u4e0b\u4e00\u5c42\u76f8\u6bd4\u90fd\u62e5\u6709\u8f83\u9ad8\u7684\u901f\u5ea6\u548c\u8f83\u4f4e\u5ef6\u8fdf\u6027, \u4ee5\u53ca\u8f83\u5c0f\u7684\u5bb9\u91cf(\u4e5f\u6709\u5c11\u91cf\u4f8b\u5916, \u5982 AMD \u65e9\u671f\u7684 Duron CPU). \u5927\u90e8\u5206\u73b0\u4eca\u7684\u4e2d\u592e\u5904\u7406\u5668\u7684\u901f\u5ea6\u90fd\u975e\u5e38\u7684\u5feb. \u5927\u90e8\u5206\u7a0b\u5e8f\u5de5\u4f5c\u91cf\u9700\u8981\u5b58\u50a8\u5668\u8bbf\u95ee, \u7531\u4e8e\u9ad8\u901f\u7f13\u5b58\u7684\u6548\u7387\u548c\u5b58\u50a8\u5668\u4f20\u8f93\u4f4d\u4e8e\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e0d\u540c\u7b49\u7ea7, \u6240\u4ee5\u5b9e\u9645\u4e0a\u4f1a\u9650\u5236\u5904\u7406\u7684\u901f\u5ea6, \u5bfc\u81f4\u4e2d\u592e\u5904\u7406\u5668\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u7b49\u5f85\u5b58\u50a8\u5668 I/O \u5b8c\u6210\u5de5\u4f5c. \u5bc4\u5b58\u5668\u4e0e\u9ad8\u901f\u7f13\u5b58\u5176\u786c\u4ef6\u7535\u8def\u5b9e\u73b0\u539f\u7406\u6bd4\u8f83\u7c7b\u4f3c, \u90fd\u662f SRAM(\u9759\u6001\u968f\u673a\u5b58\u50a8\u5668), \u8fd9\u7c7b\u786c\u4ef6\u7684\u7279\u70b9\u662f\u8bfb\u5199\u901f\u5ea6\u5feb, \u4f46\u662f\u6210\u672c\u8d35, \u6240\u4ee5\u4e00\u822c\u5bb9\u91cf\u90fd\u4e0d\u662f\u5f88\u5927. \u5230\u4e3b\u5b58\u65f6, \u901a\u5e38\u91c7\u7528 DRAM, \u57fa\u672c\u5355\u5143\u7531\u4e00\u4e2a\u6676\u4f53\u7ba1\u548c\u4e00\u4e2a\u7535\u5bb9\u7ec4\u6210, \u76f8\u5bf9\u5ec9\u4ef7, \u4e0d\u8fc7\u7531\u4e8e\u4f7f\u7528\u7535\u5bb9\u5145\u653e\u7535\u7684\u9ad8\u4f4e\u7535\u5e73\u8868\u793a 0 \u548c 1, \u56e0\u6b64\u9700\u8981\u4e0d\u65ad\u5237\u65b0. \u5bc4\u5b58\u5668\u662f CPU \u4e2d\u91cd\u8981\u7684\u7ec4\u6210\u90e8\u5206, \u5b83\u4eec\u53ef\u7528\u6765\u6682\u5b58\u6307\u4ee4, \u6570\u636e\u548c\u5730\u5740. \u8981\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u5bc4\u5b58\u5668\u5e76\u4e0d\u96be, \u53ea\u9700\u8981\u51e0\u4e2a\u95e8\u7535\u8def\u518d\u52a0\u4e0a\u4e00\u70b9\u70b9\u7684\u601d\u8003.","title":"\u5bc4\u5b58\u5668\u4e0e\u5b58\u50a8\u7cfb\u7edf"},{"location":"content/gameboy/cpu/register/#_2","text":"\u9996\u5148, \u6765\u601d\u8003\u4e00\u4e0b\u8be5\u573a\u666f: \u5982\u679c\u5c06\u4e00\u4e2a\u6216\u95e8\u7684\u8f93\u5165\u63a5\u5165\u5230\u5b83\u7684\u8f93\u5165\u4e0a, \u4f1a\u53d1\u751f\u751f\u4e48\u4e8b\u60c5? \u5047\u8bbe\u8be5\u6216\u95e8\u7684\u8f93\u5165 A \u4e0e B \u7684\u521d\u59cb\u503c\u5747\u4e3a 0, \u6b64\u65f6\u4e09\u4e2a\u7aef\u53e3\u72b6\u6001(A=0, B=0, Y=0). \u5982\u679c\u6b64\u65f6 A \u4ece 0 \u53d8\u4e3a 1, \u6b64\u65f6\u4e09\u4e2a\u7aef\u53e3\u72b6\u6001(A=1, B=0, Y=1). \u8f93\u51fa Y \u53cd\u9988\u81f3\u8f93\u5165 B, \u6b64\u65f6\u4e09\u4e2a\u7aef\u53e3\u72b6\u6001(A=1, B=1, Y=1). \u5728\u6b64\u540e\u7684\u65f6\u95f4,\u65e0\u8bba A \u5982\u4f55\u6539\u53d8, \u7531\u4e8e B \u59cb\u7ec8\u4e3a 1, \u56e0\u6b64\u8f93\u51fa Y \u5c06\u59cb\u7ec8\u4e3a 1. \u6ca1\u9519! \u4ec5\u4ec5\u901a\u8fc7\u7b80\u5355\u7684\u6539\u53d8, \u4e00\u4e2a\u80fd\"\u6301\u4e45\u5b58\u50a8(\u8f93\u51fa)\u4e8c\u8fdb\u5236\u6570\u5b57 1\"\u7684\u7535\u8def\u4fbf\u8bde\u751f\u4e86. \u4f5c\u4e3a\u4e00\u9053\u7b80\u5355\u7684\u601d\u8003\u9898, \u8bfb\u8005\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u80fd\"\u6301\u4e45\u5b58\u50a8\u4e8c\u8fdb\u5236\u6570\u5b57 0\"\u7684\u7535\u8def\u5417?","title":"\u5c06\u57fa\u672c\u95e8\u7535\u8def\u7684\u8f93\u51fa\u8fde\u63a5\u81f3\u8f93\u5165"},{"location":"content/gameboy/cpu/register/#_3","text":"\u9501\u5b58\u5668(Latch)\u662f\u4e00\u4e2a\u80fd\u9501\u5b58\u548c\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u5b57 0 \u6216 1 \u7684\u7535\u8def, \u5b83\u6709\u4e24\u4e2a\u8f93\u5165 Data Input \u548c Write Enable, \u4ee5\u53ca\u4e00\u4e2a\u8f93\u51fa Data Output, \u5176\u7ecf\u5178\u5b9e\u73b0\u7684\u7535\u8def\u56fe\u5982\u4e0b\u6240\u793a. Write Enable \u8f93\u5165\u7528\u6765\u4fdd\u62a4, Data Output \u8f93\u51fa\u9632\u6b62\u88ab\u4fee\u6539. \u5f53 Write Enable \u4e3a 0 \u65f6, \u65e0\u8bba\u662f\u5426\u6539\u53d8 Data Input \u7684\u503c, Data Output \u90fd\u4e0d\u4f1a\u6539\u53d8; \u5f53 Write Enable \u4e3a 1 \u65f6, Data Output \u8ddf\u968f Data Input \u7684\u6539\u53d8\u800c\u6539\u53d8. Data Output \u4ece 1 \u53d8\u4e3a 0 \u7684\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u590d\u4f4d\u6216\u6e05\u96f6, \u4ece 0 \u53d8\u4e3a 1 \u7684\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u7f6e\u4f4d\u6216\u7f6e\u5e7a. \u6709\u65f6\u5019\u4e5f\u7528\u5927\u5199\u5b57\u6bcd R(Reset) \u548c S(Set) \u6765\u8868\u8fbe\u590d\u4f4d\u4e0e\u7f6e\u4f4d. \u6240\u8c13\u7684\u9501\u5b58\u5668,\u5c31\u662f\u8f93\u51fa\u7aef\u7684\u72b6\u6001\u4e0d\u4f1a\u968f\u8f93\u5165\u7aef\u7684\u72b6\u6001\u53d8\u5316\u800c\u53d8\u5316, \u4ec5\u5728\u6709\u9501\u5b58\u4fe1\u53f7(Write Enable)\u65f6\u8f93\u5165\u7684\u72b6\u6001\u624d\u88ab\u4fdd\u5b58\u5230\u8f93\u51fa, \u76f4\u5230\u4e0b\u4e00\u4e2a\u9501\u5b58\u4fe1\u53f7\u5230\u6765\u65f6\u624d\u6539\u53d8. \u5728\u6709\u4e86\u80fd\u9501\u5b58 1 \u4e2a\u6bd4\u7279\u7684\u9501\u5b58\u5668\u540e, \u81ea\u7136\u800c\u7136\u60f3\u5230\u53bb\u9501\u5b58\u66f4\u5927\u5bbd\u5ea6\u7684\u6570\u636e, \u6bd4\u5982\u4e00\u4e2a u8 \u6574\u6570. \u8fd9\u79cd\u80fd\u5b58\u50a8\u591a\u4e2a\u6bd4\u7279\u7684\u7535\u8def\u88ab\u79f0\u4e3a\u5bc4\u5b58\u5668. \u901a\u5e38\u6765\u8bb2\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u5bc4\u5b58\u5668, \u4e00\u79cd\u7c7b\u578b\u7684\u5bc4\u5b58\u5668\u4f7f\u7528\u591a\u4e2a\u9501\u5b58\u5668\u6784\u6210, \u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u5bc4\u5b58\u5668\u4f7f\u7528\u591a\u4e2a\u89e6\u53d1\u5668\u6784\u6210. \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u7c7b\u578b\u7684\u5bc4\u5b58\u5668\u6765\u8bf4, \u53ea\u8981\u5c06\u8bb8\u591a\u9501\u5b58\u5668\u5e76\u6392, \u6bd4\u5982 8 \u4e2a\u9501\u5b58\u5668, \u90a3\u8fd9\u4e2a\u7535\u8def\u5c31\u80fd\u9501\u5b58\u4e00\u4e2a u8 \u6570\u636e\u800c\u6784\u6210\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668. \u81f3\u4e8e\u89e6\u53d1\u5668\u7684\u8bdd, \u5b83\u548c\u9501\u5b58\u5668\u540c\u6837\u80fd\u5b58\u50a8\u6570\u636e\u5e76\u6784\u6210\u5bc4\u5b58\u5668, \u4f46\u5176\u5e95\u5c42\u539f\u7406\u7a0d\u6709\u4e0d\u540c: \u9501\u5b58\u5668\u662f\u4e00\u79cd\u5bf9\u8109\u51b2\u7535\u5e73(\u4e5f\u5c31\u662f 0 \u6216\u8005 1)\u654f\u611f\u7684\u5b58\u50a8\u5355\u5143\u7535\u8def, \u800c\u89e6\u53d1\u5668\u662f\u4e00\u79cd\u5bf9\u8109\u51b2\u8fb9\u6cbf(\u5373\u4e0a\u5347\u6cbf\u6216\u8005\u4e0b\u964d\u6cbf)\u654f\u611f\u7684\u5b58\u50a8\u7535\u8def.","title":"\u9501\u5b58\u5668\u4e0e\u5bc4\u5b58\u5668"},{"location":"content/gameboy/history/emulator/","text":"\u786c\u4ef6\u4eff\u771f\u5668 \u901a\u5e38\u6765\u8bb2, \u5f97\u76ca\u4e8e CPU \u6027\u80fd\u7684\u63d0\u9ad8\u4e0e\u4e92\u8054\u7f51\u4f7f\u77e5\u8bc6\u4f20\u9012\u53d8\u5f97\u4fbf\u6377, \u786c\u4ef6\u4eff\u771f\u5668\u5728 1995 \u5230 1997 \u5e74\u95f4\u53d8\u5f97\u6d41\u884c\u8d77\u6765. \u5f88\u591a\u65f6\u5019\u5728\u8ba8\u8bba\u56fe\u7075\u673a\u7684\u65f6\u5019, \u5bb9\u6613\u9057\u5fd8\u4e00\u4e2a\u8981\u70b9, \u90a3\u5c31\u662f\u8ba1\u7b97\u673a P \u4e0e\u8ba1\u7b97\u673a Q \u56fe\u7075\u7b49\u4ef7\u7684\u524d\u63d0\u662f: \u5b83\u4eec\u5747\u62e5\u6709\u8fd1\u4e4e\u65e0\u9650\u7684\u5b58\u50a8\u4e0e\u65e0\u9650\u7684\u8ba1\u7b97\u80fd\u529b(\u60f3\u8c61\u4e00\u4e0b, \u7edd\u5bf9\u65e0\u6cd5\u5728\u53ea\u6709 128 Byte \u5185\u5b58\u7684 51 \u5355\u7247\u673a\u4e0a\u8fd0\u884c\u6a21\u62df\u4e00\u53f0 Windows \u7cfb\u7edf\u7684\u7535\u8111). \u56e0\u4e3a\u786c\u4ef6\u6280\u672f\u53d1\u5c55\u800c\u63a8\u52a8\u8f6f\u4ef6\u5de8\u5927\u8fdb\u6b65\u7684\u4f8b\u5b50\u8fd8\u6709\u8bb8\u591a, \u6bd4\u5982\u6df1\u5ea6\u5b66\u4e60\u5728 2014 \u5e74\u5de6\u53f3\u7684\u7206\u70b8\u5f0f\u63d0\u5347\u5176\u6700\u5927\u63a8\u624b\u662f NVIDIA \u63a8\u51fa\u7684\u9ad8\u6027\u80fd GPU, \u8fd9\u4f7f\u5f97\u8bb8\u591a\u7406\u8bba\u4e0a\u53ef\u884c\u5374\u53d7\u9650\u4e8e\u8ba1\u7b97\u529b\u9650\u5236\u7684\u65b9\u6848\u5f97\u4ee5\u771f\u6b63\u5728\u73b0\u5b9e\u4e2d\u6d4b\u8bd5\u548c\u8fd0\u884c. \"\u786c\u4ef6\u4eff\u771f\u5668\"\u662f\u865a\u62df\u673a\u7684\u4e00\u4e2a\u5b50\u7c7b, \u5728\u540e\u9762\u7684\u5c0f\u8282\u4e2d, \u4f1a\u9010\u6e10\u4e86\u89e3\u5230\"\u865a\u62df\u673a\"\u5176\u5b9e\u662f\u591a\u95e8\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u6280\u672f\u7684\u603b\u79f0. \u4e3a\u4e86\u907f\u514d\u6b67\u4e49, \u672c\u4e66\u4f7f\u7528\u786c\u4ef6\u4eff\u771f\u5668\u6765\u6307\u4ee3\u4e00\u79cd\u5728\u901a\u7528\u8ba1\u7b97\u673a\u5e73\u53f0\u4e0a\u6a21\u62df\u9886\u57df\u4e13\u7528\u7269\u7406\u5143\u5668\u4ef6\u7684\u6a21\u62df\u7a0b\u5e8f. \u8be5\u6a21\u62df\u7a0b\u5e8f\u53ef\u4ee5\u5206\u522b\u6a21\u62df\u539f\u59cb\u673a\u5668\u4e2d\u592e\u5904\u7406\u5668, \u56fe\u5f62\u5904\u7406\u5668, \u58f0\u5361, \u5b58\u50a8\u5668, \u8f93\u5165\u8f93\u51fa\u8bbe\u7b49\u8bbe\u5907. \u4eff\u771f\u5668\u591a\u7528\u4e8e\u7535\u89c6\u6e38\u620f\u548c\u8857\u673a, \u4e5f\u6709\u4e00\u4e9b\u7528\u4e8e\u5fae\u673a\u6216\u638c\u4e0a\u7535\u8111. \u540c\u65f6\u4eff\u771f\u5668\u4e00\u822c\u9700\u8981 ROM \u624d\u80fd\u6267\u884c, ROM \u7684\u6700\u521d\u6765\u6e90\u662f\u4e00\u4e9b\u539f\u5e73\u53f0\u7684 ROM \u82af\u7247, \u901a\u8fc7\u4e00\u4e9b\u6280\u672f\u624b\u6bb5\u5c06\u6e90\u7a0b\u5e8f\u62f7\u8d1d\u4e0b\u6765(\u8fd9\u4e2a\u8fc7\u7a0b\u4e00\u822c\u79f0\u4e4b\u4e3a Dump), \u7136\u540e\u5229\u7528\u4eff\u771f\u5668\u52a0\u8f7d\u8fd9\u4e9b ROM \u6765\u5b9e\u73b0\u4eff\u771f\u8fc7\u7a0b. \u5728\u786c\u4ef6\u4eff\u771f\u5668\u6280\u672f\u53d1\u5c55\u7684\u65e9\u671f, Hacker \u4eec\u559c\u6b22\u5c06\u4efb\u5929\u5802\u7684\u6e38\u620f\u673a\u4f5c\u4e3a\u7814\u7a76\u5bf9\u8c61, \u5f53\u65f6\u6bd4\u8f83\u5148\u8fdb\u7684\u4eff\u771f\u5668\u80fd\u8f83\u4e3a\u5b8c\u6574\u5730\u6a21\u62df\u7ea2\u767d\u673a(Nintendo Entertainment System, NES), \u8d85\u7ea7\u4efb\u5929\u5802(Super Nintendo Entertainment System, SNES)\u4e0e Game Boy. \u8fd9\u4e2a\u65f6\u671f\"\u7d22\u5c3c\u514b\u4e4b\u7236\"\u4e2d\u88d5\u53f8(Yuji Naka)\u4e5f\u4e3a Mega Drive \u8bbe\u8ba1\u4e86\u7ea2\u767d\u673a\u4eff\u771f\u5668, \u867d\u7136\u8be5\u4eff\u771f\u5668\u6ca1\u6709\u53d1\u5e03, \u4f46\u8fd9\u53ef\u80fd\u662f\u9996\u4e2a\u5728\u4e00\u4e2a\u6e38\u620f\u673a\u4e0a\u6a21\u62df\u53e6\u4e00\u4e2a\u6e38\u620f\u673a\u7684\u4eff\u771f\u5668. NES NES(\u4e5f\u56e0\u4e3a\u5176\u7ea2\u767d\u76f8\u95f4\u7684\u914d\u8272\u88ab\u620f\u79f0\u4e3a\u7ea2\u767d\u673a)\u662f\u7531\u4efb\u5929\u5802\u5f00\u53d1\u548c\u5236\u9020\u7684 8 \u4f4d\u5bb6\u7528\u89c6\u9891\u6e38\u620f\u673a, \u6700\u521d\u53d1\u884c\u4e8e 1983 \u5e74 7 \u6708 15 \u65e5\u7684\u65e5\u672c. \u7531\u4e8e\u5b83\u662f\u4efb\u5929\u5802\u9996\u6b21\u8fdb\u519b\u6e38\u620f\u5a31\u4e50\u5e02\u573a, \u56e0\u6b64\u5b83\u88ab\u4efb\u5929\u5802\u4eb2\u5207\u7684\u79f0\u4e3a\"Nintendo Entertainment System\"\u6216\"\u4efb\u5929\u5802\u5a31\u4e50\u7cfb\u7edf\". \u8be5\u6e38\u620f\u673a\u786e\u7acb\u4e86\u4efb\u5929\u5802\u5728\u6e38\u620f\u673a\u5e02\u573a\u4e00\u54e5\u7684\u5730\u4f4d. \u7531\u4e8e\u8be5\u5e73\u53f0\u4e0e\u8be5\u5e73\u53f0\u4e0a\u7684\u6e38\u620f\u662f\u5982\u6b64\u7684\u6210\u529f, \u4e00\u4e9b Hacker \u8feb\u4e0d\u53ca\u5f85\u7684\u8bd5\u56fe\u901a\u8fc7\u786c\u4ef6\u4eff\u771f\u5668\u7684\u65b9\u5f0f\u5c06\u5b83\u4eec\u5e26\u7ed9\u5176\u4ed6\u5e73\u53f0\u7684\u73a9\u5bb6. \u5176\u4e2d\u6700\u65e9\u53d1\u552e\u4e8e NES \u7684 Super Mario Bros (\u4e2d\u8bd1\u540d\u8d85\u7ea7\u739b\u5229\u6b27\u5144\u5f1f)\u662f\u73b0\u5982\u4eca\u4e16\u754c\u4e0a\u6700\u5438\u91d1\u7684\u865a\u62df\u6e38\u620f\u4eba\u7269. NES \u4eff\u771f\u5668\u7684\u65e9\u671f\u5386\u53f2\u6bd4\u8f83\u6a21\u7cca, \u4f46\u6709\u4e00\u4e9b\u6bd4\u8f83\u8457\u540d\u7684\u4eff\u771f\u5668. 1990 \u5e74 12 \u6708, \u8fd0\u884c\u5728 FM Towns \u4e2a\u4eba\u8ba1\u7b97\u673a(\u65e5\u672c\u516c\u53f8\u5bcc\u58eb\u901a\u751f\u4ea7\u7684\u4e00\u79cd\u4e2a\u4eba\u7535\u8111)\u4e0a\u7684 Family Computer Emulator V0.35 \u53d1\u5e03, \u4f5c\u8005\u662f Haruhisa Udagawa, \u636e\u79f0\u4ed6\u4ece 1980 \u5e74\u5f00\u59cb\u5c31\u4e00\u76f4\u5728 Namco(\u5357\u5bab\u68a6)\u5de5\u4f5c. \u5b83\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e9b\u7b80\u5355\u7684 NES \u6e38\u620f, \u6bd4\u5982\u5927\u91d1\u521a. \u8fd0\u884c\u5728 FM Towns \u4e2a\u4eba\u8ba1\u7b97\u673a\u4e0a\u7684 Pasofami, \u62e5\u6709\u975e\u5e38\u521d\u6b65\u7684\u58f0\u97f3\u4eff\u771f, \u4e8e 1993 \u5e74\u53d1\u5e03. \u7531 Alex Krasivsky \u53d1\u5e03\u7684 LandyNES, \u80fd\u8f83\u4e3a\u5b8c\u7f8e\u7684\u6a21\u62df NES \u6e38\u620f\u673a. \u5f88\u4e0d\u5e78\u7684\u662f, \u5176\u6e90\u7801\u4e0e\u53d1\u5e03\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u5747\u5df2\u5728\u4e92\u8054\u7f51\u4e0a\u9057\u5931. 1997 \u5e74, \u6765\u81ea Sonic(\u7d22\u5c3c)\u5934\u90e8\u5f00\u53d1\u56e2\u961f\u7684 Yuji naka \u53d1\u5e03\u4e86\u8fd0\u884c\u5728 Mega Drive \u4e0a\u7684 NES \u4eff\u771f\u5668. NESA(Nintendo Entertainment System in Assembler)\u662f\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u5f00\u6e90\u4e14\u514d\u8d39\u7684 NES \u4eff\u771f\u5668. \u5f53\u65f6\u95f4\u6765\u5230 21 \u4e16\u7eaa\u540e, NES \u4eff\u771f\u5668\u7684\u7406\u8bba\u4e0e\u5b9e\u8df5\u5df2\u7ecf\u975e\u5e38\u6210\u719f. \u8bb8\u591a\u8ba1\u7b97\u673a\u7231\u597d\u8005\u5f00\u59cb\u4ee5\u5b66\u4e60\u4e3a\u76ee\u7684\u5f00\u53d1\u548c\u7814\u7a76 NES \u4eff\u771f\u5668, \u5e76\u4e14\u8fd9\u9879\u8fd0\u52a8\u4e00\u76f4\u6301\u7eed\u5230\u73b0\u5728\u8fd8\u6ca1\u6709\u505c\u6b62. \u5728 Github \u4e0a\u4ee5\"NES Emulator\"\u4e3a\u5173\u952e\u8bcd\u80fd\u627e\u5230\u5927\u91cf\u4e0d\u540c\u8bed\u8a00\u548c\u64cd\u4f5c\u5e73\u53f0\u7684\u5f00\u6e90\u5b9e\u73b0, \u8fd9\u6781\u5927\u7684\u65b9\u4fbf\u4e86\u5f53\u4eca\u7684\u4eff\u771f\u5668\u5f00\u53d1\u8005. Game Boy / Game Boy Color Game Boy \u662f\u4efb\u5929\u5802\u516c\u53f8\u5728 1989 \u5e74\u53d1\u552e\u7684\u7b2c\u4e00\u4ee3\u4fbf\u643a\u5f0f\u638c\u4e0a\u6e38\u620f\u673a. Game Boy \u62e5\u6709\u4e09\u4e2a\u6539\u7248\u673a\u578b, \u5206\u522b\u662f\u5c0f\u5c3a\u5bf8\u7684 Game Boy Pocket, \u52a0\u5165\u80cc\u5149\u529f\u80fd\u7684 Game Boy Light, \u4ee5\u53ca\u5f69\u8272\u7684 Game Boy Color. \u622a\u6b62 2003 \u5e74 3 \u6708 23 \u65e5\u505c\u4ea7\u540e, Game Boy \u7684\u5168\u7cfb\u5217\u673a\u79cd\u5408\u8ba1\u5728\u5168\u7403\u7d2f\u8ba1\u9500\u91cf\u4e3a 1 \u4ebf 1869 \u4e07\u53f0, \u4e3a\u76ee\u524d\u4e16\u754c\u4e0a\u7d2f\u8ba1\u9500\u91cf\u7b2c 2 \u4f4d\u7684\u638c\u4e0a\u578b\u6e38\u620f\u673a. Game Boy \u7684\u53d1\u552e\u4ec5\u665a\u4e8e NES 6 \u5e74, \u4f46\u5b83\u5728\u6027\u80fd, \u753b\u9762\u8d28\u91cf, \u58f0\u97f3, \u6e38\u620f\u5185\u5bb9\u548c\u4fbf\u643a\u6027\u4e0a\u5747\u8fdc\u8fdc\u4f18\u4e8e NES. \u80fd\u53d6\u5f97\u5982\u6b64\u5927\u7684\u7a81\u7834\u4e3b\u8981\u5f52\u529f\u4e8e\u786c\u4ef6\u7684\u53d1\u5c55\u548c\u7406\u8bba\u7684\u7a81\u7834. \u6709\u5173\u4e8e Game Boy \u7684\u66f4\u591a\u6280\u672f\u7ec6\u8282, \u5728\u672c\u4e66\u540e\u7eed\u4f1a\u9646\u7eed\u4ecb\u7ecd. \u8003\u636e\u5386\u53f2\u662f\u975e\u5e38\u6709\u8da3\u7684\u4e00\u4ef6\u4e8b. \u5728 1995 \u5e74\u4e4b\u524d, \u5bf9 GB/GBC \u7684\u4eff\u771f\u77e5\u4e4b\u751a\u5c11. \u6709\u53ef\u9760\u8bb0\u5f55\u7684\u7b2c\u4e00\u4e2a Game Boy \u4eff\u771f\u5668\u662f Marat Fayzullin \u7684 Virtual GameBoy(VGB), \u5b83\u662f\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u5546\u4e1a\u6e38\u620f\u7684 GB/GBC \u4eff\u771f\u5668, \u5728 1995 \u5e74\u9996\u6b21\u53d1\u5e03, \u7136\u540e\u5728 1995 \u5e74\u6216 1996 \u5e74\u7684\u67d0\u4e2a\u65f6\u95f4\u88ab\u79fb\u690d\u5230 PC, \u5e76\u5728 1998 \u5e74\u589e\u52a0\u4e86 Game Boy Color \u652f\u6301. Game Boy \u5927\u6982\u5728 90 \u5e74\u4ee3\u4e2d\u540e\u671f\u8fdb\u5165\u4e2d\u56fd\u5185\u5730, \u76f8\u4fe1\u8bb8\u591a\u8bfb\u8005\u90fd\u6709\u8fc7\u76f8\u5173\u7684\u6e38\u620f\u7684\u8bb0\u5fc6. \u4f46\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\u662f, \u7edd\u5927\u90e8\u5206\u6e38\u620f\"\u516b\u56fd\u8bed\u8a00\"\u652f\u6301\u5217\u8868\u4e2d\u90fd\u6ca1\u6709\u4e2d\u6587, \u4f46\u5728\u90a3\u4e2a\u65f6\u5019\u5374\u786e\u5b9e\u80fd\u73a9\u5230\u5927\u91cf\u4e2d\u6587\u6e38\u620f. \u8fd9\u5176\u5b9e\u5f97\u76ca\u4e8e\u51e0\u5bb6\u76d7\u7248\u5361\u5e26\u7684\u5236\u9020\u5546: \u4ed6\u4eec\u4e3a\u4e86\u597d\u8d29\u5356\u76d7\u7248\u5361\u5e26, \u800c\u5bf9\u5361\u5e26\u5185\u7684\u6e38\u620f\u505a\u4e86\u6c49\u5316(\u5f53\u7136\u6c49\u5316\u8d28\u91cf\u662f\u4e0d\u6562\u606d\u7ef4\u7684, \u6bd4\u5982\u6709\u540d\u7684\u610f\u8bc6\u6d41\u6c49\u5316\u4f5c\u54c1\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6\u300b). Game Boy \u4eff\u771f\u5668\u5728\u8fd9\u4e9b\u76d7\u7248\u5361\u5e26\u516c\u53f8\u6c49\u5316\u7684\u8fc7\u7a0b\u4e2d\u627f\u62c5\u4e86\u5de8\u5927\u7684\u4f5c\u7528: \u5f53\u5e74\u7684\u6e38\u620f\u5f00\u53d1\u4e2d, \u56fe\u7247, \u58f0\u97f3, \u6587\u5b57\u662f\u4e0e\u6e38\u620f\u7684\u903b\u8f91\u4ee3\u7801\u7f16\u8bd1\u5230\u4e00\u8d77\u7684, \u56e0\u6b64\u6c49\u5316\u8fc7\u7a0b\u5fc5\u987b\u51c6\u786e\u627e\u51fa\u9700\u8981\u6c49\u5316\u7684\u6587\u5b57, \u800c\u4e0d\u53bb\u4fee\u6539\u903b\u8f91\u4ee3\u7801. \u8fd9\u6837\u5f53\u6bcf\u6b21\u5bf9\u6e38\u620f\u7684 ROM \u505a\u51fa\u4e00\u70b9\u4fee\u6539, \u5c31\u53ef\u4ee5\u5728\u4eff\u771f\u5668\u4e0a\u7acb\u5373\u9a8c\u8bc1\u7ffb\u8bd1\u7ed3\u679c\u800c\u4e0d\u7528\u771f\u7684\u53bb\u70e7\u5f55\u4e00\u4e2a\u5b9e\u4f53\u5361\u5e26. \u516b\u56fd\u8bed\u8a00\u662f\u6307\u82f1, \u6cd5, \u5fb7, \u4fc4, \u7f8e, \u65e5, \u610f\u548c\u5965\u516b\u4e2a\u56fd\u5bb6\u7684\u8bed\u8a00. \u4efb\u5929\u5802\u65e9\u671f\u6e38\u620f\u53ea\u652f\u6301\u8fd9\u516b\u4e2a\u56fd\u5bb6\u7684\u8bed\u8a00, \u539f\u56e0\u662f\"\u4e3a\u53d1\u552e\u5176\u4ed6\u56fd\u5bb6\u7684\u8bed\u8a00\u7248\u672c\u7684\u9500\u91cf\u65e0\u6cd5\u652f\u6491\u5e9e\u5927\u7684\u7ffb\u8bd1\u548c\u672c\u571f\u5316\u6210\u672c\". \u76f4\u5230 2017 \u5e74\u4efb\u5929\u5802\u63a8\u9001\u7684 Switch \u7684 4.0.0 \u7684\u7cfb\u7edf\u5347\u7ea7\u4e2d\u7b2c\u4e00\u6b21\u6b63\u5f0f\u51fa\u73b0\u4e86\u7b80\u4f53\u4e2d\u6587\u7684\u9009\u9879, \u4e4b\u540e\u66f4\u662f\u4e00\u53e3\u6c14\u516c\u5e03\u4e86\u5305\u62ec\u300a\u5f02\u5ea6\u795e\u5251\u300b, \u300a\u8d5b\u5c14\u8fbe\u4f20\u8bf4: \u65f7\u91ce\u4e4b\u606f\u300b\u548c\u300a\u8d85\u7ea7\u9a6c\u91cc\u5965: \u5965\u5fb7\u8d5b\u300b\u5728\u5185\u7b49\u5341\u51e0\u6b3e\u6e38\u620f\u7684\u4e2d\u6587\u7248. \u5728\u56fd\u5185\u73a9\u5bb6\u8d2d\u4e70\u529b\u8d8a\u6765\u8d8a\u9ad8\u7684\u4eca\u5929, \u76f8\u4fe1\u672a\u6765\u4f1a\u51fa\u73b0\u66f4\u591a\u5e26\"\u5b98\u65b9\u6c49\u5316\"\u7684\u6e38\u620f. \u73b0\u5728\u8bb8\u591a\u8033\u719f\u80fd\u8be6\u7684 IP \u6700\u521d\u90fd\u8bde\u751f\u5728 Game Boy, \u56de\u60f3\u8d77\u6765, \u90a3\u771f\u662f\u4e00\u4e2a\u5145\u6ee1\u4f20\u5947\u7684\u65f6\u4ee3\u554a! PlayStation PlayStation(\u5b98\u65b9\u7f29\u5199\u4e3a PS, \u901a\u5e38\u88ab\u79f0\u4e3a PS1 \u6216\u5176\u4ee3\u53f7 PSX)\u662f\u7531\u7d22\u5c3c\u7535\u8111\u5a31\u4e50\u5f00\u53d1\u548c\u53d1\u552e\u7684\u5bb6\u7528\u6e38\u620f\u673a. \u4e3b\u673a\u4e8e 1994 \u5e74 12 \u6708 3 \u65e5\u5728\u65e5\u672c\u53d1\u5e03, 1995 \u5e74 9 \u6708 9 \u65e5\u5728\u5317\u7f8e\u53d1\u552e, 1995 \u5e74 9 \u6708 29 \u65e5\u5728\u6b27\u6d32\u53d1\u552e, 1995 \u5e74 11 \u6708 15 \u65e5\u5728\u6fb3\u5927\u5229\u4e9a\u53d1\u552e. \u8fd9\u6b3e\u6e38\u620f\u673a\u662f PlayStation \u7cfb\u5217\u5bb6\u7528\u89c6\u9891\u6e38\u620f\u673a\u7684\u7b2c\u4e00\u6b3e, \u540c\u65f6\u5b83\u4e5f\u662f\u7b2c\u4e00\u4e2a\u4f7f\u7528 CD \u5b58\u50a8\u6e38\u620f\u6570\u636e\u7684\u6e38\u620f\u673a. PlayStation \u7684\u539f\u578b\u6280\u672f\u6700\u65e9\u53ef\u4ee5\u8ffd\u6eaf\u5230 1986 \u5e74, \u6700\u521d\u7531\u4efb\u5929\u5802\u548c\u7d22\u5c3c\u5408\u8d44\u63a8\u52a8. \u5f53\u65f6\u4efb\u5929\u5802\u5df2\u7ecf\u5f00\u53d1\u51fa\u4f7f\u7528\u8f6f\u76d8\u5b58\u50a8\u6e38\u620f ROM \u7684\u6280\u672f, \u4f46\u5176\u5e0c\u671b\u80fd\u5728\u5b58\u50a8\u65b9\u5f0f\u4e0a\u53d6\u5f97\u8fdb\u4e00\u6b65\u7a81\u7834, \u56e0\u6b64\u4efb\u5929\u5802\u5f00\u59cb\u63a5\u89e6\u7d22\u5c3c, \u5e76\u5171\u540c\u5f00\u53d1\u4e86\u4e00\u4e2a CD-ROM \u63d2\u4ef6, \u6682\u5b9a\u540d\u4e3a Play Station \u6216 SNES-CD. PS \u7cfb\u7edf\u4e0a\u6700\u4e3a\u8457\u540d\u7684\u6e38\u620f\u5f53\u5c5e\u300a\u6700\u7ec8\u5e7b\u60f3\u2166\u300b\uff0c\u5176\u539f\u5b9a\u4e8e\u4efb\u5929\u5802 N64 \u5e73\u53f0\u53d1\u552e, \u4f46\u7531\u4e8e\u4e1a\u754c\u53d8\u6545\u5f00\u53d1\u5546\u53f2\u514b\u5a01\u5c14\u4e8e 1996 \u5e74 1 \u6708\u5ba3\u5e03\u6b64\u4f5c\u6539\u53d1\u552e\u4e8e PlayStation. \u8be5\u4f5c\u53d6\u5f97\u4e86\u5de8\u5927\u7684\u6210\u529f, \u540c\u65f6\u5728 2005 \u5e74\u63a8\u51fa\u4e86\u5177\u6709\u5212\u65f6\u4ee3\u610f\u4e49\u7684\u5168 CG \u7535\u5f71\u300a\u6700\u7ec8\u5e7b\u60f3\u2166: \u5723\u5b50\u964d\u4e34\u300b. PlayStation \u4eff\u771f\u5668\u7684\u5386\u53f2\u53ef\u4ee5\u8ffd\u6eaf\u5230 1998 \u5e74. PSEmu/PSEmu Pro \u662f\u6700\u65e9\u53ef\u4ee5\u8fd0\u884c\u5546\u4e1a\u6e38\u620f\u7684 PS \u4eff\u771f\u5668\u4e4b\u4e00, \u53e6\u4e00\u4e2a\u6bd4\u8f83\u6709\u540d\u7684\u4eff\u771f\u5668 Psyke \u4e8e 1998-1999 \u5de6\u53f3\u53d1\u5e03, \u662f\u7b2c\u4e00\u4e2a\u4f7f\u7528\u52a8\u6001\u91cd\u65b0\u7f16\u8bd1(Dynamic Recompilation)\u6765\u52a0\u901f\u4eff\u771f\u7684 PS \u4eff\u771f\u5668. PlayStation 2 PlayStation 2(PS2)\u662f\u7d22\u5c3c\u7535\u8111\u5a31\u4e50\u516c\u53f8\u5f00\u53d1\u548c\u9500\u552e\u7684\u5bb6\u7528\u89c6\u9891\u6e38\u620f\u673a. \u5b83\u4e8e 2000 \u5e74 3 \u6708 4 \u65e5\u5728\u65e5\u672c\u9996\u6b21\u53d1\u5e03, \u4e8e 2000 \u5e74 10 \u6708 26 \u65e5\u5728\u5317\u7f8e, 2000 \u5e74 11 \u6708\u5728\u6b27\u6d32\u548c\u6fb3\u5927\u5229\u4e9a\u53d1\u5e03, \u5b83\u662f\u539f\u7248 PlayStation \u7684\u7ee7\u627f\u8005, \u4e5f\u662f PlayStation \u6e38\u620f\u673a\u9635\u5bb9\u7684\u7b2c\u4e8c\u4e16\u4ee3. \u81f3\u76ee\u524d\u4e3a\u6b62, \u5b83\u88ab\u5e7f\u6cdb\u7684\u8ba4\u4e3a\u662f\u6700\u5177\u4ee3\u8868\u6027\u7684\u6700\u4f73\u6e38\u620f\u4e3b\u673a. \u4f5c\u4e3a\u539f\u7248\u7684\u7ee7\u627f\u8005, PS2 \u53ef\u4ee5\u5411\u4e0a\u517c\u5bb9 PS1 \u7684\u6e38\u620f. \u7531\u4e8e PS2 \u52a0\u5165\u4e86 GPU, \u5e76\u91c7\u7528 3D \u5f71\u9662\u58f0\u97f3\u7cfb\u7edf, \u56e0\u6b64\u5b83\u5bf9\u627f\u8f7d\u4eff\u771f\u5668\u8fd0\u884c\u7684\u673a\u5668\u914d\u7f6e\u8981\u6c42\u8f83\u9ad8. \u5176\u4e2d\u6700\u4e3a\u8457\u540d\u7684\u4eff\u771f\u5668\u662f PCSX2, \u4e8e 2001 \u5e74\u4e2d\u671f\u5f00\u59cb, \u5e76\u4e8e 2002 \u5e74 3 \u6708 23 \u65e5\u9996\u6b21\u53d1\u5e03. \u7b14\u8005\u5927\u6982\u5728 2010 \u5e74\u5de6\u53f3\u66fe\u4e0b\u8f7d\u8fc7\u8be5\u4eff\u771f\u5668, \u4f46\u5373\u4f7f\u4ee5 2010 \u5e74\u7684\u7b14\u8bb0\u672c\u7535\u8111\u914d\u7f6e\u4e5f\u4f9d\u7136\u65e0\u6cd5\u6d41\u7545\u8fd0\u884c\u5927\u90e8\u5206 3D \u6e38\u620f. \u53e6\u4e00\u4e2a\u4eff\u771f\u5668 PS2Emu \u5728 2001 \u5e74\u7684\u67d0\u4e2a\u65f6\u5019\u5f00\u59cb\u5f00\u53d1, \u4f46\u76f4\u5230 2004 \u5e74 5 \u6708 6 \u65e5\u624d\u53d1\u5e03\u4e86\u7b2c\u4e00\u4e2a\u4e5f\u662f\u552f\u4e00\u4e00\u4e2a\u7248\u672c. Game Boy Advance Game Boy Advance(\u7b80\u79f0 GBA)\u662f\u4efb\u5929\u5802\u516c\u53f8\u4e8e 2001 \u5e74 3 \u6708 21 \u65e5\u53d1\u552e\u7684\u4fbf\u643a\u5f0f\u6e38\u620f\u673a, \u6700\u5927\u7279\u70b9\u662f\u91c7\u7528\u4e86\u5f69\u8272\u7684 TFT \u6db2\u6676\u5c4f\u5e55, \u53ef\u5411\u4e0b\u517c\u5bb9\u4e0a\u4e00\u4ee3\u7684\u7684 Game Boy \u548c Game Boy Color \u7684\u6e38\u620f. \u5b83\u662f\u5386\u53f2\u60a0\u4e45\u7684\u7ecf\u5178\u4e4b\u4f5c, \u5f88\u5feb\u5c31\u6210\u4e3a\u70ed\u95e8, \u5c31\u50cf\u5b83\u7684\"\u7236\u4eb2\"Game Boy \u4e00\u6837. GBA \u62e5\u6709\u4e24\u4e2a\u72ec\u7acb\u7684\u5904\u7406\u5668, \u5176\u4e2d\u4e00\u4e2a\u662f Game Boy \u7684\u5904\u7406\u5668, \u7528\u4e8e\u517c\u5bb9\u8001\u6e38\u620f, \u53e6\u4e00\u4e2a\u662f\u4f7f\u7528\u4e86 RISC(Reduced instruction set computing, \u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97, \u662f\u8ba1\u7b97\u673a CPU \u7684\u4e00\u79cd\u8bbe\u8ba1\u6a21\u5f0f)\u6307\u4ee4\u96c6\u7684\u65b0\u5904\u7406\u5668 ARM7TDMI. GBA \u4eff\u771f\u5668\u7684\u5386\u53f2\u7279\u522b\u6709\u8da3, \u5b83\u65e9\u5728 2000 \u5e74\u5c31\u5df2\u7ecf\u88ab\u6a21\u62df, \u8fd9\u79bb\u5b83\u53d1\u552e\u8fd8\u6709\u4e00\u5e74\u65f6\u95f4. \u5177\u4f53\u539f\u56e0, \u9664\u5374\u4e00\u4e9b\u90fd\u5e02\u4f20\u8bf4, \u53ef\u80fd\u548c\u4e0b\u9762\u8fd9\u4e9b\u56e0\u7d20\u6709\u5173: GBA \u6240\u4f7f\u7528\u7684 ARM7TDMI CPU \u53d1\u552e\u4e8e 1999 \u5e74, \u4e14\u6709\u516c\u5f00\u7684\u6280\u672f\u8d44\u6599. \u9664\u4e86\u4f7f\u7528\u4e00\u9897\u65b0\u7684 CPU \u5916, GBA \u4e0e GB \u5728\u4eff\u771f\u4e0a\u7684\u96be\u5ea6\u5dee\u522b\u4e0d\u5927. Game Boy Advance \u4e5f\u6709\u4e00\u4e9b\u975e\u5e38\u8457\u540d\u7684\u4eff\u771f\u5668, \u8fd9\u4e9b\u4eff\u771f\u5668\u4ee5\u53ca\u4ed6\u4eec\u6240\u4eff\u771f\u7684\u6e38\u620f\u966a\u4f34\u7b14\u8005\u5ea6\u8fc7\u4e86\u8270\u96be\u7684\u9752\u5c11\u5e74\u65f6\u671f. GBAEmu, \u53d1\u5e03\u4e8e 2000, \u662f\u5df2\u77e5\u7684\u7b2c\u4e00\u4e2a GBA \u4eff\u771f\u5668. \u5b83\u5df2\u7ecf\u53ef\u4ee5\u8fd0\u884c\u4efb\u5929\u5802\u516c\u5f00\u7684 Demo: \"Yoshi's Story\". Virtual GameBoy Advance(VGBA), \u540c\u6837\u53d1\u5e03\u4e8e 2000 \u5e74, \u4f5c\u8005 Marat Fayzullin \u662f\u4e00\u4e2a\u8001\u724c\u7684\u4eff\u771f\u5668\u4e13\u5bb6. \u5728\u6b64\u4e4b\u524d\u4ed6\u5df2\u7ecf\u5148\u540e\u5236\u4f5c\u4e86 NES \u4e0e Game Boy \u4eff\u771f\u5668. \u8be5\u4eff\u771f\u5668\u6700\u4e3a\u88ab\u56fd\u5185\u73a9\u5bb6\u719f\u77e5, \u56e0\u4e3a\u5b83\u62e5\u6709\u6c49\u5316\u7248, \u5e76\u4e14\u5728\u76d7\u7248\u76db\u884c\u7684\u5e74\u4ee3, \u7ecf\u5e38\u88ab\u76d7\u7248\u7f51\u7ad9\u4f5c\u4e3a\u7ed1\u5b9a\u7684\u6e38\u620f\u8fd0\u884c\u5668. \u8be5\u4eff\u771f\u5668\u73b0\u5df2\u7ecf\u5f00\u6e90, \u5176\u7531 C++ \u7f16\u5199\u800c\u6210, \u9879\u76ee\u4ee3\u7801\u8d28\u91cf\u5c5e\u4e8e\u9876\u5c16\u7ea7\u522b. \u5728 Windows 10 \u4e0a\u8fd0\u884c\u7684 Virtual GameBoy Advance \u8fd0\u884c\u622a\u56fe\u4e0b\u56fe\u6240\u793a, \u5176\u6b63\u5728\u8fd0\u884c\u4e00\u6b3e\u540d\u4e3a Boxes \u7684\u6e38\u620f. GBA \u4eff\u771f\u5668\u662f\u4e00\u4e2a\u5386\u53f2\u4e0a\u7684\u8f6c\u6298\u70b9, \u6b64\u65f6\u7ecf\u8fc7\u4f17\u591a\u4eff\u771f\u5668\u7684\u957f\u65f6\u95f4\u6d17\u793c, \u9886\u57df\u5185\u5934\u90e8\u5f00\u53d1\u8005\u7684\u4eff\u771f\u5668\u5f00\u53d1\u6280\u672f\u5df2\u7ecf\u76f8\u5f53\u6210\u719f, \u56e0\u6b64\u751a\u81f3\u80fd\u770b\u5230\u6e38\u620f\u673a\u8fd8\u6ca1\u9020\u597d, \u4eff\u771f\u5668\u5df2\u7ecf\u53d1\u5e03\u7684\u6ed1\u7a3d\u5386\u53f2. \u4f46\u4e5f\u6b63\u56e0\u4e3a\u5982\u6b64, \u4e0d\u7518\u88ab\u76d7\u7248/\u4eff\u771f\u5668\u635f\u5bb3\u5546\u4e1a\u5229\u76ca\u7684\u6e38\u620f\u516c\u53f8\u5f00\u59cb\u91c7\u53d6\u66f4\u52a0\u4e25\u683c\u7684\u52a0\u5bc6\u4e0e\u53cd\u76d7\u7248\u63aa\u65bd, \u4eff\u771f\u5668\u7684\u5f00\u53d1\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be. PSP PlayStation Portable(PSP)\u662f\u7531\u7d22\u5c3c\u8ba1\u7b97\u673a\u5a31\u4e50\u5f00\u53d1\u7684\u7b2c\u4e03\u4e16\u4ee3\u638c\u4e0a\u6e38\u620f\u673a, \u4e0e\u4efb\u5929\u5802\u5f00\u53d1\u7684\u7b2c\u4e03\u4e16\u4ee3\u638c\u4e0a\u6e38\u620f\u673a\u4efb\u5929\u5802 DS \u7ade\u4e89. E3 2003 \u4e0a\u7d22\u5c3c\u516c\u5e03\u5b83\u4eec\u6b63\u5728\u5f00\u53d1\u4e00\u6b3e\u638c\u4e0a\u6e38\u620f\u673a, \u5e76\u5728 2004 \u5e74 5 \u6708 11 \u65e5\u4e0b\u4e00\u5c4a E3 \u4e4b\u524d\u7684\u7d22\u5c3c\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e0a\u516c\u5e03\u5177\u4f53\u8be6\u60c5. PlayStation Portable \u4e8e 2004 \u5e74 12 \u6708 12 \u65e5\u5728\u65e5\u672c\u53d1\u5e03; 2005 \u5e74 3 \u6708 24 \u65e5\u5728\u5317\u7f8e\u53d1\u5e03; \u5e76\u4e8e 2005 \u5e74 9 \u6708 1 \u65e5\u5728\u5176\u5b83\u4f7f\u7528 PAL \u5236\u5f0f\u7684\u5730\u533a\u53d1\u5e03. PSP Player \u662f\u7b2c\u4e00\u4e2a PSP \u4eff\u771f\u5668, \u4e8e 2006 \u5e74 7 \u6708 4 \u65e5\u5f00\u59cb\u5f00\u53d1, \u5e76\u5728 2008 \u5e74 3 \u6708 6 \u65e5\u9996\u6b21\u6210\u529f\u8fd0\u884c PSP \u6e38\u620f. JPCSP \u4e8e 2008 \u5e74 7 \u6708 17 \u65e5\u5f00\u59cb\u5f00\u53d1, \u5e76\u5728\u540c\u5e74\u6210\u529f\u8fd0\u884c\u7b2c\u4e00\u4e2a\u6e38\u620f. \u5b83\u4eec\u7684\u540e\u7eed\u8005 PPSSPP, \u76f4\u5230 2012 \u5e74 11 \u6708 1 \u65e5\u624d\u53d1\u5e03\u7b2c\u4e00\u4e2a\u7248\u672c. \u5982\u679c\u8c08\u8d77 PSP \u7684\u5386\u53f2, \u4e00\u5b9a\u79bb\u4e0d\u5f00\u4e00\u6b3e\u6e38\u620f:\u300a\u602a\u7269\u730e\u4eba\u300b. \u8fd9\u662f\u4e00\u6b3e\u4ee5\u4e00\u5df1\u4e4b\u529b\u5ef6\u957f PSP \u9000\u4f11\u5e74\u9f84\u7684\u4f5c\u54c1. \u56f4\u7ed5\u602a\u7269\u730e\u4eba\u6709\u8bb8\u591a\u6709\u8da3\u7684\u5c0f\u5185\u5bb9, \u6bd4\u5982\u7b14\u8005\u5728\u4e92\u8054\u7f51\u4e0a\u627e\u5230\u4e86\u4e00\u4f4d\u4e3a\u4e86\u73a9\u602a\u7269\u730e\u4eba\u800c\u5bfb\u6c42 PSP \u4eff\u771f\u5668\u7684\u73a9: Xbox 360 Xbox 360 \u662f\u7f8e\u56fd\u7684\u8ba1\u7b97\u673a\u8f6f\u4ef6\u516c\u53f8\u5fae\u8f6f\u6240\u53d1\u884c\u7684\u7b2c\u4e8c\u90e8\u5bb6\u7528\u6e38\u620f\u4e3b\u673a, \u4e3a Xbox \u7684\u540e\u7ee7\u673a\u79cd. Xbox 360 \u4e3a\u7d22\u5c3c\u8ba1\u7b97\u673a\u5a31\u4e50 PlayStation 3 \u548c\u4efb\u5929\u5802 Wii \u7684\u5e02\u573a\u7ade\u4e89\u8005, \u540c\u4e3a\u7b2c\u4e03\u4e16\u4ee3\u6e38\u620f\u4e3b\u673a. Xbox 360 \u6700\u65e9\u4e8e 2005 \u5e74 5 \u6708 12 \u65e5, \u5728 E3 \u6e38\u620f\u5c55\u524d\u4e00\u661f\u671f\u9996\u5ea6\u66dd\u5149, 2005 \u5e74 11 \u6708 22 \u65e5\u5728\u5317\u7f8e\u5730\u533a\u4e0a\u5e02, \u5176\u540e\u6269\u5c55\u81f3\u6b27\u6d32\u53ca\u65e5\u672c\u5730\u533a, \u800c\u9999\u6e2f\u53ca\u53f0\u6e7e\u4e5f\u5df2\u7ecf\u4e8e 2006 \u5e74 3 \u6708 16 \u65e5\u6b63\u5f0f\u4e0a\u5e02. \u76ee\u524d\u5df2\u77e5\u7684 Xbox 360 \u4eff\u771f\u5668\u53ea\u6709 Xenia, \u5b83\u4e8e 2013 \u5e74 1 \u6708 11 \u65e5\u5f00\u59cb\u5f00\u53d1, \u5e76\u5728 2014 \u5e74 3 \u6708 24 \u65e5\u53d1\u5e03\u9996\u4e2a\u7248\u672c. Xbox 360 \u4eff\u771f\u5668\u5728\u4eff\u771f\u5668\u5386\u53f2\u4e0a\u4e5f\u662f\u4e00\u4e2a\u5206\u6c34\u5cad, \u56e0\u4e3a\u4ece\u5b83\u5f00\u59cb\u7edd\u5927\u90e8\u5206\u6e38\u620f\u673a\u4eff\u771f\u5668\u5f88\u96be\u518d\u5728\u5bb6\u7528\u7535\u8111\u4e0a\u5168\u901f\u8fd0\u884c\u6e38\u620f. \u56e0\u4e3a\u6e38\u620f\u4f53\u9a8c\u7684\u4e0b\u964d, \u73a9\u5bb6\u4e5f\u5f88\u5c11\u518d\u8bd5\u56fe\u901a\u8fc7\u4eff\u771f\u5668\u53bb\u73a9\u67d0\u4e00\u6b3e\u6e38\u620f, \u8fd9\u76f4\u63a5\u5bfc\u81f4\u4e86\u4eff\u771f\u5668\u5f00\u53d1\u9886\u57df\u7684\u70ed\u5ea6\u4e0b\u964d. PlayStation 4 PlayStation 4 \u662f\u7d22\u5c3c\u4e92\u52a8\u5a31\u4e50\u63a8\u51fa\u7684\u5bb6\u7528\u7535\u5b50\u6e38\u620f\u673a, \u9996\u53d1\u5728 2013 \u5e74 11 \u6708 15 \u65e5\u4e8e\u5317\u7f8e\u5f00\u59cb\u8d29\u552e. \u672c\u673a\u4f5c\u4e3a\u662f\u672c\u4e16\u4ee3(\u622a\u6b62\u81ea 2020 \u5e74)\u7684\u6700\u65b0\u673a\u578b. Orbital \u662f\u7b2c\u4e00\u4e2a\u53d1\u5e03\u7684 PS4 \u4eff\u771f\u5668, \u5b83\u4e8e 2017 \u5e74 10 \u6708 28 \u65e5\u9996\u6b21\u53d1\u5e03. \u7531\u4e8e\u4eff\u771f\u5668\u7684\u4f4e\u7ea7\u7279\u6027, \u5b83\u9700\u8981\u5728\u80fd\u591f\u542f\u52a8\u6e38\u620f\u4e4b\u524d\u8fd0\u884c PS4 \u7684\u64cd\u4f5c\u7cfb\u7edf. PS4 \u4f7f\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u662f Orbis OS, \u5b83\u57fa\u4e8e FreeBSD \u5f00\u53d1. \u8981\u6ce8\u610f\u7684\u662f FreeBSD \u65e2\u53ef\u4ee5\u4f5c\u4e3a\u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf, \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5bb6\u7528\u7535\u8111\u7684\u64cd\u4f5c\u7cfb\u7edf, \u5176\u672c\u8d28\u6bd4\u8f83\u7c7b\u4f3c MacOS. \u53e6\u4e00\u4e2a\u4eff\u771f\u5668 Spine \u5728 2019 \u5e74 6 \u6708 5 \u65e5\u6210\u529f\u8fd0\u884c\u4e86\u4e24\u4e2a\u7b80\u5355\u7684\u5546\u4e1a\u6e38\u620f(\u8fd9\u4ef6\u4e8b\u4ec5\u4ec5\u53d1\u751f\u5728\u7b14\u8005\u5199\u4e0b\u8fd9\u6bb5\u8bdd\u4e4b\u524d\u7684\u4e00\u6708), \u8fd0\u884c\u622a\u56fe\u5982\u4e0b\u6240\u793a. Nintendo Switch \u4efb\u5929\u5802 Switch \u662f\u65e5\u672c\u4efb\u5929\u5802\u516c\u53f8\u51fa\u54c1\u7684\u7535\u5b50\u6e38\u620f\u673a, \u4e8e 2017 \u5e74 3 \u6708 3 \u65e5\u5728\u65e5\u672c, \u5317\u7f8e, \u6b27\u6d32\u548c\u9999\u6e2f\u53d1\u552e, \u540c\u5e74 12 \u6708 1 \u65e5\u5728\u97e9\u56fd\u548c\u53f0\u6e7e\u53d1\u552e. \u62e5\u6709\u53ef\u62c6\u5378\u63a7\u5236\u5668\u548c\u53ef\u5206\u79bb\u5f0f\u4e3b\u673a. \u6e38\u620f\u8f7d\u4f53\u4f7f\u7528\u4e86\u4e13\u7528\u5361\u5e26, \u4e3b\u673a\u5904\u7406\u5668\u4f7f\u7528\u4e86\u82f1\u4f1f\u8fbe(NVIDIA)\u5b9a\u5236\u7684 Tegra X1 \u7cfb\u7edf\u82af\u7247, \u8fd9\u662f\u4efb\u5929\u5802\u9996\u6b21\u91c7\u7528\u82f1\u4f1f\u8fbe\u7684\u7cfb\u7edf\u82af\u7247. CageTheUnicorn, \u73b0\u5728\u6539\u540d\u4e3a Mephisto, \u662f\u7b2c\u4e00\u4e2a\u8bd5\u56fe\u6a21\u62df Nintendo Switch \u7684\u7a0b\u5e8f, \u5b83\u4e8e 2017 \u5e74 5 \u6708 16 \u65e5\u5f00\u59cb\u5f00\u53d1. \u5f00\u53d1\u4eba\u5458\u5df2\u7ecf\u8868\u660e\u4ed6\u4eec\u7684\u76ee\u6807\u662f\u5c06\u5176\u7528\u4f5c\u8c03\u8bd5\u5668, \u5e76\u4e14\u6ca1\u6709\u8ba1\u5212\u8ba9\u5546\u4e1a\u6e38\u620f\u8fd0\u884c. \u53e6\u4e00\u6b3e Ryujinx \u4eff\u771f\u5668\u662f\u76ee\u524d\u552f\u4e00\u7684\u53ef\u6b63\u5e38\u8fd0\u884c\u5546\u4e1a\u6e38\u620f\u7684 Switch \u4eff\u771f\u5668, \u8fd0\u884c\u622a\u56fe\u5982\u4e0b\u6240\u793a.","title":"GB-\u865a\u62df\u673a\u53d1\u5c55\u53f2-\u786c\u4ef6\u4eff\u771f\u5668"},{"location":"content/gameboy/history/emulator/#_1","text":"\u901a\u5e38\u6765\u8bb2, \u5f97\u76ca\u4e8e CPU \u6027\u80fd\u7684\u63d0\u9ad8\u4e0e\u4e92\u8054\u7f51\u4f7f\u77e5\u8bc6\u4f20\u9012\u53d8\u5f97\u4fbf\u6377, \u786c\u4ef6\u4eff\u771f\u5668\u5728 1995 \u5230 1997 \u5e74\u95f4\u53d8\u5f97\u6d41\u884c\u8d77\u6765. \u5f88\u591a\u65f6\u5019\u5728\u8ba8\u8bba\u56fe\u7075\u673a\u7684\u65f6\u5019, \u5bb9\u6613\u9057\u5fd8\u4e00\u4e2a\u8981\u70b9, \u90a3\u5c31\u662f\u8ba1\u7b97\u673a P \u4e0e\u8ba1\u7b97\u673a Q \u56fe\u7075\u7b49\u4ef7\u7684\u524d\u63d0\u662f: \u5b83\u4eec\u5747\u62e5\u6709\u8fd1\u4e4e\u65e0\u9650\u7684\u5b58\u50a8\u4e0e\u65e0\u9650\u7684\u8ba1\u7b97\u80fd\u529b(\u60f3\u8c61\u4e00\u4e0b, \u7edd\u5bf9\u65e0\u6cd5\u5728\u53ea\u6709 128 Byte \u5185\u5b58\u7684 51 \u5355\u7247\u673a\u4e0a\u8fd0\u884c\u6a21\u62df\u4e00\u53f0 Windows \u7cfb\u7edf\u7684\u7535\u8111). \u56e0\u4e3a\u786c\u4ef6\u6280\u672f\u53d1\u5c55\u800c\u63a8\u52a8\u8f6f\u4ef6\u5de8\u5927\u8fdb\u6b65\u7684\u4f8b\u5b50\u8fd8\u6709\u8bb8\u591a, \u6bd4\u5982\u6df1\u5ea6\u5b66\u4e60\u5728 2014 \u5e74\u5de6\u53f3\u7684\u7206\u70b8\u5f0f\u63d0\u5347\u5176\u6700\u5927\u63a8\u624b\u662f NVIDIA \u63a8\u51fa\u7684\u9ad8\u6027\u80fd GPU, \u8fd9\u4f7f\u5f97\u8bb8\u591a\u7406\u8bba\u4e0a\u53ef\u884c\u5374\u53d7\u9650\u4e8e\u8ba1\u7b97\u529b\u9650\u5236\u7684\u65b9\u6848\u5f97\u4ee5\u771f\u6b63\u5728\u73b0\u5b9e\u4e2d\u6d4b\u8bd5\u548c\u8fd0\u884c. \"\u786c\u4ef6\u4eff\u771f\u5668\"\u662f\u865a\u62df\u673a\u7684\u4e00\u4e2a\u5b50\u7c7b, \u5728\u540e\u9762\u7684\u5c0f\u8282\u4e2d, \u4f1a\u9010\u6e10\u4e86\u89e3\u5230\"\u865a\u62df\u673a\"\u5176\u5b9e\u662f\u591a\u95e8\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u6280\u672f\u7684\u603b\u79f0. \u4e3a\u4e86\u907f\u514d\u6b67\u4e49, \u672c\u4e66\u4f7f\u7528\u786c\u4ef6\u4eff\u771f\u5668\u6765\u6307\u4ee3\u4e00\u79cd\u5728\u901a\u7528\u8ba1\u7b97\u673a\u5e73\u53f0\u4e0a\u6a21\u62df\u9886\u57df\u4e13\u7528\u7269\u7406\u5143\u5668\u4ef6\u7684\u6a21\u62df\u7a0b\u5e8f. \u8be5\u6a21\u62df\u7a0b\u5e8f\u53ef\u4ee5\u5206\u522b\u6a21\u62df\u539f\u59cb\u673a\u5668\u4e2d\u592e\u5904\u7406\u5668, \u56fe\u5f62\u5904\u7406\u5668, \u58f0\u5361, \u5b58\u50a8\u5668, \u8f93\u5165\u8f93\u51fa\u8bbe\u7b49\u8bbe\u5907. \u4eff\u771f\u5668\u591a\u7528\u4e8e\u7535\u89c6\u6e38\u620f\u548c\u8857\u673a, \u4e5f\u6709\u4e00\u4e9b\u7528\u4e8e\u5fae\u673a\u6216\u638c\u4e0a\u7535\u8111. \u540c\u65f6\u4eff\u771f\u5668\u4e00\u822c\u9700\u8981 ROM \u624d\u80fd\u6267\u884c, ROM \u7684\u6700\u521d\u6765\u6e90\u662f\u4e00\u4e9b\u539f\u5e73\u53f0\u7684 ROM \u82af\u7247, \u901a\u8fc7\u4e00\u4e9b\u6280\u672f\u624b\u6bb5\u5c06\u6e90\u7a0b\u5e8f\u62f7\u8d1d\u4e0b\u6765(\u8fd9\u4e2a\u8fc7\u7a0b\u4e00\u822c\u79f0\u4e4b\u4e3a Dump), \u7136\u540e\u5229\u7528\u4eff\u771f\u5668\u52a0\u8f7d\u8fd9\u4e9b ROM \u6765\u5b9e\u73b0\u4eff\u771f\u8fc7\u7a0b. \u5728\u786c\u4ef6\u4eff\u771f\u5668\u6280\u672f\u53d1\u5c55\u7684\u65e9\u671f, Hacker \u4eec\u559c\u6b22\u5c06\u4efb\u5929\u5802\u7684\u6e38\u620f\u673a\u4f5c\u4e3a\u7814\u7a76\u5bf9\u8c61, \u5f53\u65f6\u6bd4\u8f83\u5148\u8fdb\u7684\u4eff\u771f\u5668\u80fd\u8f83\u4e3a\u5b8c\u6574\u5730\u6a21\u62df\u7ea2\u767d\u673a(Nintendo Entertainment System, NES), \u8d85\u7ea7\u4efb\u5929\u5802(Super Nintendo Entertainment System, SNES)\u4e0e Game Boy. \u8fd9\u4e2a\u65f6\u671f\"\u7d22\u5c3c\u514b\u4e4b\u7236\"\u4e2d\u88d5\u53f8(Yuji Naka)\u4e5f\u4e3a Mega Drive \u8bbe\u8ba1\u4e86\u7ea2\u767d\u673a\u4eff\u771f\u5668, \u867d\u7136\u8be5\u4eff\u771f\u5668\u6ca1\u6709\u53d1\u5e03, \u4f46\u8fd9\u53ef\u80fd\u662f\u9996\u4e2a\u5728\u4e00\u4e2a\u6e38\u620f\u673a\u4e0a\u6a21\u62df\u53e6\u4e00\u4e2a\u6e38\u620f\u673a\u7684\u4eff\u771f\u5668.","title":"\u786c\u4ef6\u4eff\u771f\u5668"},{"location":"content/gameboy/history/emulator/#nes","text":"NES(\u4e5f\u56e0\u4e3a\u5176\u7ea2\u767d\u76f8\u95f4\u7684\u914d\u8272\u88ab\u620f\u79f0\u4e3a\u7ea2\u767d\u673a)\u662f\u7531\u4efb\u5929\u5802\u5f00\u53d1\u548c\u5236\u9020\u7684 8 \u4f4d\u5bb6\u7528\u89c6\u9891\u6e38\u620f\u673a, \u6700\u521d\u53d1\u884c\u4e8e 1983 \u5e74 7 \u6708 15 \u65e5\u7684\u65e5\u672c. \u7531\u4e8e\u5b83\u662f\u4efb\u5929\u5802\u9996\u6b21\u8fdb\u519b\u6e38\u620f\u5a31\u4e50\u5e02\u573a, \u56e0\u6b64\u5b83\u88ab\u4efb\u5929\u5802\u4eb2\u5207\u7684\u79f0\u4e3a\"Nintendo Entertainment System\"\u6216\"\u4efb\u5929\u5802\u5a31\u4e50\u7cfb\u7edf\". \u8be5\u6e38\u620f\u673a\u786e\u7acb\u4e86\u4efb\u5929\u5802\u5728\u6e38\u620f\u673a\u5e02\u573a\u4e00\u54e5\u7684\u5730\u4f4d. \u7531\u4e8e\u8be5\u5e73\u53f0\u4e0e\u8be5\u5e73\u53f0\u4e0a\u7684\u6e38\u620f\u662f\u5982\u6b64\u7684\u6210\u529f, \u4e00\u4e9b Hacker \u8feb\u4e0d\u53ca\u5f85\u7684\u8bd5\u56fe\u901a\u8fc7\u786c\u4ef6\u4eff\u771f\u5668\u7684\u65b9\u5f0f\u5c06\u5b83\u4eec\u5e26\u7ed9\u5176\u4ed6\u5e73\u53f0\u7684\u73a9\u5bb6. \u5176\u4e2d\u6700\u65e9\u53d1\u552e\u4e8e NES \u7684 Super Mario Bros (\u4e2d\u8bd1\u540d\u8d85\u7ea7\u739b\u5229\u6b27\u5144\u5f1f)\u662f\u73b0\u5982\u4eca\u4e16\u754c\u4e0a\u6700\u5438\u91d1\u7684\u865a\u62df\u6e38\u620f\u4eba\u7269. NES \u4eff\u771f\u5668\u7684\u65e9\u671f\u5386\u53f2\u6bd4\u8f83\u6a21\u7cca, \u4f46\u6709\u4e00\u4e9b\u6bd4\u8f83\u8457\u540d\u7684\u4eff\u771f\u5668. 1990 \u5e74 12 \u6708, \u8fd0\u884c\u5728 FM Towns \u4e2a\u4eba\u8ba1\u7b97\u673a(\u65e5\u672c\u516c\u53f8\u5bcc\u58eb\u901a\u751f\u4ea7\u7684\u4e00\u79cd\u4e2a\u4eba\u7535\u8111)\u4e0a\u7684 Family Computer Emulator V0.35 \u53d1\u5e03, \u4f5c\u8005\u662f Haruhisa Udagawa, \u636e\u79f0\u4ed6\u4ece 1980 \u5e74\u5f00\u59cb\u5c31\u4e00\u76f4\u5728 Namco(\u5357\u5bab\u68a6)\u5de5\u4f5c. \u5b83\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e9b\u7b80\u5355\u7684 NES \u6e38\u620f, \u6bd4\u5982\u5927\u91d1\u521a. \u8fd0\u884c\u5728 FM Towns \u4e2a\u4eba\u8ba1\u7b97\u673a\u4e0a\u7684 Pasofami, \u62e5\u6709\u975e\u5e38\u521d\u6b65\u7684\u58f0\u97f3\u4eff\u771f, \u4e8e 1993 \u5e74\u53d1\u5e03. \u7531 Alex Krasivsky \u53d1\u5e03\u7684 LandyNES, \u80fd\u8f83\u4e3a\u5b8c\u7f8e\u7684\u6a21\u62df NES \u6e38\u620f\u673a. \u5f88\u4e0d\u5e78\u7684\u662f, \u5176\u6e90\u7801\u4e0e\u53d1\u5e03\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u5747\u5df2\u5728\u4e92\u8054\u7f51\u4e0a\u9057\u5931. 1997 \u5e74, \u6765\u81ea Sonic(\u7d22\u5c3c)\u5934\u90e8\u5f00\u53d1\u56e2\u961f\u7684 Yuji naka \u53d1\u5e03\u4e86\u8fd0\u884c\u5728 Mega Drive \u4e0a\u7684 NES \u4eff\u771f\u5668. NESA(Nintendo Entertainment System in Assembler)\u662f\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u5f00\u6e90\u4e14\u514d\u8d39\u7684 NES \u4eff\u771f\u5668. \u5f53\u65f6\u95f4\u6765\u5230 21 \u4e16\u7eaa\u540e, NES \u4eff\u771f\u5668\u7684\u7406\u8bba\u4e0e\u5b9e\u8df5\u5df2\u7ecf\u975e\u5e38\u6210\u719f. \u8bb8\u591a\u8ba1\u7b97\u673a\u7231\u597d\u8005\u5f00\u59cb\u4ee5\u5b66\u4e60\u4e3a\u76ee\u7684\u5f00\u53d1\u548c\u7814\u7a76 NES \u4eff\u771f\u5668, \u5e76\u4e14\u8fd9\u9879\u8fd0\u52a8\u4e00\u76f4\u6301\u7eed\u5230\u73b0\u5728\u8fd8\u6ca1\u6709\u505c\u6b62. \u5728 Github \u4e0a\u4ee5\"NES Emulator\"\u4e3a\u5173\u952e\u8bcd\u80fd\u627e\u5230\u5927\u91cf\u4e0d\u540c\u8bed\u8a00\u548c\u64cd\u4f5c\u5e73\u53f0\u7684\u5f00\u6e90\u5b9e\u73b0, \u8fd9\u6781\u5927\u7684\u65b9\u4fbf\u4e86\u5f53\u4eca\u7684\u4eff\u771f\u5668\u5f00\u53d1\u8005.","title":"NES"},{"location":"content/gameboy/history/emulator/#game-boy-game-boy-color","text":"Game Boy \u662f\u4efb\u5929\u5802\u516c\u53f8\u5728 1989 \u5e74\u53d1\u552e\u7684\u7b2c\u4e00\u4ee3\u4fbf\u643a\u5f0f\u638c\u4e0a\u6e38\u620f\u673a. Game Boy \u62e5\u6709\u4e09\u4e2a\u6539\u7248\u673a\u578b, \u5206\u522b\u662f\u5c0f\u5c3a\u5bf8\u7684 Game Boy Pocket, \u52a0\u5165\u80cc\u5149\u529f\u80fd\u7684 Game Boy Light, \u4ee5\u53ca\u5f69\u8272\u7684 Game Boy Color. \u622a\u6b62 2003 \u5e74 3 \u6708 23 \u65e5\u505c\u4ea7\u540e, Game Boy \u7684\u5168\u7cfb\u5217\u673a\u79cd\u5408\u8ba1\u5728\u5168\u7403\u7d2f\u8ba1\u9500\u91cf\u4e3a 1 \u4ebf 1869 \u4e07\u53f0, \u4e3a\u76ee\u524d\u4e16\u754c\u4e0a\u7d2f\u8ba1\u9500\u91cf\u7b2c 2 \u4f4d\u7684\u638c\u4e0a\u578b\u6e38\u620f\u673a. Game Boy \u7684\u53d1\u552e\u4ec5\u665a\u4e8e NES 6 \u5e74, \u4f46\u5b83\u5728\u6027\u80fd, \u753b\u9762\u8d28\u91cf, \u58f0\u97f3, \u6e38\u620f\u5185\u5bb9\u548c\u4fbf\u643a\u6027\u4e0a\u5747\u8fdc\u8fdc\u4f18\u4e8e NES. \u80fd\u53d6\u5f97\u5982\u6b64\u5927\u7684\u7a81\u7834\u4e3b\u8981\u5f52\u529f\u4e8e\u786c\u4ef6\u7684\u53d1\u5c55\u548c\u7406\u8bba\u7684\u7a81\u7834. \u6709\u5173\u4e8e Game Boy \u7684\u66f4\u591a\u6280\u672f\u7ec6\u8282, \u5728\u672c\u4e66\u540e\u7eed\u4f1a\u9646\u7eed\u4ecb\u7ecd. \u8003\u636e\u5386\u53f2\u662f\u975e\u5e38\u6709\u8da3\u7684\u4e00\u4ef6\u4e8b. \u5728 1995 \u5e74\u4e4b\u524d, \u5bf9 GB/GBC \u7684\u4eff\u771f\u77e5\u4e4b\u751a\u5c11. \u6709\u53ef\u9760\u8bb0\u5f55\u7684\u7b2c\u4e00\u4e2a Game Boy \u4eff\u771f\u5668\u662f Marat Fayzullin \u7684 Virtual GameBoy(VGB), \u5b83\u662f\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u5546\u4e1a\u6e38\u620f\u7684 GB/GBC \u4eff\u771f\u5668, \u5728 1995 \u5e74\u9996\u6b21\u53d1\u5e03, \u7136\u540e\u5728 1995 \u5e74\u6216 1996 \u5e74\u7684\u67d0\u4e2a\u65f6\u95f4\u88ab\u79fb\u690d\u5230 PC, \u5e76\u5728 1998 \u5e74\u589e\u52a0\u4e86 Game Boy Color \u652f\u6301. Game Boy \u5927\u6982\u5728 90 \u5e74\u4ee3\u4e2d\u540e\u671f\u8fdb\u5165\u4e2d\u56fd\u5185\u5730, \u76f8\u4fe1\u8bb8\u591a\u8bfb\u8005\u90fd\u6709\u8fc7\u76f8\u5173\u7684\u6e38\u620f\u7684\u8bb0\u5fc6. \u4f46\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\u662f, \u7edd\u5927\u90e8\u5206\u6e38\u620f\"\u516b\u56fd\u8bed\u8a00\"\u652f\u6301\u5217\u8868\u4e2d\u90fd\u6ca1\u6709\u4e2d\u6587, \u4f46\u5728\u90a3\u4e2a\u65f6\u5019\u5374\u786e\u5b9e\u80fd\u73a9\u5230\u5927\u91cf\u4e2d\u6587\u6e38\u620f. \u8fd9\u5176\u5b9e\u5f97\u76ca\u4e8e\u51e0\u5bb6\u76d7\u7248\u5361\u5e26\u7684\u5236\u9020\u5546: \u4ed6\u4eec\u4e3a\u4e86\u597d\u8d29\u5356\u76d7\u7248\u5361\u5e26, \u800c\u5bf9\u5361\u5e26\u5185\u7684\u6e38\u620f\u505a\u4e86\u6c49\u5316(\u5f53\u7136\u6c49\u5316\u8d28\u91cf\u662f\u4e0d\u6562\u606d\u7ef4\u7684, \u6bd4\u5982\u6709\u540d\u7684\u610f\u8bc6\u6d41\u6c49\u5316\u4f5c\u54c1\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6\u300b). Game Boy \u4eff\u771f\u5668\u5728\u8fd9\u4e9b\u76d7\u7248\u5361\u5e26\u516c\u53f8\u6c49\u5316\u7684\u8fc7\u7a0b\u4e2d\u627f\u62c5\u4e86\u5de8\u5927\u7684\u4f5c\u7528: \u5f53\u5e74\u7684\u6e38\u620f\u5f00\u53d1\u4e2d, \u56fe\u7247, \u58f0\u97f3, \u6587\u5b57\u662f\u4e0e\u6e38\u620f\u7684\u903b\u8f91\u4ee3\u7801\u7f16\u8bd1\u5230\u4e00\u8d77\u7684, \u56e0\u6b64\u6c49\u5316\u8fc7\u7a0b\u5fc5\u987b\u51c6\u786e\u627e\u51fa\u9700\u8981\u6c49\u5316\u7684\u6587\u5b57, \u800c\u4e0d\u53bb\u4fee\u6539\u903b\u8f91\u4ee3\u7801. \u8fd9\u6837\u5f53\u6bcf\u6b21\u5bf9\u6e38\u620f\u7684 ROM \u505a\u51fa\u4e00\u70b9\u4fee\u6539, \u5c31\u53ef\u4ee5\u5728\u4eff\u771f\u5668\u4e0a\u7acb\u5373\u9a8c\u8bc1\u7ffb\u8bd1\u7ed3\u679c\u800c\u4e0d\u7528\u771f\u7684\u53bb\u70e7\u5f55\u4e00\u4e2a\u5b9e\u4f53\u5361\u5e26. \u516b\u56fd\u8bed\u8a00\u662f\u6307\u82f1, \u6cd5, \u5fb7, \u4fc4, \u7f8e, \u65e5, \u610f\u548c\u5965\u516b\u4e2a\u56fd\u5bb6\u7684\u8bed\u8a00. \u4efb\u5929\u5802\u65e9\u671f\u6e38\u620f\u53ea\u652f\u6301\u8fd9\u516b\u4e2a\u56fd\u5bb6\u7684\u8bed\u8a00, \u539f\u56e0\u662f\"\u4e3a\u53d1\u552e\u5176\u4ed6\u56fd\u5bb6\u7684\u8bed\u8a00\u7248\u672c\u7684\u9500\u91cf\u65e0\u6cd5\u652f\u6491\u5e9e\u5927\u7684\u7ffb\u8bd1\u548c\u672c\u571f\u5316\u6210\u672c\". \u76f4\u5230 2017 \u5e74\u4efb\u5929\u5802\u63a8\u9001\u7684 Switch \u7684 4.0.0 \u7684\u7cfb\u7edf\u5347\u7ea7\u4e2d\u7b2c\u4e00\u6b21\u6b63\u5f0f\u51fa\u73b0\u4e86\u7b80\u4f53\u4e2d\u6587\u7684\u9009\u9879, \u4e4b\u540e\u66f4\u662f\u4e00\u53e3\u6c14\u516c\u5e03\u4e86\u5305\u62ec\u300a\u5f02\u5ea6\u795e\u5251\u300b, \u300a\u8d5b\u5c14\u8fbe\u4f20\u8bf4: \u65f7\u91ce\u4e4b\u606f\u300b\u548c\u300a\u8d85\u7ea7\u9a6c\u91cc\u5965: \u5965\u5fb7\u8d5b\u300b\u5728\u5185\u7b49\u5341\u51e0\u6b3e\u6e38\u620f\u7684\u4e2d\u6587\u7248. \u5728\u56fd\u5185\u73a9\u5bb6\u8d2d\u4e70\u529b\u8d8a\u6765\u8d8a\u9ad8\u7684\u4eca\u5929, \u76f8\u4fe1\u672a\u6765\u4f1a\u51fa\u73b0\u66f4\u591a\u5e26\"\u5b98\u65b9\u6c49\u5316\"\u7684\u6e38\u620f. \u73b0\u5728\u8bb8\u591a\u8033\u719f\u80fd\u8be6\u7684 IP \u6700\u521d\u90fd\u8bde\u751f\u5728 Game Boy, \u56de\u60f3\u8d77\u6765, \u90a3\u771f\u662f\u4e00\u4e2a\u5145\u6ee1\u4f20\u5947\u7684\u65f6\u4ee3\u554a!","title":"Game Boy / Game Boy Color"},{"location":"content/gameboy/history/emulator/#playstation","text":"PlayStation(\u5b98\u65b9\u7f29\u5199\u4e3a PS, \u901a\u5e38\u88ab\u79f0\u4e3a PS1 \u6216\u5176\u4ee3\u53f7 PSX)\u662f\u7531\u7d22\u5c3c\u7535\u8111\u5a31\u4e50\u5f00\u53d1\u548c\u53d1\u552e\u7684\u5bb6\u7528\u6e38\u620f\u673a. \u4e3b\u673a\u4e8e 1994 \u5e74 12 \u6708 3 \u65e5\u5728\u65e5\u672c\u53d1\u5e03, 1995 \u5e74 9 \u6708 9 \u65e5\u5728\u5317\u7f8e\u53d1\u552e, 1995 \u5e74 9 \u6708 29 \u65e5\u5728\u6b27\u6d32\u53d1\u552e, 1995 \u5e74 11 \u6708 15 \u65e5\u5728\u6fb3\u5927\u5229\u4e9a\u53d1\u552e. \u8fd9\u6b3e\u6e38\u620f\u673a\u662f PlayStation \u7cfb\u5217\u5bb6\u7528\u89c6\u9891\u6e38\u620f\u673a\u7684\u7b2c\u4e00\u6b3e, \u540c\u65f6\u5b83\u4e5f\u662f\u7b2c\u4e00\u4e2a\u4f7f\u7528 CD \u5b58\u50a8\u6e38\u620f\u6570\u636e\u7684\u6e38\u620f\u673a. PlayStation \u7684\u539f\u578b\u6280\u672f\u6700\u65e9\u53ef\u4ee5\u8ffd\u6eaf\u5230 1986 \u5e74, \u6700\u521d\u7531\u4efb\u5929\u5802\u548c\u7d22\u5c3c\u5408\u8d44\u63a8\u52a8. \u5f53\u65f6\u4efb\u5929\u5802\u5df2\u7ecf\u5f00\u53d1\u51fa\u4f7f\u7528\u8f6f\u76d8\u5b58\u50a8\u6e38\u620f ROM \u7684\u6280\u672f, \u4f46\u5176\u5e0c\u671b\u80fd\u5728\u5b58\u50a8\u65b9\u5f0f\u4e0a\u53d6\u5f97\u8fdb\u4e00\u6b65\u7a81\u7834, \u56e0\u6b64\u4efb\u5929\u5802\u5f00\u59cb\u63a5\u89e6\u7d22\u5c3c, \u5e76\u5171\u540c\u5f00\u53d1\u4e86\u4e00\u4e2a CD-ROM \u63d2\u4ef6, \u6682\u5b9a\u540d\u4e3a Play Station \u6216 SNES-CD. PS \u7cfb\u7edf\u4e0a\u6700\u4e3a\u8457\u540d\u7684\u6e38\u620f\u5f53\u5c5e\u300a\u6700\u7ec8\u5e7b\u60f3\u2166\u300b\uff0c\u5176\u539f\u5b9a\u4e8e\u4efb\u5929\u5802 N64 \u5e73\u53f0\u53d1\u552e, \u4f46\u7531\u4e8e\u4e1a\u754c\u53d8\u6545\u5f00\u53d1\u5546\u53f2\u514b\u5a01\u5c14\u4e8e 1996 \u5e74 1 \u6708\u5ba3\u5e03\u6b64\u4f5c\u6539\u53d1\u552e\u4e8e PlayStation. \u8be5\u4f5c\u53d6\u5f97\u4e86\u5de8\u5927\u7684\u6210\u529f, \u540c\u65f6\u5728 2005 \u5e74\u63a8\u51fa\u4e86\u5177\u6709\u5212\u65f6\u4ee3\u610f\u4e49\u7684\u5168 CG \u7535\u5f71\u300a\u6700\u7ec8\u5e7b\u60f3\u2166: \u5723\u5b50\u964d\u4e34\u300b. PlayStation \u4eff\u771f\u5668\u7684\u5386\u53f2\u53ef\u4ee5\u8ffd\u6eaf\u5230 1998 \u5e74. PSEmu/PSEmu Pro \u662f\u6700\u65e9\u53ef\u4ee5\u8fd0\u884c\u5546\u4e1a\u6e38\u620f\u7684 PS \u4eff\u771f\u5668\u4e4b\u4e00, \u53e6\u4e00\u4e2a\u6bd4\u8f83\u6709\u540d\u7684\u4eff\u771f\u5668 Psyke \u4e8e 1998-1999 \u5de6\u53f3\u53d1\u5e03, \u662f\u7b2c\u4e00\u4e2a\u4f7f\u7528\u52a8\u6001\u91cd\u65b0\u7f16\u8bd1(Dynamic Recompilation)\u6765\u52a0\u901f\u4eff\u771f\u7684 PS \u4eff\u771f\u5668.","title":"PlayStation"},{"location":"content/gameboy/history/emulator/#playstation-2","text":"PlayStation 2(PS2)\u662f\u7d22\u5c3c\u7535\u8111\u5a31\u4e50\u516c\u53f8\u5f00\u53d1\u548c\u9500\u552e\u7684\u5bb6\u7528\u89c6\u9891\u6e38\u620f\u673a. \u5b83\u4e8e 2000 \u5e74 3 \u6708 4 \u65e5\u5728\u65e5\u672c\u9996\u6b21\u53d1\u5e03, \u4e8e 2000 \u5e74 10 \u6708 26 \u65e5\u5728\u5317\u7f8e, 2000 \u5e74 11 \u6708\u5728\u6b27\u6d32\u548c\u6fb3\u5927\u5229\u4e9a\u53d1\u5e03, \u5b83\u662f\u539f\u7248 PlayStation \u7684\u7ee7\u627f\u8005, \u4e5f\u662f PlayStation \u6e38\u620f\u673a\u9635\u5bb9\u7684\u7b2c\u4e8c\u4e16\u4ee3. \u81f3\u76ee\u524d\u4e3a\u6b62, \u5b83\u88ab\u5e7f\u6cdb\u7684\u8ba4\u4e3a\u662f\u6700\u5177\u4ee3\u8868\u6027\u7684\u6700\u4f73\u6e38\u620f\u4e3b\u673a. \u4f5c\u4e3a\u539f\u7248\u7684\u7ee7\u627f\u8005, PS2 \u53ef\u4ee5\u5411\u4e0a\u517c\u5bb9 PS1 \u7684\u6e38\u620f. \u7531\u4e8e PS2 \u52a0\u5165\u4e86 GPU, \u5e76\u91c7\u7528 3D \u5f71\u9662\u58f0\u97f3\u7cfb\u7edf, \u56e0\u6b64\u5b83\u5bf9\u627f\u8f7d\u4eff\u771f\u5668\u8fd0\u884c\u7684\u673a\u5668\u914d\u7f6e\u8981\u6c42\u8f83\u9ad8. \u5176\u4e2d\u6700\u4e3a\u8457\u540d\u7684\u4eff\u771f\u5668\u662f PCSX2, \u4e8e 2001 \u5e74\u4e2d\u671f\u5f00\u59cb, \u5e76\u4e8e 2002 \u5e74 3 \u6708 23 \u65e5\u9996\u6b21\u53d1\u5e03. \u7b14\u8005\u5927\u6982\u5728 2010 \u5e74\u5de6\u53f3\u66fe\u4e0b\u8f7d\u8fc7\u8be5\u4eff\u771f\u5668, \u4f46\u5373\u4f7f\u4ee5 2010 \u5e74\u7684\u7b14\u8bb0\u672c\u7535\u8111\u914d\u7f6e\u4e5f\u4f9d\u7136\u65e0\u6cd5\u6d41\u7545\u8fd0\u884c\u5927\u90e8\u5206 3D \u6e38\u620f. \u53e6\u4e00\u4e2a\u4eff\u771f\u5668 PS2Emu \u5728 2001 \u5e74\u7684\u67d0\u4e2a\u65f6\u5019\u5f00\u59cb\u5f00\u53d1, \u4f46\u76f4\u5230 2004 \u5e74 5 \u6708 6 \u65e5\u624d\u53d1\u5e03\u4e86\u7b2c\u4e00\u4e2a\u4e5f\u662f\u552f\u4e00\u4e00\u4e2a\u7248\u672c.","title":"PlayStation 2"},{"location":"content/gameboy/history/emulator/#game-boy-advance","text":"Game Boy Advance(\u7b80\u79f0 GBA)\u662f\u4efb\u5929\u5802\u516c\u53f8\u4e8e 2001 \u5e74 3 \u6708 21 \u65e5\u53d1\u552e\u7684\u4fbf\u643a\u5f0f\u6e38\u620f\u673a, \u6700\u5927\u7279\u70b9\u662f\u91c7\u7528\u4e86\u5f69\u8272\u7684 TFT \u6db2\u6676\u5c4f\u5e55, \u53ef\u5411\u4e0b\u517c\u5bb9\u4e0a\u4e00\u4ee3\u7684\u7684 Game Boy \u548c Game Boy Color \u7684\u6e38\u620f. \u5b83\u662f\u5386\u53f2\u60a0\u4e45\u7684\u7ecf\u5178\u4e4b\u4f5c, \u5f88\u5feb\u5c31\u6210\u4e3a\u70ed\u95e8, \u5c31\u50cf\u5b83\u7684\"\u7236\u4eb2\"Game Boy \u4e00\u6837. GBA \u62e5\u6709\u4e24\u4e2a\u72ec\u7acb\u7684\u5904\u7406\u5668, \u5176\u4e2d\u4e00\u4e2a\u662f Game Boy \u7684\u5904\u7406\u5668, \u7528\u4e8e\u517c\u5bb9\u8001\u6e38\u620f, \u53e6\u4e00\u4e2a\u662f\u4f7f\u7528\u4e86 RISC(Reduced instruction set computing, \u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97, \u662f\u8ba1\u7b97\u673a CPU \u7684\u4e00\u79cd\u8bbe\u8ba1\u6a21\u5f0f)\u6307\u4ee4\u96c6\u7684\u65b0\u5904\u7406\u5668 ARM7TDMI. GBA \u4eff\u771f\u5668\u7684\u5386\u53f2\u7279\u522b\u6709\u8da3, \u5b83\u65e9\u5728 2000 \u5e74\u5c31\u5df2\u7ecf\u88ab\u6a21\u62df, \u8fd9\u79bb\u5b83\u53d1\u552e\u8fd8\u6709\u4e00\u5e74\u65f6\u95f4. \u5177\u4f53\u539f\u56e0, \u9664\u5374\u4e00\u4e9b\u90fd\u5e02\u4f20\u8bf4, \u53ef\u80fd\u548c\u4e0b\u9762\u8fd9\u4e9b\u56e0\u7d20\u6709\u5173: GBA \u6240\u4f7f\u7528\u7684 ARM7TDMI CPU \u53d1\u552e\u4e8e 1999 \u5e74, \u4e14\u6709\u516c\u5f00\u7684\u6280\u672f\u8d44\u6599. \u9664\u4e86\u4f7f\u7528\u4e00\u9897\u65b0\u7684 CPU \u5916, GBA \u4e0e GB \u5728\u4eff\u771f\u4e0a\u7684\u96be\u5ea6\u5dee\u522b\u4e0d\u5927. Game Boy Advance \u4e5f\u6709\u4e00\u4e9b\u975e\u5e38\u8457\u540d\u7684\u4eff\u771f\u5668, \u8fd9\u4e9b\u4eff\u771f\u5668\u4ee5\u53ca\u4ed6\u4eec\u6240\u4eff\u771f\u7684\u6e38\u620f\u966a\u4f34\u7b14\u8005\u5ea6\u8fc7\u4e86\u8270\u96be\u7684\u9752\u5c11\u5e74\u65f6\u671f. GBAEmu, \u53d1\u5e03\u4e8e 2000, \u662f\u5df2\u77e5\u7684\u7b2c\u4e00\u4e2a GBA \u4eff\u771f\u5668. \u5b83\u5df2\u7ecf\u53ef\u4ee5\u8fd0\u884c\u4efb\u5929\u5802\u516c\u5f00\u7684 Demo: \"Yoshi's Story\". Virtual GameBoy Advance(VGBA), \u540c\u6837\u53d1\u5e03\u4e8e 2000 \u5e74, \u4f5c\u8005 Marat Fayzullin \u662f\u4e00\u4e2a\u8001\u724c\u7684\u4eff\u771f\u5668\u4e13\u5bb6. \u5728\u6b64\u4e4b\u524d\u4ed6\u5df2\u7ecf\u5148\u540e\u5236\u4f5c\u4e86 NES \u4e0e Game Boy \u4eff\u771f\u5668. \u8be5\u4eff\u771f\u5668\u6700\u4e3a\u88ab\u56fd\u5185\u73a9\u5bb6\u719f\u77e5, \u56e0\u4e3a\u5b83\u62e5\u6709\u6c49\u5316\u7248, \u5e76\u4e14\u5728\u76d7\u7248\u76db\u884c\u7684\u5e74\u4ee3, \u7ecf\u5e38\u88ab\u76d7\u7248\u7f51\u7ad9\u4f5c\u4e3a\u7ed1\u5b9a\u7684\u6e38\u620f\u8fd0\u884c\u5668. \u8be5\u4eff\u771f\u5668\u73b0\u5df2\u7ecf\u5f00\u6e90, \u5176\u7531 C++ \u7f16\u5199\u800c\u6210, \u9879\u76ee\u4ee3\u7801\u8d28\u91cf\u5c5e\u4e8e\u9876\u5c16\u7ea7\u522b. \u5728 Windows 10 \u4e0a\u8fd0\u884c\u7684 Virtual GameBoy Advance \u8fd0\u884c\u622a\u56fe\u4e0b\u56fe\u6240\u793a, \u5176\u6b63\u5728\u8fd0\u884c\u4e00\u6b3e\u540d\u4e3a Boxes \u7684\u6e38\u620f. GBA \u4eff\u771f\u5668\u662f\u4e00\u4e2a\u5386\u53f2\u4e0a\u7684\u8f6c\u6298\u70b9, \u6b64\u65f6\u7ecf\u8fc7\u4f17\u591a\u4eff\u771f\u5668\u7684\u957f\u65f6\u95f4\u6d17\u793c, \u9886\u57df\u5185\u5934\u90e8\u5f00\u53d1\u8005\u7684\u4eff\u771f\u5668\u5f00\u53d1\u6280\u672f\u5df2\u7ecf\u76f8\u5f53\u6210\u719f, \u56e0\u6b64\u751a\u81f3\u80fd\u770b\u5230\u6e38\u620f\u673a\u8fd8\u6ca1\u9020\u597d, \u4eff\u771f\u5668\u5df2\u7ecf\u53d1\u5e03\u7684\u6ed1\u7a3d\u5386\u53f2. \u4f46\u4e5f\u6b63\u56e0\u4e3a\u5982\u6b64, \u4e0d\u7518\u88ab\u76d7\u7248/\u4eff\u771f\u5668\u635f\u5bb3\u5546\u4e1a\u5229\u76ca\u7684\u6e38\u620f\u516c\u53f8\u5f00\u59cb\u91c7\u53d6\u66f4\u52a0\u4e25\u683c\u7684\u52a0\u5bc6\u4e0e\u53cd\u76d7\u7248\u63aa\u65bd, \u4eff\u771f\u5668\u7684\u5f00\u53d1\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be.","title":"Game Boy Advance"},{"location":"content/gameboy/history/emulator/#psp","text":"PlayStation Portable(PSP)\u662f\u7531\u7d22\u5c3c\u8ba1\u7b97\u673a\u5a31\u4e50\u5f00\u53d1\u7684\u7b2c\u4e03\u4e16\u4ee3\u638c\u4e0a\u6e38\u620f\u673a, \u4e0e\u4efb\u5929\u5802\u5f00\u53d1\u7684\u7b2c\u4e03\u4e16\u4ee3\u638c\u4e0a\u6e38\u620f\u673a\u4efb\u5929\u5802 DS \u7ade\u4e89. E3 2003 \u4e0a\u7d22\u5c3c\u516c\u5e03\u5b83\u4eec\u6b63\u5728\u5f00\u53d1\u4e00\u6b3e\u638c\u4e0a\u6e38\u620f\u673a, \u5e76\u5728 2004 \u5e74 5 \u6708 11 \u65e5\u4e0b\u4e00\u5c4a E3 \u4e4b\u524d\u7684\u7d22\u5c3c\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e0a\u516c\u5e03\u5177\u4f53\u8be6\u60c5. PlayStation Portable \u4e8e 2004 \u5e74 12 \u6708 12 \u65e5\u5728\u65e5\u672c\u53d1\u5e03; 2005 \u5e74 3 \u6708 24 \u65e5\u5728\u5317\u7f8e\u53d1\u5e03; \u5e76\u4e8e 2005 \u5e74 9 \u6708 1 \u65e5\u5728\u5176\u5b83\u4f7f\u7528 PAL \u5236\u5f0f\u7684\u5730\u533a\u53d1\u5e03. PSP Player \u662f\u7b2c\u4e00\u4e2a PSP \u4eff\u771f\u5668, \u4e8e 2006 \u5e74 7 \u6708 4 \u65e5\u5f00\u59cb\u5f00\u53d1, \u5e76\u5728 2008 \u5e74 3 \u6708 6 \u65e5\u9996\u6b21\u6210\u529f\u8fd0\u884c PSP \u6e38\u620f. JPCSP \u4e8e 2008 \u5e74 7 \u6708 17 \u65e5\u5f00\u59cb\u5f00\u53d1, \u5e76\u5728\u540c\u5e74\u6210\u529f\u8fd0\u884c\u7b2c\u4e00\u4e2a\u6e38\u620f. \u5b83\u4eec\u7684\u540e\u7eed\u8005 PPSSPP, \u76f4\u5230 2012 \u5e74 11 \u6708 1 \u65e5\u624d\u53d1\u5e03\u7b2c\u4e00\u4e2a\u7248\u672c. \u5982\u679c\u8c08\u8d77 PSP \u7684\u5386\u53f2, \u4e00\u5b9a\u79bb\u4e0d\u5f00\u4e00\u6b3e\u6e38\u620f:\u300a\u602a\u7269\u730e\u4eba\u300b. \u8fd9\u662f\u4e00\u6b3e\u4ee5\u4e00\u5df1\u4e4b\u529b\u5ef6\u957f PSP \u9000\u4f11\u5e74\u9f84\u7684\u4f5c\u54c1. \u56f4\u7ed5\u602a\u7269\u730e\u4eba\u6709\u8bb8\u591a\u6709\u8da3\u7684\u5c0f\u5185\u5bb9, \u6bd4\u5982\u7b14\u8005\u5728\u4e92\u8054\u7f51\u4e0a\u627e\u5230\u4e86\u4e00\u4f4d\u4e3a\u4e86\u73a9\u602a\u7269\u730e\u4eba\u800c\u5bfb\u6c42 PSP \u4eff\u771f\u5668\u7684\u73a9:","title":"PSP"},{"location":"content/gameboy/history/emulator/#xbox-360","text":"Xbox 360 \u662f\u7f8e\u56fd\u7684\u8ba1\u7b97\u673a\u8f6f\u4ef6\u516c\u53f8\u5fae\u8f6f\u6240\u53d1\u884c\u7684\u7b2c\u4e8c\u90e8\u5bb6\u7528\u6e38\u620f\u4e3b\u673a, \u4e3a Xbox \u7684\u540e\u7ee7\u673a\u79cd. Xbox 360 \u4e3a\u7d22\u5c3c\u8ba1\u7b97\u673a\u5a31\u4e50 PlayStation 3 \u548c\u4efb\u5929\u5802 Wii \u7684\u5e02\u573a\u7ade\u4e89\u8005, \u540c\u4e3a\u7b2c\u4e03\u4e16\u4ee3\u6e38\u620f\u4e3b\u673a. Xbox 360 \u6700\u65e9\u4e8e 2005 \u5e74 5 \u6708 12 \u65e5, \u5728 E3 \u6e38\u620f\u5c55\u524d\u4e00\u661f\u671f\u9996\u5ea6\u66dd\u5149, 2005 \u5e74 11 \u6708 22 \u65e5\u5728\u5317\u7f8e\u5730\u533a\u4e0a\u5e02, \u5176\u540e\u6269\u5c55\u81f3\u6b27\u6d32\u53ca\u65e5\u672c\u5730\u533a, \u800c\u9999\u6e2f\u53ca\u53f0\u6e7e\u4e5f\u5df2\u7ecf\u4e8e 2006 \u5e74 3 \u6708 16 \u65e5\u6b63\u5f0f\u4e0a\u5e02. \u76ee\u524d\u5df2\u77e5\u7684 Xbox 360 \u4eff\u771f\u5668\u53ea\u6709 Xenia, \u5b83\u4e8e 2013 \u5e74 1 \u6708 11 \u65e5\u5f00\u59cb\u5f00\u53d1, \u5e76\u5728 2014 \u5e74 3 \u6708 24 \u65e5\u53d1\u5e03\u9996\u4e2a\u7248\u672c. Xbox 360 \u4eff\u771f\u5668\u5728\u4eff\u771f\u5668\u5386\u53f2\u4e0a\u4e5f\u662f\u4e00\u4e2a\u5206\u6c34\u5cad, \u56e0\u4e3a\u4ece\u5b83\u5f00\u59cb\u7edd\u5927\u90e8\u5206\u6e38\u620f\u673a\u4eff\u771f\u5668\u5f88\u96be\u518d\u5728\u5bb6\u7528\u7535\u8111\u4e0a\u5168\u901f\u8fd0\u884c\u6e38\u620f. \u56e0\u4e3a\u6e38\u620f\u4f53\u9a8c\u7684\u4e0b\u964d, \u73a9\u5bb6\u4e5f\u5f88\u5c11\u518d\u8bd5\u56fe\u901a\u8fc7\u4eff\u771f\u5668\u53bb\u73a9\u67d0\u4e00\u6b3e\u6e38\u620f, \u8fd9\u76f4\u63a5\u5bfc\u81f4\u4e86\u4eff\u771f\u5668\u5f00\u53d1\u9886\u57df\u7684\u70ed\u5ea6\u4e0b\u964d.","title":"Xbox 360"},{"location":"content/gameboy/history/emulator/#playstation-4","text":"PlayStation 4 \u662f\u7d22\u5c3c\u4e92\u52a8\u5a31\u4e50\u63a8\u51fa\u7684\u5bb6\u7528\u7535\u5b50\u6e38\u620f\u673a, \u9996\u53d1\u5728 2013 \u5e74 11 \u6708 15 \u65e5\u4e8e\u5317\u7f8e\u5f00\u59cb\u8d29\u552e. \u672c\u673a\u4f5c\u4e3a\u662f\u672c\u4e16\u4ee3(\u622a\u6b62\u81ea 2020 \u5e74)\u7684\u6700\u65b0\u673a\u578b. Orbital \u662f\u7b2c\u4e00\u4e2a\u53d1\u5e03\u7684 PS4 \u4eff\u771f\u5668, \u5b83\u4e8e 2017 \u5e74 10 \u6708 28 \u65e5\u9996\u6b21\u53d1\u5e03. \u7531\u4e8e\u4eff\u771f\u5668\u7684\u4f4e\u7ea7\u7279\u6027, \u5b83\u9700\u8981\u5728\u80fd\u591f\u542f\u52a8\u6e38\u620f\u4e4b\u524d\u8fd0\u884c PS4 \u7684\u64cd\u4f5c\u7cfb\u7edf. PS4 \u4f7f\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u662f Orbis OS, \u5b83\u57fa\u4e8e FreeBSD \u5f00\u53d1. \u8981\u6ce8\u610f\u7684\u662f FreeBSD \u65e2\u53ef\u4ee5\u4f5c\u4e3a\u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf, \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5bb6\u7528\u7535\u8111\u7684\u64cd\u4f5c\u7cfb\u7edf, \u5176\u672c\u8d28\u6bd4\u8f83\u7c7b\u4f3c MacOS. \u53e6\u4e00\u4e2a\u4eff\u771f\u5668 Spine \u5728 2019 \u5e74 6 \u6708 5 \u65e5\u6210\u529f\u8fd0\u884c\u4e86\u4e24\u4e2a\u7b80\u5355\u7684\u5546\u4e1a\u6e38\u620f(\u8fd9\u4ef6\u4e8b\u4ec5\u4ec5\u53d1\u751f\u5728\u7b14\u8005\u5199\u4e0b\u8fd9\u6bb5\u8bdd\u4e4b\u524d\u7684\u4e00\u6708), \u8fd0\u884c\u622a\u56fe\u5982\u4e0b\u6240\u793a.","title":"PlayStation 4"},{"location":"content/gameboy/history/emulator/#nintendo-switch","text":"\u4efb\u5929\u5802 Switch \u662f\u65e5\u672c\u4efb\u5929\u5802\u516c\u53f8\u51fa\u54c1\u7684\u7535\u5b50\u6e38\u620f\u673a, \u4e8e 2017 \u5e74 3 \u6708 3 \u65e5\u5728\u65e5\u672c, \u5317\u7f8e, \u6b27\u6d32\u548c\u9999\u6e2f\u53d1\u552e, \u540c\u5e74 12 \u6708 1 \u65e5\u5728\u97e9\u56fd\u548c\u53f0\u6e7e\u53d1\u552e. \u62e5\u6709\u53ef\u62c6\u5378\u63a7\u5236\u5668\u548c\u53ef\u5206\u79bb\u5f0f\u4e3b\u673a. \u6e38\u620f\u8f7d\u4f53\u4f7f\u7528\u4e86\u4e13\u7528\u5361\u5e26, \u4e3b\u673a\u5904\u7406\u5668\u4f7f\u7528\u4e86\u82f1\u4f1f\u8fbe(NVIDIA)\u5b9a\u5236\u7684 Tegra X1 \u7cfb\u7edf\u82af\u7247, \u8fd9\u662f\u4efb\u5929\u5802\u9996\u6b21\u91c7\u7528\u82f1\u4f1f\u8fbe\u7684\u7cfb\u7edf\u82af\u7247. CageTheUnicorn, \u73b0\u5728\u6539\u540d\u4e3a Mephisto, \u662f\u7b2c\u4e00\u4e2a\u8bd5\u56fe\u6a21\u62df Nintendo Switch \u7684\u7a0b\u5e8f, \u5b83\u4e8e 2017 \u5e74 5 \u6708 16 \u65e5\u5f00\u59cb\u5f00\u53d1. \u5f00\u53d1\u4eba\u5458\u5df2\u7ecf\u8868\u660e\u4ed6\u4eec\u7684\u76ee\u6807\u662f\u5c06\u5176\u7528\u4f5c\u8c03\u8bd5\u5668, \u5e76\u4e14\u6ca1\u6709\u8ba1\u5212\u8ba9\u5546\u4e1a\u6e38\u620f\u8fd0\u884c. \u53e6\u4e00\u6b3e Ryujinx \u4eff\u771f\u5668\u662f\u76ee\u524d\u552f\u4e00\u7684\u53ef\u6b63\u5e38\u8fd0\u884c\u5546\u4e1a\u6e38\u620f\u7684 Switch \u4eff\u771f\u5668, \u8fd0\u884c\u622a\u56fe\u5982\u4e0b\u6240\u793a.","title":"Nintendo Switch"},{"location":"content/gameboy/history/runtime/","text":"\u7a0b\u5e8f\u865a\u62df\u673a \u4e0e\u786c\u4ef6\u4eff\u771f\u5668\u76f8\u6bd4, \u7a0b\u5e8f\u865a\u62df\u673a\u5219\u662f\u53e6\u4e00\u4e2a\u6982\u5ff5. \u786c\u4ef6\u4eff\u771f\u5668\u4f5c\u7528\u662f\u6a21\u62df\u4e00\u4e2a\u771f\u5b9e\u5b58\u5728\u7684\u673a\u5668, \u800c\u7a0b\u5e8f\u865a\u62df\u673a\u5219\u66f4\u50cf\u662f\"\u6a21\u62df\u4e00\u4e2a\u865a\u6784\u7684\u673a\u5668\". \u7a0b\u5e8f\u865a\u62df\u673a\u6709\u65f6\u4e5f\u88ab\u79f0\u4e3a\u6258\u7ba1\u8fd0\u884c\u65f6\u73af\u5883, \u50cf JVM \u5c31\u662f\u5e38\u89c1\u7684\u4e00\u4e2a\u7a0b\u5e8f\u865a\u62df\u673a. \u4e0d\u540c\u4e8e C/C++/Rust \u7b49\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u5728\u7269\u7406\u673a\u5668\u4e0a\u7684\u7f16\u7a0b\u8bed\u8a00, Java \u7f16\u8bd1\u540e\u751f\u6210\u7684\u662f Java \u5b57\u8282\u7801: \u5b83\u53ea\u80fd\u8fd0\u884c\u5728 JVM \u4e2d. JVM \u8d1f\u8d23\u5c06 Java \u5b57\u8282\u7801\u7ffb\u8bd1\u4e3a\u672c\u5730\u673a\u5668\u7801. \u7a0b\u5e8f\u865a\u62df\u673a\u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u4e2a\u548c\u5e73\u53f0\u65e0\u5173\u7684\u7f16\u7a0b\u73af\u5883. \u5728\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u82b1\u6bd4\u8f83\u5927\u7684\u7bc7\u5e45\u53bb\u89e3\u91ca\u53e6\u4e00\u4e2a\u4e1c\u897f: Python \u4e5f\u662f\u5c06\u6e90\u7801 py \u7f16\u8bd1\u6210\u5b57\u8282\u7801 pyc \u518d\u6267\u884c, \u90a3\u4e48\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u6267\u884c\u5de5\u5177\u88ab\u79f0\u4e3a Python \u89e3\u91ca\u5668\u800c\u4e0d\u662f Python \u865a\u62df\u673a? \u8981\u89e3\u91ca\u8fd9\u4e2a\u95ee\u9898, \u9700\u8981\u4ece CPU \u8bb2\u8d77. \u865a\u62df\u673a\u7684\u539f\u59cb\u4f7f\u547d\u662f\u6a21\u62df\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a(\u5b83\u53ef\u80fd\u662f\u4e00\u53f0\u771f\u5b9e\u5b58\u5728\u8fc7\u7684\u8ba1\u7b97\u673a, \u4e5f\u53ef\u80fd\u662f\u4e00\u53f0\u865a\u6784\u7684\u8ba1\u7b97\u673a), \u800c\"\u8ba1\u7b97\"\u7684\u6838\u5fc3\u672c\u8d28\u662f CPU. CPU \u62e5\u6709\u4e00\u7ec4\u7279\u5b9a\u7684\u6307\u4ee4, \u8be5\u6307\u4ee4\u96c6\u72ec\u7acb\u4e8e\u4efb\u4f55\u7279\u5b9a\u7684\u7f16\u7a0b\u8bed\u8a00\u6216\u4f7f\u7528\u73af\u5883. \u6307\u4ee4\u4ec5\u57fa\u4e8e CPU \u7684\u5f53\u524d\u72b6\u6001\u786e\u5b9a\u6027\u5730\u6267\u884c, \u5e76\u4e14\u4e0d\u4f9d\u8d56\u4e8e\u8be5\u65f6\u95f4\u70b9\u7684\u6307\u4ee4\u6d41\u4e2d\u7684\u5176\u4ed6\u5730\u65b9\u7684\u4fe1\u606f. JVM \u7b26\u5408\u8fd9\u4e2a\u63cf\u8ff0, \u5b83\u5de5\u4f5c\u5728\u975e\u5e38\u4f4e\u7684\u5c42\u9762\u4e0a, \u51e0\u4e4e\u4e0e CPU \u76f8\u540c. \u4f46\u5bf9\u4e8e Python \u89e3\u91ca\u5668\u6765\u8bf4, \u60c5\u51b5\u5c31\u6709\u70b9\u4e0d\u4e00\u6837\u4e86. \u5b83\u89e3\u6790\u8bed\u6cd5\u6d41, \u5e76\u4e14\u7279\u5b9a\u65f6\u95f4\u70b9\u7684\u8bed\u6cd5 Token \u5fc5\u987b\u4f9d\u8d56\u4e0a\u4e0b\u6587 Token \u8fdb\u884c\u89e3\u6790. \u89e3\u91ca\u5668\u4e0d\u80fd\u5b64\u7acb\u5730\u67e5\u770b\u6bcf\u4e2a\u5b57\u8282\u751a\u81f3\u6bcf\u4e00\u884c, \u5e76\u786e\u5207\u77e5\u9053\u4e0b\u4e00\u6b65\u8be5\u505a\u4ec0\u4e48. Python \u5b57\u8282\u7801\u4e2d\u7684\u5b57\u8282\u4e0d\u80fd\u50cf JVM \u4e2d\u7684\u5b57\u8282\u90a3\u6837\u72ec\u7acb\u8fd0\u884c. \u7b80\u5355\u6765\u8bf4, Python \u7684\u5b57\u8282\u7801 pyc \u53ea\u662f\u5c06\u8ba1\u7b97\u673a\u7a0b\u5e8f\u76f8\u5bf9\u4e0d\u597d\u89e3\u91ca\u5206\u6790\u7684\u6e90\u7801\u8f6c\u6362\u6210\u53e6\u4e00\u79cd\u76f8\u5bf9\u597d\u70b9\u7684\u6e90\u7801, \u5b83\u7684\u672c\u8d28\u4ecd\u7136\u662f\u89e3\u91ca\u6267\u884c. \u4e0b\u9762\u5c06\u7b80\u5355\u4ecb\u7ecd\u51e0\u4e2a\u6709\u540d\u7684\u7a0b\u5e8f\u865a\u62df\u673a\u9879\u76ee: JVM \u4e0e WebAssembly. JVM Java virtual machine(JVM)\u662f\u4e00\u79cd\u865a\u62df\u673a, \u5b83\u53ef\u4ee5\u4f7f\u8ba1\u7b97\u673a\u8fd0\u884c Java \u7a0b\u5e8f\u4ee5\u53ca\u5176\u5b83\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f(\u88ab\u7f16\u8bd1\u6210 Java \u5b57\u8282\u7801\u540e). \u7a0b\u5e8f\u4f5c\u8005\u53ef\u4ee5\u4f7f\u7528 Java Development Kit(JDK)\u4f7f\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4e0d\u5fc5\u62c5\u5fc3\u5e95\u5c42\u786c\u4ef6\u5e73\u53f0\u7684\u7279\u8d28, \u6b63\u5e94\u4e86 Java \u7684\u6700\u521d\u53e3\u53f7\u662f\"\u4e00\u6b21\u7f16\u8bd1, \u5230\u5904\u8fd0\u884c\". JVM \u6709\u81ea\u5df1\u5b8c\u5584\u7684\u786c\u4f53\u67b6\u6784, \u5982\u5904\u7406\u5668\u548c\u5806\u6808\u7b49, \u8fd8\u5177\u6709\u76f8\u5e94\u7684\u6307\u4ee4\u7cfb\u7edf. JVM \u7684\u5386\u53f2\u7528\"\u4e00\u5c06\u529f\u6210\u4e07\u9aa8\u67af\"\u6765\u5f62\u5bb9\u6700\u9002\u5408\u4e0d\u8fc7. \u5728 1996 \u5e74 1 \u6708 23 \u65e5, Sun \u53d1\u5e03 JDK 1.0, \u5176\u4e2d\u81ea\u5e26\u7684\u865a\u62df\u673a\u5c31\u662f Classic VM. \u5b83\u53ea\u80fd\u4f7f\u7528\u7eaf\u89e3\u91ca\u5668\u7684\u65b9\u5f0f\u6765\u6267\u884c Java \u4ee3\u7801. \u76f4\u5230 JDK 1.3 \u4e4b\u524d, \u5176\u4e00\u76f4\u662f JDK \u7684\u9ed8\u8ba4\u865a\u62df\u673a. \u5728 Sun Classic \u53d1\u5e03\u540e, Sun \u7684\u865a\u62df\u673a\u56e2\u961f\u5728 JDK 1.2 \u65f6\u53d1\u5e03\u4e86\u4e00\u6b3e\u540d\u4e3a Exact VM \u7684\u865a\u62df\u673a, \u5c1d\u8bd5\u89e3\u51b3 Classic VM \u9047\u5230\u7684\u95ee\u9898. \u5b83\u7684\u6267\u884c\u7cfb\u7edf\u89e3\u51b3\u4e86 Classic VM \u5b58\u5728\u7684\u89e3\u91ca\u5668\u548c\u7f16\u8bd1\u5668\u65e0\u6cd5\u540c\u65f6\u5de5\u4f5c\u7684\u95ee\u9898, \u8fd8\u5177\u5907\u4e86\u4e00\u4e9b\u73b0\u4ee3\u9ad8\u6027\u80fd\u5904\u7406\u5668\u7684\u7279\u6027, \u5982: \u4e24\u7ea7\u5373\u65f6\u7f16\u8bd1\u7b49. \u4f46\u4ece\u5b83\u51fa\u751f\u5230\u6b7b\u4ea1\u4ece\u672a\u88ab\u5927\u89c4\u6a21\u4f7f\u7528\u8fc7, \u5728 JDK 1.3 \u53d1\u5e03\u65f6, \u5176\u4ec5\u4ec5\u4f5c\u4e3a HotSpot VM \u7684\u5907\u7528\u865a\u62df\u673a. HotSpot VM \u53ef\u4ee5\u8bf4\u662f\u4f7f\u7528\u6700\u4e3a\u5e7f\u6cdb\u7684 Java \u865a\u62df\u673a, \u51e0\u4e4e\u6240\u6709\u7684 Java \u865a\u62df\u673a\u90fd\u77e5\u9053\u5b83. \u4f46\u5b9e\u9645\u4e0a, \u8fd9\u4e2a\u865a\u62df\u673a\u5e76\u4e0d\u662f\u7531 Sun \u516c\u53f8\u539f\u751f\u5f00\u53d1\u7684, \u800c\u662f\u7531\u4e00\u4e2a\u53eb Longview Technologies \u516c\u53f8\u5f00\u53d1\u7684. \u800c Sun \u516c\u53f8\u6ce8\u610f\u5230\u4e86\u8fd9\u6b3e\u865a\u62df\u673a\u5728 JIT \u7f16\u8bd1\u4e0a\u7684\u8bb8\u591a\u4f18\u79c0\u6210\u679c, \u4e8e 1997 \u5e74\u6536\u8d2d\u4e86 Longview Technologies \u516c\u53f8, \u4ece\u800c\u83b7\u5f97\u4e86 HotSpot VM.\u603b\u7684\u6765\u8bf4, \u4ece 2000 \u5e74 JDK 1.3 \u53d1\u5e03, HotSpot VM \u4f5c\u4e3a\u9ed8\u8ba4\u7684\u865a\u62df\u673a\u5f00\u59cb\u767b\u4e0a\u5386\u53f2\u821e\u53f0. \u5230\u73b0\u5728 2020 \u5e74, 20 \u5e74\u65f6\u95f4\u8fc7\u53bb\u4e86, \u5176\u4f9d\u7136\u662f\u6700\u5e38\u7528\u7684 JVM \u865a\u62df\u673a. \u524d\u9762\u8bf4\u7684\u90fd\u662f Sun \u516c\u53f8\u63a8\u51fa\u7684\u865a\u62df\u673a, \u4f46\u9664\u4e86 Sun \u516c\u53f8\u4e4b\u5916, \u5176\u4ed6\u7ec4\u7ec7, \u516c\u53f8\u4e5f\u7814\u53d1\u8fc7\u4e0d\u5c11\u7684\u865a\u62df\u673a\u5b9e\u73b0, \u5176\u4e2d\u6700\u8457\u540d\u7684\u8981\u7b97 BEA \u516c\u53f8\u7684 BEA JRockit \u548c IBM \u516c\u53f8\u7684 J9 VM \u4e86. BEA \u516c\u53f8\u7684 JRockit \u662f\u4e00\u6b3e\u4e13\u6ce8\u4e8e\u670d\u52a1\u5668\u786c\u4ef6\u548c\u670d\u52a1\u7aef\u5e94\u7528\u573a\u666f\u7684\u865a\u62df\u673a, \u5176\u9488\u5bf9\u670d\u52a1\u7aef\u573a\u666f\u505a\u4e86\u5927\u91cf\u7684\u4f18\u5316, \u56e0\u6b64\u5176\u4e0d\u592a\u5173\u6ce8\u7a0b\u5e8f\u542f\u52a8\u901f\u5ea6. JRockit \u865a\u62df\u673a\u5185\u90e8\u4e0d\u5305\u542b\u89e3\u91ca\u5668\u5b9e\u73b0, \u5168\u90e8\u4ee3\u7801\u90fd\u9760\u5373\u65f6\u7f16\u8bd1\u5668\u7f16\u8bd1\u540e\u6267\u884c. \u6b64\u5916, \u5176\u63d0\u4f9b\u7684 MissionControl \u670d\u52a1\u5957\u4ef6\u4e5f\u5341\u5206\u5f3a\u5927. IBM \u516c\u53f8\u7684 J9 VM \u5219\u662f\u4e00\u6b3e\u6bd4\u8f83\u901a\u7528\u7684\u865a\u62df\u673a, \u5176\u5b9a\u4f4d\u5e94\u7528\u4e8e\u4ece\u670d\u52a1\u7aef\u5230\u684c\u9762\u5e94\u7528\u518d\u5230\u5d4c\u5165\u5f0f\u7684\u591a\u7528\u9014\u865a\u62df\u673a. IBM \u516c\u53f8\u5f00\u53d1 J9 VM \u7684\u76ee\u7684\u662f\u5c06\u5176\u4f5c\u4e3a IBM \u516c\u53f8\u5404\u79cd Java \u4ea7\u54c1\u7684\u6267\u884c\u5e73\u53f0. \u6b64\u5916\u8fd8\u6709\u8bb8\u8bb8\u591a\u591a\u5176\u4ed6\u7684\u865a\u62df\u673a\u5b58\u5728, \u4f8b\u5982: Apache Harmony, Google Android Dalvik VM, Microsoft JVM \u7b49\u7b49. \u867d\u7136 JVM \u5728\u7a0b\u5e8f\u865a\u62df\u673a\u9886\u57df\u5341\u5206\u6709\u540d, \u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f, \u5b83\u5e76\u975e\u662f\u7a0b\u5e8f\u865a\u62df\u673a\u7684\u552f\u4e00\u5b9e\u8df5. \u9664\u4e86 JVM \u4e4b\u5916, \u4ecd\u7136\u6709\u8bb8\u591a\u4f18\u79c0\u7684\u865a\u62df\u673a, \u4f8b\u5982\u4e0b\u9762\u5c06\u8981\u4ecb\u7ecd\u7684 WebAssembly. WebAssembly WebAssembly \u8bde\u751f\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3 JavaScript \u7684\u6027\u80fd\u95ee\u9898. JavaScript \u662f\u4e00\u95e8\u89e3\u91ca\u578b\u8bed\u8a00, \u867d\u7136\u6709\u8bb8\u591a\u8457\u540d\u516c\u53f8\u548c\u5f00\u53d1\u8005\u4e00\u76f4\u4e0d\u65ad\u5bf9 JS \u5f15\u64ce\u505a\u4f18\u5316, \u4f46\u9650\u4e8e JS \u672c\u8eab\u7684\u8bed\u8a00\u7279\u6027, \u5176\u6027\u80fd\u5bf9\u6bd4\u4f20\u7edf C/C++ \u7b49\u7f16\u8bd1\u578b\u8bed\u8a00\u4ecd\u7136\u76f8\u5dee\u4e24\u4e2a\u6570\u91cf\u7ea7\u4ee5\u4e0a. \u5728 WebAssembly \u4e4b\u524d, \u66fe\u6709\u4e24\u4e2a\u9879\u76ee ASM.js \u4e0e NaCl/PNacl \u8bd5\u56fe\u5728\u4e0d\u52a8\u6447 JS \u7684\u6839\u57fa\u7684\u524d\u63d0\u4e0b\u5bf9 JS \u505a\u6027\u80fd\u63d0\u5347, \u4f46\u65e0\u4e00\u4f8b\u5916\u4ee5\u60b2\u5267\u6536\u5c3e. \u8fd9\u4f7f\u4eba\u4eec\u610f\u8bc6\u5230: \u53ea\u6709\u5f7b\u5e95\u6446\u8131 JS \u7684\u675f\u7f1a\u624d\u53ef\u80fd\u4f7f\u524d\u7aef\u771f\u6b63\u5728\u9ad8\u6027\u80fd\u9886\u57df\u83b7\u5f97\u53d1\u5c55. WebAssembly \u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u683c\u5f0f, \u670d\u52a1\u5668\u901a\u8fc7\u5206\u53d1\u5305\u542b WebAssembly \u4ee3\u7801\u7684\u6587\u4ef6\u53ef\u4ee5\u4f7f\u5176\u4e2d\u7684\u4ee3\u7801\u5728\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u548c\u4e0d\u540c\u6d4f\u89c8\u5668\u4e0b\u5feb\u901f\u9ad8\u6548\u5730\u8fd0\u884c. \u4ee5\u4e0b\u662f\u4e00\u6bb5\u52a0\u6cd5\u51fd\u6570\u7684 WebAssembly \u4ee3\u7801: (module (table 0 anyfunc) (memory $0 1) (export \"memory\" (memory $0)) (export \"add\" (func $add)) (func $add (; 0 ;) (param $0 i32) (param $1 i32) (result i32) (i32.add (get_local $1) (get_local $0) ) ) ) \u5176\u7f16\u8bd1\u81ea\u4ee5\u4e0b C \u4ee3\u7801: int add(int a, int b) { return a + b; } WebAssembly \u81ea\u4ece 2015 \u5e74\u88ab\u63d0\u51fa\u540e, \u76ee\u524d\u4f9d\u7136\u5904\u5728\u65e9\u671f\u5f00\u53d1\u9636\u6bb5. \u5176\u6700\u521d\u7684 MVP(Minimum Viable Product) \u7248\u672c\u529f\u80fd\u4e0e ASM.js \u529f\u80fd\u76f8\u5f53, \u5e76\u4ee5 C/C++ \u4f5c\u4e3a\u524d\u7aef\u8bed\u8a00\u4e3a\u4f18\u5148. \u5728 2017 \u5e74\u63a8\u51fa\u7b2c\u4e00\u4e2a\u7248\u672c\u540e, \u540c\u65f6\u4e5f\u5217\u51fa\u4e86\u4e0b\u4e00\u9636\u6bb5\u5c06\u5b9e\u73b0\u7684\u7279\u8272: \u5236\u5b9a\u89c4\u683c \u7ebf\u7a0b \u56fa\u5b9a\u957f\u5ea6\u7684 SIMD \u5f02\u5e38\u5904\u7406 \u5783\u573e\u56de\u6536 \u5b58\u50a8\u5668\u533a\u5757\u64cd\u4f5c \u7f51\u9875\u5185\u5bb9\u5b89\u5168\u6027\u653f\u7b56 ECMAScript \u6a21\u5757\u96c6\u6210 \u5c3e\u7aef\u8c03\u7528 Non-trapping \u6d6e\u70b9\u6570-\u6574\u6570\u8f6c\u6362 \u591a\u503c\u51fd\u6570 Host bindings WebAssembly \u662f\u5165\u95e8\u7a0b\u5e8f\u865a\u62df\u673a\u4e0d\u9519\u7684\u521d\u5b66\u8005\u9879\u76ee, \u5b83\u7684\u6307\u4ee4\u96c6\u4e0e\u73b0\u4ee3\u786c\u4ef6\u6307\u4ee4\u96c6\u5341\u5206\u63a5\u8fd1, \u6307\u4ee4\u7d27\u51d1\u5e76\u4e14\u8bbe\u8ba1\u826f\u597d. \u7b14\u8005\u662f WebAssembly \u865a\u62df\u673a\u7684\u7eaf Python \u5b9e\u73b0 pywasm \u9879\u76ee\u7684\u4f5c\u8005, \u5176\u9996\u4e2a\u53ef\u8fd0\u884c\u7248\u672c\u5927\u6982\u53ea\u82b1\u4e86\u7b14\u8005\u4e24\u5468\u65f6\u95f4, \u5bf9\u7a0b\u5e8f\u865a\u62df\u673a\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u5c06 pywasm \u5f53\u4f5c\u4e00\u4e2a\u5b9e\u73b0 WebAssembly \u865a\u62df\u673a\u7684\u793a\u4f8b\u6559\u7a0b. \u9879\u76ee\u622a\u56fe\u5982\u4e0b.","title":"GB-\u865a\u62df\u673a\u53d1\u5c55\u53f2-\u7a0b\u5e8f\u865a\u62df\u673a"},{"location":"content/gameboy/history/runtime/#_1","text":"\u4e0e\u786c\u4ef6\u4eff\u771f\u5668\u76f8\u6bd4, \u7a0b\u5e8f\u865a\u62df\u673a\u5219\u662f\u53e6\u4e00\u4e2a\u6982\u5ff5. \u786c\u4ef6\u4eff\u771f\u5668\u4f5c\u7528\u662f\u6a21\u62df\u4e00\u4e2a\u771f\u5b9e\u5b58\u5728\u7684\u673a\u5668, \u800c\u7a0b\u5e8f\u865a\u62df\u673a\u5219\u66f4\u50cf\u662f\"\u6a21\u62df\u4e00\u4e2a\u865a\u6784\u7684\u673a\u5668\". \u7a0b\u5e8f\u865a\u62df\u673a\u6709\u65f6\u4e5f\u88ab\u79f0\u4e3a\u6258\u7ba1\u8fd0\u884c\u65f6\u73af\u5883, \u50cf JVM \u5c31\u662f\u5e38\u89c1\u7684\u4e00\u4e2a\u7a0b\u5e8f\u865a\u62df\u673a. \u4e0d\u540c\u4e8e C/C++/Rust \u7b49\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u5728\u7269\u7406\u673a\u5668\u4e0a\u7684\u7f16\u7a0b\u8bed\u8a00, Java \u7f16\u8bd1\u540e\u751f\u6210\u7684\u662f Java \u5b57\u8282\u7801: \u5b83\u53ea\u80fd\u8fd0\u884c\u5728 JVM \u4e2d. JVM \u8d1f\u8d23\u5c06 Java \u5b57\u8282\u7801\u7ffb\u8bd1\u4e3a\u672c\u5730\u673a\u5668\u7801. \u7a0b\u5e8f\u865a\u62df\u673a\u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u4e2a\u548c\u5e73\u53f0\u65e0\u5173\u7684\u7f16\u7a0b\u73af\u5883. \u5728\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u82b1\u6bd4\u8f83\u5927\u7684\u7bc7\u5e45\u53bb\u89e3\u91ca\u53e6\u4e00\u4e2a\u4e1c\u897f: Python \u4e5f\u662f\u5c06\u6e90\u7801 py \u7f16\u8bd1\u6210\u5b57\u8282\u7801 pyc \u518d\u6267\u884c, \u90a3\u4e48\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u6267\u884c\u5de5\u5177\u88ab\u79f0\u4e3a Python \u89e3\u91ca\u5668\u800c\u4e0d\u662f Python \u865a\u62df\u673a? \u8981\u89e3\u91ca\u8fd9\u4e2a\u95ee\u9898, \u9700\u8981\u4ece CPU \u8bb2\u8d77. \u865a\u62df\u673a\u7684\u539f\u59cb\u4f7f\u547d\u662f\u6a21\u62df\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a(\u5b83\u53ef\u80fd\u662f\u4e00\u53f0\u771f\u5b9e\u5b58\u5728\u8fc7\u7684\u8ba1\u7b97\u673a, \u4e5f\u53ef\u80fd\u662f\u4e00\u53f0\u865a\u6784\u7684\u8ba1\u7b97\u673a), \u800c\"\u8ba1\u7b97\"\u7684\u6838\u5fc3\u672c\u8d28\u662f CPU. CPU \u62e5\u6709\u4e00\u7ec4\u7279\u5b9a\u7684\u6307\u4ee4, \u8be5\u6307\u4ee4\u96c6\u72ec\u7acb\u4e8e\u4efb\u4f55\u7279\u5b9a\u7684\u7f16\u7a0b\u8bed\u8a00\u6216\u4f7f\u7528\u73af\u5883. \u6307\u4ee4\u4ec5\u57fa\u4e8e CPU \u7684\u5f53\u524d\u72b6\u6001\u786e\u5b9a\u6027\u5730\u6267\u884c, \u5e76\u4e14\u4e0d\u4f9d\u8d56\u4e8e\u8be5\u65f6\u95f4\u70b9\u7684\u6307\u4ee4\u6d41\u4e2d\u7684\u5176\u4ed6\u5730\u65b9\u7684\u4fe1\u606f. JVM \u7b26\u5408\u8fd9\u4e2a\u63cf\u8ff0, \u5b83\u5de5\u4f5c\u5728\u975e\u5e38\u4f4e\u7684\u5c42\u9762\u4e0a, \u51e0\u4e4e\u4e0e CPU \u76f8\u540c. \u4f46\u5bf9\u4e8e Python \u89e3\u91ca\u5668\u6765\u8bf4, \u60c5\u51b5\u5c31\u6709\u70b9\u4e0d\u4e00\u6837\u4e86. \u5b83\u89e3\u6790\u8bed\u6cd5\u6d41, \u5e76\u4e14\u7279\u5b9a\u65f6\u95f4\u70b9\u7684\u8bed\u6cd5 Token \u5fc5\u987b\u4f9d\u8d56\u4e0a\u4e0b\u6587 Token \u8fdb\u884c\u89e3\u6790. \u89e3\u91ca\u5668\u4e0d\u80fd\u5b64\u7acb\u5730\u67e5\u770b\u6bcf\u4e2a\u5b57\u8282\u751a\u81f3\u6bcf\u4e00\u884c, \u5e76\u786e\u5207\u77e5\u9053\u4e0b\u4e00\u6b65\u8be5\u505a\u4ec0\u4e48. Python \u5b57\u8282\u7801\u4e2d\u7684\u5b57\u8282\u4e0d\u80fd\u50cf JVM \u4e2d\u7684\u5b57\u8282\u90a3\u6837\u72ec\u7acb\u8fd0\u884c. \u7b80\u5355\u6765\u8bf4, Python \u7684\u5b57\u8282\u7801 pyc \u53ea\u662f\u5c06\u8ba1\u7b97\u673a\u7a0b\u5e8f\u76f8\u5bf9\u4e0d\u597d\u89e3\u91ca\u5206\u6790\u7684\u6e90\u7801\u8f6c\u6362\u6210\u53e6\u4e00\u79cd\u76f8\u5bf9\u597d\u70b9\u7684\u6e90\u7801, \u5b83\u7684\u672c\u8d28\u4ecd\u7136\u662f\u89e3\u91ca\u6267\u884c. \u4e0b\u9762\u5c06\u7b80\u5355\u4ecb\u7ecd\u51e0\u4e2a\u6709\u540d\u7684\u7a0b\u5e8f\u865a\u62df\u673a\u9879\u76ee: JVM \u4e0e WebAssembly.","title":"\u7a0b\u5e8f\u865a\u62df\u673a"},{"location":"content/gameboy/history/runtime/#jvm","text":"Java virtual machine(JVM)\u662f\u4e00\u79cd\u865a\u62df\u673a, \u5b83\u53ef\u4ee5\u4f7f\u8ba1\u7b97\u673a\u8fd0\u884c Java \u7a0b\u5e8f\u4ee5\u53ca\u5176\u5b83\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f(\u88ab\u7f16\u8bd1\u6210 Java \u5b57\u8282\u7801\u540e). \u7a0b\u5e8f\u4f5c\u8005\u53ef\u4ee5\u4f7f\u7528 Java Development Kit(JDK)\u4f7f\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4e0d\u5fc5\u62c5\u5fc3\u5e95\u5c42\u786c\u4ef6\u5e73\u53f0\u7684\u7279\u8d28, \u6b63\u5e94\u4e86 Java \u7684\u6700\u521d\u53e3\u53f7\u662f\"\u4e00\u6b21\u7f16\u8bd1, \u5230\u5904\u8fd0\u884c\". JVM \u6709\u81ea\u5df1\u5b8c\u5584\u7684\u786c\u4f53\u67b6\u6784, \u5982\u5904\u7406\u5668\u548c\u5806\u6808\u7b49, \u8fd8\u5177\u6709\u76f8\u5e94\u7684\u6307\u4ee4\u7cfb\u7edf. JVM \u7684\u5386\u53f2\u7528\"\u4e00\u5c06\u529f\u6210\u4e07\u9aa8\u67af\"\u6765\u5f62\u5bb9\u6700\u9002\u5408\u4e0d\u8fc7. \u5728 1996 \u5e74 1 \u6708 23 \u65e5, Sun \u53d1\u5e03 JDK 1.0, \u5176\u4e2d\u81ea\u5e26\u7684\u865a\u62df\u673a\u5c31\u662f Classic VM. \u5b83\u53ea\u80fd\u4f7f\u7528\u7eaf\u89e3\u91ca\u5668\u7684\u65b9\u5f0f\u6765\u6267\u884c Java \u4ee3\u7801. \u76f4\u5230 JDK 1.3 \u4e4b\u524d, \u5176\u4e00\u76f4\u662f JDK \u7684\u9ed8\u8ba4\u865a\u62df\u673a. \u5728 Sun Classic \u53d1\u5e03\u540e, Sun \u7684\u865a\u62df\u673a\u56e2\u961f\u5728 JDK 1.2 \u65f6\u53d1\u5e03\u4e86\u4e00\u6b3e\u540d\u4e3a Exact VM \u7684\u865a\u62df\u673a, \u5c1d\u8bd5\u89e3\u51b3 Classic VM \u9047\u5230\u7684\u95ee\u9898. \u5b83\u7684\u6267\u884c\u7cfb\u7edf\u89e3\u51b3\u4e86 Classic VM \u5b58\u5728\u7684\u89e3\u91ca\u5668\u548c\u7f16\u8bd1\u5668\u65e0\u6cd5\u540c\u65f6\u5de5\u4f5c\u7684\u95ee\u9898, \u8fd8\u5177\u5907\u4e86\u4e00\u4e9b\u73b0\u4ee3\u9ad8\u6027\u80fd\u5904\u7406\u5668\u7684\u7279\u6027, \u5982: \u4e24\u7ea7\u5373\u65f6\u7f16\u8bd1\u7b49. \u4f46\u4ece\u5b83\u51fa\u751f\u5230\u6b7b\u4ea1\u4ece\u672a\u88ab\u5927\u89c4\u6a21\u4f7f\u7528\u8fc7, \u5728 JDK 1.3 \u53d1\u5e03\u65f6, \u5176\u4ec5\u4ec5\u4f5c\u4e3a HotSpot VM \u7684\u5907\u7528\u865a\u62df\u673a. HotSpot VM \u53ef\u4ee5\u8bf4\u662f\u4f7f\u7528\u6700\u4e3a\u5e7f\u6cdb\u7684 Java \u865a\u62df\u673a, \u51e0\u4e4e\u6240\u6709\u7684 Java \u865a\u62df\u673a\u90fd\u77e5\u9053\u5b83. \u4f46\u5b9e\u9645\u4e0a, \u8fd9\u4e2a\u865a\u62df\u673a\u5e76\u4e0d\u662f\u7531 Sun \u516c\u53f8\u539f\u751f\u5f00\u53d1\u7684, \u800c\u662f\u7531\u4e00\u4e2a\u53eb Longview Technologies \u516c\u53f8\u5f00\u53d1\u7684. \u800c Sun \u516c\u53f8\u6ce8\u610f\u5230\u4e86\u8fd9\u6b3e\u865a\u62df\u673a\u5728 JIT \u7f16\u8bd1\u4e0a\u7684\u8bb8\u591a\u4f18\u79c0\u6210\u679c, \u4e8e 1997 \u5e74\u6536\u8d2d\u4e86 Longview Technologies \u516c\u53f8, \u4ece\u800c\u83b7\u5f97\u4e86 HotSpot VM.\u603b\u7684\u6765\u8bf4, \u4ece 2000 \u5e74 JDK 1.3 \u53d1\u5e03, HotSpot VM \u4f5c\u4e3a\u9ed8\u8ba4\u7684\u865a\u62df\u673a\u5f00\u59cb\u767b\u4e0a\u5386\u53f2\u821e\u53f0. \u5230\u73b0\u5728 2020 \u5e74, 20 \u5e74\u65f6\u95f4\u8fc7\u53bb\u4e86, \u5176\u4f9d\u7136\u662f\u6700\u5e38\u7528\u7684 JVM \u865a\u62df\u673a. \u524d\u9762\u8bf4\u7684\u90fd\u662f Sun \u516c\u53f8\u63a8\u51fa\u7684\u865a\u62df\u673a, \u4f46\u9664\u4e86 Sun \u516c\u53f8\u4e4b\u5916, \u5176\u4ed6\u7ec4\u7ec7, \u516c\u53f8\u4e5f\u7814\u53d1\u8fc7\u4e0d\u5c11\u7684\u865a\u62df\u673a\u5b9e\u73b0, \u5176\u4e2d\u6700\u8457\u540d\u7684\u8981\u7b97 BEA \u516c\u53f8\u7684 BEA JRockit \u548c IBM \u516c\u53f8\u7684 J9 VM \u4e86. BEA \u516c\u53f8\u7684 JRockit \u662f\u4e00\u6b3e\u4e13\u6ce8\u4e8e\u670d\u52a1\u5668\u786c\u4ef6\u548c\u670d\u52a1\u7aef\u5e94\u7528\u573a\u666f\u7684\u865a\u62df\u673a, \u5176\u9488\u5bf9\u670d\u52a1\u7aef\u573a\u666f\u505a\u4e86\u5927\u91cf\u7684\u4f18\u5316, \u56e0\u6b64\u5176\u4e0d\u592a\u5173\u6ce8\u7a0b\u5e8f\u542f\u52a8\u901f\u5ea6. JRockit \u865a\u62df\u673a\u5185\u90e8\u4e0d\u5305\u542b\u89e3\u91ca\u5668\u5b9e\u73b0, \u5168\u90e8\u4ee3\u7801\u90fd\u9760\u5373\u65f6\u7f16\u8bd1\u5668\u7f16\u8bd1\u540e\u6267\u884c. \u6b64\u5916, \u5176\u63d0\u4f9b\u7684 MissionControl \u670d\u52a1\u5957\u4ef6\u4e5f\u5341\u5206\u5f3a\u5927. IBM \u516c\u53f8\u7684 J9 VM \u5219\u662f\u4e00\u6b3e\u6bd4\u8f83\u901a\u7528\u7684\u865a\u62df\u673a, \u5176\u5b9a\u4f4d\u5e94\u7528\u4e8e\u4ece\u670d\u52a1\u7aef\u5230\u684c\u9762\u5e94\u7528\u518d\u5230\u5d4c\u5165\u5f0f\u7684\u591a\u7528\u9014\u865a\u62df\u673a. IBM \u516c\u53f8\u5f00\u53d1 J9 VM \u7684\u76ee\u7684\u662f\u5c06\u5176\u4f5c\u4e3a IBM \u516c\u53f8\u5404\u79cd Java \u4ea7\u54c1\u7684\u6267\u884c\u5e73\u53f0. \u6b64\u5916\u8fd8\u6709\u8bb8\u8bb8\u591a\u591a\u5176\u4ed6\u7684\u865a\u62df\u673a\u5b58\u5728, \u4f8b\u5982: Apache Harmony, Google Android Dalvik VM, Microsoft JVM \u7b49\u7b49. \u867d\u7136 JVM \u5728\u7a0b\u5e8f\u865a\u62df\u673a\u9886\u57df\u5341\u5206\u6709\u540d, \u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f, \u5b83\u5e76\u975e\u662f\u7a0b\u5e8f\u865a\u62df\u673a\u7684\u552f\u4e00\u5b9e\u8df5. \u9664\u4e86 JVM \u4e4b\u5916, \u4ecd\u7136\u6709\u8bb8\u591a\u4f18\u79c0\u7684\u865a\u62df\u673a, \u4f8b\u5982\u4e0b\u9762\u5c06\u8981\u4ecb\u7ecd\u7684 WebAssembly.","title":"JVM"},{"location":"content/gameboy/history/runtime/#webassembly","text":"WebAssembly \u8bde\u751f\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3 JavaScript \u7684\u6027\u80fd\u95ee\u9898. JavaScript \u662f\u4e00\u95e8\u89e3\u91ca\u578b\u8bed\u8a00, \u867d\u7136\u6709\u8bb8\u591a\u8457\u540d\u516c\u53f8\u548c\u5f00\u53d1\u8005\u4e00\u76f4\u4e0d\u65ad\u5bf9 JS \u5f15\u64ce\u505a\u4f18\u5316, \u4f46\u9650\u4e8e JS \u672c\u8eab\u7684\u8bed\u8a00\u7279\u6027, \u5176\u6027\u80fd\u5bf9\u6bd4\u4f20\u7edf C/C++ \u7b49\u7f16\u8bd1\u578b\u8bed\u8a00\u4ecd\u7136\u76f8\u5dee\u4e24\u4e2a\u6570\u91cf\u7ea7\u4ee5\u4e0a. \u5728 WebAssembly \u4e4b\u524d, \u66fe\u6709\u4e24\u4e2a\u9879\u76ee ASM.js \u4e0e NaCl/PNacl \u8bd5\u56fe\u5728\u4e0d\u52a8\u6447 JS \u7684\u6839\u57fa\u7684\u524d\u63d0\u4e0b\u5bf9 JS \u505a\u6027\u80fd\u63d0\u5347, \u4f46\u65e0\u4e00\u4f8b\u5916\u4ee5\u60b2\u5267\u6536\u5c3e. \u8fd9\u4f7f\u4eba\u4eec\u610f\u8bc6\u5230: \u53ea\u6709\u5f7b\u5e95\u6446\u8131 JS \u7684\u675f\u7f1a\u624d\u53ef\u80fd\u4f7f\u524d\u7aef\u771f\u6b63\u5728\u9ad8\u6027\u80fd\u9886\u57df\u83b7\u5f97\u53d1\u5c55. WebAssembly \u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u683c\u5f0f, \u670d\u52a1\u5668\u901a\u8fc7\u5206\u53d1\u5305\u542b WebAssembly \u4ee3\u7801\u7684\u6587\u4ef6\u53ef\u4ee5\u4f7f\u5176\u4e2d\u7684\u4ee3\u7801\u5728\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u548c\u4e0d\u540c\u6d4f\u89c8\u5668\u4e0b\u5feb\u901f\u9ad8\u6548\u5730\u8fd0\u884c. \u4ee5\u4e0b\u662f\u4e00\u6bb5\u52a0\u6cd5\u51fd\u6570\u7684 WebAssembly \u4ee3\u7801: (module (table 0 anyfunc) (memory $0 1) (export \"memory\" (memory $0)) (export \"add\" (func $add)) (func $add (; 0 ;) (param $0 i32) (param $1 i32) (result i32) (i32.add (get_local $1) (get_local $0) ) ) ) \u5176\u7f16\u8bd1\u81ea\u4ee5\u4e0b C \u4ee3\u7801: int add(int a, int b) { return a + b; } WebAssembly \u81ea\u4ece 2015 \u5e74\u88ab\u63d0\u51fa\u540e, \u76ee\u524d\u4f9d\u7136\u5904\u5728\u65e9\u671f\u5f00\u53d1\u9636\u6bb5. \u5176\u6700\u521d\u7684 MVP(Minimum Viable Product) \u7248\u672c\u529f\u80fd\u4e0e ASM.js \u529f\u80fd\u76f8\u5f53, \u5e76\u4ee5 C/C++ \u4f5c\u4e3a\u524d\u7aef\u8bed\u8a00\u4e3a\u4f18\u5148. \u5728 2017 \u5e74\u63a8\u51fa\u7b2c\u4e00\u4e2a\u7248\u672c\u540e, \u540c\u65f6\u4e5f\u5217\u51fa\u4e86\u4e0b\u4e00\u9636\u6bb5\u5c06\u5b9e\u73b0\u7684\u7279\u8272: \u5236\u5b9a\u89c4\u683c \u7ebf\u7a0b \u56fa\u5b9a\u957f\u5ea6\u7684 SIMD \u5f02\u5e38\u5904\u7406 \u5783\u573e\u56de\u6536 \u5b58\u50a8\u5668\u533a\u5757\u64cd\u4f5c \u7f51\u9875\u5185\u5bb9\u5b89\u5168\u6027\u653f\u7b56 ECMAScript \u6a21\u5757\u96c6\u6210 \u5c3e\u7aef\u8c03\u7528 Non-trapping \u6d6e\u70b9\u6570-\u6574\u6570\u8f6c\u6362 \u591a\u503c\u51fd\u6570 Host bindings WebAssembly \u662f\u5165\u95e8\u7a0b\u5e8f\u865a\u62df\u673a\u4e0d\u9519\u7684\u521d\u5b66\u8005\u9879\u76ee, \u5b83\u7684\u6307\u4ee4\u96c6\u4e0e\u73b0\u4ee3\u786c\u4ef6\u6307\u4ee4\u96c6\u5341\u5206\u63a5\u8fd1, \u6307\u4ee4\u7d27\u51d1\u5e76\u4e14\u8bbe\u8ba1\u826f\u597d. \u7b14\u8005\u662f WebAssembly \u865a\u62df\u673a\u7684\u7eaf Python \u5b9e\u73b0 pywasm \u9879\u76ee\u7684\u4f5c\u8005, \u5176\u9996\u4e2a\u53ef\u8fd0\u884c\u7248\u672c\u5927\u6982\u53ea\u82b1\u4e86\u7b14\u8005\u4e24\u5468\u65f6\u95f4, \u5bf9\u7a0b\u5e8f\u865a\u62df\u673a\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u5c06 pywasm \u5f53\u4f5c\u4e00\u4e2a\u5b9e\u73b0 WebAssembly \u865a\u62df\u673a\u7684\u793a\u4f8b\u6559\u7a0b. \u9879\u76ee\u622a\u56fe\u5982\u4e0b.","title":"WebAssembly"},{"location":"content/gameboy/history/simulator/","text":"\u8f6f\u4ef6\u6a21\u62df\u5668 \u8f6f\u4ef6\u6a21\u62df\u5668\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u8fd0\u884c\u76ee\u6807\u5e73\u53f0\u7684\u67d0\u4e2a\u6216\u591a\u4e2a\u5e94\u7528\u8f6f\u4ef6, \u5728\u7edd\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u6a21\u62df\u51fa\u76ee\u6807\u5e73\u53f0\u7684\u6240\u6709\u786c\u4ef6. \u8bb8\u591a\u4eba\u5e38\u5e38\u9519\u8bef\u7684\u5c06\u4eff\u771f\u5668\u79f0\u4e3a\u6a21\u62df\u5668, \u6216\u8005\u5c06\u6a21\u62df\u5668\u79f0\u4e3a\u4eff\u771f\u5668, \u4f46\u8fd9\u4e24\u4e2a\u540d\u8bcd\u4e4b\u95f4\u662f\u6709\u672c\u8d28\u4e0a\u7684\u533a\u522b\u7684. \u6a21\u62df\u5668\u6700\u5927\u7684\u7279\u70b9\u5c31\u662f, \u4ee3\u7801\u4e2d\u6ca1\u6709\u4e00\u884c\u88ab\u7528\u4f5c\"\u5bc4\u5b58\u5668\u7ea7\u6216\u65f6\u949f\u7ea7\u7684\u5efa\u6a21\", \u800c\u4e3b\u8981\u7126\u70b9\u90fd\u653e\u5728, \u5728\u67b6\u6784\u76f8\u540c\u7684\u786c\u4ef6\u4e2d, \u5982\u4f55\u5728\u5f53\u524d\u7684 A \u64cd\u4f5c\u7cfb\u7edf\u4e2d, \u6a21\u62df\u53e6\u4e00\u4e2a B \u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u65f6\u7684\u73af\u5883. \u4ee5\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u8bf4, \u6a21\u62df\u5668\u53ef\u4ee5\u5728 x86 \u67b6\u6784\u4e0b\u7684 Windows \u64cd\u4f5c\u7cfb\u7edf\u6a21\u62df\u8fd0\u884c x86 \u67b6\u6784\u4e0b\u7684 Linux \u64cd\u4f5c\u7cfb\u7edf, \u4f46\u5b83\u65e0\u6cd5\u8fd0\u884c\u5176\u5b83\u67b6\u6784\u4e0b\u7684\u64cd\u4f5c\u7cfb\u7edf. Virtual Box \u548c VMware \u662f\u8fd9\u4e2a\u9886\u57df\u5f53\u4ec1\u4e0d\u8ba9\u7684\u4e24\u5927\u738b\u8005. \u8fd9\u79cd\u8f6f\u4ef6\u53ef\u4ee5\u5f52\u7c7b\u4e3a:\"\u5f02\u6784\"+\"\u540c\u6784\u6307\u4ee4\u96c6\"\u7684\u73af\u5883. \u4ece\u6027\u80fd\u4e0a\u6765\u8bf4, \u7531\u4e8e\u4f7f\u7528\u7684\u76f8\u540c CPU \u6307\u4ee4\u96c6, \u8f6f\u4ef6\u6a21\u62df\u5668\u6027\u80fd\u8fdc\u8fdc\u6bd4\u786c\u4ef6\u4eff\u771f\u5668\u6765\u7684\u597d, \u901a\u5e38\u60c5\u51b5\u4e0b\u6027\u80fd\u635f\u5931\u5728 20% \u4e4b\u5185. \u4f46\u662f, \u8fd9\u79cd\u7c7b\u522b\u7684\u8f6f\u4ef6\u6a21\u62df\u5668\u901a\u5e38\u65e0\u6cd5\u6709\u6548\u7387\u7684\u5d4c\u5957\u4f7f\u7528, \u6bd4\u5982\u5728 Virtual Box \u4e2d\u518d\u5f00\u4e00\u4e2a Virtual Box. Virtual Box Virtual Box \u662f\u7528\u4e8e\u865a\u62df\u5316 x86 \u8ba1\u7b97\u4f53\u7cfb\u7ed3\u6784\u7684\u5f00\u6e90\u8f6f\u4ef6. \u5b83\u5145\u5f53\u7ba1\u7406\u7a0b\u5e8f, \u521b\u5efa\u4e00\u4e2a VM, \u7528\u6237\u53ef\u4ee5\u5728\u5176\u4e2d\u8fd0\u884c\u53e6\u4e00\u4e2a OS(\u64cd\u4f5c\u7cfb\u7edf). \u8fd0\u884c VirtualBox \u7684\u64cd\u4f5c\u7cfb\u7edf\u88ab\u79f0\u4e3a Host OS, VM \u4e2d\u8fd0\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\u88ab\u79f0\u4e3a Guest \u64cd\u4f5c\u7cfb\u7edf. VirtualBox \u652f\u6301 Windows, Linux \u6216 macOS \u4f5c\u4e3a\u5176 Host OS. \u5728\u914d\u7f6e\u865a\u62df\u673a\u65f6,\u7528\u6237\u53ef\u4ee5\u6307\u5b9a\u5c06\u591a\u5c11 CPU \u5185\u6838\u4ee5\u53ca\u591a\u5c11 RAM \u548c\u8f6f\u76d8\u7a7a\u95f4\u5206\u914d\u7ed9 VM.\u5f53 VM \u8fd0\u884c\u65f6,\u5b83\u53ef\u4ee5\u88ab\u968f\u65f6\"\u6682\u505c\"(\u7cfb\u7edf\u6267\u884c\u5728\u8be5\u65f6\u523b\u88ab\u51bb\u7ed3),\u5e76\u5728\u4ee5\u540e\u7528\u6237\u5e0c\u671b\u7ee7\u7eed\u4f7f\u7528\u5b83\u65f6\u6062\u590d. VirtualBox \u6700\u521d\u662f\u7531\u5fb7\u56fd Weinstadt \u7684 Innotek GmbH \u6839\u636e\u4e13\u6709\u8f6f\u4ef6\u8bb8\u53ef\u63d0\u4f9b\u7684, \u8be5\u4ea7\u54c1\u7684\u5176\u4e2d\u4e00\u4e2a\u7248\u672c\u53ef\u4ee5\u514d\u8d39\u83b7\u5f97, \u5728 VirtualBox \u4e2a\u4eba\u4f7f\u7528\u548c\u8bc4\u4f30\u8bb8\u53ef(PUEL)\u7684\u7ea6\u675f\u6761\u4ef6\u4e0b, \u53ef\u4f9b\u4e2a\u4eba\u6216\u8bc4\u4f30\u4f7f\u7528. 2007 \u5e74 1 \u6708, Innotek GmbH \u6839\u636e GNU \u901a\u7528\u516c\u5171\u8bb8\u53ef\u8bc1(GPL)\u7684\u8981\u6c42, \u53d1\u5e03\u4e86VirtualBox \u5f00\u653e\u6e90\u4ee3\u7801\u7248(OSE)\u4f5c\u4e3a\u514d\u8d39\u548c\u5f00\u6e90\u8f6f\u4ef6. Sun Microsystems \u4e8e 2008 \u5e74 2 \u6708\u6536\u8d2d\u4e86 Innotek. \u7532\u9aa8\u6587\u516c\u53f8\u4e8e 2010 \u5e74 1 \u6708\u6536\u8d2d\u4e86 Sun, \u5e76\u5c06\u8be5\u4ea7\u54c1\u66f4\u540d\u4e3a Oracle VM VirtualBox. VMWare VMware \u662f\u6234\u5c14\u79d1\u6280(\u6234\u5c14\u7535\u8111\u6bcd\u516c\u53f8)\u65d7\u4e0b\u8f6f\u4ef6\u516c\u53f8, \u63d0\u4f9b\u4e91\u8ba1\u7b97\u548c\u786c\u4ef6\u865a\u62df\u5316\u7684\u8f6f\u4ef6\u548c\u670d\u52a1, \u5e76\u53f7\u79f0\u662f\u7b2c\u4e00\u4e2a\u6210\u529f\u5546\u4e1a\u5316\u7684\u865a\u62df\u5316 x86 \u67b6\u6784. \u4f20\u7edf\u7684\u64cd\u4f5c\u7cfb\u7edf\u865a\u62df\u673a, \u5982 Bochs, \u900f\u8fc7\u8c03\u7528\u5bbf\u4e3b\u673a\u4e0a\u7684\u8f6f\u4ef6\u5b50\u7a0b\u5e8f\u9010\u6761\u8fd0\u884c\u6bcf\u4e00\u9053\u5ba2\u6237\u673a\u7684 CPU \u6307\u4ee4, \u4ee5\u6b64\u6a21\u62df\u5ba2\u6237\u673a\u7684\u5fae\u5904\u7406\u5668. \u8fd9\u79cd\u62bd\u8c61\u5316\u7684\u65b9\u6cd5, \u53ef\u4f7f\u5bbf\u4e3b\u673a\u6a21\u62df\u51fa\u4e0d\u540c\u4e8e\u81ea\u8eab\u5fae\u5904\u7406\u5668\u7684\u73af\u5883, \u8ba9\u5ba2\u6237\u673a\u8fd0\u884c. \u7136\u800c\u8fd9\u7c7b\u865a\u62df\u673a\u8fd0\u884c\u5f97\u975e\u5e38\u6162(\u5176\u5b9e\u8d28\u662f\u4eff\u771f\u5668). \u4e00\u79cd\u66f4\u6709\u6548\u7387\u7684\u65b9\u5f0f\u662f\u5728\u521d\u6b21\u6267\u884c\u5ba2\u6237\u673a\u6307\u4ee4\u65f6\u52a8\u6001\u5730\u91cd\u65b0\u7f16\u8bd1\u90a3\u4e9b\u673a\u5668\u6307\u4ee4\u5757, \u4ee5\u540e\u7528\u5230\u8fd9\u4e9b\u6307\u4ee4\u65f6\u76f4\u63a5\u6267\u884c\u7ecf\u8fc7\u7ffb\u8bd1\u7684\u4ee3\u7801. \u8fd9\u79cd\u65b9\u5f0f\u662f\u7531\u5fae\u8f6f\u7684 Virtual PC for Mac OS X\u4ea7\u54c1, \u4ee5\u53ca Fabrice Bellard \u7684 QEMU \u4ea7\u54c1(\u4e0d\u542b KVM \u9644\u52a0\u6a21\u5757)\u6240\u4f7f\u7528\u7684\u65b9\u5f0f. \u548c Virtual PC for Windows \u4ea7\u54c1\u53ca\u5e26\u6709 kqemu \u9644\u52a0\u6a21\u5757\u7684 QEMU \u4ea7\u54c1\u4e00\u6837, VMware \u4f7f\u7528\u4e86\u4e00\u79cd\u66f4\u52a0\u4f18\u5316\u7684\u65b9\u5f0f, \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u4ee3\u7801. \u5f53\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u4ee3\u7801\u65f6, \u8fd9\u51e0\u79cd\u8f6f\u4ef6\u4ea7\u54c1\u4f1a\u52a8\u6001\u5730\u91cd\u5199\u4ee3\u7801(\u5185\u6838\u7ea7\u522b). \u5728 VMware \u4e2d, \u7ecf\u8fc7\u7ffb\u8bd1\u7684\u4ee3\u7801\u76f4\u63a5\u88ab\u653e\u5165\u5185\u5b58\u7684\u7a7a\u95f2\u533a\u57df\u4e2d\u7684, \u5e76\u4e14\u8fd9\u4e2a\u533a\u57df\u901a\u5e38\u88ab\u8bbe\u7f6e\u4e3a\u5916\u90e8\u4e0d\u53ef\u89c1\u7684. \u7531\u4e8e\u8fd9\u4e9b\u539f\u56e0, VMware \u80fd\u4ee5\u8d85\u8fc7\u5728\u771f\u5b9e\u786c\u4ef6\u4e0a\u8fd0\u884c\u901f\u5ea6\u7684 80% \u7684\u901f\u5ea6\u8fd0\u884c\u865a\u62df\u7684\u5ba2\u6237\u64cd\u4f5c\u7cfb\u7edf.","title":"GB-\u865a\u62df\u673a\u53d1\u5c55\u53f2-\u8f6f\u4ef6\u6a21\u62df\u5668"},{"location":"content/gameboy/history/simulator/#_1","text":"\u8f6f\u4ef6\u6a21\u62df\u5668\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u8fd0\u884c\u76ee\u6807\u5e73\u53f0\u7684\u67d0\u4e2a\u6216\u591a\u4e2a\u5e94\u7528\u8f6f\u4ef6, \u5728\u7edd\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u6a21\u62df\u51fa\u76ee\u6807\u5e73\u53f0\u7684\u6240\u6709\u786c\u4ef6. \u8bb8\u591a\u4eba\u5e38\u5e38\u9519\u8bef\u7684\u5c06\u4eff\u771f\u5668\u79f0\u4e3a\u6a21\u62df\u5668, \u6216\u8005\u5c06\u6a21\u62df\u5668\u79f0\u4e3a\u4eff\u771f\u5668, \u4f46\u8fd9\u4e24\u4e2a\u540d\u8bcd\u4e4b\u95f4\u662f\u6709\u672c\u8d28\u4e0a\u7684\u533a\u522b\u7684. \u6a21\u62df\u5668\u6700\u5927\u7684\u7279\u70b9\u5c31\u662f, \u4ee3\u7801\u4e2d\u6ca1\u6709\u4e00\u884c\u88ab\u7528\u4f5c\"\u5bc4\u5b58\u5668\u7ea7\u6216\u65f6\u949f\u7ea7\u7684\u5efa\u6a21\", \u800c\u4e3b\u8981\u7126\u70b9\u90fd\u653e\u5728, \u5728\u67b6\u6784\u76f8\u540c\u7684\u786c\u4ef6\u4e2d, \u5982\u4f55\u5728\u5f53\u524d\u7684 A \u64cd\u4f5c\u7cfb\u7edf\u4e2d, \u6a21\u62df\u53e6\u4e00\u4e2a B \u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u65f6\u7684\u73af\u5883. \u4ee5\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u8bf4, \u6a21\u62df\u5668\u53ef\u4ee5\u5728 x86 \u67b6\u6784\u4e0b\u7684 Windows \u64cd\u4f5c\u7cfb\u7edf\u6a21\u62df\u8fd0\u884c x86 \u67b6\u6784\u4e0b\u7684 Linux \u64cd\u4f5c\u7cfb\u7edf, \u4f46\u5b83\u65e0\u6cd5\u8fd0\u884c\u5176\u5b83\u67b6\u6784\u4e0b\u7684\u64cd\u4f5c\u7cfb\u7edf. Virtual Box \u548c VMware \u662f\u8fd9\u4e2a\u9886\u57df\u5f53\u4ec1\u4e0d\u8ba9\u7684\u4e24\u5927\u738b\u8005. \u8fd9\u79cd\u8f6f\u4ef6\u53ef\u4ee5\u5f52\u7c7b\u4e3a:\"\u5f02\u6784\"+\"\u540c\u6784\u6307\u4ee4\u96c6\"\u7684\u73af\u5883. \u4ece\u6027\u80fd\u4e0a\u6765\u8bf4, \u7531\u4e8e\u4f7f\u7528\u7684\u76f8\u540c CPU \u6307\u4ee4\u96c6, \u8f6f\u4ef6\u6a21\u62df\u5668\u6027\u80fd\u8fdc\u8fdc\u6bd4\u786c\u4ef6\u4eff\u771f\u5668\u6765\u7684\u597d, \u901a\u5e38\u60c5\u51b5\u4e0b\u6027\u80fd\u635f\u5931\u5728 20% \u4e4b\u5185. \u4f46\u662f, \u8fd9\u79cd\u7c7b\u522b\u7684\u8f6f\u4ef6\u6a21\u62df\u5668\u901a\u5e38\u65e0\u6cd5\u6709\u6548\u7387\u7684\u5d4c\u5957\u4f7f\u7528, \u6bd4\u5982\u5728 Virtual Box \u4e2d\u518d\u5f00\u4e00\u4e2a Virtual Box.","title":"\u8f6f\u4ef6\u6a21\u62df\u5668"},{"location":"content/gameboy/history/simulator/#virtual-box","text":"Virtual Box \u662f\u7528\u4e8e\u865a\u62df\u5316 x86 \u8ba1\u7b97\u4f53\u7cfb\u7ed3\u6784\u7684\u5f00\u6e90\u8f6f\u4ef6. \u5b83\u5145\u5f53\u7ba1\u7406\u7a0b\u5e8f, \u521b\u5efa\u4e00\u4e2a VM, \u7528\u6237\u53ef\u4ee5\u5728\u5176\u4e2d\u8fd0\u884c\u53e6\u4e00\u4e2a OS(\u64cd\u4f5c\u7cfb\u7edf). \u8fd0\u884c VirtualBox \u7684\u64cd\u4f5c\u7cfb\u7edf\u88ab\u79f0\u4e3a Host OS, VM \u4e2d\u8fd0\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\u88ab\u79f0\u4e3a Guest \u64cd\u4f5c\u7cfb\u7edf. VirtualBox \u652f\u6301 Windows, Linux \u6216 macOS \u4f5c\u4e3a\u5176 Host OS. \u5728\u914d\u7f6e\u865a\u62df\u673a\u65f6,\u7528\u6237\u53ef\u4ee5\u6307\u5b9a\u5c06\u591a\u5c11 CPU \u5185\u6838\u4ee5\u53ca\u591a\u5c11 RAM \u548c\u8f6f\u76d8\u7a7a\u95f4\u5206\u914d\u7ed9 VM.\u5f53 VM \u8fd0\u884c\u65f6,\u5b83\u53ef\u4ee5\u88ab\u968f\u65f6\"\u6682\u505c\"(\u7cfb\u7edf\u6267\u884c\u5728\u8be5\u65f6\u523b\u88ab\u51bb\u7ed3),\u5e76\u5728\u4ee5\u540e\u7528\u6237\u5e0c\u671b\u7ee7\u7eed\u4f7f\u7528\u5b83\u65f6\u6062\u590d. VirtualBox \u6700\u521d\u662f\u7531\u5fb7\u56fd Weinstadt \u7684 Innotek GmbH \u6839\u636e\u4e13\u6709\u8f6f\u4ef6\u8bb8\u53ef\u63d0\u4f9b\u7684, \u8be5\u4ea7\u54c1\u7684\u5176\u4e2d\u4e00\u4e2a\u7248\u672c\u53ef\u4ee5\u514d\u8d39\u83b7\u5f97, \u5728 VirtualBox \u4e2a\u4eba\u4f7f\u7528\u548c\u8bc4\u4f30\u8bb8\u53ef(PUEL)\u7684\u7ea6\u675f\u6761\u4ef6\u4e0b, \u53ef\u4f9b\u4e2a\u4eba\u6216\u8bc4\u4f30\u4f7f\u7528. 2007 \u5e74 1 \u6708, Innotek GmbH \u6839\u636e GNU \u901a\u7528\u516c\u5171\u8bb8\u53ef\u8bc1(GPL)\u7684\u8981\u6c42, \u53d1\u5e03\u4e86VirtualBox \u5f00\u653e\u6e90\u4ee3\u7801\u7248(OSE)\u4f5c\u4e3a\u514d\u8d39\u548c\u5f00\u6e90\u8f6f\u4ef6. Sun Microsystems \u4e8e 2008 \u5e74 2 \u6708\u6536\u8d2d\u4e86 Innotek. \u7532\u9aa8\u6587\u516c\u53f8\u4e8e 2010 \u5e74 1 \u6708\u6536\u8d2d\u4e86 Sun, \u5e76\u5c06\u8be5\u4ea7\u54c1\u66f4\u540d\u4e3a Oracle VM VirtualBox.","title":"Virtual Box"},{"location":"content/gameboy/history/simulator/#vmware","text":"VMware \u662f\u6234\u5c14\u79d1\u6280(\u6234\u5c14\u7535\u8111\u6bcd\u516c\u53f8)\u65d7\u4e0b\u8f6f\u4ef6\u516c\u53f8, \u63d0\u4f9b\u4e91\u8ba1\u7b97\u548c\u786c\u4ef6\u865a\u62df\u5316\u7684\u8f6f\u4ef6\u548c\u670d\u52a1, \u5e76\u53f7\u79f0\u662f\u7b2c\u4e00\u4e2a\u6210\u529f\u5546\u4e1a\u5316\u7684\u865a\u62df\u5316 x86 \u67b6\u6784. \u4f20\u7edf\u7684\u64cd\u4f5c\u7cfb\u7edf\u865a\u62df\u673a, \u5982 Bochs, \u900f\u8fc7\u8c03\u7528\u5bbf\u4e3b\u673a\u4e0a\u7684\u8f6f\u4ef6\u5b50\u7a0b\u5e8f\u9010\u6761\u8fd0\u884c\u6bcf\u4e00\u9053\u5ba2\u6237\u673a\u7684 CPU \u6307\u4ee4, \u4ee5\u6b64\u6a21\u62df\u5ba2\u6237\u673a\u7684\u5fae\u5904\u7406\u5668. \u8fd9\u79cd\u62bd\u8c61\u5316\u7684\u65b9\u6cd5, \u53ef\u4f7f\u5bbf\u4e3b\u673a\u6a21\u62df\u51fa\u4e0d\u540c\u4e8e\u81ea\u8eab\u5fae\u5904\u7406\u5668\u7684\u73af\u5883, \u8ba9\u5ba2\u6237\u673a\u8fd0\u884c. \u7136\u800c\u8fd9\u7c7b\u865a\u62df\u673a\u8fd0\u884c\u5f97\u975e\u5e38\u6162(\u5176\u5b9e\u8d28\u662f\u4eff\u771f\u5668). \u4e00\u79cd\u66f4\u6709\u6548\u7387\u7684\u65b9\u5f0f\u662f\u5728\u521d\u6b21\u6267\u884c\u5ba2\u6237\u673a\u6307\u4ee4\u65f6\u52a8\u6001\u5730\u91cd\u65b0\u7f16\u8bd1\u90a3\u4e9b\u673a\u5668\u6307\u4ee4\u5757, \u4ee5\u540e\u7528\u5230\u8fd9\u4e9b\u6307\u4ee4\u65f6\u76f4\u63a5\u6267\u884c\u7ecf\u8fc7\u7ffb\u8bd1\u7684\u4ee3\u7801. \u8fd9\u79cd\u65b9\u5f0f\u662f\u7531\u5fae\u8f6f\u7684 Virtual PC for Mac OS X\u4ea7\u54c1, \u4ee5\u53ca Fabrice Bellard \u7684 QEMU \u4ea7\u54c1(\u4e0d\u542b KVM \u9644\u52a0\u6a21\u5757)\u6240\u4f7f\u7528\u7684\u65b9\u5f0f. \u548c Virtual PC for Windows \u4ea7\u54c1\u53ca\u5e26\u6709 kqemu \u9644\u52a0\u6a21\u5757\u7684 QEMU \u4ea7\u54c1\u4e00\u6837, VMware \u4f7f\u7528\u4e86\u4e00\u79cd\u66f4\u52a0\u4f18\u5316\u7684\u65b9\u5f0f, \u5728\u5c3d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u4ee3\u7801. \u5f53\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u4ee3\u7801\u65f6, \u8fd9\u51e0\u79cd\u8f6f\u4ef6\u4ea7\u54c1\u4f1a\u52a8\u6001\u5730\u91cd\u5199\u4ee3\u7801(\u5185\u6838\u7ea7\u522b). \u5728 VMware \u4e2d, \u7ecf\u8fc7\u7ffb\u8bd1\u7684\u4ee3\u7801\u76f4\u63a5\u88ab\u653e\u5165\u5185\u5b58\u7684\u7a7a\u95f2\u533a\u57df\u4e2d\u7684, \u5e76\u4e14\u8fd9\u4e2a\u533a\u57df\u901a\u5e38\u88ab\u8bbe\u7f6e\u4e3a\u5916\u90e8\u4e0d\u53ef\u89c1\u7684. \u7531\u4e8e\u8fd9\u4e9b\u539f\u56e0, VMware \u80fd\u4ee5\u8d85\u8fc7\u5728\u771f\u5b9e\u786c\u4ef6\u4e0a\u8fd0\u884c\u901f\u5ea6\u7684 80% \u7684\u901f\u5ea6\u8fd0\u884c\u865a\u62df\u7684\u5ba2\u6237\u64cd\u4f5c\u7cfb\u7edf.","title":"VMWare"},{"location":"content/gameboy/other/init/","text":"\u786c\u4ef6\u521d\u59cb\u5316\u5de5\u4f5c \u5f53 Game Boy \u901a\u7535\u65f6, \u5c06\u6267\u884c\u4ece\u5185\u5b58\u4f4d\u7f6e 0 \u5f00\u59cb\u7684 256 \u5b57\u8282\u7a0b\u5e8f. \u8be5\u7a0b\u5e8f\u4f4d\u4e8e Game Boy \u7684 ROM \u4e2d. \u8be5\u7a0b\u5e8f\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8bfb\u53d6 Cartridge \u4f4d\u7f6e\u4ece 0x0104 \u5230 0x0133 \u7684\u5185\u5b58\u7a7a\u95f4. \u6b64\u7a7a\u95f4\u5b58\u50a8\u4e86\u4efb\u5929\u5802\u7684\u5546\u6807, \u5e76\u5c06\u6b64\u5546\u6807\u7684\u56fe\u5f62\u663e\u793a\u5728\u5c4f\u5e55\u9876\u90e8. \u7136\u540e\u6eda\u52a8\u6b64\u56fe\u50cf, \u76f4\u5230\u5b83\u4f4d\u4e8e\u5c4f\u5e55\u4e2d\u95f4. \u7136\u540e\u5728\u5185\u7f6e\u626c\u58f0\u5668\u4e0a\u64ad\u653e\u4e24\u4e2a\u97f3\u7b26. \u518d\u6b21\u8bfb\u53d6 Cartridge \u4f4d\u7f6e\u4ece 0x0104 \u5230 0x0133, \u4f46\u8fd9\u4e00\u6b21\u5c06\u5b83\u4eec\u4e0e\u5185\u90e8 ROM \u4e2d\u7684\u8868\u683c\u8fdb\u884c\u6bd4\u8f83. \u5982\u679c\u6709\u4efb\u4f55\u5b57\u8282\u4e0d\u4e00\u81f4, \u5219 Game Boy \u4f1a\u505c\u6b62\u7ee7\u7eed\u6bd4\u8f83\u5b57\u8282\u5e76\u505c\u4e0b\u6240\u6709\u64cd\u4f5c. \u63a5\u4e0b\u6765, Game Boy \u5f00\u59cb\u5c06 Cariridge \u4e2d\u4f4d\u7f6e\u4ece 0x0134 \u5230 0x014d \u7684\u5b57\u8282\u76f8\u52a0, \u603b\u8ba1\u4e3a 25 \u4e2a\u6570\u5b57. \u5982\u679c\u7ed3\u679c\u7684\u6700\u4f4e\u6709\u6548\u5b57\u8282\u4e0d\u662f\u96f6, \u5219Game Boy \u5c06\u505c\u6b62\u6267\u884c\u4efb\u4f55\u64cd\u4f5c. \u5982\u679c\u4ee5\u4e0a\u68c0\u67e5\u5747\u901a\u8fc7, \u5219\u7981\u7528\u5185\u90e8 ROM, \u5e76\u4e14\u521d\u59cb\u5316\u5bc4\u5b58\u5668\u7684\u503c, \u5e76\u4f7f CPU \u4ece\u4f4d\u7f6e 0x0100 \u5f00\u59cb\u6267\u884c Cartridge \u7a0b\u5e8f. \u5185\u5b58\u5730\u5740\u4e0e\u5176\u521d\u59cb\u5316\u7684\u503c: AF=0x01b0-GB/SGB, 0xffb0-GBP, 0x11b0-GBC BC=0x0013 DE=0x00d8 HL=0x014d 0xff05 = 0x00 ; TIMA 0xff06 = 0x00 ; TMA 0xff07 = 0x00 ; TAC 0xff10 = 0x80 ; NR10 0xff11 = 0xbf ; NR11 0xff12 = 0xf3 ; NR12 0xff14 = 0xbf ; NR14 0xff16 = 0x3f ; NR21 0xff17 = 0x00 ; NR22 0xff19 = 0xbf ; NR24 0xff1a = 0x7f ; NR30 0xff1b = 0xff ; NR31 0xff1c = 0x9f ; NR32 0xff1e = 0xbf ; NR33 0xff20 = 0xff ; NR41 0xff21 = 0x00 ; NR42 0xff22 = 0x00 ; NR43 0xff23 = 0xbf ; NR30 0xff24 = 0x77 ; NR50 0xff25 = 0xf3 ; NR51 0xff26 = 0xf1-GB, 0xf0-SGB ; NR52 0xff40 = 0x91 ; LCDC 0xff42 = 0x00 ; SCY 0xff43 = 0x00 ; SCX 0xff45 = 0x00 ; LYC 0xff47 = 0xfc ; BGP 0xff48 = 0xff ; OBP0 0xff49 = 0xff ; OBP1 0xff4a = 0x00 ; WY 0xff4b = 0x00 ; WX 0xffff = 0x00 ; IE \u8bf7\u6ce8\u610f, \u5f00\u673a\u65f6 Game Boy \u5185\u90e8 RAM \u5305\u542b\u968f\u673a\u6570\u636e. \u6240\u6709\u7684 Game Boy \u4eff\u771f\u5668\u90fd\u503e\u5411\u4e8e\u5728\u8fdb\u5165\u65f6\u9996\u5148\u5c06\u6240\u6709 RAM \u7684\u503c\u8bbe\u7f6e\u4e3a 0x00.","title":"GB-\u5176\u4ed6-\u786c\u4ef6\u521d\u59cb\u5316\u5de5\u4f5c"},{"location":"content/gameboy/other/init/#_1","text":"\u5f53 Game Boy \u901a\u7535\u65f6, \u5c06\u6267\u884c\u4ece\u5185\u5b58\u4f4d\u7f6e 0 \u5f00\u59cb\u7684 256 \u5b57\u8282\u7a0b\u5e8f. \u8be5\u7a0b\u5e8f\u4f4d\u4e8e Game Boy \u7684 ROM \u4e2d. \u8be5\u7a0b\u5e8f\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8bfb\u53d6 Cartridge \u4f4d\u7f6e\u4ece 0x0104 \u5230 0x0133 \u7684\u5185\u5b58\u7a7a\u95f4. \u6b64\u7a7a\u95f4\u5b58\u50a8\u4e86\u4efb\u5929\u5802\u7684\u5546\u6807, \u5e76\u5c06\u6b64\u5546\u6807\u7684\u56fe\u5f62\u663e\u793a\u5728\u5c4f\u5e55\u9876\u90e8. \u7136\u540e\u6eda\u52a8\u6b64\u56fe\u50cf, \u76f4\u5230\u5b83\u4f4d\u4e8e\u5c4f\u5e55\u4e2d\u95f4. \u7136\u540e\u5728\u5185\u7f6e\u626c\u58f0\u5668\u4e0a\u64ad\u653e\u4e24\u4e2a\u97f3\u7b26. \u518d\u6b21\u8bfb\u53d6 Cartridge \u4f4d\u7f6e\u4ece 0x0104 \u5230 0x0133, \u4f46\u8fd9\u4e00\u6b21\u5c06\u5b83\u4eec\u4e0e\u5185\u90e8 ROM \u4e2d\u7684\u8868\u683c\u8fdb\u884c\u6bd4\u8f83. \u5982\u679c\u6709\u4efb\u4f55\u5b57\u8282\u4e0d\u4e00\u81f4, \u5219 Game Boy \u4f1a\u505c\u6b62\u7ee7\u7eed\u6bd4\u8f83\u5b57\u8282\u5e76\u505c\u4e0b\u6240\u6709\u64cd\u4f5c. \u63a5\u4e0b\u6765, Game Boy \u5f00\u59cb\u5c06 Cariridge \u4e2d\u4f4d\u7f6e\u4ece 0x0134 \u5230 0x014d \u7684\u5b57\u8282\u76f8\u52a0, \u603b\u8ba1\u4e3a 25 \u4e2a\u6570\u5b57. \u5982\u679c\u7ed3\u679c\u7684\u6700\u4f4e\u6709\u6548\u5b57\u8282\u4e0d\u662f\u96f6, \u5219Game Boy \u5c06\u505c\u6b62\u6267\u884c\u4efb\u4f55\u64cd\u4f5c. \u5982\u679c\u4ee5\u4e0a\u68c0\u67e5\u5747\u901a\u8fc7, \u5219\u7981\u7528\u5185\u90e8 ROM, \u5e76\u4e14\u521d\u59cb\u5316\u5bc4\u5b58\u5668\u7684\u503c, \u5e76\u4f7f CPU \u4ece\u4f4d\u7f6e 0x0100 \u5f00\u59cb\u6267\u884c Cartridge \u7a0b\u5e8f. \u5185\u5b58\u5730\u5740\u4e0e\u5176\u521d\u59cb\u5316\u7684\u503c: AF=0x01b0-GB/SGB, 0xffb0-GBP, 0x11b0-GBC BC=0x0013 DE=0x00d8 HL=0x014d 0xff05 = 0x00 ; TIMA 0xff06 = 0x00 ; TMA 0xff07 = 0x00 ; TAC 0xff10 = 0x80 ; NR10 0xff11 = 0xbf ; NR11 0xff12 = 0xf3 ; NR12 0xff14 = 0xbf ; NR14 0xff16 = 0x3f ; NR21 0xff17 = 0x00 ; NR22 0xff19 = 0xbf ; NR24 0xff1a = 0x7f ; NR30 0xff1b = 0xff ; NR31 0xff1c = 0x9f ; NR32 0xff1e = 0xbf ; NR33 0xff20 = 0xff ; NR41 0xff21 = 0x00 ; NR42 0xff22 = 0x00 ; NR43 0xff23 = 0xbf ; NR30 0xff24 = 0x77 ; NR50 0xff25 = 0xf3 ; NR51 0xff26 = 0xf1-GB, 0xf0-SGB ; NR52 0xff40 = 0x91 ; LCDC 0xff42 = 0x00 ; SCY 0xff43 = 0x00 ; SCX 0xff45 = 0x00 ; LYC 0xff47 = 0xfc ; BGP 0xff48 = 0xff ; OBP0 0xff49 = 0xff ; OBP1 0xff4a = 0x00 ; WY 0xff4b = 0x00 ; WX 0xffff = 0x00 ; IE \u8bf7\u6ce8\u610f, \u5f00\u673a\u65f6 Game Boy \u5185\u90e8 RAM \u5305\u542b\u968f\u673a\u6570\u636e. \u6240\u6709\u7684 Game Boy \u4eff\u771f\u5668\u90fd\u503e\u5411\u4e8e\u5728\u8fdb\u5165\u65f6\u9996\u5148\u5c06\u6240\u6709 RAM \u7684\u503c\u8bbe\u7f6e\u4e3a 0x00.","title":"\u786c\u4ef6\u521d\u59cb\u5316\u5de5\u4f5c"},{"location":"content/gameboy/other/joypad/","text":"\u6e38\u620f\u624b\u67c4 Game Boy \u6709\u4e00\u4e2a\u5185\u7f6e\u7684\u6e38\u620f\u624b\u67c4, \u5e26\u6709 8 \u4e2a\u6309\u94ae. \u6709 4 \u4e2a\u65b9\u5411\u6309\u94ae(\u4e0a, \u4e0b, \u5de6\u548c\u53f3)\u548c 4 \u4e2a\u6807\u51c6\u6309\u94ae(\u5f00\u59cb, \u9009\u62e9, A \u548c B). \u8fd9\u516b\u4e2a\u6309\u94ae\u5171\u7528\u4e00\u4e2a\u5bc4\u5b58\u5668, \u4f4d\u4e8e\u5185\u5b58\u5730\u5740 0xff00 \u5904. \u5bc4\u5b58\u5668\u5176\u5206\u89e3\u65b9\u5f0f\u5982\u4e0b. FF00 Joypad \u4f4d \u8bf4\u660e Bit 7 Not used Bit 7 Not used Bit 6 Not used Bit 5 P15 Select Button Keys (0=Select) Bit 4 P14 Select Direction Keys (0=Select) Bit 3 P13 Input Down or Start (0=Pressed) (Read Only) Bit 2 P12 Input Up or Select (0=Pressed) (Read Only) Bit 1 P11 Input Left or Button B (0=Pressed) (Read Only) Bit 0 P10 Input Right or Button A (0=Pressed) (Read Only) \u4eff\u771f\u5668\u5c06\u7b2c 0-3 \u4f4d\u8bbe\u7f6e\u4e3a\u663e\u793a\u6e38\u620f\u624b\u67c4\u7684\u72b6\u6001. \u5982\u4e0a\u6240\u793a, \u65b9\u5411\u6309\u94ae\u548c\u6807\u51c6\u6309\u94ae\u5171\u4eab\u6b64\u4f4d\u8303\u56f4. \u90a3\u4e48\u6e38\u620f\u5047\u8bbe\u5f53\u524d\u7b2c 3 \u4f4d\u662f 0, \u90a3\u4e48\u6e38\u620f\u5982\u4f55\u77e5\u9053\u662f\u65b9\u5411\u5411\u4e0b\u6309\u94ae\u8fd8\u662f\u6807\u51c6\u542f\u52a8\u6309\u94ae? \u8fd9\u79cd\u60c5\u51b5\u4e0b, \u9700\u8981\u89c2\u5bdf\u7b2c 4-5 \u4f4d, \u5b83\u4eec\u53ef\u4ee5\u544a\u8bc9\u6e38\u620f\u5f00\u53d1\u8005\u5177\u4f53\u662f\u54ea\u4e2a\u6309\u94ae\u88ab\u6309\u4e0b. \u4ee3\u7801\u5b9e\u73b0 // The eight gameboy buttons/direction keys are arranged in form of a 2x4 matrix. Select either button or direction // keys by writing to this register, then read-out bit 0-3. // // FF00 - P1/JOYP - Joypad (R/W) // // Bit 7 - Not used // Bit 6 - Not used // Bit 5 - P15 Select Button Keys (0=Select) // Bit 4 - P14 Select Direction Keys (0=Select) // Bit 3 - P13 Input Down or Start (0=Pressed) (Read Only) // Bit 2 - P12 Input Up or Select (0=Pressed) (Read Only) // Bit 1 - P11 Input Left or Button B (0=Pressed) (Read Only) // Bit 0 - P10 Input Right or Button A (0=Pressed) (Read Only) // // Note: Most programs are repeatedly reading from this port several times (the first reads used as short delay, // allowing the inputs to stabilize, and only the value from the last read actually used). use super::intf::{Flag, Intf}; use super::memory::Memory; use std::cell::RefCell; use std::rc::Rc; #[rustfmt::skip] #[derive(Clone)] pub enum JoypadKey { Right = 0b0000_0001, Left = 0b0000_0010, Up = 0b0000_0100, Down = 0b0000_1000, A = 0b0001_0000, B = 0b0010_0000, Select = 0b0100_0000, Start = 0b1000_0000, } pub struct Joypad { intf: Rc<RefCell<Intf>>, matrix: u8, select: u8, } impl Joypad { pub fn power_up(intf: Rc<RefCell<Intf>>) -> Self { Self { intf, matrix: 0xff, select: 0x00, } } } impl Joypad { pub fn keydown(&mut self, key: JoypadKey) { self.matrix &= !(key as u8); self.intf.borrow_mut().hi(Flag::Joypad); } pub fn keyup(&mut self, key: JoypadKey) { self.matrix |= key as u8; } } impl Memory for Joypad { fn get(&self, a: u16) -> u8 { assert_eq!(a, 0xff00); if (self.select & 0b0001_0000) == 0x00 { return self.select | (self.matrix & 0x0f); } if (self.select & 0b0010_0000) == 0x00 { return self.select | (self.matrix >> 4); } self.select } fn set(&mut self, a: u16, v: u8) { assert_eq!(a, 0xff00); self.select = v; } } \u4e4b\u540e, \u6211\u4eec\u9700\u8981\u501f\u52a9 minifb \u5e93\u6355\u83b7\u7528\u6237\u7684\u952e\u76d8\u8f93\u5165, \u5e76\u8c03\u7528 Joypad \u7684 keydown \u548c keyup \u51fd\u6570. func main() { ...... // Handling keyboard events if window.is_key_down(minifb::Key::Escape) { break; } let keys = vec![ (minifb::Key::Right, gameboy::joypad::JoypadKey::Right), (minifb::Key::Up, gameboy::joypad::JoypadKey::Up), (minifb::Key::Left, gameboy::joypad::JoypadKey::Left), (minifb::Key::Down, gameboy::joypad::JoypadKey::Down), (minifb::Key::Z, gameboy::joypad::JoypadKey::A), (minifb::Key::X, gameboy::joypad::JoypadKey::B), (minifb::Key::Space, gameboy::joypad::JoypadKey::Select), (minifb::Key::Enter, gameboy::joypad::JoypadKey::Start), ]; for (rk, vk) in &keys { if window.is_key_down(*rk) { mbrd.mmu.borrow_mut().joypad.keydown(vk.clone()); } else { mbrd.mmu.borrow_mut().joypad.keyup(vk.clone()); } } } PC \u952e\u76d8\u4e0a\u7684\u6309\u952e\u4e0e Game Boy JoyPad \u7684\u6620\u5c04\u5173\u7cfb\u5982\u4e0b: PC \u952e\u76d8 \u5bf9\u5e94\u7684 Game Boy \u6309\u94ae \u2191 \u2191 \u2193 \u2193 \u2190 \u2190 \u2192 \u2192 Z A X B Space Select Enter Start","title":"GB-\u5176\u4ed6-\u6e38\u620f\u624b\u67c4"},{"location":"content/gameboy/other/joypad/#_1","text":"Game Boy \u6709\u4e00\u4e2a\u5185\u7f6e\u7684\u6e38\u620f\u624b\u67c4, \u5e26\u6709 8 \u4e2a\u6309\u94ae. \u6709 4 \u4e2a\u65b9\u5411\u6309\u94ae(\u4e0a, \u4e0b, \u5de6\u548c\u53f3)\u548c 4 \u4e2a\u6807\u51c6\u6309\u94ae(\u5f00\u59cb, \u9009\u62e9, A \u548c B). \u8fd9\u516b\u4e2a\u6309\u94ae\u5171\u7528\u4e00\u4e2a\u5bc4\u5b58\u5668, \u4f4d\u4e8e\u5185\u5b58\u5730\u5740 0xff00 \u5904. \u5bc4\u5b58\u5668\u5176\u5206\u89e3\u65b9\u5f0f\u5982\u4e0b.","title":"\u6e38\u620f\u624b\u67c4"},{"location":"content/gameboy/other/joypad/#ff00-joypad","text":"\u4f4d \u8bf4\u660e Bit 7 Not used Bit 7 Not used Bit 6 Not used Bit 5 P15 Select Button Keys (0=Select) Bit 4 P14 Select Direction Keys (0=Select) Bit 3 P13 Input Down or Start (0=Pressed) (Read Only) Bit 2 P12 Input Up or Select (0=Pressed) (Read Only) Bit 1 P11 Input Left or Button B (0=Pressed) (Read Only) Bit 0 P10 Input Right or Button A (0=Pressed) (Read Only) \u4eff\u771f\u5668\u5c06\u7b2c 0-3 \u4f4d\u8bbe\u7f6e\u4e3a\u663e\u793a\u6e38\u620f\u624b\u67c4\u7684\u72b6\u6001. \u5982\u4e0a\u6240\u793a, \u65b9\u5411\u6309\u94ae\u548c\u6807\u51c6\u6309\u94ae\u5171\u4eab\u6b64\u4f4d\u8303\u56f4. \u90a3\u4e48\u6e38\u620f\u5047\u8bbe\u5f53\u524d\u7b2c 3 \u4f4d\u662f 0, \u90a3\u4e48\u6e38\u620f\u5982\u4f55\u77e5\u9053\u662f\u65b9\u5411\u5411\u4e0b\u6309\u94ae\u8fd8\u662f\u6807\u51c6\u542f\u52a8\u6309\u94ae? \u8fd9\u79cd\u60c5\u51b5\u4e0b, \u9700\u8981\u89c2\u5bdf\u7b2c 4-5 \u4f4d, \u5b83\u4eec\u53ef\u4ee5\u544a\u8bc9\u6e38\u620f\u5f00\u53d1\u8005\u5177\u4f53\u662f\u54ea\u4e2a\u6309\u94ae\u88ab\u6309\u4e0b.","title":"FF00 Joypad"},{"location":"content/gameboy/other/joypad/#_2","text":"// The eight gameboy buttons/direction keys are arranged in form of a 2x4 matrix. Select either button or direction // keys by writing to this register, then read-out bit 0-3. // // FF00 - P1/JOYP - Joypad (R/W) // // Bit 7 - Not used // Bit 6 - Not used // Bit 5 - P15 Select Button Keys (0=Select) // Bit 4 - P14 Select Direction Keys (0=Select) // Bit 3 - P13 Input Down or Start (0=Pressed) (Read Only) // Bit 2 - P12 Input Up or Select (0=Pressed) (Read Only) // Bit 1 - P11 Input Left or Button B (0=Pressed) (Read Only) // Bit 0 - P10 Input Right or Button A (0=Pressed) (Read Only) // // Note: Most programs are repeatedly reading from this port several times (the first reads used as short delay, // allowing the inputs to stabilize, and only the value from the last read actually used). use super::intf::{Flag, Intf}; use super::memory::Memory; use std::cell::RefCell; use std::rc::Rc; #[rustfmt::skip] #[derive(Clone)] pub enum JoypadKey { Right = 0b0000_0001, Left = 0b0000_0010, Up = 0b0000_0100, Down = 0b0000_1000, A = 0b0001_0000, B = 0b0010_0000, Select = 0b0100_0000, Start = 0b1000_0000, } pub struct Joypad { intf: Rc<RefCell<Intf>>, matrix: u8, select: u8, } impl Joypad { pub fn power_up(intf: Rc<RefCell<Intf>>) -> Self { Self { intf, matrix: 0xff, select: 0x00, } } } impl Joypad { pub fn keydown(&mut self, key: JoypadKey) { self.matrix &= !(key as u8); self.intf.borrow_mut().hi(Flag::Joypad); } pub fn keyup(&mut self, key: JoypadKey) { self.matrix |= key as u8; } } impl Memory for Joypad { fn get(&self, a: u16) -> u8 { assert_eq!(a, 0xff00); if (self.select & 0b0001_0000) == 0x00 { return self.select | (self.matrix & 0x0f); } if (self.select & 0b0010_0000) == 0x00 { return self.select | (self.matrix >> 4); } self.select } fn set(&mut self, a: u16, v: u8) { assert_eq!(a, 0xff00); self.select = v; } } \u4e4b\u540e, \u6211\u4eec\u9700\u8981\u501f\u52a9 minifb \u5e93\u6355\u83b7\u7528\u6237\u7684\u952e\u76d8\u8f93\u5165, \u5e76\u8c03\u7528 Joypad \u7684 keydown \u548c keyup \u51fd\u6570. func main() { ...... // Handling keyboard events if window.is_key_down(minifb::Key::Escape) { break; } let keys = vec![ (minifb::Key::Right, gameboy::joypad::JoypadKey::Right), (minifb::Key::Up, gameboy::joypad::JoypadKey::Up), (minifb::Key::Left, gameboy::joypad::JoypadKey::Left), (minifb::Key::Down, gameboy::joypad::JoypadKey::Down), (minifb::Key::Z, gameboy::joypad::JoypadKey::A), (minifb::Key::X, gameboy::joypad::JoypadKey::B), (minifb::Key::Space, gameboy::joypad::JoypadKey::Select), (minifb::Key::Enter, gameboy::joypad::JoypadKey::Start), ]; for (rk, vk) in &keys { if window.is_key_down(*rk) { mbrd.mmu.borrow_mut().joypad.keydown(vk.clone()); } else { mbrd.mmu.borrow_mut().joypad.keyup(vk.clone()); } } } PC \u952e\u76d8\u4e0a\u7684\u6309\u952e\u4e0e Game Boy JoyPad \u7684\u6620\u5c04\u5173\u7cfb\u5982\u4e0b: PC \u952e\u76d8 \u5bf9\u5e94\u7684 Game Boy \u6309\u94ae \u2191 \u2191 \u2193 \u2193 \u2190 \u2190 \u2192 \u2192 Z A X B Space Select Enter Start","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/other/serial/","text":"\u4e32\u884c\u901a\u4fe1\u63a5\u53e3 \u65e9\u5728 Game Boy \u8bbe\u8ba1\u7684\u521d\u671f, \u652f\u6301\u591a\u4eba\u6e38\u620f\u5c31\u5df2\u7ecf\u662f\u5b83\u91cd\u8981\u7684\u8bbe\u8ba1\u76ee\u6807. \u4efb\u5929\u5802\u4e0a\u4e00\u4ee3\u7684 FC \u6e38\u620f\u673a\u7531\u4e8e\u4ee5\u7535\u89c6\u673a\u4e3a\u663e\u793a\u5668, \u540c\u65f6\u5b83\u7684\u673a\u5668\u4e0a\u62e5\u6709\u591a\u4e2a\u624b\u67c4\u63a5\u53e3, \u56e0\u6b64\u53ef\u4ee5\u975e\u5e38\u7b80\u5355\u7684\u5b9e\u73b0\u591a\u4eba\u540c\u5c4f\u6e38\u620f. Game Boy \u7531\u4e8e\u662f\u4e00\u4e2a\u638c\u673a, \u5fc5\u987b\u91c7\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u591a\u4eba\u6e38\u620f. \u65e9\u671f Game Boy \u673a\u578b\u91c7\u7528\u4e00\u6761\u8fde\u63a5\u7ebf\u6765\u8fde\u63a5\u4e24\u53f0\u4e0d\u540c\u7684\u6e38\u620f\u673a. \u4f46\u8fd9\u6761\u8fde\u63a5\u7ebf\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5176\u4ed6 Game Boy \u652f\u6301\u7684\u786c\u4ef6\u8bbe\u5907, \u6bd4\u5982 Game Boy \u76f8\u673a\u6216 Game Boy \u6253\u5370\u673a. \u8fde\u63a5\u7ebf\u662f\u542f\u53d1\u7cbe\u7075\u5b9d\u53ef\u68a6\u7cfb\u5217\u7684\u521b\u4f5c\u8005\u7530\u5c3b\u667a\u7684\u4e00\u9879\u91cd\u8981\u5143\u7d20\u4e4b\u4e00, \u5728\u4ed6\u7684\u8bbf\u8c08\u4e2d\u66fe\u63d0\u5230\u56e0\u4e3a\u4ed6\u6784\u601d\u51fa\u751f\u7269\u7ecf\u7531\u7f06\u7ebf\u4ece\u4e00\u53f0\u6e38\u620f\u673a\u8dd1\u5230\u53e6\u4e00\u53f0\u6e38\u620f\u673a\u7684\u60c5\u666f, \u4e8e\u662f\u4fbf\u6210\u4e3a\u4e86\u4e4b\u540e\u6e38\u620f\u4e2d\u7684\u4ea4\u6362\u529f\u80fd. \u8fde\u63a5\u7ebf\u662f\u300a\u5b9d\u53ef\u68a6\u300b\u7cfb\u5217\u6700\u65e9\u4e5f\u662f\u7b2c\u4e00\u4e16\u4ee3\u552f\u4e00\u80fd\u4ea4\u6362\u5b9d\u53ef\u68a6\u53ca\u5bf9\u6218\u7684\u65b9\u6cd5, \u968f\u8457\u65e0\u7ebf\u901a\u8baf\u79d1\u6280\u7684\u8fdb\u6b65, \u8fde\u63a5\u7ebf\u7684\u529f\u80fd\u5728\u7b2c\u56db\u4e16\u4ee3\u8d77\u4fbf\u88ab\u5b8c\u5168\u53d6\u4ee3. \u5f53\u4e24\u4e2a Game Boy \u901a\u8fc7\u8fde\u63a5\u7ebf\u786c\u4ef6\u8fde\u63a5\u65f6, \u4e13\u95e8\u7684\u901a\u4fe1\u786c\u4ef6: \u4e32\u884c\u63a5\u53e3, \u5141\u8bb8\u4e24\u4e2a Game Boy \u4e4b\u95f4\u4e00\u6b21\u901a\u4fe1\u4e00\u4e2a\u5b57\u8282. \u4e00\u4e2a Game Boy \u5145\u5f53\u4e3b\u673a, \u4f7f\u7528\u5176\u5185\u90e8\u65f6\u949f, \u4ece\u800c\u63a7\u5236\u4f55\u65f6\u8fdb\u884c\u6570\u636e\u4ea4\u6362. \u53e6\u4e00\u4e2a\u4f7f\u7528\u5916\u90e8\u65f6\u949f(\u5373\u53e6\u4e00\u4e2a Game Boy \u7684\u5185\u90e8\u65f6\u949f), \u4e14\u65e0\u6cd5\u63a7\u5236\u4f55\u65f6\u8fdb\u884c\u4f20\u8f93. \u5b83\u4eec\u4e4b\u95f4\u91c7\u7528\u4e32\u884c\u901a\u884c, \u5982\u679c\u5728\u4f20\u8f93\u5f00\u59cb\u65f6\u8fd8\u6ca1\u6709\u52a0\u8f7d\u4e0b\u4e00\u4e2a\u6570\u636e\u5b57\u8282, \u5219\u540e\u4e00\u4e2a\u5c06\u6d88\u5931. \u6216\u8005, \u5982\u679c\u51c6\u5907\u53d1\u9001\u4e0b\u4e00\u4e2a\u5b57\u8282\u65f6\u5374\u53d1\u73b0\u4e0a\u4e00\u4e2a\u8fd8\u672a\u53d1\u9001\u51fa\u53bb, \u5219\u522b\u65e0\u9009\u62e9, \u53ea\u80fd\u7b49\u5f85. Game Boy \u7684\u4e32\u884c\u63a5\u53e3\u5b9e\u73b0\u5e76\u4e0d\u5728\u672c\u4e66\u9884\u5b9a\u7684\u5185\u5bb9\u4e4b\u4e2d. \u56e0\u4e3a\u8981\u5b9e\u73b0\u8fd9\u79cd\u6570\u636e\u4ea4\u6362, \u5c06\u52bf\u5fc5\u8981\u5f15\u5165\u8fdb\u7a0b\u95f4\u901a\u4fe1. \u672c\u8282\u5c06\u4ecb\u7ecd\u4e32\u884c\u901a\u4fe1\u63a5\u53e3\u7684\u89c4\u8303, \u5e76\u5ffd\u7565\u6240\u6709\u4e32\u884c\u901a\u4fe1\u8bf7\u6c42. \u4e32\u884c\u901a\u4fe1\u63a5\u53e3\u7684\u5bc4\u5b58\u5668\u5982\u4e0b\u6240\u793a. FF01 SB: Serial transfer data \u5728\u4f20\u8f93\u4e4b\u524d, \u5b83\u5c06\u4fdd\u5b58\u5c06\u8981\u53d1\u9001\u7684\u4e0b\u4e00\u4e2a\u5b57\u8282. \u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d, \u5b83\u6df7\u5408\u4e86\u8f93\u51fa\u5b57\u8282\u548c\u8f93\u5165\u5b57\u8282. \u5728\u6bcf\u4e2a\u4f20\u8f93\u5468\u671f\u4e2d, \u6700\u5de6\u8fb9\u7684\u4f4d\u79fb\u51fa(\u5e76\u901a\u8fc7\u8fde\u63a5\u7ebf\u4f20\u9001\u51fa\u53bb), \u800c\u4f20\u5165\u7684\u4f4d\u4ece\u53e6\u4e00\u4fa7\u79fb\u5165. FF02 SC: Serial Transfer Control \u4f4d \u8bf4\u660e Bit 7 \u4f20\u8f93\u5f00\u59cb\u6807\u5fd7(0=\u6b63\u5728\u8fdb\u884c\u6216\u672a\u8bf7\u6c42\u4f20\u8f93, 1=\u6b63\u5728\u8fdb\u884c\u6216\u5df2\u8bf7\u6c42\u4f20\u8f93) Bit 1 \u65f6\u949f\u901f\u5ea6(0=\u6b63\u5e38, 1=\u5feb\u901f), \u4ec5 CGB \u6a21\u5f0f Bit 0 \u79fb\u4f4d\u65f6\u949f(0=\u5916\u90e8\u65f6\u949f, 1=\u5185\u90e8\u65f6\u949f) \u5145\u5f53\u4e3b\u673a\u7684 Game Boy \u5c06\u5728 SB \u5bc4\u5b58\u5668\u4e2d\u52a0\u8f7d\u6570\u636e\u5b57\u8282, \u7136\u540e\u5c06 SC \u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a 0x81(\u8bf7\u6c42\u4f20\u8f93, \u4f7f\u7528\u5185\u90e8\u65f6\u949f). \u5c06\u4f1a\u4ee5\u4e24\u79cd\u65b9\u5f0f\u901a\u77e5\u6e38\u620f\u4f20\u8f93\u5df2\u5b8c\u6210: \u6e05\u9664 SC \u5bc4\u5b58\u5668\u7684\u7b2c 7 \u4f4d(\u5373, \u5c06 SC \u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a 0x01); \u8c03\u7528\u4e32\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f(\u5373, CPU \u5c06\u8df3\u81f3 0x0058). \u53e6\u4e00\u4e2a Game Boy \u5c06\u52a0\u8f7d\u4e00\u4e2a\u6570\u636e\u5b57\u8282, \u5e76\u53ef\u4ee5\u9009\u62e9\u8bbe\u7f6e SC \u5bc4\u5b58\u5668\u7684\u7b2c 7 \u4f4d(\u5373SC = 0x80). \u65e0\u8bba\u662f\u5426\u6267\u884c\u6b64\u64cd\u4f5c, \u5982\u679c\u4e3b\u673a\u6e38\u620f\u73a9\u5bb6\u6267\u884c\u4f20\u8f93, \u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u90fd\u4f1a\u53d1\u751f. \u88ab\u52a8\u63a5\u6536\u6570\u636e\u7684 Game Boy \u5c06\u5728\u4f20\u8f93\u7ed3\u675f\u65f6\u8c03\u7528\u5176\u4e32\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f, \u5982\u679c\u5b83\u8bbe\u7f6e\u4e86 SC \u5bc4\u5b58\u5668\u7684\u7b2c 7 \u4f4d, \u5219\u5c06\u5176\u6e05\u9664. \u5185\u90e8\u65f6\u949f \u5728\u975e CGB \u6a21\u5f0f\u4e0b, Game Boy \u4ec5\u63d0\u4f9b 8192Hz \u7684\u5185\u90e8\u65f6\u949f(\u6bcf\u79d2\u4f20\u8f93\u5927\u7ea6 1KB). \u5728 CGB \u6a21\u5f0f\u4e0b, \u6839\u636e SC \u5bc4\u5b58\u5668\u7684\u7b2c 1 \u4f4d\u4ee5\u53ca\u662f\u5426\u4f7f\u7528 CGB \u500d\u901f\u6a21\u5f0f, \u53ef\u4ee5\u4f7f\u7528\u56db\u4e2a\u5185\u90e8\u65f6\u949f\u901f\u7387: 8192Hz - 1KB/s - Bit 1 cleared, Normal 16384Hz - 2KB/s - Bit 1 cleared, Double Speed Mode 262144Hz - 32KB/s - Bit 1 set, Normal 524288Hz - 64KB/s - Bit 1 set, Double Speed Mode \u5916\u90e8\u65f6\u949f \u5916\u90e8\u65f6\u949f\u901a\u5e38\u7531\u53e6\u4e00\u4e2a Game Boy \u63d0\u4f9b, \u4f46\u4e5f\u6709\u53ef\u80fd\u7531\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a\u63d0\u4f9b(\u4f8b\u5982, \u5c06 Game Boy \u8fde\u63a5\u5230 PC \u7684\u5e76\u884c\u7aef\u53e3), \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u5916\u90e8\u65f6\u949f\u53ef\u4ee5\u5177\u6709\u4efb\u4f55\u901f\u5ea6. \u4f7f\u7528\u5916\u90e8\u65f6\u949f\u65f6, \u76f4\u5230\u63a5\u6536\u5230\u6700\u540e\u4e00\u4f4d, \u4f20\u8f93\u624d\u7b97\u5b8c\u6210. \u4f46\u662f\u5982\u679c\u53e6\u4e00\u4e2a Game Boy \u4e0d\u63d0\u4f9b\u65f6\u949f\u4fe1\u53f7, \u6216\u8005\u5b83\u88ab\u5173\u95ed, \u6216\u8005\u6839\u672c\u6ca1\u6709\u8fde\u63a5\u4e0a\u53e6\u4e00\u4e2a Game Boy, \u5219\u4f20\u8f93\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u6210. \u56e0\u6b64, \u4f20\u8f93\u8fc7\u7a0b\u5e94\u4f7f\u7528\u8d85\u65f6\u8ba1\u6570\u5668, \u5982\u679c\u5728\u8d85\u65f6\u95f4\u9694\u5185\u672a\u6536\u5230\u54cd\u5e94, \u5219\u4e2d\u6b62\u901a\u4fe1. \u4ee3\u7801\u5b9e\u73b0 // Communication between two Gameboys happens one byte at a time. One Gameboy acts as the master, uses its internal // clock, and thus controls when the exchange happens. The other one uses an external clock (i.e., the one inside the // other Gameboy) and has no control over when the transfer happens. If it hasn't gotten around to loading up the next // data byte at the time the transfer begins, the last one will go out again. Alternately, if it's ready to send the // next byte but the last one hasn't gone out yet, it has no choice but to wait. // // See: http://gbdev.gg8.se/wiki/articles/Serial_Data_Transfer_(Link_Cable) use super::intf::Intf; use std::cell::RefCell; use std::rc::Rc; pub struct Serial { _intf: Rc<RefCell<Intf>>, // Before a transfer, it holds the next byte that will go out. // During a transfer, it has a blend of the outgoing and incoming bytes. Each cycle, the leftmost bit is shifted // out (and over the wire) and the incoming bit is shifted in from the other side: data: u8, // Bit 7 - Transfer Start Flag (0=No transfer is in progress or requested, 1=Transfer in progress, or requested) // Bit 1 - Clock Speed (0=Normal, 1=Fast) ** CGB Mode Only ** // Bit 0 - Shift Clock (0=External Clock, 1=Internal Clock) control: u8, } impl Serial { pub fn power_up(intf: Rc<RefCell<Intf>>) -> Self { Self { _intf: intf, data: 0x00, control: 0x00, } } pub fn get(&self, a: u16) -> u8 { match a { 0xff01 => self.data, 0xff02 => self.control, _ => panic!(\"Only supports addresses 0xff01, 0xff02\"), } } pub fn set(&mut self, a: u16, v: u8) { match a { 0xff01 => self.data = v, 0xff02 => self.control = v, _ => panic!(\"Only supports addresses 0xff01, 0xff02\"), }; } }","title":"GB-\u5176\u4ed6-\u4e32\u884c\u901a\u884c\u63a5\u53e3"},{"location":"content/gameboy/other/serial/#_1","text":"\u65e9\u5728 Game Boy \u8bbe\u8ba1\u7684\u521d\u671f, \u652f\u6301\u591a\u4eba\u6e38\u620f\u5c31\u5df2\u7ecf\u662f\u5b83\u91cd\u8981\u7684\u8bbe\u8ba1\u76ee\u6807. \u4efb\u5929\u5802\u4e0a\u4e00\u4ee3\u7684 FC \u6e38\u620f\u673a\u7531\u4e8e\u4ee5\u7535\u89c6\u673a\u4e3a\u663e\u793a\u5668, \u540c\u65f6\u5b83\u7684\u673a\u5668\u4e0a\u62e5\u6709\u591a\u4e2a\u624b\u67c4\u63a5\u53e3, \u56e0\u6b64\u53ef\u4ee5\u975e\u5e38\u7b80\u5355\u7684\u5b9e\u73b0\u591a\u4eba\u540c\u5c4f\u6e38\u620f. Game Boy \u7531\u4e8e\u662f\u4e00\u4e2a\u638c\u673a, \u5fc5\u987b\u91c7\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u591a\u4eba\u6e38\u620f. \u65e9\u671f Game Boy \u673a\u578b\u91c7\u7528\u4e00\u6761\u8fde\u63a5\u7ebf\u6765\u8fde\u63a5\u4e24\u53f0\u4e0d\u540c\u7684\u6e38\u620f\u673a. \u4f46\u8fd9\u6761\u8fde\u63a5\u7ebf\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5176\u4ed6 Game Boy \u652f\u6301\u7684\u786c\u4ef6\u8bbe\u5907, \u6bd4\u5982 Game Boy \u76f8\u673a\u6216 Game Boy \u6253\u5370\u673a. \u8fde\u63a5\u7ebf\u662f\u542f\u53d1\u7cbe\u7075\u5b9d\u53ef\u68a6\u7cfb\u5217\u7684\u521b\u4f5c\u8005\u7530\u5c3b\u667a\u7684\u4e00\u9879\u91cd\u8981\u5143\u7d20\u4e4b\u4e00, \u5728\u4ed6\u7684\u8bbf\u8c08\u4e2d\u66fe\u63d0\u5230\u56e0\u4e3a\u4ed6\u6784\u601d\u51fa\u751f\u7269\u7ecf\u7531\u7f06\u7ebf\u4ece\u4e00\u53f0\u6e38\u620f\u673a\u8dd1\u5230\u53e6\u4e00\u53f0\u6e38\u620f\u673a\u7684\u60c5\u666f, \u4e8e\u662f\u4fbf\u6210\u4e3a\u4e86\u4e4b\u540e\u6e38\u620f\u4e2d\u7684\u4ea4\u6362\u529f\u80fd. \u8fde\u63a5\u7ebf\u662f\u300a\u5b9d\u53ef\u68a6\u300b\u7cfb\u5217\u6700\u65e9\u4e5f\u662f\u7b2c\u4e00\u4e16\u4ee3\u552f\u4e00\u80fd\u4ea4\u6362\u5b9d\u53ef\u68a6\u53ca\u5bf9\u6218\u7684\u65b9\u6cd5, \u968f\u8457\u65e0\u7ebf\u901a\u8baf\u79d1\u6280\u7684\u8fdb\u6b65, \u8fde\u63a5\u7ebf\u7684\u529f\u80fd\u5728\u7b2c\u56db\u4e16\u4ee3\u8d77\u4fbf\u88ab\u5b8c\u5168\u53d6\u4ee3. \u5f53\u4e24\u4e2a Game Boy \u901a\u8fc7\u8fde\u63a5\u7ebf\u786c\u4ef6\u8fde\u63a5\u65f6, \u4e13\u95e8\u7684\u901a\u4fe1\u786c\u4ef6: \u4e32\u884c\u63a5\u53e3, \u5141\u8bb8\u4e24\u4e2a Game Boy \u4e4b\u95f4\u4e00\u6b21\u901a\u4fe1\u4e00\u4e2a\u5b57\u8282. \u4e00\u4e2a Game Boy \u5145\u5f53\u4e3b\u673a, \u4f7f\u7528\u5176\u5185\u90e8\u65f6\u949f, \u4ece\u800c\u63a7\u5236\u4f55\u65f6\u8fdb\u884c\u6570\u636e\u4ea4\u6362. \u53e6\u4e00\u4e2a\u4f7f\u7528\u5916\u90e8\u65f6\u949f(\u5373\u53e6\u4e00\u4e2a Game Boy \u7684\u5185\u90e8\u65f6\u949f), \u4e14\u65e0\u6cd5\u63a7\u5236\u4f55\u65f6\u8fdb\u884c\u4f20\u8f93. \u5b83\u4eec\u4e4b\u95f4\u91c7\u7528\u4e32\u884c\u901a\u884c, \u5982\u679c\u5728\u4f20\u8f93\u5f00\u59cb\u65f6\u8fd8\u6ca1\u6709\u52a0\u8f7d\u4e0b\u4e00\u4e2a\u6570\u636e\u5b57\u8282, \u5219\u540e\u4e00\u4e2a\u5c06\u6d88\u5931. \u6216\u8005, \u5982\u679c\u51c6\u5907\u53d1\u9001\u4e0b\u4e00\u4e2a\u5b57\u8282\u65f6\u5374\u53d1\u73b0\u4e0a\u4e00\u4e2a\u8fd8\u672a\u53d1\u9001\u51fa\u53bb, \u5219\u522b\u65e0\u9009\u62e9, \u53ea\u80fd\u7b49\u5f85. Game Boy \u7684\u4e32\u884c\u63a5\u53e3\u5b9e\u73b0\u5e76\u4e0d\u5728\u672c\u4e66\u9884\u5b9a\u7684\u5185\u5bb9\u4e4b\u4e2d. \u56e0\u4e3a\u8981\u5b9e\u73b0\u8fd9\u79cd\u6570\u636e\u4ea4\u6362, \u5c06\u52bf\u5fc5\u8981\u5f15\u5165\u8fdb\u7a0b\u95f4\u901a\u4fe1. \u672c\u8282\u5c06\u4ecb\u7ecd\u4e32\u884c\u901a\u4fe1\u63a5\u53e3\u7684\u89c4\u8303, \u5e76\u5ffd\u7565\u6240\u6709\u4e32\u884c\u901a\u4fe1\u8bf7\u6c42. \u4e32\u884c\u901a\u4fe1\u63a5\u53e3\u7684\u5bc4\u5b58\u5668\u5982\u4e0b\u6240\u793a.","title":"\u4e32\u884c\u901a\u4fe1\u63a5\u53e3"},{"location":"content/gameboy/other/serial/#ff01-sb-serial-transfer-data","text":"\u5728\u4f20\u8f93\u4e4b\u524d, \u5b83\u5c06\u4fdd\u5b58\u5c06\u8981\u53d1\u9001\u7684\u4e0b\u4e00\u4e2a\u5b57\u8282. \u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d, \u5b83\u6df7\u5408\u4e86\u8f93\u51fa\u5b57\u8282\u548c\u8f93\u5165\u5b57\u8282. \u5728\u6bcf\u4e2a\u4f20\u8f93\u5468\u671f\u4e2d, \u6700\u5de6\u8fb9\u7684\u4f4d\u79fb\u51fa(\u5e76\u901a\u8fc7\u8fde\u63a5\u7ebf\u4f20\u9001\u51fa\u53bb), \u800c\u4f20\u5165\u7684\u4f4d\u4ece\u53e6\u4e00\u4fa7\u79fb\u5165.","title":"FF01 SB: Serial transfer data"},{"location":"content/gameboy/other/serial/#ff02-sc-serial-transfer-control","text":"\u4f4d \u8bf4\u660e Bit 7 \u4f20\u8f93\u5f00\u59cb\u6807\u5fd7(0=\u6b63\u5728\u8fdb\u884c\u6216\u672a\u8bf7\u6c42\u4f20\u8f93, 1=\u6b63\u5728\u8fdb\u884c\u6216\u5df2\u8bf7\u6c42\u4f20\u8f93) Bit 1 \u65f6\u949f\u901f\u5ea6(0=\u6b63\u5e38, 1=\u5feb\u901f), \u4ec5 CGB \u6a21\u5f0f Bit 0 \u79fb\u4f4d\u65f6\u949f(0=\u5916\u90e8\u65f6\u949f, 1=\u5185\u90e8\u65f6\u949f) \u5145\u5f53\u4e3b\u673a\u7684 Game Boy \u5c06\u5728 SB \u5bc4\u5b58\u5668\u4e2d\u52a0\u8f7d\u6570\u636e\u5b57\u8282, \u7136\u540e\u5c06 SC \u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a 0x81(\u8bf7\u6c42\u4f20\u8f93, \u4f7f\u7528\u5185\u90e8\u65f6\u949f). \u5c06\u4f1a\u4ee5\u4e24\u79cd\u65b9\u5f0f\u901a\u77e5\u6e38\u620f\u4f20\u8f93\u5df2\u5b8c\u6210: \u6e05\u9664 SC \u5bc4\u5b58\u5668\u7684\u7b2c 7 \u4f4d(\u5373, \u5c06 SC \u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a 0x01); \u8c03\u7528\u4e32\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f(\u5373, CPU \u5c06\u8df3\u81f3 0x0058). \u53e6\u4e00\u4e2a Game Boy \u5c06\u52a0\u8f7d\u4e00\u4e2a\u6570\u636e\u5b57\u8282, \u5e76\u53ef\u4ee5\u9009\u62e9\u8bbe\u7f6e SC \u5bc4\u5b58\u5668\u7684\u7b2c 7 \u4f4d(\u5373SC = 0x80). \u65e0\u8bba\u662f\u5426\u6267\u884c\u6b64\u64cd\u4f5c, \u5982\u679c\u4e3b\u673a\u6e38\u620f\u73a9\u5bb6\u6267\u884c\u4f20\u8f93, \u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u90fd\u4f1a\u53d1\u751f. \u88ab\u52a8\u63a5\u6536\u6570\u636e\u7684 Game Boy \u5c06\u5728\u4f20\u8f93\u7ed3\u675f\u65f6\u8c03\u7528\u5176\u4e32\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f, \u5982\u679c\u5b83\u8bbe\u7f6e\u4e86 SC \u5bc4\u5b58\u5668\u7684\u7b2c 7 \u4f4d, \u5219\u5c06\u5176\u6e05\u9664.","title":"FF02 SC: Serial Transfer Control"},{"location":"content/gameboy/other/serial/#_2","text":"\u5728\u975e CGB \u6a21\u5f0f\u4e0b, Game Boy \u4ec5\u63d0\u4f9b 8192Hz \u7684\u5185\u90e8\u65f6\u949f(\u6bcf\u79d2\u4f20\u8f93\u5927\u7ea6 1KB). \u5728 CGB \u6a21\u5f0f\u4e0b, \u6839\u636e SC \u5bc4\u5b58\u5668\u7684\u7b2c 1 \u4f4d\u4ee5\u53ca\u662f\u5426\u4f7f\u7528 CGB \u500d\u901f\u6a21\u5f0f, \u53ef\u4ee5\u4f7f\u7528\u56db\u4e2a\u5185\u90e8\u65f6\u949f\u901f\u7387: 8192Hz - 1KB/s - Bit 1 cleared, Normal 16384Hz - 2KB/s - Bit 1 cleared, Double Speed Mode 262144Hz - 32KB/s - Bit 1 set, Normal 524288Hz - 64KB/s - Bit 1 set, Double Speed Mode","title":"\u5185\u90e8\u65f6\u949f"},{"location":"content/gameboy/other/serial/#_3","text":"\u5916\u90e8\u65f6\u949f\u901a\u5e38\u7531\u53e6\u4e00\u4e2a Game Boy \u63d0\u4f9b, \u4f46\u4e5f\u6709\u53ef\u80fd\u7531\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a\u63d0\u4f9b(\u4f8b\u5982, \u5c06 Game Boy \u8fde\u63a5\u5230 PC \u7684\u5e76\u884c\u7aef\u53e3), \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u5916\u90e8\u65f6\u949f\u53ef\u4ee5\u5177\u6709\u4efb\u4f55\u901f\u5ea6. \u4f7f\u7528\u5916\u90e8\u65f6\u949f\u65f6, \u76f4\u5230\u63a5\u6536\u5230\u6700\u540e\u4e00\u4f4d, \u4f20\u8f93\u624d\u7b97\u5b8c\u6210. \u4f46\u662f\u5982\u679c\u53e6\u4e00\u4e2a Game Boy \u4e0d\u63d0\u4f9b\u65f6\u949f\u4fe1\u53f7, \u6216\u8005\u5b83\u88ab\u5173\u95ed, \u6216\u8005\u6839\u672c\u6ca1\u6709\u8fde\u63a5\u4e0a\u53e6\u4e00\u4e2a Game Boy, \u5219\u4f20\u8f93\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u6210. \u56e0\u6b64, \u4f20\u8f93\u8fc7\u7a0b\u5e94\u4f7f\u7528\u8d85\u65f6\u8ba1\u6570\u5668, \u5982\u679c\u5728\u8d85\u65f6\u95f4\u9694\u5185\u672a\u6536\u5230\u54cd\u5e94, \u5219\u4e2d\u6b62\u901a\u4fe1.","title":"\u5916\u90e8\u65f6\u949f"},{"location":"content/gameboy/other/serial/#_4","text":"// Communication between two Gameboys happens one byte at a time. One Gameboy acts as the master, uses its internal // clock, and thus controls when the exchange happens. The other one uses an external clock (i.e., the one inside the // other Gameboy) and has no control over when the transfer happens. If it hasn't gotten around to loading up the next // data byte at the time the transfer begins, the last one will go out again. Alternately, if it's ready to send the // next byte but the last one hasn't gone out yet, it has no choice but to wait. // // See: http://gbdev.gg8.se/wiki/articles/Serial_Data_Transfer_(Link_Cable) use super::intf::Intf; use std::cell::RefCell; use std::rc::Rc; pub struct Serial { _intf: Rc<RefCell<Intf>>, // Before a transfer, it holds the next byte that will go out. // During a transfer, it has a blend of the outgoing and incoming bytes. Each cycle, the leftmost bit is shifted // out (and over the wire) and the incoming bit is shifted in from the other side: data: u8, // Bit 7 - Transfer Start Flag (0=No transfer is in progress or requested, 1=Transfer in progress, or requested) // Bit 1 - Clock Speed (0=Normal, 1=Fast) ** CGB Mode Only ** // Bit 0 - Shift Clock (0=External Clock, 1=Internal Clock) control: u8, } impl Serial { pub fn power_up(intf: Rc<RefCell<Intf>>) -> Self { Self { _intf: intf, data: 0x00, control: 0x00, } } pub fn get(&self, a: u16) -> u8 { match a { 0xff01 => self.data, 0xff02 => self.control, _ => panic!(\"Only supports addresses 0xff01, 0xff02\"), } } pub fn set(&mut self, a: u16, v: u8) { match a { 0xff01 => self.data = v, 0xff02 => self.control = v, _ => panic!(\"Only supports addresses 0xff01, 0xff02\"), }; } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/other/test/","text":"\u6d4b\u8bd5 \u5728\u7b14\u8005\u6f2b\u957f\u7684\u5f00\u53d1\u751f\u6daf\u4e2d, \u8bb8\u591a\u4eba\u5728\u5411\u7b14\u8005\u8bf7\u6559\u95ee\u9898\u7684\u65f6\u5019, \u603b\u662f\u559c\u6b22\u91cd\u590d\u8fd9\u6837\u4e00\u53e5\u8bdd:\"\u6211\u7684\u4ee3\u7801\u6ca1\u6709\u9519\u5440, \u4e3a\u4ec0\u4e48\u7ed3\u679c\u4e0d\u5bf9\u5462?\". \u5728\u4e00\u6b21\u53c8\u4e00\u6b21\u7684\u5b9e\u8df5\u4e2d, \u7b14\u8005\u5f97\u51fa\u4e86\u4ee5\u4e0b\u51e0\u6761\"\u516c\u7406\": \u8ba1\u7b97\u673a\u6c38\u8fdc\u662f\u5bf9\u7684. \u5982\u679c\u4f60\u7684\u9884\u671f\u7ed3\u679c\u548c\u8ba1\u7b97\u673a\u7ed9\u51fa\u7684\u7ed3\u679c\u4e0d\u4e00\u81f4, \u4e00\u5b9a\u662f\u4f60\u9519\u4e86. \u672a\u6d4b\u8bd5\u7684\u4ee3\u7801\u6c38\u8fdc\u662f\u9519\u7684. \u4f60\u53ef\u4ee5\u4e0d\u76f8\u4fe1\u4ee5\u4e0a\u51e0\u6761\u516c\u7406, \u4f46\u672a\u6765\u4f60\u4e00\u5b9a\u4f1a\u518d\u9047\u5230\u9ebb\u70e6. \u4e0a\u9762\u5e26\u4e00\u70b9\u73a9\u7b11\u6210\u5206, \u4f46\u6d4b\u8bd5\u5bf9\u4e8e\u4ee3\u7801\u8d28\u91cf\u6765\u8bf4\u771f\u7684\u975e\u5e38\u91cd\u8981! \u76ee\u524d\u6709\u8bb8\u591a\u6d4b\u8bd5\u7406\u8bba, \u6bd4\u5982\"\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\"\u4e4b\u7c7b, \u79c1\u4ee5\u4e3a\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5e76\u4e0d\u5efa\u8bae\u592a\u8fc7\u4e8e\u62d8\u6ce5\u8fd9\u4e9b\u7406\u8bba, \u5f00\u53d1\u8005\u9700\u5bfb\u627e\u9002\u5408\u81ea\u5df1\u7684\u6d4b\u8bd5\u4e4b\u9053. \u4f46\u4ecd\u7136\u6709\u4e00\u4e9b\u901a\u7528\u51c6\u5219\u9002\u7528\u5927\u90e8\u5206\u5f00\u53d1\u8005. \u6d4b\u8bd5\u7684\u76ee\u7684\u662f\u8bc1\u660e\u7cfb\u7edf\u5b58\u5728\u7f3a\u9677, \u800c\u4e0d\u662f\u8bc1\u660e\u7f3a\u9677\u4e0d\u5b58\u5728. \u8fd9\u4e2a\u539f\u5219\u6700\u65e9\u662f\u7531\u56fe\u7075\u5956\u83b7\u5f97\u8005 Edsger W. Dijkstra \u5728 1969 \u5e74\u63d0\u51fa\u6765\u7684. \u6d4b\u8bd5\u53ef\u4ee5\u964d\u4f4e\u7cfb\u7edf\u4e2d\u9057\u7559\u7684\u7f3a\u9677\u672a\u88ab\u53d1\u73b0\u7684\u53ef\u80fd\u6027, \u4f46\u662f\u5373\u4f7f\u6ca1\u6709\u53d1\u73b0\u7f3a\u9677, \u4e5f\u4e0d\u80fd\u8bc1\u660e\u7cfb\u7edf\u662f\u5b8c\u5168\u6b63\u786e\u7684. \u5b8c\u7f8e\u7684\u6d4b\u8bd5\u662f\u4e0d\u5b58\u5728\u7684. \u8fd9\u4e2a\u539f\u5219\u975e\u5e38\u91cd\u8981, \u56e0\u4e3a\u6b63\u662f\u56e0\u4e3a\u5b83\u5f15\u53d1\u4e86\u8bb8\u591a\u6d4b\u8bd5\u7406\u5ff5, \u6bd4\u5982\u8fb9\u754c\u503c\u6d4b\u8bd5: \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u4f5c\u4e3a\u53c2\u6570, \u5f00\u53d1\u8005\u901a\u5e38\u53ef\u4ee5\u7528\u4ee5\u4e0b\u6570\u636e\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5: \u4e00\u4e2a\u8d1f\u6570, \u96f6, \u4e00\u4e2a\u6b63\u6570, \u6709\u7b26\u53f7\u6574\u6570\u7684\u4e0a\u8fb9\u754c\u548c\u6709\u7b26\u53f7\u6574\u6570\u7684\u4e0b\u8fb9\u754c. \u904d\u5386\u5168\u90e8\u7684\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\u662f\u76f8\u5f53\u611a\u8822\u7684. \u4e0d\u80fd\u901a\u8fc7\u6253\u8865\u4e01\u7684\u65b9\u5f0f\u4fee\u590d\u7f3a\u9677. \u5f53\u6d4b\u8bd5\u53d1\u73b0\u95ee\u9898, \u8bf7\u5c3d\u91cf\u4e0d\u8981\u901a\u8fc7\u4e00\u4e2a If \u8bed\u53e5\u53bb Fix \u8fd9\u4e2a\u6d4b\u8bd5. \u5f00\u53d1\u8005\u5e94\u8be5\u5173\u6ce8\u7f3a\u9677\u7684\u6839\u672c\u6210\u56e0, \u800c\u4e0d\u5e94\u8be5\u4e3a\u4e86\u901a\u8fc7\u6d4b\u8bd5\u800c\u76f2\u76ee\u4fee\u6539\u4ee3\u7801. \u5e94\u5c3d\u65e9\u5c55\u5f00\u6d4b\u8bd5. \u6709\u5982\u4e0b\u4e00\u4e2a\u516c\u5f0f: \u5728\u5355\u5143\u6d4b\u8bd5\u671f\u95f4\u4fee\u590d\u4e00\u4e2a Bug \u7684\u4ee3\u4ef7\u662f 1, \u5728\u96c6\u6210\u6d4b\u8bd5\u671f\u95f4\u4fee\u590d\u4e00\u4e2a Bug \u7684\u4ee3\u4ef7\u662f 10, \u800c\u5728\u9ed1\u76d2\u6d4b\u8bd5\u671f\u95f4\u4fee\u590d\u4e00\u4e2a Bug \u7684\u4ee3\u4ef7\u662f 100. \u7f3a\u9677\u7684\u5206\u5e03\u5b58\u5728 2/8 \u5b9a\u5f8b. 80% \u7684 Bug \u5206\u5e03\u5728 20% \u7684\u4ee3\u7801\u91cc, \u5e94\u8be5\u628a\u6d4b\u8bd5\u91cd\u70b9\u653e\u5728\u8fd9 20% \u7684\u4ee3\u7801\u90e8\u5206. \u5b66\u4f1a\u6b63\u786e\u7684\u6d4b\u8bd5\u65b9\u6cd5\u662f\u6bcf\u4e2a\u5f00\u53d1\u8005\u5fc5\u987b\u638c\u63e1\u7684\u6280\u80fd. \u8c03\u8bd5\u6982\u8ff0 \u5bf9\u4e8e\u672c\u4e66\u7684\u4eff\u771f\u5668\u800c\u8a00, \u5982\u679c\u5728\u6267\u884c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u5931\u8d25\u7684\u65f6\u5019, \u9700\u8981\u5bf9\u4eff\u771f\u5668\u8fdb\u884c\u8c03\u8bd5. \u5982\u679c\u4eff\u771f\u5668\u6ca1\u6709\u5bf9\u5916\u63d0\u4f9b\u8c03\u8bd5\u529f\u80fd, \u90a3\u4e48\u4e00\u65e6\u7a0b\u5e8f\u672a\u6309\u7167\u5f00\u53d1\u8005\u9884\u60f3\u7684\u8fc7\u7a0b\u8fd0\u884c, \u5f00\u53d1\u8005\u5c31\u5c06\u5904\u4e8e\u4e00\u4e2a\u675f\u624b\u65e0\u7b56\u7684\u5730\u6b65. \u56e0\u6b64, \u8c03\u8bd5\u529f\u80fd\u5bf9\u4e8e\u4eff\u771f\u5668\u800c\u8a00\u81f3\u5173\u91cd\u8981. \u6b64\u5904\u53ea\u5bf9\u6700\u5bb9\u6613\u51fa\u95ee\u9898\u7684 CPU \u8fdb\u884c\u4e3e\u4f8b. \u5bf9\u4e8e\u73b0\u5b9e\u4e2d\u7684\u5904\u7406\u5668\u7684\u8c03\u8bd5\u529f\u80fd\u800c\u8a00, \u5e38\u7528\u7684\u662f\u4e24\u79cd: \u4ea4\u4e92\u5f0f\u8c03\u5f0f \u8ffd\u8e2a\u8c03\u8bd5 \u4e0b\u9762\u5c06\u5bf9\u8fd9\u4e24\u79cd\u8c03\u8bd5\u529f\u80fd\u8fdb\u884c\u6982\u8ff0. \u4f46\u8981\u6ce8\u610f\u7684\u662f, \u73b0\u5b9e\u4e2d\u7684\u5904\u7406\u5668\u7684\u8c03\u8bd5\u529f\u80fd\u662f\u4e2a\u975e\u5e38\u590d\u6742\u7684\u6a21\u5757, \u5176\u5b9e\u73b0\u96be\u5ea6\u751a\u81f3\u8d85\u8fc7\u4e86\u5904\u7406\u5668\u672c\u8eab(\u975e\u5938\u5f20!), \u672c\u8282\u5c06\u53ea\u5bf9\u5176\u539f\u7406\u8fdb\u884c\u7b80\u8ff0. \u4ea4\u4e92\u5f0f\u8c03\u8bd5 \u4ea4\u4e92\u5f0f\u8c03\u8bd5(Interactive Debug)\u662f\u5904\u7406\u5668\u63d0\u4f9b\u7684\u6700\u5e38\u89c1\u4e00\u79cd\u8c03\u8bd5\u529f\u80fd. \u5b83\u6307\u8c03\u8bd5\u8f6f\u4ef6\u80fd\u591f\u76f4\u63a5\u53d6\u5f97\u5904\u7406\u5668\u7684\u63a7\u5236\u6743, \u8fdb\u800c\u5bf9\u5176\u8fdb\u884c\u4ea4\u4e92\u5f0f\u8c03\u8bd5\u7684\u4e00\u79cd\u673a\u5236. \u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u4f8b\u5b50\u662f\u8457\u540d\u7684\u8c03\u8bd5\u8f6f\u4ef6 GDB, \u4ee5\u53ca\u5e38\u7528\u7684\u65ad\u70b9\u8c03\u8bd5\u6cd5. \u5728\u4ea4\u4e92\u5f0f\u8c03\u8bd5\u4e0b, \u4f7f\u7528\u8005\u88ab\u5141\u8bb8\u968f\u65f6\u6682\u505c/\u542f\u52a8\u5904\u7406\u5668\u8fd0\u884c, \u5b9e\u65f6\u67e5\u770b\u5904\u7406\u7684\u5168\u90e8\u72b6\u6001, \u751a\u81f3\u662f\u6539\u53d8\u5904\u7406\u5668\u7684\u8fd0\u884c\u72b6\u6001, \u6bd4\u5982\u4fee\u6539\u5bc4\u5b58\u5668\u4e2d\u7684\u503c. \u8c03\u8bd5\u8f6f\u4ef6\u9700\u8981\u53d6\u5f97\u5904\u7406\u5668\u7684\u63a7\u5236\u6743, \u90a3\u4e48\u9996\u5148\u5904\u7406\u5668\u5fc5\u987b\u5411\u5916\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u624d\u884c. \u5982\u679c\u786c\u4ef6\u4e0d\u652f\u6301, \u90a3\u4e48\u4e00\u5207\u90fd\u662f\u767d\u642d. \u5728\u7edd\u5927\u90e8\u5206\u5904\u7406\u5668\u4e2d, \u90fd\u6709\u4e00\u4e2a\u786c\u4ef6\u5b9e\u73b0\u7684\u8c03\u8bd5\u6a21\u5757, \u8be5\u6a21\u5757\u901a\u8fc7\u7269\u7406\u4ecb\u8d28\u4e0e\u4e3b\u673a\u7aef\u7684\u8c03\u8bd5\u8f6f\u4ef6\u8fdb\u884c\u901a\u4fe1\u5e76\u63a5\u53d7\u8c03\u8bd5\u8f6f\u4ef6\u7684\u63a7\u5236, \u7136\u540e\u8c03\u8bd5\u6a21\u5757\u518d\u5bf9\u5904\u7406\u5668\u8fdb\u884c\u63a7\u5236. \u6b64\u5904\u4f7f\u7528\u4e00\u4e2a\u4f8b\u5b50\u4ee5\u5e2e\u52a9\u8bfb\u8005\u7406\u89e3\u8fd9\u4e2a\u8fc7\u7a0b, \u4ee5\u4f7f\u7528 GDB \u8c03\u5f0f C \u7a0b\u5e8f\u4e3a\u4f8b\u5b50. \u8ba9\u6211\u4eec\u521b\u5efa\u4ee5\u4e0b C \u7a0b\u5e8f, \u8be5\u7a0b\u5e8f\u8ba1\u7b97\u5e76\u6253\u5370\u6570\u5b57\u7684\u9636\u4e58. \u4f46\u662f, \u51fa\u4e8e\u8c03\u8bd5\u76ee\u7684, \u6b64 C \u7a0b\u5e8f\u4e2d\u5305\u542b\u4e00\u4e9b\u9519\u8bef. # include <stdio.h> int main() { int i, num, j; printf (\"Enter the number: \"); scanf (\"%d\", &num ); for (i=1; i<=num; i++) j=j*i; printf(\"The factorial of %d is %d\\n\",num,j); } \u7f16\u8bd1\u5e76\u6267\u884c\u7a0b\u5e8f, \u53d1\u73b0\u8fd0\u884c\u7ed3\u679c\u5b58\u5728\u9519\u8bef. $ cc factorial.c $ ./a.out Enter the number: 3 The factorial of 3 is 12548672 \u4f7f\u7528 GDB \u5bf9\u5176\u8fdb\u884c\u8c03\u8bd5. \u4f7f\u7528\u8c03\u8bd5\u9009\u9879 -g \u7f16\u8bd1 C \u7a0b\u5e8f gcc -g factorial.c . -g \u9009\u9879\u7684\u4f5c\u7528\u662f\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u52a0\u5165\u6e90\u4ee3\u7801\u7684\u4fe1\u606f, \u6bd4\u5982\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7b2c\u51e0\u6761\u673a\u5668\u6307\u4ee4\u5bf9\u5e94\u6e90\u4ee3\u7801\u7684\u7b2c\u51e0\u884c, \u4f46\u5e76\u4e0d\u662f\u628a\u6574\u4e2a\u6e90\u6587\u4ef6\u5d4c\u5165\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d, \u6240\u4ee5\u5728\u8c03\u8bd5\u65f6\u5fc5\u987b\u4fdd\u8bc1 gdb \u80fd\u627e\u5230\u6e90\u6587\u4ef6. \u5982\u679c\u628a\u5f53\u524d\u7684 factorial.c \u6539\u540d\u6216\u8005\u79fb\u52a8\u5230\u5176\u4ed6\u5730\u65b9, \u5219 gdb \u65e0\u6cd5\u8fdb\u884c\u8c03\u8bd5. \u4e4b\u540e\u8fd0\u884c gdb a.out \u8bbe\u7f6e\u65ad\u70b9, \u8bed\u6cd5\u662f break line_number. \u8fd9\u91cc\u8bbe\u7f6e\u65ad\u70b9\u4e3a\u7b2c\u5341\u884c, \u5373 break 10. Breakpoint 1, main () at factorial.c:10 10 j=j*i; \u6b64\u65f6\u4fbf\u53ef\u4ee5\u6253\u5370\u53d8\u91cf\u7684\u503c, \u8bed\u6cd5\u662f print variable_name. (gdb) p i $1 = 1 (gdb) p j $2 = 3042592 (gdb) p num $3 = 3 \u5982\u4e0a\u6240\u793a, \u53ef\u4ee5\u53d1\u73b0\u5728 factorial.c \u4e2d, \u7531\u4e8e\u5c1a\u672a\u521d\u59cb\u5316\u53d8\u91cf j \u56e0\u6b64\u5b83\u5f97\u5230\u4e86\u9519\u8bef\u7684\u9636\u4e58\u503c. \u4ea4\u4e92\u5f0f\u8c03\u8bd5\u80fd\u89e3\u51b3\u5927\u91cf\u95ee\u9898, \u540c\u65f6\u5b83\u4e5f\u5df2\u7ecf\u5b58\u5728\u4e86\u51e0\u5341\u5e74\u4e86. \u4f46\u5176\u5b58\u5728\u4e00\u4e2a\u7f3a\u70b9\u662f\u5bf9\u5904\u7406\u5668\u548c\u5f00\u53d1\u8005\u90fd\u5177\u6709\u6253\u6270\u6027. \u5b83\u901a\u8fc7\u727a\u7272\u8c03\u5f0f\u6548\u7387\u6765\u964d\u4f4e\u5b66\u4e60\u95e8\u69db, \u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u6781\u5176\u4f4e\u6548\u7684\u8c03\u8bd5\u65b9\u6cd5. \u5728\u73b0\u4ee3\u4e92\u8054\u7f51\u5f00\u53d1\u4e2d, \u5df2\u7ecf\u5f88\u5c11\u89c1\u5230\u6709\u4eba\u5927\u91cf\u4f7f\u7528\u4ea4\u4e92\u5f0f\u8c03\u5f0f\u6765\u89e3\u51b3 Bug, \u66f4\u591a\u7684\u662f\u901a\u8fc7\u8f93\u51fa\u65e5\u5fd7\u7684\u65b9\u5f0f\u6765\u5b9a\u4f4d\u548c\u89e3\u51b3 Bug. \u4ea4\u4e92\u5f0f\u8c03\u5f0f\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u63d2\u5165\u989d\u5916\u7684\u4fe1\u606f, \u5b83\u5fc5\u5b9a\u4f1a\u5f71\u54cd\u4ee3\u7801\u8fd0\u884c\u6548\u7387, \u4f46\u540c\u65f6\u73b0\u4ee3\u8f6f\u4ef6\u5de5\u7a0b\u590d\u6742\u5ea6\u8fdc\u8fdc\u8d85\u8fc7\u8fc7\u53bb, \u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5230\u8fbe\u51e0\u767e\u5146\u662f\u975e\u5e38\u666e\u904d\u7684, \u4ea4\u4e92\u5f0f\u8c03\u8bd5\u56e0\u4e3a\u5176\u8c03\u8bd5\u8303\u56f4\u5c0f(\u53d8\u91cf\u7ea7\u522b\u7684), \u8c03\u8bd5\u6b65\u9aa4\u9ebb\u70e6\u7b49\u539f\u56e0\u5728\u4e92\u8054\u7f51\u884c\u4e1a\u88ab\u9010\u6e10\u6dd8\u6c70. \u8ddf\u8e2a\u8c03\u8bd5 \u8ddf\u8e2a\u8c03\u8bd5(Trace Debug)\u673a\u5236\u662f\u4e3a\u4e86\u89e3\u51b3\u4ea4\u4e92\u5f0f\u8c03\u8bd5\u5bf9\u5904\u7406\u5668\u7684\u6253\u6270\u6027\u800c\u53d1\u660e\u51fa\u6765\u7684\u8c03\u8bd5\u65b9\u5f0f. \u8ddf\u8e2a\u8c03\u8bd5\u7684\u672c\u8d28\u5c31\u662f\u65e5\u5fd7\u673a\u5236, \u8c03\u8bd5\u5668\u5c06\u8ddf\u8e2a\u8bb0\u5f55\u5904\u7406\u5668\u6267\u884c\u8fc7\u7684\u6240\u6709\u6307\u4ee4\u4ee5\u53ca\u8be5\u6307\u4ee4\u6267\u884c\u65f6\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c, \u800c\u4e0d\u4f1a\u6253\u65ad\u5e72\u6270\u5904\u7406\u5668\u672c\u8eab\u7684\u8fd0\u884c\u8fc7\u7a0b. \u8ddf\u8e2a\u8c03\u8bd5\u540c\u6837\u9700\u8981\u786c\u4ef6\u652f\u6301\u624d\u80fd\u505a\u5230, \u76f8\u6bd4\u4ea4\u4e92\u5f0f\u8c03\u8bd5\u7684\u786c\u4ef6\u5b9e\u73b0\u96be\u5ea6\u66f4\u5927, \u6d88\u8017\u8d44\u6e90\u66f4\u9ad8. \u7531\u4e8e\u5904\u7406\u5668\u662f\u4ee5\u6781\u5feb\u7684\u901f\u5ea6\u8fd0\u884c\u7684, \u5b83\u6bcf\u79d2\u4ea7\u751f\u7684\u6570\u636e\u91cf\u975e\u5e38\u5e9e\u5927, \u8ddf\u8e2a\u5904\u7406\u5668\u9700\u8981\u8bb0\u5f55\u4e0b\u6240\u6709\u6307\u4ee4, \u5bf9\u4e8e\u8c03\u8bd5\u6a21\u5757\u7684\u6027\u80fd\u8981\u6c42, \u6570\u636e\u4f20\u8f93, \u6570\u636e\u5b58\u50a8\u90fd\u662f\u5de8\u5927\u7684\u6311\u6218. \u4f46\u5bf9\u4e8e Game Boy \u4eff\u771f\u5668\u800c\u8a00, \u5176\u7f3a\u70b9\u5c06\u88ab\u5b8c\u5168\u63a9\u76d6, \u56e0\u4e3a Game Boy \u7684 CPU \u672c\u8eab\u5904\u7406\u901f\u5ea6\u4e0d\u9ad8, \u540c\u65f6\u5176\u5bc4\u5b58\u5668\u5bbd\u5ea6\u5c0f, \u5bc4\u5b58\u5668\u6570\u91cf\u5c11\u7b49\u7279\u70b9, \u5b83\u4ea7\u751f\u7684\u6570\u636e\u91cf\u662f\u6709\u9650, \u5c31\u7b14\u8005\u4e4b\u524d\u7684\u6d4b\u8bd5\u6765\u770b, 3 \u5206\u949f\u5927\u6982\u53ea\u4ea7\u751f\u4e86 20G \u7684\u672a\u538b\u7f29\u7684\u6570\u636e, \u5bf9\u4e8e Game Boy \u7684\u666e\u904d\u53ea\u9700\u8981\u82b1\u8d39 1 ~ 10 \u79d2\u7684\u6d4b\u8bd5\u7528\u4f8b\u800c\u8a00, \u5b8c\u5168\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u4e4b\u5185. \u4e3a\u4eff\u771f\u5668\u6dfb\u52a0\u8ddf\u8e2a\u8c03\u8bd5\u7684\u65b9\u5f0f\u975e\u5e38\u7b80\u5355, \u53ea\u9700\u8981\u5728 CPU \u6a21\u5757\u52a0\u5165\u4e00\u884c\u4ee3\u7801\u5373\u53ef: println!(\"b={} c={} d={} e={} h={} l={} a={} f={}\", self.reg.b, self.reg.c, self.reg.d, self.reg.e, self.reg.h, self.reg.l, self.reg.a, self.reg.f) \u5269\u4e0b\u7684\u5de5\u4f5c\u5c31\u662f\u63a5\u6536\u4eff\u771f\u5668\u7684\u6807\u51c6\u8f93\u51fa\u5230\u4e00\u4e2a\u672c\u5730\u6587\u4ef6. \u548c\u5916\u6302\u7684\u8c03\u8bd5\u5de5\u5177\u76f8\u6bd4, \u65e5\u5fd7\u5177\u5907\u826f\u597d\u7684\u56de\u6eaf\u67e5\u8be2\u80fd\u529b. \u8bfb\u8005\u53ef\u4ee5\u4f7f\u7528\u540c\u6837\u7684\u65b9\u5f0f\u5728\u5176\u4ed6\u7684\u5f00\u6e90 Game Boy \u4eff\u771f\u5668\u4e2d\u63d2\u5165\u65e5\u5fd7\u5e76\u8f93\u51fa, \u8fd0\u884c\u540c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b, \u5e76\u6bd4\u5bf9\u4e24\u4efd\u65e5\u5fd7\u7684\u4e0d\u540c\u4ee5\u6b64\u5bfb\u627e\u51fa\u81ea\u5df1\u4ee3\u7801\u4e2d\u53ef\u80fd\u5b58\u5728\u9519\u8bef\u7684\u5730\u65b9. \u5f00\u6e90\u6d4b\u8bd5\u96c6 \u6b64\u5904\u5c06\u91c7\u7528\u5f00\u6e90\u7684 Game Boy \u786c\u4ef6\u6d4b\u8bd5\u96c6\u6765\u9a8c\u8bc1\u76ee\u524d\u5b9e\u73b0\u7684\u4eff\u771f\u5668. \u76ee\u524d\u666e\u904d\u7684\u6d4b\u8bd5 Game Boy \u786c\u4ef6/\u4eff\u771f\u5668\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u4e00\u4e9b\u5f00\u53d1\u8005\u5f00\u53d1\u7684\u6d4b\u8bd5 ROM. \u5728\u4ee5\u524d, \u6d4b\u8bd5 ROM \u662f\u9a8c\u8bc1 Game Boy \u786c\u4ef6\u603b\u4f53\u8d28\u91cf\u7684\u5173\u952e\u6b65\u9aa4, \u4f46\u662f\u73b0\u5728\u5b83\u4eec\u66f4\u591a\u88ab\u7528\u4e8e\u4eff\u771f\u5668\u4e0a. \u76ee\u524d\u5b58\u5728\u4e00\u4e9b\u5927\u578b\u7684 Game Boy \u6d4b\u8bd5\u5957\u4ef6, \u6bd4\u5982\u6709\u4ee5\u4e0b 4 \u79cd\u4e0d\u540c\u7684\u6d4b\u8bd5\u5957\u4ef6: Blargg's test ROMs Gambatte test ROMs AntonioND's test ROMs Mooneye GB test ROMs \u5982\u679c\u8bfb\u8005\u51c6\u5907\u5f00\u6e90\u81ea\u5df1\u7684 Game Boy \u5b9e\u73b0, \u8bf7\u540c\u65f6\u58f0\u660e\u8be5\u5f00\u6e90\u5b9e\u73b0\u901a\u8fc7\u4e86\u54ea\u4e9b\u6d4b\u8bd5\u96c6. \u8fd9\u53ef\u4ee5\u5927\u91cf\u8282\u7701\u4ed6\u4eba\u7684\u65f6\u95f4. \u8bb8\u591a\u5f00\u53d1\u8005\u5df2\u7ecf\u6d4b\u8bd5\u4e86\u8fd9\u4e9b ROM \u7684\u6b63\u786e\u6027, \u56e0\u6b64\u5728\u8fdb\u884c\u6d4b\u8bd5\u65f6, \u5e94\u5f53\u5047\u8bbe\u8fd9\u4e9b\u6d4b\u8bd5 ROM \u662f\u6b63\u786e\u7684. \u8fd9\u91cc\u4ee5\"Blargg's test ROMs\"\u6d4b\u8bd5\u96c6\u4e3a\u4f8b\u5b50, \u8fd9\u4e2a\u6d4b\u8bd5\u96c6\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f Game Boy \u7684\u57fa\u7840\u6d4b\u8bd5\u5957\u4ef6, \u4f46\u5373\u4f7f\u5982\u6b64, \u672c\u4e66\u4ecb\u7ecd\u7684\u4eff\u771f\u5668\u5b9e\u73b0\u4ecd\u7136\u6ca1\u6709\u901a\u8fc7\u6b64\u5957\u4ef6\u4e2d\u7684\u4e00\u4e9b\u6d4b\u8bd5\u7528\u4f8b. \u5df2\u786e\u8ba4\u5927\u6982\u7387\u6ca1\u6709\u95ee\u9898\u7684\u6a21\u5757\u5206\u522b\u662f CPU, Cartridge \u7b49\u6a21\u5757, \u800c\u5728\u89c6\u9891, \u97f3\u9891\u90e8\u5206\u5c11\u90e8\u5206\u6d4b\u8bd5\u7528\u4f8b\u672a\u80fd\u901a\u8fc7. \u4e0d\u8fc7\u5b83\u4eec\u5e76\u4e0d\u5f71\u54cd\u4eff\u771f\u5668\u7684\u8fd0\u884c, \u56e0\u4e3a\u5728\u4e00\u5e27\u4e2d\u51fa\u73b0\u7684\u95ee\u9898\u753b\u9762\u6216\u97f3\u9891\u95ee\u9898\u5c06\u5728\u4e0b\u4e00\u5e27\u88ab\u91cd\u7f6e. \u4ece https://github.com/retrio/gb-test-roms \u4e0b\u8f7d\u5168\u90e8\u6d4b\u8bd5\u7528\u4f8b, \u5c06\u5b83\u4eec\u5f53\u4f5c\u4e00\u4e2a\u666e\u901a\u7684\u6e38\u620f\u4f7f\u7528\u4eff\u771f\u5668\u52a0\u8f7d\u5e76\u8fd0\u884c\u67e5\u770b\u7ed3\u679c. \u4e0d\u8fc7\u9700\u8981\u8bb0\u4f4f\u4e00\u70b9, \u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u4e0d\u8981\u5047\u8bbe\u5176\u5b83\u4eff\u771f\u5668\u662f\u6b63\u786e\u7684. \u5728\u5bf9\u4ee3\u7801\u7684\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d, \u4e00\u5b9a\u4f1a\u51fa\u73b0\u5f88\u591a Bug, \u8fd9\u51e0\u4e4e\u662f\u5fc5\u7136\u7684. \u8bfb\u8005\u53ef\u4ee5\u4e0b\u8f7d\u5176\u5b83\u7684\u5f00\u6e90\u4eff\u771f\u5668\u5b9e\u73b0, \u5e76\u53c2\u7167/\u7406\u89e3\u5b83\u4eec\u7684\u4ee3\u7801\u6765\u4fee\u6b63\u81ea\u5df1\u4ee3\u7801\u4e2d\u7684\u9519\u8bef, \u4f46\u8bf7\u4e0d\u8981\u5047\u8bbe\u8fd9\u4e9b\u5f00\u6e90\u4eff\u771f\u5668\u4e00\u5b9a\u662f\u6b63\u786e\u7684. \u540c\u65f6, \u6d4b\u8bd5\u96c6\u4e2d\u5305\u542b\u8bb8\u591a\u6a21\u5757\u7684\u72ec\u7acb\u6d4b\u8bd5, \u5c3d\u91cf\u4e00\u6b21\u53ea\u5173\u6ce8\u4e00\u4ef6\u4e8b, \u907f\u514d\u4ea4\u53c9\u6d4b\u8bd5\u4ee3\u7801. \u6bd4\u5982\u5728\u6d4b\u8bd5 Game Boy CPU \u6307\u4ee4\u96c6\u7684\u65f6\u5019, \u4e0d\u8981\u53bb\u8bd5\u56fe\u4fee\u6539\u89c6\u9891\u6216\u97f3\u9891\u7684\u4ee3\u7801. \u76ee\u524d\u6bd4\u8f83\u63a8\u8350\u7684\u6d4b\u8bd5\u987a\u5e8f\u662f: Cartridge \u6a21\u5757 CPU \u6307\u4ee4\u96c6 CPU \u4e2d\u65ad GPU \u6e38\u620f\u624b\u67c4 \u97f3\u9891, \u4e32\u884c\u63a5\u53e3\u53ca\u5176\u4ed6 \u5176\u4e2d\u97f3\u9891, \u4e32\u884c\u63a5\u53e3\u53ca\u5176\u4ed6\u6a21\u5757\u5373\u4f7f\u5b58\u5728 Bug \u4e5f\u4e0d\u4f1a\u5f71\u54cd Game Boy \u4eff\u771f\u5668\u7684\u6574\u4f53\u8fd0\u884c, \u56e0\u6b64\u53ef\u4ee5\u5c3d\u91cf\u964d\u4f4e\u5b83\u4eec\u7684\u4f18\u5148\u7ea7.","title":"GB-\u5176\u4ed6-\u6d4b\u8bd5"},{"location":"content/gameboy/other/test/#_1","text":"\u5728\u7b14\u8005\u6f2b\u957f\u7684\u5f00\u53d1\u751f\u6daf\u4e2d, \u8bb8\u591a\u4eba\u5728\u5411\u7b14\u8005\u8bf7\u6559\u95ee\u9898\u7684\u65f6\u5019, \u603b\u662f\u559c\u6b22\u91cd\u590d\u8fd9\u6837\u4e00\u53e5\u8bdd:\"\u6211\u7684\u4ee3\u7801\u6ca1\u6709\u9519\u5440, \u4e3a\u4ec0\u4e48\u7ed3\u679c\u4e0d\u5bf9\u5462?\". \u5728\u4e00\u6b21\u53c8\u4e00\u6b21\u7684\u5b9e\u8df5\u4e2d, \u7b14\u8005\u5f97\u51fa\u4e86\u4ee5\u4e0b\u51e0\u6761\"\u516c\u7406\": \u8ba1\u7b97\u673a\u6c38\u8fdc\u662f\u5bf9\u7684. \u5982\u679c\u4f60\u7684\u9884\u671f\u7ed3\u679c\u548c\u8ba1\u7b97\u673a\u7ed9\u51fa\u7684\u7ed3\u679c\u4e0d\u4e00\u81f4, \u4e00\u5b9a\u662f\u4f60\u9519\u4e86. \u672a\u6d4b\u8bd5\u7684\u4ee3\u7801\u6c38\u8fdc\u662f\u9519\u7684. \u4f60\u53ef\u4ee5\u4e0d\u76f8\u4fe1\u4ee5\u4e0a\u51e0\u6761\u516c\u7406, \u4f46\u672a\u6765\u4f60\u4e00\u5b9a\u4f1a\u518d\u9047\u5230\u9ebb\u70e6. \u4e0a\u9762\u5e26\u4e00\u70b9\u73a9\u7b11\u6210\u5206, \u4f46\u6d4b\u8bd5\u5bf9\u4e8e\u4ee3\u7801\u8d28\u91cf\u6765\u8bf4\u771f\u7684\u975e\u5e38\u91cd\u8981! \u76ee\u524d\u6709\u8bb8\u591a\u6d4b\u8bd5\u7406\u8bba, \u6bd4\u5982\"\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\"\u4e4b\u7c7b, \u79c1\u4ee5\u4e3a\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5e76\u4e0d\u5efa\u8bae\u592a\u8fc7\u4e8e\u62d8\u6ce5\u8fd9\u4e9b\u7406\u8bba, \u5f00\u53d1\u8005\u9700\u5bfb\u627e\u9002\u5408\u81ea\u5df1\u7684\u6d4b\u8bd5\u4e4b\u9053. \u4f46\u4ecd\u7136\u6709\u4e00\u4e9b\u901a\u7528\u51c6\u5219\u9002\u7528\u5927\u90e8\u5206\u5f00\u53d1\u8005. \u6d4b\u8bd5\u7684\u76ee\u7684\u662f\u8bc1\u660e\u7cfb\u7edf\u5b58\u5728\u7f3a\u9677, \u800c\u4e0d\u662f\u8bc1\u660e\u7f3a\u9677\u4e0d\u5b58\u5728. \u8fd9\u4e2a\u539f\u5219\u6700\u65e9\u662f\u7531\u56fe\u7075\u5956\u83b7\u5f97\u8005 Edsger W. Dijkstra \u5728 1969 \u5e74\u63d0\u51fa\u6765\u7684. \u6d4b\u8bd5\u53ef\u4ee5\u964d\u4f4e\u7cfb\u7edf\u4e2d\u9057\u7559\u7684\u7f3a\u9677\u672a\u88ab\u53d1\u73b0\u7684\u53ef\u80fd\u6027, \u4f46\u662f\u5373\u4f7f\u6ca1\u6709\u53d1\u73b0\u7f3a\u9677, \u4e5f\u4e0d\u80fd\u8bc1\u660e\u7cfb\u7edf\u662f\u5b8c\u5168\u6b63\u786e\u7684. \u5b8c\u7f8e\u7684\u6d4b\u8bd5\u662f\u4e0d\u5b58\u5728\u7684. \u8fd9\u4e2a\u539f\u5219\u975e\u5e38\u91cd\u8981, \u56e0\u4e3a\u6b63\u662f\u56e0\u4e3a\u5b83\u5f15\u53d1\u4e86\u8bb8\u591a\u6d4b\u8bd5\u7406\u5ff5, \u6bd4\u5982\u8fb9\u754c\u503c\u6d4b\u8bd5: \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u4f5c\u4e3a\u53c2\u6570, \u5f00\u53d1\u8005\u901a\u5e38\u53ef\u4ee5\u7528\u4ee5\u4e0b\u6570\u636e\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5: \u4e00\u4e2a\u8d1f\u6570, \u96f6, \u4e00\u4e2a\u6b63\u6570, \u6709\u7b26\u53f7\u6574\u6570\u7684\u4e0a\u8fb9\u754c\u548c\u6709\u7b26\u53f7\u6574\u6570\u7684\u4e0b\u8fb9\u754c. \u904d\u5386\u5168\u90e8\u7684\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\u662f\u76f8\u5f53\u611a\u8822\u7684. \u4e0d\u80fd\u901a\u8fc7\u6253\u8865\u4e01\u7684\u65b9\u5f0f\u4fee\u590d\u7f3a\u9677. \u5f53\u6d4b\u8bd5\u53d1\u73b0\u95ee\u9898, \u8bf7\u5c3d\u91cf\u4e0d\u8981\u901a\u8fc7\u4e00\u4e2a If \u8bed\u53e5\u53bb Fix \u8fd9\u4e2a\u6d4b\u8bd5. \u5f00\u53d1\u8005\u5e94\u8be5\u5173\u6ce8\u7f3a\u9677\u7684\u6839\u672c\u6210\u56e0, \u800c\u4e0d\u5e94\u8be5\u4e3a\u4e86\u901a\u8fc7\u6d4b\u8bd5\u800c\u76f2\u76ee\u4fee\u6539\u4ee3\u7801. \u5e94\u5c3d\u65e9\u5c55\u5f00\u6d4b\u8bd5. \u6709\u5982\u4e0b\u4e00\u4e2a\u516c\u5f0f: \u5728\u5355\u5143\u6d4b\u8bd5\u671f\u95f4\u4fee\u590d\u4e00\u4e2a Bug \u7684\u4ee3\u4ef7\u662f 1, \u5728\u96c6\u6210\u6d4b\u8bd5\u671f\u95f4\u4fee\u590d\u4e00\u4e2a Bug \u7684\u4ee3\u4ef7\u662f 10, \u800c\u5728\u9ed1\u76d2\u6d4b\u8bd5\u671f\u95f4\u4fee\u590d\u4e00\u4e2a Bug \u7684\u4ee3\u4ef7\u662f 100. \u7f3a\u9677\u7684\u5206\u5e03\u5b58\u5728 2/8 \u5b9a\u5f8b. 80% \u7684 Bug \u5206\u5e03\u5728 20% \u7684\u4ee3\u7801\u91cc, \u5e94\u8be5\u628a\u6d4b\u8bd5\u91cd\u70b9\u653e\u5728\u8fd9 20% \u7684\u4ee3\u7801\u90e8\u5206. \u5b66\u4f1a\u6b63\u786e\u7684\u6d4b\u8bd5\u65b9\u6cd5\u662f\u6bcf\u4e2a\u5f00\u53d1\u8005\u5fc5\u987b\u638c\u63e1\u7684\u6280\u80fd.","title":"\u6d4b\u8bd5"},{"location":"content/gameboy/other/test/#_2","text":"\u5bf9\u4e8e\u672c\u4e66\u7684\u4eff\u771f\u5668\u800c\u8a00, \u5982\u679c\u5728\u6267\u884c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u5931\u8d25\u7684\u65f6\u5019, \u9700\u8981\u5bf9\u4eff\u771f\u5668\u8fdb\u884c\u8c03\u8bd5. \u5982\u679c\u4eff\u771f\u5668\u6ca1\u6709\u5bf9\u5916\u63d0\u4f9b\u8c03\u8bd5\u529f\u80fd, \u90a3\u4e48\u4e00\u65e6\u7a0b\u5e8f\u672a\u6309\u7167\u5f00\u53d1\u8005\u9884\u60f3\u7684\u8fc7\u7a0b\u8fd0\u884c, \u5f00\u53d1\u8005\u5c31\u5c06\u5904\u4e8e\u4e00\u4e2a\u675f\u624b\u65e0\u7b56\u7684\u5730\u6b65. \u56e0\u6b64, \u8c03\u8bd5\u529f\u80fd\u5bf9\u4e8e\u4eff\u771f\u5668\u800c\u8a00\u81f3\u5173\u91cd\u8981. \u6b64\u5904\u53ea\u5bf9\u6700\u5bb9\u6613\u51fa\u95ee\u9898\u7684 CPU \u8fdb\u884c\u4e3e\u4f8b. \u5bf9\u4e8e\u73b0\u5b9e\u4e2d\u7684\u5904\u7406\u5668\u7684\u8c03\u8bd5\u529f\u80fd\u800c\u8a00, \u5e38\u7528\u7684\u662f\u4e24\u79cd: \u4ea4\u4e92\u5f0f\u8c03\u5f0f \u8ffd\u8e2a\u8c03\u8bd5 \u4e0b\u9762\u5c06\u5bf9\u8fd9\u4e24\u79cd\u8c03\u8bd5\u529f\u80fd\u8fdb\u884c\u6982\u8ff0. \u4f46\u8981\u6ce8\u610f\u7684\u662f, \u73b0\u5b9e\u4e2d\u7684\u5904\u7406\u5668\u7684\u8c03\u8bd5\u529f\u80fd\u662f\u4e2a\u975e\u5e38\u590d\u6742\u7684\u6a21\u5757, \u5176\u5b9e\u73b0\u96be\u5ea6\u751a\u81f3\u8d85\u8fc7\u4e86\u5904\u7406\u5668\u672c\u8eab(\u975e\u5938\u5f20!), \u672c\u8282\u5c06\u53ea\u5bf9\u5176\u539f\u7406\u8fdb\u884c\u7b80\u8ff0. \u4ea4\u4e92\u5f0f\u8c03\u8bd5 \u4ea4\u4e92\u5f0f\u8c03\u8bd5(Interactive Debug)\u662f\u5904\u7406\u5668\u63d0\u4f9b\u7684\u6700\u5e38\u89c1\u4e00\u79cd\u8c03\u8bd5\u529f\u80fd. \u5b83\u6307\u8c03\u8bd5\u8f6f\u4ef6\u80fd\u591f\u76f4\u63a5\u53d6\u5f97\u5904\u7406\u5668\u7684\u63a7\u5236\u6743, \u8fdb\u800c\u5bf9\u5176\u8fdb\u884c\u4ea4\u4e92\u5f0f\u8c03\u8bd5\u7684\u4e00\u79cd\u673a\u5236. \u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u4f8b\u5b50\u662f\u8457\u540d\u7684\u8c03\u8bd5\u8f6f\u4ef6 GDB, \u4ee5\u53ca\u5e38\u7528\u7684\u65ad\u70b9\u8c03\u8bd5\u6cd5. \u5728\u4ea4\u4e92\u5f0f\u8c03\u8bd5\u4e0b, \u4f7f\u7528\u8005\u88ab\u5141\u8bb8\u968f\u65f6\u6682\u505c/\u542f\u52a8\u5904\u7406\u5668\u8fd0\u884c, \u5b9e\u65f6\u67e5\u770b\u5904\u7406\u7684\u5168\u90e8\u72b6\u6001, \u751a\u81f3\u662f\u6539\u53d8\u5904\u7406\u5668\u7684\u8fd0\u884c\u72b6\u6001, \u6bd4\u5982\u4fee\u6539\u5bc4\u5b58\u5668\u4e2d\u7684\u503c. \u8c03\u8bd5\u8f6f\u4ef6\u9700\u8981\u53d6\u5f97\u5904\u7406\u5668\u7684\u63a7\u5236\u6743, \u90a3\u4e48\u9996\u5148\u5904\u7406\u5668\u5fc5\u987b\u5411\u5916\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u624d\u884c. \u5982\u679c\u786c\u4ef6\u4e0d\u652f\u6301, \u90a3\u4e48\u4e00\u5207\u90fd\u662f\u767d\u642d. \u5728\u7edd\u5927\u90e8\u5206\u5904\u7406\u5668\u4e2d, \u90fd\u6709\u4e00\u4e2a\u786c\u4ef6\u5b9e\u73b0\u7684\u8c03\u8bd5\u6a21\u5757, \u8be5\u6a21\u5757\u901a\u8fc7\u7269\u7406\u4ecb\u8d28\u4e0e\u4e3b\u673a\u7aef\u7684\u8c03\u8bd5\u8f6f\u4ef6\u8fdb\u884c\u901a\u4fe1\u5e76\u63a5\u53d7\u8c03\u8bd5\u8f6f\u4ef6\u7684\u63a7\u5236, \u7136\u540e\u8c03\u8bd5\u6a21\u5757\u518d\u5bf9\u5904\u7406\u5668\u8fdb\u884c\u63a7\u5236. \u6b64\u5904\u4f7f\u7528\u4e00\u4e2a\u4f8b\u5b50\u4ee5\u5e2e\u52a9\u8bfb\u8005\u7406\u89e3\u8fd9\u4e2a\u8fc7\u7a0b, \u4ee5\u4f7f\u7528 GDB \u8c03\u5f0f C \u7a0b\u5e8f\u4e3a\u4f8b\u5b50. \u8ba9\u6211\u4eec\u521b\u5efa\u4ee5\u4e0b C \u7a0b\u5e8f, \u8be5\u7a0b\u5e8f\u8ba1\u7b97\u5e76\u6253\u5370\u6570\u5b57\u7684\u9636\u4e58. \u4f46\u662f, \u51fa\u4e8e\u8c03\u8bd5\u76ee\u7684, \u6b64 C \u7a0b\u5e8f\u4e2d\u5305\u542b\u4e00\u4e9b\u9519\u8bef. # include <stdio.h> int main() { int i, num, j; printf (\"Enter the number: \"); scanf (\"%d\", &num ); for (i=1; i<=num; i++) j=j*i; printf(\"The factorial of %d is %d\\n\",num,j); } \u7f16\u8bd1\u5e76\u6267\u884c\u7a0b\u5e8f, \u53d1\u73b0\u8fd0\u884c\u7ed3\u679c\u5b58\u5728\u9519\u8bef. $ cc factorial.c $ ./a.out Enter the number: 3 The factorial of 3 is 12548672 \u4f7f\u7528 GDB \u5bf9\u5176\u8fdb\u884c\u8c03\u8bd5. \u4f7f\u7528\u8c03\u8bd5\u9009\u9879 -g \u7f16\u8bd1 C \u7a0b\u5e8f gcc -g factorial.c . -g \u9009\u9879\u7684\u4f5c\u7528\u662f\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u52a0\u5165\u6e90\u4ee3\u7801\u7684\u4fe1\u606f, \u6bd4\u5982\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7b2c\u51e0\u6761\u673a\u5668\u6307\u4ee4\u5bf9\u5e94\u6e90\u4ee3\u7801\u7684\u7b2c\u51e0\u884c, \u4f46\u5e76\u4e0d\u662f\u628a\u6574\u4e2a\u6e90\u6587\u4ef6\u5d4c\u5165\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d, \u6240\u4ee5\u5728\u8c03\u8bd5\u65f6\u5fc5\u987b\u4fdd\u8bc1 gdb \u80fd\u627e\u5230\u6e90\u6587\u4ef6. \u5982\u679c\u628a\u5f53\u524d\u7684 factorial.c \u6539\u540d\u6216\u8005\u79fb\u52a8\u5230\u5176\u4ed6\u5730\u65b9, \u5219 gdb \u65e0\u6cd5\u8fdb\u884c\u8c03\u8bd5. \u4e4b\u540e\u8fd0\u884c gdb a.out \u8bbe\u7f6e\u65ad\u70b9, \u8bed\u6cd5\u662f break line_number. \u8fd9\u91cc\u8bbe\u7f6e\u65ad\u70b9\u4e3a\u7b2c\u5341\u884c, \u5373 break 10. Breakpoint 1, main () at factorial.c:10 10 j=j*i; \u6b64\u65f6\u4fbf\u53ef\u4ee5\u6253\u5370\u53d8\u91cf\u7684\u503c, \u8bed\u6cd5\u662f print variable_name. (gdb) p i $1 = 1 (gdb) p j $2 = 3042592 (gdb) p num $3 = 3 \u5982\u4e0a\u6240\u793a, \u53ef\u4ee5\u53d1\u73b0\u5728 factorial.c \u4e2d, \u7531\u4e8e\u5c1a\u672a\u521d\u59cb\u5316\u53d8\u91cf j \u56e0\u6b64\u5b83\u5f97\u5230\u4e86\u9519\u8bef\u7684\u9636\u4e58\u503c. \u4ea4\u4e92\u5f0f\u8c03\u8bd5\u80fd\u89e3\u51b3\u5927\u91cf\u95ee\u9898, \u540c\u65f6\u5b83\u4e5f\u5df2\u7ecf\u5b58\u5728\u4e86\u51e0\u5341\u5e74\u4e86. \u4f46\u5176\u5b58\u5728\u4e00\u4e2a\u7f3a\u70b9\u662f\u5bf9\u5904\u7406\u5668\u548c\u5f00\u53d1\u8005\u90fd\u5177\u6709\u6253\u6270\u6027. \u5b83\u901a\u8fc7\u727a\u7272\u8c03\u5f0f\u6548\u7387\u6765\u964d\u4f4e\u5b66\u4e60\u95e8\u69db, \u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u6781\u5176\u4f4e\u6548\u7684\u8c03\u8bd5\u65b9\u6cd5. \u5728\u73b0\u4ee3\u4e92\u8054\u7f51\u5f00\u53d1\u4e2d, \u5df2\u7ecf\u5f88\u5c11\u89c1\u5230\u6709\u4eba\u5927\u91cf\u4f7f\u7528\u4ea4\u4e92\u5f0f\u8c03\u5f0f\u6765\u89e3\u51b3 Bug, \u66f4\u591a\u7684\u662f\u901a\u8fc7\u8f93\u51fa\u65e5\u5fd7\u7684\u65b9\u5f0f\u6765\u5b9a\u4f4d\u548c\u89e3\u51b3 Bug. \u4ea4\u4e92\u5f0f\u8c03\u5f0f\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u63d2\u5165\u989d\u5916\u7684\u4fe1\u606f, \u5b83\u5fc5\u5b9a\u4f1a\u5f71\u54cd\u4ee3\u7801\u8fd0\u884c\u6548\u7387, \u4f46\u540c\u65f6\u73b0\u4ee3\u8f6f\u4ef6\u5de5\u7a0b\u590d\u6742\u5ea6\u8fdc\u8fdc\u8d85\u8fc7\u8fc7\u53bb, \u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5230\u8fbe\u51e0\u767e\u5146\u662f\u975e\u5e38\u666e\u904d\u7684, \u4ea4\u4e92\u5f0f\u8c03\u8bd5\u56e0\u4e3a\u5176\u8c03\u8bd5\u8303\u56f4\u5c0f(\u53d8\u91cf\u7ea7\u522b\u7684), \u8c03\u8bd5\u6b65\u9aa4\u9ebb\u70e6\u7b49\u539f\u56e0\u5728\u4e92\u8054\u7f51\u884c\u4e1a\u88ab\u9010\u6e10\u6dd8\u6c70. \u8ddf\u8e2a\u8c03\u8bd5 \u8ddf\u8e2a\u8c03\u8bd5(Trace Debug)\u673a\u5236\u662f\u4e3a\u4e86\u89e3\u51b3\u4ea4\u4e92\u5f0f\u8c03\u8bd5\u5bf9\u5904\u7406\u5668\u7684\u6253\u6270\u6027\u800c\u53d1\u660e\u51fa\u6765\u7684\u8c03\u8bd5\u65b9\u5f0f. \u8ddf\u8e2a\u8c03\u8bd5\u7684\u672c\u8d28\u5c31\u662f\u65e5\u5fd7\u673a\u5236, \u8c03\u8bd5\u5668\u5c06\u8ddf\u8e2a\u8bb0\u5f55\u5904\u7406\u5668\u6267\u884c\u8fc7\u7684\u6240\u6709\u6307\u4ee4\u4ee5\u53ca\u8be5\u6307\u4ee4\u6267\u884c\u65f6\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c, \u800c\u4e0d\u4f1a\u6253\u65ad\u5e72\u6270\u5904\u7406\u5668\u672c\u8eab\u7684\u8fd0\u884c\u8fc7\u7a0b. \u8ddf\u8e2a\u8c03\u8bd5\u540c\u6837\u9700\u8981\u786c\u4ef6\u652f\u6301\u624d\u80fd\u505a\u5230, \u76f8\u6bd4\u4ea4\u4e92\u5f0f\u8c03\u8bd5\u7684\u786c\u4ef6\u5b9e\u73b0\u96be\u5ea6\u66f4\u5927, \u6d88\u8017\u8d44\u6e90\u66f4\u9ad8. \u7531\u4e8e\u5904\u7406\u5668\u662f\u4ee5\u6781\u5feb\u7684\u901f\u5ea6\u8fd0\u884c\u7684, \u5b83\u6bcf\u79d2\u4ea7\u751f\u7684\u6570\u636e\u91cf\u975e\u5e38\u5e9e\u5927, \u8ddf\u8e2a\u5904\u7406\u5668\u9700\u8981\u8bb0\u5f55\u4e0b\u6240\u6709\u6307\u4ee4, \u5bf9\u4e8e\u8c03\u8bd5\u6a21\u5757\u7684\u6027\u80fd\u8981\u6c42, \u6570\u636e\u4f20\u8f93, \u6570\u636e\u5b58\u50a8\u90fd\u662f\u5de8\u5927\u7684\u6311\u6218. \u4f46\u5bf9\u4e8e Game Boy \u4eff\u771f\u5668\u800c\u8a00, \u5176\u7f3a\u70b9\u5c06\u88ab\u5b8c\u5168\u63a9\u76d6, \u56e0\u4e3a Game Boy \u7684 CPU \u672c\u8eab\u5904\u7406\u901f\u5ea6\u4e0d\u9ad8, \u540c\u65f6\u5176\u5bc4\u5b58\u5668\u5bbd\u5ea6\u5c0f, \u5bc4\u5b58\u5668\u6570\u91cf\u5c11\u7b49\u7279\u70b9, \u5b83\u4ea7\u751f\u7684\u6570\u636e\u91cf\u662f\u6709\u9650, \u5c31\u7b14\u8005\u4e4b\u524d\u7684\u6d4b\u8bd5\u6765\u770b, 3 \u5206\u949f\u5927\u6982\u53ea\u4ea7\u751f\u4e86 20G \u7684\u672a\u538b\u7f29\u7684\u6570\u636e, \u5bf9\u4e8e Game Boy \u7684\u666e\u904d\u53ea\u9700\u8981\u82b1\u8d39 1 ~ 10 \u79d2\u7684\u6d4b\u8bd5\u7528\u4f8b\u800c\u8a00, \u5b8c\u5168\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u4e4b\u5185. \u4e3a\u4eff\u771f\u5668\u6dfb\u52a0\u8ddf\u8e2a\u8c03\u8bd5\u7684\u65b9\u5f0f\u975e\u5e38\u7b80\u5355, \u53ea\u9700\u8981\u5728 CPU \u6a21\u5757\u52a0\u5165\u4e00\u884c\u4ee3\u7801\u5373\u53ef: println!(\"b={} c={} d={} e={} h={} l={} a={} f={}\", self.reg.b, self.reg.c, self.reg.d, self.reg.e, self.reg.h, self.reg.l, self.reg.a, self.reg.f) \u5269\u4e0b\u7684\u5de5\u4f5c\u5c31\u662f\u63a5\u6536\u4eff\u771f\u5668\u7684\u6807\u51c6\u8f93\u51fa\u5230\u4e00\u4e2a\u672c\u5730\u6587\u4ef6. \u548c\u5916\u6302\u7684\u8c03\u8bd5\u5de5\u5177\u76f8\u6bd4, \u65e5\u5fd7\u5177\u5907\u826f\u597d\u7684\u56de\u6eaf\u67e5\u8be2\u80fd\u529b. \u8bfb\u8005\u53ef\u4ee5\u4f7f\u7528\u540c\u6837\u7684\u65b9\u5f0f\u5728\u5176\u4ed6\u7684\u5f00\u6e90 Game Boy \u4eff\u771f\u5668\u4e2d\u63d2\u5165\u65e5\u5fd7\u5e76\u8f93\u51fa, \u8fd0\u884c\u540c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b, \u5e76\u6bd4\u5bf9\u4e24\u4efd\u65e5\u5fd7\u7684\u4e0d\u540c\u4ee5\u6b64\u5bfb\u627e\u51fa\u81ea\u5df1\u4ee3\u7801\u4e2d\u53ef\u80fd\u5b58\u5728\u9519\u8bef\u7684\u5730\u65b9.","title":"\u8c03\u8bd5\u6982\u8ff0"},{"location":"content/gameboy/other/test/#_3","text":"\u6b64\u5904\u5c06\u91c7\u7528\u5f00\u6e90\u7684 Game Boy \u786c\u4ef6\u6d4b\u8bd5\u96c6\u6765\u9a8c\u8bc1\u76ee\u524d\u5b9e\u73b0\u7684\u4eff\u771f\u5668. \u76ee\u524d\u666e\u904d\u7684\u6d4b\u8bd5 Game Boy \u786c\u4ef6/\u4eff\u771f\u5668\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u4e00\u4e9b\u5f00\u53d1\u8005\u5f00\u53d1\u7684\u6d4b\u8bd5 ROM. \u5728\u4ee5\u524d, \u6d4b\u8bd5 ROM \u662f\u9a8c\u8bc1 Game Boy \u786c\u4ef6\u603b\u4f53\u8d28\u91cf\u7684\u5173\u952e\u6b65\u9aa4, \u4f46\u662f\u73b0\u5728\u5b83\u4eec\u66f4\u591a\u88ab\u7528\u4e8e\u4eff\u771f\u5668\u4e0a. \u76ee\u524d\u5b58\u5728\u4e00\u4e9b\u5927\u578b\u7684 Game Boy \u6d4b\u8bd5\u5957\u4ef6, \u6bd4\u5982\u6709\u4ee5\u4e0b 4 \u79cd\u4e0d\u540c\u7684\u6d4b\u8bd5\u5957\u4ef6: Blargg's test ROMs Gambatte test ROMs AntonioND's test ROMs Mooneye GB test ROMs \u5982\u679c\u8bfb\u8005\u51c6\u5907\u5f00\u6e90\u81ea\u5df1\u7684 Game Boy \u5b9e\u73b0, \u8bf7\u540c\u65f6\u58f0\u660e\u8be5\u5f00\u6e90\u5b9e\u73b0\u901a\u8fc7\u4e86\u54ea\u4e9b\u6d4b\u8bd5\u96c6. \u8fd9\u53ef\u4ee5\u5927\u91cf\u8282\u7701\u4ed6\u4eba\u7684\u65f6\u95f4. \u8bb8\u591a\u5f00\u53d1\u8005\u5df2\u7ecf\u6d4b\u8bd5\u4e86\u8fd9\u4e9b ROM \u7684\u6b63\u786e\u6027, \u56e0\u6b64\u5728\u8fdb\u884c\u6d4b\u8bd5\u65f6, \u5e94\u5f53\u5047\u8bbe\u8fd9\u4e9b\u6d4b\u8bd5 ROM \u662f\u6b63\u786e\u7684. \u8fd9\u91cc\u4ee5\"Blargg's test ROMs\"\u6d4b\u8bd5\u96c6\u4e3a\u4f8b\u5b50, \u8fd9\u4e2a\u6d4b\u8bd5\u96c6\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f Game Boy \u7684\u57fa\u7840\u6d4b\u8bd5\u5957\u4ef6, \u4f46\u5373\u4f7f\u5982\u6b64, \u672c\u4e66\u4ecb\u7ecd\u7684\u4eff\u771f\u5668\u5b9e\u73b0\u4ecd\u7136\u6ca1\u6709\u901a\u8fc7\u6b64\u5957\u4ef6\u4e2d\u7684\u4e00\u4e9b\u6d4b\u8bd5\u7528\u4f8b. \u5df2\u786e\u8ba4\u5927\u6982\u7387\u6ca1\u6709\u95ee\u9898\u7684\u6a21\u5757\u5206\u522b\u662f CPU, Cartridge \u7b49\u6a21\u5757, \u800c\u5728\u89c6\u9891, \u97f3\u9891\u90e8\u5206\u5c11\u90e8\u5206\u6d4b\u8bd5\u7528\u4f8b\u672a\u80fd\u901a\u8fc7. \u4e0d\u8fc7\u5b83\u4eec\u5e76\u4e0d\u5f71\u54cd\u4eff\u771f\u5668\u7684\u8fd0\u884c, \u56e0\u4e3a\u5728\u4e00\u5e27\u4e2d\u51fa\u73b0\u7684\u95ee\u9898\u753b\u9762\u6216\u97f3\u9891\u95ee\u9898\u5c06\u5728\u4e0b\u4e00\u5e27\u88ab\u91cd\u7f6e. \u4ece https://github.com/retrio/gb-test-roms \u4e0b\u8f7d\u5168\u90e8\u6d4b\u8bd5\u7528\u4f8b, \u5c06\u5b83\u4eec\u5f53\u4f5c\u4e00\u4e2a\u666e\u901a\u7684\u6e38\u620f\u4f7f\u7528\u4eff\u771f\u5668\u52a0\u8f7d\u5e76\u8fd0\u884c\u67e5\u770b\u7ed3\u679c. \u4e0d\u8fc7\u9700\u8981\u8bb0\u4f4f\u4e00\u70b9, \u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u4e0d\u8981\u5047\u8bbe\u5176\u5b83\u4eff\u771f\u5668\u662f\u6b63\u786e\u7684. \u5728\u5bf9\u4ee3\u7801\u7684\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d, \u4e00\u5b9a\u4f1a\u51fa\u73b0\u5f88\u591a Bug, \u8fd9\u51e0\u4e4e\u662f\u5fc5\u7136\u7684. \u8bfb\u8005\u53ef\u4ee5\u4e0b\u8f7d\u5176\u5b83\u7684\u5f00\u6e90\u4eff\u771f\u5668\u5b9e\u73b0, \u5e76\u53c2\u7167/\u7406\u89e3\u5b83\u4eec\u7684\u4ee3\u7801\u6765\u4fee\u6b63\u81ea\u5df1\u4ee3\u7801\u4e2d\u7684\u9519\u8bef, \u4f46\u8bf7\u4e0d\u8981\u5047\u8bbe\u8fd9\u4e9b\u5f00\u6e90\u4eff\u771f\u5668\u4e00\u5b9a\u662f\u6b63\u786e\u7684. \u540c\u65f6, \u6d4b\u8bd5\u96c6\u4e2d\u5305\u542b\u8bb8\u591a\u6a21\u5757\u7684\u72ec\u7acb\u6d4b\u8bd5, \u5c3d\u91cf\u4e00\u6b21\u53ea\u5173\u6ce8\u4e00\u4ef6\u4e8b, \u907f\u514d\u4ea4\u53c9\u6d4b\u8bd5\u4ee3\u7801. \u6bd4\u5982\u5728\u6d4b\u8bd5 Game Boy CPU \u6307\u4ee4\u96c6\u7684\u65f6\u5019, \u4e0d\u8981\u53bb\u8bd5\u56fe\u4fee\u6539\u89c6\u9891\u6216\u97f3\u9891\u7684\u4ee3\u7801. \u76ee\u524d\u6bd4\u8f83\u63a8\u8350\u7684\u6d4b\u8bd5\u987a\u5e8f\u662f: Cartridge \u6a21\u5757 CPU \u6307\u4ee4\u96c6 CPU \u4e2d\u65ad GPU \u6e38\u620f\u624b\u67c4 \u97f3\u9891, \u4e32\u884c\u63a5\u53e3\u53ca\u5176\u4ed6 \u5176\u4e2d\u97f3\u9891, \u4e32\u884c\u63a5\u53e3\u53ca\u5176\u4ed6\u6a21\u5757\u5373\u4f7f\u5b58\u5728 Bug \u4e5f\u4e0d\u4f1a\u5f71\u54cd Game Boy \u4eff\u771f\u5668\u7684\u6574\u4f53\u8fd0\u884c, \u56e0\u6b64\u53ef\u4ee5\u5c3d\u91cf\u964d\u4f4e\u5b83\u4eec\u7684\u4f18\u5148\u7ea7.","title":"\u5f00\u6e90\u6d4b\u8bd5\u96c6"},{"location":"content/gameboy/other/timer/","text":"\u5b9a\u65f6\u5668 \u5f53\u8ba1\u7b97\u673a\u8bde\u751f\u540e, \u4eba\u4eec\u9664\u4e86\u671f\u671b\u5b83\u8ba1\u7b97\u52a0\u51cf\u4e58\u9664\u5916, \u8fd8\u5e0c\u671b\u505a\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u4e8b: \u6bd4\u5982\u6309\u7167\u67d0\u56fa\u5b9a\u9891\u7387\u5237\u65b0\u753b\u9762\u4ee5\u663e\u793a\u52a8\u6001\u753b\u9762, \u5f53\u5916\u63a5\u952e\u76d8\u65f6\u53ef\u4ee5\u8bc6\u522b\u952e\u76d8\u6309\u94ae\u7684\u957f\u6309\u6216\u77ed\u6309, \u8ba1\u7b97\u4e00\u4e2a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u6267\u884c\u65f6\u95f4\u7b49. \u8fd9\u4e00\u5207\u90fd\u9700\u8981\u6839\u636e\u5b9a\u65f6\u5668\u8fdb\u884c\u534f\u8c03\u64cd\u4f5c. \u5b9a\u65f6\u5668\u7684\u76ee\u7684\u662f\u5141\u8bb8\u4e8b\u60c5\u5728\u7ed9\u5b9a\u65f6\u523b\u6216\u4ee5\u7279\u5b9a\u901f\u7387\u53d1\u751f. \u5728\u672c\u8282\u6240\u8bf4\u7684\u5b9a\u65f6\u5668\u4e0e\u89c6\u9891\u6a21\u5757, \u97f3\u9891\u6a21\u5757\u6216 MBC3 \u5361\u5e26\u4e2d\u7684\u5b9a\u65f6\u5668\u6709\u4e9b\u4e0d\u4e00\u6837: \u6b64\u5904\u7684\u5b9a\u65f6\u5668\u662f Game Boy \u673a\u5668\u7684\u4e00\u7b49\u516c\u6c11, \u5b83\u76f4\u63a5\u4e0e\u5185\u5b58\u7ba1\u7406\u6a21\u5757\u76f8\u8fde. \u5b9a\u65f6\u5668\u4f1a\u5b9a\u671f\u4e2d\u65ad CPU \u7684\u6267\u884c, \u4ee5\u4f7f Game Boy \u7684 CPU \u4ee5\u56fa\u5b9a\u9891\u7387\u6267\u884c\u67d0\u4e9b\u5de5\u4f5c. Game Boy \u4e2d\u7684\u5b9a\u65f6\u5668\u5177\u6709 4096, 16384, 65536 \u6216 262144 Hz \u7684\u53ef\u9009\u9891\u7387. \u4e0d\u8fc7\u503c\u5f97\u6ce8\u610f\u7684\u662f, \u867d\u7136\u672c\u8282\u7684\u5b9a\u65f6\u5668\u529f\u80fd\u5f3a\u5927\u4ee5\u81f3\u4e8e\u76f4\u63a5\u548c\u5185\u5b58\u7ba1\u7406\u6a21\u5757\u76f8\u8fde, \u4f46\u4e8b\u5b9e\u4e0a\u5927\u90e8\u5206 Game Boy \u7684\u6e38\u620f\u90fd\u6ca1\u6709\u5f88\u597d\u7684\u4f7f\u7528\u5230\u8fd9\u4e2a\u5143\u4ef6. \u56e0\u4e3a\u5c31\u5982\u524d\u6587\u6240\u8bf4, \u89c6\u9891\u6a21\u5757\u53ef\u4ee5\u4fdd\u6301\u6052\u5b9a\u7684\u6bcf\u79d2 60 \u5e27\u753b\u9762, \u56e0\u6b64\u5f00\u53d1\u8005\u66f4\u5e38\u5e38\u76f4\u63a5\u5728\u753b\u9762\u5237\u65b0\u7684\u95f4\u9699\u53bb\u63d2\u5165\u9700\u8981\u5b9a\u65f6\u6267\u884c\u7684\u4ee3\u7801, \u6bd4\u5982\u83b7\u53d6\u6e38\u620f\u624b\u67c4\u7684\u8f93\u5165\u5e76\u5224\u65ad\u5176\u662f\u957f\u6309\u8fd8\u662f\u77ed\u6309. \u5b9a\u65f6\u5668\u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\u4ee5\u7279\u5b9a\u9891\u7387\u4f7f\u5b9a\u65f6\u5668\u8ba1\u6570\u5668(TIMA)\u9012\u589e, \u5f53\u5b83\u6ea2\u51fa\u65f6, \u4ea7\u751f\u4e00\u4e2a CPU \u4e2d\u65ad, \u7136\u540e\u52a0\u8f7d Timer Modulo(TMA) \u7684\u5185\u5bb9. \u5177\u4f53\u800c\u8a00, \u5b83\u5177\u6709\u4ee5\u4e0b\u51e0\u4e2a\u5bc4\u5b58\u5668. \u5bc4\u5b58\u5668\u63cf\u8ff0 \u540d\u79f0 \u5730\u5740 \u63cf\u8ff0 DIV 0xff04 DIV(Divider Register) \u5bc4\u5b58\u5668\u4ee5 16384Hz \u7684\u901f\u7387\u9012\u589e. \u5c06\u4efb\u4f55\u503c\u5199\u5165\u8be5\u5bc4\u5b58\u5668\u4f1a\u5c06\u5176\u91cd\u7f6e\u4e3a 0x00. TIMA 0xff05 TIMA(Timer counter). \u5b9a\u65f6\u5668\u4ee5 TAC \u5bc4\u5b58\u5668\u6307\u5b9a\u7684\u65f6\u949f\u9891\u7387(0xff07)\u9012\u589e. \u5f53\u503c\u6ea2\u51fa\uff08> 0xff\uff09\u65f6, \u5b83\u5c06\u88ab\u91cd\u7f6e\u4e3a TMA\uff080xff06\uff09\u4e2d\u6307\u5b9a\u7684\u503c, \u5e76\u5c06\u8bf7\u6c42 CPU \u4e2d\u65ad. TMA 0xff06 TMA(Timer Modulo). \u5f53 TIMA \u6ea2\u51fa\u65f6, TIMA \u5c06\u88ab\u91cd\u7f6e\u4e3a\u8be5\u5bc4\u5b58\u5668\u4e2d\u6307\u5b9a\u7684\u503c. TAC 0xff07 TAC(Timer Control). \u8be6\u89c1\u4e0b\u6587\u8bf4\u660e TAC(Timer Control) \u5bc4\u5b58\u5668\u88ab\u533a\u5206\u4e3a\u4e24\u6bb5\u6570\u636e: \u4f4d \u8bf4\u660e Bit 2 \u5b9a\u65f6\u5668\u542f\u7528/\u7981\u7528\u6807\u5fd7(1=\u542f\u52a8, 0=\u7981\u7528) Bit 1-0 \u8bbe\u5b9a\u5b9a\u65f6\u5668\u7684\u9891\u7387 \u9891\u7387\u9009\u62e9: \u6807\u5fd7\u4f4d \u9891\u7387 00 CPU Clock / 1024 (DMG, CGB: 4096 Hz, SGB: ~4194 Hz) 01 CPU Clock / 16 (DMG, CGB: 262144 Hz, SGB: ~268400 Hz) 10 CPU Clock / 64 (DMG, CGB: 65536 Hz, SGB: ~67110 Hz) 11 CPU Clock / 256 (DMG, CGB: 16384 Hz, SGB: ~16780 Hz) \u4ee3\u7801\u5b9e\u73b0 // Sometimes it's useful to have a timer that interrupts at regular intervals for routines that require periodic or // percise updates. The timer in the GameBoy has a selectable frequency of 4096, 16384, 65536, or 262144 Hertz. // This frequency increments the Timer Counter (TIMA). When it overflows, it generates an interrupt. It is then loaded // with the contents of Timer Modulo (TMA). // // See: http://gbdev.gg8.se/wiki/articles/Timer_and_Divider_Registers use super::intf::{Flag, Intf}; use std::cell::RefCell; use std::rc::Rc; pub struct Timer { // Each time when the timer overflows (ie. when TIMA gets bigger than FFh), then an interrupt is requested by // setting Bit 2 in the IF Register (FF0F). When that interrupt is enabled, then the CPU will execute it by calling // the timer interrupt vector at 0050h. intf: Rc<RefCell<Intf>>, // This register is incremented at rate of 16384Hz (~16779Hz on SGB). Writing any value to this register resets it // to 00h. // Note: The divider is affected by CGB double speed mode, and will increment at 32768Hz in double speed. div: u8, // This timer is incremented by a clock frequency specified by the TAC register ($FF07). When the value overflows // (gets bigger than FFh) then it will be reset to the value specified in TMA (FF06), and an interrupt will be // requested, as described below. tima: u8, // When the TIMA overflows, this data will be loaded. tma: u8, // Bit 2 - Timer Enable // Bits 1-0 - Input Clock Select // 00: CPU Clock / 1024 (DMG, CGB: 4096 Hz, SGB: ~4194 Hz) // 01: CPU Clock / 16 (DMG, CGB: 262144 Hz, SGB: ~268400 Hz) // 10: CPU Clock / 64 (DMG, CGB: 65536 Hz, SGB: ~67110 Hz) // 11: CPU Clock / 256 (DMG, CGB: 16384 Hz, SGB: ~16780 Hz) tac: u8, freq: u32, // Count the number of cycles and set 0 each 256 cycles tmp1: u32, // Count the number of cycles and set 0 each \"freq\" cycles tmp2: u32, } impl Timer { pub fn power_up(intf: Rc<RefCell<Intf>>) -> Self { Timer { intf, div: 0x00, tima: 0x00, tma: 0x00, tac: 0x00, freq: 256, tmp1: 0x00, tmp2: 0x00, } } pub fn get(&self, a: u16) -> u8 { match a { 0xff04 => self.div, 0xff05 => self.tima, 0xff06 => self.tma, 0xff07 => self.tac, _ => panic!(\"Unsupported address\"), } } pub fn set(&mut self, a: u16, v: u8) { match a { 0xff04 => self.div = 0x00, 0xff05 => self.tima = v, 0xff06 => self.tma = v, 0xff07 => { self.tac = v; match v & 0x03 { 0x00 => self.freq = 1024, 0x01 => self.freq = 16, 0x02 => self.freq = 64, 0x03 => self.freq = 256, _ => panic!(\"\"), }; } _ => panic!(\"Unsupported address\"), } } pub fn next(&mut self, cycles: u32) { // Increment div at rate of 16384Hz. Because the clock cycles is 4194304, so div increment every 256 cycles. let c = 256; self.tmp1 += cycles; if self.tmp1 >= c { self.div = self.div.wrapping_add(1); self.tmp1 -= c; } // Increment tima at rate of Clock / freq if (self.tac & 0x04) != 0x00 { self.tmp2 += cycles; while self.tmp2 >= self.freq { self.tima = self.tima.wrapping_add(1); if self.tima == 0x00 { self.tima = self.tma; self.intf.borrow_mut().hi(Flag::Timer); } self.tmp2 -= self.freq; } } } }","title":"GB-\u5176\u4ed6-\u5b9a\u65f6\u5668"},{"location":"content/gameboy/other/timer/#_1","text":"\u5f53\u8ba1\u7b97\u673a\u8bde\u751f\u540e, \u4eba\u4eec\u9664\u4e86\u671f\u671b\u5b83\u8ba1\u7b97\u52a0\u51cf\u4e58\u9664\u5916, \u8fd8\u5e0c\u671b\u505a\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u4e8b: \u6bd4\u5982\u6309\u7167\u67d0\u56fa\u5b9a\u9891\u7387\u5237\u65b0\u753b\u9762\u4ee5\u663e\u793a\u52a8\u6001\u753b\u9762, \u5f53\u5916\u63a5\u952e\u76d8\u65f6\u53ef\u4ee5\u8bc6\u522b\u952e\u76d8\u6309\u94ae\u7684\u957f\u6309\u6216\u77ed\u6309, \u8ba1\u7b97\u4e00\u4e2a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u6267\u884c\u65f6\u95f4\u7b49. \u8fd9\u4e00\u5207\u90fd\u9700\u8981\u6839\u636e\u5b9a\u65f6\u5668\u8fdb\u884c\u534f\u8c03\u64cd\u4f5c. \u5b9a\u65f6\u5668\u7684\u76ee\u7684\u662f\u5141\u8bb8\u4e8b\u60c5\u5728\u7ed9\u5b9a\u65f6\u523b\u6216\u4ee5\u7279\u5b9a\u901f\u7387\u53d1\u751f. \u5728\u672c\u8282\u6240\u8bf4\u7684\u5b9a\u65f6\u5668\u4e0e\u89c6\u9891\u6a21\u5757, \u97f3\u9891\u6a21\u5757\u6216 MBC3 \u5361\u5e26\u4e2d\u7684\u5b9a\u65f6\u5668\u6709\u4e9b\u4e0d\u4e00\u6837: \u6b64\u5904\u7684\u5b9a\u65f6\u5668\u662f Game Boy \u673a\u5668\u7684\u4e00\u7b49\u516c\u6c11, \u5b83\u76f4\u63a5\u4e0e\u5185\u5b58\u7ba1\u7406\u6a21\u5757\u76f8\u8fde. \u5b9a\u65f6\u5668\u4f1a\u5b9a\u671f\u4e2d\u65ad CPU \u7684\u6267\u884c, \u4ee5\u4f7f Game Boy \u7684 CPU \u4ee5\u56fa\u5b9a\u9891\u7387\u6267\u884c\u67d0\u4e9b\u5de5\u4f5c. Game Boy \u4e2d\u7684\u5b9a\u65f6\u5668\u5177\u6709 4096, 16384, 65536 \u6216 262144 Hz \u7684\u53ef\u9009\u9891\u7387. \u4e0d\u8fc7\u503c\u5f97\u6ce8\u610f\u7684\u662f, \u867d\u7136\u672c\u8282\u7684\u5b9a\u65f6\u5668\u529f\u80fd\u5f3a\u5927\u4ee5\u81f3\u4e8e\u76f4\u63a5\u548c\u5185\u5b58\u7ba1\u7406\u6a21\u5757\u76f8\u8fde, \u4f46\u4e8b\u5b9e\u4e0a\u5927\u90e8\u5206 Game Boy \u7684\u6e38\u620f\u90fd\u6ca1\u6709\u5f88\u597d\u7684\u4f7f\u7528\u5230\u8fd9\u4e2a\u5143\u4ef6. \u56e0\u4e3a\u5c31\u5982\u524d\u6587\u6240\u8bf4, \u89c6\u9891\u6a21\u5757\u53ef\u4ee5\u4fdd\u6301\u6052\u5b9a\u7684\u6bcf\u79d2 60 \u5e27\u753b\u9762, \u56e0\u6b64\u5f00\u53d1\u8005\u66f4\u5e38\u5e38\u76f4\u63a5\u5728\u753b\u9762\u5237\u65b0\u7684\u95f4\u9699\u53bb\u63d2\u5165\u9700\u8981\u5b9a\u65f6\u6267\u884c\u7684\u4ee3\u7801, \u6bd4\u5982\u83b7\u53d6\u6e38\u620f\u624b\u67c4\u7684\u8f93\u5165\u5e76\u5224\u65ad\u5176\u662f\u957f\u6309\u8fd8\u662f\u77ed\u6309. \u5b9a\u65f6\u5668\u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\u4ee5\u7279\u5b9a\u9891\u7387\u4f7f\u5b9a\u65f6\u5668\u8ba1\u6570\u5668(TIMA)\u9012\u589e, \u5f53\u5b83\u6ea2\u51fa\u65f6, \u4ea7\u751f\u4e00\u4e2a CPU \u4e2d\u65ad, \u7136\u540e\u52a0\u8f7d Timer Modulo(TMA) \u7684\u5185\u5bb9. \u5177\u4f53\u800c\u8a00, \u5b83\u5177\u6709\u4ee5\u4e0b\u51e0\u4e2a\u5bc4\u5b58\u5668.","title":"\u5b9a\u65f6\u5668"},{"location":"content/gameboy/other/timer/#_2","text":"\u540d\u79f0 \u5730\u5740 \u63cf\u8ff0 DIV 0xff04 DIV(Divider Register) \u5bc4\u5b58\u5668\u4ee5 16384Hz \u7684\u901f\u7387\u9012\u589e. \u5c06\u4efb\u4f55\u503c\u5199\u5165\u8be5\u5bc4\u5b58\u5668\u4f1a\u5c06\u5176\u91cd\u7f6e\u4e3a 0x00. TIMA 0xff05 TIMA(Timer counter). \u5b9a\u65f6\u5668\u4ee5 TAC \u5bc4\u5b58\u5668\u6307\u5b9a\u7684\u65f6\u949f\u9891\u7387(0xff07)\u9012\u589e. \u5f53\u503c\u6ea2\u51fa\uff08> 0xff\uff09\u65f6, \u5b83\u5c06\u88ab\u91cd\u7f6e\u4e3a TMA\uff080xff06\uff09\u4e2d\u6307\u5b9a\u7684\u503c, \u5e76\u5c06\u8bf7\u6c42 CPU \u4e2d\u65ad. TMA 0xff06 TMA(Timer Modulo). \u5f53 TIMA \u6ea2\u51fa\u65f6, TIMA \u5c06\u88ab\u91cd\u7f6e\u4e3a\u8be5\u5bc4\u5b58\u5668\u4e2d\u6307\u5b9a\u7684\u503c. TAC 0xff07 TAC(Timer Control). \u8be6\u89c1\u4e0b\u6587\u8bf4\u660e TAC(Timer Control) \u5bc4\u5b58\u5668\u88ab\u533a\u5206\u4e3a\u4e24\u6bb5\u6570\u636e: \u4f4d \u8bf4\u660e Bit 2 \u5b9a\u65f6\u5668\u542f\u7528/\u7981\u7528\u6807\u5fd7(1=\u542f\u52a8, 0=\u7981\u7528) Bit 1-0 \u8bbe\u5b9a\u5b9a\u65f6\u5668\u7684\u9891\u7387 \u9891\u7387\u9009\u62e9: \u6807\u5fd7\u4f4d \u9891\u7387 00 CPU Clock / 1024 (DMG, CGB: 4096 Hz, SGB: ~4194 Hz) 01 CPU Clock / 16 (DMG, CGB: 262144 Hz, SGB: ~268400 Hz) 10 CPU Clock / 64 (DMG, CGB: 65536 Hz, SGB: ~67110 Hz) 11 CPU Clock / 256 (DMG, CGB: 16384 Hz, SGB: ~16780 Hz)","title":"\u5bc4\u5b58\u5668\u63cf\u8ff0"},{"location":"content/gameboy/other/timer/#_3","text":"// Sometimes it's useful to have a timer that interrupts at regular intervals for routines that require periodic or // percise updates. The timer in the GameBoy has a selectable frequency of 4096, 16384, 65536, or 262144 Hertz. // This frequency increments the Timer Counter (TIMA). When it overflows, it generates an interrupt. It is then loaded // with the contents of Timer Modulo (TMA). // // See: http://gbdev.gg8.se/wiki/articles/Timer_and_Divider_Registers use super::intf::{Flag, Intf}; use std::cell::RefCell; use std::rc::Rc; pub struct Timer { // Each time when the timer overflows (ie. when TIMA gets bigger than FFh), then an interrupt is requested by // setting Bit 2 in the IF Register (FF0F). When that interrupt is enabled, then the CPU will execute it by calling // the timer interrupt vector at 0050h. intf: Rc<RefCell<Intf>>, // This register is incremented at rate of 16384Hz (~16779Hz on SGB). Writing any value to this register resets it // to 00h. // Note: The divider is affected by CGB double speed mode, and will increment at 32768Hz in double speed. div: u8, // This timer is incremented by a clock frequency specified by the TAC register ($FF07). When the value overflows // (gets bigger than FFh) then it will be reset to the value specified in TMA (FF06), and an interrupt will be // requested, as described below. tima: u8, // When the TIMA overflows, this data will be loaded. tma: u8, // Bit 2 - Timer Enable // Bits 1-0 - Input Clock Select // 00: CPU Clock / 1024 (DMG, CGB: 4096 Hz, SGB: ~4194 Hz) // 01: CPU Clock / 16 (DMG, CGB: 262144 Hz, SGB: ~268400 Hz) // 10: CPU Clock / 64 (DMG, CGB: 65536 Hz, SGB: ~67110 Hz) // 11: CPU Clock / 256 (DMG, CGB: 16384 Hz, SGB: ~16780 Hz) tac: u8, freq: u32, // Count the number of cycles and set 0 each 256 cycles tmp1: u32, // Count the number of cycles and set 0 each \"freq\" cycles tmp2: u32, } impl Timer { pub fn power_up(intf: Rc<RefCell<Intf>>) -> Self { Timer { intf, div: 0x00, tima: 0x00, tma: 0x00, tac: 0x00, freq: 256, tmp1: 0x00, tmp2: 0x00, } } pub fn get(&self, a: u16) -> u8 { match a { 0xff04 => self.div, 0xff05 => self.tima, 0xff06 => self.tma, 0xff07 => self.tac, _ => panic!(\"Unsupported address\"), } } pub fn set(&mut self, a: u16, v: u8) { match a { 0xff04 => self.div = 0x00, 0xff05 => self.tima = v, 0xff06 => self.tma = v, 0xff07 => { self.tac = v; match v & 0x03 { 0x00 => self.freq = 1024, 0x01 => self.freq = 16, 0x02 => self.freq = 64, 0x03 => self.freq = 256, _ => panic!(\"\"), }; } _ => panic!(\"Unsupported address\"), } } pub fn next(&mut self, cycles: u32) { // Increment div at rate of 16384Hz. Because the clock cycles is 4194304, so div increment every 256 cycles. let c = 256; self.tmp1 += cycles; if self.tmp1 >= c { self.div = self.div.wrapping_add(1); self.tmp1 -= c; } // Increment tima at rate of Clock / freq if (self.tac & 0x04) != 0x00 { self.tmp2 += cycles; while self.tmp2 >= self.freq { self.tima = self.tima.wrapping_add(1); if self.tima == 0x00 { self.tima = self.tma; self.intf.borrow_mut().hi(Flag::Timer); } self.tmp2 -= self.freq; } } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/video/code/","text":"\u4ee3\u7801\u5b9e\u73b0 \u89c6\u9891\u6a21\u5757\u90e8\u5206\u7684\u5b8c\u6574\u4ee3\u7801\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742, \u6bd4\u8f83\u5408\u7406\u7684\u4ee3\u7801\u9605\u8bfb\u987a\u5e8f\u662f\u4ece draw_bg \u548c draw_sprites \u4e24\u4e2a\u51fd\u6570\u5165\u624b, \u5982\u679c\u5728\u4efb\u4f55\u5730\u65b9\u6709\u7591\u60d1, \u968f\u65f6\u7ffb\u9605\u524d\u51e0\u8282\u5185\u5bb9, \u6216\u9605\u8bfb\u8be5\u6280\u672f\u6587\u6863: http://gbdev.gg8.se/wiki/articles/Video_Display . use super::convention::Term; use super::intf::{Flag, Intf}; use super::memory::Memory; use std::cell::RefCell; use std::rc::Rc; #[derive(Eq, PartialEq)] pub enum HdmaMode { // When using this transfer method, all data is transferred at once. The execution of the program is halted until // the transfer has completed. Note that the General Purpose DMA blindly attempts to copy the data, even if the // CD controller is currently accessing VRAM. So General Purpose DMA should be used only if the Display is disabled, // or during V-Blank, or (for rather short blocks) during H-Blank. The execution of the program continues when the // transfer has been completed, and FF55 then contains a value of FFh. Gdma, // The H-Blank DMA transfers 10h bytes of data during each H-Blank, ie. at LY=0-143, no data is transferred during // V-Blank (LY=144-153), but the transfer will then continue at LY=00. The execution of the program is halted // during the separate transfers, but the program execution continues during the 'spaces' between each data block. // Note that the program should not change the Destination VRAM bank (FF4F), or the Source ROM/RAM bank (in case // data is transferred from bankable memory) until the transfer has completed! (The transfer should be paused as // described below while the banks are switched) Reading from Register FF55 returns the remaining length (divided // by 10h, minus 1), a value of 0FFh indicates that the transfer has completed. It is also possible to terminate // an active H-Blank transfer by writing zero to Bit 7 of FF55. In that case reading from FF55 will return how many // $10 \"blocks\" remained (minus 1) in the lower 7 bits, but Bit 7 will be read as \"1\". Stopping the transfer // doesn't set HDMA1-4 to $FF. Hdma, } pub struct Hdma { // These two registers specify the address at which the transfer will read data from. Normally, this should be // either in ROM, SRAM or WRAM, thus either in range 0000-7FF0 or A000-DFF0. [Note : this has yet to be tested on // Echo RAM, OAM, FEXX, IO and HRAM]. Trying to specify a source address in VRAM will cause garbage to be copied. // The four lower bits of this address will be ignored and treated as 0. pub src: u16, // These two registers specify the address within 8000-9FF0 to which the data will be copied. Only bits 12-4 are // respected; others are ignored. The four lower bits of this address will be ignored and treated as 0. pub dst: u16, pub active: bool, pub mode: HdmaMode, pub remain: u8, } impl Hdma { pub fn power_up() -> Self { Self { src: 0x0000, dst: 0x8000, active: false, mode: HdmaMode::Gdma, remain: 0x00, } } } impl Memory for Hdma { fn get(&self, a: u16) -> u8 { match a { 0xff51 => (self.src >> 8) as u8, 0xff52 => self.src as u8, 0xff43 => (self.dst >> 8) as u8, 0xff54 => self.dst as u8, 0xff55 => self.remain | if self.active { 0x00 } else { 0x80 }, _ => panic!(\"\"), } } fn set(&mut self, a: u16, v: u8) { match a { 0xff51 => self.src = (u16::from(v) << 8) | (self.src & 0x00ff), 0xff52 => self.src = (self.src & 0xff00) | u16::from(v & 0xf0), 0xff53 => self.dst = 0x8000 | (u16::from(v & 0x1f) << 8) | (self.dst & 0x00ff), 0xff54 => self.dst = (self.dst & 0xff00) | u16::from(v & 0xf0), 0xff55 => { if self.active && self.mode == HdmaMode::Hdma { if v & 0x80 == 0x00 { self.active = false; }; return; } self.active = true; self.remain = v & 0x7f; self.mode = if v & 0x80 != 0x00 { HdmaMode::Hdma } else { HdmaMode::Gdma }; } _ => panic!(\"\"), }; } } // LCDC is the main LCD Control register. Its bits toggle what elements are displayed on the screen, and how. pub struct Lcdc { data: u8, } #[rustfmt::skip] impl Lcdc { pub fn power_up() -> Self { Self { data: 0b0100_1000 } } // LCDC.7 - LCD Display Enable // This bit controls whether the LCD is on and the PPU is active. Setting it to 0 turns both off, which grants // immediate and full access to VRAM, OAM, etc. fn bit7(&self) -> bool { self.data & 0b1000_0000 != 0x00 } // LCDC.6 - Window Tile Map Display Select // This bit controls which background map the Window uses for rendering. When it's reset, the $9800 tilemap is used, // otherwise it's the $9C00 one. fn bit6(&self) -> bool { self.data & 0b0100_0000 != 0x00 } // LCDC.5 - Window Display Enable // This bit controls whether the window shall be displayed or not. (TODO : what happens when toggling this // mid-scanline ?) This bit is overridden on DMG by bit 0 if that bit is reset. // Note that on CGB models, setting this bit to 0 then back to 1 mid-frame may cause the second write to be ignored. fn bit5(&self) -> bool { self.data & 0b0010_0000 != 0x00 } // LCDC.4 - BG & Window Tile Data Select // This bit controls which addressing mode the BG and Window use to pick tiles. // Sprites aren't affected by this, and will always use $8000 addressing mode. fn bit4(&self) -> bool { self.data & 0b0001_0000 != 0x00 } // LCDC.3 - BG Tile Map Display Select // This bit works similarly to bit 6: if the bit is reset, the BG uses tilemap $9800, otherwise tilemap $9C00. fn bit3(&self) -> bool { self.data & 0b0000_1000 != 0x00 } // LCDC.2 - OBJ Size // This bit controls the sprite size (1 tile or 2 stacked vertically). // Be cautious when changing this mid-frame from 8x8 to 8x16 : \"remnants\" of the sprites intended for 8x8 could // \"leak\" into the 8x16 zone and cause artifacts. fn bit2(&self) -> bool { self.data & 0b0000_0100 != 0x00 } // LCDC.1 - OBJ Display Enable // This bit toggles whether sprites are displayed or not. // This can be toggled mid-frame, for example to avoid sprites being displayed on top of a status bar or text box. // (Note: toggling mid-scanline might have funky results on DMG? Investigation needed.) fn bit1(&self) -> bool { self.data & 0b0000_0010 != 0x00 } // LCDC.0 - BG/Window Display/Priority // LCDC.0 has different meanings depending on Gameboy type and Mode: // Monochrome Gameboy, SGB and CGB in Non-CGB Mode: BG Display // When Bit 0 is cleared, both background and window become blank (white), and the Window Display Bit is ignored in // that case. Only Sprites may still be displayed (if enabled in Bit 1). // CGB in CGB Mode: BG and Window Master Priority // When Bit 0 is cleared, the background and window lose their priority - the sprites will be always displayed on // top of background and window, independently of the priority flags in OAM and BG Map attributes. fn bit0(&self) -> bool { self.data & 0b0000_0001 != 0x00 } } // LCD Status Register. pub struct Stat { // Bit 6 - LYC=LY Coincidence Interrupt (1=Enable) (Read/Write) enable_ly_interrupt: bool, // Bit 5 - Mode 2 OAM Interrupt (1=Enable) (Read/Write) enable_m2_interrupt: bool, // Bit 4 - Mode 1 V-Blank Interrupt (1=Enable) (Read/Write) enable_m1_interrupt: bool, // Bit 3 - Mode 0 H-Blank Interrupt (1=Enable) (Read/Write) enable_m0_interrupt: bool, // Bit 1-0 - Mode Flag (Mode 0-3, see below) (Read Only) // 0: During H-Blank // 1: During V-Blank // 2: During Searching OAM // 3: During Transferring Data to LCD Driver mode: u8, } impl Stat { pub fn power_up() -> Self { Self { enable_ly_interrupt: false, enable_m2_interrupt: false, enable_m1_interrupt: false, enable_m0_interrupt: false, mode: 0x00, } } } // This register is used to address a byte in the CGBs Background Palette Memory. Each two byte in that memory define a // color value. The first 8 bytes define Color 0-3 of Palette 0 (BGP0), and so on for BGP1-7. // Bit 0-5 Index (00-3F) // Bit 7 Auto Increment (0=Disabled, 1=Increment after Writing) // Data can be read/written to/from the specified index address through Register FF69. When the Auto Increment bit is // set then the index is automatically incremented after each <write> to FF69. Auto Increment has no effect when // <reading> from FF69, so the index must be manually incremented in that case. Writing to FF69 during rendering still // causes auto-increment to occur. // Unlike the following, this register can be accessed outside V-Blank and H-Blank. struct Bgpi { i: u8, auto_increment: bool, } impl Bgpi { fn power_up() -> Self { Self { i: 0x00, auto_increment: false, } } fn get(&self) -> u8 { let a = if self.auto_increment { 0x80 } else { 0x00 }; a | self.i } fn set(&mut self, v: u8) { self.auto_increment = v & 0x80 != 0x00; self.i = v & 0x3f; } } pub enum GrayShades { White = 0xff, Light = 0xc0, Dark = 0x60, Black = 0x00, } // Bit7 OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3) // (Used for both BG and Window. BG color 0 is always behind OBJ) // Bit6 Y flip (0=Normal, 1=Vertically mirrored) // Bit5 X flip (0=Normal, 1=Horizontally mirrored) // Bit4 Palette number **Non CGB Mode Only** (0=OBP0, 1=OBP1) // Bit3 Tile VRAM-Bank **CGB Mode Only** (0=Bank 0, 1=Bank 1) // Bit2-0 Palette number **CGB Mode Only** (OBP0-7) struct Attr { priority: bool, yflip: bool, xflip: bool, palette_number_0: usize, bank: bool, palette_number_1: usize, } impl From<u8> for Attr { fn from(u: u8) -> Self { Self { priority: u & (1 << 7) != 0, yflip: u & (1 << 6) != 0, xflip: u & (1 << 5) != 0, palette_number_0: u as usize & (1 << 4), bank: u & (1 << 3) != 0, palette_number_1: u as usize & 0x07, } } } pub const SCREEN_W: usize = 160; pub const SCREEN_H: usize = 144; pub struct Gpu { // Digital image with mode RGB. Size = 144 * 160 * 3. // 3--------- // ---------- // ---------- // ---------- 160 // 144 pub data: [[[u8; 3]; SCREEN_W]; SCREEN_H], pub intf: Rc<RefCell<Intf>>, pub term: Term, pub h_blank: bool, pub v_blank: bool, lcdc: Lcdc, stat: Stat, // Scroll Y (R/W), Scroll X (R/W) // Specifies the position in the 256x256 pixels BG map (32x32 tiles) which is to be displayed at the upper/left LCD // display position. Values in range from 0-255 may be used for X/Y each, the video controller automatically wraps // back to the upper (left) position in BG map when drawing exceeds the lower (right) border of the BG map area. sy: u8, sx: u8, // Window Y Position (R/W), Window X Position minus 7 (R/W) wy: u8, wx: u8, // The LY indicates the vertical line to which the present data is transferred to the LCD Driver. The LY can take // on any value between 0 through 153. The values between 144 and 153 indicate the V-Blank period. Writing will // reset the counter. ly: u8, // The Gameboy permanently compares the value of the LYC and LY registers. When both values are identical, the // coincident bit in the STAT register becomes set, and (if enabled) a STAT interrupt is requested. lc: u8, // This register assigns gray shades to the color numbers of the BG and Window tiles. bgp: u8, // This register assigns gray shades for sprite palette 0. It works exactly as BGP (FF47), except that the lower // two bits aren't used because sprite data 00 is transparent. op0: u8, // This register assigns gray shades for sprite palette 1. It works exactly as BGP (FF47), except that the lower // two bits aren't used because sprite data 00 is transparent. op1: u8, cbgpi: Bgpi, // This register allows to read/write data to the CGBs Background Palette Memory, addressed through Register FF68. // Each color is defined by two bytes (Bit 0-7 in first byte). // Bit 0-4 Red Intensity (00-1F) // Bit 5-9 Green Intensity (00-1F) // Bit 10-14 Blue Intensity (00-1F) // Much like VRAM, data in Palette Memory cannot be read/written during the time when the LCD Controller is // reading from it. (That is when the STAT register indicates Mode 3). Note: All background colors are initialized // as white by the boot ROM, but it's a good idea to initialize at least one color yourself (for example if you // include a soft-reset mechanic). // // Note: Type [[[u8; 3]; 4]; 8] equals with [u8; 64]. cbgpd: [[[u8; 3]; 4]; 8], cobpi: Bgpi, cobpd: [[[u8; 3]; 4]; 8], ram: [u8; 0x4000], ram_bank: usize, // VRAM Sprite Attribute Table (OAM) // Gameboy video controller can display up to 40 sprites either in 8x8 or in 8x16 pixels. Because of a limitation of // hardware, only ten sprites can be displayed per scan line. Sprite patterns have the same format as BG tiles, but // they are taken from the Sprite Pattern Table located at $8000-8FFF and have unsigned numbering. // Sprite attributes reside in the Sprite Attribute Table (OAM - Object Attribute Memory) at $FE00-FE9F. Each of the 40 // entries consists of four bytes with the following meanings: // Byte0 - Y Position // Specifies the sprites vertical position on the screen (minus 16). An off-screen value (for example, Y=0 or // Y>=160) hides the sprite. // // Byte1 - X Position // Specifies the sprites horizontal position on the screen (minus 8). An off-screen value (X=0 or X>=168) hides the // sprite, but the sprite still affects the priority ordering - a better way to hide a sprite is to set its // Y-coordinate off-screen. // // Byte2 - Tile/Pattern Number // Specifies the sprites Tile Number (00-FF). This (unsigned) value selects a tile from memory at 8000h-8FFFh. In // CGB Mode this could be either in VRAM Bank 0 or 1, depending on Bit 3 of the following byte. In 8x16 mode, the // lower bit of the tile number is ignored. IE: the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile // is \"NN OR 01h\". // // Byte3 - Attributes/Flags: // Bit7 OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3) // (Used for both BG and Window. BG color 0 is always behind OBJ) // Bit6 Y flip (0=Normal, 1=Vertically mirrored) // Bit5 X flip (0=Normal, 1=Horizontally mirrored) // Bit4 Palette number **Non CGB Mode Only** (0=OBP0, 1=OBP1) // Bit3 Tile VRAM-Bank **CGB Mode Only** (0=Bank 0, 1=Bank 1) // Bit2-0 Palette number **CGB Mode Only** (OBP0-7) oam: [u8; 0xa0], prio: [(bool, usize); SCREEN_W], // The LCD controller operates on a 222 Hz = 4.194 MHz dot clock. An entire frame is 154 scanlines, 70224 dots, or // 16.74 ms. On scanlines 0 through 143, the LCD controller cycles through modes 2, 3, and 0 once every 456 dots. // Scanlines 144 through 153 are mode 1. dots: u32, } impl Gpu { pub fn power_up(term: Term, intf: Rc<RefCell<Intf>>) -> Self { Self { data: [[[0xffu8; 3]; SCREEN_W]; SCREEN_H], intf, term, h_blank: false, v_blank: false, lcdc: Lcdc::power_up(), stat: Stat::power_up(), sy: 0x00, sx: 0x00, wx: 0x00, wy: 0x00, ly: 0x00, lc: 0x00, bgp: 0x00, op0: 0x00, op1: 0x01, cbgpi: Bgpi::power_up(), cbgpd: [[[0u8; 3]; 4]; 8], cobpi: Bgpi::power_up(), cobpd: [[[0u8; 3]; 4]; 8], ram: [0x00; 0x4000], ram_bank: 0x00, oam: [0x00; 0xa0], prio: [(true, 0); SCREEN_W], dots: 0, } } fn get_ram0(&self, a: u16) -> u8 { self.ram[a as usize - 0x8000] } fn get_ram1(&self, a: u16) -> u8 { self.ram[a as usize - 0x6000] } // This register assigns gray shades to the color numbers of the BG and Window tiles. // Bit 7-6 - Shade for Color Number 3 // Bit 5-4 - Shade for Color Number 2 // Bit 3-2 - Shade for Color Number 1 // Bit 1-0 - Shade for Color Number 0 // The four possible gray shades are: // 0 White // 1 Light gray // 2 Dark gray // 3 Black fn get_gray_shades(v: u8, i: usize) -> GrayShades { match v >> (2 * i) & 0x03 { 0x00 => GrayShades::White, 0x01 => GrayShades::Light, 0x02 => GrayShades::Dark, _ => GrayShades::Black, } } // Grey scale. fn set_gre(&mut self, x: usize, g: u8) { self.data[self.ly as usize][x] = [g, g, g]; } // When developing graphics on PCs, note that the RGB values will have different appearance on CGB displays as on // VGA/HDMI monitors calibrated to sRGB color. Because the GBC is not lit, the highest intensity will produce Light // Gray color rather than White. The intensities are not linear; the values 10h-1Fh will all appear very bright, // while medium and darker colors are ranged at 00h-0Fh. // The CGB display's pigments aren't perfectly saturated. This means the colors mix quite oddly; increasing // intensity of only one R,G,B color will also influence the other two R,G,B colors. For example, a color setting // of 03EFh (Blue=0, Green=1Fh, Red=0Fh) will appear as Neon Green on VGA displays, but on the CGB it'll produce a // decently washed out Yellow. See image on the right. fn set_rgb(&mut self, x: usize, r: u8, g: u8, b: u8) { assert!(r <= 0x1f); assert!(g <= 0x1f); assert!(b <= 0x1f); let r = u32::from(r); let g = u32::from(g); let b = u32::from(b); let lr = ((r * 13 + g * 2 + b) >> 1) as u8; let lg = ((g * 3 + b) << 1) as u8; let lb = ((r * 3 + g * 2 + b * 11) >> 1) as u8; self.data[self.ly as usize][x] = [lr, lg, lb]; } pub fn next(&mut self, cycles: u32) { if !self.lcdc.bit7() { return; } self.h_blank = false; // The LCD controller operates on a 222 Hz = 4.194 MHz dot clock. An entire frame is 154 scanlines, 70224 dots, // or 16.74 ms. On scanlines 0 through 143, the LCD controller cycles through modes 2, 3, and 0 once every 456 // dots. Scanlines 144 through 153 are mode 1. // // 1 scanline = 456 dots // // The following are typical when the display is enabled: // Mode 2 2_____2_____2_____2_____2_____2___________________2____ // Mode 3 _33____33____33____33____33____33__________________3___ // Mode 0 ___000___000___000___000___000___000________________000 // Mode 1 ____________________________________11111111111111_____ if cycles == 0 { return; } let c = (cycles - 1) / 80 + 1; for i in 0..c { if i == (c - 1) { self.dots += cycles % 80 } else { self.dots += 80 } let d = self.dots; self.dots %= 456; if d != self.dots { self.ly = (self.ly + 1) % 154; if self.stat.enable_ly_interrupt && self.ly == self.lc { self.intf.borrow_mut().hi(Flag::LCDStat); } } if self.ly >= 144 { if self.stat.mode == 1 { continue; } self.stat.mode = 1; self.v_blank = true; self.intf.borrow_mut().hi(Flag::VBlank); if self.stat.enable_m1_interrupt { self.intf.borrow_mut().hi(Flag::LCDStat); } } else if self.dots <= 80 { if self.stat.mode == 2 { continue; } self.stat.mode = 2; if self.stat.enable_m2_interrupt { self.intf.borrow_mut().hi(Flag::LCDStat); } } else if self.dots <= (80 + 172) { self.stat.mode = 3; } else { if self.stat.mode == 0 { continue; } self.stat.mode = 0; self.h_blank = true; if self.stat.enable_m0_interrupt { self.intf.borrow_mut().hi(Flag::LCDStat); } // Render scanline if self.term == Term::GBC || self.lcdc.bit0() { self.draw_bg(); } if self.lcdc.bit1() { self.draw_sprites(); } } } } fn draw_bg(&mut self) { let show_window = self.lcdc.bit5() && self.wy <= self.ly; let tile_base = if self.lcdc.bit4() { 0x8000 } else { 0x8800 }; let wx = self.wx.wrapping_sub(7); let py = if show_window { self.ly.wrapping_sub(self.wy) } else { self.sy.wrapping_add(self.ly) }; let ty = (u16::from(py) >> 3) & 31; for x in 0..SCREEN_W { let px = if show_window && x as u8 >= wx { x as u8 - wx } else { self.sx.wrapping_add(x as u8) }; let tx = (u16::from(px) >> 3) & 31; // Background memory base addr. let bg_base = if show_window && x as u8 >= wx { if self.lcdc.bit6() { 0x9c00 } else { 0x9800 } } else if self.lcdc.bit3() { 0x9c00 } else { 0x9800 }; // Tile data // Each tile is sized 8x8 pixels and has a color depth of 4 colors/gray shades. // Each tile occupies 16 bytes, where each 2 bytes represent a line: // Byte 0-1 First Line (Upper 8 pixels) // Byte 2-3 Next Line // etc. let tile_addr = bg_base + ty * 32 + tx; let tile_number = self.get_ram0(tile_addr); let tile_offset = if self.lcdc.bit4() { i16::from(tile_number) } else { i16::from(tile_number as i8) + 128 } as u16 * 16; let tile_location = tile_base + tile_offset; let tile_attr = Attr::from(self.get_ram1(tile_addr)); let tile_y = if tile_attr.yflip { 7 - py % 8 } else { py % 8 }; let tile_y_data: [u8; 2] = if self.term == Term::GBC && tile_attr.bank { let a = self.get_ram1(tile_location + u16::from(tile_y * 2)); let b = self.get_ram1(tile_location + u16::from(tile_y * 2) + 1); [a, b] } else { let a = self.get_ram0(tile_location + u16::from(tile_y * 2)); let b = self.get_ram0(tile_location + u16::from(tile_y * 2) + 1); [a, b] }; let tile_x = if tile_attr.xflip { 7 - px % 8 } else { px % 8 }; // Palettes let color_l = if tile_y_data[0] & (0x80 >> tile_x) != 0 { 1 } else { 0 }; let color_h = if tile_y_data[1] & (0x80 >> tile_x) != 0 { 2 } else { 0 }; let color = color_h | color_l; // Priority self.prio[x] = (tile_attr.priority, color); if self.term == Term::GBC { let r = self.cbgpd[tile_attr.palette_number_1][color][0]; let g = self.cbgpd[tile_attr.palette_number_1][color][1]; let b = self.cbgpd[tile_attr.palette_number_1][color][2]; self.set_rgb(x as usize, r, g, b); } else { let color = Self::get_gray_shades(self.bgp, color) as u8; self.set_gre(x, color); } } } // Gameboy video controller can display up to 40 sprites either in 8x8 or in 8x16 pixels. Because of a limitation // of hardware, only ten sprites can be displayed per scan line. Sprite patterns have the same format as BG tiles, // but they are taken from the Sprite Pattern Table located at $8000-8FFF and have unsigned numbering. // // Sprite attributes reside in the Sprite Attribute Table (OAM - Object Attribute Memory) at $FE00-FE9F. Each of // the 40 entries consists of four bytes with the following meanings: // Byte0 - Y Position // Specifies the sprites vertical position on the screen (minus 16). An off-screen value (for example, Y=0 or // Y>=160) hides the sprite. // // Byte1 - X Position // Specifies the sprites horizontal position on the screen (minus 8). An off-screen value (X=0 or X>=168) hides // the sprite, but the sprite still affects the priority ordering - a better way to hide a sprite is to set its // Y-coordinate off-screen. // // Byte2 - Tile/Pattern Number // Specifies the sprites Tile Number (00-FF). This (unsigned) value selects a tile from memory at 8000h-8FFFh. In // CGB Mode this could be either in VRAM Bank 0 or 1, depending on Bit 3 of the following byte. In 8x16 mode, the // lower bit of the tile number is ignored. IE: the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is // \"NN OR 01h\". // // Byte3 - Attributes/Flags: // Bit7 OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3) // (Used for both BG and Window. BG color 0 is always behind OBJ) // Bit6 Y flip (0=Normal, 1=Vertically mirrored) // Bit5 X flip (0=Normal, 1=Horizontally mirrored) // Bit4 Palette number **Non CGB Mode Only** (0=OBP0, 1=OBP1) // Bit3 Tile VRAM-Bank **CGB Mode Only** (0=Bank 0, 1=Bank 1) // Bit2-0 Palette number **CGB Mode Only** (OBP0-7) fn draw_sprites(&mut self) { // Sprite tile size 8x8 or 8x16(2 stacked vertically). let sprite_size = if self.lcdc.bit2() { 16 } else { 8 }; for i in 0..40 { let sprite_addr = 0xfe00 + (i as u16) * 4; let py = self.get(sprite_addr).wrapping_sub(16); let px = self.get(sprite_addr + 1).wrapping_sub(8); let tile_number = self.get(sprite_addr + 2) & if self.lcdc.bit2() { 0xfe } else { 0xff }; let tile_attr = Attr::from(self.get(sprite_addr + 3)); // If this is true the scanline is out of the area we care about if py <= 0xff - sprite_size + 1 { if self.ly < py || self.ly > py + sprite_size - 1 { continue; } } else { if self.ly > py.wrapping_add(sprite_size) - 1 { continue; } } if px >= (SCREEN_W as u8) && px <= (0xff - 7) { continue; } let tile_y = if tile_attr.yflip { sprite_size - 1 - self.ly.wrapping_sub(py) } else { self.ly.wrapping_sub(py) }; let tile_y_addr = 0x8000u16 + u16::from(tile_number) * 16 + u16::from(tile_y) * 2; let tile_y_data: [u8; 2] = if self.term == Term::GBC && tile_attr.bank { let b1 = self.get_ram1(tile_y_addr); let b2 = self.get_ram1(tile_y_addr + 1); [b1, b2] } else { let b1 = self.get_ram0(tile_y_addr); let b2 = self.get_ram0(tile_y_addr + 1); [b1, b2] }; for x in 0..8 { if px.wrapping_add(x) >= (SCREEN_W as u8) { continue; } let tile_x = if tile_attr.xflip { 7 - x } else { x }; // Palettes let color_l = if tile_y_data[0] & (0x80 >> tile_x) != 0 { 1 } else { 0 }; let color_h = if tile_y_data[1] & (0x80 >> tile_x) != 0 { 2 } else { 0 }; let color = color_h | color_l; if color == 0 { continue; } // Confirm the priority of background and sprite. let prio = self.prio[px.wrapping_add(x) as usize]; let skip = if self.term == Term::GBC && !self.lcdc.bit0() { prio.1 == 0 } else if prio.0 { prio.1 != 0 } else { tile_attr.priority && prio.1 != 0 }; if skip { continue; } if self.term == Term::GBC { let r = self.cobpd[tile_attr.palette_number_1][color][0]; let g = self.cobpd[tile_attr.palette_number_1][color][1]; let b = self.cobpd[tile_attr.palette_number_1][color][2]; self.set_rgb(px.wrapping_add(x) as usize, r, g, b); } else { let color = if tile_attr.palette_number_0 == 1 { Self::get_gray_shades(self.op1, color) as u8 } else { Self::get_gray_shades(self.op0, color) as u8 }; self.set_gre(px.wrapping_add(x) as usize, color); } } } } } impl Memory for Gpu { fn get(&self, a: u16) -> u8 { match a { 0x8000...0x9fff => self.ram[self.ram_bank * 0x2000 + a as usize - 0x8000], 0xfe00...0xfe9f => self.oam[a as usize - 0xfe00], 0xff40 => self.lcdc.data, 0xff41 => { let bit6 = if self.stat.enable_ly_interrupt { 0x40 } else { 0x00 }; let bit5 = if self.stat.enable_m2_interrupt { 0x20 } else { 0x00 }; let bit4 = if self.stat.enable_m1_interrupt { 0x10 } else { 0x00 }; let bit3 = if self.stat.enable_m0_interrupt { 0x08 } else { 0x00 }; let bit2 = if self.ly == self.lc { 0x04 } else { 0x00 }; bit6 | bit5 | bit4 | bit3 | bit2 | self.stat.mode } 0xff42 => self.sy, 0xff43 => self.sx, 0xff44 => self.ly, 0xff45 => self.lc, 0xff47 => self.bgp, 0xff48 => self.op0, 0xff49 => self.op1, 0xff4a => self.wy, 0xff4b => self.wx, 0xff4f => 0xfe | self.ram_bank as u8, 0xff68 => self.cbgpi.get(), 0xff69 => { let r = self.cbgpi.i as usize >> 3; let c = self.cbgpi.i as usize >> 1 & 0x3; if self.cbgpi.i & 0x01 == 0x00 { let a = self.cbgpd[r][c][0]; let b = self.cbgpd[r][c][1] << 5; a | b } else { let a = self.cbgpd[r][c][1] >> 3; let b = self.cbgpd[r][c][2] << 2; a | b } } 0xff6a => self.cobpi.get(), 0xff6b => { let r = self.cobpi.i as usize >> 3; let c = self.cobpi.i as usize >> 1 & 0x3; if self.cobpi.i & 0x01 == 0x00 { let a = self.cobpd[r][c][0]; let b = self.cobpd[r][c][1] << 5; a | b } else { let a = self.cobpd[r][c][1] >> 3; let b = self.cobpd[r][c][2] << 2; a | b } } _ => panic!(\"\"), } } fn set(&mut self, a: u16, v: u8) { match a { 0x8000...0x9fff => self.ram[self.ram_bank * 0x2000 + a as usize - 0x8000] = v, 0xfe00...0xfe9f => self.oam[a as usize - 0xfe00] = v, 0xff40 => { self.lcdc.data = v; if !self.lcdc.bit7() { self.dots = 0; self.ly = 0; self.stat.mode = 0; // Clean screen. self.data = [[[0xffu8; 3]; SCREEN_W]; SCREEN_H]; self.v_blank = true; } } 0xff41 => { self.stat.enable_ly_interrupt = v & 0x40 != 0x00; self.stat.enable_m2_interrupt = v & 0x20 != 0x00; self.stat.enable_m1_interrupt = v & 0x10 != 0x00; self.stat.enable_m0_interrupt = v & 0x08 != 0x00; } 0xff42 => self.sy = v, 0xff43 => self.sx = v, 0xff44 => {} 0xff45 => self.lc = v, 0xff47 => self.bgp = v, 0xff48 => self.op0 = v, 0xff49 => self.op1 = v, 0xff4a => self.wy = v, 0xff4b => self.wx = v, 0xff4f => self.ram_bank = (v & 0x01) as usize, 0xff68 => self.cbgpi.set(v), 0xff69 => { let r = self.cbgpi.i as usize >> 3; let c = self.cbgpi.i as usize >> 1 & 0x03; if self.cbgpi.i & 0x01 == 0x00 { self.cbgpd[r][c][0] = v & 0x1f; self.cbgpd[r][c][1] = (self.cbgpd[r][c][1] & 0x18) | (v >> 5); } else { self.cbgpd[r][c][1] = (self.cbgpd[r][c][1] & 0x07) | ((v & 0x03) << 3); self.cbgpd[r][c][2] = (v >> 2) & 0x1f; } if self.cbgpi.auto_increment { self.cbgpi.i += 0x01; self.cbgpi.i &= 0x3f; } } 0xff6a => self.cobpi.set(v), 0xff6b => { let r = self.cobpi.i as usize >> 3; let c = self.cobpi.i as usize >> 1 & 0x03; if self.cobpi.i & 0x01 == 0x00 { self.cobpd[r][c][0] = v & 0x1f; self.cobpd[r][c][1] = (self.cobpd[r][c][1] & 0x18) | (v >> 5); } else { self.cobpd[r][c][1] = (self.cobpd[r][c][1] & 0x07) | ((v & 0x03) << 3); self.cobpd[r][c][2] = (v >> 2) & 0x1f; } if self.cobpi.auto_increment { self.cobpi.i += 0x01; self.cobpi.i &= 0x3f; } } _ => panic!(\"\"), } } } \u5c06\u7f16\u5199\u53f7\u7684 GPU \u6a21\u5757\u5d4c\u5165\u5185\u5b58\u7ba1\u7406\u6a21\u5757, \u540c\u65f6\u7531\u4e8e DMA \u529f\u80fd\u6d89\u53ca\u4e0d\u540c\u6a21\u5757\u4e4b\u95f4\u7684\u5185\u5b58\u8bfb\u5199, \u56e0\u6b64\u9700\u8981\u5728\u5185\u5b58\u7ba1\u7406\u6a21\u5757\u4e2d\u5b9e\u73b0 DMA \u903b\u8f91. pub struct Mmunit { pub gpu: Gpu, hdma: Hdma, hram: [u8; 0x7f], wram: [u8; 0x8000], wram_bank: usize, } impl Mmunit { fn run_dma(&mut self) -> u32 { if !self.hdma.active { return 0; } match self.hdma.mode { HdmaMode::Gdma => { let len = u32::from(self.hdma.remain) + 1; for _ in 0..len { self.run_dma_hrampart(); } self.hdma.active = false; len * 8 } HdmaMode::Hdma => { if !self.gpu.h_blank { return 0; } self.run_dma_hrampart(); if self.hdma.remain == 0x7f { self.hdma.active = false; } 8 } } } fn run_dma_hrampart(&mut self) { let mmu_src = self.hdma.src; for i in 0..0x10 { let b: u8 = self.get(mmu_src + i); self.gpu.set(self.hdma.dst + i, b); } self.hdma.src += 0x10; self.hdma.dst += 0x10; if self.hdma.remain == 0 { self.hdma.remain = 0x7f; } else { self.hdma.remain -= 1; } } } impl Memory for Mmunit { fn get(&self, a: u16) -> u8 { match a { 0x8000...0x9fff => self.gpu.get(a), 0xc000...0xcfff => self.wram[a as usize - 0xc000], 0xd000...0xdfff => self.wram[a as usize - 0xd000 + 0x1000 * self.wram_bank], 0xe000...0xefff => self.wram[a as usize - 0xe000], 0xf000...0xfdff => self.wram[a as usize - 0xf000 + 0x1000 * self.wram_bank], 0xfe00...0xfe9f => self.gpu.get(a), 0xff40...0xff45 | 0xff47...0xff4b | 0xff4f => self.gpu.get(a), 0xff51...0xff55 => self.hdma.get(a), 0xff68...0xff6b => self.gpu.get(a), 0xff70 => self.wram_bank as u8, 0xff80...0xfffe => self.hram[a as usize - 0xff80], } } fn set(&mut self, a: u16, v: u8) { match a { 0x8000...0x9fff => self.gpu.set(a, v), 0xa000...0xbfff => self.cartridge.set(a, v), 0xc000...0xcfff => self.wram[a as usize - 0xc000] = v, 0xd000...0xdfff => self.wram[a as usize - 0xd000 + 0x1000 * self.wram_bank] = v, 0xe000...0xefff => self.wram[a as usize - 0xe000] = v, 0xf000...0xfdff => self.wram[a as usize - 0xf000 + 0x1000 * self.wram_bank] = v, 0xfe00...0xfe9f => self.gpu.set(a, v), 0xff46 => { // Writing to this register launches a DMA transfer from ROM or RAM to OAM memory (sprite attribute // table). // See: http://gbdev.gg8.se/wiki/articles/Video_Display#FF46_-_DMA_-_DMA_Transfer_and_Start_Address_.28R.2FW.29 assert!(v <= 0xf1); let base = u16::from(v) << 8; for i in 0..0xa0 { let b = self.get(base + i); self.set(0xfe00 + i, b); } } 0xff40...0xff45 | 0xff47...0xff4b | 0xff4f => self.gpu.set(a, v), 0xff51...0xff55 => self.hdma.set(a, v), 0xff68...0xff6b => self.gpu.set(a, v), 0xff70 => { self.wram_bank = match v & 0x7 { 0 => 1, n => n as usize, }; } 0xff80...0xfffe => self.hram[a as usize - 0xff80] = v, } } }","title":"GB-\u89c6\u9891-\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/video/code/#_1","text":"\u89c6\u9891\u6a21\u5757\u90e8\u5206\u7684\u5b8c\u6574\u4ee3\u7801\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742, \u6bd4\u8f83\u5408\u7406\u7684\u4ee3\u7801\u9605\u8bfb\u987a\u5e8f\u662f\u4ece draw_bg \u548c draw_sprites \u4e24\u4e2a\u51fd\u6570\u5165\u624b, \u5982\u679c\u5728\u4efb\u4f55\u5730\u65b9\u6709\u7591\u60d1, \u968f\u65f6\u7ffb\u9605\u524d\u51e0\u8282\u5185\u5bb9, \u6216\u9605\u8bfb\u8be5\u6280\u672f\u6587\u6863: http://gbdev.gg8.se/wiki/articles/Video_Display . use super::convention::Term; use super::intf::{Flag, Intf}; use super::memory::Memory; use std::cell::RefCell; use std::rc::Rc; #[derive(Eq, PartialEq)] pub enum HdmaMode { // When using this transfer method, all data is transferred at once. The execution of the program is halted until // the transfer has completed. Note that the General Purpose DMA blindly attempts to copy the data, even if the // CD controller is currently accessing VRAM. So General Purpose DMA should be used only if the Display is disabled, // or during V-Blank, or (for rather short blocks) during H-Blank. The execution of the program continues when the // transfer has been completed, and FF55 then contains a value of FFh. Gdma, // The H-Blank DMA transfers 10h bytes of data during each H-Blank, ie. at LY=0-143, no data is transferred during // V-Blank (LY=144-153), but the transfer will then continue at LY=00. The execution of the program is halted // during the separate transfers, but the program execution continues during the 'spaces' between each data block. // Note that the program should not change the Destination VRAM bank (FF4F), or the Source ROM/RAM bank (in case // data is transferred from bankable memory) until the transfer has completed! (The transfer should be paused as // described below while the banks are switched) Reading from Register FF55 returns the remaining length (divided // by 10h, minus 1), a value of 0FFh indicates that the transfer has completed. It is also possible to terminate // an active H-Blank transfer by writing zero to Bit 7 of FF55. In that case reading from FF55 will return how many // $10 \"blocks\" remained (minus 1) in the lower 7 bits, but Bit 7 will be read as \"1\". Stopping the transfer // doesn't set HDMA1-4 to $FF. Hdma, } pub struct Hdma { // These two registers specify the address at which the transfer will read data from. Normally, this should be // either in ROM, SRAM or WRAM, thus either in range 0000-7FF0 or A000-DFF0. [Note : this has yet to be tested on // Echo RAM, OAM, FEXX, IO and HRAM]. Trying to specify a source address in VRAM will cause garbage to be copied. // The four lower bits of this address will be ignored and treated as 0. pub src: u16, // These two registers specify the address within 8000-9FF0 to which the data will be copied. Only bits 12-4 are // respected; others are ignored. The four lower bits of this address will be ignored and treated as 0. pub dst: u16, pub active: bool, pub mode: HdmaMode, pub remain: u8, } impl Hdma { pub fn power_up() -> Self { Self { src: 0x0000, dst: 0x8000, active: false, mode: HdmaMode::Gdma, remain: 0x00, } } } impl Memory for Hdma { fn get(&self, a: u16) -> u8 { match a { 0xff51 => (self.src >> 8) as u8, 0xff52 => self.src as u8, 0xff43 => (self.dst >> 8) as u8, 0xff54 => self.dst as u8, 0xff55 => self.remain | if self.active { 0x00 } else { 0x80 }, _ => panic!(\"\"), } } fn set(&mut self, a: u16, v: u8) { match a { 0xff51 => self.src = (u16::from(v) << 8) | (self.src & 0x00ff), 0xff52 => self.src = (self.src & 0xff00) | u16::from(v & 0xf0), 0xff53 => self.dst = 0x8000 | (u16::from(v & 0x1f) << 8) | (self.dst & 0x00ff), 0xff54 => self.dst = (self.dst & 0xff00) | u16::from(v & 0xf0), 0xff55 => { if self.active && self.mode == HdmaMode::Hdma { if v & 0x80 == 0x00 { self.active = false; }; return; } self.active = true; self.remain = v & 0x7f; self.mode = if v & 0x80 != 0x00 { HdmaMode::Hdma } else { HdmaMode::Gdma }; } _ => panic!(\"\"), }; } } // LCDC is the main LCD Control register. Its bits toggle what elements are displayed on the screen, and how. pub struct Lcdc { data: u8, } #[rustfmt::skip] impl Lcdc { pub fn power_up() -> Self { Self { data: 0b0100_1000 } } // LCDC.7 - LCD Display Enable // This bit controls whether the LCD is on and the PPU is active. Setting it to 0 turns both off, which grants // immediate and full access to VRAM, OAM, etc. fn bit7(&self) -> bool { self.data & 0b1000_0000 != 0x00 } // LCDC.6 - Window Tile Map Display Select // This bit controls which background map the Window uses for rendering. When it's reset, the $9800 tilemap is used, // otherwise it's the $9C00 one. fn bit6(&self) -> bool { self.data & 0b0100_0000 != 0x00 } // LCDC.5 - Window Display Enable // This bit controls whether the window shall be displayed or not. (TODO : what happens when toggling this // mid-scanline ?) This bit is overridden on DMG by bit 0 if that bit is reset. // Note that on CGB models, setting this bit to 0 then back to 1 mid-frame may cause the second write to be ignored. fn bit5(&self) -> bool { self.data & 0b0010_0000 != 0x00 } // LCDC.4 - BG & Window Tile Data Select // This bit controls which addressing mode the BG and Window use to pick tiles. // Sprites aren't affected by this, and will always use $8000 addressing mode. fn bit4(&self) -> bool { self.data & 0b0001_0000 != 0x00 } // LCDC.3 - BG Tile Map Display Select // This bit works similarly to bit 6: if the bit is reset, the BG uses tilemap $9800, otherwise tilemap $9C00. fn bit3(&self) -> bool { self.data & 0b0000_1000 != 0x00 } // LCDC.2 - OBJ Size // This bit controls the sprite size (1 tile or 2 stacked vertically). // Be cautious when changing this mid-frame from 8x8 to 8x16 : \"remnants\" of the sprites intended for 8x8 could // \"leak\" into the 8x16 zone and cause artifacts. fn bit2(&self) -> bool { self.data & 0b0000_0100 != 0x00 } // LCDC.1 - OBJ Display Enable // This bit toggles whether sprites are displayed or not. // This can be toggled mid-frame, for example to avoid sprites being displayed on top of a status bar or text box. // (Note: toggling mid-scanline might have funky results on DMG? Investigation needed.) fn bit1(&self) -> bool { self.data & 0b0000_0010 != 0x00 } // LCDC.0 - BG/Window Display/Priority // LCDC.0 has different meanings depending on Gameboy type and Mode: // Monochrome Gameboy, SGB and CGB in Non-CGB Mode: BG Display // When Bit 0 is cleared, both background and window become blank (white), and the Window Display Bit is ignored in // that case. Only Sprites may still be displayed (if enabled in Bit 1). // CGB in CGB Mode: BG and Window Master Priority // When Bit 0 is cleared, the background and window lose their priority - the sprites will be always displayed on // top of background and window, independently of the priority flags in OAM and BG Map attributes. fn bit0(&self) -> bool { self.data & 0b0000_0001 != 0x00 } } // LCD Status Register. pub struct Stat { // Bit 6 - LYC=LY Coincidence Interrupt (1=Enable) (Read/Write) enable_ly_interrupt: bool, // Bit 5 - Mode 2 OAM Interrupt (1=Enable) (Read/Write) enable_m2_interrupt: bool, // Bit 4 - Mode 1 V-Blank Interrupt (1=Enable) (Read/Write) enable_m1_interrupt: bool, // Bit 3 - Mode 0 H-Blank Interrupt (1=Enable) (Read/Write) enable_m0_interrupt: bool, // Bit 1-0 - Mode Flag (Mode 0-3, see below) (Read Only) // 0: During H-Blank // 1: During V-Blank // 2: During Searching OAM // 3: During Transferring Data to LCD Driver mode: u8, } impl Stat { pub fn power_up() -> Self { Self { enable_ly_interrupt: false, enable_m2_interrupt: false, enable_m1_interrupt: false, enable_m0_interrupt: false, mode: 0x00, } } } // This register is used to address a byte in the CGBs Background Palette Memory. Each two byte in that memory define a // color value. The first 8 bytes define Color 0-3 of Palette 0 (BGP0), and so on for BGP1-7. // Bit 0-5 Index (00-3F) // Bit 7 Auto Increment (0=Disabled, 1=Increment after Writing) // Data can be read/written to/from the specified index address through Register FF69. When the Auto Increment bit is // set then the index is automatically incremented after each <write> to FF69. Auto Increment has no effect when // <reading> from FF69, so the index must be manually incremented in that case. Writing to FF69 during rendering still // causes auto-increment to occur. // Unlike the following, this register can be accessed outside V-Blank and H-Blank. struct Bgpi { i: u8, auto_increment: bool, } impl Bgpi { fn power_up() -> Self { Self { i: 0x00, auto_increment: false, } } fn get(&self) -> u8 { let a = if self.auto_increment { 0x80 } else { 0x00 }; a | self.i } fn set(&mut self, v: u8) { self.auto_increment = v & 0x80 != 0x00; self.i = v & 0x3f; } } pub enum GrayShades { White = 0xff, Light = 0xc0, Dark = 0x60, Black = 0x00, } // Bit7 OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3) // (Used for both BG and Window. BG color 0 is always behind OBJ) // Bit6 Y flip (0=Normal, 1=Vertically mirrored) // Bit5 X flip (0=Normal, 1=Horizontally mirrored) // Bit4 Palette number **Non CGB Mode Only** (0=OBP0, 1=OBP1) // Bit3 Tile VRAM-Bank **CGB Mode Only** (0=Bank 0, 1=Bank 1) // Bit2-0 Palette number **CGB Mode Only** (OBP0-7) struct Attr { priority: bool, yflip: bool, xflip: bool, palette_number_0: usize, bank: bool, palette_number_1: usize, } impl From<u8> for Attr { fn from(u: u8) -> Self { Self { priority: u & (1 << 7) != 0, yflip: u & (1 << 6) != 0, xflip: u & (1 << 5) != 0, palette_number_0: u as usize & (1 << 4), bank: u & (1 << 3) != 0, palette_number_1: u as usize & 0x07, } } } pub const SCREEN_W: usize = 160; pub const SCREEN_H: usize = 144; pub struct Gpu { // Digital image with mode RGB. Size = 144 * 160 * 3. // 3--------- // ---------- // ---------- // ---------- 160 // 144 pub data: [[[u8; 3]; SCREEN_W]; SCREEN_H], pub intf: Rc<RefCell<Intf>>, pub term: Term, pub h_blank: bool, pub v_blank: bool, lcdc: Lcdc, stat: Stat, // Scroll Y (R/W), Scroll X (R/W) // Specifies the position in the 256x256 pixels BG map (32x32 tiles) which is to be displayed at the upper/left LCD // display position. Values in range from 0-255 may be used for X/Y each, the video controller automatically wraps // back to the upper (left) position in BG map when drawing exceeds the lower (right) border of the BG map area. sy: u8, sx: u8, // Window Y Position (R/W), Window X Position minus 7 (R/W) wy: u8, wx: u8, // The LY indicates the vertical line to which the present data is transferred to the LCD Driver. The LY can take // on any value between 0 through 153. The values between 144 and 153 indicate the V-Blank period. Writing will // reset the counter. ly: u8, // The Gameboy permanently compares the value of the LYC and LY registers. When both values are identical, the // coincident bit in the STAT register becomes set, and (if enabled) a STAT interrupt is requested. lc: u8, // This register assigns gray shades to the color numbers of the BG and Window tiles. bgp: u8, // This register assigns gray shades for sprite palette 0. It works exactly as BGP (FF47), except that the lower // two bits aren't used because sprite data 00 is transparent. op0: u8, // This register assigns gray shades for sprite palette 1. It works exactly as BGP (FF47), except that the lower // two bits aren't used because sprite data 00 is transparent. op1: u8, cbgpi: Bgpi, // This register allows to read/write data to the CGBs Background Palette Memory, addressed through Register FF68. // Each color is defined by two bytes (Bit 0-7 in first byte). // Bit 0-4 Red Intensity (00-1F) // Bit 5-9 Green Intensity (00-1F) // Bit 10-14 Blue Intensity (00-1F) // Much like VRAM, data in Palette Memory cannot be read/written during the time when the LCD Controller is // reading from it. (That is when the STAT register indicates Mode 3). Note: All background colors are initialized // as white by the boot ROM, but it's a good idea to initialize at least one color yourself (for example if you // include a soft-reset mechanic). // // Note: Type [[[u8; 3]; 4]; 8] equals with [u8; 64]. cbgpd: [[[u8; 3]; 4]; 8], cobpi: Bgpi, cobpd: [[[u8; 3]; 4]; 8], ram: [u8; 0x4000], ram_bank: usize, // VRAM Sprite Attribute Table (OAM) // Gameboy video controller can display up to 40 sprites either in 8x8 or in 8x16 pixels. Because of a limitation of // hardware, only ten sprites can be displayed per scan line. Sprite patterns have the same format as BG tiles, but // they are taken from the Sprite Pattern Table located at $8000-8FFF and have unsigned numbering. // Sprite attributes reside in the Sprite Attribute Table (OAM - Object Attribute Memory) at $FE00-FE9F. Each of the 40 // entries consists of four bytes with the following meanings: // Byte0 - Y Position // Specifies the sprites vertical position on the screen (minus 16). An off-screen value (for example, Y=0 or // Y>=160) hides the sprite. // // Byte1 - X Position // Specifies the sprites horizontal position on the screen (minus 8). An off-screen value (X=0 or X>=168) hides the // sprite, but the sprite still affects the priority ordering - a better way to hide a sprite is to set its // Y-coordinate off-screen. // // Byte2 - Tile/Pattern Number // Specifies the sprites Tile Number (00-FF). This (unsigned) value selects a tile from memory at 8000h-8FFFh. In // CGB Mode this could be either in VRAM Bank 0 or 1, depending on Bit 3 of the following byte. In 8x16 mode, the // lower bit of the tile number is ignored. IE: the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile // is \"NN OR 01h\". // // Byte3 - Attributes/Flags: // Bit7 OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3) // (Used for both BG and Window. BG color 0 is always behind OBJ) // Bit6 Y flip (0=Normal, 1=Vertically mirrored) // Bit5 X flip (0=Normal, 1=Horizontally mirrored) // Bit4 Palette number **Non CGB Mode Only** (0=OBP0, 1=OBP1) // Bit3 Tile VRAM-Bank **CGB Mode Only** (0=Bank 0, 1=Bank 1) // Bit2-0 Palette number **CGB Mode Only** (OBP0-7) oam: [u8; 0xa0], prio: [(bool, usize); SCREEN_W], // The LCD controller operates on a 222 Hz = 4.194 MHz dot clock. An entire frame is 154 scanlines, 70224 dots, or // 16.74 ms. On scanlines 0 through 143, the LCD controller cycles through modes 2, 3, and 0 once every 456 dots. // Scanlines 144 through 153 are mode 1. dots: u32, } impl Gpu { pub fn power_up(term: Term, intf: Rc<RefCell<Intf>>) -> Self { Self { data: [[[0xffu8; 3]; SCREEN_W]; SCREEN_H], intf, term, h_blank: false, v_blank: false, lcdc: Lcdc::power_up(), stat: Stat::power_up(), sy: 0x00, sx: 0x00, wx: 0x00, wy: 0x00, ly: 0x00, lc: 0x00, bgp: 0x00, op0: 0x00, op1: 0x01, cbgpi: Bgpi::power_up(), cbgpd: [[[0u8; 3]; 4]; 8], cobpi: Bgpi::power_up(), cobpd: [[[0u8; 3]; 4]; 8], ram: [0x00; 0x4000], ram_bank: 0x00, oam: [0x00; 0xa0], prio: [(true, 0); SCREEN_W], dots: 0, } } fn get_ram0(&self, a: u16) -> u8 { self.ram[a as usize - 0x8000] } fn get_ram1(&self, a: u16) -> u8 { self.ram[a as usize - 0x6000] } // This register assigns gray shades to the color numbers of the BG and Window tiles. // Bit 7-6 - Shade for Color Number 3 // Bit 5-4 - Shade for Color Number 2 // Bit 3-2 - Shade for Color Number 1 // Bit 1-0 - Shade for Color Number 0 // The four possible gray shades are: // 0 White // 1 Light gray // 2 Dark gray // 3 Black fn get_gray_shades(v: u8, i: usize) -> GrayShades { match v >> (2 * i) & 0x03 { 0x00 => GrayShades::White, 0x01 => GrayShades::Light, 0x02 => GrayShades::Dark, _ => GrayShades::Black, } } // Grey scale. fn set_gre(&mut self, x: usize, g: u8) { self.data[self.ly as usize][x] = [g, g, g]; } // When developing graphics on PCs, note that the RGB values will have different appearance on CGB displays as on // VGA/HDMI monitors calibrated to sRGB color. Because the GBC is not lit, the highest intensity will produce Light // Gray color rather than White. The intensities are not linear; the values 10h-1Fh will all appear very bright, // while medium and darker colors are ranged at 00h-0Fh. // The CGB display's pigments aren't perfectly saturated. This means the colors mix quite oddly; increasing // intensity of only one R,G,B color will also influence the other two R,G,B colors. For example, a color setting // of 03EFh (Blue=0, Green=1Fh, Red=0Fh) will appear as Neon Green on VGA displays, but on the CGB it'll produce a // decently washed out Yellow. See image on the right. fn set_rgb(&mut self, x: usize, r: u8, g: u8, b: u8) { assert!(r <= 0x1f); assert!(g <= 0x1f); assert!(b <= 0x1f); let r = u32::from(r); let g = u32::from(g); let b = u32::from(b); let lr = ((r * 13 + g * 2 + b) >> 1) as u8; let lg = ((g * 3 + b) << 1) as u8; let lb = ((r * 3 + g * 2 + b * 11) >> 1) as u8; self.data[self.ly as usize][x] = [lr, lg, lb]; } pub fn next(&mut self, cycles: u32) { if !self.lcdc.bit7() { return; } self.h_blank = false; // The LCD controller operates on a 222 Hz = 4.194 MHz dot clock. An entire frame is 154 scanlines, 70224 dots, // or 16.74 ms. On scanlines 0 through 143, the LCD controller cycles through modes 2, 3, and 0 once every 456 // dots. Scanlines 144 through 153 are mode 1. // // 1 scanline = 456 dots // // The following are typical when the display is enabled: // Mode 2 2_____2_____2_____2_____2_____2___________________2____ // Mode 3 _33____33____33____33____33____33__________________3___ // Mode 0 ___000___000___000___000___000___000________________000 // Mode 1 ____________________________________11111111111111_____ if cycles == 0 { return; } let c = (cycles - 1) / 80 + 1; for i in 0..c { if i == (c - 1) { self.dots += cycles % 80 } else { self.dots += 80 } let d = self.dots; self.dots %= 456; if d != self.dots { self.ly = (self.ly + 1) % 154; if self.stat.enable_ly_interrupt && self.ly == self.lc { self.intf.borrow_mut().hi(Flag::LCDStat); } } if self.ly >= 144 { if self.stat.mode == 1 { continue; } self.stat.mode = 1; self.v_blank = true; self.intf.borrow_mut().hi(Flag::VBlank); if self.stat.enable_m1_interrupt { self.intf.borrow_mut().hi(Flag::LCDStat); } } else if self.dots <= 80 { if self.stat.mode == 2 { continue; } self.stat.mode = 2; if self.stat.enable_m2_interrupt { self.intf.borrow_mut().hi(Flag::LCDStat); } } else if self.dots <= (80 + 172) { self.stat.mode = 3; } else { if self.stat.mode == 0 { continue; } self.stat.mode = 0; self.h_blank = true; if self.stat.enable_m0_interrupt { self.intf.borrow_mut().hi(Flag::LCDStat); } // Render scanline if self.term == Term::GBC || self.lcdc.bit0() { self.draw_bg(); } if self.lcdc.bit1() { self.draw_sprites(); } } } } fn draw_bg(&mut self) { let show_window = self.lcdc.bit5() && self.wy <= self.ly; let tile_base = if self.lcdc.bit4() { 0x8000 } else { 0x8800 }; let wx = self.wx.wrapping_sub(7); let py = if show_window { self.ly.wrapping_sub(self.wy) } else { self.sy.wrapping_add(self.ly) }; let ty = (u16::from(py) >> 3) & 31; for x in 0..SCREEN_W { let px = if show_window && x as u8 >= wx { x as u8 - wx } else { self.sx.wrapping_add(x as u8) }; let tx = (u16::from(px) >> 3) & 31; // Background memory base addr. let bg_base = if show_window && x as u8 >= wx { if self.lcdc.bit6() { 0x9c00 } else { 0x9800 } } else if self.lcdc.bit3() { 0x9c00 } else { 0x9800 }; // Tile data // Each tile is sized 8x8 pixels and has a color depth of 4 colors/gray shades. // Each tile occupies 16 bytes, where each 2 bytes represent a line: // Byte 0-1 First Line (Upper 8 pixels) // Byte 2-3 Next Line // etc. let tile_addr = bg_base + ty * 32 + tx; let tile_number = self.get_ram0(tile_addr); let tile_offset = if self.lcdc.bit4() { i16::from(tile_number) } else { i16::from(tile_number as i8) + 128 } as u16 * 16; let tile_location = tile_base + tile_offset; let tile_attr = Attr::from(self.get_ram1(tile_addr)); let tile_y = if tile_attr.yflip { 7 - py % 8 } else { py % 8 }; let tile_y_data: [u8; 2] = if self.term == Term::GBC && tile_attr.bank { let a = self.get_ram1(tile_location + u16::from(tile_y * 2)); let b = self.get_ram1(tile_location + u16::from(tile_y * 2) + 1); [a, b] } else { let a = self.get_ram0(tile_location + u16::from(tile_y * 2)); let b = self.get_ram0(tile_location + u16::from(tile_y * 2) + 1); [a, b] }; let tile_x = if tile_attr.xflip { 7 - px % 8 } else { px % 8 }; // Palettes let color_l = if tile_y_data[0] & (0x80 >> tile_x) != 0 { 1 } else { 0 }; let color_h = if tile_y_data[1] & (0x80 >> tile_x) != 0 { 2 } else { 0 }; let color = color_h | color_l; // Priority self.prio[x] = (tile_attr.priority, color); if self.term == Term::GBC { let r = self.cbgpd[tile_attr.palette_number_1][color][0]; let g = self.cbgpd[tile_attr.palette_number_1][color][1]; let b = self.cbgpd[tile_attr.palette_number_1][color][2]; self.set_rgb(x as usize, r, g, b); } else { let color = Self::get_gray_shades(self.bgp, color) as u8; self.set_gre(x, color); } } } // Gameboy video controller can display up to 40 sprites either in 8x8 or in 8x16 pixels. Because of a limitation // of hardware, only ten sprites can be displayed per scan line. Sprite patterns have the same format as BG tiles, // but they are taken from the Sprite Pattern Table located at $8000-8FFF and have unsigned numbering. // // Sprite attributes reside in the Sprite Attribute Table (OAM - Object Attribute Memory) at $FE00-FE9F. Each of // the 40 entries consists of four bytes with the following meanings: // Byte0 - Y Position // Specifies the sprites vertical position on the screen (minus 16). An off-screen value (for example, Y=0 or // Y>=160) hides the sprite. // // Byte1 - X Position // Specifies the sprites horizontal position on the screen (minus 8). An off-screen value (X=0 or X>=168) hides // the sprite, but the sprite still affects the priority ordering - a better way to hide a sprite is to set its // Y-coordinate off-screen. // // Byte2 - Tile/Pattern Number // Specifies the sprites Tile Number (00-FF). This (unsigned) value selects a tile from memory at 8000h-8FFFh. In // CGB Mode this could be either in VRAM Bank 0 or 1, depending on Bit 3 of the following byte. In 8x16 mode, the // lower bit of the tile number is ignored. IE: the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is // \"NN OR 01h\". // // Byte3 - Attributes/Flags: // Bit7 OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3) // (Used for both BG and Window. BG color 0 is always behind OBJ) // Bit6 Y flip (0=Normal, 1=Vertically mirrored) // Bit5 X flip (0=Normal, 1=Horizontally mirrored) // Bit4 Palette number **Non CGB Mode Only** (0=OBP0, 1=OBP1) // Bit3 Tile VRAM-Bank **CGB Mode Only** (0=Bank 0, 1=Bank 1) // Bit2-0 Palette number **CGB Mode Only** (OBP0-7) fn draw_sprites(&mut self) { // Sprite tile size 8x8 or 8x16(2 stacked vertically). let sprite_size = if self.lcdc.bit2() { 16 } else { 8 }; for i in 0..40 { let sprite_addr = 0xfe00 + (i as u16) * 4; let py = self.get(sprite_addr).wrapping_sub(16); let px = self.get(sprite_addr + 1).wrapping_sub(8); let tile_number = self.get(sprite_addr + 2) & if self.lcdc.bit2() { 0xfe } else { 0xff }; let tile_attr = Attr::from(self.get(sprite_addr + 3)); // If this is true the scanline is out of the area we care about if py <= 0xff - sprite_size + 1 { if self.ly < py || self.ly > py + sprite_size - 1 { continue; } } else { if self.ly > py.wrapping_add(sprite_size) - 1 { continue; } } if px >= (SCREEN_W as u8) && px <= (0xff - 7) { continue; } let tile_y = if tile_attr.yflip { sprite_size - 1 - self.ly.wrapping_sub(py) } else { self.ly.wrapping_sub(py) }; let tile_y_addr = 0x8000u16 + u16::from(tile_number) * 16 + u16::from(tile_y) * 2; let tile_y_data: [u8; 2] = if self.term == Term::GBC && tile_attr.bank { let b1 = self.get_ram1(tile_y_addr); let b2 = self.get_ram1(tile_y_addr + 1); [b1, b2] } else { let b1 = self.get_ram0(tile_y_addr); let b2 = self.get_ram0(tile_y_addr + 1); [b1, b2] }; for x in 0..8 { if px.wrapping_add(x) >= (SCREEN_W as u8) { continue; } let tile_x = if tile_attr.xflip { 7 - x } else { x }; // Palettes let color_l = if tile_y_data[0] & (0x80 >> tile_x) != 0 { 1 } else { 0 }; let color_h = if tile_y_data[1] & (0x80 >> tile_x) != 0 { 2 } else { 0 }; let color = color_h | color_l; if color == 0 { continue; } // Confirm the priority of background and sprite. let prio = self.prio[px.wrapping_add(x) as usize]; let skip = if self.term == Term::GBC && !self.lcdc.bit0() { prio.1 == 0 } else if prio.0 { prio.1 != 0 } else { tile_attr.priority && prio.1 != 0 }; if skip { continue; } if self.term == Term::GBC { let r = self.cobpd[tile_attr.palette_number_1][color][0]; let g = self.cobpd[tile_attr.palette_number_1][color][1]; let b = self.cobpd[tile_attr.palette_number_1][color][2]; self.set_rgb(px.wrapping_add(x) as usize, r, g, b); } else { let color = if tile_attr.palette_number_0 == 1 { Self::get_gray_shades(self.op1, color) as u8 } else { Self::get_gray_shades(self.op0, color) as u8 }; self.set_gre(px.wrapping_add(x) as usize, color); } } } } } impl Memory for Gpu { fn get(&self, a: u16) -> u8 { match a { 0x8000...0x9fff => self.ram[self.ram_bank * 0x2000 + a as usize - 0x8000], 0xfe00...0xfe9f => self.oam[a as usize - 0xfe00], 0xff40 => self.lcdc.data, 0xff41 => { let bit6 = if self.stat.enable_ly_interrupt { 0x40 } else { 0x00 }; let bit5 = if self.stat.enable_m2_interrupt { 0x20 } else { 0x00 }; let bit4 = if self.stat.enable_m1_interrupt { 0x10 } else { 0x00 }; let bit3 = if self.stat.enable_m0_interrupt { 0x08 } else { 0x00 }; let bit2 = if self.ly == self.lc { 0x04 } else { 0x00 }; bit6 | bit5 | bit4 | bit3 | bit2 | self.stat.mode } 0xff42 => self.sy, 0xff43 => self.sx, 0xff44 => self.ly, 0xff45 => self.lc, 0xff47 => self.bgp, 0xff48 => self.op0, 0xff49 => self.op1, 0xff4a => self.wy, 0xff4b => self.wx, 0xff4f => 0xfe | self.ram_bank as u8, 0xff68 => self.cbgpi.get(), 0xff69 => { let r = self.cbgpi.i as usize >> 3; let c = self.cbgpi.i as usize >> 1 & 0x3; if self.cbgpi.i & 0x01 == 0x00 { let a = self.cbgpd[r][c][0]; let b = self.cbgpd[r][c][1] << 5; a | b } else { let a = self.cbgpd[r][c][1] >> 3; let b = self.cbgpd[r][c][2] << 2; a | b } } 0xff6a => self.cobpi.get(), 0xff6b => { let r = self.cobpi.i as usize >> 3; let c = self.cobpi.i as usize >> 1 & 0x3; if self.cobpi.i & 0x01 == 0x00 { let a = self.cobpd[r][c][0]; let b = self.cobpd[r][c][1] << 5; a | b } else { let a = self.cobpd[r][c][1] >> 3; let b = self.cobpd[r][c][2] << 2; a | b } } _ => panic!(\"\"), } } fn set(&mut self, a: u16, v: u8) { match a { 0x8000...0x9fff => self.ram[self.ram_bank * 0x2000 + a as usize - 0x8000] = v, 0xfe00...0xfe9f => self.oam[a as usize - 0xfe00] = v, 0xff40 => { self.lcdc.data = v; if !self.lcdc.bit7() { self.dots = 0; self.ly = 0; self.stat.mode = 0; // Clean screen. self.data = [[[0xffu8; 3]; SCREEN_W]; SCREEN_H]; self.v_blank = true; } } 0xff41 => { self.stat.enable_ly_interrupt = v & 0x40 != 0x00; self.stat.enable_m2_interrupt = v & 0x20 != 0x00; self.stat.enable_m1_interrupt = v & 0x10 != 0x00; self.stat.enable_m0_interrupt = v & 0x08 != 0x00; } 0xff42 => self.sy = v, 0xff43 => self.sx = v, 0xff44 => {} 0xff45 => self.lc = v, 0xff47 => self.bgp = v, 0xff48 => self.op0 = v, 0xff49 => self.op1 = v, 0xff4a => self.wy = v, 0xff4b => self.wx = v, 0xff4f => self.ram_bank = (v & 0x01) as usize, 0xff68 => self.cbgpi.set(v), 0xff69 => { let r = self.cbgpi.i as usize >> 3; let c = self.cbgpi.i as usize >> 1 & 0x03; if self.cbgpi.i & 0x01 == 0x00 { self.cbgpd[r][c][0] = v & 0x1f; self.cbgpd[r][c][1] = (self.cbgpd[r][c][1] & 0x18) | (v >> 5); } else { self.cbgpd[r][c][1] = (self.cbgpd[r][c][1] & 0x07) | ((v & 0x03) << 3); self.cbgpd[r][c][2] = (v >> 2) & 0x1f; } if self.cbgpi.auto_increment { self.cbgpi.i += 0x01; self.cbgpi.i &= 0x3f; } } 0xff6a => self.cobpi.set(v), 0xff6b => { let r = self.cobpi.i as usize >> 3; let c = self.cobpi.i as usize >> 1 & 0x03; if self.cobpi.i & 0x01 == 0x00 { self.cobpd[r][c][0] = v & 0x1f; self.cobpd[r][c][1] = (self.cobpd[r][c][1] & 0x18) | (v >> 5); } else { self.cobpd[r][c][1] = (self.cobpd[r][c][1] & 0x07) | ((v & 0x03) << 3); self.cobpd[r][c][2] = (v >> 2) & 0x1f; } if self.cobpi.auto_increment { self.cobpi.i += 0x01; self.cobpi.i &= 0x3f; } } _ => panic!(\"\"), } } } \u5c06\u7f16\u5199\u53f7\u7684 GPU \u6a21\u5757\u5d4c\u5165\u5185\u5b58\u7ba1\u7406\u6a21\u5757, \u540c\u65f6\u7531\u4e8e DMA \u529f\u80fd\u6d89\u53ca\u4e0d\u540c\u6a21\u5757\u4e4b\u95f4\u7684\u5185\u5b58\u8bfb\u5199, \u56e0\u6b64\u9700\u8981\u5728\u5185\u5b58\u7ba1\u7406\u6a21\u5757\u4e2d\u5b9e\u73b0 DMA \u903b\u8f91. pub struct Mmunit { pub gpu: Gpu, hdma: Hdma, hram: [u8; 0x7f], wram: [u8; 0x8000], wram_bank: usize, } impl Mmunit { fn run_dma(&mut self) -> u32 { if !self.hdma.active { return 0; } match self.hdma.mode { HdmaMode::Gdma => { let len = u32::from(self.hdma.remain) + 1; for _ in 0..len { self.run_dma_hrampart(); } self.hdma.active = false; len * 8 } HdmaMode::Hdma => { if !self.gpu.h_blank { return 0; } self.run_dma_hrampart(); if self.hdma.remain == 0x7f { self.hdma.active = false; } 8 } } } fn run_dma_hrampart(&mut self) { let mmu_src = self.hdma.src; for i in 0..0x10 { let b: u8 = self.get(mmu_src + i); self.gpu.set(self.hdma.dst + i, b); } self.hdma.src += 0x10; self.hdma.dst += 0x10; if self.hdma.remain == 0 { self.hdma.remain = 0x7f; } else { self.hdma.remain -= 1; } } } impl Memory for Mmunit { fn get(&self, a: u16) -> u8 { match a { 0x8000...0x9fff => self.gpu.get(a), 0xc000...0xcfff => self.wram[a as usize - 0xc000], 0xd000...0xdfff => self.wram[a as usize - 0xd000 + 0x1000 * self.wram_bank], 0xe000...0xefff => self.wram[a as usize - 0xe000], 0xf000...0xfdff => self.wram[a as usize - 0xf000 + 0x1000 * self.wram_bank], 0xfe00...0xfe9f => self.gpu.get(a), 0xff40...0xff45 | 0xff47...0xff4b | 0xff4f => self.gpu.get(a), 0xff51...0xff55 => self.hdma.get(a), 0xff68...0xff6b => self.gpu.get(a), 0xff70 => self.wram_bank as u8, 0xff80...0xfffe => self.hram[a as usize - 0xff80], } } fn set(&mut self, a: u16, v: u8) { match a { 0x8000...0x9fff => self.gpu.set(a, v), 0xa000...0xbfff => self.cartridge.set(a, v), 0xc000...0xcfff => self.wram[a as usize - 0xc000] = v, 0xd000...0xdfff => self.wram[a as usize - 0xd000 + 0x1000 * self.wram_bank] = v, 0xe000...0xefff => self.wram[a as usize - 0xe000] = v, 0xf000...0xfdff => self.wram[a as usize - 0xf000 + 0x1000 * self.wram_bank] = v, 0xfe00...0xfe9f => self.gpu.set(a, v), 0xff46 => { // Writing to this register launches a DMA transfer from ROM or RAM to OAM memory (sprite attribute // table). // See: http://gbdev.gg8.se/wiki/articles/Video_Display#FF46_-_DMA_-_DMA_Transfer_and_Start_Address_.28R.2FW.29 assert!(v <= 0xf1); let base = u16::from(v) << 8; for i in 0..0xa0 { let b = self.get(base + i); self.set(0xfe00 + i, b); } } 0xff40...0xff45 | 0xff47...0xff4b | 0xff4f => self.gpu.set(a, v), 0xff51...0xff55 => self.hdma.set(a, v), 0xff68...0xff6b => self.gpu.set(a, v), 0xff70 => { self.wram_bank = match v & 0x7 { 0 => 1, n => n as usize, }; } 0xff80...0xfffe => self.hram[a as usize - 0xff80] = v, } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/video/crt/","text":"\u5149\u6805\u6210\u50cf\u539f\u7406\u4e0e\u6982\u5ff5 Game Boy \u7684\u6210\u50cf\u539f\u7406\u4e0e\u9634\u6781\u5c04\u7ebf\u7ba1(CRT)\u6210\u50cf\u539f\u7406\u975e\u5e38\u76f8\u50cf, \u6211\u4eec\u9996\u5148\u4ece\u9634\u6781\u5c04\u7ebf\u7ba1\u5f00\u59cb\u8fdb\u884c\u539f\u7406\u4ecb\u7ecd, \u968f\u540e\u4fbf\u53ef\u81ea\u7136\u8fc7\u6e21\u5230 Game Boy \u7684\u6210\u50cf\u539f\u7406. \u9634\u6781\u5c04\u7ebf\u7ba1\u662f\u4e00\u79cd\u771f\u7a7a\u7ba1, \u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u7535\u5b50\u67aa\u548c\u4e00\u4e2a\u78f7\u5149\u5c4f, \u53ef\u7528\u4e8e\u663e\u793a\u56fe\u50cf. \u5b83\u901a\u8fc7\u8c03\u5236, \u52a0\u901f\u548c\u504f\u8f6c\u4ece\u7535\u5b50\u67aa\u53d1\u5c04\u51fa\u53bb\u7684\u7535\u5b50\u675f\u5230\u5c4f\u5e55\u4e0a\u4ee5\u521b\u5efa\u56fe\u50cf, \u5176\u7ed3\u6784\u5982\u56fe\u6240\u793a. \u5728\u8bb8\u591a\u8001\u7535\u5f71\u4e2d\u5e38\u5e38\u51fa\u73b0\u5b83\u7684\u8eab\u5f71, \u5b83\u8fc7\u53bb\u66fe\u7528\u4e8e\u793a\u6ce2\u5668, \u7535\u89c6, \u96f7\u8fbe\u6216\u5176\u4ed6\u73b0\u8c61. \u5728\u6bcf\u4e00\u5e27\u7684\u5f00\u59cb, \u7535\u5b50\u675f\u901a\u5e38\u5148\u6253\u5728\u5c4f\u5e55\u5de6\u4e0a\u89d2, \u7136\u540e\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u4e00\u884c; \u7d27\u63a5\u7740\u8df3\u8f6c\u5230\u4e0b\u4e00\u884c\u7684\u5f00\u59cb(\u5de6\u8fb9), \u5e76\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4. \u76f4\u81f3\u6700\u540e\u4e00\u884c, \u7535\u5b50\u675f\u91cd\u65b0\u56de\u5230\u5de6\u4e0a\u89d2. \u5728\u4efb\u610f\u65f6\u523b, \u5c4f\u5e55\u53ea\u6709\u4e00\u4e2a\u70b9\u63a5\u6536\u7535\u5b50\u675f\u5e76\u53d1\u5149, \u4e4b\u6240\u4ee5\u4eba\u773c\u80fd\u770b\u5230\u6574\u5e45\u753b\u9762\u662f\u7531\u4e8e\u4eba\u773c\u7684\u89c6\u89c9\u6682\u7559\u73b0\u8c61(\u4eba\u773c\u5728\u89c2\u5bdf\u666f\u7269\u65f6, \u5149\u4fe1\u53f7\u4f20\u5165\u5927\u8111\u795e\u7ecf, \u9700\u7ecf\u8fc7\u4e00\u6bb5\u77ed\u6682\u7684\u65f6\u95f4, \u5149\u7684\u4f5c\u7528\u7ed3\u675f\u540e, \u89c6\u89c9\u5f62\u8c61\u5e76\u4e0d\u7acb\u5373\u6d88\u5931, \u8fd9\u79cd\u6b8b\u7559\u7684\u89c6\u89c9\u79f0\u540e\u50cf). \u9634\u6781\u5c04\u7ebf\u6210\u50cf\u5177\u6709\u660e\u663e\u7684\u7279\u8272, \u4e00\u822c\u8089\u773c\u5c31\u80fd\u770b\u51fa\u5176\u626b\u63cf\u884c. \u9634\u6781\u5c04\u7ebf\u7ba1\u6709\u4e00\u4e9b\u5f88\u91cd\u8981\u7684\u6982\u5ff5, \u5982\u4e0b: \u70b9\u8ddd: \u6307\u5c4f\u5e55\u4e0a\u76f8\u90bb\u4e24\u4e2a\u50cf\u7d20\u5355\u5143\u4e4b\u95f4\u7684\u8ddd\u79bb. \u67f5\u8ddd: \u5e73\u884c\u5149\u67f5\u4e4b\u95f4\u7684\u8ddd\u79bb. \u573a\u9891: \u573a\u9891\u53c8\u79f0\"\u5782\u76f4\u626b\u63cf\u9891\u7387\"\u6216\"\u5237\u65b0\u7387\", \u6307\u5355\u4f4d\u65f6\u95f4\u5185(\u901a\u5e38\u662f\u79d2)\u5bf9\u6574\u4e2a\u5c4f\u5e55\u626b\u63cf\u7684\u6b21\u6570. \u884c\u9891: \u884c\u9891\u53c8\u79f0\"\u6c34\u5e73\u626b\u63cf\u9891\u7387\", \u6307\u7535\u5b50\u67aa\u6bcf\u79d2\u5728\u8367\u5149\u5c4f\u4e0a\u626b\u8fc7\u7684\u6c34\u5e73\u7ebf\u7684\u6570\u91cf. \u5176\u503c\u7ea6\u7b49\u4e8e\"\u573a\u9891 x \u5782\u76f4\u89e3\u6790\u5ea6\". \u626b\u63cf\u9891\u7387: \u662f\u573a\u9891\u548c\u884c\u9891\u7684\u7edf\u79f0. \u89e3\u6790\u5ea6: \u89e3\u6790\u5ea6\u5c31\u662f\u5c4f\u5e55\u56fe\u50cf\u7684\u7cbe\u5bc6\u5ea6, \u662f\u6307\u663e\u793a\u5668\u6240\u80fd\u663e\u793a\u50cf\u7d20\u70b9\u7684\u591a\u5c11. \u4ee5\u89e3\u6790\u5ea6\u4e3a 1024\u00d7768 \u50cf\u7d20\u7684\u5c4f\u5e55\u4f86\u8bf4, \u5373\u6bcf\u4e00\u6761\u6c34\u5e73\u7ebf\u4e0a\u5305\u542b\u6709 1024 \u4e2a\u50cf\u7d20\u70b9, \u5171\u6709 768 \u6761\u7ebf, \u5373\u626b\u63cf\u5217\u6570\u4e3a 1024 \u5217, \u884c\u6570\u4e3a 768 \u884c. \u5e26\u5bbd: \u5e26\u5bbd\u662f\u663e\u793a\u5668\u89c6\u9891\u653e\u5927\u5668\u901a\u9891\u5e26\u5bbd\u5ea6\u7684\u7b80\u79f0, \u6307\u7535\u5b50\u67aa\u6bcf\u79d2\u5728\u5c4f\u5e55\u4e0a\u626b\u8fc7\u7684\u6700\u5927\u603b\u50cf\u7d20\u6570, \u4ee5 MHz(\u5146\u8d6b\u8332) \u4e3a\u5355\u4f4d. Game Boy \u786c\u4ef6\u5728\u5176\u663e\u793a\u753b\u9762\u7684\u65f6\u5019\u6a21\u62df\u9634\u6781\u5c04\u7ebf\u7ba1\u7684\u6210\u50cf\u539f\u7406, Game Boy \u5236\u4f5c\u4e00\u5e27\u7684\u753b\u9762\u65f6, \u9996\u5148\u786e\u8ba4\u5c4f\u5e55\u5de6\u4e0a\u89d2\u7684\u50cf\u7d20\u503c, \u7136\u540e\u4ece\u5de6\u81f3\u53f3, \u4ece\u4e0a\u81f3\u4e0b\u4f9d\u6b21\u8fdb\u884c\u8ba1\u7b97. \u5b83\u7684\u8fc7\u7a0b\u6d89\u53ca\u4ee5\u4e0b\u51e0\u4e2a\u672f\u8bed: Scanline, HBlank \u548c Vblank. Scanline(\u6c34\u5e73\u626b\u63cf): Game Boy \u6a21\u62df\u9634\u6781\u5c04\u7ebf\u7ba1\u7684\u6c34\u5e73\u626b\u63cf\u8fc7\u7a0b. HBlank(\u6c34\u5e73\u6d88\u5f71): \u6307\u5149\u675f\u4ece\u4e00\u6761\u626b\u63cf\u7ebf\u7684\u672b\u7aef\u79fb\u52a8\u5230\u4e0b\u4e00\u6761\u7ebf\u7684\u5f00\u59cb\u5904\u7684\u8fc7\u7a0b. VBlank(\u5782\u76f4\u6d88\u5f71): \u6307\u5149\u675f\u4ece\u753b\u9762\u7684\u53f3\u4e0b\u89d2\u8fd4\u56de\u753b\u9762\u5de6\u4e0a\u89d2\u7684\u8fc7\u7a0b. \u7531\u4e8e\u5149\u675f\u5728 VBlank \u4e2d\u79fb\u52a8\u8ddd\u79bb\u6bd4 HBlank \u5927, \u56e0\u6b64\u8be5\u65f6\u95f4\u6bb5\u901a\u5e38\u6bd4 HBlank \u8981\u66f4\u52a0\u7684\u957f. \u4e00\u5e27\u7684\u65f6\u95f4\u5468\u671f Game Boy \u7684\u4e00\u5e27\u5206\u4e3a\u591a\u4e2a\u4e0d\u540c\u7684\u65f6\u95f4\u6bb5, \u4e0b\u8868\u6839\u636e CPU \u7684\u65f6\u949f\u9891\u7387(4194304Hz)\u8868\u793a GPU \u5728\u6bcf\u4e2a\u5468\u671f\u5185\u4fdd\u6301\u591a\u957f\u65f6\u95f4: Period GPU mode number Time spent (clocks) Scanline (accessing OAM) 2 80 Scanline (accessing VRAM) 3 172 Horizontal blank 0 204 One line (scan and blank) - 456 Vertical blank 1 4560 (10 lines) Full frame (scans and vblank) - 70224 Game Boy \u7ed8\u5236\u56fe\u50cf\u65f6\u53ef\u5904\u4e8e\u56db\u79cd\u4e0d\u540c\u7684\u72b6\u6001, \u4ee5 GPU Mode \u4f5c\u4e3a\u533a\u5206. Mode 0: \u5904\u4e8e H-Blank \u671f\u95f4 Mode 1: \u5904\u4e8e V-Blank \u671f\u95f4 Mode 2: \u5904\u4e8e\u641c\u7d22 OAM(\u4e00\u6bb5\u5185\u5b58, \u7528\u4e8e\u5b58\u50a8\u753b\u9762\u7247\u6bb5)\u671f\u95f4 Mode 3: \u5904\u4e8e\u4f20\u8f93\u753b\u9762\u6570\u636e\u671f\u95f4(\u4ece\u6e38\u620f\u5361\u5e26\u5230 GPU \u5185\u5b58) \u5982\u6b64, \u4fbf\u53ef\u4ee5\u5148\u5728\u4ee3\u7801\u4e2d\u4eff\u771f\u5b9e\u73b0\u8fd9\u4e9b\u6b65\u9aa4\u8fc7\u7a0b. \u4e3a\u4e86\u4fdd\u6301\u5bf9\u786c\u4ef6\u7cfb\u7edf\u7684\u6a21\u62df, CPU \u6bcf\u6267\u884c\u5b8c\u4e00\u4e2a\u6307\u4ee4, \u5c31\u5fc5\u987b\u901a\u77e5 GPU \u8be5\u6307\u4ee4\u7684\u6307\u4ee4\u5468\u671f. \u521b\u5efa\u4e00\u4e2a Stat \u5bf9\u8c61\u4fdd\u5b58\u5f53\u524d\u6240\u5904\u7684\u65f6\u95f4\u6bb5, \u5e76\u5b9e\u73b0 next \u51fd\u6570: \u5b83\u63a5\u6536 CPU \u7684\u6307\u4ee4\u5468\u671f, \u5e76\u66f4\u65b0\u81ea\u5df1\u7684 Stat, \u540c\u65f6\u66f4\u65b0 ly \u5b57\u6bb5, \u8be5\u5b57\u6bb5\u8d1f\u8d23\u5b58\u50a8\u5f53\u524d\u626b\u63cf\u7ebf\u4f4d\u4e8e\u7b2c\u51e0\u884c. // LCD Status Register. pub struct Stat { // Bit 1-0 - Mode Flag (Mode 0-3, see below) (Read Only) // 0: During H-Blank // 1: During V-Blank // 2: During Searching OAM // 3: During Transferring Data to LCD Driver mode: u8, } pub struct Gpu { stat: Stat, dots: u32, ly: u8, ... } impl Gpu { pub fn next(&mut self, cycles: u32) { if cycles == 0 { return; } let c = (cycles - 1) / 80 + 1; for i in 0..c { if i == (c - 1) { self.dots += cycles % 80 } else { self.dots += 80 } let d = self.dots; self.dots %= 456; if d != self.dots { self.ly = (self.ly + 1) % 154; } if self.ly >= 144 { if self.stat.mode == 1 { continue; } self.stat.mode = 1; self.v_blank = true; } else if self.dots <= 80 { if self.stat.mode == 2 { continue; } self.stat.mode = 2; } else if self.dots <= (80 + 172) { self.stat.mode = 3; } else { if self.stat.mode == 0 { continue; } self.stat.mode = 0; // Render scanline Here } } } } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d, GPU \u7684\u65f6\u5e8f\u5df2\u7ecf\u786e\u5b9a(\u5373 Scanline, HBlank \u548c VBlank \u7b49\u9636\u6bb5), \u4f46 GPU \u7684\u5de5\u4f5c\u5c1a\u672a\u5230\u4f4d: \u56e0\u4e3aScanlilne \u76ee\u524d\u5e76\u6ca1\u6709\u88ab\u5b9e\u9645\u53bb\u7ed8\u5236.","title":"GB-\u89c6\u9891-\u5149\u6805\u6210\u50cf\u539f\u7406\u4e0e\u6982\u5ff5"},{"location":"content/gameboy/video/crt/#_1","text":"Game Boy \u7684\u6210\u50cf\u539f\u7406\u4e0e\u9634\u6781\u5c04\u7ebf\u7ba1(CRT)\u6210\u50cf\u539f\u7406\u975e\u5e38\u76f8\u50cf, \u6211\u4eec\u9996\u5148\u4ece\u9634\u6781\u5c04\u7ebf\u7ba1\u5f00\u59cb\u8fdb\u884c\u539f\u7406\u4ecb\u7ecd, \u968f\u540e\u4fbf\u53ef\u81ea\u7136\u8fc7\u6e21\u5230 Game Boy \u7684\u6210\u50cf\u539f\u7406. \u9634\u6781\u5c04\u7ebf\u7ba1\u662f\u4e00\u79cd\u771f\u7a7a\u7ba1, \u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u7535\u5b50\u67aa\u548c\u4e00\u4e2a\u78f7\u5149\u5c4f, \u53ef\u7528\u4e8e\u663e\u793a\u56fe\u50cf. \u5b83\u901a\u8fc7\u8c03\u5236, \u52a0\u901f\u548c\u504f\u8f6c\u4ece\u7535\u5b50\u67aa\u53d1\u5c04\u51fa\u53bb\u7684\u7535\u5b50\u675f\u5230\u5c4f\u5e55\u4e0a\u4ee5\u521b\u5efa\u56fe\u50cf, \u5176\u7ed3\u6784\u5982\u56fe\u6240\u793a. \u5728\u8bb8\u591a\u8001\u7535\u5f71\u4e2d\u5e38\u5e38\u51fa\u73b0\u5b83\u7684\u8eab\u5f71, \u5b83\u8fc7\u53bb\u66fe\u7528\u4e8e\u793a\u6ce2\u5668, \u7535\u89c6, \u96f7\u8fbe\u6216\u5176\u4ed6\u73b0\u8c61. \u5728\u6bcf\u4e00\u5e27\u7684\u5f00\u59cb, \u7535\u5b50\u675f\u901a\u5e38\u5148\u6253\u5728\u5c4f\u5e55\u5de6\u4e0a\u89d2, \u7136\u540e\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u4e00\u884c; \u7d27\u63a5\u7740\u8df3\u8f6c\u5230\u4e0b\u4e00\u884c\u7684\u5f00\u59cb(\u5de6\u8fb9), \u5e76\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4. \u76f4\u81f3\u6700\u540e\u4e00\u884c, \u7535\u5b50\u675f\u91cd\u65b0\u56de\u5230\u5de6\u4e0a\u89d2. \u5728\u4efb\u610f\u65f6\u523b, \u5c4f\u5e55\u53ea\u6709\u4e00\u4e2a\u70b9\u63a5\u6536\u7535\u5b50\u675f\u5e76\u53d1\u5149, \u4e4b\u6240\u4ee5\u4eba\u773c\u80fd\u770b\u5230\u6574\u5e45\u753b\u9762\u662f\u7531\u4e8e\u4eba\u773c\u7684\u89c6\u89c9\u6682\u7559\u73b0\u8c61(\u4eba\u773c\u5728\u89c2\u5bdf\u666f\u7269\u65f6, \u5149\u4fe1\u53f7\u4f20\u5165\u5927\u8111\u795e\u7ecf, \u9700\u7ecf\u8fc7\u4e00\u6bb5\u77ed\u6682\u7684\u65f6\u95f4, \u5149\u7684\u4f5c\u7528\u7ed3\u675f\u540e, \u89c6\u89c9\u5f62\u8c61\u5e76\u4e0d\u7acb\u5373\u6d88\u5931, \u8fd9\u79cd\u6b8b\u7559\u7684\u89c6\u89c9\u79f0\u540e\u50cf). \u9634\u6781\u5c04\u7ebf\u6210\u50cf\u5177\u6709\u660e\u663e\u7684\u7279\u8272, \u4e00\u822c\u8089\u773c\u5c31\u80fd\u770b\u51fa\u5176\u626b\u63cf\u884c. \u9634\u6781\u5c04\u7ebf\u7ba1\u6709\u4e00\u4e9b\u5f88\u91cd\u8981\u7684\u6982\u5ff5, \u5982\u4e0b: \u70b9\u8ddd: \u6307\u5c4f\u5e55\u4e0a\u76f8\u90bb\u4e24\u4e2a\u50cf\u7d20\u5355\u5143\u4e4b\u95f4\u7684\u8ddd\u79bb. \u67f5\u8ddd: \u5e73\u884c\u5149\u67f5\u4e4b\u95f4\u7684\u8ddd\u79bb. \u573a\u9891: \u573a\u9891\u53c8\u79f0\"\u5782\u76f4\u626b\u63cf\u9891\u7387\"\u6216\"\u5237\u65b0\u7387\", \u6307\u5355\u4f4d\u65f6\u95f4\u5185(\u901a\u5e38\u662f\u79d2)\u5bf9\u6574\u4e2a\u5c4f\u5e55\u626b\u63cf\u7684\u6b21\u6570. \u884c\u9891: \u884c\u9891\u53c8\u79f0\"\u6c34\u5e73\u626b\u63cf\u9891\u7387\", \u6307\u7535\u5b50\u67aa\u6bcf\u79d2\u5728\u8367\u5149\u5c4f\u4e0a\u626b\u8fc7\u7684\u6c34\u5e73\u7ebf\u7684\u6570\u91cf. \u5176\u503c\u7ea6\u7b49\u4e8e\"\u573a\u9891 x \u5782\u76f4\u89e3\u6790\u5ea6\". \u626b\u63cf\u9891\u7387: \u662f\u573a\u9891\u548c\u884c\u9891\u7684\u7edf\u79f0. \u89e3\u6790\u5ea6: \u89e3\u6790\u5ea6\u5c31\u662f\u5c4f\u5e55\u56fe\u50cf\u7684\u7cbe\u5bc6\u5ea6, \u662f\u6307\u663e\u793a\u5668\u6240\u80fd\u663e\u793a\u50cf\u7d20\u70b9\u7684\u591a\u5c11. \u4ee5\u89e3\u6790\u5ea6\u4e3a 1024\u00d7768 \u50cf\u7d20\u7684\u5c4f\u5e55\u4f86\u8bf4, \u5373\u6bcf\u4e00\u6761\u6c34\u5e73\u7ebf\u4e0a\u5305\u542b\u6709 1024 \u4e2a\u50cf\u7d20\u70b9, \u5171\u6709 768 \u6761\u7ebf, \u5373\u626b\u63cf\u5217\u6570\u4e3a 1024 \u5217, \u884c\u6570\u4e3a 768 \u884c. \u5e26\u5bbd: \u5e26\u5bbd\u662f\u663e\u793a\u5668\u89c6\u9891\u653e\u5927\u5668\u901a\u9891\u5e26\u5bbd\u5ea6\u7684\u7b80\u79f0, \u6307\u7535\u5b50\u67aa\u6bcf\u79d2\u5728\u5c4f\u5e55\u4e0a\u626b\u8fc7\u7684\u6700\u5927\u603b\u50cf\u7d20\u6570, \u4ee5 MHz(\u5146\u8d6b\u8332) \u4e3a\u5355\u4f4d. Game Boy \u786c\u4ef6\u5728\u5176\u663e\u793a\u753b\u9762\u7684\u65f6\u5019\u6a21\u62df\u9634\u6781\u5c04\u7ebf\u7ba1\u7684\u6210\u50cf\u539f\u7406, Game Boy \u5236\u4f5c\u4e00\u5e27\u7684\u753b\u9762\u65f6, \u9996\u5148\u786e\u8ba4\u5c4f\u5e55\u5de6\u4e0a\u89d2\u7684\u50cf\u7d20\u503c, \u7136\u540e\u4ece\u5de6\u81f3\u53f3, \u4ece\u4e0a\u81f3\u4e0b\u4f9d\u6b21\u8fdb\u884c\u8ba1\u7b97. \u5b83\u7684\u8fc7\u7a0b\u6d89\u53ca\u4ee5\u4e0b\u51e0\u4e2a\u672f\u8bed: Scanline, HBlank \u548c Vblank. Scanline(\u6c34\u5e73\u626b\u63cf): Game Boy \u6a21\u62df\u9634\u6781\u5c04\u7ebf\u7ba1\u7684\u6c34\u5e73\u626b\u63cf\u8fc7\u7a0b. HBlank(\u6c34\u5e73\u6d88\u5f71): \u6307\u5149\u675f\u4ece\u4e00\u6761\u626b\u63cf\u7ebf\u7684\u672b\u7aef\u79fb\u52a8\u5230\u4e0b\u4e00\u6761\u7ebf\u7684\u5f00\u59cb\u5904\u7684\u8fc7\u7a0b. VBlank(\u5782\u76f4\u6d88\u5f71): \u6307\u5149\u675f\u4ece\u753b\u9762\u7684\u53f3\u4e0b\u89d2\u8fd4\u56de\u753b\u9762\u5de6\u4e0a\u89d2\u7684\u8fc7\u7a0b. \u7531\u4e8e\u5149\u675f\u5728 VBlank \u4e2d\u79fb\u52a8\u8ddd\u79bb\u6bd4 HBlank \u5927, \u56e0\u6b64\u8be5\u65f6\u95f4\u6bb5\u901a\u5e38\u6bd4 HBlank \u8981\u66f4\u52a0\u7684\u957f.","title":"\u5149\u6805\u6210\u50cf\u539f\u7406\u4e0e\u6982\u5ff5"},{"location":"content/gameboy/video/crt/#_2","text":"Game Boy \u7684\u4e00\u5e27\u5206\u4e3a\u591a\u4e2a\u4e0d\u540c\u7684\u65f6\u95f4\u6bb5, \u4e0b\u8868\u6839\u636e CPU \u7684\u65f6\u949f\u9891\u7387(4194304Hz)\u8868\u793a GPU \u5728\u6bcf\u4e2a\u5468\u671f\u5185\u4fdd\u6301\u591a\u957f\u65f6\u95f4: Period GPU mode number Time spent (clocks) Scanline (accessing OAM) 2 80 Scanline (accessing VRAM) 3 172 Horizontal blank 0 204 One line (scan and blank) - 456 Vertical blank 1 4560 (10 lines) Full frame (scans and vblank) - 70224 Game Boy \u7ed8\u5236\u56fe\u50cf\u65f6\u53ef\u5904\u4e8e\u56db\u79cd\u4e0d\u540c\u7684\u72b6\u6001, \u4ee5 GPU Mode \u4f5c\u4e3a\u533a\u5206. Mode 0: \u5904\u4e8e H-Blank \u671f\u95f4 Mode 1: \u5904\u4e8e V-Blank \u671f\u95f4 Mode 2: \u5904\u4e8e\u641c\u7d22 OAM(\u4e00\u6bb5\u5185\u5b58, \u7528\u4e8e\u5b58\u50a8\u753b\u9762\u7247\u6bb5)\u671f\u95f4 Mode 3: \u5904\u4e8e\u4f20\u8f93\u753b\u9762\u6570\u636e\u671f\u95f4(\u4ece\u6e38\u620f\u5361\u5e26\u5230 GPU \u5185\u5b58) \u5982\u6b64, \u4fbf\u53ef\u4ee5\u5148\u5728\u4ee3\u7801\u4e2d\u4eff\u771f\u5b9e\u73b0\u8fd9\u4e9b\u6b65\u9aa4\u8fc7\u7a0b. \u4e3a\u4e86\u4fdd\u6301\u5bf9\u786c\u4ef6\u7cfb\u7edf\u7684\u6a21\u62df, CPU \u6bcf\u6267\u884c\u5b8c\u4e00\u4e2a\u6307\u4ee4, \u5c31\u5fc5\u987b\u901a\u77e5 GPU \u8be5\u6307\u4ee4\u7684\u6307\u4ee4\u5468\u671f. \u521b\u5efa\u4e00\u4e2a Stat \u5bf9\u8c61\u4fdd\u5b58\u5f53\u524d\u6240\u5904\u7684\u65f6\u95f4\u6bb5, \u5e76\u5b9e\u73b0 next \u51fd\u6570: \u5b83\u63a5\u6536 CPU \u7684\u6307\u4ee4\u5468\u671f, \u5e76\u66f4\u65b0\u81ea\u5df1\u7684 Stat, \u540c\u65f6\u66f4\u65b0 ly \u5b57\u6bb5, \u8be5\u5b57\u6bb5\u8d1f\u8d23\u5b58\u50a8\u5f53\u524d\u626b\u63cf\u7ebf\u4f4d\u4e8e\u7b2c\u51e0\u884c. // LCD Status Register. pub struct Stat { // Bit 1-0 - Mode Flag (Mode 0-3, see below) (Read Only) // 0: During H-Blank // 1: During V-Blank // 2: During Searching OAM // 3: During Transferring Data to LCD Driver mode: u8, } pub struct Gpu { stat: Stat, dots: u32, ly: u8, ... } impl Gpu { pub fn next(&mut self, cycles: u32) { if cycles == 0 { return; } let c = (cycles - 1) / 80 + 1; for i in 0..c { if i == (c - 1) { self.dots += cycles % 80 } else { self.dots += 80 } let d = self.dots; self.dots %= 456; if d != self.dots { self.ly = (self.ly + 1) % 154; } if self.ly >= 144 { if self.stat.mode == 1 { continue; } self.stat.mode = 1; self.v_blank = true; } else if self.dots <= 80 { if self.stat.mode == 2 { continue; } self.stat.mode = 2; } else if self.dots <= (80 + 172) { self.stat.mode = 3; } else { if self.stat.mode == 0 { continue; } self.stat.mode = 0; // Render scanline Here } } } } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d, GPU \u7684\u65f6\u5e8f\u5df2\u7ecf\u786e\u5b9a(\u5373 Scanline, HBlank \u548c VBlank \u7b49\u9636\u6bb5), \u4f46 GPU \u7684\u5de5\u4f5c\u5c1a\u672a\u5230\u4f4d: \u56e0\u4e3aScanlilne \u76ee\u524d\u5e76\u6ca1\u6709\u88ab\u5b9e\u9645\u53bb\u7ed8\u5236.","title":"\u4e00\u5e27\u7684\u65f6\u95f4\u5468\u671f"},{"location":"content/gameboy/video/dot_matrix/","text":"\u70b9\u9635\u56fe\u4e0e\u6570\u5b57\u56fe\u50cf Game Boy \u6e38\u620f\u7684\u89c6\u9891\u8f93\u51fa\u662f\u975e\u5e38\u7ecf\u5178\u7684\u70b9\u9635(Dot Matrix)\u56fe\u5f62. \u70b9\u9635\u662f\u4e8c\u7ef4\u7684\u56fe\u5f62\u5316\u77e9\u9635, \u5e38\u5e38\u7528\u4e8e\u8868\u793a\u5b57\u7b26, \u7b26\u53f7\u548c\u56fe\u50cf. \u70b9\u9635\u56fe(\u4e5f\u88ab\u79f0\u4e3a\u4f4d\u56fe, \u6805\u683c\u56fe\u50cf, \u50cf\u7d20\u56fe\u7b49)\u770b\u8d77\u6765\u6709\u4e9b\u8bb8\u53e4\u8001, \u4f46\u4e8b\u5b9e\u4e0a\u73b0\u4ee3\u7684\u51e0\u4e4e\u4e00\u5207\u663e\u793a\u624b\u6bb5, \u5305\u62ec\u624b\u673a, \u7535\u8111\u6216\u662f IMAX \u7535\u5f71, \u5176\u672c\u8d28\u90fd\u662f\u62e5\u6709\u66f4\u9ad8\u5206\u8fa8\u7387\u7684\u70b9\u9635\u56fe\u5f62. \u70b9\u9635\u56fe\u7684\u4e00\u4e2a\u7279\u70b9\u662f\u56fe\u50cf\u5c06\u968f\u7740\u653e\u5927\u800c\u5931\u771f. \u4e0e\u4e4b\u76f8\u53cd\u7684\u662f\u4f7f\u7528\u7ebf\u548c\u66f2\u7ebf\u7684\u53e6\u4e00\u79cd\u4fe1\u606f\u663e\u793a\u5f62\u5f0f\u79f0\u4e3a\u77e2\u91cf\u663e\u793a. \u77e2\u91cf\u56fe\u50cf\u5728\u5730\u56fe\u7ed8\u5236\u90bb\u57df\u7528\u7684\u6bd4\u8f83\u591a, \u4e0d\u8fc7\u603b\u7684\u6765\u8bf4\u77e2\u91cf\u56fe\u8fdc\u4e0d\u5982\u70b9\u9635\u56fe\u901a\u7528. \u70b9\u9635\u56fe\u662f\u6700\u5c0f\u5355\u4f4d\u7531\u50cf\u7d20\u6784\u6210\u7684\u56fe, \u5176\u56fe\u50cf\u7531\u50cf\u7d20\u9635\u5217\u7684\u6392\u5217\u6765\u5b9e\u73b0, \u6bcf\u4e2a\u50cf\u7d20\u6709\u81ea\u5df1\u7684\u989c\u8272\u4fe1\u606f. \u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u7684\u8bdd, \u70b9\u9635\u56fe\u5c31\u50cf\u662f\u4e00\u4e2a\u6c99\u96d5, \u4ece\u8fdc\u5904\u770b\u5b83\u662f\u4e00\u4e2a\u6d51\u7136\u6574\u4f53, \u4f46\u51d1\u8fd1\u770b\u5c31\u80fd\u770b\u5230\u6784\u6210\u6c99\u96d5\u7684\u4e00\u7c92\u7c92\u6c99\u5b50. \u4e5f\u6b63\u56e0\u4e3a\u5982\u6b64, \u7edd\u5927\u90e8\u5206\u7684\u56fe\u50cf\u5904\u7406\u7b97\u6cd5, \u90fd\u662f\u4ee5\u5355\u4e2a\u50cf\u7d20\u70b9\u4e3a\u6700\u5c0f\u5355\u4f4d\u8fd0\u7b97\u7684.","title":"GB-\u89c6\u9891-\u70b9\u9635\u56fe"},{"location":"content/gameboy/video/dot_matrix/#_1","text":"Game Boy \u6e38\u620f\u7684\u89c6\u9891\u8f93\u51fa\u662f\u975e\u5e38\u7ecf\u5178\u7684\u70b9\u9635(Dot Matrix)\u56fe\u5f62. \u70b9\u9635\u662f\u4e8c\u7ef4\u7684\u56fe\u5f62\u5316\u77e9\u9635, \u5e38\u5e38\u7528\u4e8e\u8868\u793a\u5b57\u7b26, \u7b26\u53f7\u548c\u56fe\u50cf. \u70b9\u9635\u56fe(\u4e5f\u88ab\u79f0\u4e3a\u4f4d\u56fe, \u6805\u683c\u56fe\u50cf, \u50cf\u7d20\u56fe\u7b49)\u770b\u8d77\u6765\u6709\u4e9b\u8bb8\u53e4\u8001, \u4f46\u4e8b\u5b9e\u4e0a\u73b0\u4ee3\u7684\u51e0\u4e4e\u4e00\u5207\u663e\u793a\u624b\u6bb5, \u5305\u62ec\u624b\u673a, \u7535\u8111\u6216\u662f IMAX \u7535\u5f71, \u5176\u672c\u8d28\u90fd\u662f\u62e5\u6709\u66f4\u9ad8\u5206\u8fa8\u7387\u7684\u70b9\u9635\u56fe\u5f62. \u70b9\u9635\u56fe\u7684\u4e00\u4e2a\u7279\u70b9\u662f\u56fe\u50cf\u5c06\u968f\u7740\u653e\u5927\u800c\u5931\u771f. \u4e0e\u4e4b\u76f8\u53cd\u7684\u662f\u4f7f\u7528\u7ebf\u548c\u66f2\u7ebf\u7684\u53e6\u4e00\u79cd\u4fe1\u606f\u663e\u793a\u5f62\u5f0f\u79f0\u4e3a\u77e2\u91cf\u663e\u793a. \u77e2\u91cf\u56fe\u50cf\u5728\u5730\u56fe\u7ed8\u5236\u90bb\u57df\u7528\u7684\u6bd4\u8f83\u591a, \u4e0d\u8fc7\u603b\u7684\u6765\u8bf4\u77e2\u91cf\u56fe\u8fdc\u4e0d\u5982\u70b9\u9635\u56fe\u901a\u7528. \u70b9\u9635\u56fe\u662f\u6700\u5c0f\u5355\u4f4d\u7531\u50cf\u7d20\u6784\u6210\u7684\u56fe, \u5176\u56fe\u50cf\u7531\u50cf\u7d20\u9635\u5217\u7684\u6392\u5217\u6765\u5b9e\u73b0, \u6bcf\u4e2a\u50cf\u7d20\u6709\u81ea\u5df1\u7684\u989c\u8272\u4fe1\u606f. \u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u7684\u8bdd, \u70b9\u9635\u56fe\u5c31\u50cf\u662f\u4e00\u4e2a\u6c99\u96d5, \u4ece\u8fdc\u5904\u770b\u5b83\u662f\u4e00\u4e2a\u6d51\u7136\u6574\u4f53, \u4f46\u51d1\u8fd1\u770b\u5c31\u80fd\u770b\u5230\u6784\u6210\u6c99\u96d5\u7684\u4e00\u7c92\u7c92\u6c99\u5b50. \u4e5f\u6b63\u56e0\u4e3a\u5982\u6b64, \u7edd\u5927\u90e8\u5206\u7684\u56fe\u50cf\u5904\u7406\u7b97\u6cd5, \u90fd\u662f\u4ee5\u5355\u4e2a\u50cf\u7d20\u70b9\u4e3a\u6700\u5c0f\u5355\u4f4d\u8fd0\u7b97\u7684.","title":"\u70b9\u9635\u56fe\u4e0e\u6570\u5b57\u56fe\u50cf"},{"location":"content/gameboy/video/gpu/","text":"GPU \u5bc4\u5b58\u5668\u4e0e\u5185\u5b58\u7ed3\u6784 GPU \u5728\u56fe\u50cf\u6e32\u67d3\u4e2d\u9700\u8981\u7ba1\u7406\u4e00\u4e9b\u989d\u5916\u7684\u72b6\u6001\u6570\u636e, \u6bd4\u5982\u5728\u5149\u6805\u6210\u50cf\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u6e32\u67d3\u4e86\u5230\u7b2c\u51e0\u884c\u7b2c\u51e0\u5217. \u8fd9\u4e9b\u6570\u636e\u5747\u4fdd\u5b58\u5728 GPU \u5bc4\u5b58\u5668\u4e4b\u5185, CPU \u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u5bc4\u5b58\u5668\u6765\u63a7\u5236 GPU \u7684\u884c\u4e3a. GPU \u6240\u62e5\u6709\u7684\u5bc4\u5b58\u5668\u6570\u91cf\u8f83\u591a, \u672c\u8282\u5c06\u5bf9\u6b64\u8fdb\u884c\u4e00\u4e00\u89e3\u91ca. GPU \u5bc4\u5b58\u5668\u603b\u89c8: \u540d\u79f0 \u5730\u5740 \u63cf\u8ff0 LCD Control Register(LCDC) 0xff40 LCD \u63a7\u5236\u5bc4\u5b58\u5668 LCD Status Register 0xff41 LCD \u72b6\u6001\u5bc4\u5b58\u5668 Scroll Y(SCY) 0xff42 Scroll Y \u5bc4\u5b58\u5668 Scroll X(SCX) 0xff43 Scroll X \u5bc4\u5b58\u5668 LCDC Y-Coordinate(LY) 0xff44 \u5f53\u524d\u6570\u636e\u4f20\u8f93\u5230 LCD \u9a71\u52a8\u5668\u7684\u5782\u76f4\u7ebf LY Compare(LYC) 0xff45 \u7528\u4e8e\u548c LY \u8fdb\u884c\u6bd4\u8f83\u7684\u503c Window Y Position(WY) 0xff4a Window Y \u5bc4\u5b58\u5668 Window X Position(WX) 0xff4b Window X \u5bc4\u5b58\u5668 BG Palette Data(BGP) 0xff47 \u4e3a BG \u548c Window \u56fe\u5757\u7684\u989c\u8272\u7f16\u53f7\u5206\u914d\u7070\u8272\u9634\u5f71, \u975e CGB \u6a21\u5f0f\u4e13\u7528 Object Palette 0 Data(OBP0) 0xff48 sprite \u8c03\u8272\u677f 0, \u975e CGB \u6a21\u5f0f\u4e13\u7528 Object Palette 1 Data(OBP1) 0xff49 sprite \u8c03\u8272\u677f 1, \u975e CGB \u6a21\u5f0f\u4e13\u7528 Background Palette Index(BCPS/BGPI) 0xff68 Background Palette Index, CGB \u6a21\u5f0f\u4e13\u7528 Background Palette Data(BCPD/BGPD) 0xff69 Background Palette Data, CGB \u6a21\u5f0f\u4e13\u7528 Sprite Palette Index(OCPS/OBPI) 0xff6a Sprite Palette Index, CGB \u6a21\u5f0f\u4e13\u7528 Sprite Palette Data(OCPD/OBPD) 0xff6b Sprite Palette Data, CGB \u6a21\u5f0f\u4e13\u7528 DMA Transfer and Start Address(DMA) 0xff46 DMA \u4f20\u8f93\u8d77\u59cb\u5730\u5740 New DMA Source, High(HDMA1) 0xff51 DMA \u4f20\u8f93\u8d77\u59cb\u5730\u5740\u7684\u9ad8\u4f4d, CGB \u6a21\u5f0f\u4e13\u7528 New DMA Source, Low(HDMA2) 0xff52 DMA \u4f20\u8f93\u8d77\u59cb\u5730\u5740\u7684\u4f4e\u4f4d, CGB \u6a21\u5f0f\u4e13\u7528 New DMA Destination, High(HDMA3) 0xff53 DMA \u4f20\u8f93\u76ee\u7684\u5730\u5740\u7684\u9ad8\u4f4d, CGB \u6a21\u5f0f\u4e13\u7528 New DMA Destination, Low(HDMA4) 0xff54 DMA \u4f20\u8f93\u76ee\u7684\u5730\u5740\u7684\u4f4e\u4f4d, CGB \u6a21\u5f0f\u4e13\u7528 New DMA Length/Mode/Start(HDMA5) 0xff55 \u7528\u4e8e\u542f\u52a8\u4ece ROM \u6216 RAM \u5230 VRAM \u7684 DMA \u4f20\u8f93 VRAM Bank(VBK) 0xff4f VRAM Bank Number LCDC LCDC \u662f\u4e3b\u8981\u7684 LCD \u63a7\u5236\u5bc4\u5b58\u5668. \u5b83\u63a7\u5236\u753b\u9762\u4e0a\u7684\u5bf9\u8c61\u662f\u5426\u663e\u793a\u4ee5\u53ca\u5982\u4f55\u663e\u793a. LCD \u6db2\u6676\u663e\u793a\u5668(\u82f1\u8bed: liquid-crystal display)\u4e3a\u5e73\u9762\u8584\u578b\u7684\u663e\u793a\u8bbe\u5907, \u7531\u4e00\u5b9a\u6570\u91cf\u7684\u5f69\u8272\u6216\u9ed1\u767d\u50cf\u7d20\u7ec4\u6210, \u653e\u7f6e\u4e8e\u5149\u6e90\u6216\u8005\u53cd\u9762\u524d\u65b9. \u6db2\u6676\u663e\u793a\u5668\u529f\u8017\u4f4e, \u56e0\u6b64\u5907\u53d7\u5de5\u7a0b\u5e08\u9752\u7750, \u9002\u7528\u4e8e\u4f7f\u7528\u7535\u6c60\u7684\u7535\u5b50\u8bbe\u5907. \u5b83\u7684\u4e3b\u8981\u539f\u7406\u662f\u4ee5\u7535\u6d41\u523a\u6fc0\u6db2\u6676\u5206\u5b50\u4ea7\u751f\u70b9, \u7ebf, \u9762\u914d\u5408\u80cc\u90e8\u706f\u7ba1\u6784\u6210\u753b\u9762. \u5168\u79f0: Liquid Crystal Display \u7b80\u79f0: LCD \u7ec4\u6210: \u4e00\u5b9a\u6570\u91cf\u7684\u5f69\u8272\u6216\u9ed1\u767d\u50cf\u7d20 \u7279\u70b9: \u4f4e\u529f\u8017 \u6458\u81ea: https://zh.wikipedia.org/wiki/\u6db2\u6676\u663e\u793a\u5668 \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7 LCD Display Enable \u63a7\u5236 LCD \u662f\u5426\u4eae\u8d77 Bit 6 Window Tile Map Display Select \u9009\u62e9 Window Tile Map. \u5f53\u5b83\u4e3a 0 \u65f6, Tile Map \u8d77\u59cb\u5730\u5740\u4e3a 0x9800, \u5426\u5219 0x9C00 Bit 5 Window Display Enable \u63a7\u5236\u662f\u5426\u663e\u793a\u7a97\u53e3 Bit 4 BG & Window Tile Data Select \u8be5\u4f4d\u63a7\u5236 BG \u548c Window \u7528\u4e8e\u5bfb\u627e Tile \u65f6\u7684\u5bfb\u5740\u6a21\u5f0f Bit 3 BG Tile Map Display Select \u9009\u62e9 BG Tile Map. \u5f53\u5b83\u4e3a 0 \u65f6, Tile Map \u8d77\u59cb\u5730\u5740\u4f7f\u7528 0x9800, \u5426\u5219 0x9C00 Bit 2 OBJ Size \u63a7\u5236 Sprite \u7684\u5927\u5c0f. Sprite \u5927\u5c0f\u53ef\u4ee5\u4e3a\u4e00\u4e2a Tile \u6216 2 \u4e2a\u7ad6\u76f4\u6392\u5217\u7684 Tile Bit 1 OBJ Display Enable \u662f\u5426\u663e\u793a Sprite Bit 0 BG/Window Display/Priority \u63a7\u5236 Sprite \u7684\u4f18\u5148\u7ea7. \u5982\u679c\u8bbe\u7f6e, Sprite \u5c06\u59cb\u7ec8\u663e\u793a\u5728 BG \u4e4b\u4e0a Bit 0 \u63a7\u5236 Sprite \u76f8\u5bf9\u4e8e BG \u7684\u4f18\u5148\u7ea7. \u4e00\u4e2a\u4f8b\u5b50\u662f\u6e38\u620f\u4eba\u7269\u53ef\u4ee5\u88ab\u6e38\u620f\u80cc\u666f\u6240\u906e\u63a9(\u4f8b\u5982\u5f53\u6e38\u620f\u4eba\u7269\u8fdb\u5165\u8349\u4e1b\u65f6), \u4e0b\u9762\u7684\u622a\u56fe\u5c55\u793a\u4e86\u8fd9\u4e00\u73b0\u8c61. \u5b83\u7684\u4f18\u52bf\u5728\u4e8e\u5f00\u53d1\u8005\u65e0\u9700\u4e13\u95e8\u4e3a\u8fd9\u79cd\u906e\u63a9\u505a\u989d\u5916\u7684\u753b\u9762. \u4ee3\u7801\u5b9e\u73b0 // LCDC is the main LCD Control register. Its bits toggle what elements are displayed on the screen, and how. pub struct Lcdc { data: u8, } #[rustfmt::skip] impl Lcdc { pub fn power_up() -> Self { Self { data: 0b0100_1000 } } // LCDC.7 - LCD Display Enable // This bit controls whether the LCD is on and the PPU is active. Setting it to 0 turns both off, which grants // immediate and full access to VRAM, OAM, etc. fn bit7(&self) -> bool { self.data & 0b1000_0000 != 0x00 } // LCDC.6 - Window Tile Map Display Select // This bit controls which background map the Window uses for rendering. When it's reset, the $9800 tilemap is used, // otherwise it's the $9C00 one. fn bit6(&self) -> bool { self.data & 0b0100_0000 != 0x00 } // LCDC.5 - Window Display Enable // This bit controls whether the window shall be displayed or not. (TODO : what happens when toggling this // mid-scanline ?) This bit is overridden on DMG by bit 0 if that bit is reset. // Note that on CGB models, setting this bit to 0 then back to 1 mid-frame may cause the second write to be ignored. fn bit5(&self) -> bool { self.data & 0b0010_0000 != 0x00 } // LCDC.4 - BG & Window Tile Data Select // This bit controls which addressing mode the BG and Window use to pick tiles. // Sprites aren't affected by this, and will always use $8000 addressing mode. fn bit4(&self) -> bool { self.data & 0b0001_0000 != 0x00 } // LCDC.3 - BG Tile Map Display Select // This bit works similarly to bit 6: if the bit is reset, the BG uses tilemap $9800, otherwise tilemap $9C00. fn bit3(&self) -> bool { self.data & 0b0000_1000 != 0x00 } // LCDC.2 - OBJ Size // This bit controls the sprite size (1 tile or 2 stacked vertically). // Be cautious when changing this mid-frame from 8x8 to 8x16 : \"remnants\" of the sprites intended for 8x8 could // \"leak\" into the 8x16 zone and cause artifacts. fn bit2(&self) -> bool { self.data & 0b0000_0100 != 0x00 } // LCDC.1 - OBJ Display Enable // This bit toggles whether sprites are displayed or not. // This can be toggled mid-frame, for example to avoid sprites being displayed on top of a status bar or text box. // (Note: toggling mid-scanline might have funky results on DMG? Investigation needed.) fn bit1(&self) -> bool { self.data & 0b0000_0010 != 0x00 } // LCDC.0 - BG/Window Display/Priority // LCDC.0 has different meanings depending on Gameboy type and Mode: // Monochrome Gameboy, SGB and CGB in Non-CGB Mode: BG Display // When Bit 0 is cleared, both background and window become blank (white), and the Window Display Bit is ignored in // that case. Only Sprites may still be displayed (if enabled in Bit 1). // CGB in CGB Mode: BG and Window Master Priority // When Bit 0 is cleared, the background and window lose their priority - the sprites will be always displayed on // top of background and window, independently of the priority flags in OAM and BG Map attributes. fn bit0(&self) -> bool { self.data & 0b0000_0001 != 0x00 } } LCD Status Register LCD Status Register \u5bc4\u5b58\u5668\u63a7\u5236 LCD \u5f53\u524d\u7684\u663e\u793a\u72b6\u6001. \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 6 LYC=LY Coincidence Interrupt \u5f53 LYC \u4e0e LY \u76f8\u7b49\u4e14\u8be5\u4f4d\u4e3a 1 \u65f6, \u89e6\u53d1\u4e2d\u65ad Bit 5 Mode 2 OAM Interrupt \u6a21\u5f0f 2 OAM \u4e2d\u65ad\u5f00\u5173 Bit 4 Mode 1 V-Blank Interrupt \u6a21\u5f0f 1 V-Blank \u4e2d\u65ad\u5f00\u5173 Bit 3 Mode 0 H-Blank Interrupt \u6a21\u5f0f 0 H-Blank \u4e2d\u65ad\u5f00\u5173 Bit 2 Coincidence Flag \u5f53\u524d LY \u662f\u5426\u4e0e LYC \u76f8\u7b49 Bit 1-0 Mode Flag \u5f53\u524d GPU \u6240\u5904\u7684\u5468\u671f Bit 1 \u548c Bit 0 \u5171\u540c\u8d1f\u8d23\u5b58\u50a8 LCD \u63a7\u5236\u5668\u7684\u5f53\u524d\u72b6\u6001/\u6a21\u5f0f. \u6a21\u5f0f\u6709\u4ee5\u4e0b\u56db\u79cd\u53ef\u9009\u503c: Mode 0: During H-Blank Mode 1: During V-Blank Mode 2: During Searching OAM Mode 3: During Transferring Data to LCD Driver LCD \u63a7\u5236\u5668\u4ee5 4.194 MHz \u7684\u65f6\u949f\u5de5\u4f5c. \u6e38\u620f\u7684\u4e00\u5e27\u53ef\u8868\u8fbe\u4e3a 154 \u6761 scanline, 70224 \u50cf\u7d20\u70b9\u6216 16.74 ms. \u5728 scanline 0 \u5230 143 \u4e0a, LCD \u63a7\u5236\u5668\u6bcf 456 \u70b9\u5728\u6a21\u5f0f2, 3 \u548c 0 \u4e0a\u5faa\u73af\u4e00\u6b21. Scanline 144 \u81f3 153 \u4e3a\u6a21\u5f0f 1. \u542f\u7528\u753b\u9762\u663e\u793a\u540e, \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5178\u578b\u7684 Mode \u5207\u6362\u6d41\u7a0b: Mode 2 2_____2_____2_____2_____2_____2___________________2____ Mode 3 _33____33____33____33____33____33__________________3___ Mode 0 ___000___000___000___000___000___000________________000 Mode 1 ____________________________________11111111111111_____ \u5f53 LCD \u63a7\u5236\u5668\u6b63\u5728\u8bfb\u53d6\u89c6\u9891\u5b58\u50a8\u5668\u7684\u7279\u5b9a\u90e8\u5206\u65f6, CPU \u5c06\u65e0\u6cd5\u8bbf\u95ee\u67d0\u4e9b\u7279\u5b9a\u5b58\u50a8\u5668. \u5728 Mode 2 \u548c 3 \u4e0b\uff0cCPU \u65e0\u6cd5\u8bbf\u95ee OAM(0xfe00-0xfe9f) \u5728 Mode 3 \u671f\u95f4, CPU \u65e0\u6cd5\u8bbf\u95ee VRAM \u6216 CGB \u8c03\u8272\u677f\u6570\u636e(0xff69, 0xff6b) \u4ee3\u7801\u5b9e\u73b0 // LCD Status Register. pub struct Stat { // Bit 6 - LYC=LY Coincidence Interrupt (1=Enable) (Read/Write) enable_ly_interrupt: bool, // Bit 5 - Mode 2 OAM Interrupt (1=Enable) (Read/Write) enable_m2_interrupt: bool, // Bit 4 - Mode 1 V-Blank Interrupt (1=Enable) (Read/Write) enable_m1_interrupt: bool, // Bit 3 - Mode 0 H-Blank Interrupt (1=Enable) (Read/Write) enable_m0_interrupt: bool, // Bit 1-0 - Mode Flag (Mode 0-3, see below) (Read Only) // 0: During H-Blank // 1: During V-Blank // 2: During Searching OAM // 3: During Transferring Data to LCD Driver mode: u8, } impl Stat { pub fn power_up() -> Self { Self { enable_ly_interrupt: false, enable_m2_interrupt: false, enable_m1_interrupt: false, enable_m0_interrupt: false, mode: 0x00, } } } LCD Interrupts LCD \u53ef\u4ee5\u4ea7\u751f\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4e2d\u65ad, \u5b83\u4eec\u5206\u522b\u662f INT 40 \u548c INT 48. INT 40 - V-Blank Interrupt: V-Blank \u4e2d\u65ad\u6bcf\u79d2\u53ef\u56fa\u5b9a\u4ea7\u751f\u7ea6 60 \u6b21, \u8be5\u4e2d\u65ad\u53d1\u751f\u5728 V-Blank \u671f\u95f4(LY == 144 \u65f6). \u5728\u6b64\u671f\u95f4, Game Boy \u786c\u4ef6\u4e0d\u4f1a\u4f7f\u7528 VRAM, \u56e0\u6b64 CPU \u53ef\u4ee5\u81ea\u7531\u8bbf\u95ee\u5b83. \u8be5\u65f6\u95f4\u6bb5\u6301\u7eed\u5927\u7ea6 1.1 \u6beb\u79d2. INT 48 - LCDC Status Interrupt: \u5982 STAT \u5bc4\u5b58\u5668(0xff40)\u6240\u8ff0, \u6709\u591a\u79cd\u539f\u56e0\u53ef\u4ee5\u5bfc\u81f4\u6b64\u4e2d\u65ad\u53d1\u751f. \u4e00\u4e2a\u975e\u5e38\u666e\u904d\u7684\u539f\u56e0\u662f\u5411\u7528\u6237\u6307\u793a Game Boy \u7684 GPU \u786c\u4ef6\u4f55\u65f6\u5c06\u91cd\u753b\u7ed9\u5b9a\u7684 LCD scanline. \u8fd9\u5bf9\u4e8e\u52a8\u6001\u63a7\u5236 SCX/SCY \u5bc4\u5b58\u5668(0xff43/0xff42)\u6765\u6267\u884c\u7279\u6b8a\u7684\u89c6\u9891\u6548\u679c\u5f88\u6709\u7528. Scroll Y, Scroll X SCY(Scroll Y), SCX(Scroll X) \u6307\u5b9a\u8981\u663e\u793a\u5728 LCD \u4e0a\u7684\u56fe\u50cf\u5728 256 * 256 BG \u4e2d\u7684\u4f4d\u7f6e(\u5de6\u4e0a\u89d2). \u5f53\u7ed8\u56fe\u5927\u5c0f\u8d85\u8fc7 BG \u5730\u56fe\u533a\u57df\u7684\u53f3\u4e0b\u8fb9\u754c\u65f6, \u89c6\u9891\u63a7\u5236\u5668\u81ea\u52a8\u56de\u7ed5\u5230 BG \u5730\u56fe\u4e2d\u7684\u5de6\u4e0a\u4f4d\u7f6e. \u5728\u4e0a\u4e00\u5c0f\u8282\u300a\u56fe\u50cf\u663e\u793a\u7cfb\u7edf\u7b80\u4ecb\u300b\u6709\u8be6\u7ec6\u4ecb\u7ecd. LCDC Y-Coordinate LY(LCDC Y-Coordinate) \u8868\u793a\u5f53\u524d\u6b63\u5728\u7ed8\u5236 LCD \u5c4f\u5e55\u7684\u7b2c\u51e0\u884c. LY \u53ef\u4ee5\u53d6 0 \u5230 153 \u4e4b\u95f4\u7684\u4efb\u4f55\u503c, \u5176\u4e2d 144 \u548c 153 \u4e4b\u95f4\u7684\u503c\u8868\u793a\u6b63\u5904\u4e8e V-Blank \u5468\u671f. LYC LYC(LY Compare) \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u503c, Game Boy \u6c38\u4e45\u5730\u6bd4\u8f83 LYC \u548c LY \u5bc4\u5b58\u5668\u7684\u503c. \u5f53\u4e24\u4e2a\u503c\u76f8\u540c\u65f6, LCD Status Register \u4e2d\u7684 Coincidence Flag \u88ab\u7f6e\u4f4d, \u5e76\u4e14\u8bf7\u6c42 STAT \u4e2d\u65ad(\u5982\u679c\u5141\u8bb8\u7684\u8bdd). Window Y, Window X \u7528\u4e8e\u8868\u793a\u6307\u5b9a Window \u533a\u57df\u7684\u5de6\u4e0a\u4f4d\u7f6e. Window \u662f\u4e00\u4e2a\u53ef\u4ee5\u5728\u6b63\u5e38\u80cc\u666f\u4e0a\u65b9\u663e\u793a\u7684\u5907\u7528\u80cc\u666f\u533a\u57df, Sprite \u53ef\u80fd\u4ecd\u7136\u663e\u793a\u5728\u7a97\u53e3\u7684\u4e0a\u65b9\u6216\u540e\u65b9, \u5c31\u50cf\u6b63\u5e38\u7684 BG \u4e00\u6837. \u4e00\u4e2a\u6bd4\u8f83\u5f62\u8c61\u7684\u4f8b\u5b50\u662f, \u5f53\u6e38\u620f\u4efb\u52a1\u5728\u5927\u5730\u56fe\u4e0a\u4e0e NPC \u4ea4\u8c08\u65f6, \u5bf9\u8bdd\u6846\u901a\u5e38\u5c31\u662f\u4e00\u4e2a\u7a97\u53e3. Window \u5728\u4e0a\u4e00\u5c0f\u8282\u300a\u56fe\u50cf\u663e\u793a\u7cfb\u7edf\u7b80\u4ecb\u300b\u6709\u8be6\u7ec6\u4ecb\u7ecd. \u5f53\u4f4d\u7f6e\u8bbe\u7f6e\u5728\u8303\u56f4 0 <= WX <= 166, 0 <= WY <= 143 \u65f6, \u7a97\u53e3\u53d8\u4e3a\u53ef\u89c1(\u5982\u679c LCDC \u5bc4\u5b58\u5668\u5141\u8bb8\u663e\u793a\u7a97\u53e3\u7684\u8bdd). \u6ce8\u610f: WX = 7, WY = 0 \u7684\u4f4d\u7f6e\u5c06\u4f7f\u7a97\u53e3\u4f4d\u4e8e LCD \u7684\u5de6\u4e0a\u89d2(\u5b8c\u5168\u8986\u76d6\u6b63\u5e38\u80cc\u666f). BGP BGP(BG Palette Data) \u4e3a BG \u548c Window Tile \u7684\u989c\u8272\u7f16\u53f7\u6307\u5b9a\u5bf9\u5e94\u7070\u5ea6. \u53ea\u5728\u975e CGB \u6a21\u5f0f(\u975e\u5f69\u8272 Game Boy \u6216\u5f69\u8272 Game Boy \u4ee5\u9ed1\u767d\u6a21\u5f0f\u8fd0\u884c)\u4e0b\u6709\u6548. \u4f4d \u8bf4\u660e Bit 7-6 \u7f16\u53f7\u4e3a 3 \u7684\u7070\u5ea6(\u9ed1) Bit 5-4 \u7f16\u53f7\u4e3a 2 \u7684\u7070\u5ea6(\u6df1\u7070) Bit 3-2 \u7f16\u53f7\u4e3a 1 \u7684\u7070\u5ea6(\u6d45\u7070) Bit 1-0 \u7f16\u53f7\u4e3a 0 \u7684\u7070\u5ea6(\u767d) \u4e00\u79cd\u5e38\u89c1\u7684\u7070\u5ea6\u503c\u9009\u62e9\u662f \u7f16\u53f7 \u989c\u8272 0 White 1 Light gray 2 Dark gray 3 Black \u5bf9\u4e8e CGB \u6765\u8bf4, Palettes \u6570\u636e\u53d6\u81ea CGB Palettes Memory, \u540e\u6587\u5c06\u4f1a\u4ecb\u7ecd. OBP0 OBP0(Object Palette 0 Data) \u4e3a Sprite Palettes 0 \u6307\u5b9a\u7070\u5ea6. \u5b83\u4e0e BGP(0xff47)\u5b8c\u5168\u76f8\u540c, \u53ea\u662f\u56e0\u4e3a Sprite \u7684\u989c\u8272\u6570\u636e 00 \u662f\u900f\u660e\u7684, \u6240\u4ee5\u4e0d\u4f7f\u7528\u4f4e\u4e24\u4f4d. OBP1 OBP1(Object Palette 1 Data) \u4e3a Sprite Palettes 1 \u6307\u5b9a\u7070\u5ea6. \u5b83\u4e0e BGP(0xff47)\u5b8c\u5168\u76f8\u540c, \u53ea\u662f\u56e0\u4e3a Sprite \u7684\u989c\u8272\u6570\u636e 00 \u662f\u900f\u660e\u7684, \u6240\u4ee5\u4e0d\u4f7f\u7528\u4f4e\u4e24\u4f4d. BCPS/BGPI BGPI(Background Palette Index) \u7528\u4e8e\u5bfb\u5740 BG Palettes \u5b58\u50a8\u5668\u4e2d\u7684\u4e00\u4e2a\u5b57\u8282. \u8be5\u5b58\u50a8\u5668\u4e2d\u7684\u6bcf\u4e24\u4e2a\u5b57\u8282\u5b9a\u4e49\u4e00\u4e2a\u989c\u8272\u503c. \u524d 8 \u4e2a\u5b57\u8282\u5b9a\u4e49 Palette 0(BGP0) \u7684 Color 0-3, \u4ee5\u6b64\u7c7b\u63a8 BGP 1-7. \u4f4d \u8bf4\u660e Bit 0-5 \u7d22\u5f15(00-3f) Bit 7 \u81ea\u589e\u5f00\u5173(0=\u7981\u7528, 1=\u6bcf\u6b21\u5199\u64cd\u4f5c\u540e\u81ea\u589e) \u53ef\u4ee5\u901a\u8fc7\u5bc4\u5b58\u5668 0xff69 \u4ece\u6307\u5b9a\u7684\u7d22\u5f15\u5730\u5740\u8bfb\u53d6/\u5199\u5165\u6570\u636e. \u5982\u679c\u8bbe\u7f6e\u4e86\u81ea\u589e\u5f00\u5173, \u6bcf\u6b21\u5199\u6570\u636e\u5230 0xff69 \u540e\u7d22\u5f15(Bit 0-5)\u4f1a\u81ea\u52a8\u9012\u589e. \u5f53\u4ece 0xff69 \u8bfb\u53d6\u65f6, \u4e0d\u4f1a\u81ea\u52a8\u9012\u589e. \u56e0\u6b64\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5fc5\u987b\u624b\u52a8\u9012\u589e\u7d22\u5f15. \u53ef\u4ee5\u5728\u975e V-Blank \u548c H-Blank \u671f\u95f4\u8bbf\u95ee\u8be5\u5bc4\u5b58\u5668. \u4ee3\u7801\u5b9e\u73b0 // This register is used to address a byte in the CGBs Background Palette Memory. Each two byte in that memory define a // color value. The first 8 bytes define Color 0-3 of Palette 0 (BGP0), and so on for BGP1-7. // Bit 0-5 Index (00-3F) // Bit 7 Auto Increment (0=Disabled, 1=Increment after Writing) // Data can be read/written to/from the specified index address through Register FF69. When the Auto Increment bit is // set then the index is automatically incremented after each <write> to FF69. Auto Increment has no effect when // <reading> from FF69, so the index must be manually incremented in that case. Writing to FF69 during rendering still // causes auto-increment to occur. // Unlike the following, this register can be accessed outside V-Blank and H-Blank. struct Bgpi { i: u8, auto_increment: bool, } impl Bgpi { fn power_up() -> Self { Self { i: 0x00, auto_increment: false, } } fn get(&self) -> u8 { let a = if self.auto_increment { 0x80 } else { 0x00 }; a | self.i } fn set(&mut self, v: u8) { self.auto_increment = v & 0x80 != 0x00; self.i = v & 0x3f; } } BCPD/BGPD BGPD(Background Palette Data) \u5bc4\u5b58\u5668\u5141\u8bb8\u8bfb\u53d6\u6216\u5199\u5165\u901a\u8fc7\u5bc4\u5b58\u5668 0xff68 \u5bfb\u5740\u7684 BG Palettes \u7684\u6570\u636e. \u6bcf\u79cd\u989c\u8272\u7531\u4e24\u4e2a\u5b57\u8282\u5b9a\u4e49. \u4f4d \u8bf4\u660e Bit 0-4 \u7ea2 (00-1f) Bit 5-9 \u7eff (00-1f) Bit 10-14 \u84dd (00-1f) \u4e0e VRAM \u6781\u4e3a\u76f8\u4f3c, \u5728\u4ece LCD \u63a7\u5236\u5668\u8bfb\u53d6\u8c03\u8272\u677f\u5185\u5b58\u671f\u95f4, \u65e0\u6cd5\u8bfb\u53d6/\u5199\u5165\u8c03\u8272\u677f\u5185\u5b58\u4e2d\u7684\u6570\u636e(\u5373\u5f53 STAT \u5bc4\u5b58\u5668\u6307\u793a\u6a21\u5f0f 3 \u65f6). OCPS/OBPI OBPI(Sprite Palette Index) \u5bc4\u5b58\u5668\u4e0e BGPI \u5bc4\u5b58\u5668\u63cf\u8ff0\u7684\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837, \u4f46\u533a\u522b\u5728\u4e8e\u5176\u521d\u59cb\u5316 Sprite Palettes OBP 0-7. OCPD/OBPD OBPD(Sprite Palette Data) \u5bc4\u5b58\u5668\u4e0e BGPD \u5bc4\u5b58\u5668\u63cf\u8ff0\u7684\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837, \u4f46\u533a\u522b\u5728\u4e8e\u5176\u521d\u59cb\u5316 Sprite Palettes OBP 0-7. \u8bf7\u6ce8\u610f, \u867d\u7136\u53ef\u4ee5\u4e3a\u6bcf\u4e2a OBP Palettes \u5b9a\u4e49\u56db\u79cd\u989c\u8272, \u4f46\u662f\u53ea\u80fd\u663e\u793a\u6bcf\u4e2a Sprite Palette \u7684 Color 1-3, \u800c Color 0 \u59cb\u7ec8\u662f\u900f\u660e\u7684, \u5e76\u4e14\u53ef\u4ee5\u521d\u59cb\u5316\u4e3a\u65e0\u5173\u503c\u6216\u4ece\u4e0d\u521d\u59cb\u5316. \u6ce8\u610f\uff1a\u6240\u6709 Sprite \u7684\u989c\u8272\u90fd\u4e0d\u4f1a\u7531\u5f15\u5bfc ROM \u521d\u59cb\u5316. \u4eff\u771f\u5668\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684 RGB \u8272\u5f69\u8f6c\u6362 \u4e0e\u73b0\u5728\u5e38\u7528\u7684 8 \u4f4d RGB \u8272\u5f69\u6a21\u5f0f\u4e0d\u540c, Game Boy \u53ea\u4f7f\u7528 4 \u4f4d\u8868\u793a\u4e00\u79cd\u989c\u8272\u901a\u9053, \u6bcf\u79cd\u8272\u5f69\u901a\u9053\u7684\u8303\u56f4\u4f7f 0x00 \u5230 0x1f. \u5728 PC \u4e0a\u663e\u793a\u56fe\u50cf\u989c\u8272\u65f6, \u9700\u8981\u8fdb\u884c\u4e00\u6b21\u5bf9\u6bd4\u62c9\u4f38, \u5373\u62c9\u4f38\u5230 0x00 \u5230 0xff \u8303\u56f4. \u4f46\u662f\u8981\u6ce8\u610f\u8fd9\u79cd\u8f6c\u6362\u5e76\u4e0d\u662f\u7ebf\u6027\u7684, \u76ee\u524d\u5c1d\u8bd5\u4e0b\u6765\u6bd4\u8f83\u5408\u7406\u7684\u62c9\u4f38\u7b97\u6cd5\u5982\u4e0b\u6240\u793a: fn get_rgb(r: u8, g: u8, b: u8) -> (u8, u8, u8) { let r = u32::from(r); let g = u32::from(g); let b = u32::from(b); let lr = ((r * 13 + g * 2 + b) >> 1) as u8; let lg = ((g * 3 + b) << 1) as u8; let lb = ((r * 3 + g * 2 + b * 11) >> 1) as u8; return (lr, lg, lb); } \u8fd9\u4e2a\u7b97\u6cd5\u5e76\u975e\u5305\u542b\u4ec0\u4e48\u6570\u5b66\u8bc1\u660e\u5728\u91cc\u9762, \u53ea\u662f\u5728\u4e0d\u65ad\u5c1d\u8bd5\u5404\u79cd\u8f6c\u6362\u65b9\u6cd5\u540e\u53d1\u73b0\u5176\u5bf9\u4eba\u773c\u6bd4\u8f83\u53cb\u597d. \u4e0e\u4e4b\u7c7b\u4f3c\u7684\u5728\u5f69\u8272\u56fe\u50cf\u8f6c\u7070\u5ea6\u56fe\u4e0a, \u6709\u4e00\u4e2a\u5f88\u8457\u540d\u7684\u5fc3\u7406\u5b66\u516c\u5f0f: Gray = R*0.299 + G*0.587 + B*0.114 \u8be5\u516c\u5f0f\u540c\u6837\u662f\u4eba\u4e3a\u6311\u9009\u51fa\u6765\u7684. DMA \u5199\u5165 DMA(DMA Transfer and Start Address) \u5bc4\u5b58\u5668\u4f1a\u542f\u52a8\u4ece ROM \u6216 RAM \u5230 OAM \u5b58\u50a8\u5668\u7684 DMA \u4f20\u8f93(\u4f20\u8f93\u7684\u6570\u636e\u662f Sprite \u5c5e\u6027\u8868). \u5199\u5165\u7684\u503c\u4f1a\u9664\u4ee5 0x0100 \u540e\u4f5c\u4e3a\u6570\u636e\u6e90\u5730\u5740\u7684\u9ad8\u4e24\u4f4d\u5730\u5740, \u6570\u636e\u6e90\u4e0e\u6570\u636e\u76ee\u7684\u5730\u5982\u4e0b\u6240\u793a: Source: XX00-XX9F Destination: FE00-FE9F \u4f20\u8f93\u9700\u8981 160 \u4e2a\u673a\u5668\u5468\u671f, \u7ea6 152 \u5fae\u79d2. \u5728\u6b64\u671f\u95f4, CPU \u53ea\u80fd\u8bbf\u95ee HRAM \u5185\u5b58\u533a\u95f4(0xff80-0xfffe). HDMA1, HDMA2 \u4e24\u4e2a\u5bc4\u5b58\u5668\u5171\u540c\u7ec4\u6210\u4e86 New DMA Source. New DMA Source \u7684\u884c\u4e3a\u540c DMA \u7c7b\u4f3c, \u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u6307\u5b9a\u4f20\u8f93\u6e90\u7684\u5730\u5740, \u901a\u5e38, \u8fd9\u5e94\u8be5\u662f ROM, SRAM \u6216 WRAM \u4e2d\u7684\u4e00\u4e2a\u5730\u5740, \u56e0\u6b64\u5728 0x0000-0x7ff0 \u6216 0xa000-0xdff0 \u8303\u56f4\u5185. \u8be5\u5730\u5740\u7684\u4f4e 4 \u4f4d\u5c06\u88ab\u5ffd\u7565\u5e76\u89c6\u4e3a 0. HDMA3, HDMA4 \u4e24\u4e2a\u5bc4\u5b58\u5668\u5171\u540c\u7ec4\u6210\u4e86 New DMA Destination. New DMA Destination \u53ea\u6709\u4e2d\u95f4\u7684\u7b2c 12-4 \u4f4d\u6709\u6548, \u4e14\u4f4e 4 \u4f4d\u88ab\u5ffd\u7565\u89c6\u4e3a 0. \u56e0\u6b64 New DMA Destination \u7684\u8303\u56f4\u662f 0x8000-0x9ff0. HDMA5 HDMA5(New DMA Length/Mode/Start) \u7528\u4e8e\u542f\u52a8\u4ece ROM \u6216 RAM \u5230 VRAM \u7684 DMA \u4f20\u8f93. \u6e90\u8d77\u59cb\u5730\u5740\u4e3a New DMA Source, \u76ee\u6807\u5730\u5740\u4e3a New DMA Destination. \u5411\u8be5\u5bc4\u5b58\u5668\u5199\u5165\u6570\u636e\u5373\u53ef\u5f00\u59cb\u4f20\u8f93, \u5176\u4f4e 7 \u4f4d\u6307\u5b9a\u4f20\u8f93\u957f\u5ea6. \u4f20\u8f93\u957f\u5ea6\u4e0e\u4f4e 7 \u4f4d\u6570\u636e\u7684\u5173\u7cfb\u4e3a Length = 0x10 * (X + 1) , \u56e0\u6b64 Length \u7684\u8303\u56f4\u4e3a 0x0010 \u5230 0x0800. \u8be5\u5bc4\u5b58\u5668\u6700\u9ad8\u4f4d\u8868\u793a\u4f20\u8f93\u6a21\u5f0f: Bit7=0 \u65f6, \u4f7f\u7528 General Purpose DMA. \u4f7f\u7528\u6b64\u4f20\u8f93\u65b9\u6cd5\u65f6, \u5c06\u7acb\u5373\u4f20\u8f93\u6240\u6709\u6570\u636e. \u7a0b\u5e8f\u7684\u6267\u884c\u5c06\u6682\u505c, \u76f4\u5230\u4f20\u8f93\u5b8c\u6210. \u8bf7\u6ce8\u610f, \u5373\u4f7f LCD \u63a7\u5236\u5668\u5f53\u524d\u6b63\u5728\u8bbf\u95ee VRAM, DMA \u4e5f\u4f1a\u5c1d\u8bd5\u590d\u5236\u6570\u636e. \u56e0\u6b64, \u4ec5\u5f53\u663e\u793a\u5668\u88ab\u7981\u7528\u65f6, \u6216\u8005\u5728 V-Blank \u671f\u95f4, \u6216\u8005(\u5bf9\u4e8e\u76f8\u5f53\u77ed\u7684\u5757\u957f\u5ea6)\u5728 H-Blank \u671f\u95f4, \u624d\u5e94\u4f7f\u7528\u901a\u7528 DMA. \u4f20\u8f93\u5b8c\u6210\u540e\u7a0b\u5e8f\u7684\u6267\u884c\u7ee7\u7eed, \u5e76\u5411 0xff55 \u5199\u5165\u503c 0xff. Bit7=1 \u65f6, \u4f7f\u7528 H-Blank DMA. H-Blank DMA \u5728\u6bcf\u4e2a H-Blank \u671f\u95f4\u4f20\u8f93 0x10 \u5b57\u8282\u7684\u6570\u636e(\u5373 LY = 0-143 \u65f6). \u5728 V-Blank \u671f\u95f4\u4e0d\u4f1a\u4f20\u8f93\u6570\u636e(\u5373 LY = 144-153) \u65f6. \u5bc4\u5b58\u5668 0xff55 \u7684\u4f4e 7 \u4f4d\u5b58\u50a8\u5269\u4f59\u5f85\u4f20\u8f93\u6570\u636e\u7684\u5927\u5c0f(\u6ce8\u610f\u9700\u8981\u4f7f\u7528\u4e0a\u8ff0\u516c\u5f0f\u8fdb\u884c\u8f6c\u6362). \u503c 0xff \u8868\u793a\u5f53\u524d\u4f20\u8f93\u5df2\u5b8c\u6210. \u901a\u8fc7\u5c06 0 \u5199\u5165 0xff55 \u7684\u6700\u9ad8\u4f4d, \u4e5f\u53ef\u4ee5\u7ec8\u6b62\u5f53\u524d\u7684 H-Blank DMA \u4f20\u8f93. DMA \u4ee3\u7801\u5b9e\u73b0 pub struct Hdma { // These two registers specify the address at which the transfer will read data from. Normally, this should be // either in ROM, SRAM or WRAM, thus either in range 0000-7FF0 or A000-DFF0. [Note : this has yet to be tested on // Echo RAM, OAM, FEXX, IO and HRAM]. Trying to specify a source address in VRAM will cause garbage to be copied. // The four lower bits of this address will be ignored and treated as 0. pub src: u16, // These two registers specify the address within 8000-9FF0 to which the data will be copied. Only bits 12-4 are // respected; others are ignored. The four lower bits of this address will be ignored and treated as 0. pub dst: u16, pub active: bool, pub mode: HdmaMode, pub remain: u8, } impl Gpu { fn run_dma(&mut self) -> u32 { if !self.hdma.active { return 0; } match self.hdma.mode { HdmaMode::Gdma => { let len = u32::from(self.hdma.remain) + 1; for _ in 0..len { self.run_dma_hrampart(); } self.hdma.active = false; len * 8 } HdmaMode::Hdma => { if !self.gpu.h_blank { return 0; } self.run_dma_hrampart(); if self.hdma.remain == 0x7f { self.hdma.active = false; } 8 } } } fn run_dma_hrampart(&mut self) { let mmu_src = self.hdma.src; for i in 0..0x10 { let b: u8 = self.get(mmu_src + i); self.gpu.set(self.hdma.dst + i, b); } self.hdma.src += 0x10; self.hdma.dst += 0x10; if self.hdma.remain == 0 { self.hdma.remain = 0x7f; } else { self.hdma.remain -= 1; } } } VRAM Tile Data Tile \u6570\u636e\u5b58\u50a8\u5728 VRAM \u4e2d\u7684\u5730\u5740 0x8000-0x97ff \u533a\u95f4\u5185, \u5176\u4e2d\u4e00\u4e2a Tile \u4e3a 16 \u5b57\u8282\u5927, \u8be5\u533a\u57df\u603b\u5171\u5b9a\u4e49\u4e86 384 \u4e2a Tile \u7684\u6570\u636e. \u5728 CGB \u6a21\u5f0f\u4e0b, \u7531\u4e8e\u6709\u4e24\u4e2a VRAM \u5e93, \u56e0\u6b64\u5b83\u52a0\u500d\u81f3 768 \u4e2a Tile. \u6bcf\u4e2a Tile \u7684\u5927\u5c0f\u4e3a 8x8 \u50cf\u7d20, \u989c\u8272\u6df1\u5ea6\u4e3a 4 \u79cd\u989c\u8272/\u7070\u8272\u9634\u5f71. Tile \u53ef\u4ee5\u7528\u4e8e\u663e\u793a\u4e3a BG \u6216 Window \u8d34\u56fe\u7684\u4e00\u90e8\u5206, \u6216\u663e\u793a\u4e3a Sprite. \u8bf7\u6ce8\u610f, Sprite \u4e0d\u4f7f\u7528\u989c\u8272 0, \u989c\u8272 0 \u5728 Sprite \u4e2d\u662f\u900f\u660e\u7684. 0x8000-0x97ff \u5185\u5b58\u533a\u95f4\u88ab\u5206\u4e3a 3 \u4e2a\u660e\u663e\u7684\u529f\u80fd\u4e0d\u540c\u7684\u5757(Block), \u6bcf\u4e2a\u5757\u5305\u542b 128 \u4e2a Tile: Block 0 is 0x8000-0x87ff Block 1 is 0x8800-0x8fff Block 2 is 0x9000-0x97ff \u89c2\u5bdf\u6bcf\u4e2a\u533a\u95f4\u7684\u8303\u56f4, \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a Tile \u90fd\u53ef\u4ee5\u88ab\u4e00\u4e2a Block Index \u548c\u4e00\u4e2a 8 \u4f4d\u7684 Tile Index \u8fdb\u884c\u7d22\u5f15, \u4e0d\u8fc7\u4e0d\u540c\u7684\u533a\u95f4\u7d22\u5f15\u65b9\u5f0f\u53ef\u80fd\u4e0d\u540c: \"8000 \u5bfb\u5740\"\u65b9\u6cd5\u91c7\u7528 0x8000 \u4f5c\u4e3a\u5176\u57fa\u7840\u5730\u5740, \u5e76\u5c06 8 \u4f4d Tile Index \u4f5c\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\u4e0e\u5176\u76f8\u52a0(\u8fd9\u610f\u5473\u7740 Tile 0-127 \u5728 Block 0 \u4e2d, Tile 128-255 \u5728 Block 1\u4e2d); \"8800 \u5bfb\u5740\"\u65b9\u6cd5\u91c7\u7528 0x9000 \u4f5c\u4e3a\u5176\u57fa\u7840\u5730\u5740, \u5e76\u5c06 8 \u4f4d Tile Index \u4f5c\u4e3a\u6709\u7b26\u53f7\u6574\u6570\u4e0e\u5176\u76f8\u52a0. \u6362\u53e5\u8bdd\u8bf4, \"8000 \u5bfb\u5740\"\u4ece Block 0 \u83b7\u53d6 Tile 0-127, \u4ece Block 1 \u83b7\u53d6 Tile 128-255, \u800c\"8800 \u5bfb\u5740\"\u4ece Block 2 \u83b7\u53d6 Tile 0-127, \u4ece Block 1 \u83b7\u53d6 Tile 128-255. \u53ef\u4ee5\u6ce8\u610f\u5230 Block 1 \u7531\u4e24\u79cd\u5bfb\u5740\u65b9\u6cd5\u5171\u4eab. Sprite \u603b\u662f\u4f7f\u7528 8000 \u5bfb\u5740, \u4f46 BG \u548c Window \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4e00\u79cd\u6a21\u5f0f, \u5177\u4f53\u7531 LCDC(LCD Control Register) \u7684 Bit 4 \u63a7\u5236. \u6bcf\u4e2a Tile \u5360\u7528 16 \u4e2a\u5b57\u8282, \u5176\u4e2d\u6bcf\u4e2a 2 \u4e2a\u5b57\u8282\u4ee3\u8868\u4e00\u884c: Byte 0-1 First Line (Upper 8 pixels) Byte 2-3 Next Line etc. Tile \u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u7684\u4f4e\u4f4d\u4fdd\u6301\u5728\u4e00\u4e2a\u5b57\u8282\u4e2d, \u800c\u9ad8\u4f4d\u5728\u53e6\u4e00\u4e2a\u5b57\u8282\u4e2d. \u4e0b\u9762\u7684\u7ed3\u6784\u8868\u793a Tile \u4e2d\u7684 8 \u4e2a\u50cf\u7d20, \u7b2c\u4e00\u4e2a\u50cf\u7d20\u662f 01 = \u6df1\u7070, \u7b2c\u4e8c\u4e2a\u50cf\u7d20\u662f 10 = \u6d45\u7070, \u5e76\u4ee5\u6b64\u7c7b\u63a8. [0x803e] | 0 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | = 0x4e [0x803f] | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | = 0x8d \u56e0\u6b64, \u6bcf\u4e2a\u50cf\u7d20\u7684\u8272\u6570\u8303\u56f4\u4e3a 0-3. \u6839\u636e\u5f53\u524d\u8c03\u8272\u677f, \u989c\u8272\u7f16\u53f7\u88ab\u8f6c\u6362\u4e3a\u771f\u5b9e\u989c\u8272(\u6216\u7070\u8272\u9634\u5f71). VRAM Background Maps Game Boy \u5728\u5730\u5740 0x9800-0x9bff \u548c 0x9c00-0x9fff \u7684 VRAM \u4e2d\u5305\u542b\u4e24\u4e2a\u5927\u5c0f\u4e3a 32x32 \u7684 Tile \u6620\u5c04. \u6bcf\u4e2a\u6620\u5c04\u5173\u7cfb\u90fd\u53ef\u7528\u4e8e\u663e\u793a BG \u6216 Window \u7684\u80cc\u666f. VRAM \u4e2d\u5305\u542b\u4e00\u4e2a\u88ab\u79f0\u4e4b\u4e3a Background Tile Map \u7684\u4e00\u4e2a\u533a\u57df, \u5176\u4e2d\u5305\u542b\u8981\u663e\u793a\u7684 Tile \u6570\u91cf. \u5b83\u7ec4\u7ec7\u4e3a 32 \u884c, \u6bcf\u884c 32 \u4e2a\u5b57\u8282. \u6bcf\u4e2a\u5b57\u8282\u5305\u542b\u8bb8\u591a\u8981\u663e\u793a\u7684\u56fe\u5757. \u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u5bfb\u5740\u6a21\u5f0f\u8fdb\u884c\u5bfb\u5740(\u5982\u4e0a\u6240\u8ff0). \u7531\u4e8e\u4e00\u4e2a\u80cc\u666f\u56fe\u5757\u7684\u5927\u5c0f\u4e3a 8x8 \u50cf\u7d20, \u56e0\u6b64 BG \u8d34\u56fe\u53ef\u4ee5\u5bb9\u7eb3 256x256 \u50cf\u7d20\u7684\u56fe\u7247, \u5e76\u4e14\u8be5\u56fe\u7247\u7684\u5176\u4e2d 160x144 \u50cf\u7d20\u7684\u533a\u57df\u53ef\u4ee5\u663e\u793a\u5728 LCD \u5c4f\u5e55\u4e0a. \u5728 CGB \u6a21\u5f0f\u4e0b, VRAM Bank 1 \u4e2d\u5b58\u50a8\u4e86\u989d\u5916\u7684\u4e00\u4e2a 32x32 \u5b57\u8282\u7684\u6620\u5c04(\u6bcf\u4e2a\u5b57\u8282\u5b9a\u4e49\u4e86 VRAM Bank 0 \u4e2d\u76f8\u5e94\u7684 Tile \u7684\u5c5e\u6027). \u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50: 1:9800 \u5b9a\u4e49\u4e86\u5b58\u50a8\u4e8e 0:9800 \u7684 Tile \u7684\u5c5e\u6027. \u4f4d \u8bf4\u660e Bit 0-2 \u80cc\u666f\u8c03\u8272\u677f\u7f16\u53f7 (BGP0-7) Bit 3 Tile VRAM \u7684 Bank number (0=Bank 0, 1=Bank 1) Bit 4 \u672a\u4f7f\u7528 Bit 5 \u662f\u5426\u6c34\u5e73\u7ffb\u8f6c (0=Normal, 1=Mirror horizontally) Bit 6 \u662f\u5426\u5782\u76f4\u7ffb\u8f6c (0=Normal, 1=Mirror vertically) Bit 7 BG \u76f8\u5bf9\u4e8e Sprite \u7684\u663e\u793a\u4f18\u5148\u7ea7 (0=Use OAM priority bit, 1=BG Priority) \u5f53 Bit 7 \u7f6e\u4f4d\u65f6, \u76f8\u5e94\u7684 BG Tile \u5c06\u4f18\u5148\u4e8e\u6240\u6709 Sprite(\u65e0\u8bba OAM \u5b58\u50a8\u5668\u4e2d\u7684\u4f18\u5148\u7ea7\u4f4d\u5982\u4f55). LCDC \u5bc4\u5b58\u5668\u7684\u4f4d 0 \u8fd8\u6709\u4e00\u4e2a\u4e3b\u4f18\u5148\u7ea7\u6807\u5fd7, \u5f53\u6e05\u96f6\u65f6, \u5b83\u4f1a\u8986\u76d6\u6240\u6709\u5176\u4ed6\u4f18\u5148\u7ea7\u4f4d. SCY \u548c SCX \u5bc4\u5b58\u5668\u53ef\u7528\u4e8e\u6eda\u52a8 BG, \u5176\u5141\u8bb8\u5728\u603b 256x256 \u50cf\u7d20 BG \u56fe\u4e2d\u9009\u62e9\u53ef\u89c1\u7684 160x144 \u50cf\u7d20\u533a\u57df\u7684\u539f\u70b9. \u9664\u4e86 BG, \u8fd8\u6709\u4e00\u4e2a\u8986\u76d6 BG \u7684 Windos. Windos \u4e0d\u53ef\u6eda\u52a8, \u4e5f\u5c31\u662f\u8bf4, \u5b83\u59cb\u7ec8\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u663e\u793a. \u53ef\u4ee5\u901a\u8fc7 WX \u548c WY \u5bc4\u5b58\u5668\u8c03\u6574\u5c4f\u5e55\u4e0a\u7a97\u53e3\u7684\u4f4d\u7f6e. \u6ce8\u610f\u7a97\u53e3\u5de6\u4e0a\u89d2\u7684\u5c4f\u5e55\u5750\u6807\u4e3a (WX-7, WY). \u7a97\u53e3\u4e0e BG \u5171\u4eab\u76f8\u540c\u7684 Tile \u6570\u636e\u8868. \u80cc\u666f\u548c\u7a97\u53e3\u90fd\u53ef\u4ee5\u901a\u8fc7 LCDC \u5bc4\u5b58\u5668\u4e2d\u7684\u7279\u5b9a\u4f4d\u5355\u72ec\u7981\u7528\u6216\u542f\u7528. VBK \u7531\u4e8e CGB \u62e5\u6709\u4e24\u500d\u7684 VRAM, \u56e0\u6b64\u9700\u8981\u4e00\u4e2a Bank Number \u7528\u4e8e\u6307\u5b9a\u5f53\u524d\u7684 VRAM Bank. \u53ef\u4ee5\u5411 VBK(VRAM Banks) \u5199\u5165\u4ee5\u66f4\u6539 VRAM Bank, \u53ea\u6709\u4f4d 0 \u6709\u610f\u4e49, \u6240\u6709\u5176\u4ed6\u4f4d\u90fd\u88ab\u5ffd\u7565. VRAM Bank 1 \u50cf VRAM Bank 0 \u4e00\u6837\u88ab\u5206\u5272\u4e3a\u4e0d\u540c\u533a\u57df. 0x8000-0x97ff \u8fd8\u5b58\u50a8\u4e86 Tile(\u5c31\u50cf\u5728 Bank 0 \u4e2d\u4e00\u6837), \u5176\u53ef\u4ee5\u4e0e Bank 0 Tile \u76f8\u540c\u7684\u65b9\u5f0f\u8bbf\u95ee. 0x9800-0x9fff \u5305\u542b\u76f8\u5e94 Tile Maps \u7684\u5c5e\u6027. \u4ece\u8be5\u5bc4\u5b58\u5668\u8bfb\u53d6\u5c06\u8fd4\u56de\u4f4d 0 \u4e2d\u5f53\u524d\u52a0\u8f7d\u7684 VRAM \u5b58\u50a8\u533a\u7684\u7f16\u53f7, \u5e76\u4e14\u6240\u6709\u5176\u4ed6\u4f4d\u5c06\u8bbe\u7f6e\u4e3a 1. VRAM Sprite Attribute Table (OAM) Game Boy \u89c6\u9891\u63a7\u5236\u5668\u6700\u591a\u53ef\u4ee5\u663e\u793a 40 \u4e2a 8x8 \u6216 8x16 \u50cf\u7d20\u7684 Sprite. \u7531\u4e8e\u786c\u4ef6\u7684\u9650\u5236, \u6bcf\u6761 Scanline \u53ea\u80fd\u663e\u793a 10 \u4e2a Sprite. Sprite Tile \u4e0e BG Tile \u6570\u636e\u683c\u5f0f\u76f8\u540c, \u4f46\u5b83\u4eec\u53d6\u81ea\u4f4d\u4e8e 0x8000-0x8fff \u7684 Sprite Pattern Table. OAM \u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u5360\u7528 4 \u4e2a\u5b57\u8282\u5927\u5c0f. Byte0 - Y Position \u6307\u5b9a\u5c4f\u5e55\u4e0a\u7684 Sprite \u7684\u5782\u76f4\u4f4d\u7f6e(\u51cf\u53bb 16). \u5c4f\u5e55\u5916\u7684\u503c(\u4f8b\u5982, Y = 0 \u6216 Y >= 160)\u4e0d\u4f1a\u663e\u793a Sprite. Byte1 - X Position \u6307\u5b9a\u5c4f\u5e55\u4e0a\u7684 Sprite \u7684\u6c34\u5e73\u4f4d\u7f6e(\u51cf\u53bb 8). \u5c4f\u5e55\u5916\u7684\u503c(\u4f8b\u5982, X = 0 \u6216 X >= 168)\u4e0d\u4f1a\u663e\u793a Sprite. Byte2 - Tile/Pattern Number \u6307\u5b9a Sprite \u7684\u7f16\u53f7(0x00-0xff). \u6b64\u503c\u4ece\u5185\u5b58\u4e2d\u9009\u62e9\u4f4d\u4e8e 0x8000-0x8fff \u7684 Tile. \u5728 CGB \u6a21\u5f0f\u4e0b, Tile \u53ef\u4ee5\u4f4d\u4e8e VRAM Bank 0 \u6216 1 \u4e2d, \u5177\u4f53\u53d6\u51b3\u4e8e\u540e\u7eed\u5b57\u8282\u7684\u4f4d 3. \u5728 8x16 \u6a21\u5f0f\u4e0b, Tile \u7f16\u53f7\u7684\u4f4e\u4f4d\u88ab\u5ffd\u7565, \u4f8b\u5982: \u4e0a\u90e8 8x8 Tile \u7f16\u53f7\u662f N \u7684\u8bdd, \u90a3\u4e0b\u534a\u90e8\u5206 Tile \u7f16\u53f7\u5c31\u662f N + 1. Byte3 - Attributes/Flags: \u4f4d \u540d\u79f0 \u8bf4\u660e Bit7 OBJ-to-BG Priority \u663e\u793a\u4f18\u5148\u7ea7 (0=OBJ \u4f18\u5148\u663e\u793a BG, 1=OBJ \u6ede\u540e BG color 1-3 ) Bit6 Y flip \u662f\u5426\u7ffb\u8f6c Y \u8f74 Bit5 X flip \u662f\u5426\u7ffb\u8f6c X \u8f74 Bit4 Palette number \u975e CGB \u6a21\u5f0f\u4e0b\u6709\u6548 (0=OBP0, 1=OBP1) Bit3 Tile VRAM-Bank CGB \u6a21\u5f0f\u4e0b\u6709\u6548 (0=Bank 0, 1=Bank 1) Bit2-0 Palette number CGB \u6a21\u5f0f\u4e0b\u6709\u6548 (OBP0-7) \u4ee3\u7801\u5b9e\u73b0 // Bit7 OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3) // (Used for both BG and Window. BG color 0 is always behind OBJ) // Bit6 Y flip (0=Normal, 1=Vertically mirrored) // Bit5 X flip (0=Normal, 1=Horizontally mirrored) // Bit4 Palette number **Non CGB Mode Only** (0=OBP0, 1=OBP1) // Bit3 Tile VRAM-Bank **CGB Mode Only** (0=Bank 0, 1=Bank 1) // Bit2-0 Palette number **CGB Mode Only** (OBP0-7) struct Attr { priority: bool, yflip: bool, xflip: bool, palette_number_0: usize, bank: bool, palette_number_1: usize, } impl From<u8> for Attr { fn from(u: u8) -> Self { Self { priority: u & (1 << 7) != 0, yflip: u & (1 << 6) != 0, xflip: u & (1 << 5) != 0, palette_number_0: u as usize & (1 << 4), bank: u & (1 << 3) != 0, palette_number_1: u as usize & 0x07, } } } Sprite \u4f18\u5148\u7ea7 \u5728\u6bcf\u4e2a Scanline \u7684 OAM \u626b\u63cf\u671f\u95f4, LCD \u63a7\u5236\u5668\u5c06 LY \u4e0e\u6bcf\u4e2a Sprite \u7684 Y \u8fdb\u884c\u6bd4\u8f83, \u4ee5\u627e\u5230\u8be5\u884c\u4e2d\u6700\u5148\u51fa\u73b0\u5728 OAM \u4e2d\u7684 10 \u4e2a Sprite. GPU \u5c06\u820d\u5f03\u5176\u4f59\u7684 Sprite, \u56e0\u4e3a\u5176\u53ea\u5141\u8bb8\u5728\u4efb\u4f55\u4e00\u884c\u4e0a\u663e\u793a 10 \u4e2a Sprite. \u8d85\u8fc7\u6b64\u9650\u5236\u65f6, \u5c06\u4e0d\u4f1a\u663e\u793a\u540e\u7eed\u5728 OAM \u4e2d\u51fa\u73b0\u7684 Sprite. \u4e3a\u4e86\u9632\u6b62\u672a\u4f7f\u7528\u7684 Sprite \u5f71\u54cd\u5c4f\u5e55\u4e0a\u7684 Sprite, \u6e38\u620f\u5f00\u53d1\u8005\u901a\u5e38\u5c06\u5176 Y \u5750\u6807\u8bbe\u7f6e\u4e3a Y = 0 \u6216 Y >= 160(144 + 16)(\u6ce8\u610f: \u5982\u679c\u5c06 Sprite \u5927\u5c0f\u8bbe\u7f6e\u4e3a 8x8 \u50cf\u7d20, Y <= 8 \u4e5f\u53ef\u4ee5\u4f7f\u7528). \u6216\u8005\u5c06\u4e00\u4e2a Srpite \u4e0a\u7684 X \u5750\u6807\u8bbe\u7f6e\u4e3a X = 0 \u6216 X >= 168(160 + 8)\u4e5f\u53ef\u5c06\u5176\u9690\u85cf, \u4f46\u4ecd\u4f1a\u5f71\u54cd\u5171\u4eab\u540c\u4e00\u884c\u7684\u5176\u4ed6 Sprite. \u5f53\u8fd9 10 \u4e2a Sprite \u5750\u6807\u91cd\u53e0\u65f6, \u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5c06\u51fa\u73b0\u5728\u6240\u6709\u5176\u4ed6 Sprite \u4e4b\u4e0a, \u4f9d\u6b64\u7c7b\u63a8. \u5728 CGB \u6a21\u5f0f\u4e0b, OAM \u4e2d\u7684\u7b2c\u4e00\u4e2a Sprite(0xfe00- 0xfe03)\u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7. \u5728\u975e CGB \u6a21\u5f0f\u4e0b, X \u5750\u6807\u8d8a\u5c0f, \u4f18\u5148\u7ea7\u8d8a\u9ad8, \u82e5 X \u5750\u6807\u76f8\u540c, \u5219\u4f18\u5148\u7ea7\u9000\u5316\u81f3 CGB \u6a21\u5f0f\u4e0b. Sprite \u4e4b\u95f4\u7684\u4f18\u5148\u7ea7\u8ba1\u7b97\u5c06\u5ffd\u7565 OBJ \u5230 BG \u7684\u4f18\u5148\u7ea7(LCDC \u5bc4\u5b58\u5668\u7684\u4f4d 0), \u5176\u4ec5\u5c06\u4efb\u610f\u7ed9\u5b9a\u70b9\u4e0a\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u975e\u900f\u660e\u8272\u5f69\u7684\u5b50\u753b\u9762\u50cf\u7d20\u4e0e BG \u8fdb\u884c\u6bd4\u8f83. \u56e0\u6b64, \u5982\u679c\u5177\u6709\u8f83\u9ad8\u4f18\u5148\u7ea7(\u57fa\u4e8e OAM \u7d22\u5f15)\u4f46\u542f\u7528\u4e86 OBJ-to-BG \u4f18\u5148\u7ea7\u7684\u7cbe\u7075\u4e0e\u5177\u6709\u8f83\u4f4e\u4f18\u5148\u7ea7\u548c\u975e\u900f\u660e\u8272\u5f69\u50cf\u7d20\u7684 Sprite \u91cd\u53e0, \u5219\u663e\u793a\u80cc\u666f\u50cf\u7d20, \u800c\u4e0d\u8003\u8651\u4f18\u5148\u7ea7\u8f83\u4f4e\u7684 Sprite \u7684 OBJ-to-BG \u4f18\u5148\u7ea7.","title":"GB-\u89c6\u9891-GPU \u5bc4\u5b58\u5668\u4e0e\u5185\u5b58\u7ed3\u6784"},{"location":"content/gameboy/video/gpu/#gpu","text":"GPU \u5728\u56fe\u50cf\u6e32\u67d3\u4e2d\u9700\u8981\u7ba1\u7406\u4e00\u4e9b\u989d\u5916\u7684\u72b6\u6001\u6570\u636e, \u6bd4\u5982\u5728\u5149\u6805\u6210\u50cf\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u6e32\u67d3\u4e86\u5230\u7b2c\u51e0\u884c\u7b2c\u51e0\u5217. \u8fd9\u4e9b\u6570\u636e\u5747\u4fdd\u5b58\u5728 GPU \u5bc4\u5b58\u5668\u4e4b\u5185, CPU \u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u5bc4\u5b58\u5668\u6765\u63a7\u5236 GPU \u7684\u884c\u4e3a. GPU \u6240\u62e5\u6709\u7684\u5bc4\u5b58\u5668\u6570\u91cf\u8f83\u591a, \u672c\u8282\u5c06\u5bf9\u6b64\u8fdb\u884c\u4e00\u4e00\u89e3\u91ca. GPU \u5bc4\u5b58\u5668\u603b\u89c8: \u540d\u79f0 \u5730\u5740 \u63cf\u8ff0 LCD Control Register(LCDC) 0xff40 LCD \u63a7\u5236\u5bc4\u5b58\u5668 LCD Status Register 0xff41 LCD \u72b6\u6001\u5bc4\u5b58\u5668 Scroll Y(SCY) 0xff42 Scroll Y \u5bc4\u5b58\u5668 Scroll X(SCX) 0xff43 Scroll X \u5bc4\u5b58\u5668 LCDC Y-Coordinate(LY) 0xff44 \u5f53\u524d\u6570\u636e\u4f20\u8f93\u5230 LCD \u9a71\u52a8\u5668\u7684\u5782\u76f4\u7ebf LY Compare(LYC) 0xff45 \u7528\u4e8e\u548c LY \u8fdb\u884c\u6bd4\u8f83\u7684\u503c Window Y Position(WY) 0xff4a Window Y \u5bc4\u5b58\u5668 Window X Position(WX) 0xff4b Window X \u5bc4\u5b58\u5668 BG Palette Data(BGP) 0xff47 \u4e3a BG \u548c Window \u56fe\u5757\u7684\u989c\u8272\u7f16\u53f7\u5206\u914d\u7070\u8272\u9634\u5f71, \u975e CGB \u6a21\u5f0f\u4e13\u7528 Object Palette 0 Data(OBP0) 0xff48 sprite \u8c03\u8272\u677f 0, \u975e CGB \u6a21\u5f0f\u4e13\u7528 Object Palette 1 Data(OBP1) 0xff49 sprite \u8c03\u8272\u677f 1, \u975e CGB \u6a21\u5f0f\u4e13\u7528 Background Palette Index(BCPS/BGPI) 0xff68 Background Palette Index, CGB \u6a21\u5f0f\u4e13\u7528 Background Palette Data(BCPD/BGPD) 0xff69 Background Palette Data, CGB \u6a21\u5f0f\u4e13\u7528 Sprite Palette Index(OCPS/OBPI) 0xff6a Sprite Palette Index, CGB \u6a21\u5f0f\u4e13\u7528 Sprite Palette Data(OCPD/OBPD) 0xff6b Sprite Palette Data, CGB \u6a21\u5f0f\u4e13\u7528 DMA Transfer and Start Address(DMA) 0xff46 DMA \u4f20\u8f93\u8d77\u59cb\u5730\u5740 New DMA Source, High(HDMA1) 0xff51 DMA \u4f20\u8f93\u8d77\u59cb\u5730\u5740\u7684\u9ad8\u4f4d, CGB \u6a21\u5f0f\u4e13\u7528 New DMA Source, Low(HDMA2) 0xff52 DMA \u4f20\u8f93\u8d77\u59cb\u5730\u5740\u7684\u4f4e\u4f4d, CGB \u6a21\u5f0f\u4e13\u7528 New DMA Destination, High(HDMA3) 0xff53 DMA \u4f20\u8f93\u76ee\u7684\u5730\u5740\u7684\u9ad8\u4f4d, CGB \u6a21\u5f0f\u4e13\u7528 New DMA Destination, Low(HDMA4) 0xff54 DMA \u4f20\u8f93\u76ee\u7684\u5730\u5740\u7684\u4f4e\u4f4d, CGB \u6a21\u5f0f\u4e13\u7528 New DMA Length/Mode/Start(HDMA5) 0xff55 \u7528\u4e8e\u542f\u52a8\u4ece ROM \u6216 RAM \u5230 VRAM \u7684 DMA \u4f20\u8f93 VRAM Bank(VBK) 0xff4f VRAM Bank Number","title":"GPU \u5bc4\u5b58\u5668\u4e0e\u5185\u5b58\u7ed3\u6784"},{"location":"content/gameboy/video/gpu/#lcdc","text":"LCDC \u662f\u4e3b\u8981\u7684 LCD \u63a7\u5236\u5bc4\u5b58\u5668. \u5b83\u63a7\u5236\u753b\u9762\u4e0a\u7684\u5bf9\u8c61\u662f\u5426\u663e\u793a\u4ee5\u53ca\u5982\u4f55\u663e\u793a. LCD \u6db2\u6676\u663e\u793a\u5668(\u82f1\u8bed: liquid-crystal display)\u4e3a\u5e73\u9762\u8584\u578b\u7684\u663e\u793a\u8bbe\u5907, \u7531\u4e00\u5b9a\u6570\u91cf\u7684\u5f69\u8272\u6216\u9ed1\u767d\u50cf\u7d20\u7ec4\u6210, \u653e\u7f6e\u4e8e\u5149\u6e90\u6216\u8005\u53cd\u9762\u524d\u65b9. \u6db2\u6676\u663e\u793a\u5668\u529f\u8017\u4f4e, \u56e0\u6b64\u5907\u53d7\u5de5\u7a0b\u5e08\u9752\u7750, \u9002\u7528\u4e8e\u4f7f\u7528\u7535\u6c60\u7684\u7535\u5b50\u8bbe\u5907. \u5b83\u7684\u4e3b\u8981\u539f\u7406\u662f\u4ee5\u7535\u6d41\u523a\u6fc0\u6db2\u6676\u5206\u5b50\u4ea7\u751f\u70b9, \u7ebf, \u9762\u914d\u5408\u80cc\u90e8\u706f\u7ba1\u6784\u6210\u753b\u9762. \u5168\u79f0: Liquid Crystal Display \u7b80\u79f0: LCD \u7ec4\u6210: \u4e00\u5b9a\u6570\u91cf\u7684\u5f69\u8272\u6216\u9ed1\u767d\u50cf\u7d20 \u7279\u70b9: \u4f4e\u529f\u8017 \u6458\u81ea: https://zh.wikipedia.org/wiki/\u6db2\u6676\u663e\u793a\u5668 \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 7 LCD Display Enable \u63a7\u5236 LCD \u662f\u5426\u4eae\u8d77 Bit 6 Window Tile Map Display Select \u9009\u62e9 Window Tile Map. \u5f53\u5b83\u4e3a 0 \u65f6, Tile Map \u8d77\u59cb\u5730\u5740\u4e3a 0x9800, \u5426\u5219 0x9C00 Bit 5 Window Display Enable \u63a7\u5236\u662f\u5426\u663e\u793a\u7a97\u53e3 Bit 4 BG & Window Tile Data Select \u8be5\u4f4d\u63a7\u5236 BG \u548c Window \u7528\u4e8e\u5bfb\u627e Tile \u65f6\u7684\u5bfb\u5740\u6a21\u5f0f Bit 3 BG Tile Map Display Select \u9009\u62e9 BG Tile Map. \u5f53\u5b83\u4e3a 0 \u65f6, Tile Map \u8d77\u59cb\u5730\u5740\u4f7f\u7528 0x9800, \u5426\u5219 0x9C00 Bit 2 OBJ Size \u63a7\u5236 Sprite \u7684\u5927\u5c0f. Sprite \u5927\u5c0f\u53ef\u4ee5\u4e3a\u4e00\u4e2a Tile \u6216 2 \u4e2a\u7ad6\u76f4\u6392\u5217\u7684 Tile Bit 1 OBJ Display Enable \u662f\u5426\u663e\u793a Sprite Bit 0 BG/Window Display/Priority \u63a7\u5236 Sprite \u7684\u4f18\u5148\u7ea7. \u5982\u679c\u8bbe\u7f6e, Sprite \u5c06\u59cb\u7ec8\u663e\u793a\u5728 BG \u4e4b\u4e0a Bit 0 \u63a7\u5236 Sprite \u76f8\u5bf9\u4e8e BG \u7684\u4f18\u5148\u7ea7. \u4e00\u4e2a\u4f8b\u5b50\u662f\u6e38\u620f\u4eba\u7269\u53ef\u4ee5\u88ab\u6e38\u620f\u80cc\u666f\u6240\u906e\u63a9(\u4f8b\u5982\u5f53\u6e38\u620f\u4eba\u7269\u8fdb\u5165\u8349\u4e1b\u65f6), \u4e0b\u9762\u7684\u622a\u56fe\u5c55\u793a\u4e86\u8fd9\u4e00\u73b0\u8c61. \u5b83\u7684\u4f18\u52bf\u5728\u4e8e\u5f00\u53d1\u8005\u65e0\u9700\u4e13\u95e8\u4e3a\u8fd9\u79cd\u906e\u63a9\u505a\u989d\u5916\u7684\u753b\u9762. \u4ee3\u7801\u5b9e\u73b0 // LCDC is the main LCD Control register. Its bits toggle what elements are displayed on the screen, and how. pub struct Lcdc { data: u8, } #[rustfmt::skip] impl Lcdc { pub fn power_up() -> Self { Self { data: 0b0100_1000 } } // LCDC.7 - LCD Display Enable // This bit controls whether the LCD is on and the PPU is active. Setting it to 0 turns both off, which grants // immediate and full access to VRAM, OAM, etc. fn bit7(&self) -> bool { self.data & 0b1000_0000 != 0x00 } // LCDC.6 - Window Tile Map Display Select // This bit controls which background map the Window uses for rendering. When it's reset, the $9800 tilemap is used, // otherwise it's the $9C00 one. fn bit6(&self) -> bool { self.data & 0b0100_0000 != 0x00 } // LCDC.5 - Window Display Enable // This bit controls whether the window shall be displayed or not. (TODO : what happens when toggling this // mid-scanline ?) This bit is overridden on DMG by bit 0 if that bit is reset. // Note that on CGB models, setting this bit to 0 then back to 1 mid-frame may cause the second write to be ignored. fn bit5(&self) -> bool { self.data & 0b0010_0000 != 0x00 } // LCDC.4 - BG & Window Tile Data Select // This bit controls which addressing mode the BG and Window use to pick tiles. // Sprites aren't affected by this, and will always use $8000 addressing mode. fn bit4(&self) -> bool { self.data & 0b0001_0000 != 0x00 } // LCDC.3 - BG Tile Map Display Select // This bit works similarly to bit 6: if the bit is reset, the BG uses tilemap $9800, otherwise tilemap $9C00. fn bit3(&self) -> bool { self.data & 0b0000_1000 != 0x00 } // LCDC.2 - OBJ Size // This bit controls the sprite size (1 tile or 2 stacked vertically). // Be cautious when changing this mid-frame from 8x8 to 8x16 : \"remnants\" of the sprites intended for 8x8 could // \"leak\" into the 8x16 zone and cause artifacts. fn bit2(&self) -> bool { self.data & 0b0000_0100 != 0x00 } // LCDC.1 - OBJ Display Enable // This bit toggles whether sprites are displayed or not. // This can be toggled mid-frame, for example to avoid sprites being displayed on top of a status bar or text box. // (Note: toggling mid-scanline might have funky results on DMG? Investigation needed.) fn bit1(&self) -> bool { self.data & 0b0000_0010 != 0x00 } // LCDC.0 - BG/Window Display/Priority // LCDC.0 has different meanings depending on Gameboy type and Mode: // Monochrome Gameboy, SGB and CGB in Non-CGB Mode: BG Display // When Bit 0 is cleared, both background and window become blank (white), and the Window Display Bit is ignored in // that case. Only Sprites may still be displayed (if enabled in Bit 1). // CGB in CGB Mode: BG and Window Master Priority // When Bit 0 is cleared, the background and window lose their priority - the sprites will be always displayed on // top of background and window, independently of the priority flags in OAM and BG Map attributes. fn bit0(&self) -> bool { self.data & 0b0000_0001 != 0x00 } }","title":"LCDC"},{"location":"content/gameboy/video/gpu/#lcd-status-register","text":"LCD Status Register \u5bc4\u5b58\u5668\u63a7\u5236 LCD \u5f53\u524d\u7684\u663e\u793a\u72b6\u6001. \u4f4d \u540d\u79f0 \u8bf4\u660e Bit 6 LYC=LY Coincidence Interrupt \u5f53 LYC \u4e0e LY \u76f8\u7b49\u4e14\u8be5\u4f4d\u4e3a 1 \u65f6, \u89e6\u53d1\u4e2d\u65ad Bit 5 Mode 2 OAM Interrupt \u6a21\u5f0f 2 OAM \u4e2d\u65ad\u5f00\u5173 Bit 4 Mode 1 V-Blank Interrupt \u6a21\u5f0f 1 V-Blank \u4e2d\u65ad\u5f00\u5173 Bit 3 Mode 0 H-Blank Interrupt \u6a21\u5f0f 0 H-Blank \u4e2d\u65ad\u5f00\u5173 Bit 2 Coincidence Flag \u5f53\u524d LY \u662f\u5426\u4e0e LYC \u76f8\u7b49 Bit 1-0 Mode Flag \u5f53\u524d GPU \u6240\u5904\u7684\u5468\u671f Bit 1 \u548c Bit 0 \u5171\u540c\u8d1f\u8d23\u5b58\u50a8 LCD \u63a7\u5236\u5668\u7684\u5f53\u524d\u72b6\u6001/\u6a21\u5f0f. \u6a21\u5f0f\u6709\u4ee5\u4e0b\u56db\u79cd\u53ef\u9009\u503c: Mode 0: During H-Blank Mode 1: During V-Blank Mode 2: During Searching OAM Mode 3: During Transferring Data to LCD Driver LCD \u63a7\u5236\u5668\u4ee5 4.194 MHz \u7684\u65f6\u949f\u5de5\u4f5c. \u6e38\u620f\u7684\u4e00\u5e27\u53ef\u8868\u8fbe\u4e3a 154 \u6761 scanline, 70224 \u50cf\u7d20\u70b9\u6216 16.74 ms. \u5728 scanline 0 \u5230 143 \u4e0a, LCD \u63a7\u5236\u5668\u6bcf 456 \u70b9\u5728\u6a21\u5f0f2, 3 \u548c 0 \u4e0a\u5faa\u73af\u4e00\u6b21. Scanline 144 \u81f3 153 \u4e3a\u6a21\u5f0f 1. \u542f\u7528\u753b\u9762\u663e\u793a\u540e, \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5178\u578b\u7684 Mode \u5207\u6362\u6d41\u7a0b: Mode 2 2_____2_____2_____2_____2_____2___________________2____ Mode 3 _33____33____33____33____33____33__________________3___ Mode 0 ___000___000___000___000___000___000________________000 Mode 1 ____________________________________11111111111111_____ \u5f53 LCD \u63a7\u5236\u5668\u6b63\u5728\u8bfb\u53d6\u89c6\u9891\u5b58\u50a8\u5668\u7684\u7279\u5b9a\u90e8\u5206\u65f6, CPU \u5c06\u65e0\u6cd5\u8bbf\u95ee\u67d0\u4e9b\u7279\u5b9a\u5b58\u50a8\u5668. \u5728 Mode 2 \u548c 3 \u4e0b\uff0cCPU \u65e0\u6cd5\u8bbf\u95ee OAM(0xfe00-0xfe9f) \u5728 Mode 3 \u671f\u95f4, CPU \u65e0\u6cd5\u8bbf\u95ee VRAM \u6216 CGB \u8c03\u8272\u677f\u6570\u636e(0xff69, 0xff6b) \u4ee3\u7801\u5b9e\u73b0 // LCD Status Register. pub struct Stat { // Bit 6 - LYC=LY Coincidence Interrupt (1=Enable) (Read/Write) enable_ly_interrupt: bool, // Bit 5 - Mode 2 OAM Interrupt (1=Enable) (Read/Write) enable_m2_interrupt: bool, // Bit 4 - Mode 1 V-Blank Interrupt (1=Enable) (Read/Write) enable_m1_interrupt: bool, // Bit 3 - Mode 0 H-Blank Interrupt (1=Enable) (Read/Write) enable_m0_interrupt: bool, // Bit 1-0 - Mode Flag (Mode 0-3, see below) (Read Only) // 0: During H-Blank // 1: During V-Blank // 2: During Searching OAM // 3: During Transferring Data to LCD Driver mode: u8, } impl Stat { pub fn power_up() -> Self { Self { enable_ly_interrupt: false, enable_m2_interrupt: false, enable_m1_interrupt: false, enable_m0_interrupt: false, mode: 0x00, } } }","title":"LCD Status Register"},{"location":"content/gameboy/video/gpu/#lcd-interrupts","text":"LCD \u53ef\u4ee5\u4ea7\u751f\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4e2d\u65ad, \u5b83\u4eec\u5206\u522b\u662f INT 40 \u548c INT 48. INT 40 - V-Blank Interrupt: V-Blank \u4e2d\u65ad\u6bcf\u79d2\u53ef\u56fa\u5b9a\u4ea7\u751f\u7ea6 60 \u6b21, \u8be5\u4e2d\u65ad\u53d1\u751f\u5728 V-Blank \u671f\u95f4(LY == 144 \u65f6). \u5728\u6b64\u671f\u95f4, Game Boy \u786c\u4ef6\u4e0d\u4f1a\u4f7f\u7528 VRAM, \u56e0\u6b64 CPU \u53ef\u4ee5\u81ea\u7531\u8bbf\u95ee\u5b83. \u8be5\u65f6\u95f4\u6bb5\u6301\u7eed\u5927\u7ea6 1.1 \u6beb\u79d2. INT 48 - LCDC Status Interrupt: \u5982 STAT \u5bc4\u5b58\u5668(0xff40)\u6240\u8ff0, \u6709\u591a\u79cd\u539f\u56e0\u53ef\u4ee5\u5bfc\u81f4\u6b64\u4e2d\u65ad\u53d1\u751f. \u4e00\u4e2a\u975e\u5e38\u666e\u904d\u7684\u539f\u56e0\u662f\u5411\u7528\u6237\u6307\u793a Game Boy \u7684 GPU \u786c\u4ef6\u4f55\u65f6\u5c06\u91cd\u753b\u7ed9\u5b9a\u7684 LCD scanline. \u8fd9\u5bf9\u4e8e\u52a8\u6001\u63a7\u5236 SCX/SCY \u5bc4\u5b58\u5668(0xff43/0xff42)\u6765\u6267\u884c\u7279\u6b8a\u7684\u89c6\u9891\u6548\u679c\u5f88\u6709\u7528.","title":"LCD Interrupts"},{"location":"content/gameboy/video/gpu/#scroll-y-scroll-x","text":"SCY(Scroll Y), SCX(Scroll X) \u6307\u5b9a\u8981\u663e\u793a\u5728 LCD \u4e0a\u7684\u56fe\u50cf\u5728 256 * 256 BG \u4e2d\u7684\u4f4d\u7f6e(\u5de6\u4e0a\u89d2). \u5f53\u7ed8\u56fe\u5927\u5c0f\u8d85\u8fc7 BG \u5730\u56fe\u533a\u57df\u7684\u53f3\u4e0b\u8fb9\u754c\u65f6, \u89c6\u9891\u63a7\u5236\u5668\u81ea\u52a8\u56de\u7ed5\u5230 BG \u5730\u56fe\u4e2d\u7684\u5de6\u4e0a\u4f4d\u7f6e. \u5728\u4e0a\u4e00\u5c0f\u8282\u300a\u56fe\u50cf\u663e\u793a\u7cfb\u7edf\u7b80\u4ecb\u300b\u6709\u8be6\u7ec6\u4ecb\u7ecd.","title":"Scroll Y, Scroll X"},{"location":"content/gameboy/video/gpu/#lcdc-y-coordinate","text":"LY(LCDC Y-Coordinate) \u8868\u793a\u5f53\u524d\u6b63\u5728\u7ed8\u5236 LCD \u5c4f\u5e55\u7684\u7b2c\u51e0\u884c. LY \u53ef\u4ee5\u53d6 0 \u5230 153 \u4e4b\u95f4\u7684\u4efb\u4f55\u503c, \u5176\u4e2d 144 \u548c 153 \u4e4b\u95f4\u7684\u503c\u8868\u793a\u6b63\u5904\u4e8e V-Blank \u5468\u671f.","title":"LCDC Y-Coordinate"},{"location":"content/gameboy/video/gpu/#lyc","text":"LYC(LY Compare) \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u503c, Game Boy \u6c38\u4e45\u5730\u6bd4\u8f83 LYC \u548c LY \u5bc4\u5b58\u5668\u7684\u503c. \u5f53\u4e24\u4e2a\u503c\u76f8\u540c\u65f6, LCD Status Register \u4e2d\u7684 Coincidence Flag \u88ab\u7f6e\u4f4d, \u5e76\u4e14\u8bf7\u6c42 STAT \u4e2d\u65ad(\u5982\u679c\u5141\u8bb8\u7684\u8bdd).","title":"LYC"},{"location":"content/gameboy/video/gpu/#window-y-window-x","text":"\u7528\u4e8e\u8868\u793a\u6307\u5b9a Window \u533a\u57df\u7684\u5de6\u4e0a\u4f4d\u7f6e. Window \u662f\u4e00\u4e2a\u53ef\u4ee5\u5728\u6b63\u5e38\u80cc\u666f\u4e0a\u65b9\u663e\u793a\u7684\u5907\u7528\u80cc\u666f\u533a\u57df, Sprite \u53ef\u80fd\u4ecd\u7136\u663e\u793a\u5728\u7a97\u53e3\u7684\u4e0a\u65b9\u6216\u540e\u65b9, \u5c31\u50cf\u6b63\u5e38\u7684 BG \u4e00\u6837. \u4e00\u4e2a\u6bd4\u8f83\u5f62\u8c61\u7684\u4f8b\u5b50\u662f, \u5f53\u6e38\u620f\u4efb\u52a1\u5728\u5927\u5730\u56fe\u4e0a\u4e0e NPC \u4ea4\u8c08\u65f6, \u5bf9\u8bdd\u6846\u901a\u5e38\u5c31\u662f\u4e00\u4e2a\u7a97\u53e3. Window \u5728\u4e0a\u4e00\u5c0f\u8282\u300a\u56fe\u50cf\u663e\u793a\u7cfb\u7edf\u7b80\u4ecb\u300b\u6709\u8be6\u7ec6\u4ecb\u7ecd. \u5f53\u4f4d\u7f6e\u8bbe\u7f6e\u5728\u8303\u56f4 0 <= WX <= 166, 0 <= WY <= 143 \u65f6, \u7a97\u53e3\u53d8\u4e3a\u53ef\u89c1(\u5982\u679c LCDC \u5bc4\u5b58\u5668\u5141\u8bb8\u663e\u793a\u7a97\u53e3\u7684\u8bdd). \u6ce8\u610f: WX = 7, WY = 0 \u7684\u4f4d\u7f6e\u5c06\u4f7f\u7a97\u53e3\u4f4d\u4e8e LCD \u7684\u5de6\u4e0a\u89d2(\u5b8c\u5168\u8986\u76d6\u6b63\u5e38\u80cc\u666f).","title":"Window Y, Window X"},{"location":"content/gameboy/video/gpu/#bgp","text":"BGP(BG Palette Data) \u4e3a BG \u548c Window Tile \u7684\u989c\u8272\u7f16\u53f7\u6307\u5b9a\u5bf9\u5e94\u7070\u5ea6. \u53ea\u5728\u975e CGB \u6a21\u5f0f(\u975e\u5f69\u8272 Game Boy \u6216\u5f69\u8272 Game Boy \u4ee5\u9ed1\u767d\u6a21\u5f0f\u8fd0\u884c)\u4e0b\u6709\u6548. \u4f4d \u8bf4\u660e Bit 7-6 \u7f16\u53f7\u4e3a 3 \u7684\u7070\u5ea6(\u9ed1) Bit 5-4 \u7f16\u53f7\u4e3a 2 \u7684\u7070\u5ea6(\u6df1\u7070) Bit 3-2 \u7f16\u53f7\u4e3a 1 \u7684\u7070\u5ea6(\u6d45\u7070) Bit 1-0 \u7f16\u53f7\u4e3a 0 \u7684\u7070\u5ea6(\u767d) \u4e00\u79cd\u5e38\u89c1\u7684\u7070\u5ea6\u503c\u9009\u62e9\u662f \u7f16\u53f7 \u989c\u8272 0 White 1 Light gray 2 Dark gray 3 Black \u5bf9\u4e8e CGB \u6765\u8bf4, Palettes \u6570\u636e\u53d6\u81ea CGB Palettes Memory, \u540e\u6587\u5c06\u4f1a\u4ecb\u7ecd.","title":"BGP"},{"location":"content/gameboy/video/gpu/#obp0","text":"OBP0(Object Palette 0 Data) \u4e3a Sprite Palettes 0 \u6307\u5b9a\u7070\u5ea6. \u5b83\u4e0e BGP(0xff47)\u5b8c\u5168\u76f8\u540c, \u53ea\u662f\u56e0\u4e3a Sprite \u7684\u989c\u8272\u6570\u636e 00 \u662f\u900f\u660e\u7684, \u6240\u4ee5\u4e0d\u4f7f\u7528\u4f4e\u4e24\u4f4d.","title":"OBP0"},{"location":"content/gameboy/video/gpu/#obp1","text":"OBP1(Object Palette 1 Data) \u4e3a Sprite Palettes 1 \u6307\u5b9a\u7070\u5ea6. \u5b83\u4e0e BGP(0xff47)\u5b8c\u5168\u76f8\u540c, \u53ea\u662f\u56e0\u4e3a Sprite \u7684\u989c\u8272\u6570\u636e 00 \u662f\u900f\u660e\u7684, \u6240\u4ee5\u4e0d\u4f7f\u7528\u4f4e\u4e24\u4f4d.","title":"OBP1"},{"location":"content/gameboy/video/gpu/#bcpsbgpi","text":"BGPI(Background Palette Index) \u7528\u4e8e\u5bfb\u5740 BG Palettes \u5b58\u50a8\u5668\u4e2d\u7684\u4e00\u4e2a\u5b57\u8282. \u8be5\u5b58\u50a8\u5668\u4e2d\u7684\u6bcf\u4e24\u4e2a\u5b57\u8282\u5b9a\u4e49\u4e00\u4e2a\u989c\u8272\u503c. \u524d 8 \u4e2a\u5b57\u8282\u5b9a\u4e49 Palette 0(BGP0) \u7684 Color 0-3, \u4ee5\u6b64\u7c7b\u63a8 BGP 1-7. \u4f4d \u8bf4\u660e Bit 0-5 \u7d22\u5f15(00-3f) Bit 7 \u81ea\u589e\u5f00\u5173(0=\u7981\u7528, 1=\u6bcf\u6b21\u5199\u64cd\u4f5c\u540e\u81ea\u589e) \u53ef\u4ee5\u901a\u8fc7\u5bc4\u5b58\u5668 0xff69 \u4ece\u6307\u5b9a\u7684\u7d22\u5f15\u5730\u5740\u8bfb\u53d6/\u5199\u5165\u6570\u636e. \u5982\u679c\u8bbe\u7f6e\u4e86\u81ea\u589e\u5f00\u5173, \u6bcf\u6b21\u5199\u6570\u636e\u5230 0xff69 \u540e\u7d22\u5f15(Bit 0-5)\u4f1a\u81ea\u52a8\u9012\u589e. \u5f53\u4ece 0xff69 \u8bfb\u53d6\u65f6, \u4e0d\u4f1a\u81ea\u52a8\u9012\u589e. \u56e0\u6b64\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5fc5\u987b\u624b\u52a8\u9012\u589e\u7d22\u5f15. \u53ef\u4ee5\u5728\u975e V-Blank \u548c H-Blank \u671f\u95f4\u8bbf\u95ee\u8be5\u5bc4\u5b58\u5668. \u4ee3\u7801\u5b9e\u73b0 // This register is used to address a byte in the CGBs Background Palette Memory. Each two byte in that memory define a // color value. The first 8 bytes define Color 0-3 of Palette 0 (BGP0), and so on for BGP1-7. // Bit 0-5 Index (00-3F) // Bit 7 Auto Increment (0=Disabled, 1=Increment after Writing) // Data can be read/written to/from the specified index address through Register FF69. When the Auto Increment bit is // set then the index is automatically incremented after each <write> to FF69. Auto Increment has no effect when // <reading> from FF69, so the index must be manually incremented in that case. Writing to FF69 during rendering still // causes auto-increment to occur. // Unlike the following, this register can be accessed outside V-Blank and H-Blank. struct Bgpi { i: u8, auto_increment: bool, } impl Bgpi { fn power_up() -> Self { Self { i: 0x00, auto_increment: false, } } fn get(&self) -> u8 { let a = if self.auto_increment { 0x80 } else { 0x00 }; a | self.i } fn set(&mut self, v: u8) { self.auto_increment = v & 0x80 != 0x00; self.i = v & 0x3f; } }","title":"BCPS/BGPI"},{"location":"content/gameboy/video/gpu/#bcpdbgpd","text":"BGPD(Background Palette Data) \u5bc4\u5b58\u5668\u5141\u8bb8\u8bfb\u53d6\u6216\u5199\u5165\u901a\u8fc7\u5bc4\u5b58\u5668 0xff68 \u5bfb\u5740\u7684 BG Palettes \u7684\u6570\u636e. \u6bcf\u79cd\u989c\u8272\u7531\u4e24\u4e2a\u5b57\u8282\u5b9a\u4e49. \u4f4d \u8bf4\u660e Bit 0-4 \u7ea2 (00-1f) Bit 5-9 \u7eff (00-1f) Bit 10-14 \u84dd (00-1f) \u4e0e VRAM \u6781\u4e3a\u76f8\u4f3c, \u5728\u4ece LCD \u63a7\u5236\u5668\u8bfb\u53d6\u8c03\u8272\u677f\u5185\u5b58\u671f\u95f4, \u65e0\u6cd5\u8bfb\u53d6/\u5199\u5165\u8c03\u8272\u677f\u5185\u5b58\u4e2d\u7684\u6570\u636e(\u5373\u5f53 STAT \u5bc4\u5b58\u5668\u6307\u793a\u6a21\u5f0f 3 \u65f6).","title":"BCPD/BGPD"},{"location":"content/gameboy/video/gpu/#ocpsobpi","text":"OBPI(Sprite Palette Index) \u5bc4\u5b58\u5668\u4e0e BGPI \u5bc4\u5b58\u5668\u63cf\u8ff0\u7684\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837, \u4f46\u533a\u522b\u5728\u4e8e\u5176\u521d\u59cb\u5316 Sprite Palettes OBP 0-7.","title":"OCPS/OBPI"},{"location":"content/gameboy/video/gpu/#ocpdobpd","text":"OBPD(Sprite Palette Data) \u5bc4\u5b58\u5668\u4e0e BGPD \u5bc4\u5b58\u5668\u63cf\u8ff0\u7684\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837, \u4f46\u533a\u522b\u5728\u4e8e\u5176\u521d\u59cb\u5316 Sprite Palettes OBP 0-7. \u8bf7\u6ce8\u610f, \u867d\u7136\u53ef\u4ee5\u4e3a\u6bcf\u4e2a OBP Palettes \u5b9a\u4e49\u56db\u79cd\u989c\u8272, \u4f46\u662f\u53ea\u80fd\u663e\u793a\u6bcf\u4e2a Sprite Palette \u7684 Color 1-3, \u800c Color 0 \u59cb\u7ec8\u662f\u900f\u660e\u7684, \u5e76\u4e14\u53ef\u4ee5\u521d\u59cb\u5316\u4e3a\u65e0\u5173\u503c\u6216\u4ece\u4e0d\u521d\u59cb\u5316. \u6ce8\u610f\uff1a\u6240\u6709 Sprite \u7684\u989c\u8272\u90fd\u4e0d\u4f1a\u7531\u5f15\u5bfc ROM \u521d\u59cb\u5316.","title":"OCPD/OBPD"},{"location":"content/gameboy/video/gpu/#rgb","text":"\u4e0e\u73b0\u5728\u5e38\u7528\u7684 8 \u4f4d RGB \u8272\u5f69\u6a21\u5f0f\u4e0d\u540c, Game Boy \u53ea\u4f7f\u7528 4 \u4f4d\u8868\u793a\u4e00\u79cd\u989c\u8272\u901a\u9053, \u6bcf\u79cd\u8272\u5f69\u901a\u9053\u7684\u8303\u56f4\u4f7f 0x00 \u5230 0x1f. \u5728 PC \u4e0a\u663e\u793a\u56fe\u50cf\u989c\u8272\u65f6, \u9700\u8981\u8fdb\u884c\u4e00\u6b21\u5bf9\u6bd4\u62c9\u4f38, \u5373\u62c9\u4f38\u5230 0x00 \u5230 0xff \u8303\u56f4. \u4f46\u662f\u8981\u6ce8\u610f\u8fd9\u79cd\u8f6c\u6362\u5e76\u4e0d\u662f\u7ebf\u6027\u7684, \u76ee\u524d\u5c1d\u8bd5\u4e0b\u6765\u6bd4\u8f83\u5408\u7406\u7684\u62c9\u4f38\u7b97\u6cd5\u5982\u4e0b\u6240\u793a: fn get_rgb(r: u8, g: u8, b: u8) -> (u8, u8, u8) { let r = u32::from(r); let g = u32::from(g); let b = u32::from(b); let lr = ((r * 13 + g * 2 + b) >> 1) as u8; let lg = ((g * 3 + b) << 1) as u8; let lb = ((r * 3 + g * 2 + b * 11) >> 1) as u8; return (lr, lg, lb); } \u8fd9\u4e2a\u7b97\u6cd5\u5e76\u975e\u5305\u542b\u4ec0\u4e48\u6570\u5b66\u8bc1\u660e\u5728\u91cc\u9762, \u53ea\u662f\u5728\u4e0d\u65ad\u5c1d\u8bd5\u5404\u79cd\u8f6c\u6362\u65b9\u6cd5\u540e\u53d1\u73b0\u5176\u5bf9\u4eba\u773c\u6bd4\u8f83\u53cb\u597d. \u4e0e\u4e4b\u7c7b\u4f3c\u7684\u5728\u5f69\u8272\u56fe\u50cf\u8f6c\u7070\u5ea6\u56fe\u4e0a, \u6709\u4e00\u4e2a\u5f88\u8457\u540d\u7684\u5fc3\u7406\u5b66\u516c\u5f0f: Gray = R*0.299 + G*0.587 + B*0.114 \u8be5\u516c\u5f0f\u540c\u6837\u662f\u4eba\u4e3a\u6311\u9009\u51fa\u6765\u7684.","title":"\u4eff\u771f\u5668\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684 RGB \u8272\u5f69\u8f6c\u6362"},{"location":"content/gameboy/video/gpu/#dma","text":"\u5199\u5165 DMA(DMA Transfer and Start Address) \u5bc4\u5b58\u5668\u4f1a\u542f\u52a8\u4ece ROM \u6216 RAM \u5230 OAM \u5b58\u50a8\u5668\u7684 DMA \u4f20\u8f93(\u4f20\u8f93\u7684\u6570\u636e\u662f Sprite \u5c5e\u6027\u8868). \u5199\u5165\u7684\u503c\u4f1a\u9664\u4ee5 0x0100 \u540e\u4f5c\u4e3a\u6570\u636e\u6e90\u5730\u5740\u7684\u9ad8\u4e24\u4f4d\u5730\u5740, \u6570\u636e\u6e90\u4e0e\u6570\u636e\u76ee\u7684\u5730\u5982\u4e0b\u6240\u793a: Source: XX00-XX9F Destination: FE00-FE9F \u4f20\u8f93\u9700\u8981 160 \u4e2a\u673a\u5668\u5468\u671f, \u7ea6 152 \u5fae\u79d2. \u5728\u6b64\u671f\u95f4, CPU \u53ea\u80fd\u8bbf\u95ee HRAM \u5185\u5b58\u533a\u95f4(0xff80-0xfffe).","title":"DMA"},{"location":"content/gameboy/video/gpu/#hdma1-hdma2","text":"\u4e24\u4e2a\u5bc4\u5b58\u5668\u5171\u540c\u7ec4\u6210\u4e86 New DMA Source. New DMA Source \u7684\u884c\u4e3a\u540c DMA \u7c7b\u4f3c, \u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u6307\u5b9a\u4f20\u8f93\u6e90\u7684\u5730\u5740, \u901a\u5e38, \u8fd9\u5e94\u8be5\u662f ROM, SRAM \u6216 WRAM \u4e2d\u7684\u4e00\u4e2a\u5730\u5740, \u56e0\u6b64\u5728 0x0000-0x7ff0 \u6216 0xa000-0xdff0 \u8303\u56f4\u5185. \u8be5\u5730\u5740\u7684\u4f4e 4 \u4f4d\u5c06\u88ab\u5ffd\u7565\u5e76\u89c6\u4e3a 0.","title":"HDMA1, HDMA2"},{"location":"content/gameboy/video/gpu/#hdma3-hdma4","text":"\u4e24\u4e2a\u5bc4\u5b58\u5668\u5171\u540c\u7ec4\u6210\u4e86 New DMA Destination. New DMA Destination \u53ea\u6709\u4e2d\u95f4\u7684\u7b2c 12-4 \u4f4d\u6709\u6548, \u4e14\u4f4e 4 \u4f4d\u88ab\u5ffd\u7565\u89c6\u4e3a 0. \u56e0\u6b64 New DMA Destination \u7684\u8303\u56f4\u662f 0x8000-0x9ff0.","title":"HDMA3, HDMA4"},{"location":"content/gameboy/video/gpu/#hdma5","text":"HDMA5(New DMA Length/Mode/Start) \u7528\u4e8e\u542f\u52a8\u4ece ROM \u6216 RAM \u5230 VRAM \u7684 DMA \u4f20\u8f93. \u6e90\u8d77\u59cb\u5730\u5740\u4e3a New DMA Source, \u76ee\u6807\u5730\u5740\u4e3a New DMA Destination. \u5411\u8be5\u5bc4\u5b58\u5668\u5199\u5165\u6570\u636e\u5373\u53ef\u5f00\u59cb\u4f20\u8f93, \u5176\u4f4e 7 \u4f4d\u6307\u5b9a\u4f20\u8f93\u957f\u5ea6. \u4f20\u8f93\u957f\u5ea6\u4e0e\u4f4e 7 \u4f4d\u6570\u636e\u7684\u5173\u7cfb\u4e3a Length = 0x10 * (X + 1) , \u56e0\u6b64 Length \u7684\u8303\u56f4\u4e3a 0x0010 \u5230 0x0800. \u8be5\u5bc4\u5b58\u5668\u6700\u9ad8\u4f4d\u8868\u793a\u4f20\u8f93\u6a21\u5f0f: Bit7=0 \u65f6, \u4f7f\u7528 General Purpose DMA. \u4f7f\u7528\u6b64\u4f20\u8f93\u65b9\u6cd5\u65f6, \u5c06\u7acb\u5373\u4f20\u8f93\u6240\u6709\u6570\u636e. \u7a0b\u5e8f\u7684\u6267\u884c\u5c06\u6682\u505c, \u76f4\u5230\u4f20\u8f93\u5b8c\u6210. \u8bf7\u6ce8\u610f, \u5373\u4f7f LCD \u63a7\u5236\u5668\u5f53\u524d\u6b63\u5728\u8bbf\u95ee VRAM, DMA \u4e5f\u4f1a\u5c1d\u8bd5\u590d\u5236\u6570\u636e. \u56e0\u6b64, \u4ec5\u5f53\u663e\u793a\u5668\u88ab\u7981\u7528\u65f6, \u6216\u8005\u5728 V-Blank \u671f\u95f4, \u6216\u8005(\u5bf9\u4e8e\u76f8\u5f53\u77ed\u7684\u5757\u957f\u5ea6)\u5728 H-Blank \u671f\u95f4, \u624d\u5e94\u4f7f\u7528\u901a\u7528 DMA. \u4f20\u8f93\u5b8c\u6210\u540e\u7a0b\u5e8f\u7684\u6267\u884c\u7ee7\u7eed, \u5e76\u5411 0xff55 \u5199\u5165\u503c 0xff. Bit7=1 \u65f6, \u4f7f\u7528 H-Blank DMA. H-Blank DMA \u5728\u6bcf\u4e2a H-Blank \u671f\u95f4\u4f20\u8f93 0x10 \u5b57\u8282\u7684\u6570\u636e(\u5373 LY = 0-143 \u65f6). \u5728 V-Blank \u671f\u95f4\u4e0d\u4f1a\u4f20\u8f93\u6570\u636e(\u5373 LY = 144-153) \u65f6. \u5bc4\u5b58\u5668 0xff55 \u7684\u4f4e 7 \u4f4d\u5b58\u50a8\u5269\u4f59\u5f85\u4f20\u8f93\u6570\u636e\u7684\u5927\u5c0f(\u6ce8\u610f\u9700\u8981\u4f7f\u7528\u4e0a\u8ff0\u516c\u5f0f\u8fdb\u884c\u8f6c\u6362). \u503c 0xff \u8868\u793a\u5f53\u524d\u4f20\u8f93\u5df2\u5b8c\u6210. \u901a\u8fc7\u5c06 0 \u5199\u5165 0xff55 \u7684\u6700\u9ad8\u4f4d, \u4e5f\u53ef\u4ee5\u7ec8\u6b62\u5f53\u524d\u7684 H-Blank DMA \u4f20\u8f93.","title":"HDMA5"},{"location":"content/gameboy/video/gpu/#dma_1","text":"pub struct Hdma { // These two registers specify the address at which the transfer will read data from. Normally, this should be // either in ROM, SRAM or WRAM, thus either in range 0000-7FF0 or A000-DFF0. [Note : this has yet to be tested on // Echo RAM, OAM, FEXX, IO and HRAM]. Trying to specify a source address in VRAM will cause garbage to be copied. // The four lower bits of this address will be ignored and treated as 0. pub src: u16, // These two registers specify the address within 8000-9FF0 to which the data will be copied. Only bits 12-4 are // respected; others are ignored. The four lower bits of this address will be ignored and treated as 0. pub dst: u16, pub active: bool, pub mode: HdmaMode, pub remain: u8, } impl Gpu { fn run_dma(&mut self) -> u32 { if !self.hdma.active { return 0; } match self.hdma.mode { HdmaMode::Gdma => { let len = u32::from(self.hdma.remain) + 1; for _ in 0..len { self.run_dma_hrampart(); } self.hdma.active = false; len * 8 } HdmaMode::Hdma => { if !self.gpu.h_blank { return 0; } self.run_dma_hrampart(); if self.hdma.remain == 0x7f { self.hdma.active = false; } 8 } } } fn run_dma_hrampart(&mut self) { let mmu_src = self.hdma.src; for i in 0..0x10 { let b: u8 = self.get(mmu_src + i); self.gpu.set(self.hdma.dst + i, b); } self.hdma.src += 0x10; self.hdma.dst += 0x10; if self.hdma.remain == 0 { self.hdma.remain = 0x7f; } else { self.hdma.remain -= 1; } } }","title":"DMA \u4ee3\u7801\u5b9e\u73b0"},{"location":"content/gameboy/video/gpu/#vram-tile-data","text":"Tile \u6570\u636e\u5b58\u50a8\u5728 VRAM \u4e2d\u7684\u5730\u5740 0x8000-0x97ff \u533a\u95f4\u5185, \u5176\u4e2d\u4e00\u4e2a Tile \u4e3a 16 \u5b57\u8282\u5927, \u8be5\u533a\u57df\u603b\u5171\u5b9a\u4e49\u4e86 384 \u4e2a Tile \u7684\u6570\u636e. \u5728 CGB \u6a21\u5f0f\u4e0b, \u7531\u4e8e\u6709\u4e24\u4e2a VRAM \u5e93, \u56e0\u6b64\u5b83\u52a0\u500d\u81f3 768 \u4e2a Tile. \u6bcf\u4e2a Tile \u7684\u5927\u5c0f\u4e3a 8x8 \u50cf\u7d20, \u989c\u8272\u6df1\u5ea6\u4e3a 4 \u79cd\u989c\u8272/\u7070\u8272\u9634\u5f71. Tile \u53ef\u4ee5\u7528\u4e8e\u663e\u793a\u4e3a BG \u6216 Window \u8d34\u56fe\u7684\u4e00\u90e8\u5206, \u6216\u663e\u793a\u4e3a Sprite. \u8bf7\u6ce8\u610f, Sprite \u4e0d\u4f7f\u7528\u989c\u8272 0, \u989c\u8272 0 \u5728 Sprite \u4e2d\u662f\u900f\u660e\u7684. 0x8000-0x97ff \u5185\u5b58\u533a\u95f4\u88ab\u5206\u4e3a 3 \u4e2a\u660e\u663e\u7684\u529f\u80fd\u4e0d\u540c\u7684\u5757(Block), \u6bcf\u4e2a\u5757\u5305\u542b 128 \u4e2a Tile: Block 0 is 0x8000-0x87ff Block 1 is 0x8800-0x8fff Block 2 is 0x9000-0x97ff \u89c2\u5bdf\u6bcf\u4e2a\u533a\u95f4\u7684\u8303\u56f4, \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a Tile \u90fd\u53ef\u4ee5\u88ab\u4e00\u4e2a Block Index \u548c\u4e00\u4e2a 8 \u4f4d\u7684 Tile Index \u8fdb\u884c\u7d22\u5f15, \u4e0d\u8fc7\u4e0d\u540c\u7684\u533a\u95f4\u7d22\u5f15\u65b9\u5f0f\u53ef\u80fd\u4e0d\u540c: \"8000 \u5bfb\u5740\"\u65b9\u6cd5\u91c7\u7528 0x8000 \u4f5c\u4e3a\u5176\u57fa\u7840\u5730\u5740, \u5e76\u5c06 8 \u4f4d Tile Index \u4f5c\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\u4e0e\u5176\u76f8\u52a0(\u8fd9\u610f\u5473\u7740 Tile 0-127 \u5728 Block 0 \u4e2d, Tile 128-255 \u5728 Block 1\u4e2d); \"8800 \u5bfb\u5740\"\u65b9\u6cd5\u91c7\u7528 0x9000 \u4f5c\u4e3a\u5176\u57fa\u7840\u5730\u5740, \u5e76\u5c06 8 \u4f4d Tile Index \u4f5c\u4e3a\u6709\u7b26\u53f7\u6574\u6570\u4e0e\u5176\u76f8\u52a0. \u6362\u53e5\u8bdd\u8bf4, \"8000 \u5bfb\u5740\"\u4ece Block 0 \u83b7\u53d6 Tile 0-127, \u4ece Block 1 \u83b7\u53d6 Tile 128-255, \u800c\"8800 \u5bfb\u5740\"\u4ece Block 2 \u83b7\u53d6 Tile 0-127, \u4ece Block 1 \u83b7\u53d6 Tile 128-255. \u53ef\u4ee5\u6ce8\u610f\u5230 Block 1 \u7531\u4e24\u79cd\u5bfb\u5740\u65b9\u6cd5\u5171\u4eab. Sprite \u603b\u662f\u4f7f\u7528 8000 \u5bfb\u5740, \u4f46 BG \u548c Window \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4e00\u79cd\u6a21\u5f0f, \u5177\u4f53\u7531 LCDC(LCD Control Register) \u7684 Bit 4 \u63a7\u5236. \u6bcf\u4e2a Tile \u5360\u7528 16 \u4e2a\u5b57\u8282, \u5176\u4e2d\u6bcf\u4e2a 2 \u4e2a\u5b57\u8282\u4ee3\u8868\u4e00\u884c: Byte 0-1 First Line (Upper 8 pixels) Byte 2-3 Next Line etc. Tile \u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u7684\u4f4e\u4f4d\u4fdd\u6301\u5728\u4e00\u4e2a\u5b57\u8282\u4e2d, \u800c\u9ad8\u4f4d\u5728\u53e6\u4e00\u4e2a\u5b57\u8282\u4e2d. \u4e0b\u9762\u7684\u7ed3\u6784\u8868\u793a Tile \u4e2d\u7684 8 \u4e2a\u50cf\u7d20, \u7b2c\u4e00\u4e2a\u50cf\u7d20\u662f 01 = \u6df1\u7070, \u7b2c\u4e8c\u4e2a\u50cf\u7d20\u662f 10 = \u6d45\u7070, \u5e76\u4ee5\u6b64\u7c7b\u63a8. [0x803e] | 0 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | = 0x4e [0x803f] | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | = 0x8d \u56e0\u6b64, \u6bcf\u4e2a\u50cf\u7d20\u7684\u8272\u6570\u8303\u56f4\u4e3a 0-3. \u6839\u636e\u5f53\u524d\u8c03\u8272\u677f, \u989c\u8272\u7f16\u53f7\u88ab\u8f6c\u6362\u4e3a\u771f\u5b9e\u989c\u8272(\u6216\u7070\u8272\u9634\u5f71).","title":"VRAM Tile Data"},{"location":"content/gameboy/video/gpu/#vram-background-maps","text":"Game Boy \u5728\u5730\u5740 0x9800-0x9bff \u548c 0x9c00-0x9fff \u7684 VRAM \u4e2d\u5305\u542b\u4e24\u4e2a\u5927\u5c0f\u4e3a 32x32 \u7684 Tile \u6620\u5c04. \u6bcf\u4e2a\u6620\u5c04\u5173\u7cfb\u90fd\u53ef\u7528\u4e8e\u663e\u793a BG \u6216 Window \u7684\u80cc\u666f. VRAM \u4e2d\u5305\u542b\u4e00\u4e2a\u88ab\u79f0\u4e4b\u4e3a Background Tile Map \u7684\u4e00\u4e2a\u533a\u57df, \u5176\u4e2d\u5305\u542b\u8981\u663e\u793a\u7684 Tile \u6570\u91cf. \u5b83\u7ec4\u7ec7\u4e3a 32 \u884c, \u6bcf\u884c 32 \u4e2a\u5b57\u8282. \u6bcf\u4e2a\u5b57\u8282\u5305\u542b\u8bb8\u591a\u8981\u663e\u793a\u7684\u56fe\u5757. \u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u5bfb\u5740\u6a21\u5f0f\u8fdb\u884c\u5bfb\u5740(\u5982\u4e0a\u6240\u8ff0). \u7531\u4e8e\u4e00\u4e2a\u80cc\u666f\u56fe\u5757\u7684\u5927\u5c0f\u4e3a 8x8 \u50cf\u7d20, \u56e0\u6b64 BG \u8d34\u56fe\u53ef\u4ee5\u5bb9\u7eb3 256x256 \u50cf\u7d20\u7684\u56fe\u7247, \u5e76\u4e14\u8be5\u56fe\u7247\u7684\u5176\u4e2d 160x144 \u50cf\u7d20\u7684\u533a\u57df\u53ef\u4ee5\u663e\u793a\u5728 LCD \u5c4f\u5e55\u4e0a. \u5728 CGB \u6a21\u5f0f\u4e0b, VRAM Bank 1 \u4e2d\u5b58\u50a8\u4e86\u989d\u5916\u7684\u4e00\u4e2a 32x32 \u5b57\u8282\u7684\u6620\u5c04(\u6bcf\u4e2a\u5b57\u8282\u5b9a\u4e49\u4e86 VRAM Bank 0 \u4e2d\u76f8\u5e94\u7684 Tile \u7684\u5c5e\u6027). \u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50: 1:9800 \u5b9a\u4e49\u4e86\u5b58\u50a8\u4e8e 0:9800 \u7684 Tile \u7684\u5c5e\u6027. \u4f4d \u8bf4\u660e Bit 0-2 \u80cc\u666f\u8c03\u8272\u677f\u7f16\u53f7 (BGP0-7) Bit 3 Tile VRAM \u7684 Bank number (0=Bank 0, 1=Bank 1) Bit 4 \u672a\u4f7f\u7528 Bit 5 \u662f\u5426\u6c34\u5e73\u7ffb\u8f6c (0=Normal, 1=Mirror horizontally) Bit 6 \u662f\u5426\u5782\u76f4\u7ffb\u8f6c (0=Normal, 1=Mirror vertically) Bit 7 BG \u76f8\u5bf9\u4e8e Sprite \u7684\u663e\u793a\u4f18\u5148\u7ea7 (0=Use OAM priority bit, 1=BG Priority) \u5f53 Bit 7 \u7f6e\u4f4d\u65f6, \u76f8\u5e94\u7684 BG Tile \u5c06\u4f18\u5148\u4e8e\u6240\u6709 Sprite(\u65e0\u8bba OAM \u5b58\u50a8\u5668\u4e2d\u7684\u4f18\u5148\u7ea7\u4f4d\u5982\u4f55). LCDC \u5bc4\u5b58\u5668\u7684\u4f4d 0 \u8fd8\u6709\u4e00\u4e2a\u4e3b\u4f18\u5148\u7ea7\u6807\u5fd7, \u5f53\u6e05\u96f6\u65f6, \u5b83\u4f1a\u8986\u76d6\u6240\u6709\u5176\u4ed6\u4f18\u5148\u7ea7\u4f4d. SCY \u548c SCX \u5bc4\u5b58\u5668\u53ef\u7528\u4e8e\u6eda\u52a8 BG, \u5176\u5141\u8bb8\u5728\u603b 256x256 \u50cf\u7d20 BG \u56fe\u4e2d\u9009\u62e9\u53ef\u89c1\u7684 160x144 \u50cf\u7d20\u533a\u57df\u7684\u539f\u70b9. \u9664\u4e86 BG, \u8fd8\u6709\u4e00\u4e2a\u8986\u76d6 BG \u7684 Windos. Windos \u4e0d\u53ef\u6eda\u52a8, \u4e5f\u5c31\u662f\u8bf4, \u5b83\u59cb\u7ec8\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u663e\u793a. \u53ef\u4ee5\u901a\u8fc7 WX \u548c WY \u5bc4\u5b58\u5668\u8c03\u6574\u5c4f\u5e55\u4e0a\u7a97\u53e3\u7684\u4f4d\u7f6e. \u6ce8\u610f\u7a97\u53e3\u5de6\u4e0a\u89d2\u7684\u5c4f\u5e55\u5750\u6807\u4e3a (WX-7, WY). \u7a97\u53e3\u4e0e BG \u5171\u4eab\u76f8\u540c\u7684 Tile \u6570\u636e\u8868. \u80cc\u666f\u548c\u7a97\u53e3\u90fd\u53ef\u4ee5\u901a\u8fc7 LCDC \u5bc4\u5b58\u5668\u4e2d\u7684\u7279\u5b9a\u4f4d\u5355\u72ec\u7981\u7528\u6216\u542f\u7528.","title":"VRAM Background Maps"},{"location":"content/gameboy/video/gpu/#vbk","text":"\u7531\u4e8e CGB \u62e5\u6709\u4e24\u500d\u7684 VRAM, \u56e0\u6b64\u9700\u8981\u4e00\u4e2a Bank Number \u7528\u4e8e\u6307\u5b9a\u5f53\u524d\u7684 VRAM Bank. \u53ef\u4ee5\u5411 VBK(VRAM Banks) \u5199\u5165\u4ee5\u66f4\u6539 VRAM Bank, \u53ea\u6709\u4f4d 0 \u6709\u610f\u4e49, \u6240\u6709\u5176\u4ed6\u4f4d\u90fd\u88ab\u5ffd\u7565. VRAM Bank 1 \u50cf VRAM Bank 0 \u4e00\u6837\u88ab\u5206\u5272\u4e3a\u4e0d\u540c\u533a\u57df. 0x8000-0x97ff \u8fd8\u5b58\u50a8\u4e86 Tile(\u5c31\u50cf\u5728 Bank 0 \u4e2d\u4e00\u6837), \u5176\u53ef\u4ee5\u4e0e Bank 0 Tile \u76f8\u540c\u7684\u65b9\u5f0f\u8bbf\u95ee. 0x9800-0x9fff \u5305\u542b\u76f8\u5e94 Tile Maps \u7684\u5c5e\u6027. \u4ece\u8be5\u5bc4\u5b58\u5668\u8bfb\u53d6\u5c06\u8fd4\u56de\u4f4d 0 \u4e2d\u5f53\u524d\u52a0\u8f7d\u7684 VRAM \u5b58\u50a8\u533a\u7684\u7f16\u53f7, \u5e76\u4e14\u6240\u6709\u5176\u4ed6\u4f4d\u5c06\u8bbe\u7f6e\u4e3a 1.","title":"VBK"},{"location":"content/gameboy/video/gpu/#vram-sprite-attribute-table-oam","text":"Game Boy \u89c6\u9891\u63a7\u5236\u5668\u6700\u591a\u53ef\u4ee5\u663e\u793a 40 \u4e2a 8x8 \u6216 8x16 \u50cf\u7d20\u7684 Sprite. \u7531\u4e8e\u786c\u4ef6\u7684\u9650\u5236, \u6bcf\u6761 Scanline \u53ea\u80fd\u663e\u793a 10 \u4e2a Sprite. Sprite Tile \u4e0e BG Tile \u6570\u636e\u683c\u5f0f\u76f8\u540c, \u4f46\u5b83\u4eec\u53d6\u81ea\u4f4d\u4e8e 0x8000-0x8fff \u7684 Sprite Pattern Table. OAM \u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u5360\u7528 4 \u4e2a\u5b57\u8282\u5927\u5c0f. Byte0 - Y Position \u6307\u5b9a\u5c4f\u5e55\u4e0a\u7684 Sprite \u7684\u5782\u76f4\u4f4d\u7f6e(\u51cf\u53bb 16). \u5c4f\u5e55\u5916\u7684\u503c(\u4f8b\u5982, Y = 0 \u6216 Y >= 160)\u4e0d\u4f1a\u663e\u793a Sprite. Byte1 - X Position \u6307\u5b9a\u5c4f\u5e55\u4e0a\u7684 Sprite \u7684\u6c34\u5e73\u4f4d\u7f6e(\u51cf\u53bb 8). \u5c4f\u5e55\u5916\u7684\u503c(\u4f8b\u5982, X = 0 \u6216 X >= 168)\u4e0d\u4f1a\u663e\u793a Sprite. Byte2 - Tile/Pattern Number \u6307\u5b9a Sprite \u7684\u7f16\u53f7(0x00-0xff). \u6b64\u503c\u4ece\u5185\u5b58\u4e2d\u9009\u62e9\u4f4d\u4e8e 0x8000-0x8fff \u7684 Tile. \u5728 CGB \u6a21\u5f0f\u4e0b, Tile \u53ef\u4ee5\u4f4d\u4e8e VRAM Bank 0 \u6216 1 \u4e2d, \u5177\u4f53\u53d6\u51b3\u4e8e\u540e\u7eed\u5b57\u8282\u7684\u4f4d 3. \u5728 8x16 \u6a21\u5f0f\u4e0b, Tile \u7f16\u53f7\u7684\u4f4e\u4f4d\u88ab\u5ffd\u7565, \u4f8b\u5982: \u4e0a\u90e8 8x8 Tile \u7f16\u53f7\u662f N \u7684\u8bdd, \u90a3\u4e0b\u534a\u90e8\u5206 Tile \u7f16\u53f7\u5c31\u662f N + 1. Byte3 - Attributes/Flags: \u4f4d \u540d\u79f0 \u8bf4\u660e Bit7 OBJ-to-BG Priority \u663e\u793a\u4f18\u5148\u7ea7 (0=OBJ \u4f18\u5148\u663e\u793a BG, 1=OBJ \u6ede\u540e BG color 1-3 ) Bit6 Y flip \u662f\u5426\u7ffb\u8f6c Y \u8f74 Bit5 X flip \u662f\u5426\u7ffb\u8f6c X \u8f74 Bit4 Palette number \u975e CGB \u6a21\u5f0f\u4e0b\u6709\u6548 (0=OBP0, 1=OBP1) Bit3 Tile VRAM-Bank CGB \u6a21\u5f0f\u4e0b\u6709\u6548 (0=Bank 0, 1=Bank 1) Bit2-0 Palette number CGB \u6a21\u5f0f\u4e0b\u6709\u6548 (OBP0-7) \u4ee3\u7801\u5b9e\u73b0 // Bit7 OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3) // (Used for both BG and Window. BG color 0 is always behind OBJ) // Bit6 Y flip (0=Normal, 1=Vertically mirrored) // Bit5 X flip (0=Normal, 1=Horizontally mirrored) // Bit4 Palette number **Non CGB Mode Only** (0=OBP0, 1=OBP1) // Bit3 Tile VRAM-Bank **CGB Mode Only** (0=Bank 0, 1=Bank 1) // Bit2-0 Palette number **CGB Mode Only** (OBP0-7) struct Attr { priority: bool, yflip: bool, xflip: bool, palette_number_0: usize, bank: bool, palette_number_1: usize, } impl From<u8> for Attr { fn from(u: u8) -> Self { Self { priority: u & (1 << 7) != 0, yflip: u & (1 << 6) != 0, xflip: u & (1 << 5) != 0, palette_number_0: u as usize & (1 << 4), bank: u & (1 << 3) != 0, palette_number_1: u as usize & 0x07, } } } Sprite \u4f18\u5148\u7ea7 \u5728\u6bcf\u4e2a Scanline \u7684 OAM \u626b\u63cf\u671f\u95f4, LCD \u63a7\u5236\u5668\u5c06 LY \u4e0e\u6bcf\u4e2a Sprite \u7684 Y \u8fdb\u884c\u6bd4\u8f83, \u4ee5\u627e\u5230\u8be5\u884c\u4e2d\u6700\u5148\u51fa\u73b0\u5728 OAM \u4e2d\u7684 10 \u4e2a Sprite. GPU \u5c06\u820d\u5f03\u5176\u4f59\u7684 Sprite, \u56e0\u4e3a\u5176\u53ea\u5141\u8bb8\u5728\u4efb\u4f55\u4e00\u884c\u4e0a\u663e\u793a 10 \u4e2a Sprite. \u8d85\u8fc7\u6b64\u9650\u5236\u65f6, \u5c06\u4e0d\u4f1a\u663e\u793a\u540e\u7eed\u5728 OAM \u4e2d\u51fa\u73b0\u7684 Sprite. \u4e3a\u4e86\u9632\u6b62\u672a\u4f7f\u7528\u7684 Sprite \u5f71\u54cd\u5c4f\u5e55\u4e0a\u7684 Sprite, \u6e38\u620f\u5f00\u53d1\u8005\u901a\u5e38\u5c06\u5176 Y \u5750\u6807\u8bbe\u7f6e\u4e3a Y = 0 \u6216 Y >= 160(144 + 16)(\u6ce8\u610f: \u5982\u679c\u5c06 Sprite \u5927\u5c0f\u8bbe\u7f6e\u4e3a 8x8 \u50cf\u7d20, Y <= 8 \u4e5f\u53ef\u4ee5\u4f7f\u7528). \u6216\u8005\u5c06\u4e00\u4e2a Srpite \u4e0a\u7684 X \u5750\u6807\u8bbe\u7f6e\u4e3a X = 0 \u6216 X >= 168(160 + 8)\u4e5f\u53ef\u5c06\u5176\u9690\u85cf, \u4f46\u4ecd\u4f1a\u5f71\u54cd\u5171\u4eab\u540c\u4e00\u884c\u7684\u5176\u4ed6 Sprite. \u5f53\u8fd9 10 \u4e2a Sprite \u5750\u6807\u91cd\u53e0\u65f6, \u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5c06\u51fa\u73b0\u5728\u6240\u6709\u5176\u4ed6 Sprite \u4e4b\u4e0a, \u4f9d\u6b64\u7c7b\u63a8. \u5728 CGB \u6a21\u5f0f\u4e0b, OAM \u4e2d\u7684\u7b2c\u4e00\u4e2a Sprite(0xfe00- 0xfe03)\u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7. \u5728\u975e CGB \u6a21\u5f0f\u4e0b, X \u5750\u6807\u8d8a\u5c0f, \u4f18\u5148\u7ea7\u8d8a\u9ad8, \u82e5 X \u5750\u6807\u76f8\u540c, \u5219\u4f18\u5148\u7ea7\u9000\u5316\u81f3 CGB \u6a21\u5f0f\u4e0b. Sprite \u4e4b\u95f4\u7684\u4f18\u5148\u7ea7\u8ba1\u7b97\u5c06\u5ffd\u7565 OBJ \u5230 BG \u7684\u4f18\u5148\u7ea7(LCDC \u5bc4\u5b58\u5668\u7684\u4f4d 0), \u5176\u4ec5\u5c06\u4efb\u610f\u7ed9\u5b9a\u70b9\u4e0a\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u975e\u900f\u660e\u8272\u5f69\u7684\u5b50\u753b\u9762\u50cf\u7d20\u4e0e BG \u8fdb\u884c\u6bd4\u8f83. \u56e0\u6b64, \u5982\u679c\u5177\u6709\u8f83\u9ad8\u4f18\u5148\u7ea7(\u57fa\u4e8e OAM \u7d22\u5f15)\u4f46\u542f\u7528\u4e86 OBJ-to-BG \u4f18\u5148\u7ea7\u7684\u7cbe\u7075\u4e0e\u5177\u6709\u8f83\u4f4e\u4f18\u5148\u7ea7\u548c\u975e\u900f\u660e\u8272\u5f69\u50cf\u7d20\u7684 Sprite \u91cd\u53e0, \u5219\u663e\u793a\u80cc\u666f\u50cf\u7d20, \u800c\u4e0d\u8003\u8651\u4f18\u5148\u7ea7\u8f83\u4f4e\u7684 Sprite \u7684 OBJ-to-BG \u4f18\u5148\u7ea7.","title":"VRAM Sprite Attribute Table (OAM)"},{"location":"content/gameboy/video/overview/","text":"\u89c6\u9891\u6982\u89c8 \u5728\u7b14\u8005\u5c0f\u7684\u65f6\u5019, \u66fe\u4e00\u5ea6\u8ba4\u4e3a\u52a8\u753b\u2014\u2014\u786e\u5207\u7684\u8bf4\u662f\u4f1a\u52a8\u7684\u89c6\u9891, \u662f\u4e00\u4e2a\u5f88\u795e\u79d8\u7684\u4e1c\u897f. \u6211\u5f00\u59cb\u641c\u522e\u5404\u79cd\u5404\u6837\u7684\u8d44\u6599, \u5f00\u59cb\u81ea\u5b66\u52a8\u753b\u8f6f\u4ef6, \u6bd4\u5982 Flash. \u4f46\u6211\u968f\u540e\u610f\u8bc6\u5230, \u521b\u5efa\u4e00\u90e8\u52a8\u753b\u8981\u6bd4\u6211\u60f3\u8c61\u7684\u96be\u7684\u591a, \u5c24\u5176\u662f\u6211\u7f3a\u4e4f\u5173\u4e8e\u89c6\u9891\u548c\u52a8\u753b\u7684\u7406\u8bba\u77e5\u8bc6\u7684\u60c5\u51b5\u4e0b. \u82e5\u5e72\u5e74\u540e, \u6211\u5728\u7269\u7406\u8bfe\u4e0a\u5f00\u59cb\u6709\u673a\u4f1a\u4e86\u89e3\u5230\u89c6\u9891\u7684\u539f\u7406, \u6211\u7684\u542f\u8499\u8001\u5e08\u662f\u4e0b\u9762\u8fd9\u5f20\u56fe\u7247, \u56fe\u7247\u7684\u540d\u5b57\u53eb\u505a\u300aThe House In Motion(\u8fd0\u52a8\u4e2d\u7684\u9a6c)\u300b. \u300a\u8fd0\u52a8\u4e2d\u7684\u9a6c\u300b\u662f\u5728 1878 \u5e74 6 \u6708\u62cd\u6444\u5b8c\u6210\u7684, \u5b83\u5305\u62ec\u516d\u5f20\u5361, \u6bcf\u5f20\u5361\u4f9d\u6b21\u663e\u793a\u516d\u5230\u5341\u4e8c\u5f20\u63cf\u7ed8\u9a6c\u8fd0\u52a8\u7684\"\u81ea\u52a8\u7535\u5b50\u7167\u7247\". \u5982\u679c\u5c06\u6bcf\u5f20\u9a6c\u7684\u526a\u5f71\u526a\u4e0b\u5e76\u6309\u7167\u987a\u5e8f\u5feb\u901f\u7528\u624b\u6307\u62e8\u52a8, \u5c06\u80fd\u770b\u5230\u8fd0\u52a8\u7684\u56fe\u50cf. \u65e0\u72ec\u6709\u5076, \u4e2d\u56fd\u53e4\u4ee3\u4e5f\u6709\u7c7b\u4f3c\u7684\u73a9\u610f. \u8d70\u9a6c\u706f\u662f\u4e2d\u56fd\u4f20\u7edf\u73a9\u5177\u4e4b\u4e00, \u5176\u706f\u5185\u4ea7\u751f\u7684\u70ed\u529b\u53ef\u9020\u6210\u6c14\u6d41, \u4ee4\u8f6e\u8f74\u8f6c\u52a8. \u8f6e\u8f74\u4e0a\u6709\u526a\u7eb8, \u70db\u5149\u5c06\u526a\u7eb8\u7684\u5f71\u6295\u5c04\u5728\u5c4f\u4e0a, \u56fe\u50cf\u4fbf\u53ef\u4ee5\u4e0d\u65ad\u8d70\u52a8. \u56e0\u591a\u5728\u706f\u5404\u4e2a\u9762\u4e0a\u7ed8\u5236\u53e4\u4ee3\u6b66\u5c06\u9a91\u9a6c\u7684\u56fe\u753b, \u800c\u706f\u8f6c\u52a8\u65f6\u770b\u8d77\u6765\u597d\u50cf\u51e0\u4e2a\u4eba\u4f60\u8ffd\u6211\u8d76\u4e00\u6837, \u6545\u540d\u8d70\u9a6c\u706f. \u770b\u5230\u8fd9\u91cc, \u76f8\u4fe1\u8bfb\u8005\u5df2\u7ecf\u660e\u767d\u89c6\u9891\u7684\u672c\u8d28\u7684. \u89c6\u9891\u7684\u672c\u8d28\u662f\u4e00\u7cfb\u5217\u9759\u6b62\u7684\u56fe\u7247, \u5f53\u8fd9\u4e9b\u56fe\u7247\u4ee5\u4e00\u5b9a\u7684\u9891\u7387\u5feb\u901f\u5207\u6362\u65f6, \u4eba\u773c\u5c31\u53ef\u4ee5\u770b\u5230\u8fde\u7eed\u7684\u753b\u9762. \u56fe\u7247\u5feb\u901f\u5207\u6362\u7684\u6700\u4f4e\u9608\u503c\u662f 16Hz, \u9891\u7387\u8fc7\u4f4e\u5219\u4eba\u773c\u80fd\u611f\u53d7\u5230\u660e\u663e\u5361\u987f, \u9891\u7387\u8fc7\u9ad8\u5219\u4eba\u773c\u4f1a\u611f\u89c9\u753b\u9762\"\u5931\u771f\": \u56e0\u4e3a\u8fc7\u4e8e\u771f\u5b9e\u800c\u663e\u5f97\u4e0d\u771f\u5b9e. \u5982\u4eca\u7684\u4e24\u5927\u89c6\u9891\u4ea7\u4e1a\u7535\u5f71\u548c\u6e38\u620f, \u5206\u522b\u91c7\u7528\u7684\u662f 24Hz \u4e0e 60Hz. \u4ece\u65e9\u671f\u7684\u50cf\u7d20\u6e38\u620f\u4f5c\u54c1\u5230\u5982\u4eca\u4e3b\u673a\u4e0a\u7684\u7206\u70b8\u753b\u9762\u6548\u679c, \u867d\u7136\u753b\u9762\u63d0\u5347\u4e86\u65e0\u6570\u500d, \u4f46\u4ece\u5236\u4f5c\u6bcf\u4e00\u5e27\u7684\u6e38\u620f\u753b\u9762\u5230\u5c06\u6bcf\u4e00\u5e27\u7684\u6e38\u620f\u753b\u9762\u663e\u793a\u5230\u5c4f\u5e55\u4e0a\u7684\u6280\u672f\u5374\u662f\u76f8\u4f3c\u7684. \u672c\u7ae0\u8282\u5c06\u63a2\u7a76 Game Boy \u662f\u5982\u4f55\u5236\u4f5c\u6bcf\u5e27\u7684\u753b\u9762, \u5e76\u5c06\u4e4b\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u6210\u4e3a\u52a8\u753b\u7684.","title":"GB-\u89c6\u9891-\u6982\u89c8"},{"location":"content/gameboy/video/overview/#_1","text":"\u5728\u7b14\u8005\u5c0f\u7684\u65f6\u5019, \u66fe\u4e00\u5ea6\u8ba4\u4e3a\u52a8\u753b\u2014\u2014\u786e\u5207\u7684\u8bf4\u662f\u4f1a\u52a8\u7684\u89c6\u9891, \u662f\u4e00\u4e2a\u5f88\u795e\u79d8\u7684\u4e1c\u897f. \u6211\u5f00\u59cb\u641c\u522e\u5404\u79cd\u5404\u6837\u7684\u8d44\u6599, \u5f00\u59cb\u81ea\u5b66\u52a8\u753b\u8f6f\u4ef6, \u6bd4\u5982 Flash. \u4f46\u6211\u968f\u540e\u610f\u8bc6\u5230, \u521b\u5efa\u4e00\u90e8\u52a8\u753b\u8981\u6bd4\u6211\u60f3\u8c61\u7684\u96be\u7684\u591a, \u5c24\u5176\u662f\u6211\u7f3a\u4e4f\u5173\u4e8e\u89c6\u9891\u548c\u52a8\u753b\u7684\u7406\u8bba\u77e5\u8bc6\u7684\u60c5\u51b5\u4e0b. \u82e5\u5e72\u5e74\u540e, \u6211\u5728\u7269\u7406\u8bfe\u4e0a\u5f00\u59cb\u6709\u673a\u4f1a\u4e86\u89e3\u5230\u89c6\u9891\u7684\u539f\u7406, \u6211\u7684\u542f\u8499\u8001\u5e08\u662f\u4e0b\u9762\u8fd9\u5f20\u56fe\u7247, \u56fe\u7247\u7684\u540d\u5b57\u53eb\u505a\u300aThe House In Motion(\u8fd0\u52a8\u4e2d\u7684\u9a6c)\u300b. \u300a\u8fd0\u52a8\u4e2d\u7684\u9a6c\u300b\u662f\u5728 1878 \u5e74 6 \u6708\u62cd\u6444\u5b8c\u6210\u7684, \u5b83\u5305\u62ec\u516d\u5f20\u5361, \u6bcf\u5f20\u5361\u4f9d\u6b21\u663e\u793a\u516d\u5230\u5341\u4e8c\u5f20\u63cf\u7ed8\u9a6c\u8fd0\u52a8\u7684\"\u81ea\u52a8\u7535\u5b50\u7167\u7247\". \u5982\u679c\u5c06\u6bcf\u5f20\u9a6c\u7684\u526a\u5f71\u526a\u4e0b\u5e76\u6309\u7167\u987a\u5e8f\u5feb\u901f\u7528\u624b\u6307\u62e8\u52a8, \u5c06\u80fd\u770b\u5230\u8fd0\u52a8\u7684\u56fe\u50cf. \u65e0\u72ec\u6709\u5076, \u4e2d\u56fd\u53e4\u4ee3\u4e5f\u6709\u7c7b\u4f3c\u7684\u73a9\u610f. \u8d70\u9a6c\u706f\u662f\u4e2d\u56fd\u4f20\u7edf\u73a9\u5177\u4e4b\u4e00, \u5176\u706f\u5185\u4ea7\u751f\u7684\u70ed\u529b\u53ef\u9020\u6210\u6c14\u6d41, \u4ee4\u8f6e\u8f74\u8f6c\u52a8. \u8f6e\u8f74\u4e0a\u6709\u526a\u7eb8, \u70db\u5149\u5c06\u526a\u7eb8\u7684\u5f71\u6295\u5c04\u5728\u5c4f\u4e0a, \u56fe\u50cf\u4fbf\u53ef\u4ee5\u4e0d\u65ad\u8d70\u52a8. \u56e0\u591a\u5728\u706f\u5404\u4e2a\u9762\u4e0a\u7ed8\u5236\u53e4\u4ee3\u6b66\u5c06\u9a91\u9a6c\u7684\u56fe\u753b, \u800c\u706f\u8f6c\u52a8\u65f6\u770b\u8d77\u6765\u597d\u50cf\u51e0\u4e2a\u4eba\u4f60\u8ffd\u6211\u8d76\u4e00\u6837, \u6545\u540d\u8d70\u9a6c\u706f. \u770b\u5230\u8fd9\u91cc, \u76f8\u4fe1\u8bfb\u8005\u5df2\u7ecf\u660e\u767d\u89c6\u9891\u7684\u672c\u8d28\u7684. \u89c6\u9891\u7684\u672c\u8d28\u662f\u4e00\u7cfb\u5217\u9759\u6b62\u7684\u56fe\u7247, \u5f53\u8fd9\u4e9b\u56fe\u7247\u4ee5\u4e00\u5b9a\u7684\u9891\u7387\u5feb\u901f\u5207\u6362\u65f6, \u4eba\u773c\u5c31\u53ef\u4ee5\u770b\u5230\u8fde\u7eed\u7684\u753b\u9762. \u56fe\u7247\u5feb\u901f\u5207\u6362\u7684\u6700\u4f4e\u9608\u503c\u662f 16Hz, \u9891\u7387\u8fc7\u4f4e\u5219\u4eba\u773c\u80fd\u611f\u53d7\u5230\u660e\u663e\u5361\u987f, \u9891\u7387\u8fc7\u9ad8\u5219\u4eba\u773c\u4f1a\u611f\u89c9\u753b\u9762\"\u5931\u771f\": \u56e0\u4e3a\u8fc7\u4e8e\u771f\u5b9e\u800c\u663e\u5f97\u4e0d\u771f\u5b9e. \u5982\u4eca\u7684\u4e24\u5927\u89c6\u9891\u4ea7\u4e1a\u7535\u5f71\u548c\u6e38\u620f, \u5206\u522b\u91c7\u7528\u7684\u662f 24Hz \u4e0e 60Hz. \u4ece\u65e9\u671f\u7684\u50cf\u7d20\u6e38\u620f\u4f5c\u54c1\u5230\u5982\u4eca\u4e3b\u673a\u4e0a\u7684\u7206\u70b8\u753b\u9762\u6548\u679c, \u867d\u7136\u753b\u9762\u63d0\u5347\u4e86\u65e0\u6570\u500d, \u4f46\u4ece\u5236\u4f5c\u6bcf\u4e00\u5e27\u7684\u6e38\u620f\u753b\u9762\u5230\u5c06\u6bcf\u4e00\u5e27\u7684\u6e38\u620f\u753b\u9762\u663e\u793a\u5230\u5c4f\u5e55\u4e0a\u7684\u6280\u672f\u5374\u662f\u76f8\u4f3c\u7684. \u672c\u7ae0\u8282\u5c06\u63a2\u7a76 Game Boy \u662f\u5982\u4f55\u5236\u4f5c\u6bcf\u5e27\u7684\u753b\u9762, \u5e76\u5c06\u4e4b\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u6210\u4e3a\u52a8\u753b\u7684.","title":"\u89c6\u9891\u6982\u89c8"},{"location":"content/gameboy/video/show/","text":"\u663e\u793a\u8f93\u51fa \u5c06\u56fe\u50cf\u663e\u793a\u5728\u7535\u8111\u5c4f\u5e55\u4e0a\u5e76\u4e0d\u662f\u4e00\u4ef6\u5bb9\u6613\u7684\u4e8b, \u5b83\u9700\u8981\u7531\u76f8\u5e94\u786c\u4ef6\u5e73\u53f0\u548c\u64cd\u4f5c\u7cfb\u7edf\u6240\u63d0\u4f9b\u5e95\u5c42\u652f\u6301. \u9690\u85cf\u5728\u56fe\u50cf\u80cc\u540e\u7684, \u662f\u4e13\u4e1a\u7684\u4ee3\u7801\u7f16\u5199\u548c\u786c\u4ef6\u77e5\u8bc6. \u4f46\u5e78\u8fd0\u7684\u662f, \u4e00\u4e9b\u5f00\u6e90 GUI(\u56fe\u5f62\u7528\u6237\u754c\u9762)\u5e93\u53ef\u4ee5\u7b80\u5316\u8fd9\u4e9b\u64cd\u4f5c. \u672c\u5c0f\u8282\u5c06\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 MiniFB \u5c06\u4e00\u4e2a\u4e09\u7ef4\u77e9\u9635\u4ee5\u56fe\u50cf\u7684\u5f62\u5f0f\u7ed8\u5236\u5728\u7535\u8111\u5c4f\u5e55\u4e0a. MiniFB: \u5c0f\u578b\u8de8\u5e73\u53f0 GUI \u5e93 \u4e16\u754c\u4e0a\u6709\u8bb8\u591a\u77e5\u540d\u7684 GUI \u5e93, \u4f8b\u5982 openGL \u7b49, \u4e0d\u8fc7\u9274\u4e8e\u8be5\u5e93\u5165\u95e8\u96be\u5ea6\u8f83\u9ad8\u4e14\u63d0\u4f9b\u4e86\u592a\u591a\u4e0d\u9700\u8981\u7684\u989d\u5916\u529f\u80fd, \u56e0\u6b64\u672c\u4e66\u5c06\u91c7\u7528\u53e6\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u4e14 API \u5f88\u53cb\u597d\u7684 GUI \u5e93: MiniFB(Mini FrameBuffer). MiniFB \u662f\u4e00\u4e2a\u5c0f\u578b\u8de8\u5e73\u53f0\u5e93, \u53ef\u4ee5\u5728\u7a97\u53e3\u4e2d\u8f7b\u677e\u6e32\u67d3\u50cf\u7d20. \u5b83\u63d0\u4f9b\u7684\u529f\u80fd\u4e0d\u592a\u591a\u4e5f\u4e0d\u592a\u5c11, \u6b63\u597d\u7528\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u786c\u4ef6\u4eff\u771f\u5668! \u4e00\u4e2a\u793a\u4f8b\u662f\u5c55\u793a\u5176\u5de5\u4f5c\u539f\u7406\u7684\u6700\u4f73\u65b9\u5f0f. \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d, \u6211\u4eec\u5c06\u521b\u4f5c\u4e00\u4e2a\u7b80\u5355\u7684\u5e26\u6709\u95ea\u70c1\u753b\u9762\u7684\u52a8\u753b. \u9996\u5148\u5bfc\u5165 minifb \u7684\u4f9d\u8d56, \u540c\u65f6\u58f0\u660e\u52a8\u753b\u7684\u957f\u5bbd WIDTH \u548c HEIGHT. extern crate minifb; use minifb::{Key, Window, WindowOptions}; const WIDTH: usize = 640; const HEIGHT: usize = 360; \u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u521d\u59cb\u5316\u7a97\u53e3. \u7a97\u53e3\u540d\u79f0\u4e3a\"Test \u2013 ESC to exit\", \u4e14\u7a97\u53e3\u914d\u7f6e\u91c7\u7528\u9ed8\u8ba4\u7684 WindowOptions. let mut buffer: Vec<u32> = vec![0; WIDTH * HEIGHT]; let mut window = Window::new( \"Test - ESC to exit\", WIDTH, HEIGHT, WindowOptions::default(), ) .unwrap_or_else(|e| { panic!(\"{}\", e); }); \u914d\u7f6e\u7a97\u53e3\u7684\u5237\u65b0\u7387, \u6b64\u5904\u7ea6\u4e3a 60 FPS. window.limit_update_rate(Some(std::time::Duration::from_micros(16600))); \u521b\u5efa\u4e00\u4e2a\u5faa\u73af, \u5b9e\u65f6\u4ece buffer \u5bf9\u8c61\u4e2d\u53d6\u51fa\u6570\u636e\u5e76\u66f4\u65b0\u5230\u7a97\u53e3\u91cc. \u6ce8\u610f\u5f53\u7528\u6237\u6309\u4e0b ESC \u65f6, \u5faa\u73af\u4f53\u5c06\u7ed3\u675f, \u7a0b\u5e8f\u9000\u51fa. \u7531\u4e8e\u5728\u4ee3\u7801\u4e2d\u5f3a\u5236\u8bbe\u7f6e\u4e86 buffer \u5185\u5168\u90e8\u6570\u636e\u90fd\u4e3a 0, \u56e0\u6b64\u5b9e\u9645\u8fd0\u884c\u4ee3\u7801\u540e, \u4e00\u4e2a\u5168\u9ed1\u7684\u7a97\u53e3\u5c06\u4f1a\u5c55\u793a. while window.is_open() && !window.is_key_down(Key::Escape) { for i in buffer.iter_mut() { *i = 0; } window .update_with_buffer(&buffer, WIDTH, HEIGHT) .unwrap(); } \u5982\u679c\u53ea\u662f\u9ed1\u5c4f\u7684\u8bdd, \u90a3\u53ef\u5c31\u592a\u65e0\u8da3\u4e86. \u4e0b\u9762\u6765\u7ed9\u4ee3\u7801\u52a0\u70b9\u4e1c\u897f, \u8ba9\u5b83\"\u52a8\"\u8d77\u6765! \u8981\u4fee\u6539\u7684\u5730\u65b9\u662f\u5faa\u73af\u4f53\u90e8\u5206, \u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf j \u6765\u8ba9 buffer \u5185\u7684\u6570\u636e\u6709\u89c4\u5f8b\u7684\u53d8\u5316. let mut j: u32 = 0; while window.is_open() && !window.is_key_down(Key::Escape) { for i in buffer.iter_mut() { *i = j * 128; // write something more funny here! j = j.wrapping_add(1); } } \u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f, \u4e00\u4e2a\u89c4\u5f8b\u95ea\u70c1\u7684\u52a8\u753b\u4fbf\u51fa\u73b0\u5728\u773c\u524d. \u8bfb\u8005\u53ef\u4ee5\u968f\u610f\u4fee\u6539\u4e0a\u8ff0\u4ee3\u7801, \u8bd5\u8bd5\u80fd\u505a\u51fa\u4ec0\u4e48\u52a8\u753b! \u4f8b\u5982\u4e0b\u56fe\u6240\u793a\u89c4\u5219\u7684\u8272\u5757, \u6216\u8005\u4e00\u4e2a\u6e10\u53d8\u8272\u753b\u9762? \u5b83\u4eec\u90fd\u53ea\u9700\u8981\u7528\u4e00\u70b9\u70b9\u7684\u6570\u5b66\u516c\u5f0f\u6765\u8bbe\u7f6e buffer \u5185\u7684\u6570\u636e, \u8bd5\u8bd5\u81ea\u5df1\u52a8\u624b\u5427! MiniFB \u9664\u4e86\u663e\u793a\u56fe\u50cf\u5916, \u8fd8\u80fd\u5b9e\u73b0\u8bb8\u591a\u57fa\u672c\u7684 GUI \u529f\u80fd, \u6bd4\u5982\u68c0\u6d4b\u9f20\u6807\u5355\u51fb/\u53cc\u51fb\u4e8b\u4ef6, \u952e\u76d8\u6309\u952e\u4e8b\u4ef6, \u548c\u4e3a\u7a0b\u5e8f\u6dfb\u52a0\u83dc\u5355\u7b49\u529f\u80fd(\u592a\u68d2\u4e86! \u6211\u4eec\u6b63\u9700\u8981\u76d1\u542c\u952e\u76d8\u4e8b\u4ef6\u4ee5\u4fbf\u6a21\u62df Game Boy \u7684\u6e38\u620f\u624b\u67c4). \u4e3a\u4eff\u771f\u5668\u5b9e\u73b0 main \u51fd\u6570 Game Boy \u4e2d GPU \u7684\u5de5\u4f5c\u53ef\u7528\u5982\u4e0b\u7684\u6587\u5b57\u63cf\u8ff0: \u5bf9\u4e8e Game Boy, GPU \u8f93\u51fa\u4ee3\u8868\u7070\u5ea6\u56fe\u50cf\u7684\u4e8c\u7ef4\u77e9\u9635; \u5bf9\u4e8e Game Boy Color, GPU \u5219\u8f93\u51fa\u4ee3\u8868\u5f69\u8272\u56fe\u50cf\u7684\u4e09\u7ef4\u77e9\u9635. Game Boy \u7684\u663e\u793a\u5c4f\u662f\u5c3a\u5bf8\u4e3a 160x144 \u7684\u50cf\u7d20 LCD \u5c4f\u5e55. \u5728\u4eff\u771f\u5668\u7684\u4ee3\u7801\u5b9e\u73b0\u4e0a, \u672c\u4e66\u5c06\u7edf\u4e00\u91c7\u7528\u4e09\u7ef4\u77e9\u9635\u6765\u8868\u793a\u7070\u5ea6\u6216\u5f69\u8272\u56fe\u50cf, \u5982\u679c LCD \u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u88ab\u89c6\u4e3a\u4e00\u4e2a 3 \u7ef4\u77e9\u9635\u4e2d\u7b2c\u4e8c\u7ef4\u5ea6\u7684\u4e00\u4e2a\u5143\u7d20, \u5219\u53ef\u4ee5\u5bf9\u5bbd\u5ea6\u4e3a 160 \u548c\u9ad8\u5ea6\u4e3a 144 \u7684\u5c4f\u5e55\u8fdb\u884c\u76f4\u63a5\u6620\u5c04. pub const SCREEN_W: usize = 160; pub const SCREEN_H: usize = 144; pub struct Gpu { pub data: [[[u8; 3]; SCREEN_W]; SCREEN_H], } \u501f\u52a9\u4e8e MiniFB, GPU \u4e2d\u7684 data \u6570\u636e\u73b0\u5df2\u53ef\u4ee5\u88ab\u6b63\u5e38\u663e\u793a\u5728 PC \u5c4f\u5e55\u4e0a. \u4e0b\u9762\u5c06\u4e3a Game Boy \u4eff\u771f\u5668\u6dfb\u52a0 main \u51fd\u6570, \u5728 main \u51fd\u6570\u4e2d MiniFB \u4f1a\u5faa\u73af\u8bfb\u53d6 GPU \u4e2d\u7684 data \u6570\u636e\u5e76\u663e\u793a\u5728\u7a97\u53e3\u4e2d. use gameboy::apu::Apu; use gameboy::gpu::{SCREEN_H, SCREEN_W}; use gameboy::motherboard::MotherBoard; use std::cmp; use std::thread; fn main() { let mut rom = String::from(\"\"); let mut c_scale = 2; { let mut ap = argparse::ArgumentParser::new(); ap.set_description(\"Gameboy emulator\"); ap.refer(&mut c_scale) .add_option(&[\"-x\"], argparse::Store, \"Scale the video\"); ap.refer(&mut rom).add_argument(\"rom\", argparse::Store, \"Rom name\"); ap.parse_args_or_exit(); } let mut mbrd = MotherBoard::power_up(rom); let rom_name = mbrd.mmu.borrow().cartridge.title(); let mut option = minifb::WindowOptions::default(); option.resize = true; option.scale = match c_scale { 1 => minifb::Scale::X1, 2 => minifb::Scale::X2, 4 => minifb::Scale::X4, 8 => minifb::Scale::X8, _ => panic!(\"Supported scale: 1, 2, 4 or 8\"), }; let mut window = minifb::Window::new(format!(\"Gameboy - {}\", rom_name).as_str(), SCREEN_W, SCREEN_H, option).unwrap(); let mut window_buffer = vec![0x00; SCREEN_W * SCREEN_H]; window.update_with_buffer(window_buffer.as_slice()).unwrap(); loop { // Stop the program, if the GUI is closed by the user if !window.is_open() { break; } // Execute an instruction mbrd.cpu.next(); // Update the window if NEED_UPDATE_WINDOW { let mut i: usize = 0; for l in mbrd.mmu.borrow().gpu.data.iter() { for w in l.iter() { let b = u32::from(w[0]) << 16; let g = u32::from(w[1]) << 8; let r = u32::from(w[2]); let a = 0xff00_0000; window_buffer[i] = a | b | g | r; i += 1; } } window.update_with_buffer(window_buffer.as_slice()).unwrap(); } } mbrd.mmu.borrow_mut().cartridge.sav(); } \u7531\u4e8e\u76ee\u524d\u5e76\u6ca1\u6709\u66f4\u65b0 GPU \u4e2d\u7684 data \u6570\u636e, \u5982\u679c\u8bfb\u8005\u6b64\u65f6\u8fd0\u884c\u4ee3\u7801, \u5c06\u5f97\u5230\u4e00\u4e2a\u7eaf\u9ed1\u7684 160x144 \u5927\u5c0f\u7684\u7a97\u53e3. \u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u5de5\u4f5c\u5c31\u975e\u5e38\u660e\u4e86\u4e86: \u5728 data \u91cc\u586b\u5145\u6e38\u620f\u6bcf\u4e00\u5e27\u7684\u753b\u9762\u6570\u636e!","title":"GB-\u89c6\u9891-\u663e\u793a\u8f93\u51fa"},{"location":"content/gameboy/video/show/#_1","text":"\u5c06\u56fe\u50cf\u663e\u793a\u5728\u7535\u8111\u5c4f\u5e55\u4e0a\u5e76\u4e0d\u662f\u4e00\u4ef6\u5bb9\u6613\u7684\u4e8b, \u5b83\u9700\u8981\u7531\u76f8\u5e94\u786c\u4ef6\u5e73\u53f0\u548c\u64cd\u4f5c\u7cfb\u7edf\u6240\u63d0\u4f9b\u5e95\u5c42\u652f\u6301. \u9690\u85cf\u5728\u56fe\u50cf\u80cc\u540e\u7684, \u662f\u4e13\u4e1a\u7684\u4ee3\u7801\u7f16\u5199\u548c\u786c\u4ef6\u77e5\u8bc6. \u4f46\u5e78\u8fd0\u7684\u662f, \u4e00\u4e9b\u5f00\u6e90 GUI(\u56fe\u5f62\u7528\u6237\u754c\u9762)\u5e93\u53ef\u4ee5\u7b80\u5316\u8fd9\u4e9b\u64cd\u4f5c. \u672c\u5c0f\u8282\u5c06\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 MiniFB \u5c06\u4e00\u4e2a\u4e09\u7ef4\u77e9\u9635\u4ee5\u56fe\u50cf\u7684\u5f62\u5f0f\u7ed8\u5236\u5728\u7535\u8111\u5c4f\u5e55\u4e0a.","title":"\u663e\u793a\u8f93\u51fa"},{"location":"content/gameboy/video/show/#minifb-gui","text":"\u4e16\u754c\u4e0a\u6709\u8bb8\u591a\u77e5\u540d\u7684 GUI \u5e93, \u4f8b\u5982 openGL \u7b49, \u4e0d\u8fc7\u9274\u4e8e\u8be5\u5e93\u5165\u95e8\u96be\u5ea6\u8f83\u9ad8\u4e14\u63d0\u4f9b\u4e86\u592a\u591a\u4e0d\u9700\u8981\u7684\u989d\u5916\u529f\u80fd, \u56e0\u6b64\u672c\u4e66\u5c06\u91c7\u7528\u53e6\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u4e14 API \u5f88\u53cb\u597d\u7684 GUI \u5e93: MiniFB(Mini FrameBuffer). MiniFB \u662f\u4e00\u4e2a\u5c0f\u578b\u8de8\u5e73\u53f0\u5e93, \u53ef\u4ee5\u5728\u7a97\u53e3\u4e2d\u8f7b\u677e\u6e32\u67d3\u50cf\u7d20. \u5b83\u63d0\u4f9b\u7684\u529f\u80fd\u4e0d\u592a\u591a\u4e5f\u4e0d\u592a\u5c11, \u6b63\u597d\u7528\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u786c\u4ef6\u4eff\u771f\u5668! \u4e00\u4e2a\u793a\u4f8b\u662f\u5c55\u793a\u5176\u5de5\u4f5c\u539f\u7406\u7684\u6700\u4f73\u65b9\u5f0f. \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d, \u6211\u4eec\u5c06\u521b\u4f5c\u4e00\u4e2a\u7b80\u5355\u7684\u5e26\u6709\u95ea\u70c1\u753b\u9762\u7684\u52a8\u753b. \u9996\u5148\u5bfc\u5165 minifb \u7684\u4f9d\u8d56, \u540c\u65f6\u58f0\u660e\u52a8\u753b\u7684\u957f\u5bbd WIDTH \u548c HEIGHT. extern crate minifb; use minifb::{Key, Window, WindowOptions}; const WIDTH: usize = 640; const HEIGHT: usize = 360; \u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u521d\u59cb\u5316\u7a97\u53e3. \u7a97\u53e3\u540d\u79f0\u4e3a\"Test \u2013 ESC to exit\", \u4e14\u7a97\u53e3\u914d\u7f6e\u91c7\u7528\u9ed8\u8ba4\u7684 WindowOptions. let mut buffer: Vec<u32> = vec![0; WIDTH * HEIGHT]; let mut window = Window::new( \"Test - ESC to exit\", WIDTH, HEIGHT, WindowOptions::default(), ) .unwrap_or_else(|e| { panic!(\"{}\", e); }); \u914d\u7f6e\u7a97\u53e3\u7684\u5237\u65b0\u7387, \u6b64\u5904\u7ea6\u4e3a 60 FPS. window.limit_update_rate(Some(std::time::Duration::from_micros(16600))); \u521b\u5efa\u4e00\u4e2a\u5faa\u73af, \u5b9e\u65f6\u4ece buffer \u5bf9\u8c61\u4e2d\u53d6\u51fa\u6570\u636e\u5e76\u66f4\u65b0\u5230\u7a97\u53e3\u91cc. \u6ce8\u610f\u5f53\u7528\u6237\u6309\u4e0b ESC \u65f6, \u5faa\u73af\u4f53\u5c06\u7ed3\u675f, \u7a0b\u5e8f\u9000\u51fa. \u7531\u4e8e\u5728\u4ee3\u7801\u4e2d\u5f3a\u5236\u8bbe\u7f6e\u4e86 buffer \u5185\u5168\u90e8\u6570\u636e\u90fd\u4e3a 0, \u56e0\u6b64\u5b9e\u9645\u8fd0\u884c\u4ee3\u7801\u540e, \u4e00\u4e2a\u5168\u9ed1\u7684\u7a97\u53e3\u5c06\u4f1a\u5c55\u793a. while window.is_open() && !window.is_key_down(Key::Escape) { for i in buffer.iter_mut() { *i = 0; } window .update_with_buffer(&buffer, WIDTH, HEIGHT) .unwrap(); } \u5982\u679c\u53ea\u662f\u9ed1\u5c4f\u7684\u8bdd, \u90a3\u53ef\u5c31\u592a\u65e0\u8da3\u4e86. \u4e0b\u9762\u6765\u7ed9\u4ee3\u7801\u52a0\u70b9\u4e1c\u897f, \u8ba9\u5b83\"\u52a8\"\u8d77\u6765! \u8981\u4fee\u6539\u7684\u5730\u65b9\u662f\u5faa\u73af\u4f53\u90e8\u5206, \u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf j \u6765\u8ba9 buffer \u5185\u7684\u6570\u636e\u6709\u89c4\u5f8b\u7684\u53d8\u5316. let mut j: u32 = 0; while window.is_open() && !window.is_key_down(Key::Escape) { for i in buffer.iter_mut() { *i = j * 128; // write something more funny here! j = j.wrapping_add(1); } } \u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f, \u4e00\u4e2a\u89c4\u5f8b\u95ea\u70c1\u7684\u52a8\u753b\u4fbf\u51fa\u73b0\u5728\u773c\u524d. \u8bfb\u8005\u53ef\u4ee5\u968f\u610f\u4fee\u6539\u4e0a\u8ff0\u4ee3\u7801, \u8bd5\u8bd5\u80fd\u505a\u51fa\u4ec0\u4e48\u52a8\u753b! \u4f8b\u5982\u4e0b\u56fe\u6240\u793a\u89c4\u5219\u7684\u8272\u5757, \u6216\u8005\u4e00\u4e2a\u6e10\u53d8\u8272\u753b\u9762? \u5b83\u4eec\u90fd\u53ea\u9700\u8981\u7528\u4e00\u70b9\u70b9\u7684\u6570\u5b66\u516c\u5f0f\u6765\u8bbe\u7f6e buffer \u5185\u7684\u6570\u636e, \u8bd5\u8bd5\u81ea\u5df1\u52a8\u624b\u5427! MiniFB \u9664\u4e86\u663e\u793a\u56fe\u50cf\u5916, \u8fd8\u80fd\u5b9e\u73b0\u8bb8\u591a\u57fa\u672c\u7684 GUI \u529f\u80fd, \u6bd4\u5982\u68c0\u6d4b\u9f20\u6807\u5355\u51fb/\u53cc\u51fb\u4e8b\u4ef6, \u952e\u76d8\u6309\u952e\u4e8b\u4ef6, \u548c\u4e3a\u7a0b\u5e8f\u6dfb\u52a0\u83dc\u5355\u7b49\u529f\u80fd(\u592a\u68d2\u4e86! \u6211\u4eec\u6b63\u9700\u8981\u76d1\u542c\u952e\u76d8\u4e8b\u4ef6\u4ee5\u4fbf\u6a21\u62df Game Boy \u7684\u6e38\u620f\u624b\u67c4).","title":"MiniFB: \u5c0f\u578b\u8de8\u5e73\u53f0 GUI \u5e93"},{"location":"content/gameboy/video/show/#main","text":"Game Boy \u4e2d GPU \u7684\u5de5\u4f5c\u53ef\u7528\u5982\u4e0b\u7684\u6587\u5b57\u63cf\u8ff0: \u5bf9\u4e8e Game Boy, GPU \u8f93\u51fa\u4ee3\u8868\u7070\u5ea6\u56fe\u50cf\u7684\u4e8c\u7ef4\u77e9\u9635; \u5bf9\u4e8e Game Boy Color, GPU \u5219\u8f93\u51fa\u4ee3\u8868\u5f69\u8272\u56fe\u50cf\u7684\u4e09\u7ef4\u77e9\u9635. Game Boy \u7684\u663e\u793a\u5c4f\u662f\u5c3a\u5bf8\u4e3a 160x144 \u7684\u50cf\u7d20 LCD \u5c4f\u5e55. \u5728\u4eff\u771f\u5668\u7684\u4ee3\u7801\u5b9e\u73b0\u4e0a, \u672c\u4e66\u5c06\u7edf\u4e00\u91c7\u7528\u4e09\u7ef4\u77e9\u9635\u6765\u8868\u793a\u7070\u5ea6\u6216\u5f69\u8272\u56fe\u50cf, \u5982\u679c LCD \u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u88ab\u89c6\u4e3a\u4e00\u4e2a 3 \u7ef4\u77e9\u9635\u4e2d\u7b2c\u4e8c\u7ef4\u5ea6\u7684\u4e00\u4e2a\u5143\u7d20, \u5219\u53ef\u4ee5\u5bf9\u5bbd\u5ea6\u4e3a 160 \u548c\u9ad8\u5ea6\u4e3a 144 \u7684\u5c4f\u5e55\u8fdb\u884c\u76f4\u63a5\u6620\u5c04. pub const SCREEN_W: usize = 160; pub const SCREEN_H: usize = 144; pub struct Gpu { pub data: [[[u8; 3]; SCREEN_W]; SCREEN_H], } \u501f\u52a9\u4e8e MiniFB, GPU \u4e2d\u7684 data \u6570\u636e\u73b0\u5df2\u53ef\u4ee5\u88ab\u6b63\u5e38\u663e\u793a\u5728 PC \u5c4f\u5e55\u4e0a. \u4e0b\u9762\u5c06\u4e3a Game Boy \u4eff\u771f\u5668\u6dfb\u52a0 main \u51fd\u6570, \u5728 main \u51fd\u6570\u4e2d MiniFB \u4f1a\u5faa\u73af\u8bfb\u53d6 GPU \u4e2d\u7684 data \u6570\u636e\u5e76\u663e\u793a\u5728\u7a97\u53e3\u4e2d. use gameboy::apu::Apu; use gameboy::gpu::{SCREEN_H, SCREEN_W}; use gameboy::motherboard::MotherBoard; use std::cmp; use std::thread; fn main() { let mut rom = String::from(\"\"); let mut c_scale = 2; { let mut ap = argparse::ArgumentParser::new(); ap.set_description(\"Gameboy emulator\"); ap.refer(&mut c_scale) .add_option(&[\"-x\"], argparse::Store, \"Scale the video\"); ap.refer(&mut rom).add_argument(\"rom\", argparse::Store, \"Rom name\"); ap.parse_args_or_exit(); } let mut mbrd = MotherBoard::power_up(rom); let rom_name = mbrd.mmu.borrow().cartridge.title(); let mut option = minifb::WindowOptions::default(); option.resize = true; option.scale = match c_scale { 1 => minifb::Scale::X1, 2 => minifb::Scale::X2, 4 => minifb::Scale::X4, 8 => minifb::Scale::X8, _ => panic!(\"Supported scale: 1, 2, 4 or 8\"), }; let mut window = minifb::Window::new(format!(\"Gameboy - {}\", rom_name).as_str(), SCREEN_W, SCREEN_H, option).unwrap(); let mut window_buffer = vec![0x00; SCREEN_W * SCREEN_H]; window.update_with_buffer(window_buffer.as_slice()).unwrap(); loop { // Stop the program, if the GUI is closed by the user if !window.is_open() { break; } // Execute an instruction mbrd.cpu.next(); // Update the window if NEED_UPDATE_WINDOW { let mut i: usize = 0; for l in mbrd.mmu.borrow().gpu.data.iter() { for w in l.iter() { let b = u32::from(w[0]) << 16; let g = u32::from(w[1]) << 8; let r = u32::from(w[2]); let a = 0xff00_0000; window_buffer[i] = a | b | g | r; i += 1; } } window.update_with_buffer(window_buffer.as_slice()).unwrap(); } } mbrd.mmu.borrow_mut().cartridge.sav(); } \u7531\u4e8e\u76ee\u524d\u5e76\u6ca1\u6709\u66f4\u65b0 GPU \u4e2d\u7684 data \u6570\u636e, \u5982\u679c\u8bfb\u8005\u6b64\u65f6\u8fd0\u884c\u4ee3\u7801, \u5c06\u5f97\u5230\u4e00\u4e2a\u7eaf\u9ed1\u7684 160x144 \u5927\u5c0f\u7684\u7a97\u53e3. \u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u5de5\u4f5c\u5c31\u975e\u5e38\u660e\u4e86\u4e86: \u5728 data \u91cc\u586b\u5145\u6e38\u620f\u6bcf\u4e00\u5e27\u7684\u753b\u9762\u6570\u636e!","title":"\u4e3a\u4eff\u771f\u5668\u5b9e\u73b0 main \u51fd\u6570"},{"location":"content/gameboy/video/system/","text":"Game Boy \u56fe\u50cf\u663e\u793a\u7cfb\u7edf Game Boy \u7684\u56fe\u50cf\u663e\u793a\u7cfb\u7edf\u521d\u770b\u4f1a\u6bd4\u8f83\u590d\u6742, \u4f46\u5728\u4e86\u89e3\u76f8\u5173\u6982\u5ff5\u540e\u4f1a\u6709\u4e00\u79cd\"\u539f\u6765\u5982\u6b64\"\u7684\u611f\u89c9. \u672c\u5c0f\u8282\u5c06\u5e26\u9886\u8bfb\u8005\u4ece\u5168\u5c40\u9ad8\u5ea6\u4e86\u89e3 Game Boy \u7684\u663e\u793a\u7cfb\u7edf, \u5e76\u4e0d\u4f1a\u6d89\u53ca\u5177\u4f53\u6280\u672f\u7ec6\u8282, \u5185\u5bb9\u5305\u62ec: \u74f7\u7816(Tile)\u7cfb\u7edf\u7b80\u4ecb \u8c03\u8272\u677f(Palettles)\u7684\u5de5\u4f5c\u539f\u7406\u548c\u76ee\u7684 \u56fe\u5c42\u4ecb\u7ecd \u74f7\u7816\u7cfb\u7edf \u4e00\u6b3e\u6e38\u620f\u6700\u91cd\u8981\u7684\u662f\u4ec0\u4e48? \u4e0d\u540c\u7684\u73a9\u5bb6\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u7b54\u6848, \u4f46\u753b\u9762\u4e00\u5b9a\u5728\u5176\u4e2d\u5360\u6709\u91cd\u8981\u7684\u6bd4\u4f8b. \u5982\u679c\u4e00\u4e2a\u6e38\u620f\u753b\u9762\u9ed1\u6f06\u6f06\u4e00\u7247, \u7eb5\u7136\u6709\u52a8\u542c\u7684\u97f3\u4e50\u6216\u6ee1\u5c4f\u7684\"\u6e38\u620f\u6027\", \u76f8\u4fe1\u4e5f\u5f88\u96be\u6210\u4e3a\u70ed\u5356\u7684\u5927\u4f5c. \u76f8\u6bd4\u8d77\u524d\u8f88 NES \u6765\u8bf4, Game Boy \u7684\u5c4f\u5e55\u5206\u8fa8\u7387\u5f88\u4f4e, \u5e76\u4e14\u5176\u56fe\u50cf\u7ed8\u5236\u53d7\u5230\u5185\u5b58\u5927\u5c0f\u548c\u5361\u5e26\u5bb9\u91cf\u5927\u5c0f\u7684\u6781\u5927\u9650\u5236, \u4e3a\u4e86\u7ed8\u5236\u4e00\u5f20\u56fe\u7247, \u5f53\u5e74\u7684\u5f00\u53d1\u8005\u548c\u7f8e\u5de5\u53ef\u8c13\u662f\u7ede\u5c3d\u8111\u6c41, \u53d1\u660e\u51fa\u4e86\u4e00\u79cd\u53e6\u7c7b\u7684\u6280\u5de7. \u4e0a\u9762\u7684\u6e38\u620f\u753b\u9762\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u975e\u5e38\u719f\u6089\u4e86, \u5b83\u6b63\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u6e38\u620f\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6-\u6c34\u6676\u300b\u7684\u6e38\u620f\u753b\u9762. \u4e66\u4e2d\u5f15\u7528\u7684\u8fd9\u5f20\u56fe\u7247\u7684\u539f\u683c\u5f0f\u662f png, \u957f\u5bbd\u662f 160x144, \u4fdd\u5b58\u5728\u786c\u76d8\u540e\u7684\u6587\u4ef6\u5927\u5c0f\u662f 226k. \u53d1\u73b0\u4ec0\u4e48\u95ee\u9898\u4e86\u5417? Game Boy \u7684\u5185\u5b58\u5927\u5c0f\u662f 64k, \u5982\u679c\u7528 png \u683c\u5f0f\u7684\u56fe\u50cf\u7528\u6765\u663e\u793a\u6e38\u620f\u753b\u9762, \u5373\u4f7f\u8ba9\u6574\u4e2a Game Boy \u8017\u5c3d\u5185\u5b58\u4e5f\u653e\u4e0d\u4e0b\u4e00\u5f20\u56fe\u7247. \u4f46\u662f, \u5982\u679c\u6b64\u65f6\u4ed4\u7ec6\u7684\u53bb\u89c2\u5bdf\u8be5\u753b\u9762, \u53ef\u4ee5\u660e\u663e\u53d1\u73b0\u753b\u9762\u662f\u7531\u5927\u91cf\u4e14\u91cd\u590d\u7684\u65b9\u5757(Tile)\u6784\u6210\u7684. \u52a0\u4e0a\u767d\u8272\u7684\u8f85\u52a9\u7ebf\u540e\u53ef\u4ee5\u66f4\u52a0\u660e\u663e\u7684\u611f\u53d7\u5230. Game Boy \u6e38\u620f\u62e5\u6709\u4e00\u5f20\u5168\u5c40\u7684 Tile \u8868, \u6bcf\u4e00\u4e2a Tile \u6709\u4e00\u4e2a\u552f\u4e00\u7f16\u53f7, \u5f53\u60f3\u8981\u663e\u793a\u753b\u9762\u65f6, \u53ea\u9700\u8981\u5728\u5185\u5b58\u4e2d\u5f15\u7528 Tile \u8868\u7684\u7f16\u53f7, \u5c31\u80fd\u62fc\u51d1\u51fa\u4e00\u526f\u5b8c\u6574\u7684\u6e38\u620f\u753b\u9762. \u901a\u8fc7 Tile \u7d20\u6750\u7684\u91cd\u590d\u5f15\u7528, \u53ef\u4ee5\u4f7f\u4e00\u5e27\u6e38\u620f\u753b\u9762\u7684\u5185\u5b58\u5927\u5c0f\u964d\u4f4e\u81f3 1024 \u5b57\u8282. \u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u7684\u8bdd, \u5982\u679c\u8981\u7ed8\u5236\u4e00\u5e45\u8349\u5730\u7684\u56fe\u50cf, \u53ef\u4ee5\u5c06\u5355\u4e2a\u65b9\u5757\u56fe\u50cf\"\u5c0f\u8349\"\u4fdd\u5b58\u5728 Tile \u8868\u4e2d\u5e76\u83b7\u53d6\u5176\u7f16\u53f7, \u5728\u5c4f\u5e55\u7684\u7279\u5b9a\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4ee5\"\u5c0f\u8349\"\u7684\u7f16\u53f7\u4ee3\u66ff\u5b9e\u9645\u56fe\u50cf. \u56e0\u6b64\u5176\u5b9e\u9645\u5185\u5b58\u6d88\u8017\u4e3a\u5355\u4e2a\u65b9\u5757\u56fe\u50cf\u5c0f\u8349\u4ee5\u53ca\u8be5\u56fe\u50cf\u88ab\u5f15\u7528\u7684\u6b21\u6570. \u8c03\u8272\u677f\u7cfb\u7edf \u5728\u4ecb\u7ecd Palettes(\u8c03\u8272\u677f)\u4e4b\u524d, \u5148\u804a\u4f1a\u4e00\u4e2a\u8bb8\u591a RPG \u6e38\u620f\u4e2d\u540e\u671f\u4f1a\u51fa\u73b0\u7684\u666e\u904d\u73b0\u8c61: \u602a\u7269\u6362\u76ae. \u6bd4\u5982\u4e00\u4e9b\u6e38\u620f\u65e9\u671f\u4e3b\u89d2\u4f1a\u5728\u6751\u95e8\u53e3\u9047\u5230\u84dd\u53f2\u83b1\u59c6, \u7136\u540e\u5207\u6362\u5730\u56fe\u5230\u706b\u5c71\u73af\u5883\u540e\u4fbf\u4f1a\u9047\u5230\u7ea2\u53f2\u83b1\u59c6, \u5207\u6362\u5730\u56fe\u5230\u51b0\u539f\u540e\u4fbf\u4f1a\u9047\u5230\u767d\u53f2\u83b1\u59c6, \u66f4\u6709\u751a\u8005\u4f1a\u9047\u5230\u6240\u8c13\"\u5927\"\u53f2\u83b1\u59c6(\u4e0d\u8d1f\u8d23\u4efb\u7684\u653e\u5927\u6a21\u578b). \u8fd9\u4e9b\u53f2\u83b1\u59c6\u4e4b\u95f4\u9664\u4e86\u989c\u8272\u548c\u5927\u5c0f\u4e0d\u540c\u5916\u5728\u753b\u9762\u8868\u73b0\u4e0a\u51e0\u4e4e\u6ca1\u6709\u5176\u4ed6\u533a\u522b. \u73a9\u5bb6\u4eec\u5bf9\u6b64\u662f\u6df1\u6076\u75db\u7edd\u7684. \u5f53\u4e00\u79cd\u505a\u6cd5\u5728\u6e38\u620f\u884c\u4e1a\u5f97\u4ee5\u666e\u904d, \u4e00\u5b9a\u662f\u6709\u5176\u4f18\u8d8a\u4e4b\u5904. \u6362\u76ae\u7684\u4f18\u52bf\u662f\u53ef\u4ee5\u8282\u7701\u6e38\u620f\u5361\u5e26\u5bb9\u91cf\u548c\u8282\u7ea6\u7f8e\u5de5\u65f6\u95f4. \u5728\u6e38\u620f\u4e2d(\u65e0\u8bba\u662f\u53e4\u65e9\u6e38\u620f\u8fd8\u662f\u73b0\u4ee3\u5927\u578b 3D \u6e38\u620f), \u4e00\u4e2a\u6a21\u578b(\u4e3b\u89d2, \u654c\u4eba, \u7269\u54c1, \u6b66\u5668\u7b49)\u7684\u5f62\u72b6\u548c\u989c\u8272\u901a\u5e38\u662f\u5206\u5f00\u5b58\u50a8\u7684, \u5176\u5e26\u6765\u7684\u4f18\u52bf\u9664\u4e86\u65b9\u4fbf\u6362\u76ae\u4e4b\u5916, \u8fd8\u7ecf\u5e38\u4f5c\u7528\u4e8e\u4e0e\u73af\u5883\u4ea4\u4e92\u4e4b\u4e2d, \u6bd4\u5982\u5728\u9ed1\u591c\u573a\u666f, \u89d2\u8272\u7684\u76ae\u80a4\u4f1a\u8f83\u767d\u5929\u66f4\u6697. \u5bf9\u4e8e Game Boy \u800c\u8a00, \u5c31\u662f\u5176 Tile \u53ea\u5b58\u50a8\u5f62\u72b6, Tile \u7684\u989c\u8272\u7684\u89e3\u6790\u5219\u4ea4\u7531 Palettes. \u56e0\u6b64, \u53ea\u9700\u8981\u66f4\u6539 Palettes \u7684\u6570\u636e\u5c31\u80fd\u5bf9\u4e00\u4e2a Tile \u8fdb\u884c\u6362\u76ae. \u5982\u4e0b\u56fe\u6240\u793a, \u5047\u8bbe\u4e00\u4e2a Tile \u7531\u6570\u636e 0 \u548c 1 \u6784\u6210, \u90a3\u4e48\u6839\u636e\u8c03\u8272\u677f\u7684\u4e0d\u540c, \u5b83\u53ef\u4ee5\u88ab\u663e\u793a\u51fa\u4e24\u79cd\u4e0d\u540c\u7684\u6837\u8c8c. Tile \u4e2d\u5e76\u672a\u4fdd\u5b58\u989c\u8272, \u800c\u662f\u4fdd\u5b58\u4e00\u4e2a\u989c\u8272\u7684\u7f16\u53f7. Palettes \u7684\u5de5\u4f5c\u662f\u7528\u4e8e\u5c06\u6e38\u620f\u4e2d\u7684\u989c\u8272\u7f16\u53f7\u6620\u5c04\u4e3a\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u989c\u8272. Game Boy \u53ef\u4ee5\u5904\u7406 4 \u79cd\u989c\u8272, \u5206\u522b\u662f\u767d\u8272, \u6d45\u7070\u8272, \u6df1\u7070\u8272\u548c\u9ed1\u8272. \u5728 Tile \u7684\u6570\u636e\u4e2d\u8868\u793a\u8fd9\u56db\u79cd\u989c\u8272\u4e4b\u4e00\u9700\u8981\u4e24\u4f4d(00, 01, 10, 11), \u7531\u4e8e Tile \u901a\u5e38\u7684\u5927\u5c0f\u662f 8x8 \u5206\u8fa8\u7387, \u56e0\u6b64\u4e00\u4e2a Tile \u5728\u5185\u5b58\u4e2d\u4ec5\u9700\u8981\u5360\u7528 16 \u5b57\u8282. \u5c06 00, 01, 10 \u548c 11 \u6620\u5c04\u4e3a\u771f\u5b9e\u7684\u989c\u8272\u9700\u8981\u7ecf\u8fc7 Palettes \u6a21\u5757, \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5b83\u8d1f\u8d23\u5c06 00 \u6620\u5c04\u4e3a\u9ed1\u8272, 01 \u6620\u5c04\u4e3a\u6df1\u7070\u8272, 10 \u6620\u5c04\u4e3a\u6d45\u7070\u8272, 11 \u6620\u5c04\u4e3a\u767d\u8272. \u81f3\u4e8e Game Boy Color \u60c5\u51b5\u53c8\u6709\u70b9\u4e0d\u540c, \u5728\u4e0b\u4e00\u8282\u4e2d\u4f1a\u7ee7\u7eed\u4ecb\u7ecd. BG, Sprite \u548c Window Game Boy \u7684\u663e\u793a\u7cfb\u7edf\u5206\u4e3a\u4e09\u4e2a\u56fe\u5c42, \u5206\u522b\u662f BG(\u80cc\u666f\u56fe\u5c42), Sprite/OBJ(\u6d3b\u52a8\u56fe\u5c42)\u548c Window(\u7a97\u53e3\u56fe\u5c42). \u80cc\u666f\u56fe\u5c42\u901a\u5e38\u653e\u7f6e\u9759\u6b62\u6216\u5faa\u73af\u64ad\u653e\u7684\u80cc\u666f\u753b\u9762, \u6d3b\u52a8\u56fe\u5c42\u901a\u5e38\u653e\u7f6e\u73a9\u5bb6\u6240\u64cd\u7eb5\u7684\u89d2\u8272\u548c\u654c\u4eba, \u800c\u7a97\u53e3\u56fe\u5c42\u7684\u4f5c\u7528\u7c7b\u4f3c\u5f39\u51fa\u7a97\u53e3, \u5e38\u5e38\u7528\u4e8e\u653e\u7f6e RPG \u6e38\u620f\u4e2d\u7684\u5bf9\u8bdd\u6846\u4e00\u7c7b\u7684\u533a\u57df. \u6ce8\u610f\u7684\u662f, \u65e0\u8bba\u662f BG, Sprite/OBJ \u8fd8\u662f Window, \u8fd9\u4e9b\u56fe\u5c42\u5747\u662f\u7531 Tile \u6784\u6210\u7684. \u503c\u5f97\u6ce8\u610f\u7684\u662f, Game Boy \u4e2d\u5e76\u4e0d\u5305\u542b\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u5b57\u5e93, \u56e0\u6b64\u73a9\u5bb6\u6240\u80fd\u770b\u5230\u7684\u6587\u5b57\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a Tile. Game Boy \u7684 BG \u7684\u5927\u5c0f\u662f 256x256 \u50cf\u7d20, \u4e00\u4e2a Tile \u7684\u5927\u5c0f\u901a\u5e38\u662f 8x8 \u50cf\u7d20, \u56e0\u6b64\u4e3a\u4e86\u8868\u793a\u4e00\u5e45\u5b8c\u6574\u7684\u80cc\u666f, \u9700\u8981 32x32 \u4e2a Tile. \u4f46\u662f\u7531\u4e8e Game Boy \u7684\u663e\u793a\u5668\u5927\u5c0f\u662f 160x144, \u56e0\u6b64\u9700\u8981\u4e00\u7ec4\u5750\u6807\u8868\u793a\u5f53\u524d\u7684\u663e\u793a\u753b\u9762\u4f4d\u4e8e\u80cc\u666f\u56fe\u5c42\u7684\u4f4d\u7f6e, \u8fd9\u7ec4\u5750\u6807\u4f7f\u7528\u5bc4\u5b58\u5668 Scroll X \u4e0e Scroll Y \u8868\u793a. \u6240\u4ee5\u8bf4\u73a9\u5bb6\u5728\u5c4f\u5e55\u4e0a\u770b\u5230\u7684\u753b\u9762\u5176\u5b9e\u53ea\u662f\u5b9e\u9645\u6e38\u620f\u753b\u9762\u7684\u4e00\u90e8\u5206, \u5c4f\u5e55\u4e0a\u5c55\u73b0\u7684\u753b\u9762\u662f BG \u4e2d [Scroll_X, Scroll_Y] \u5230 [Scroll_X + 160, Scroll_Y + 144] \u7684\u90e8\u5206. \u56e0\u6b64, \u90e8\u5206\u5f00\u6e90\u7684 Game Boy \u4eff\u771f\u5668\u5ba3\u4f20\u5176\"\u53ef\u4ee5\u663e\u793a\u6e38\u620f\u753b\u9762\u5916\u7684\u533a\u57df\", \u5b9e\u9645\u4e0a\u5c31\u662f\u5c06\u6574\u4e2a BG \u663e\u793a\u51fa\u6765. \u6700\u540e\u5206\u4eab\u4e00\u4e2a\u51b7\u77e5\u8bc6, Sprite \u4e5f\u5e38\u79f0\u4e3a\u96ea\u78a7\u56fe, \u56e0\u4e3a\u5176\u82f1\u6587\u540d\u79f0\u4e0e\u4e00\u6b3e\u8457\u540d\u996e\u6599\u76f8\u540c. \u7531\u4e8e\u57fa\u672c\u4e0a\u6e38\u620f\u5185\u53d7\u73a9\u5bb6\u63a7\u5236\u7684\u5c0f\u4eba\u90fd\u751f\u6d3b\u5728\u6d3b\u52a8\u56fe\u5c42\u4e2d, \u56e0\u6b64\u6709\u7684\u4eba\u4e5f\u79f0\u5176\u4e3a\u7cbe\u7075\u56fe.","title":"GB-\u89c6\u9891-\u56fe\u50cf\u663e\u793a\u7cfb\u7edf"},{"location":"content/gameboy/video/system/#game-boy","text":"Game Boy \u7684\u56fe\u50cf\u663e\u793a\u7cfb\u7edf\u521d\u770b\u4f1a\u6bd4\u8f83\u590d\u6742, \u4f46\u5728\u4e86\u89e3\u76f8\u5173\u6982\u5ff5\u540e\u4f1a\u6709\u4e00\u79cd\"\u539f\u6765\u5982\u6b64\"\u7684\u611f\u89c9. \u672c\u5c0f\u8282\u5c06\u5e26\u9886\u8bfb\u8005\u4ece\u5168\u5c40\u9ad8\u5ea6\u4e86\u89e3 Game Boy \u7684\u663e\u793a\u7cfb\u7edf, \u5e76\u4e0d\u4f1a\u6d89\u53ca\u5177\u4f53\u6280\u672f\u7ec6\u8282, \u5185\u5bb9\u5305\u62ec: \u74f7\u7816(Tile)\u7cfb\u7edf\u7b80\u4ecb \u8c03\u8272\u677f(Palettles)\u7684\u5de5\u4f5c\u539f\u7406\u548c\u76ee\u7684 \u56fe\u5c42\u4ecb\u7ecd","title":"Game Boy \u56fe\u50cf\u663e\u793a\u7cfb\u7edf"},{"location":"content/gameboy/video/system/#_1","text":"\u4e00\u6b3e\u6e38\u620f\u6700\u91cd\u8981\u7684\u662f\u4ec0\u4e48? \u4e0d\u540c\u7684\u73a9\u5bb6\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u7b54\u6848, \u4f46\u753b\u9762\u4e00\u5b9a\u5728\u5176\u4e2d\u5360\u6709\u91cd\u8981\u7684\u6bd4\u4f8b. \u5982\u679c\u4e00\u4e2a\u6e38\u620f\u753b\u9762\u9ed1\u6f06\u6f06\u4e00\u7247, \u7eb5\u7136\u6709\u52a8\u542c\u7684\u97f3\u4e50\u6216\u6ee1\u5c4f\u7684\"\u6e38\u620f\u6027\", \u76f8\u4fe1\u4e5f\u5f88\u96be\u6210\u4e3a\u70ed\u5356\u7684\u5927\u4f5c. \u76f8\u6bd4\u8d77\u524d\u8f88 NES \u6765\u8bf4, Game Boy \u7684\u5c4f\u5e55\u5206\u8fa8\u7387\u5f88\u4f4e, \u5e76\u4e14\u5176\u56fe\u50cf\u7ed8\u5236\u53d7\u5230\u5185\u5b58\u5927\u5c0f\u548c\u5361\u5e26\u5bb9\u91cf\u5927\u5c0f\u7684\u6781\u5927\u9650\u5236, \u4e3a\u4e86\u7ed8\u5236\u4e00\u5f20\u56fe\u7247, \u5f53\u5e74\u7684\u5f00\u53d1\u8005\u548c\u7f8e\u5de5\u53ef\u8c13\u662f\u7ede\u5c3d\u8111\u6c41, \u53d1\u660e\u51fa\u4e86\u4e00\u79cd\u53e6\u7c7b\u7684\u6280\u5de7. \u4e0a\u9762\u7684\u6e38\u620f\u753b\u9762\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u975e\u5e38\u719f\u6089\u4e86, \u5b83\u6b63\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u6e38\u620f\u300a\u7cbe\u7075\u5b9d\u53ef\u68a6-\u6c34\u6676\u300b\u7684\u6e38\u620f\u753b\u9762. \u4e66\u4e2d\u5f15\u7528\u7684\u8fd9\u5f20\u56fe\u7247\u7684\u539f\u683c\u5f0f\u662f png, \u957f\u5bbd\u662f 160x144, \u4fdd\u5b58\u5728\u786c\u76d8\u540e\u7684\u6587\u4ef6\u5927\u5c0f\u662f 226k. \u53d1\u73b0\u4ec0\u4e48\u95ee\u9898\u4e86\u5417? Game Boy \u7684\u5185\u5b58\u5927\u5c0f\u662f 64k, \u5982\u679c\u7528 png \u683c\u5f0f\u7684\u56fe\u50cf\u7528\u6765\u663e\u793a\u6e38\u620f\u753b\u9762, \u5373\u4f7f\u8ba9\u6574\u4e2a Game Boy \u8017\u5c3d\u5185\u5b58\u4e5f\u653e\u4e0d\u4e0b\u4e00\u5f20\u56fe\u7247. \u4f46\u662f, \u5982\u679c\u6b64\u65f6\u4ed4\u7ec6\u7684\u53bb\u89c2\u5bdf\u8be5\u753b\u9762, \u53ef\u4ee5\u660e\u663e\u53d1\u73b0\u753b\u9762\u662f\u7531\u5927\u91cf\u4e14\u91cd\u590d\u7684\u65b9\u5757(Tile)\u6784\u6210\u7684. \u52a0\u4e0a\u767d\u8272\u7684\u8f85\u52a9\u7ebf\u540e\u53ef\u4ee5\u66f4\u52a0\u660e\u663e\u7684\u611f\u53d7\u5230. Game Boy \u6e38\u620f\u62e5\u6709\u4e00\u5f20\u5168\u5c40\u7684 Tile \u8868, \u6bcf\u4e00\u4e2a Tile \u6709\u4e00\u4e2a\u552f\u4e00\u7f16\u53f7, \u5f53\u60f3\u8981\u663e\u793a\u753b\u9762\u65f6, \u53ea\u9700\u8981\u5728\u5185\u5b58\u4e2d\u5f15\u7528 Tile \u8868\u7684\u7f16\u53f7, \u5c31\u80fd\u62fc\u51d1\u51fa\u4e00\u526f\u5b8c\u6574\u7684\u6e38\u620f\u753b\u9762. \u901a\u8fc7 Tile \u7d20\u6750\u7684\u91cd\u590d\u5f15\u7528, \u53ef\u4ee5\u4f7f\u4e00\u5e27\u6e38\u620f\u753b\u9762\u7684\u5185\u5b58\u5927\u5c0f\u964d\u4f4e\u81f3 1024 \u5b57\u8282. \u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u7684\u8bdd, \u5982\u679c\u8981\u7ed8\u5236\u4e00\u5e45\u8349\u5730\u7684\u56fe\u50cf, \u53ef\u4ee5\u5c06\u5355\u4e2a\u65b9\u5757\u56fe\u50cf\"\u5c0f\u8349\"\u4fdd\u5b58\u5728 Tile \u8868\u4e2d\u5e76\u83b7\u53d6\u5176\u7f16\u53f7, \u5728\u5c4f\u5e55\u7684\u7279\u5b9a\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4ee5\"\u5c0f\u8349\"\u7684\u7f16\u53f7\u4ee3\u66ff\u5b9e\u9645\u56fe\u50cf. \u56e0\u6b64\u5176\u5b9e\u9645\u5185\u5b58\u6d88\u8017\u4e3a\u5355\u4e2a\u65b9\u5757\u56fe\u50cf\u5c0f\u8349\u4ee5\u53ca\u8be5\u56fe\u50cf\u88ab\u5f15\u7528\u7684\u6b21\u6570.","title":"\u74f7\u7816\u7cfb\u7edf"},{"location":"content/gameboy/video/system/#_2","text":"\u5728\u4ecb\u7ecd Palettes(\u8c03\u8272\u677f)\u4e4b\u524d, \u5148\u804a\u4f1a\u4e00\u4e2a\u8bb8\u591a RPG \u6e38\u620f\u4e2d\u540e\u671f\u4f1a\u51fa\u73b0\u7684\u666e\u904d\u73b0\u8c61: \u602a\u7269\u6362\u76ae. \u6bd4\u5982\u4e00\u4e9b\u6e38\u620f\u65e9\u671f\u4e3b\u89d2\u4f1a\u5728\u6751\u95e8\u53e3\u9047\u5230\u84dd\u53f2\u83b1\u59c6, \u7136\u540e\u5207\u6362\u5730\u56fe\u5230\u706b\u5c71\u73af\u5883\u540e\u4fbf\u4f1a\u9047\u5230\u7ea2\u53f2\u83b1\u59c6, \u5207\u6362\u5730\u56fe\u5230\u51b0\u539f\u540e\u4fbf\u4f1a\u9047\u5230\u767d\u53f2\u83b1\u59c6, \u66f4\u6709\u751a\u8005\u4f1a\u9047\u5230\u6240\u8c13\"\u5927\"\u53f2\u83b1\u59c6(\u4e0d\u8d1f\u8d23\u4efb\u7684\u653e\u5927\u6a21\u578b). \u8fd9\u4e9b\u53f2\u83b1\u59c6\u4e4b\u95f4\u9664\u4e86\u989c\u8272\u548c\u5927\u5c0f\u4e0d\u540c\u5916\u5728\u753b\u9762\u8868\u73b0\u4e0a\u51e0\u4e4e\u6ca1\u6709\u5176\u4ed6\u533a\u522b. \u73a9\u5bb6\u4eec\u5bf9\u6b64\u662f\u6df1\u6076\u75db\u7edd\u7684. \u5f53\u4e00\u79cd\u505a\u6cd5\u5728\u6e38\u620f\u884c\u4e1a\u5f97\u4ee5\u666e\u904d, \u4e00\u5b9a\u662f\u6709\u5176\u4f18\u8d8a\u4e4b\u5904. \u6362\u76ae\u7684\u4f18\u52bf\u662f\u53ef\u4ee5\u8282\u7701\u6e38\u620f\u5361\u5e26\u5bb9\u91cf\u548c\u8282\u7ea6\u7f8e\u5de5\u65f6\u95f4. \u5728\u6e38\u620f\u4e2d(\u65e0\u8bba\u662f\u53e4\u65e9\u6e38\u620f\u8fd8\u662f\u73b0\u4ee3\u5927\u578b 3D \u6e38\u620f), \u4e00\u4e2a\u6a21\u578b(\u4e3b\u89d2, \u654c\u4eba, \u7269\u54c1, \u6b66\u5668\u7b49)\u7684\u5f62\u72b6\u548c\u989c\u8272\u901a\u5e38\u662f\u5206\u5f00\u5b58\u50a8\u7684, \u5176\u5e26\u6765\u7684\u4f18\u52bf\u9664\u4e86\u65b9\u4fbf\u6362\u76ae\u4e4b\u5916, \u8fd8\u7ecf\u5e38\u4f5c\u7528\u4e8e\u4e0e\u73af\u5883\u4ea4\u4e92\u4e4b\u4e2d, \u6bd4\u5982\u5728\u9ed1\u591c\u573a\u666f, \u89d2\u8272\u7684\u76ae\u80a4\u4f1a\u8f83\u767d\u5929\u66f4\u6697. \u5bf9\u4e8e Game Boy \u800c\u8a00, \u5c31\u662f\u5176 Tile \u53ea\u5b58\u50a8\u5f62\u72b6, Tile \u7684\u989c\u8272\u7684\u89e3\u6790\u5219\u4ea4\u7531 Palettes. \u56e0\u6b64, \u53ea\u9700\u8981\u66f4\u6539 Palettes \u7684\u6570\u636e\u5c31\u80fd\u5bf9\u4e00\u4e2a Tile \u8fdb\u884c\u6362\u76ae. \u5982\u4e0b\u56fe\u6240\u793a, \u5047\u8bbe\u4e00\u4e2a Tile \u7531\u6570\u636e 0 \u548c 1 \u6784\u6210, \u90a3\u4e48\u6839\u636e\u8c03\u8272\u677f\u7684\u4e0d\u540c, \u5b83\u53ef\u4ee5\u88ab\u663e\u793a\u51fa\u4e24\u79cd\u4e0d\u540c\u7684\u6837\u8c8c. Tile \u4e2d\u5e76\u672a\u4fdd\u5b58\u989c\u8272, \u800c\u662f\u4fdd\u5b58\u4e00\u4e2a\u989c\u8272\u7684\u7f16\u53f7. Palettes \u7684\u5de5\u4f5c\u662f\u7528\u4e8e\u5c06\u6e38\u620f\u4e2d\u7684\u989c\u8272\u7f16\u53f7\u6620\u5c04\u4e3a\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u989c\u8272. Game Boy \u53ef\u4ee5\u5904\u7406 4 \u79cd\u989c\u8272, \u5206\u522b\u662f\u767d\u8272, \u6d45\u7070\u8272, \u6df1\u7070\u8272\u548c\u9ed1\u8272. \u5728 Tile \u7684\u6570\u636e\u4e2d\u8868\u793a\u8fd9\u56db\u79cd\u989c\u8272\u4e4b\u4e00\u9700\u8981\u4e24\u4f4d(00, 01, 10, 11), \u7531\u4e8e Tile \u901a\u5e38\u7684\u5927\u5c0f\u662f 8x8 \u5206\u8fa8\u7387, \u56e0\u6b64\u4e00\u4e2a Tile \u5728\u5185\u5b58\u4e2d\u4ec5\u9700\u8981\u5360\u7528 16 \u5b57\u8282. \u5c06 00, 01, 10 \u548c 11 \u6620\u5c04\u4e3a\u771f\u5b9e\u7684\u989c\u8272\u9700\u8981\u7ecf\u8fc7 Palettes \u6a21\u5757, \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5b83\u8d1f\u8d23\u5c06 00 \u6620\u5c04\u4e3a\u9ed1\u8272, 01 \u6620\u5c04\u4e3a\u6df1\u7070\u8272, 10 \u6620\u5c04\u4e3a\u6d45\u7070\u8272, 11 \u6620\u5c04\u4e3a\u767d\u8272. \u81f3\u4e8e Game Boy Color \u60c5\u51b5\u53c8\u6709\u70b9\u4e0d\u540c, \u5728\u4e0b\u4e00\u8282\u4e2d\u4f1a\u7ee7\u7eed\u4ecb\u7ecd.","title":"\u8c03\u8272\u677f\u7cfb\u7edf"},{"location":"content/gameboy/video/system/#bg-sprite-window","text":"Game Boy \u7684\u663e\u793a\u7cfb\u7edf\u5206\u4e3a\u4e09\u4e2a\u56fe\u5c42, \u5206\u522b\u662f BG(\u80cc\u666f\u56fe\u5c42), Sprite/OBJ(\u6d3b\u52a8\u56fe\u5c42)\u548c Window(\u7a97\u53e3\u56fe\u5c42). \u80cc\u666f\u56fe\u5c42\u901a\u5e38\u653e\u7f6e\u9759\u6b62\u6216\u5faa\u73af\u64ad\u653e\u7684\u80cc\u666f\u753b\u9762, \u6d3b\u52a8\u56fe\u5c42\u901a\u5e38\u653e\u7f6e\u73a9\u5bb6\u6240\u64cd\u7eb5\u7684\u89d2\u8272\u548c\u654c\u4eba, \u800c\u7a97\u53e3\u56fe\u5c42\u7684\u4f5c\u7528\u7c7b\u4f3c\u5f39\u51fa\u7a97\u53e3, \u5e38\u5e38\u7528\u4e8e\u653e\u7f6e RPG \u6e38\u620f\u4e2d\u7684\u5bf9\u8bdd\u6846\u4e00\u7c7b\u7684\u533a\u57df. \u6ce8\u610f\u7684\u662f, \u65e0\u8bba\u662f BG, Sprite/OBJ \u8fd8\u662f Window, \u8fd9\u4e9b\u56fe\u5c42\u5747\u662f\u7531 Tile \u6784\u6210\u7684. \u503c\u5f97\u6ce8\u610f\u7684\u662f, Game Boy \u4e2d\u5e76\u4e0d\u5305\u542b\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u5b57\u5e93, \u56e0\u6b64\u73a9\u5bb6\u6240\u80fd\u770b\u5230\u7684\u6587\u5b57\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a Tile. Game Boy \u7684 BG \u7684\u5927\u5c0f\u662f 256x256 \u50cf\u7d20, \u4e00\u4e2a Tile \u7684\u5927\u5c0f\u901a\u5e38\u662f 8x8 \u50cf\u7d20, \u56e0\u6b64\u4e3a\u4e86\u8868\u793a\u4e00\u5e45\u5b8c\u6574\u7684\u80cc\u666f, \u9700\u8981 32x32 \u4e2a Tile. \u4f46\u662f\u7531\u4e8e Game Boy \u7684\u663e\u793a\u5668\u5927\u5c0f\u662f 160x144, \u56e0\u6b64\u9700\u8981\u4e00\u7ec4\u5750\u6807\u8868\u793a\u5f53\u524d\u7684\u663e\u793a\u753b\u9762\u4f4d\u4e8e\u80cc\u666f\u56fe\u5c42\u7684\u4f4d\u7f6e, \u8fd9\u7ec4\u5750\u6807\u4f7f\u7528\u5bc4\u5b58\u5668 Scroll X \u4e0e Scroll Y \u8868\u793a. \u6240\u4ee5\u8bf4\u73a9\u5bb6\u5728\u5c4f\u5e55\u4e0a\u770b\u5230\u7684\u753b\u9762\u5176\u5b9e\u53ea\u662f\u5b9e\u9645\u6e38\u620f\u753b\u9762\u7684\u4e00\u90e8\u5206, \u5c4f\u5e55\u4e0a\u5c55\u73b0\u7684\u753b\u9762\u662f BG \u4e2d [Scroll_X, Scroll_Y] \u5230 [Scroll_X + 160, Scroll_Y + 144] \u7684\u90e8\u5206. \u56e0\u6b64, \u90e8\u5206\u5f00\u6e90\u7684 Game Boy \u4eff\u771f\u5668\u5ba3\u4f20\u5176\"\u53ef\u4ee5\u663e\u793a\u6e38\u620f\u753b\u9762\u5916\u7684\u533a\u57df\", \u5b9e\u9645\u4e0a\u5c31\u662f\u5c06\u6574\u4e2a BG \u663e\u793a\u51fa\u6765. \u6700\u540e\u5206\u4eab\u4e00\u4e2a\u51b7\u77e5\u8bc6, Sprite \u4e5f\u5e38\u79f0\u4e3a\u96ea\u78a7\u56fe, \u56e0\u4e3a\u5176\u82f1\u6587\u540d\u79f0\u4e0e\u4e00\u6b3e\u8457\u540d\u996e\u6599\u76f8\u540c. \u7531\u4e8e\u57fa\u672c\u4e0a\u6e38\u620f\u5185\u53d7\u73a9\u5bb6\u63a7\u5236\u7684\u5c0f\u4eba\u90fd\u751f\u6d3b\u5728\u6d3b\u52a8\u56fe\u5c42\u4e2d, \u56e0\u6b64\u6709\u7684\u4eba\u4e5f\u79f0\u5176\u4e3a\u7cbe\u7075\u56fe.","title":"BG, Sprite \u548c Window"},{"location":"content/go/cgo/","text":"C? Go? Cgo! \u4f7f\u7528 Cgo \u53ef\u5141\u8bb8 Go \u8c03\u7528 C \u4ee3\u7801. \u7f16\u5199\u67d0\u4e9b\u5177\u6709\u7279\u6b8a\u6807\u5fd7\u7684 Go \u4ee3\u7801, Cgo \u5c06\u628a Go \u4ee3\u7801\u4e0e C \u4ee3\u7801\u5408\u5e76\u7f16\u8bd1\u5e76\u6253\u5305\u81f3\u5355\u4e2a Go \u5305/\u53ef\u6267\u884c\u6587\u4ef6\u4e2d. \u6982\u89c8 \u8ba9\u6211\u4eec\u4ece\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5f00\u59cb, \u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528 C \u4e2d\u7684 puts \u51fd\u6570\u5728\u6807\u51c6\u8f93\u51fa\u4e2d\u6253\u5370\u4e86 \"Hello World!\": package main /* #include <stdio.h> #include <stdlib.h> */ import \"C\" import \"unsafe\" func main() { message := C.CString(\"Hello World!\\n\") defer C.free(unsafe.Pointer(message)) // free \u51fd\u6570\u5b9a\u4e49\u5728 stdlib.h \u5185 C.puts(message) // puts \u51fd\u6570\u5b9a\u4e49\u5728 stdio.h \u5185 } \u5206\u6790\u4e00\u4e0b\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u505a\u4e86\u4ec0\u4e48: \u6211\u4eec\u9996\u5148 import \"C\" , \u5e76\u4e14\u5728\u8fd9\u53e5\u8bdd\u4e4b\u524d\u52a0\u4e86\u4e00\u6bb5\u6ce8\u91ca #include <stdio.h>... , \u4e4b\u540e\u5728 main \u51fd\u6570\u5185\u4f7f\u7528 C.puts() \u7b49\u51fd\u6570\u5b8c\u6210\u4e86\u6211\u4eec\u7684\u529f\u80fd. Go \u4e2d\u5e76\u6ca1\u6709\u4e00\u4e2a\u540d\u5b57\u53eb C \u7684\u5305, \u662f\u56e0\u4e3a C \u662f\u4e00\u4e2a\"\u4f2a\u5305\": \u4e00\u4e2a\u7531 Cgo \u89e3\u91ca\u7684\u7279\u6b8a\u547d\u540d\u7a7a\u95f4. Cgo \u4f1a\u68c0\u6d4b import \"C\" \u4e4b\u524d\u7684\u6ce8\u91ca, \u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a C \u8bed\u6cd5\u5bf9\u5f85. \u4e8b\u5b9e\u4e0a, \u6ce8\u91ca\u5185\u53ef\u4ee5\u5305\u542b\u4efb\u610f C \u4ee3\u7801, \u6bd4\u5982\u5728\u6ce8\u91ca\u4e2d\u5b9a\u4e49\u4e00\u4e2a C \u51fd\u6570: package main /* #include <stdio.h> #include <stdlib.h> static void cprintf(const char* msg) { printf(msg); } */ import \"C\" import \"unsafe\" func main() { message := C.CString(\"Hello World!\\n\") defer C.free(unsafe.Pointer(message)) C.cprintf(message) } \u94fe\u63a5\u65e7\u6709\u7684 C \u4ee3\u7801 C \u8bed\u8a00\u662f\u4e00\u5ea7\u5de8\u5927\u4e14\u53e4\u8001\u7684\u5b9d\u85cf. \u76ee\u524d\u4e3a\u6b62, \u5b83\u4ecd\u7136\u662f\u4e16\u754c\u4e0a\u529f\u80fd\u6700\u5f3a, \u6027\u80fd\u6700\u597d\u7684\u8bed\u8a00(\u6ca1\u6709\u4e4b\u4e00, \u4e0d\u63a5\u53d7\u5173\u4e8e\u6b64\u65ad\u8a00\u7684\u8ba8\u8bba/\u62ac\u6760/\u8bed\u8a00\u6495\u903c). C \u8bed\u8a00\u5728\u673a\u5668\u5b66\u4e60, \u97f3\u89c6\u9891\u5904\u7406\u7b49\u9886\u57df\u5177\u6709\u4e0d\u53ef\u7f6e\u7591\u7684\u9886\u5bfc\u5730\u4f4d, \u8bb8\u591a\u540d\u5e93\u5747\u7ecf\u8fc7\u4e86\u5168\u7403\u65e0\u6570\u5f00\u53d1\u8005\u6570\u5e74\u81f3\u6570\u5341\u5e74\u7684\u6301\u7eed\u5f00\u53d1\u548c\u4f18\u5316. \u5927\u81f4\u4e0a\u6765\u8bf4, \u76f8\u6bd4\u4f7f\u7528\u522b\u7684\u8bed\u8a00\u6bd4\u5982 Go \u6216 Rust \u91cd\u65b0\u5b9e\u73b0\u4e00\u904d\u8f6e\u5b50, \u590d\u7528\u8fd9\u4e9b C \u4ee3\u7801\u663e\u5f97\u66f4\u6709\u610f\u4e49. \u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 C \u5305\u4f5c\u4e3a\u4f8b\u5b50, \u8bb2\u8ff0\u5982\u4f55\u5728 Go \u4e2d\u590d\u7528 C \u4ee3\u7801. \u975e\u5e38\u5e78\u8fd0, \u6211\u627e\u5230\u4e86\u4e00\u4e2a\u53ca\u5176\u7b80\u5355\u7684 C \u5e93, \u8fd9\u4e2a\u5e93\u53ea\u6709\u4e24\u4e2a\u6587\u4ef6: foo.h \u4e0e foo.c : // foo.c #include \"foo.h\" void foo() { printf(\"I am foo!\\n\"); } // foo.h #include <stdio.h> void foo(); \u8981\u5728 Go \u4e2d\u4f7f\u7528\u8fd9\u4e2a C \u5e93, \u6211\u4eec\u9700\u8981\u65b0\u5efa\u4e00\u4e2a foo.go \u6587\u4ef6, \u5e76\u5728\u6587\u4ef6\u4e2d\u952e\u5165\u4ee5\u4e0b\u5185\u5bb9: // foo.go package main // #cgo LDFLAGS: -L ./ -lfoo // #include \"foo.h\" import \"C\" func main() { C.foo() } \u4e07\u4e8b\u4ff1\u5907! \u73b0\u5728\u6253\u5f00\u547d\u4ee4\u884c, \u952e\u5165\u4ee5\u4e0b\u5185\u5bb9: gcc -c foo.c # \u751f\u6210 foo.o ar rv libfoo.a foo.o # \u751f\u6210 libfoo.a go build foo.go # \u751f\u6210 foo \u53ef\u6267\u884c\u6587\u4ef6 ./foo # \u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6, \u8f93\u51fa I am foo! \u4ee3\u7801\u4e0b\u8f7d \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4f7f\u7528\u7684\u4ee3\u7801\u5747\u53ef\u4e8e https://github.com/mohanson/cgo_example \u4e0b\u8f7d. \u8be5\u9879\u76ee\u4e2d\u8fd8\u5305\u62ec\u5982\u4f55\u5728 Go \u4e2d\u8c03\u7528 C++ \u4ee3\u7801\u7684\u4f8b\u5b50, \u53ef\u4f5c\u4e3a\u672c\u7ae0\u7684\u8865\u5145. \u5982\u679c\u4f60\u5bf9\u66f4\u52a0\u590d\u6742 Cgo \u9879\u76ee\u611f\u5174\u8da3, \u53ef\u4ee5\u53c2\u8003 https://github.com/mohanson/FaceDetectionServer , \u8be5\u9879\u76ee\u4f7f\u7528 Go \u8fdb\u884c\u4eba\u8138\u8bc6\u522b, \u800c\u4eba\u8138\u8bc6\u522b\u6e90\u7801\u662f\u7eaf C++ \u7f16\u5199\u7684, \u4e2d\u95f4\u4f7f\u7528 Cgo \u4f5c\u4e3a\u80f6\u6c34. \u53c2\u8003 [1] Go: C? Go? Cgo! https://blog.golang.org/c-go-cgo","title":"Go-Cgo"},{"location":"content/go/cgo/#c-go-cgo","text":"\u4f7f\u7528 Cgo \u53ef\u5141\u8bb8 Go \u8c03\u7528 C \u4ee3\u7801. \u7f16\u5199\u67d0\u4e9b\u5177\u6709\u7279\u6b8a\u6807\u5fd7\u7684 Go \u4ee3\u7801, Cgo \u5c06\u628a Go \u4ee3\u7801\u4e0e C \u4ee3\u7801\u5408\u5e76\u7f16\u8bd1\u5e76\u6253\u5305\u81f3\u5355\u4e2a Go \u5305/\u53ef\u6267\u884c\u6587\u4ef6\u4e2d.","title":"C? Go? Cgo!"},{"location":"content/go/cgo/#_1","text":"\u8ba9\u6211\u4eec\u4ece\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5f00\u59cb, \u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528 C \u4e2d\u7684 puts \u51fd\u6570\u5728\u6807\u51c6\u8f93\u51fa\u4e2d\u6253\u5370\u4e86 \"Hello World!\": package main /* #include <stdio.h> #include <stdlib.h> */ import \"C\" import \"unsafe\" func main() { message := C.CString(\"Hello World!\\n\") defer C.free(unsafe.Pointer(message)) // free \u51fd\u6570\u5b9a\u4e49\u5728 stdlib.h \u5185 C.puts(message) // puts \u51fd\u6570\u5b9a\u4e49\u5728 stdio.h \u5185 } \u5206\u6790\u4e00\u4e0b\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u505a\u4e86\u4ec0\u4e48: \u6211\u4eec\u9996\u5148 import \"C\" , \u5e76\u4e14\u5728\u8fd9\u53e5\u8bdd\u4e4b\u524d\u52a0\u4e86\u4e00\u6bb5\u6ce8\u91ca #include <stdio.h>... , \u4e4b\u540e\u5728 main \u51fd\u6570\u5185\u4f7f\u7528 C.puts() \u7b49\u51fd\u6570\u5b8c\u6210\u4e86\u6211\u4eec\u7684\u529f\u80fd. Go \u4e2d\u5e76\u6ca1\u6709\u4e00\u4e2a\u540d\u5b57\u53eb C \u7684\u5305, \u662f\u56e0\u4e3a C \u662f\u4e00\u4e2a\"\u4f2a\u5305\": \u4e00\u4e2a\u7531 Cgo \u89e3\u91ca\u7684\u7279\u6b8a\u547d\u540d\u7a7a\u95f4. Cgo \u4f1a\u68c0\u6d4b import \"C\" \u4e4b\u524d\u7684\u6ce8\u91ca, \u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a C \u8bed\u6cd5\u5bf9\u5f85. \u4e8b\u5b9e\u4e0a, \u6ce8\u91ca\u5185\u53ef\u4ee5\u5305\u542b\u4efb\u610f C \u4ee3\u7801, \u6bd4\u5982\u5728\u6ce8\u91ca\u4e2d\u5b9a\u4e49\u4e00\u4e2a C \u51fd\u6570: package main /* #include <stdio.h> #include <stdlib.h> static void cprintf(const char* msg) { printf(msg); } */ import \"C\" import \"unsafe\" func main() { message := C.CString(\"Hello World!\\n\") defer C.free(unsafe.Pointer(message)) C.cprintf(message) }","title":"\u6982\u89c8"},{"location":"content/go/cgo/#c","text":"C \u8bed\u8a00\u662f\u4e00\u5ea7\u5de8\u5927\u4e14\u53e4\u8001\u7684\u5b9d\u85cf. \u76ee\u524d\u4e3a\u6b62, \u5b83\u4ecd\u7136\u662f\u4e16\u754c\u4e0a\u529f\u80fd\u6700\u5f3a, \u6027\u80fd\u6700\u597d\u7684\u8bed\u8a00(\u6ca1\u6709\u4e4b\u4e00, \u4e0d\u63a5\u53d7\u5173\u4e8e\u6b64\u65ad\u8a00\u7684\u8ba8\u8bba/\u62ac\u6760/\u8bed\u8a00\u6495\u903c). C \u8bed\u8a00\u5728\u673a\u5668\u5b66\u4e60, \u97f3\u89c6\u9891\u5904\u7406\u7b49\u9886\u57df\u5177\u6709\u4e0d\u53ef\u7f6e\u7591\u7684\u9886\u5bfc\u5730\u4f4d, \u8bb8\u591a\u540d\u5e93\u5747\u7ecf\u8fc7\u4e86\u5168\u7403\u65e0\u6570\u5f00\u53d1\u8005\u6570\u5e74\u81f3\u6570\u5341\u5e74\u7684\u6301\u7eed\u5f00\u53d1\u548c\u4f18\u5316. \u5927\u81f4\u4e0a\u6765\u8bf4, \u76f8\u6bd4\u4f7f\u7528\u522b\u7684\u8bed\u8a00\u6bd4\u5982 Go \u6216 Rust \u91cd\u65b0\u5b9e\u73b0\u4e00\u904d\u8f6e\u5b50, \u590d\u7528\u8fd9\u4e9b C \u4ee3\u7801\u663e\u5f97\u66f4\u6709\u610f\u4e49. \u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 C \u5305\u4f5c\u4e3a\u4f8b\u5b50, \u8bb2\u8ff0\u5982\u4f55\u5728 Go \u4e2d\u590d\u7528 C \u4ee3\u7801. \u975e\u5e38\u5e78\u8fd0, \u6211\u627e\u5230\u4e86\u4e00\u4e2a\u53ca\u5176\u7b80\u5355\u7684 C \u5e93, \u8fd9\u4e2a\u5e93\u53ea\u6709\u4e24\u4e2a\u6587\u4ef6: foo.h \u4e0e foo.c : // foo.c #include \"foo.h\" void foo() { printf(\"I am foo!\\n\"); } // foo.h #include <stdio.h> void foo(); \u8981\u5728 Go \u4e2d\u4f7f\u7528\u8fd9\u4e2a C \u5e93, \u6211\u4eec\u9700\u8981\u65b0\u5efa\u4e00\u4e2a foo.go \u6587\u4ef6, \u5e76\u5728\u6587\u4ef6\u4e2d\u952e\u5165\u4ee5\u4e0b\u5185\u5bb9: // foo.go package main // #cgo LDFLAGS: -L ./ -lfoo // #include \"foo.h\" import \"C\" func main() { C.foo() } \u4e07\u4e8b\u4ff1\u5907! \u73b0\u5728\u6253\u5f00\u547d\u4ee4\u884c, \u952e\u5165\u4ee5\u4e0b\u5185\u5bb9: gcc -c foo.c # \u751f\u6210 foo.o ar rv libfoo.a foo.o # \u751f\u6210 libfoo.a go build foo.go # \u751f\u6210 foo \u53ef\u6267\u884c\u6587\u4ef6 ./foo # \u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6, \u8f93\u51fa I am foo!","title":"\u94fe\u63a5\u65e7\u6709\u7684 C \u4ee3\u7801"},{"location":"content/go/cgo/#_2","text":"\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4f7f\u7528\u7684\u4ee3\u7801\u5747\u53ef\u4e8e https://github.com/mohanson/cgo_example \u4e0b\u8f7d. \u8be5\u9879\u76ee\u4e2d\u8fd8\u5305\u62ec\u5982\u4f55\u5728 Go \u4e2d\u8c03\u7528 C++ \u4ee3\u7801\u7684\u4f8b\u5b50, \u53ef\u4f5c\u4e3a\u672c\u7ae0\u7684\u8865\u5145. \u5982\u679c\u4f60\u5bf9\u66f4\u52a0\u590d\u6742 Cgo \u9879\u76ee\u611f\u5174\u8da3, \u53ef\u4ee5\u53c2\u8003 https://github.com/mohanson/FaceDetectionServer , \u8be5\u9879\u76ee\u4f7f\u7528 Go \u8fdb\u884c\u4eba\u8138\u8bc6\u522b, \u800c\u4eba\u8138\u8bc6\u522b\u6e90\u7801\u662f\u7eaf C++ \u7f16\u5199\u7684, \u4e2d\u95f4\u4f7f\u7528 Cgo \u4f5c\u4e3a\u80f6\u6c34.","title":"\u4ee3\u7801\u4e0b\u8f7d"},{"location":"content/go/cgo/#_3","text":"[1] Go: C? Go? Cgo! https://blog.golang.org/c-go-cgo","title":"\u53c2\u8003"},{"location":"content/go/cross_compiling/","text":"\u4ea4\u53c9\u7f16\u8bd1 \u81ea\u4ece Go version 1.5 \u5f00\u59cb, \u4ea4\u53c9\u7f16\u8bd1\u53d8\u7684\u975e\u5e38\u5bb9\u6613. \u5047\u8bbe\u4f60\u5728 linux \u4e0b\u8fdb\u884c\u5f00\u53d1: package main import \"fmt\" func main() { fmt.Printf(\"Hello\\n\") } GOOS=windows GOARCH=386 go build -o hello.exe hello.go \u73b0\u5728\u4f60\u5c31\u53ef\u4ee5\u5728 windows \u7684\u673a\u5668\u4e0a\u6267\u884c hello.exe \u4e86. \u73af\u5883\u53d8\u91cf \u53ef\u9009\u503c(\u90e8\u5206) GOOS linux, windows GOARCH arm, arm64, 386, amd64 \u5b8c\u6574\u5217\u8868\u53c2\u89c1: https://golang.org/doc/install/source#environment \u5410\u69fd: \u867d\u7136\u5927\u4f53\u4e0a\u6ca1\u4ec0\u4e48\u7528\u5904, \u4f46\u6709\u65f6\u7528\u5230\u53c8\u8bb0\u4e0d\u8d77\u6765~","title":"Go-\u4ea4\u53c9\u7f16\u8bd1"},{"location":"content/go/cross_compiling/#_1","text":"\u81ea\u4ece Go version 1.5 \u5f00\u59cb, \u4ea4\u53c9\u7f16\u8bd1\u53d8\u7684\u975e\u5e38\u5bb9\u6613. \u5047\u8bbe\u4f60\u5728 linux \u4e0b\u8fdb\u884c\u5f00\u53d1: package main import \"fmt\" func main() { fmt.Printf(\"Hello\\n\") } GOOS=windows GOARCH=386 go build -o hello.exe hello.go \u73b0\u5728\u4f60\u5c31\u53ef\u4ee5\u5728 windows \u7684\u673a\u5668\u4e0a\u6267\u884c hello.exe \u4e86. \u73af\u5883\u53d8\u91cf \u53ef\u9009\u503c(\u90e8\u5206) GOOS linux, windows GOARCH arm, arm64, 386, amd64 \u5b8c\u6574\u5217\u8868\u53c2\u89c1: https://golang.org/doc/install/source#environment \u5410\u69fd: \u867d\u7136\u5927\u4f53\u4e0a\u6ca1\u4ec0\u4e48\u7528\u5904, \u4f46\u6709\u65f6\u7528\u5230\u53c8\u8bb0\u4e0d\u8d77\u6765~","title":"\u4ea4\u53c9\u7f16\u8bd1"},{"location":"content/go/end_of_time/","text":"\u65f6\u95f4\u5c3d\u5934 \u4f17\u6240\u5468\u77e5, \u65f6\u95f4\u6709\u591a\u79cd\u5b58\u50a8\u65b9\u5f0f, \u5176\u4e00\u662f\u5b57\u7b26\u4e32\u5f62\u5f0f, \u4f8b\u5982\u5728 HTTP \u534f\u8bae\u4e2d\u4f7f\u7528\u7684 RFC1123 \u683c\u5f0f, \u65f6\u95f4\u5c31\u88ab\u4fdd\u5b58\u4e3a\u5f62\u5982 Thu, 01 Jan 1970 08:00:00 CST \u7684\u5b57\u7b26\u4e32. \u5176\u4e8c\u662f\u4f7f\u7528\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4fdd\u5b58, \u4f8b\u5982\u5728\u6bd4\u7279\u5e01\u534f\u8bae\u4e2d\u5c31\u4f7f\u7528 4 \u5b57\u8282(\u5373 uint32) \u4fdd\u5b58\u65f6\u95f4. \u4f7f\u7528\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4fdd\u5b58\u65f6\u95f4\u80fd\u6781\u5927\u964d\u4f4e\u5360\u7528\u7a7a\u95f4\u5e76\u52a0\u5feb\u89e3\u6790\u901f\u5ea6, \u7f3a\u70b9\u5219\u662f\u5bf9\u4eba\u7c7b\u4e0d\u53cb\u597d. \u4f46\u4f7f\u7528\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4fdd\u5b58\u65f6\u95f4\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u95ee\u9898: 4 \u5b57\u8282(uint32) \u6216 8 \u5b57\u8282(uint64) \u80fd\u4fdd\u5b58\u7684\u65f6\u95f4\u8303\u56f4\u662f\u6709\u9650\u7684. \u5f00\u59cb\u63a2\u7d22 \u5728\u5f00\u59cb\u63a2\u8ba8\u65f6\u95f4\u7684\u5c3d\u5934\u4e4b\u524d, \u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u6574\u6570\u5230\u4e8c\u8fdb\u5236\u7684\u8f6c\u6362. \u6211\u4eec\u4ee5\u6700\u5927\u7684 uint32 \u6570\u5b57 4294967295 \u4e3e\u4f8b, \u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u7b80\u5355\u8ba1\u7b97\u8fc7\u7a0b\u5c06\u4e4b\u8f6c\u6362\u4e3a 4 \u5b57\u8282 bytes([255, 255, 255, 255]), \u5176 go \u4ee3\u7801\u5982\u4e0b: package main import \"fmt\" func main() { max := 2<<31 - 1 buf := make([]byte, 4) buf[0] = byte(max >> 24 % 256) buf[1] = byte(max >> 16 % 256) buf[2] = byte(max >> 8 % 256) buf[3] = byte(max % 256) fmt.Println(buf) // [255 255 255 255] } \u53ef\u4ee5\u4f7f\u7528 encoding/binary \u5305\u7b80\u5316\u4e0a\u8ff0\u8ba1\u7b97: package main import ( \"encoding/binary\" \"fmt\" ) func main() { var max uint32 = 2<<31 - 1 buf := make([]byte, 4) // uint32 \u5230 4 \u5b57\u8282 binary.BigEndian.PutUint32(buf, max) fmt.Println(\"bin:\", buf) // 4 \u5b57\u8282\u5230 uint32 r := binary.BigEndian.Uint32([]byte{0xFF, 0xFF, 0xFF, 0xFF}) fmt.Println(\"int:\", r) } \u8fd9\u91cc\u8981\u63d0\u4e00\u4e0b\u7684\u662f binary.BigEndian \u8868\u793a\u7684\u662f \u5927\u7aef\u5e8f , \u5373\u9ad8\u4f4d\u5b57\u8282\u5728\u5730\u5740\u4f4e\u4f4d. \u4e0e\u4e4b\u76f8\u53cd\u7684\u8fd8\u6709\u4e00\u4e2a \u5c0f\u7aef\u5e8f . \u76ee\u524d\u6765\u8bf4\u5927\u7aef\u5e8f\u5e94\u7528\u8f83\u4e3a\u5e7f\u6cdb. \u53ef\u89c1\u672c\u8282\u53c2\u8003. \u7ec8\u70b9 \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 4 \u5b57\u8282\u6240\u80fd\u5b58\u50a8\u7684\u6700\u5927\u6574\u6570\u662f 4294967295, \u540c\u65f6\u8be5\u6574\u6570\u6240\u4ee3\u8868\u7684\u65e5\u671f\u662f: end := time.Unix(int64(2<<31-1), 0) // 2106-02-07 14:28:15 +0800 CST \u6ca1\u9519, \u8bb0\u5f97\u5728 2106-02-07 14:28:15 +0800 CST \u4e4b\u524d\u629b\u6389\u4f60\u624b\u4e2d\u7684\u6240\u6709\u6bd4\u7279\u5e01(\u624b\u52a8\u6ed1\u7a3d). \u7531\u4e8e\u65f6\u95f4\u6ea2\u51fa\u5f15\u53d1\u7684 BUG \u6700\u77e5\u540d\u7684\u5e94\u8be5\u662f\u5343\u5e74\u866b\u4e8b\u4ef6\u4e86, \u867d\u7136\u8be5\u4e8b\u4ef6\u5df2\u7ecf\u8fc7\u53bb, \u4f46\u672a\u6765\u5fc5\u5b9a\u4f1a\u518d\u6b21\u53d1\u751f, \u6709\u5f88\u5927\u53ef\u80fd\u5c31\u662f\u5728 2106 \u5e74, \u56e0\u4e3a\u6211\u4eec\u4e0d\u77e5\u9053\u9664\u4e86\u6bd4\u7279\u5e01\u4e4b\u5916, \u8fd8\u6709\u54ea\u4e9b\u8f6f\u4ef6\u4e5f\u4f7f\u7528\u4e86 4 \u5b57\u8282\u65f6\u95f4. \u672c\u6b21\u63a2\u7d22\u7ed9\u6211\u7684\u6559\u8bad\u662f: \u4e0d\u8981\u4f7f\u7528 uint32 \u4fdd\u5b58\u65f6\u95f4 . \u53c2\u8003 [1] \u7ef4\u57fa: \u5b57\u8282\u5e8f https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F [2] \u7ef4\u57fa: \u5343\u5e74\u866b https://zh.wikipedia.org/zh-hans/2000%E5%B9%B4%E9%97%AE%E9%A2%98","title":"Go-\u65f6\u95f4\u5c3d\u5934"},{"location":"content/go/end_of_time/#_1","text":"\u4f17\u6240\u5468\u77e5, \u65f6\u95f4\u6709\u591a\u79cd\u5b58\u50a8\u65b9\u5f0f, \u5176\u4e00\u662f\u5b57\u7b26\u4e32\u5f62\u5f0f, \u4f8b\u5982\u5728 HTTP \u534f\u8bae\u4e2d\u4f7f\u7528\u7684 RFC1123 \u683c\u5f0f, \u65f6\u95f4\u5c31\u88ab\u4fdd\u5b58\u4e3a\u5f62\u5982 Thu, 01 Jan 1970 08:00:00 CST \u7684\u5b57\u7b26\u4e32. \u5176\u4e8c\u662f\u4f7f\u7528\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4fdd\u5b58, \u4f8b\u5982\u5728\u6bd4\u7279\u5e01\u534f\u8bae\u4e2d\u5c31\u4f7f\u7528 4 \u5b57\u8282(\u5373 uint32) \u4fdd\u5b58\u65f6\u95f4. \u4f7f\u7528\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4fdd\u5b58\u65f6\u95f4\u80fd\u6781\u5927\u964d\u4f4e\u5360\u7528\u7a7a\u95f4\u5e76\u52a0\u5feb\u89e3\u6790\u901f\u5ea6, \u7f3a\u70b9\u5219\u662f\u5bf9\u4eba\u7c7b\u4e0d\u53cb\u597d. \u4f46\u4f7f\u7528\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4fdd\u5b58\u65f6\u95f4\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u95ee\u9898: 4 \u5b57\u8282(uint32) \u6216 8 \u5b57\u8282(uint64) \u80fd\u4fdd\u5b58\u7684\u65f6\u95f4\u8303\u56f4\u662f\u6709\u9650\u7684.","title":"\u65f6\u95f4\u5c3d\u5934"},{"location":"content/go/end_of_time/#_2","text":"\u5728\u5f00\u59cb\u63a2\u8ba8\u65f6\u95f4\u7684\u5c3d\u5934\u4e4b\u524d, \u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u6574\u6570\u5230\u4e8c\u8fdb\u5236\u7684\u8f6c\u6362. \u6211\u4eec\u4ee5\u6700\u5927\u7684 uint32 \u6570\u5b57 4294967295 \u4e3e\u4f8b, \u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u7b80\u5355\u8ba1\u7b97\u8fc7\u7a0b\u5c06\u4e4b\u8f6c\u6362\u4e3a 4 \u5b57\u8282 bytes([255, 255, 255, 255]), \u5176 go \u4ee3\u7801\u5982\u4e0b: package main import \"fmt\" func main() { max := 2<<31 - 1 buf := make([]byte, 4) buf[0] = byte(max >> 24 % 256) buf[1] = byte(max >> 16 % 256) buf[2] = byte(max >> 8 % 256) buf[3] = byte(max % 256) fmt.Println(buf) // [255 255 255 255] } \u53ef\u4ee5\u4f7f\u7528 encoding/binary \u5305\u7b80\u5316\u4e0a\u8ff0\u8ba1\u7b97: package main import ( \"encoding/binary\" \"fmt\" ) func main() { var max uint32 = 2<<31 - 1 buf := make([]byte, 4) // uint32 \u5230 4 \u5b57\u8282 binary.BigEndian.PutUint32(buf, max) fmt.Println(\"bin:\", buf) // 4 \u5b57\u8282\u5230 uint32 r := binary.BigEndian.Uint32([]byte{0xFF, 0xFF, 0xFF, 0xFF}) fmt.Println(\"int:\", r) } \u8fd9\u91cc\u8981\u63d0\u4e00\u4e0b\u7684\u662f binary.BigEndian \u8868\u793a\u7684\u662f \u5927\u7aef\u5e8f , \u5373\u9ad8\u4f4d\u5b57\u8282\u5728\u5730\u5740\u4f4e\u4f4d. \u4e0e\u4e4b\u76f8\u53cd\u7684\u8fd8\u6709\u4e00\u4e2a \u5c0f\u7aef\u5e8f . \u76ee\u524d\u6765\u8bf4\u5927\u7aef\u5e8f\u5e94\u7528\u8f83\u4e3a\u5e7f\u6cdb. \u53ef\u89c1\u672c\u8282\u53c2\u8003.","title":"\u5f00\u59cb\u63a2\u7d22"},{"location":"content/go/end_of_time/#_3","text":"\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 4 \u5b57\u8282\u6240\u80fd\u5b58\u50a8\u7684\u6700\u5927\u6574\u6570\u662f 4294967295, \u540c\u65f6\u8be5\u6574\u6570\u6240\u4ee3\u8868\u7684\u65e5\u671f\u662f: end := time.Unix(int64(2<<31-1), 0) // 2106-02-07 14:28:15 +0800 CST \u6ca1\u9519, \u8bb0\u5f97\u5728 2106-02-07 14:28:15 +0800 CST \u4e4b\u524d\u629b\u6389\u4f60\u624b\u4e2d\u7684\u6240\u6709\u6bd4\u7279\u5e01(\u624b\u52a8\u6ed1\u7a3d). \u7531\u4e8e\u65f6\u95f4\u6ea2\u51fa\u5f15\u53d1\u7684 BUG \u6700\u77e5\u540d\u7684\u5e94\u8be5\u662f\u5343\u5e74\u866b\u4e8b\u4ef6\u4e86, \u867d\u7136\u8be5\u4e8b\u4ef6\u5df2\u7ecf\u8fc7\u53bb, \u4f46\u672a\u6765\u5fc5\u5b9a\u4f1a\u518d\u6b21\u53d1\u751f, \u6709\u5f88\u5927\u53ef\u80fd\u5c31\u662f\u5728 2106 \u5e74, \u56e0\u4e3a\u6211\u4eec\u4e0d\u77e5\u9053\u9664\u4e86\u6bd4\u7279\u5e01\u4e4b\u5916, \u8fd8\u6709\u54ea\u4e9b\u8f6f\u4ef6\u4e5f\u4f7f\u7528\u4e86 4 \u5b57\u8282\u65f6\u95f4. \u672c\u6b21\u63a2\u7d22\u7ed9\u6211\u7684\u6559\u8bad\u662f: \u4e0d\u8981\u4f7f\u7528 uint32 \u4fdd\u5b58\u65f6\u95f4 .","title":"\u7ec8\u70b9"},{"location":"content/go/end_of_time/#_4","text":"[1] \u7ef4\u57fa: \u5b57\u8282\u5e8f https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F [2] \u7ef4\u57fa: \u5343\u5e74\u866b https://zh.wikipedia.org/zh-hans/2000%E5%B9%B4%E9%97%AE%E9%A2%98","title":"\u53c2\u8003"},{"location":"content/go/fswatch/","text":"Go \u76d1\u542c\u76ee\u5f55 \u5728\u8bb8\u591a\u60c5\u666f\u4e0b, \u6211\u4eec\u9700\u8981\u6709\u4e00\u79cd\u65b9\u5f0f\u76d1\u542c\u76ee\u5f55\u5185\u7684\u6587\u4ef6\u53d8\u5316: \u5728\u5f00\u53d1 web \u5e94\u7528\u65f6, \u4fee\u6539\u6e90\u7801\u540e\u81ea\u52a8\u91cd\u542f\u670d\u52a1\u5668; \u4fee\u6539\u6e90\u7801\u540e\u81ea\u52a8\u91cd\u65b0\u7f16\u8bd1; \u4fee\u6539\u6587\u4ef6\u540e\u81ea\u52a8\u4e0a\u4f20\u6587\u4ef6\u81f3\u8fdc\u7aef\u670d\u52a1\u5668\u7b49. \u5bf9\u4e8e windows, \u51e0\u4e4e\u6240\u6709\u76ee\u5f55\u76d1\u542c\u7a0b\u5e8f\u4f7f\u7528\u7684\u90fd\u662f Windows API \u4e2d\u7684 ReadDirectoryChangesW \u51fd\u6570. \u5728\u672c\u6587\u4e4b\u524d, \u4f7f\u7528 Golang \u5b8c\u6210\u76ee\u5f55\u76d1\u542c\u5df2\u7ecf\u6709\u90e8\u5206\u8f6e\u5b50\u4e86, \u4f46\u662f\u65e0\u4e00\u4f8b\u5916\u8fd9\u4e9b\u8f6e\u5b50\u5bf9\u6587\u4ef6\u7cfb\u7edf\u4e8b\u4ef6\u8fdb\u884c\u4e86\u8fc7\u5ea6\u5c01\u88c5, \u51b3\u5b9a\u81ea\u5df1\u52a8\u624b~ package main import ( \"log\" \"syscall\" \"unsafe\" ) type FileNotifyInformation struct { Action uint32 Name string } func Fswatch(path string) (chan FileNotifyInformation, error) { handle, err := syscall.CreateFile( syscall.StringToUTF16Ptr(path), 0x0001, syscall.FILE_SHARE_READ|syscall.FILE_SHARE_WRITE|syscall.FILE_SHARE_DELETE, nil, syscall.OPEN_EXISTING, syscall.FILE_FLAG_BACKUP_SEMANTICS, 0, ) if err != nil { return nil, err } c := make(chan FileNotifyInformation, 4) go func() { defer syscall.CloseHandle(handle) defer close(c) buflen := 1024 buf := make([]byte, buflen) for { err := syscall.ReadDirectoryChanges( handle, &buf[0], uint32(buflen), true, syscall.FILE_NOTIFY_CHANGE_FILE_NAME| syscall.FILE_NOTIFY_CHANGE_DIR_NAME| syscall.FILE_NOTIFY_CHANGE_ATTRIBUTES| syscall.FILE_NOTIFY_CHANGE_SIZE| syscall.FILE_NOTIFY_CHANGE_LAST_WRITE, nil, &syscall.Overlapped{}, 0, ) if err != nil { break } var offset uint32 for { raw := (*syscall.FileNotifyInformation)(unsafe.Pointer(&buf[offset])) buf := (*[syscall.MAX_PATH]uint16)(unsafe.Pointer(&raw.FileName)) name := syscall.UTF16ToString(buf[:raw.FileNameLength/2]) info := FileNotifyInformation{ Action: raw.Action, Name: name, } c <- info if raw.NextEntryOffset == 0 { break } offset += raw.NextEntryOffset if offset >= 1024 { break } } } }() return c, nil } func main() { c, err := Fswatch(\"/tmp\") if err != nil { log.Fatalln(err) } for info := range c { switch info.Action { case 1: log.Println(\"Create\", info.Name) case 2: log.Println(\"Delete\", info.Name) case 3: log.Println(\"Update\", info.Name) case 4: log.Println(\"RenameFrom\", info.Name) case 5: log.Println(\"RenameTo\", info.Name) } } } \u4e0a\u9762\u7684\u4ee3\u7801\u76d1\u542c\u4e86 \"/tmp\" \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u7cfb\u7edf\u4e8b\u4ef6, \u5982\u679c\u5bf9\u76ee\u5f55\u5185\u7684\u5bf9\u8c61\u505a\u4e86\u4efb\u4f55\u4fee\u6539, \u5c31\u53ef\u4ee5\u770b\u89c1\u5bf9\u5e94\u7684\u8f93\u51fa.","title":"Go-\u76ee\u5f55\u76d1\u542c"},{"location":"content/go/fswatch/#go","text":"\u5728\u8bb8\u591a\u60c5\u666f\u4e0b, \u6211\u4eec\u9700\u8981\u6709\u4e00\u79cd\u65b9\u5f0f\u76d1\u542c\u76ee\u5f55\u5185\u7684\u6587\u4ef6\u53d8\u5316: \u5728\u5f00\u53d1 web \u5e94\u7528\u65f6, \u4fee\u6539\u6e90\u7801\u540e\u81ea\u52a8\u91cd\u542f\u670d\u52a1\u5668; \u4fee\u6539\u6e90\u7801\u540e\u81ea\u52a8\u91cd\u65b0\u7f16\u8bd1; \u4fee\u6539\u6587\u4ef6\u540e\u81ea\u52a8\u4e0a\u4f20\u6587\u4ef6\u81f3\u8fdc\u7aef\u670d\u52a1\u5668\u7b49. \u5bf9\u4e8e windows, \u51e0\u4e4e\u6240\u6709\u76ee\u5f55\u76d1\u542c\u7a0b\u5e8f\u4f7f\u7528\u7684\u90fd\u662f Windows API \u4e2d\u7684 ReadDirectoryChangesW \u51fd\u6570. \u5728\u672c\u6587\u4e4b\u524d, \u4f7f\u7528 Golang \u5b8c\u6210\u76ee\u5f55\u76d1\u542c\u5df2\u7ecf\u6709\u90e8\u5206\u8f6e\u5b50\u4e86, \u4f46\u662f\u65e0\u4e00\u4f8b\u5916\u8fd9\u4e9b\u8f6e\u5b50\u5bf9\u6587\u4ef6\u7cfb\u7edf\u4e8b\u4ef6\u8fdb\u884c\u4e86\u8fc7\u5ea6\u5c01\u88c5, \u51b3\u5b9a\u81ea\u5df1\u52a8\u624b~ package main import ( \"log\" \"syscall\" \"unsafe\" ) type FileNotifyInformation struct { Action uint32 Name string } func Fswatch(path string) (chan FileNotifyInformation, error) { handle, err := syscall.CreateFile( syscall.StringToUTF16Ptr(path), 0x0001, syscall.FILE_SHARE_READ|syscall.FILE_SHARE_WRITE|syscall.FILE_SHARE_DELETE, nil, syscall.OPEN_EXISTING, syscall.FILE_FLAG_BACKUP_SEMANTICS, 0, ) if err != nil { return nil, err } c := make(chan FileNotifyInformation, 4) go func() { defer syscall.CloseHandle(handle) defer close(c) buflen := 1024 buf := make([]byte, buflen) for { err := syscall.ReadDirectoryChanges( handle, &buf[0], uint32(buflen), true, syscall.FILE_NOTIFY_CHANGE_FILE_NAME| syscall.FILE_NOTIFY_CHANGE_DIR_NAME| syscall.FILE_NOTIFY_CHANGE_ATTRIBUTES| syscall.FILE_NOTIFY_CHANGE_SIZE| syscall.FILE_NOTIFY_CHANGE_LAST_WRITE, nil, &syscall.Overlapped{}, 0, ) if err != nil { break } var offset uint32 for { raw := (*syscall.FileNotifyInformation)(unsafe.Pointer(&buf[offset])) buf := (*[syscall.MAX_PATH]uint16)(unsafe.Pointer(&raw.FileName)) name := syscall.UTF16ToString(buf[:raw.FileNameLength/2]) info := FileNotifyInformation{ Action: raw.Action, Name: name, } c <- info if raw.NextEntryOffset == 0 { break } offset += raw.NextEntryOffset if offset >= 1024 { break } } } }() return c, nil } func main() { c, err := Fswatch(\"/tmp\") if err != nil { log.Fatalln(err) } for info := range c { switch info.Action { case 1: log.Println(\"Create\", info.Name) case 2: log.Println(\"Delete\", info.Name) case 3: log.Println(\"Update\", info.Name) case 4: log.Println(\"RenameFrom\", info.Name) case 5: log.Println(\"RenameTo\", info.Name) } } } \u4e0a\u9762\u7684\u4ee3\u7801\u76d1\u542c\u4e86 \"/tmp\" \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u7cfb\u7edf\u4e8b\u4ef6, \u5982\u679c\u5bf9\u76ee\u5f55\u5185\u7684\u5bf9\u8c61\u505a\u4e86\u4efb\u4f55\u4fee\u6539, \u5c31\u53ef\u4ee5\u770b\u89c1\u5bf9\u5e94\u7684\u8f93\u51fa.","title":"Go \u76d1\u542c\u76ee\u5f55"},{"location":"content/go/read_file/","text":"Go \u6309\u884c\u8bfb\u53d6\u6587\u4ef6 Go \u4e2d\u6309\u884c\u8bfb\u53d6\u6587\u4ef6\u65b9\u6cd5\u8fd8\u662f\u6bd4\u8f83\u591a\u7684, \u4f46\u6700\u7b80\u5355\u4e5f\u662f\u6700\u4f18\u96c5\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 bufio.Scanner . \u6211\u5e73\u65f6\u5f88\u5c11\u7528 Go \u53bb\u6309\u884c\u5904\u7406\u6587\u4ef6, \u57fa\u672c\u4e0a\u6709\u8fd9\u65b9\u9762\u9700\u6c42\u4e5f\u662f\u4e0a python, \u6070\u5de7\u4eca\u5929\u9047\u5230, \u6240\u4ee5\u8bb0\u5f55\u4ee5\u4e0b package main import ( \"bufio\" \"log\" \"os\" ) func main() { f, err := os.Open(\"run.go\") if err != nil { log.Fatalln(err) } defer f.Close() // scanner, \u542f\u52a8! scanner := bufio.NewScanner(f) for scanner.Scan() { // \u8fd9\u91cc\u6ce8\u610f, scanner.Text() \u4e0d\u4f1a\u8fd4\u56de\u6362\u884c\u7b26 log.Println(scanner.Text()) } if scanner.Err() != nil { log.Fatalln(scanner.Err()) } } \u53c2\u8003 [1] Go: bufio.Scanner https://golang.org/pkg/bufio/#Scanner","title":"Go-\u6309\u884c\u8bfb\u53d6\u6587\u4ef6"},{"location":"content/go/read_file/#go","text":"Go \u4e2d\u6309\u884c\u8bfb\u53d6\u6587\u4ef6\u65b9\u6cd5\u8fd8\u662f\u6bd4\u8f83\u591a\u7684, \u4f46\u6700\u7b80\u5355\u4e5f\u662f\u6700\u4f18\u96c5\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 bufio.Scanner . \u6211\u5e73\u65f6\u5f88\u5c11\u7528 Go \u53bb\u6309\u884c\u5904\u7406\u6587\u4ef6, \u57fa\u672c\u4e0a\u6709\u8fd9\u65b9\u9762\u9700\u6c42\u4e5f\u662f\u4e0a python, \u6070\u5de7\u4eca\u5929\u9047\u5230, \u6240\u4ee5\u8bb0\u5f55\u4ee5\u4e0b package main import ( \"bufio\" \"log\" \"os\" ) func main() { f, err := os.Open(\"run.go\") if err != nil { log.Fatalln(err) } defer f.Close() // scanner, \u542f\u52a8! scanner := bufio.NewScanner(f) for scanner.Scan() { // \u8fd9\u91cc\u6ce8\u610f, scanner.Text() \u4e0d\u4f1a\u8fd4\u56de\u6362\u884c\u7b26 log.Println(scanner.Text()) } if scanner.Err() != nil { log.Fatalln(scanner.Err()) } }","title":"Go \u6309\u884c\u8bfb\u53d6\u6587\u4ef6"},{"location":"content/go/read_file/#_1","text":"[1] Go: bufio.Scanner https://golang.org/pkg/bufio/#Scanner","title":"\u53c2\u8003"},{"location":"content/go/socket/","text":"Socket Socket \u662f\u4e00\u79cd\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u673a\u5236. \u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d, \u901a\u5e38\u4f1a\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u7ec4\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3, \u79f0\u4e3a\u5957\u63a5\u5b57\u63a5\u53e3(Socket API). \u6ce8\u610f\u7684\u662f, Socket API \u672c\u8eab\u4e0d\u8d1f\u8d23\u901a\u4fe1, \u5b83\u4ec5\u63d0\u4f9b\u57fa\u7840\u51fd\u6570\u4f9b\u5e94\u7528\u5c42\u8c03\u7528, \u5e95\u5c42\u901a\u4fe1\u4e00\u822c\u7531 TCP, Unix \u6216 UDP \u5b9e\u73b0. TCP \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684 TCP \u670d\u52a1\u4e0e\u5176\u914d\u5957\u5ba2\u6237\u7aef\u5b9e\u73b0. // server.go package main import ( \"log\" \"net\" ) func main() { ln, err := net.Listen(\"tcp\", \":3000\") if err != nil { log.Fatalln(err) } defer ln.Close() for { conn, err := ln.Accept() if err != nil { log.Println(err) continue } go func(conn net.Conn) { defer conn.Close() var ( n int b = make([]byte, 1024) err error ) n, err = conn.Read(b) if err != nil { log.Println(err) return } log.Println(string(b[:n])) n, err = conn.Write([]byte(\"pong\")) if err != nil { log.Println(err) return } }(conn) } } // client.go package main import ( \"log\" \"net\" ) func main() { var ( conn net.Conn b = make([]byte, 1024) n int err error ) conn, err = net.Dial(\"tcp\", \"127.0.0.1:3000\") if err != nil { log.Fatalln(err) } defer conn.Close() _, err = conn.Write([]byte(\"ping\")) if err != nil { log.Fatalln(err) } n, err = conn.Read(b) if err != nil { log.Fatalln(err) } log.Println(string(b[:n])) } UNIX Unix Socket \u662f POSIX \u64cd\u4f5c\u7cfb\u7edf\u91cc\u7684\u4e00\u79cd\u7ec4\u4ef6. \u5b83\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u6765\u5b9e\u73b0 Socket \u901a\u4fe1. \u5e38\u89c1\u7684 Unix Socket \u6587\u4ef6\u6709 mysql.sock, supervisor.sock \u7b49, \u5b83\u4eec\u5747\u4f4d\u4e8e /var/run/ \u76ee\u5f55\u4e0b. Go \u4e2d\u4f7f\u7528 Unix Socket \u4e0e TCP Socket \u7684\u65b9\u6cd5\u5b8c\u5168\u76f8\u540c, \u552f\u4e00\u533a\u522b\u662f\u5728 Listen \u4e0e Dial \u65f6, \u53c2\u6570 network \u4e3a \"unix\", address \u4e3a\u6587\u4ef6\u8def\u5f84, \u5982 \"/var/run/accu.sock\" UDP // server package main import ( \"log\" \"net\" ) func main() { var ( conn *net.UDPConn addr *net.UDPAddr b = make([]byte, 1024) n int err error ) conn, err = net.ListenUDP(\"udp\", &net.UDPAddr{IP: net.ParseIP(\"0.0.0.0\"), Port: 3000}) if err != nil { log.Fatalln(err) } defer conn.Close() for { n, addr, err = conn.ReadFromUDP(b) if err != nil { log.Println(err) continue } log.Println(addr, string(b[:n])) _, err = conn.WriteToUDP([]byte(\"pong\"), addr) if err != nil { log.Println(err) continue } } } //client package main import ( \"log\" \"net\" ) func main() { var ( conn net.Conn b = make([]byte, 1024) n int err error ) conn, err = net.Dial(\"udp\", \"127.0.0.1:3000\") if err != nil { log.Fatalln(err) } defer conn.Close() _, err = conn.Write([]byte(\"ping\")) if err != nil { log.Fatalln(err) } n, err = conn.Read(b) if err != nil { log.Fatalln(err) } log.Println(string(b[:n])) }","title":"Go-socket"},{"location":"content/go/socket/#socket","text":"Socket \u662f\u4e00\u79cd\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u673a\u5236. \u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d, \u901a\u5e38\u4f1a\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u7ec4\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3, \u79f0\u4e3a\u5957\u63a5\u5b57\u63a5\u53e3(Socket API). \u6ce8\u610f\u7684\u662f, Socket API \u672c\u8eab\u4e0d\u8d1f\u8d23\u901a\u4fe1, \u5b83\u4ec5\u63d0\u4f9b\u57fa\u7840\u51fd\u6570\u4f9b\u5e94\u7528\u5c42\u8c03\u7528, \u5e95\u5c42\u901a\u4fe1\u4e00\u822c\u7531 TCP, Unix \u6216 UDP \u5b9e\u73b0.","title":"Socket"},{"location":"content/go/socket/#tcp","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684 TCP \u670d\u52a1\u4e0e\u5176\u914d\u5957\u5ba2\u6237\u7aef\u5b9e\u73b0. // server.go package main import ( \"log\" \"net\" ) func main() { ln, err := net.Listen(\"tcp\", \":3000\") if err != nil { log.Fatalln(err) } defer ln.Close() for { conn, err := ln.Accept() if err != nil { log.Println(err) continue } go func(conn net.Conn) { defer conn.Close() var ( n int b = make([]byte, 1024) err error ) n, err = conn.Read(b) if err != nil { log.Println(err) return } log.Println(string(b[:n])) n, err = conn.Write([]byte(\"pong\")) if err != nil { log.Println(err) return } }(conn) } } // client.go package main import ( \"log\" \"net\" ) func main() { var ( conn net.Conn b = make([]byte, 1024) n int err error ) conn, err = net.Dial(\"tcp\", \"127.0.0.1:3000\") if err != nil { log.Fatalln(err) } defer conn.Close() _, err = conn.Write([]byte(\"ping\")) if err != nil { log.Fatalln(err) } n, err = conn.Read(b) if err != nil { log.Fatalln(err) } log.Println(string(b[:n])) }","title":"TCP"},{"location":"content/go/socket/#unix","text":"Unix Socket \u662f POSIX \u64cd\u4f5c\u7cfb\u7edf\u91cc\u7684\u4e00\u79cd\u7ec4\u4ef6. \u5b83\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u6765\u5b9e\u73b0 Socket \u901a\u4fe1. \u5e38\u89c1\u7684 Unix Socket \u6587\u4ef6\u6709 mysql.sock, supervisor.sock \u7b49, \u5b83\u4eec\u5747\u4f4d\u4e8e /var/run/ \u76ee\u5f55\u4e0b. Go \u4e2d\u4f7f\u7528 Unix Socket \u4e0e TCP Socket \u7684\u65b9\u6cd5\u5b8c\u5168\u76f8\u540c, \u552f\u4e00\u533a\u522b\u662f\u5728 Listen \u4e0e Dial \u65f6, \u53c2\u6570 network \u4e3a \"unix\", address \u4e3a\u6587\u4ef6\u8def\u5f84, \u5982 \"/var/run/accu.sock\"","title":"UNIX"},{"location":"content/go/socket/#udp","text":"// server package main import ( \"log\" \"net\" ) func main() { var ( conn *net.UDPConn addr *net.UDPAddr b = make([]byte, 1024) n int err error ) conn, err = net.ListenUDP(\"udp\", &net.UDPAddr{IP: net.ParseIP(\"0.0.0.0\"), Port: 3000}) if err != nil { log.Fatalln(err) } defer conn.Close() for { n, addr, err = conn.ReadFromUDP(b) if err != nil { log.Println(err) continue } log.Println(addr, string(b[:n])) _, err = conn.WriteToUDP([]byte(\"pong\"), addr) if err != nil { log.Println(err) continue } } } //client package main import ( \"log\" \"net\" ) func main() { var ( conn net.Conn b = make([]byte, 1024) n int err error ) conn, err = net.Dial(\"udp\", \"127.0.0.1:3000\") if err != nil { log.Fatalln(err) } defer conn.Close() _, err = conn.Write([]byte(\"ping\")) if err != nil { log.Fatalln(err) } n, err = conn.Read(b) if err != nil { log.Fatalln(err) } log.Println(string(b[:n])) }","title":"UDP"},{"location":"content/go/socket_not_accept/","text":"Socket: \u5047\u5982\u670d\u52a1\u7aef\u4e0d\u8c03\u7528 Accept? \u6211\u76f8\u4fe1\u7edd\u5927\u591a\u6570\u4eba\u90fd\u4f1a\u5199 TCP \u7684\u670d\u52a1\u7aef\u4ee3\u7801, \u5c31\u81ea\u5df1\u800c\u8a00, \u5df2\u7ecf\u51e0\u4e4e\u673a\u68b0\u5f0f\u5730\u5728\u5199\u5982\u4e0b\u4ee3\u7801(\u5c31\u5982\u5b9a\u5f0f\u4e00\u822c): ln, err := net.Listen(\"tcp\", \":3000\") for { conn, err := ln.Accept() ... } Good! conn \u5bf9\u8c61\u5230\u624b! \u4e4b\u540e\u4fbf\u53ef\u4ee5\u5b89\u5fc3\u5730\u4ece conn \u5bf9\u8c61\u4e2d\u8bfb\u53d6\u6570\u636e, \u6216\u5199\u5165\u6570\u636e. \u4f46\u662f\u6709\u6ca1\u6709\u8003\u8651\u8fc7\u4e00\u4e2a\u95ee\u9898, \u5982\u679c\u5728 Listen \u540e\u4e0d\u8c03\u7528 Accept, \u4f1a\u53d1\u751f\u4ec0\u4e48\u4e8b? \u8fd9\u5e76\u975e\u662f\u65e0\u4e8b\u627e\u4e8b\u7684\u5f02\u60f3\u5929\u5f00, \u5728\u73b0\u5b9e\u4e2d, \u6709\u5f88\u591a\u79cd\u60c5\u51b5\u4f1a\u5bfc\u81f4\u4ee3\u7801 Accept \u5931\u8d25, \u6bd4\u5982 too many open files \u53d1\u751f\u65f6. \u5b9e\u9a8c\u5f00\u59cb \u8fd9\u662f\u672c\u6b21\u5b9e\u9a8c\u7684\u670d\u52a1\u7aef\u4f2a\u4ee3\u7801, \u53ef\u4ee5\u770b\u5230, \u5728 Listen \u7aef\u53e3\u540e, \u4ee3\u7801\u53ea\u4f7f\u7528\u4e86\u4e00\u4e2a\u5faa\u73af Sleep \u5c06\u8fdb\u7a0b\u6c38\u4e45\u6302\u8d77. func main() { listen, err := net.Listen(\"tcp\", \":3000\") for { time.Sleep(time.Second) } } \u5ba2\u6237\u7aef\u4f2a\u4ee3\u7801\u4e3b\u8981\u6267\u884c\u4e09\u4e2a\u6b65\u9aa4: \u8fde\u63a5\u670d\u52a1\u5668, \u7b49\u5f85 10 \u79d2\u540e\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e, \u5173\u95ed\u8fde\u63a5. func main() { conn, err := net.Dial(\"tcp\", \"127.0.0.1:3000\") log.Println(\"Dial conn\", conn, err) time.Sleep(time.Second * 10) n, err := io.WriteString(conn, \"ping\") log.Println(\"Write\", n, \"bytes,\", \"error is\", err) err := conn.Close() log.Println(\"Close\", err) } \u5982\u6b64\u8fd9\u822c, \u6267\u884c\u7a0b\u5e8f! 2020/03/30 17:57:45 Dial conn &{{0xc0000a2080}} 2020/03/30 17:57:45 Write 4 bytes, error is <nil> 2020/03/30 17:57:45 Close <nil> \u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u5668\u6210\u529f\u672a\u62a5\u9519, \u53d1\u9001\u6570\u636e\u6210\u529f\u672a\u62a5\u9519, \u5173\u95ed\u8fde\u63a5\u6210\u529f\u4ea6\u672a\u62a5\u9519. \u91cd\u65b0\u6267\u884c\u5ba2\u6237\u7aef\u4ee3\u7801, \u8fd9\u6b21\u8ba9\u6211\u4eec\u5728\u6267\u884c\u7684\u65f6\u5019\u7528 netstat \u5de5\u5177\u67e5\u770b\u8fde\u63a5\u72b6\u6001. \u8fd9\u91cc\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4. \u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u670d\u52a1\u5668\u540e tcp 0 0 127.0.0.1:56428 127.0.0.1:8080 ESTABLISHED 18063/client tcp 0 0 127.0.0.1:8080 127.0.0.1:56428 ESTABLISHED - \u5ba2\u6237\u7aef\u8c03\u7528 Close \u540e tcp 0 0 127.0.0.1:56428 127.0.0.1:8080 FIN_WAIT2 - tcp 5 0 127.0.0.1:8080 127.0.0.1:56428 CLOSE_WAIT - \u5ba2\u6237\u7aef\u8fdb\u7a0b\u9000\u51fa\u540e tcp 5 0 127.0.0.1:8080 127.0.0.1:56428 CLOSE_WAIT - \u6ce8\u610f\u6700\u540e\u7684 CLOSE_WAIT, \u5b83\u5c06\u6c38\u8fdc\u5b58\u5728, \u76f4\u5230\u670d\u52a1\u7aef\u8fdb\u7a0b\u9000\u51fa . \u539f\u7406\u5206\u6790 \u5f53\u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u7aef\u540e, \u901a\u8fc7 netstat \u770b\u5230\u8fde\u63a5\u72b6\u6001\u4e3a ESTABLISHED, \u8fd9\u8bf4\u660e TCP \u4e09\u6b21\u63e1\u624b\u5df2\u7ecf\u6210\u529f, \u4e5f\u5c31\u662f\u8bf4 TCP \u8fde\u63a5\u5df2\u7ecf\u5728\u7f51\u7edc\u4e0a\u5efa\u7acb\u4e86\u8d77\u6765. \u53ef\u5f97\u77e5 TCP \u63e1\u624b\u5e76\u4e0d\u662f Accept \u51fd\u6570\u7684\u804c\u8d23. \u9605\u8bfb\u64cd\u4f5c\u7cfb\u7edf\u7684 Accept \u51fd\u6570\u6587\u6863: http://man7.org/linux/man-pages/man2/accept.2.html , \u5728\u7b2c\u4e00\u6bb5\u843d\u4e2d\u6709\u5982\u4e0b\u63cf\u8ff0: It extracts the first connection request on the queue of pending connections for the listening socket, sockfd, creates a new connected socket, and returns a new file descriptor referring to that socket. \u7ffb\u8bd1: \u5b83\u4ece connections \u961f\u5217\u4e2d\u53d6\u51fa\u7b2c\u4e00\u4e2a connection, \u5e76\u8fd4\u56de\u5f15\u7528\u8be5 connection \u7684\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26. \u9a8c\u8bc1\u4e86\u6211\u7684\u60f3\u6cd5, \u65e0\u8bba\u662f\u5426\u8c03\u7528 Accept, connection \u90fd\u5df2\u7ecf\u5efa\u7acb\u8d77\u6765\u4e86, Accept \u53ea\u662f\u5c06\u8be5 connection \u5305\u88c5\u6210\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26, \u4f9b\u7a0b\u5e8f Read, Write \u548c Close. \u90a3\u4e48\u5173\u4e8e\u7b2c\u4e8c\u6b65\u4e3a\u4ec0\u4e48\u5ba2\u6237\u7aef\u80fd Write \u6210\u529f\u5c31\u5f88\u5bb9\u6613\u89e3\u91ca\u4e86, \u56e0\u4e3a connection \u65e9\u5df2\u88ab\u5efa\u7acb(\u6570\u636e\u5e94\u8be5\u88ab\u6682\u5b58\u5728\u670d\u52a1\u7aef\u7684\u63a5\u53d7\u7f13\u51b2\u533a). \u63a5\u7740\u518d\u5206\u6790 CLOSE_WAIT. \u6b63\u5e38\u60c5\u51b5\u4e0b CLOSE_WAIT \u5728 TCP \u6325\u624b\u8fc7\u7a0b\u4e2d\u6301\u7eed\u65f6\u95f4\u6781\u77ed, \u5982\u679c\u51fa\u73b0\u5219\u8868\u660e\"\u88ab\u52a8\u5173\u95ed TCP \u8fde\u63a5\u7684\u4e00\u65b9\u672a\u8c03\u7528 Close \u51fd\u6570\". \u89c2\u5bdf\u4e0b\u56fe\u7684 TCP \u6325\u624b\u8fc7\u7a0b, \u5f97\u77e5\"\u5373\u4f7f\u88ab\u52a8\u5173\u95ed\u4e00\u65b9\u672a\u8c03\u7528 Close, \u4f9d\u7136\u4f1a\u54cd\u5e94 FIN \u5305\u53d1\u51fa ACK \u5305\", \u56e0\u6b64\u4e3b\u52a8\u5173\u95ed\u4e00\u65b9\u5904\u4e8e FIN_WAIT2 \u662f\u7406\u6240\u5f53\u7136\u7684. +---------+ ---------\\ active OPEN | CLOSED | \\ ----------- +---------+<---------\\ \\ create TCB | ^ \\ \\ snd SYN passive OPEN | | CLOSE \\ \\ ------------ | | ---------- \\ \\ create TCB | | delete TCB \\ \\ V | \\ \\ +---------+ CLOSE | \\ | LISTEN | ---------- | | +---------+ delete TCB | | rcv SYN | | SEND | | ----------- | | ------- | V +---------+ snd SYN,ACK / \\ snd SYN +---------+ | |<----------------- ------------------>| | | SYN | rcv SYN | SYN | | RCVD |<-----------------------------------------------| SENT | | | snd ACK | | | |------------------ -------------------| | +---------+ rcv ACK of SYN \\ / rcv SYN,ACK +---------+ | -------------- | | ----------- | x | | snd ACK | V V | CLOSE +---------+ | ------- | ESTAB | | snd FIN +---------+ | CLOSE | | rcv FIN V ------- | | ------- +---------+ snd FIN / \\ snd ACK +---------+ | FIN |<----------------- ------------------>| CLOSE | | WAIT-1 |------------------ | WAIT | +---------+ rcv FIN \\ +---------+ | rcv ACK of FIN ------- | CLOSE | | -------------- snd ACK | ------- | V x V snd FIN V +---------+ +---------+ +---------+ |FINWAIT-2| | CLOSING | | LAST-ACK| +---------+ +---------+ +---------+ | rcv ACK of FIN | rcv ACK of FIN | | rcv FIN -------------- | Timeout=2MSL -------------- | | ------- x V ------------ x V \\ snd ACK +---------+delete TCB +---------+ ------------------------>|TIME WAIT|------------------>| CLOSED | +---------+ +---------+ \u6700\u540e, \u5f53\u5ba2\u6237\u7aef\u8fdb\u7a0b\u9000\u51fa\u540e, \u5ba2\u6237\u7aef\u4fdd\u7559\u7684 FIN_WAIT2 \u72b6\u6001\u81ea\u7136\u88ab\u91ca\u653e, \u4f46\u670d\u52a1\u7aef\u7531\u4e8e\u672a\u83b7\u5f97 connection \u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u65e0\u6cd5\u4e3b\u52a8\u8c03\u7528 Close \u51fd\u6570, \u56e0\u6b64\u670d\u52a1\u7aef\u7684 CLOSE_WAIT \u5c06\u4e00\u76f4\u6301\u7eed\u76f4\u5230\u670d\u52a1\u7aef\u8fdb\u7a0b\u9000\u51fa. \u5982\u4f55\u5904\u7406\u8be5\u7c7b\u578b CLOSE_WAIT? \u5728\u672c\u6587\u7684\u4f8b\u5b50\u4e2d, \u670d\u52a1\u7aef\u6ca1\u6709\u80fd\u529b\u8fdb\u884c\u5904\u7406(\u4ee3\u7801\u4e2d\u6ca1\u6709\u62ff\u5230 conn), \u56e0\u4e3a connection \u5f52\u64cd\u4f5c\u7cfb\u7edf\u7ba1. \u4f46\u662f\u5982\u679c\u7a0b\u5e8f\u662f\u56e0\u4e3a too many open files \u7b49\u9519\u8bef\u5bfc\u81f4 Accept \u5931\u8d25, \u90a3\u4e48\u5f53\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u91cf\u4e0b\u964d\u65f6 Accept \u51fd\u6570\u5c06\u53ef\u4ee5\u6210\u529f, \u56e0\u6b64\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u62ff\u5230\u5f15\u7528\u8be5 connection \u7684\u6587\u4ef6\u63cf\u8ff0\u7b26, \u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u6309\u7167\u6b63\u5e38\u903b\u8f91 Close \u6389\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u5373\u53ef\u91ca\u653e\u8be5 connection.","title":"Go-socket-\u5047\u5982\u670d\u52a1\u7aef\u4e0d\u8c03\u7528 Accept"},{"location":"content/go/socket_not_accept/#socket-accept","text":"\u6211\u76f8\u4fe1\u7edd\u5927\u591a\u6570\u4eba\u90fd\u4f1a\u5199 TCP \u7684\u670d\u52a1\u7aef\u4ee3\u7801, \u5c31\u81ea\u5df1\u800c\u8a00, \u5df2\u7ecf\u51e0\u4e4e\u673a\u68b0\u5f0f\u5730\u5728\u5199\u5982\u4e0b\u4ee3\u7801(\u5c31\u5982\u5b9a\u5f0f\u4e00\u822c): ln, err := net.Listen(\"tcp\", \":3000\") for { conn, err := ln.Accept() ... } Good! conn \u5bf9\u8c61\u5230\u624b! \u4e4b\u540e\u4fbf\u53ef\u4ee5\u5b89\u5fc3\u5730\u4ece conn \u5bf9\u8c61\u4e2d\u8bfb\u53d6\u6570\u636e, \u6216\u5199\u5165\u6570\u636e. \u4f46\u662f\u6709\u6ca1\u6709\u8003\u8651\u8fc7\u4e00\u4e2a\u95ee\u9898, \u5982\u679c\u5728 Listen \u540e\u4e0d\u8c03\u7528 Accept, \u4f1a\u53d1\u751f\u4ec0\u4e48\u4e8b? \u8fd9\u5e76\u975e\u662f\u65e0\u4e8b\u627e\u4e8b\u7684\u5f02\u60f3\u5929\u5f00, \u5728\u73b0\u5b9e\u4e2d, \u6709\u5f88\u591a\u79cd\u60c5\u51b5\u4f1a\u5bfc\u81f4\u4ee3\u7801 Accept \u5931\u8d25, \u6bd4\u5982 too many open files \u53d1\u751f\u65f6.","title":"Socket: \u5047\u5982\u670d\u52a1\u7aef\u4e0d\u8c03\u7528 Accept?"},{"location":"content/go/socket_not_accept/#_1","text":"\u8fd9\u662f\u672c\u6b21\u5b9e\u9a8c\u7684\u670d\u52a1\u7aef\u4f2a\u4ee3\u7801, \u53ef\u4ee5\u770b\u5230, \u5728 Listen \u7aef\u53e3\u540e, \u4ee3\u7801\u53ea\u4f7f\u7528\u4e86\u4e00\u4e2a\u5faa\u73af Sleep \u5c06\u8fdb\u7a0b\u6c38\u4e45\u6302\u8d77. func main() { listen, err := net.Listen(\"tcp\", \":3000\") for { time.Sleep(time.Second) } } \u5ba2\u6237\u7aef\u4f2a\u4ee3\u7801\u4e3b\u8981\u6267\u884c\u4e09\u4e2a\u6b65\u9aa4: \u8fde\u63a5\u670d\u52a1\u5668, \u7b49\u5f85 10 \u79d2\u540e\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e, \u5173\u95ed\u8fde\u63a5. func main() { conn, err := net.Dial(\"tcp\", \"127.0.0.1:3000\") log.Println(\"Dial conn\", conn, err) time.Sleep(time.Second * 10) n, err := io.WriteString(conn, \"ping\") log.Println(\"Write\", n, \"bytes,\", \"error is\", err) err := conn.Close() log.Println(\"Close\", err) } \u5982\u6b64\u8fd9\u822c, \u6267\u884c\u7a0b\u5e8f! 2020/03/30 17:57:45 Dial conn &{{0xc0000a2080}} 2020/03/30 17:57:45 Write 4 bytes, error is <nil> 2020/03/30 17:57:45 Close <nil> \u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u5668\u6210\u529f\u672a\u62a5\u9519, \u53d1\u9001\u6570\u636e\u6210\u529f\u672a\u62a5\u9519, \u5173\u95ed\u8fde\u63a5\u6210\u529f\u4ea6\u672a\u62a5\u9519. \u91cd\u65b0\u6267\u884c\u5ba2\u6237\u7aef\u4ee3\u7801, \u8fd9\u6b21\u8ba9\u6211\u4eec\u5728\u6267\u884c\u7684\u65f6\u5019\u7528 netstat \u5de5\u5177\u67e5\u770b\u8fde\u63a5\u72b6\u6001. \u8fd9\u91cc\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4. \u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u670d\u52a1\u5668\u540e tcp 0 0 127.0.0.1:56428 127.0.0.1:8080 ESTABLISHED 18063/client tcp 0 0 127.0.0.1:8080 127.0.0.1:56428 ESTABLISHED - \u5ba2\u6237\u7aef\u8c03\u7528 Close \u540e tcp 0 0 127.0.0.1:56428 127.0.0.1:8080 FIN_WAIT2 - tcp 5 0 127.0.0.1:8080 127.0.0.1:56428 CLOSE_WAIT - \u5ba2\u6237\u7aef\u8fdb\u7a0b\u9000\u51fa\u540e tcp 5 0 127.0.0.1:8080 127.0.0.1:56428 CLOSE_WAIT - \u6ce8\u610f\u6700\u540e\u7684 CLOSE_WAIT, \u5b83\u5c06\u6c38\u8fdc\u5b58\u5728, \u76f4\u5230\u670d\u52a1\u7aef\u8fdb\u7a0b\u9000\u51fa .","title":"\u5b9e\u9a8c\u5f00\u59cb"},{"location":"content/go/socket_not_accept/#_2","text":"\u5f53\u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u7aef\u540e, \u901a\u8fc7 netstat \u770b\u5230\u8fde\u63a5\u72b6\u6001\u4e3a ESTABLISHED, \u8fd9\u8bf4\u660e TCP \u4e09\u6b21\u63e1\u624b\u5df2\u7ecf\u6210\u529f, \u4e5f\u5c31\u662f\u8bf4 TCP \u8fde\u63a5\u5df2\u7ecf\u5728\u7f51\u7edc\u4e0a\u5efa\u7acb\u4e86\u8d77\u6765. \u53ef\u5f97\u77e5 TCP \u63e1\u624b\u5e76\u4e0d\u662f Accept \u51fd\u6570\u7684\u804c\u8d23. \u9605\u8bfb\u64cd\u4f5c\u7cfb\u7edf\u7684 Accept \u51fd\u6570\u6587\u6863: http://man7.org/linux/man-pages/man2/accept.2.html , \u5728\u7b2c\u4e00\u6bb5\u843d\u4e2d\u6709\u5982\u4e0b\u63cf\u8ff0: It extracts the first connection request on the queue of pending connections for the listening socket, sockfd, creates a new connected socket, and returns a new file descriptor referring to that socket. \u7ffb\u8bd1: \u5b83\u4ece connections \u961f\u5217\u4e2d\u53d6\u51fa\u7b2c\u4e00\u4e2a connection, \u5e76\u8fd4\u56de\u5f15\u7528\u8be5 connection \u7684\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26. \u9a8c\u8bc1\u4e86\u6211\u7684\u60f3\u6cd5, \u65e0\u8bba\u662f\u5426\u8c03\u7528 Accept, connection \u90fd\u5df2\u7ecf\u5efa\u7acb\u8d77\u6765\u4e86, Accept \u53ea\u662f\u5c06\u8be5 connection \u5305\u88c5\u6210\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26, \u4f9b\u7a0b\u5e8f Read, Write \u548c Close. \u90a3\u4e48\u5173\u4e8e\u7b2c\u4e8c\u6b65\u4e3a\u4ec0\u4e48\u5ba2\u6237\u7aef\u80fd Write \u6210\u529f\u5c31\u5f88\u5bb9\u6613\u89e3\u91ca\u4e86, \u56e0\u4e3a connection \u65e9\u5df2\u88ab\u5efa\u7acb(\u6570\u636e\u5e94\u8be5\u88ab\u6682\u5b58\u5728\u670d\u52a1\u7aef\u7684\u63a5\u53d7\u7f13\u51b2\u533a). \u63a5\u7740\u518d\u5206\u6790 CLOSE_WAIT. \u6b63\u5e38\u60c5\u51b5\u4e0b CLOSE_WAIT \u5728 TCP \u6325\u624b\u8fc7\u7a0b\u4e2d\u6301\u7eed\u65f6\u95f4\u6781\u77ed, \u5982\u679c\u51fa\u73b0\u5219\u8868\u660e\"\u88ab\u52a8\u5173\u95ed TCP \u8fde\u63a5\u7684\u4e00\u65b9\u672a\u8c03\u7528 Close \u51fd\u6570\". \u89c2\u5bdf\u4e0b\u56fe\u7684 TCP \u6325\u624b\u8fc7\u7a0b, \u5f97\u77e5\"\u5373\u4f7f\u88ab\u52a8\u5173\u95ed\u4e00\u65b9\u672a\u8c03\u7528 Close, \u4f9d\u7136\u4f1a\u54cd\u5e94 FIN \u5305\u53d1\u51fa ACK \u5305\", \u56e0\u6b64\u4e3b\u52a8\u5173\u95ed\u4e00\u65b9\u5904\u4e8e FIN_WAIT2 \u662f\u7406\u6240\u5f53\u7136\u7684. +---------+ ---------\\ active OPEN | CLOSED | \\ ----------- +---------+<---------\\ \\ create TCB | ^ \\ \\ snd SYN passive OPEN | | CLOSE \\ \\ ------------ | | ---------- \\ \\ create TCB | | delete TCB \\ \\ V | \\ \\ +---------+ CLOSE | \\ | LISTEN | ---------- | | +---------+ delete TCB | | rcv SYN | | SEND | | ----------- | | ------- | V +---------+ snd SYN,ACK / \\ snd SYN +---------+ | |<----------------- ------------------>| | | SYN | rcv SYN | SYN | | RCVD |<-----------------------------------------------| SENT | | | snd ACK | | | |------------------ -------------------| | +---------+ rcv ACK of SYN \\ / rcv SYN,ACK +---------+ | -------------- | | ----------- | x | | snd ACK | V V | CLOSE +---------+ | ------- | ESTAB | | snd FIN +---------+ | CLOSE | | rcv FIN V ------- | | ------- +---------+ snd FIN / \\ snd ACK +---------+ | FIN |<----------------- ------------------>| CLOSE | | WAIT-1 |------------------ | WAIT | +---------+ rcv FIN \\ +---------+ | rcv ACK of FIN ------- | CLOSE | | -------------- snd ACK | ------- | V x V snd FIN V +---------+ +---------+ +---------+ |FINWAIT-2| | CLOSING | | LAST-ACK| +---------+ +---------+ +---------+ | rcv ACK of FIN | rcv ACK of FIN | | rcv FIN -------------- | Timeout=2MSL -------------- | | ------- x V ------------ x V \\ snd ACK +---------+delete TCB +---------+ ------------------------>|TIME WAIT|------------------>| CLOSED | +---------+ +---------+ \u6700\u540e, \u5f53\u5ba2\u6237\u7aef\u8fdb\u7a0b\u9000\u51fa\u540e, \u5ba2\u6237\u7aef\u4fdd\u7559\u7684 FIN_WAIT2 \u72b6\u6001\u81ea\u7136\u88ab\u91ca\u653e, \u4f46\u670d\u52a1\u7aef\u7531\u4e8e\u672a\u83b7\u5f97 connection \u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u65e0\u6cd5\u4e3b\u52a8\u8c03\u7528 Close \u51fd\u6570, \u56e0\u6b64\u670d\u52a1\u7aef\u7684 CLOSE_WAIT \u5c06\u4e00\u76f4\u6301\u7eed\u76f4\u5230\u670d\u52a1\u7aef\u8fdb\u7a0b\u9000\u51fa.","title":"\u539f\u7406\u5206\u6790"},{"location":"content/go/socket_not_accept/#close_wait","text":"\u5728\u672c\u6587\u7684\u4f8b\u5b50\u4e2d, \u670d\u52a1\u7aef\u6ca1\u6709\u80fd\u529b\u8fdb\u884c\u5904\u7406(\u4ee3\u7801\u4e2d\u6ca1\u6709\u62ff\u5230 conn), \u56e0\u4e3a connection \u5f52\u64cd\u4f5c\u7cfb\u7edf\u7ba1. \u4f46\u662f\u5982\u679c\u7a0b\u5e8f\u662f\u56e0\u4e3a too many open files \u7b49\u9519\u8bef\u5bfc\u81f4 Accept \u5931\u8d25, \u90a3\u4e48\u5f53\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u91cf\u4e0b\u964d\u65f6 Accept \u51fd\u6570\u5c06\u53ef\u4ee5\u6210\u529f, \u56e0\u6b64\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u62ff\u5230\u5f15\u7528\u8be5 connection \u7684\u6587\u4ef6\u63cf\u8ff0\u7b26, \u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u6309\u7167\u6b63\u5e38\u903b\u8f91 Close \u6389\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u5373\u53ef\u91ca\u653e\u8be5 connection.","title":"\u5982\u4f55\u5904\u7406\u8be5\u7c7b\u578b CLOSE_WAIT?"},{"location":"content/go/socks5/","text":"\u6839\u636e RFC1928 \u534f\u8bae, \u7b80\u5355\u5b9e\u73b0\u4e86\u65e0\u52a0\u5bc6\u7684 SOCKS Version 5 \u670d\u52a1\u5668. RFC1928 \u4e2d\u6587\u7ffb\u8bd1(\u7b80\u7ffb): /content/net_rfc1928_socks5/ package main import ( \"bufio\" \"flag\" \"io\" \"log\" \"net\" \"strconv\" ) var flBind = flag.String(\"b\", \"0.0.0.0:1080\", \"bind address\") func serv(conn net.Conn) { connl := conn defer connl.Close() connlreader := bufio.NewReader(connl) var b byte var p []byte var err error p = make([]byte, 2) _, err = io.ReadFull(connlreader, p) if err != nil || p[0] != 0x05 { return } _, err = connlreader.Discard(int(p[1])) if err != nil { return } _, err = connl.Write([]byte{0x05, 0x00}) if err != nil { return } p = make([]byte, 4) _, err = io.ReadFull(connlreader, p) if err != nil || p[0] != 0x05 { return } var addr string switch p[3] { case 0x01: p = make([]byte, 4) _, err = io.ReadFull(connlreader, p) if err != nil { return } addr = net.IPv4(p[0], p[1], p[2], p[3]).String() case 0x03: b, err = connlreader.ReadByte() if err != nil { return } p = make([]byte, b) _, err = io.ReadFull(connlreader, p) if err != nil { return } addr = string(p) case 0x04: p = make([]byte, 16) _, err = io.ReadFull(connlreader, p) if err != nil { return } addr = net.IP(p).String() } p = make([]byte, 2) _, err = io.ReadFull(connlreader, p) if err != nil { return } addr = addr + \":\" + strconv.Itoa(int(p[0])<<8|int(p[1])) log.Println(\"Accept\", addr) connr, err := net.Dial(\"tcp\", addr) if err != nil { return } defer connr.Close() connl.Write([]byte{0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}) go func() { io.Copy(connr, connl) connr.Close() connl.Close() }() io.Copy(connl, connr) connr.Close() connl.Close() } func main() { flag.Parse() log.SetFlags(log.LstdFlags | log.Lshortfile) ln, err := net.Listen(\"tcp\", *flBind) if err != nil { log.Fatalln(err) } defer ln.Close() log.Println(\"Listen and server on\", *flBind) for { conn, err := ln.Accept() if err != nil { log.Println(err) continue } go serv(conn) } }","title":"Go-socks-version-5"},{"location":"content/go/tls/","text":"TLS \u4f20\u8f93\u5c42\u5b89\u5168\u534f\u8bae(\u82f1\u8bed: Transport Layer Security, \u7f29\u5199: TLS), \u53ca\u5176\u524d\u8eab\u5b89\u5168\u5957\u63a5\u5c42(Secure Sockets Layer, \u7f29\u5199: SSL)\u662f\u4e00\u79cd\u5b89\u5168\u534f\u8bae, \u76ee\u7684\u662f\u4e3a\u4e92\u8054\u7f51\u901a\u4fe1, \u63d0\u4f9b\u5b89\u5168\u53ca\u6570\u636e\u5b8c\u6574\u6027\u4fdd\u969c. SSL \u5305\u542b\u8bb0\u5f55\u5c42(Record Layer)\u548c\u4f20\u8f93\u5c42, \u8bb0\u5f55\u5c42\u534f\u8bae\u786e\u5b9a\u4f20\u8f93\u5c42\u6570\u636e\u7684\u5c01\u88c5\u683c\u5f0f. \u4f20\u8f93\u5c42\u5b89\u5168\u534f\u8bae\u4f7f\u7528X.509\u8ba4\u8bc1, \u4e4b\u540e\u5229\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\u6f14\u7b97\u6765\u5bf9\u901a\u4fe1\u65b9\u505a\u8eab\u4efd\u8ba4\u8bc1, \u4e4b\u540e\u4ea4\u6362\u5bf9\u79f0\u5bc6\u94a5\u4f5c\u4e3a\u4f1a\u8c08\u5bc6\u94a5(Session key). \u8fd9\u4e2a\u4f1a\u8c08\u5bc6\u94a5\u662f\u7528\u6765\u5c06\u901a\u4fe1\u4e24\u65b9\u4ea4\u6362\u7684\u6570\u636e\u505a\u52a0\u5bc6, \u4fdd\u8bc1\u4e24\u4e2a\u5e94\u7528\u95f4\u901a\u4fe1\u7684\u4fdd\u5bc6\u6027\u548c\u53ef\u9760\u6027, \u4f7f\u5ba2\u6237\u4e0e\u670d\u52a1\u5668\u5e94\u7528\u4e4b\u95f4\u7684\u901a\u4fe1\u4e0d\u88ab\u653b\u51fb\u8005\u7a83\u542c. \u751f\u6210 TLS \u79c1\u94a5\u4e0e\u516c\u94a5 # \u751f\u6210 CA \u79c1\u94a5 openssl genrsa -out ca.key 2048 # \u751f\u6210 CA \u8bc1\u4e66 openssl req -x509 -new -key ca.key -days 36525 -out ca.crt # \u751f\u6210\u670d\u52a1\u7aef\u79c1\u94a5 openssl genrsa -out server.key 2048 # \u751f\u6210\u670d\u52a1\u7aef\u7b7e\u540d\u8bf7\u6c42 openssl req -new -key server.key -subj \"/CN=host\" -out server.csr # \u4f7f\u7528 CA \u5bf9\u670d\u52a1\u7aef\u7b7e\u540d\u8bf7\u6c42\u8fdb\u884c\u7b7e\u540d, \u5e76\u751f\u6210\u670d\u52a1\u7aef\u8bc1\u4e66 openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 36525 # \u751f\u6210\u5ba2\u6237\u7aef\u79c1\u94a5 openssl genrsa -out client.key 2048 # \u751f\u6210\u5ba2\u6237\u7aef\u7b7e\u540d\u8bf7\u6c42 openssl req -new -key client.key -out client.csr # \u4f7f\u7528 CA \u5bf9\u5ba2\u6237\u7aef\u7b7e\u540d\u8bf7\u6c42\u8fdb\u884c\u7b7e\u540d, \u5e76\u751f\u6210\u5ba2\u6237\u7aef\u8bc1\u4e66 openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt -days 36525 \u670d\u52a1\u7aef\u9a8c\u8bc1 // server package main import ( \"bufio\" \"crypto/tls\" \"log\" \"net\" ) func serv(conn net.Conn) { defer conn.Close() r := bufio.NewReader(conn) for { line, err := r.ReadString('\\n') if err != nil { log.Println(err) break } log.Println(\"Receive:\", line[:len(line)-1]) } } func main() { cert, err := tls.LoadX509KeyPair(\"server.crt\", \"server.key\") if err != nil { log.Fatalln(err) } conf := &tls.Config{Certificates: []tls.Certificate{cert}} ln, err := tls.Listen(\"tcp\", \":8080\", conf) if err != nil { log.Fatalln(err) } defer ln.Close() log.Println(\"Listen and server on :8080\") for { conn, err := ln.Accept() if err != nil { log.Println(err) continue } go serv(conn) } } // client package main import ( \"crypto/tls\" \"fmt\" \"log\" \"time\" ) func main() { conf := &tls.Config{ InsecureSkipVerify: true, } conn, err := tls.Dial(\"tcp\", \"localhost:8080\", conf) if err != nil { log.Fatalln(err) } defer conn.Close() for _ = range time.NewTicker(time.Second).C { conn.Write([]byte(fmt.Sprintf(\"%d\", time.Now().UnixNano()))) conn.Write([]byte(\"\\n\")) } } \u6ce8\u610f\u5ba2\u6237\u7aef\u914d\u7f6e InsecureSkipVerify \u7528\u6765\u63a7\u5236\u5ba2\u6237\u7aef\u662f\u5426\u6821\u9a8c\u8bc1\u4e66\u5b89\u5168\u6027. \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5ba2\u6237\u7aef\u4f1a\u68c0\u67e5\u670d\u52a1\u7aef\u8bc1\u4e66\u57df\u540d\u4e0e\u771f\u5b9e\u8bf7\u6c42\u57df\u540d\u662f\u5426\u4e00\u81f4. \u8bbe\u7f6e\u4e3a true \u5219\u8df3\u8fc7\u68c0\u67e5. \u8fd9\u53ef\u80fd\u5bfc\u81f4\u4e2d\u95f4\u4eba\u653b\u51fb, \u56e0\u6b64\u8be5\u8bbe\u7f6e\u4ec5\u5e94\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u7f6e\u4e3a true. \u670d\u52a1\u7aef\u9a8c\u8bc1-\u5b89\u5168\u6a21\u5f0f \u4e0d\u914d\u7f6e InsecureSkipVerify , \u5ba2\u6237\u7aef\u5fc5\u987b\u4fe1\u4efb CA \u8bc1\u4e66(\u6216\u670d\u52a1\u7aef\u8bc1\u4e66): // client package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"log\" \"time\" ) func main() { caCert, err := ioutil.ReadFile(\"ca.crt\") if err != nil { log.Fatalln(err) } caCertPool := x509.NewCertPool() caCertPool.AppendCertsFromPEM(caCert) conf := &tls.Config{ RootCAs: caCertPool, } conn, err := tls.Dial(\"tcp\", \"localhost:8080\", conf) if err != nil { log.Fatalln(err) } defer conn.Close() for _ = range time.NewTicker(time.Second).C { conn.Write([]byte(fmt.Sprintf(\"%d\", time.Now().UnixNano()))) conn.Write([]byte(\"\\n\")) } } \u5ba2\u6237\u7aef\u9a8c\u8bc1 \u6709\u65f6\u5019, \u670d\u52a1\u7aef\u9700\u8981\u9a8c\u8bc1\u5ba2\u6237\u7aef\u8eab\u4efd, \u4ee5\u4fdd\u8bc1\u4e0d\u662f\u6bcf\u4e2a\u62ff\u5230\u670d\u52a1\u7aef\u516c\u94a5\u7684\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u8fde\u63a5(\u670d\u52a1\u7aef\u516c\u94a5\u5728\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u6cc4\u9732\u662f\u96be\u514d\u7684). \u6b64\u65f6, \u670d\u52a1\u7aef\u9700\u8981\u9a8c\u8bc1\u5ba2\u6237\u7aef\u516c\u94a5. // server package main import ( \"bufio\" \"crypto/tls\" \"crypto/x509\" \"io/ioutil\" \"log\" \"net\" ) func serv(conn net.Conn) { defer conn.Close() r := bufio.NewReader(conn) for { line, err := r.ReadString('\\n') if err != nil { log.Println(err) break } log.Println(\"Receive:\", line[:len(line)-1]) } } func main() { cert, err := tls.LoadX509KeyPair(\"server.crt\", \"server.key\") if err != nil { log.Fatalln(err) } certBytes, err := ioutil.ReadFile(\"ca.crt\") if err != nil { log.Fatalln(err) } clientCertPool := x509.NewCertPool() clientCertPool.AppendCertsFromPEM(certBytes) conf := &tls.Config{ Certificates: []tls.Certificate{cert}, ClientAuth: tls.RequireAndVerifyClientCert, ClientCAs: clientCertPool, } ln, err := tls.Listen(\"tcp\", \":8080\", conf) if err != nil { log.Fatalln(err) } defer ln.Close() log.Println(\"Listen and server on :8080\") for { conn, err := ln.Accept() if err != nil { log.Println(err) continue } go serv(conn) } } // client package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"log\" \"time\" ) func main() { cert, err := tls.LoadX509KeyPair(\"client.crt\", \"client.key\") if err != nil { log.Fatalln(err) } caCert, err := ioutil.ReadFile(\"ca.crt\") if err != nil { log.Fatalln(err) } caCertPool := x509.NewCertPool() caCertPool.AppendCertsFromPEM(caCert) conf := &tls.Config{ Certificates: []tls.Certificate{cert}, RootCAs: caCertPool, } conn, err := tls.Dial(\"tcp\", \"localhost:8080\", conf) if err != nil { log.Fatalln(err) } defer conn.Close() for _ = range time.NewTicker(time.Second).C { conn.Write([]byte(fmt.Sprintf(\"%d\", time.Now().UnixNano()))) conn.Write([]byte(\"\\n\")) } } \u95ee\u9898\u8bb0\u5f55 \u5982\u4f55\u7b7e\u540d IP \u5730\u5740? \u5728\u751f\u6210\u670d\u52a1\u7aef\u516c\u94a5\u8fc7\u7a0b\u4e2d, \u5c06 IP \u5730\u5740\u586b\u5165 Common Name \u662f\u65e0\u6548\u7684(\u6b64\u5b57\u6bb5\u5fc5\u987b\u57df\u540d), \u6b63\u786e\u505a\u6cd5\u662f: # \u590d\u5236 openssl.conf cp /etc/pki/tls/openssl.cnf . # \u4fee\u6539\u4ee5\u4e0b\u914d\u7f6e [ v3_ca ] subjectAltName=@alternate_names # \u5e76\u589e\u52a0\u4ee5\u4e0b\u65b0\u533a\u5757 [ alternate_names ] DNS.1 = localhost DNS.2 = ... IP.1 = 127.0.0.1 IP.2 = ... # \u751f\u6210 CA \u79c1\u94a5 openssl genrsa -out ca.key 2048 # \u751f\u6210 CA \u8bc1\u4e66 openssl req -x509 -new -key ca.key -days 36525 -out ca.crt -config openssl.cnf # \u751f\u6210\u670d\u52a1\u7aef\u79c1\u94a5 openssl genrsa -out server.key 2048 # \u751f\u6210\u670d\u52a1\u7aef\u7b7e\u540d\u8bf7\u6c42 openssl req -new -key server.key -out server.csr -config openssl.cnf # \u4f7f\u7528 CA \u5bf9\u670d\u52a1\u7aef\u7b7e\u540d\u8bf7\u6c42\u8fdb\u884c\u7b7e\u540d, \u5e76\u751f\u6210\u670d\u52a1\u7aef\u8bc1\u4e66 openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 36525 -extfile openssl.cnf -extensions v3_ca # \u751f\u6210\u5ba2\u6237\u7aef\u79c1\u94a5 openssl genrsa -out client.key 2048 # \u751f\u6210\u5ba2\u6237\u7aef\u7b7e\u540d\u8bf7\u6c42 openssl req -new -key client.key -out client.csr # \u4f7f\u7528 CA \u5bf9\u5ba2\u6237\u7aef\u7b7e\u540d\u8bf7\u6c42\u8fdb\u884c\u7b7e\u540d, \u5e76\u751f\u6210\u5ba2\u6237\u7aef\u8bc1\u4e66 openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt -days 36525","title":"Go-tls"},{"location":"content/go/tls/#tls","text":"\u4f20\u8f93\u5c42\u5b89\u5168\u534f\u8bae(\u82f1\u8bed: Transport Layer Security, \u7f29\u5199: TLS), \u53ca\u5176\u524d\u8eab\u5b89\u5168\u5957\u63a5\u5c42(Secure Sockets Layer, \u7f29\u5199: SSL)\u662f\u4e00\u79cd\u5b89\u5168\u534f\u8bae, \u76ee\u7684\u662f\u4e3a\u4e92\u8054\u7f51\u901a\u4fe1, \u63d0\u4f9b\u5b89\u5168\u53ca\u6570\u636e\u5b8c\u6574\u6027\u4fdd\u969c. SSL \u5305\u542b\u8bb0\u5f55\u5c42(Record Layer)\u548c\u4f20\u8f93\u5c42, \u8bb0\u5f55\u5c42\u534f\u8bae\u786e\u5b9a\u4f20\u8f93\u5c42\u6570\u636e\u7684\u5c01\u88c5\u683c\u5f0f. \u4f20\u8f93\u5c42\u5b89\u5168\u534f\u8bae\u4f7f\u7528X.509\u8ba4\u8bc1, \u4e4b\u540e\u5229\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\u6f14\u7b97\u6765\u5bf9\u901a\u4fe1\u65b9\u505a\u8eab\u4efd\u8ba4\u8bc1, \u4e4b\u540e\u4ea4\u6362\u5bf9\u79f0\u5bc6\u94a5\u4f5c\u4e3a\u4f1a\u8c08\u5bc6\u94a5(Session key). \u8fd9\u4e2a\u4f1a\u8c08\u5bc6\u94a5\u662f\u7528\u6765\u5c06\u901a\u4fe1\u4e24\u65b9\u4ea4\u6362\u7684\u6570\u636e\u505a\u52a0\u5bc6, \u4fdd\u8bc1\u4e24\u4e2a\u5e94\u7528\u95f4\u901a\u4fe1\u7684\u4fdd\u5bc6\u6027\u548c\u53ef\u9760\u6027, \u4f7f\u5ba2\u6237\u4e0e\u670d\u52a1\u5668\u5e94\u7528\u4e4b\u95f4\u7684\u901a\u4fe1\u4e0d\u88ab\u653b\u51fb\u8005\u7a83\u542c.","title":"TLS"},{"location":"content/go/tls/#tls_1","text":"# \u751f\u6210 CA \u79c1\u94a5 openssl genrsa -out ca.key 2048 # \u751f\u6210 CA \u8bc1\u4e66 openssl req -x509 -new -key ca.key -days 36525 -out ca.crt # \u751f\u6210\u670d\u52a1\u7aef\u79c1\u94a5 openssl genrsa -out server.key 2048 # \u751f\u6210\u670d\u52a1\u7aef\u7b7e\u540d\u8bf7\u6c42 openssl req -new -key server.key -subj \"/CN=host\" -out server.csr # \u4f7f\u7528 CA \u5bf9\u670d\u52a1\u7aef\u7b7e\u540d\u8bf7\u6c42\u8fdb\u884c\u7b7e\u540d, \u5e76\u751f\u6210\u670d\u52a1\u7aef\u8bc1\u4e66 openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 36525 # \u751f\u6210\u5ba2\u6237\u7aef\u79c1\u94a5 openssl genrsa -out client.key 2048 # \u751f\u6210\u5ba2\u6237\u7aef\u7b7e\u540d\u8bf7\u6c42 openssl req -new -key client.key -out client.csr # \u4f7f\u7528 CA \u5bf9\u5ba2\u6237\u7aef\u7b7e\u540d\u8bf7\u6c42\u8fdb\u884c\u7b7e\u540d, \u5e76\u751f\u6210\u5ba2\u6237\u7aef\u8bc1\u4e66 openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt -days 36525","title":"\u751f\u6210 TLS \u79c1\u94a5\u4e0e\u516c\u94a5"},{"location":"content/go/tls/#_1","text":"// server package main import ( \"bufio\" \"crypto/tls\" \"log\" \"net\" ) func serv(conn net.Conn) { defer conn.Close() r := bufio.NewReader(conn) for { line, err := r.ReadString('\\n') if err != nil { log.Println(err) break } log.Println(\"Receive:\", line[:len(line)-1]) } } func main() { cert, err := tls.LoadX509KeyPair(\"server.crt\", \"server.key\") if err != nil { log.Fatalln(err) } conf := &tls.Config{Certificates: []tls.Certificate{cert}} ln, err := tls.Listen(\"tcp\", \":8080\", conf) if err != nil { log.Fatalln(err) } defer ln.Close() log.Println(\"Listen and server on :8080\") for { conn, err := ln.Accept() if err != nil { log.Println(err) continue } go serv(conn) } } // client package main import ( \"crypto/tls\" \"fmt\" \"log\" \"time\" ) func main() { conf := &tls.Config{ InsecureSkipVerify: true, } conn, err := tls.Dial(\"tcp\", \"localhost:8080\", conf) if err != nil { log.Fatalln(err) } defer conn.Close() for _ = range time.NewTicker(time.Second).C { conn.Write([]byte(fmt.Sprintf(\"%d\", time.Now().UnixNano()))) conn.Write([]byte(\"\\n\")) } } \u6ce8\u610f\u5ba2\u6237\u7aef\u914d\u7f6e InsecureSkipVerify \u7528\u6765\u63a7\u5236\u5ba2\u6237\u7aef\u662f\u5426\u6821\u9a8c\u8bc1\u4e66\u5b89\u5168\u6027. \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5ba2\u6237\u7aef\u4f1a\u68c0\u67e5\u670d\u52a1\u7aef\u8bc1\u4e66\u57df\u540d\u4e0e\u771f\u5b9e\u8bf7\u6c42\u57df\u540d\u662f\u5426\u4e00\u81f4. \u8bbe\u7f6e\u4e3a true \u5219\u8df3\u8fc7\u68c0\u67e5. \u8fd9\u53ef\u80fd\u5bfc\u81f4\u4e2d\u95f4\u4eba\u653b\u51fb, \u56e0\u6b64\u8be5\u8bbe\u7f6e\u4ec5\u5e94\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u7f6e\u4e3a true.","title":"\u670d\u52a1\u7aef\u9a8c\u8bc1"},{"location":"content/go/tls/#-","text":"\u4e0d\u914d\u7f6e InsecureSkipVerify , \u5ba2\u6237\u7aef\u5fc5\u987b\u4fe1\u4efb CA \u8bc1\u4e66(\u6216\u670d\u52a1\u7aef\u8bc1\u4e66): // client package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"log\" \"time\" ) func main() { caCert, err := ioutil.ReadFile(\"ca.crt\") if err != nil { log.Fatalln(err) } caCertPool := x509.NewCertPool() caCertPool.AppendCertsFromPEM(caCert) conf := &tls.Config{ RootCAs: caCertPool, } conn, err := tls.Dial(\"tcp\", \"localhost:8080\", conf) if err != nil { log.Fatalln(err) } defer conn.Close() for _ = range time.NewTicker(time.Second).C { conn.Write([]byte(fmt.Sprintf(\"%d\", time.Now().UnixNano()))) conn.Write([]byte(\"\\n\")) } }","title":"\u670d\u52a1\u7aef\u9a8c\u8bc1-\u5b89\u5168\u6a21\u5f0f"},{"location":"content/go/tls/#_2","text":"\u6709\u65f6\u5019, \u670d\u52a1\u7aef\u9700\u8981\u9a8c\u8bc1\u5ba2\u6237\u7aef\u8eab\u4efd, \u4ee5\u4fdd\u8bc1\u4e0d\u662f\u6bcf\u4e2a\u62ff\u5230\u670d\u52a1\u7aef\u516c\u94a5\u7684\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u8fde\u63a5(\u670d\u52a1\u7aef\u516c\u94a5\u5728\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u6cc4\u9732\u662f\u96be\u514d\u7684). \u6b64\u65f6, \u670d\u52a1\u7aef\u9700\u8981\u9a8c\u8bc1\u5ba2\u6237\u7aef\u516c\u94a5. // server package main import ( \"bufio\" \"crypto/tls\" \"crypto/x509\" \"io/ioutil\" \"log\" \"net\" ) func serv(conn net.Conn) { defer conn.Close() r := bufio.NewReader(conn) for { line, err := r.ReadString('\\n') if err != nil { log.Println(err) break } log.Println(\"Receive:\", line[:len(line)-1]) } } func main() { cert, err := tls.LoadX509KeyPair(\"server.crt\", \"server.key\") if err != nil { log.Fatalln(err) } certBytes, err := ioutil.ReadFile(\"ca.crt\") if err != nil { log.Fatalln(err) } clientCertPool := x509.NewCertPool() clientCertPool.AppendCertsFromPEM(certBytes) conf := &tls.Config{ Certificates: []tls.Certificate{cert}, ClientAuth: tls.RequireAndVerifyClientCert, ClientCAs: clientCertPool, } ln, err := tls.Listen(\"tcp\", \":8080\", conf) if err != nil { log.Fatalln(err) } defer ln.Close() log.Println(\"Listen and server on :8080\") for { conn, err := ln.Accept() if err != nil { log.Println(err) continue } go serv(conn) } } // client package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"log\" \"time\" ) func main() { cert, err := tls.LoadX509KeyPair(\"client.crt\", \"client.key\") if err != nil { log.Fatalln(err) } caCert, err := ioutil.ReadFile(\"ca.crt\") if err != nil { log.Fatalln(err) } caCertPool := x509.NewCertPool() caCertPool.AppendCertsFromPEM(caCert) conf := &tls.Config{ Certificates: []tls.Certificate{cert}, RootCAs: caCertPool, } conn, err := tls.Dial(\"tcp\", \"localhost:8080\", conf) if err != nil { log.Fatalln(err) } defer conn.Close() for _ = range time.NewTicker(time.Second).C { conn.Write([]byte(fmt.Sprintf(\"%d\", time.Now().UnixNano()))) conn.Write([]byte(\"\\n\")) } }","title":"\u5ba2\u6237\u7aef\u9a8c\u8bc1"},{"location":"content/go/tls/#_3","text":"","title":"\u95ee\u9898\u8bb0\u5f55"},{"location":"content/go/tls/#ip","text":"\u5728\u751f\u6210\u670d\u52a1\u7aef\u516c\u94a5\u8fc7\u7a0b\u4e2d, \u5c06 IP \u5730\u5740\u586b\u5165 Common Name \u662f\u65e0\u6548\u7684(\u6b64\u5b57\u6bb5\u5fc5\u987b\u57df\u540d), \u6b63\u786e\u505a\u6cd5\u662f: # \u590d\u5236 openssl.conf cp /etc/pki/tls/openssl.cnf . # \u4fee\u6539\u4ee5\u4e0b\u914d\u7f6e [ v3_ca ] subjectAltName=@alternate_names # \u5e76\u589e\u52a0\u4ee5\u4e0b\u65b0\u533a\u5757 [ alternate_names ] DNS.1 = localhost DNS.2 = ... IP.1 = 127.0.0.1 IP.2 = ... # \u751f\u6210 CA \u79c1\u94a5 openssl genrsa -out ca.key 2048 # \u751f\u6210 CA \u8bc1\u4e66 openssl req -x509 -new -key ca.key -days 36525 -out ca.crt -config openssl.cnf # \u751f\u6210\u670d\u52a1\u7aef\u79c1\u94a5 openssl genrsa -out server.key 2048 # \u751f\u6210\u670d\u52a1\u7aef\u7b7e\u540d\u8bf7\u6c42 openssl req -new -key server.key -out server.csr -config openssl.cnf # \u4f7f\u7528 CA \u5bf9\u670d\u52a1\u7aef\u7b7e\u540d\u8bf7\u6c42\u8fdb\u884c\u7b7e\u540d, \u5e76\u751f\u6210\u670d\u52a1\u7aef\u8bc1\u4e66 openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 36525 -extfile openssl.cnf -extensions v3_ca # \u751f\u6210\u5ba2\u6237\u7aef\u79c1\u94a5 openssl genrsa -out client.key 2048 # \u751f\u6210\u5ba2\u6237\u7aef\u7b7e\u540d\u8bf7\u6c42 openssl req -new -key client.key -out client.csr # \u4f7f\u7528 CA \u5bf9\u5ba2\u6237\u7aef\u7b7e\u540d\u8bf7\u6c42\u8fdb\u884c\u7b7e\u540d, \u5e76\u751f\u6210\u5ba2\u6237\u7aef\u8bc1\u4e66 openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt -days 36525","title":"\u5982\u4f55\u7b7e\u540d IP \u5730\u5740?"},{"location":"content/go/token_bucket/","text":"\u4ee4\u724c\u6876\u7b97\u6cd5\u9650\u6d41 \u4ee4\u724c\u6876\u7b97\u6cd5\u6700\u521d\u6765\u6e90\u4e8e\u8ba1\u7b97\u673a\u7f51\u7edc. \u5728\u7f51\u7edc\u4f20\u8f93\u6570\u636e\u65f6, \u4e3a\u4e86\u9632\u6b62\u7f51\u7edc\u62e5\u585e, \u9700 \u9650\u5236\u6d41\u51fa\u7f51\u7edc\u7684\u6d41\u91cf , \u4f7f\u6d41\u91cf\u4ee5\u6bd4\u8f83\u5747\u5300\u7684\u901f\u5ea6\u5411\u5916\u53d1\u9001. \u4ee4\u724c\u6876\u7b97\u6cd5\u5c31\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u529f\u80fd, \u53ef\u63a7\u5236\u53d1\u9001\u5230\u7f51\u7edc\u4e0a\u6570\u636e\u7684\u6570\u76ee, \u5e76\u5141\u8bb8\u7a81\u53d1\u6570\u636e\u7684\u53d1\u9001. \u4ee4\u724c\u6876\u7b97\u6cd5\u662f\u7f51\u7edc\u6d41\u91cf\u6574\u5f62(Traffic Shaping)\u548c\u901f\u7387\u9650\u5236(Rate Limiting)\u4e2d\u6700\u5e38\u4f7f\u7528\u7684\u4e00\u79cd\u7b97\u6cd5. \u5178\u578b\u60c5\u51b5\u4e0b, \u4ee4\u724c\u6876\u7b97\u6cd5\u7528\u6765\u63a7\u5236\u53d1\u9001\u5230\u7f51\u7edc\u4e0a\u7684\u6570\u636e\u7684\u6570\u76ee, \u5e76\u5141\u8bb8\u7a81\u53d1\u6570\u636e\u7684\u53d1\u9001. \u4ee4\u724c\u6876\u4ee5\u6052\u5b9a\u7684\u901f\u7387\u4ea7\u751f\u4ee4\u724c. \u4f20\u8f93\u6570\u636e\u9700\u8981\u6d88\u8017\u4ee4\u724c. \u4f9d\u636e\u6570\u636e\u91cf\u5927\u5c0f\u6d88\u8017\u7b49\u503c\u6570\u91cf\u7684\u4ee4\u724c. \u63a7\u5236\u4ee4\u724c\u7684\u751f\u4ea7\u901f\u5ea6\u5373\u53ef\u8fdb\u884c\u7f51\u7edc\u901f\u7387\u9650\u5236. \u4ee3\u7801\u5b9e\u73b0 \u5728 Go \u8bed\u8a00\u4e2d, \u5982\u679c\u9700\u8981\u9650\u5236\u6bcf\u5355\u4f4d\u65f6\u95f4\u7684\u64cd\u4f5c\u901f\u5ea6, \u6700\u4fbf\u6377\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 time.Ticker (\u9002\u7528\u4e8e\u6bcf\u79d2\u51e0\u5341\u6b21\u64cd\u4f5c\u7684\u901f\u7387), \u5b83\u548c\u4ee4\u724c\u6876\u6a21\u578b\u51e0\u4e4e\u5b8c\u5168\u4e00\u81f4--\u6309\u7167\u56fa\u5b9a\u901f\u7387\u4ea7\u751f\u4ee4\u724c. \u4e0b\u8ff0\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9650\u5236 I/O \u901f\u5ea6\u7684 CopyRate() \u51fd\u6570. package copyrate import ( \"io\" \"time\" ) func CopyRate(dst io.Writer, src io.Reader, bps int64) (written int64, err error) { throttle := time.NewTicker(time.Second) defer throttle.Stop() var n int64 for { n, err = io.CopyN(dst, src, bps) if n > 0 { written += n } if err != nil { if err == io.EOF { err = nil } break } <-throttle.C // rate limit our flows } return written, err } \u6d4b\u8bd5: \u590d\u5236\u6587\u4ef6\u4e14\u5728\u590d\u5236\u8fc7\u7a0b\u4e2d\u9650\u5236\u590d\u5236\u901f\u5ea6 package main import ( \"copyrate\" \"log\" \"os\" \"time\" ) func main() { src, err := os.Open(\"/tmp/foo.tar\") if err != nil { log.Fatalln(err) } defer src.Close() dst, err := os.OpenFile(\"/tmp/bar.tar\", os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644) if err != nil { log.Fatalln(err) } defer dst.Close() tic := time.Now() n, err := copyrate.CopyRate(dst, src, 1024*1024*10) toc := time.Since(tic) log.Println(n, err, toc) // 2018/05/09 15:04:36 284989440 <nil> 27.0232635s } \u6e90\u6587\u4ef6\u5927\u5c0f\u662f 271M, bps \u9650\u5236\u4e3a 10M/S, \u590d\u5236\u8fc7\u7a0b\u603b\u8017\u65f6 27.02s. \u6700\u540e\u8bb0\u5f97 md5sum \u4e00\u4e0b\u4e24\u4efd\u6587\u4ef6, \u786e\u8ba4 CopyRate \u51fd\u6570\u903b\u8f91\u6b63\u5e38: $ md5sum foo.tar bar.tar ff90c9f1d438f80ce6392ff5d79da463 foo.tar ff90c9f1d438f80ce6392ff5d79da463 bar.tar \u53c2\u8003 [1] Go: RateLimiting https://github.com/golang/go/wiki/RateLimiting","title":"Go-\u6d41\u91cf\u9650\u5236"},{"location":"content/go/token_bucket/#_1","text":"\u4ee4\u724c\u6876\u7b97\u6cd5\u6700\u521d\u6765\u6e90\u4e8e\u8ba1\u7b97\u673a\u7f51\u7edc. \u5728\u7f51\u7edc\u4f20\u8f93\u6570\u636e\u65f6, \u4e3a\u4e86\u9632\u6b62\u7f51\u7edc\u62e5\u585e, \u9700 \u9650\u5236\u6d41\u51fa\u7f51\u7edc\u7684\u6d41\u91cf , \u4f7f\u6d41\u91cf\u4ee5\u6bd4\u8f83\u5747\u5300\u7684\u901f\u5ea6\u5411\u5916\u53d1\u9001. \u4ee4\u724c\u6876\u7b97\u6cd5\u5c31\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u529f\u80fd, \u53ef\u63a7\u5236\u53d1\u9001\u5230\u7f51\u7edc\u4e0a\u6570\u636e\u7684\u6570\u76ee, \u5e76\u5141\u8bb8\u7a81\u53d1\u6570\u636e\u7684\u53d1\u9001. \u4ee4\u724c\u6876\u7b97\u6cd5\u662f\u7f51\u7edc\u6d41\u91cf\u6574\u5f62(Traffic Shaping)\u548c\u901f\u7387\u9650\u5236(Rate Limiting)\u4e2d\u6700\u5e38\u4f7f\u7528\u7684\u4e00\u79cd\u7b97\u6cd5. \u5178\u578b\u60c5\u51b5\u4e0b, \u4ee4\u724c\u6876\u7b97\u6cd5\u7528\u6765\u63a7\u5236\u53d1\u9001\u5230\u7f51\u7edc\u4e0a\u7684\u6570\u636e\u7684\u6570\u76ee, \u5e76\u5141\u8bb8\u7a81\u53d1\u6570\u636e\u7684\u53d1\u9001. \u4ee4\u724c\u6876\u4ee5\u6052\u5b9a\u7684\u901f\u7387\u4ea7\u751f\u4ee4\u724c. \u4f20\u8f93\u6570\u636e\u9700\u8981\u6d88\u8017\u4ee4\u724c. \u4f9d\u636e\u6570\u636e\u91cf\u5927\u5c0f\u6d88\u8017\u7b49\u503c\u6570\u91cf\u7684\u4ee4\u724c. \u63a7\u5236\u4ee4\u724c\u7684\u751f\u4ea7\u901f\u5ea6\u5373\u53ef\u8fdb\u884c\u7f51\u7edc\u901f\u7387\u9650\u5236.","title":"\u4ee4\u724c\u6876\u7b97\u6cd5\u9650\u6d41"},{"location":"content/go/token_bucket/#_2","text":"\u5728 Go \u8bed\u8a00\u4e2d, \u5982\u679c\u9700\u8981\u9650\u5236\u6bcf\u5355\u4f4d\u65f6\u95f4\u7684\u64cd\u4f5c\u901f\u5ea6, \u6700\u4fbf\u6377\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 time.Ticker (\u9002\u7528\u4e8e\u6bcf\u79d2\u51e0\u5341\u6b21\u64cd\u4f5c\u7684\u901f\u7387), \u5b83\u548c\u4ee4\u724c\u6876\u6a21\u578b\u51e0\u4e4e\u5b8c\u5168\u4e00\u81f4--\u6309\u7167\u56fa\u5b9a\u901f\u7387\u4ea7\u751f\u4ee4\u724c. \u4e0b\u8ff0\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9650\u5236 I/O \u901f\u5ea6\u7684 CopyRate() \u51fd\u6570. package copyrate import ( \"io\" \"time\" ) func CopyRate(dst io.Writer, src io.Reader, bps int64) (written int64, err error) { throttle := time.NewTicker(time.Second) defer throttle.Stop() var n int64 for { n, err = io.CopyN(dst, src, bps) if n > 0 { written += n } if err != nil { if err == io.EOF { err = nil } break } <-throttle.C // rate limit our flows } return written, err } \u6d4b\u8bd5: \u590d\u5236\u6587\u4ef6\u4e14\u5728\u590d\u5236\u8fc7\u7a0b\u4e2d\u9650\u5236\u590d\u5236\u901f\u5ea6 package main import ( \"copyrate\" \"log\" \"os\" \"time\" ) func main() { src, err := os.Open(\"/tmp/foo.tar\") if err != nil { log.Fatalln(err) } defer src.Close() dst, err := os.OpenFile(\"/tmp/bar.tar\", os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644) if err != nil { log.Fatalln(err) } defer dst.Close() tic := time.Now() n, err := copyrate.CopyRate(dst, src, 1024*1024*10) toc := time.Since(tic) log.Println(n, err, toc) // 2018/05/09 15:04:36 284989440 <nil> 27.0232635s } \u6e90\u6587\u4ef6\u5927\u5c0f\u662f 271M, bps \u9650\u5236\u4e3a 10M/S, \u590d\u5236\u8fc7\u7a0b\u603b\u8017\u65f6 27.02s. \u6700\u540e\u8bb0\u5f97 md5sum \u4e00\u4e0b\u4e24\u4efd\u6587\u4ef6, \u786e\u8ba4 CopyRate \u51fd\u6570\u903b\u8f91\u6b63\u5e38: $ md5sum foo.tar bar.tar ff90c9f1d438f80ce6392ff5d79da463 foo.tar ff90c9f1d438f80ce6392ff5d79da463 bar.tar","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/go/token_bucket/#_3","text":"[1] Go: RateLimiting https://github.com/golang/go/wiki/RateLimiting","title":"\u53c2\u8003"},{"location":"content/pil/agwn/","text":"\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0 \u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0(Additive white Gaussian noise\uff0cAWGN)\u5728\u901a\u4fe1\u9886\u57df\u4e2d\u6307\u7684\u662f\u4e00\u79cd\u529f\u7387\u8c31\u51fd\u6570\u662f\u5e38\u6570(\u5373\u767d\u566a\u58f0), \u4e14\u5e45\u5ea6\u670d\u4ece \u9ad8\u65af\u5206\u5e03 \u7684\u566a\u58f0\u4fe1\u53f7. \u8fd9\u7c7b\u566a\u58f0\u901a\u5e38\u6765\u81ea\u611f\u5149\u5143\u4ef6, \u4e14\u65e0\u6cd5\u907f\u514d. \u52a0\u566a numpy \u4e2d\u4f7f\u7528 numpy.random.normal() \u51fd\u6570\u751f\u6210\u6b63\u6001\u5206\u5e03\u6570\u636e. import numpy as np import matplotlib.pyplot as plt # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u6b63\u6001\u5206\u5e03\u6570\u636e data = np.random.normal(0, 64, 1024 * 8) # \u5728 plt \u4e2d\u753b\u51fa\u76f4\u65b9\u56fe plt.hist(data, 256, normed=1) plt.show() \u4e3a\u56fe\u50cf\u6dfb\u52a0\u9ad8\u65af\u767d\u566a\u58f0. \u6ce8\u610f\u5230\u6dfb\u52a0\u5b8c\u566a\u58f0\u7684\u56fe\u50cf, \u50cf\u7d20\u503c\u53ef\u80fd\u4f4e\u4e8e 0 \u6216\u9ad8\u4e8e 255, \u6b64\u65f6\u5e94\u8be5\u5bf9\u8f6c\u6362\u540e\u7684\u56fe\u50cf\u505a\u4e00\u6b21\u5bf9\u6bd4\u62c9\u4f38. import PIL.Image import scipy.misc import numpy as np def convert_2d(r): # \u6dfb\u52a0\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0 s = r + np.random.normal(0, 64, r.shape) if np.min(s) >= 0 and np.max(s) <= 255: return s # \u5bf9\u6bd4\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u52a0\u566a\u540e\u7684\u56fe\u50cf \u53bb\u566a \u8003\u8651\u4e00\u5e45\u5c06\u566a\u58f0 $\\eta(x, y)$ \u52a0\u5165\u5230\u539f\u59cb\u56fe\u50cf $f(x, y)$ \u5f62\u6210\u7684\u5e26\u6709\u566a\u58f0\u7684\u56fe\u50cf $g(x, y)$, \u5373: $$ g(x, y) = f(x, y) + \\eta(x, y) $$ \u8fd9\u91cc\u5047\u8bbe\u6bcf\u4e2a\u5750\u6807\u70b9 $(x, y)$ \u4e0a\u7684\u566a\u58f0\u90fd\u4e0d\u76f8\u5173\u4e14\u5747\u503c\u4e3a 0. \u6211\u4eec\u5904\u7406\u7684\u76ee\u6807\u5c31\u662f\u901a\u8fc7\u4eba\u4e3a\u52a0\u5165\u4e00\u7cfb\u5217\u566a\u58f0\u56fe\u50cf $g_i(x, y)$ \u6765\u51cf\u5c11\u566a\u58f0.\u5982\u679c\u5bf9 K \u5e45\u5e26\u6709\u4e0d\u540c\u566a\u58f0\u7684\u56fe\u50cf\u53d6\u5e73\u5747\u503c, \u5373 $$ \\bar g(x, y) = \\frac{1}{K}\\sum_{i=1}^Kg_i(x, y) = f(x, y) + \\frac{1}{K}\\sum_{i=1}^K\\eta_i(x, y) $$ \u5f53 K \u8db3\u591f\u5927\u65f6, $\\frac{1}{K}\\sum_{i=1}^K\\eta_i(x, y)$ \u8d8b\u5411\u4e8e 0, \u56e0\u6b64 $$ \\bar g(x, y) = f(x, y) $$ \u4e0b\u9762\u5c1d\u8bd5\u5bf9\u4e0a\u8ff0\u56fe\u7247\u53d6 K=128 \u8fdb\u884c\u53bb\u566a import PIL.Image import scipy.misc import numpy as np def convert_2d(r): # \u6dfb\u52a0\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0 s = r + np.random.normal(0, 64, r.shape) if np.min(s) >= 0 and np.max(s) <= 255: return s # \u5bf9\u6bd4\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) k = 128 im_converted_mat = np.zeros(im_mat.shape) for i in range(k): im_converted_mat += convert_3d(im_mat) im_converted_mat = im_converted_mat / k im_converted_mat = im_converted_mat - np.full(im_converted_mat.shape, np.min(im_converted_mat)) im_converted_mat = im_converted_mat * 255 / np.max(im_converted_mat) im_converted_mat = im_converted_mat.astype(np.uint8) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u53bb\u566a\u540e\u7684\u56fe\u50cf \u53ef\u4ee5\u770b\u5230\u53bb\u566a\u540e\u7684\u56fe\u50cf\u5df2\u7ecf\u5341\u5206\u63a5\u8fd1\u539f\u59cb\u56fe\u50cf\u4e86. \u8bfb\u8005\u53ef\u4ee5\u81ea\u7531\u9009\u53d6 K=4, K=16 \u7b49\u4e0d\u540c\u503c\u67e5\u770b\u53bb\u566a\u6548\u679c.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0\u4e0e\u53bb\u566a"},{"location":"content/pil/agwn/#_1","text":"\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0(Additive white Gaussian noise\uff0cAWGN)\u5728\u901a\u4fe1\u9886\u57df\u4e2d\u6307\u7684\u662f\u4e00\u79cd\u529f\u7387\u8c31\u51fd\u6570\u662f\u5e38\u6570(\u5373\u767d\u566a\u58f0), \u4e14\u5e45\u5ea6\u670d\u4ece \u9ad8\u65af\u5206\u5e03 \u7684\u566a\u58f0\u4fe1\u53f7. \u8fd9\u7c7b\u566a\u58f0\u901a\u5e38\u6765\u81ea\u611f\u5149\u5143\u4ef6, \u4e14\u65e0\u6cd5\u907f\u514d.","title":"\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0"},{"location":"content/pil/agwn/#_2","text":"numpy \u4e2d\u4f7f\u7528 numpy.random.normal() \u51fd\u6570\u751f\u6210\u6b63\u6001\u5206\u5e03\u6570\u636e. import numpy as np import matplotlib.pyplot as plt # \u751f\u6210\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u6b63\u6001\u5206\u5e03\u6570\u636e data = np.random.normal(0, 64, 1024 * 8) # \u5728 plt \u4e2d\u753b\u51fa\u76f4\u65b9\u56fe plt.hist(data, 256, normed=1) plt.show() \u4e3a\u56fe\u50cf\u6dfb\u52a0\u9ad8\u65af\u767d\u566a\u58f0. \u6ce8\u610f\u5230\u6dfb\u52a0\u5b8c\u566a\u58f0\u7684\u56fe\u50cf, \u50cf\u7d20\u503c\u53ef\u80fd\u4f4e\u4e8e 0 \u6216\u9ad8\u4e8e 255, \u6b64\u65f6\u5e94\u8be5\u5bf9\u8f6c\u6362\u540e\u7684\u56fe\u50cf\u505a\u4e00\u6b21\u5bf9\u6bd4\u62c9\u4f38. import PIL.Image import scipy.misc import numpy as np def convert_2d(r): # \u6dfb\u52a0\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0 s = r + np.random.normal(0, 64, r.shape) if np.min(s) >= 0 and np.max(s) <= 255: return s # \u5bf9\u6bd4\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u52a0\u566a\u540e\u7684\u56fe\u50cf","title":"\u52a0\u566a"},{"location":"content/pil/agwn/#_3","text":"\u8003\u8651\u4e00\u5e45\u5c06\u566a\u58f0 $\\eta(x, y)$ \u52a0\u5165\u5230\u539f\u59cb\u56fe\u50cf $f(x, y)$ \u5f62\u6210\u7684\u5e26\u6709\u566a\u58f0\u7684\u56fe\u50cf $g(x, y)$, \u5373: $$ g(x, y) = f(x, y) + \\eta(x, y) $$ \u8fd9\u91cc\u5047\u8bbe\u6bcf\u4e2a\u5750\u6807\u70b9 $(x, y)$ \u4e0a\u7684\u566a\u58f0\u90fd\u4e0d\u76f8\u5173\u4e14\u5747\u503c\u4e3a 0. \u6211\u4eec\u5904\u7406\u7684\u76ee\u6807\u5c31\u662f\u901a\u8fc7\u4eba\u4e3a\u52a0\u5165\u4e00\u7cfb\u5217\u566a\u58f0\u56fe\u50cf $g_i(x, y)$ \u6765\u51cf\u5c11\u566a\u58f0.\u5982\u679c\u5bf9 K \u5e45\u5e26\u6709\u4e0d\u540c\u566a\u58f0\u7684\u56fe\u50cf\u53d6\u5e73\u5747\u503c, \u5373 $$ \\bar g(x, y) = \\frac{1}{K}\\sum_{i=1}^Kg_i(x, y) = f(x, y) + \\frac{1}{K}\\sum_{i=1}^K\\eta_i(x, y) $$ \u5f53 K \u8db3\u591f\u5927\u65f6, $\\frac{1}{K}\\sum_{i=1}^K\\eta_i(x, y)$ \u8d8b\u5411\u4e8e 0, \u56e0\u6b64 $$ \\bar g(x, y) = f(x, y) $$ \u4e0b\u9762\u5c1d\u8bd5\u5bf9\u4e0a\u8ff0\u56fe\u7247\u53d6 K=128 \u8fdb\u884c\u53bb\u566a import PIL.Image import scipy.misc import numpy as np def convert_2d(r): # \u6dfb\u52a0\u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 \u7684\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0 s = r + np.random.normal(0, 64, r.shape) if np.min(s) >= 0 and np.max(s) <= 255: return s # \u5bf9\u6bd4\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) k = 128 im_converted_mat = np.zeros(im_mat.shape) for i in range(k): im_converted_mat += convert_3d(im_mat) im_converted_mat = im_converted_mat / k im_converted_mat = im_converted_mat - np.full(im_converted_mat.shape, np.min(im_converted_mat)) im_converted_mat = im_converted_mat * 255 / np.max(im_converted_mat) im_converted_mat = im_converted_mat.astype(np.uint8) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u53bb\u566a\u540e\u7684\u56fe\u50cf \u53ef\u4ee5\u770b\u5230\u53bb\u566a\u540e\u7684\u56fe\u50cf\u5df2\u7ecf\u5341\u5206\u63a5\u8fd1\u539f\u59cb\u56fe\u50cf\u4e86. \u8bfb\u8005\u53ef\u4ee5\u81ea\u7531\u9009\u53d6 K=4, K=16 \u7b49\u4e0d\u540c\u503c\u67e5\u770b\u53bb\u566a\u6548\u679c.","title":"\u53bb\u566a"},{"location":"content/pil/ascii/","text":"\u6548\u679c\u5c55\u793a \u6539\u53d8\u8272\u5f69\u6a21\u5f0f\u81f3\u7070\u5ea6\u56fe \u5b57\u7b26\u753b\u7684\u7b2c\u4e00\u6b65\u662f\u5c06\u5f69\u8272\u56fe\u7247\u8f6c\u53d8\u4e3a\u7070\u5ea6\u56fe. \u5bf9\u4e8e\u5f69\u8272\u8f6c\u7070\u5ea6\u56fe, \u6709\u4e00\u4e2a\u8457\u540d\u516c\u5f0f ITU-R 601-2 luma. \u56e0\u4e3a\u4eba\u773c\u5bf9 RGB \u989c\u8272\u7684\u611f\u77e5\u5e76\u4e0d\u76f8\u540c, \u6240\u4ee5\u8f6c\u6362\u7684\u65f6\u5019\u9700\u8981\u7ed9\u4e88\u4e0d\u540c\u7684\u6743\u91cd: L = R * 299/1000 + G * 587/1000 + B * 114/1000 \u5728 PIL \u4e2d, \u4f7f\u7528 .convert('F') \u5c06\u4efb\u610f\u56fe\u50cf\u8f6c\u6362\u4e3a 256 \u9636\u7070\u5ea6\u56fe. import PIL.Image im = PIL.Image.open('/img/jp.jpg') im = im.convert('F') \u56fe\u50cf\u5747\u503c \u56fe\u50cf\u5747\u503c\u5373\u56fe\u50cf\u7684\u4e3b\u9898\u8272. \u5728 PIL \u4e2d, \u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u83b7\u53d6\u56fe\u50cf\u5747\u503c: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean print(mean) # [98.61, 97.29, 100.91, 255.0], \u6bcf\u4e00\u9879\u5206\u522b\u4ee3\u8868 RGBA \u5b57\u7b26\u4ecb\u7ecd \u5b57\u7b26\u5360\u7a7a\u6bd4 : \u5728\u5355\u4e2a\u5b57\u7b26\u7684\u663e\u793a\u8303\u56f4\u5185, \u586b\u5145\u50cf\u7d20\u70b9\u7684\u4e2a\u6570\u4e0e\u603b\u50cf\u7d20\u70b9\u7684\u6bd4\u503c. \u8fd9\u91cc\u4f7f\u7528 # , = , - , \u7a7a\u683c \u56db\u4e2a\u5360\u7a7a\u6bd4\u9010\u6b65\u4e0b\u964d\u7684 ASCII \u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u753b\u7684\u57fa\u7840\u5143\u7d20. \u540c\u65f6\u7ea6\u5b9a\u7070\u5ea6\u9ad8\u4e8e\u5747\u503c\u7684\u50cf\u7d20\u70b9\u91c7\u7528 # \u4e0e = , \u7070\u5ea6\u4f4e\u4e8e\u5747\u503c\u7684\u50cf\u7d20\u70b9\u91c7\u7528 - , \u7a7a\u683c . \u5b57\u7b26\u5bbd\u9ad8\u6bd4 : 14 \u53f7\u5b57\u4f53\u5927\u5c0f\u7684\u5bbd\u9ad8\u6bd4\u4e3a 8:14. \u56e0\u6b64\u5047\u8bbe\u9700\u8981\u5c06 100x100 \u7684\u56fe\u7247\u8f6c\u6362\u4e3a\u7531 14 \u53f7\u5b57\u4f53\u5927\u5c0f\u7684 # , = , - , \u7a7a\u683c \u6784\u6210\u7684\u5b57\u7b26\u753b, \u5219\u9700\u8981\u4f7f\u7528 100x100 \u4e2a\u5b57\u7b26\u586b\u5145\u81f3\u5927\u5c0f\u4e3a 800x1400 \u7684\u753b\u5e03\u4e0a. \u5728\u753b\u5377\u4e0a\u5199\u4e00\u9996\u8bd7 \u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u65b0\u5efa\u4e00\u526f\u56fe\u50cf, \u5e76\u5728\u56fe\u50cf\u4e0a\u4e66\u5199\u540d\u8bd7\u4f5c \"The Zen of Python\" import PIL.Image import PIL.ImageDraw import PIL.ImageFont zen = \"\"\"The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!\"\"\" font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.new('RGB', (552, 294), '#FFFFFF') dr = PIL.ImageDraw.Draw(im) dr.text((0, 0), zen, '#000000', font) im.show() \u6700\u7ec8\u80fd\u5f97\u5230\u5982\u4e0b\u4e00\u526f\u767d\u5e95\u9ed1\u5b57\u7684\u56fe\u7247 \u5408\u5e76\u4ee3\u7801 \u5bf9\u4e0a\u8ff0\u6280\u5de7\u7684\u7b80\u5355\u7ec4\u5408, \u5f88\u5bb9\u6613\u4fbf\u80fd\u5f97\u5230\u5982\u4e0b\u5b57\u7b26\u753b\u751f\u6210\u65b9\u6848, \u8fd0\u884c\u4e0b\u9762\u7684\u7a0b\u5e8f\u4f1a\u6253\u5f00\u4e00\u4e2a\u56fe\u7247\u9884\u89c8\u7a97\u53e3\u663e\u793a\u751f\u6210\u7684\u5b57\u7b26\u753b\u56fe\u50cf import PIL.Image import PIL.ImageDraw import PIL.ImageFont import PIL.ImageStat font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.open('/img/jp.jpg') im = im.convert('F') size = im.size rx = im.size[0] ry = int(rx / size[0] * size[1] * 8 / 14) im = im.resize((rx, ry), PIL.Image.NEAREST) mean = PIL.ImageStat.Stat(im).mean[0] words = [] for y in range(im.size[1]): for x in range(im.size[0]): p = im.getpixel((x, y)) if p < mean / 2: c = '#' elif mean / 2 <= p < mean: c = '=' elif mean <= p < mean + (255 - mean) / 2: c = '-' elif mean + (255 - mean) / 2 <= p: c = ' ' else: raise ValueError(p) words.append(c) words.append('\\n') im.close() im = PIL.Image.new('RGB', (im.size[0] * 8, im.size[1] * 14), '#FFFFFF') dr = PIL.ImageDraw.Draw(im) dr.text((0, 0), ''.join(words), '#000000', font) im = im.resize(size, PIL.Image.LANCZOS) im.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u5b57\u7b26\u753b"},{"location":"content/pil/ascii/#_1","text":"","title":"\u6548\u679c\u5c55\u793a"},{"location":"content/pil/ascii/#_2","text":"\u5b57\u7b26\u753b\u7684\u7b2c\u4e00\u6b65\u662f\u5c06\u5f69\u8272\u56fe\u7247\u8f6c\u53d8\u4e3a\u7070\u5ea6\u56fe. \u5bf9\u4e8e\u5f69\u8272\u8f6c\u7070\u5ea6\u56fe, \u6709\u4e00\u4e2a\u8457\u540d\u516c\u5f0f ITU-R 601-2 luma. \u56e0\u4e3a\u4eba\u773c\u5bf9 RGB \u989c\u8272\u7684\u611f\u77e5\u5e76\u4e0d\u76f8\u540c, \u6240\u4ee5\u8f6c\u6362\u7684\u65f6\u5019\u9700\u8981\u7ed9\u4e88\u4e0d\u540c\u7684\u6743\u91cd: L = R * 299/1000 + G * 587/1000 + B * 114/1000 \u5728 PIL \u4e2d, \u4f7f\u7528 .convert('F') \u5c06\u4efb\u610f\u56fe\u50cf\u8f6c\u6362\u4e3a 256 \u9636\u7070\u5ea6\u56fe. import PIL.Image im = PIL.Image.open('/img/jp.jpg') im = im.convert('F')","title":"\u6539\u53d8\u8272\u5f69\u6a21\u5f0f\u81f3\u7070\u5ea6\u56fe"},{"location":"content/pil/ascii/#_3","text":"\u56fe\u50cf\u5747\u503c\u5373\u56fe\u50cf\u7684\u4e3b\u9898\u8272. \u5728 PIL \u4e2d, \u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u83b7\u53d6\u56fe\u50cf\u5747\u503c: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean print(mean) # [98.61, 97.29, 100.91, 255.0], \u6bcf\u4e00\u9879\u5206\u522b\u4ee3\u8868 RGBA","title":"\u56fe\u50cf\u5747\u503c"},{"location":"content/pil/ascii/#_4","text":"\u5b57\u7b26\u5360\u7a7a\u6bd4 : \u5728\u5355\u4e2a\u5b57\u7b26\u7684\u663e\u793a\u8303\u56f4\u5185, \u586b\u5145\u50cf\u7d20\u70b9\u7684\u4e2a\u6570\u4e0e\u603b\u50cf\u7d20\u70b9\u7684\u6bd4\u503c. \u8fd9\u91cc\u4f7f\u7528 # , = , - , \u7a7a\u683c \u56db\u4e2a\u5360\u7a7a\u6bd4\u9010\u6b65\u4e0b\u964d\u7684 ASCII \u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u753b\u7684\u57fa\u7840\u5143\u7d20. \u540c\u65f6\u7ea6\u5b9a\u7070\u5ea6\u9ad8\u4e8e\u5747\u503c\u7684\u50cf\u7d20\u70b9\u91c7\u7528 # \u4e0e = , \u7070\u5ea6\u4f4e\u4e8e\u5747\u503c\u7684\u50cf\u7d20\u70b9\u91c7\u7528 - , \u7a7a\u683c . \u5b57\u7b26\u5bbd\u9ad8\u6bd4 : 14 \u53f7\u5b57\u4f53\u5927\u5c0f\u7684\u5bbd\u9ad8\u6bd4\u4e3a 8:14. \u56e0\u6b64\u5047\u8bbe\u9700\u8981\u5c06 100x100 \u7684\u56fe\u7247\u8f6c\u6362\u4e3a\u7531 14 \u53f7\u5b57\u4f53\u5927\u5c0f\u7684 # , = , - , \u7a7a\u683c \u6784\u6210\u7684\u5b57\u7b26\u753b, \u5219\u9700\u8981\u4f7f\u7528 100x100 \u4e2a\u5b57\u7b26\u586b\u5145\u81f3\u5927\u5c0f\u4e3a 800x1400 \u7684\u753b\u5e03\u4e0a.","title":"\u5b57\u7b26\u4ecb\u7ecd"},{"location":"content/pil/ascii/#_5","text":"\u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u65b0\u5efa\u4e00\u526f\u56fe\u50cf, \u5e76\u5728\u56fe\u50cf\u4e0a\u4e66\u5199\u540d\u8bd7\u4f5c \"The Zen of Python\" import PIL.Image import PIL.ImageDraw import PIL.ImageFont zen = \"\"\"The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!\"\"\" font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.new('RGB', (552, 294), '#FFFFFF') dr = PIL.ImageDraw.Draw(im) dr.text((0, 0), zen, '#000000', font) im.show() \u6700\u7ec8\u80fd\u5f97\u5230\u5982\u4e0b\u4e00\u526f\u767d\u5e95\u9ed1\u5b57\u7684\u56fe\u7247","title":"\u5728\u753b\u5377\u4e0a\u5199\u4e00\u9996\u8bd7"},{"location":"content/pil/ascii/#_6","text":"\u5bf9\u4e0a\u8ff0\u6280\u5de7\u7684\u7b80\u5355\u7ec4\u5408, \u5f88\u5bb9\u6613\u4fbf\u80fd\u5f97\u5230\u5982\u4e0b\u5b57\u7b26\u753b\u751f\u6210\u65b9\u6848, \u8fd0\u884c\u4e0b\u9762\u7684\u7a0b\u5e8f\u4f1a\u6253\u5f00\u4e00\u4e2a\u56fe\u7247\u9884\u89c8\u7a97\u53e3\u663e\u793a\u751f\u6210\u7684\u5b57\u7b26\u753b\u56fe\u50cf import PIL.Image import PIL.ImageDraw import PIL.ImageFont import PIL.ImageStat font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.open('/img/jp.jpg') im = im.convert('F') size = im.size rx = im.size[0] ry = int(rx / size[0] * size[1] * 8 / 14) im = im.resize((rx, ry), PIL.Image.NEAREST) mean = PIL.ImageStat.Stat(im).mean[0] words = [] for y in range(im.size[1]): for x in range(im.size[0]): p = im.getpixel((x, y)) if p < mean / 2: c = '#' elif mean / 2 <= p < mean: c = '=' elif mean <= p < mean + (255 - mean) / 2: c = '-' elif mean + (255 - mean) / 2 <= p: c = ' ' else: raise ValueError(p) words.append(c) words.append('\\n') im.close() im = PIL.Image.new('RGB', (im.size[0] * 8, im.size[1] * 14), '#FFFFFF') dr = PIL.ImageDraw.Draw(im) dr.text((0, 0), ''.join(words), '#000000', font) im = im.resize(size, PIL.Image.LANCZOS) im.show()","title":"\u5408\u5e76\u4ee3\u7801"},{"location":"content/pil/bit/","text":"\u4f4d\u56fe\u5207\u5272 \u8bbe\u4e00\u5e45\u7070\u5ea6\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u90fd\u7531 8 \u6bd4\u7279\u8868\u793a, \u5219\u56fe\u50cf\u8f6c\u6362\u4e3a\u7531 8 \u5f20 1 \u6bd4\u7279\u5e73\u9762\u7ec4\u6210, \u5176\u8303\u56f4\u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u7684\u4f4d\u5e73\u9762 0 \u5230\u6700\u9ad8\u6709\u6548\u4f4d\u7684\u4f4d\u5e73\u9762 7. \u5728 8 \u6bd4\u7279\u5b57\u8282\u4e2d, \u5e73\u9762 0 \u5305\u542b\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u6700\u4f4e\u6709\u6548\u4f4d, \u800c\u5e73\u9762 7 \u5219\u5305\u542b\u6700\u9ad8\u6709\u6548\u4f4d. \u8f83\u9ad8\u9636\u4f4d(\u5c24\u5176\u662f\u524d 4 \u4f4d)\u5305\u542b\u4e86\u5927\u591a\u6570\u5728\u89c6\u89c9\u4e0a\u5f88\u91cd\u8981\u7684\u6570\u636e. \u4ee3\u7801\u5b9e\u73b0 import PIL.Image import scipy.misc import numpy as np flat = 7 def convert_2d(r): s = np.empty(r.shape, dtype=np.uint8) for j in range(r.shape[0]): for i in range(r.shape[1]): bits = bin(r[j][i])[2:].rjust(8, '0') fill = int(bits[-flat - 1]) s[j][i] = 255 if fill else 0 return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) im_conveted_mat = convert_2d(im_mat) im_conveted = PIL.Image.fromarray(im_conveted_mat) im_conveted.show() \u5b9e\u9a8c\u7ed3\u679c \u539f\u56fe \u7b2c 7 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 6 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 5 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 4 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 3 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 2 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 1 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 0 \u4e2a\u4f4d\u5e73\u9762","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u4f4d\u56fe\u5207\u5272"},{"location":"content/pil/bit/#_1","text":"\u8bbe\u4e00\u5e45\u7070\u5ea6\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u90fd\u7531 8 \u6bd4\u7279\u8868\u793a, \u5219\u56fe\u50cf\u8f6c\u6362\u4e3a\u7531 8 \u5f20 1 \u6bd4\u7279\u5e73\u9762\u7ec4\u6210, \u5176\u8303\u56f4\u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u7684\u4f4d\u5e73\u9762 0 \u5230\u6700\u9ad8\u6709\u6548\u4f4d\u7684\u4f4d\u5e73\u9762 7. \u5728 8 \u6bd4\u7279\u5b57\u8282\u4e2d, \u5e73\u9762 0 \u5305\u542b\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u6700\u4f4e\u6709\u6548\u4f4d, \u800c\u5e73\u9762 7 \u5219\u5305\u542b\u6700\u9ad8\u6709\u6548\u4f4d. \u8f83\u9ad8\u9636\u4f4d(\u5c24\u5176\u662f\u524d 4 \u4f4d)\u5305\u542b\u4e86\u5927\u591a\u6570\u5728\u89c6\u89c9\u4e0a\u5f88\u91cd\u8981\u7684\u6570\u636e.","title":"\u4f4d\u56fe\u5207\u5272"},{"location":"content/pil/bit/#_2","text":"import PIL.Image import scipy.misc import numpy as np flat = 7 def convert_2d(r): s = np.empty(r.shape, dtype=np.uint8) for j in range(r.shape[0]): for i in range(r.shape[1]): bits = bin(r[j][i])[2:].rjust(8, '0') fill = int(bits[-flat - 1]) s[j][i] = 255 if fill else 0 return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) im_conveted_mat = convert_2d(im_mat) im_conveted = PIL.Image.fromarray(im_conveted_mat) im_conveted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/bit/#_3","text":"\u539f\u56fe \u7b2c 7 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 6 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 5 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 4 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 3 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 2 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 1 \u4e2a\u4f4d\u5e73\u9762 \u7b2c 0 \u4e2a\u4f4d\u5e73\u9762","title":"\u5b9e\u9a8c\u7ed3\u679c"},{"location":"content/pil/channel/","text":"\u6570\u5b57\u56fe\u50cf\u7684\u672c\u8d28 \u6570\u5b57\u56fe\u50cf\u7684\u672c\u8d28\u662f\u4e00\u4e2a\u591a\u7ef4\u77e9\u9635 . \u4ee5\u4e00\u5f20 480x270 \u7684 RGB \u8272\u5f69\u7a7a\u95f4\u56fe\u50cf\u4e3a\u4f8b, \u7f16\u5199\u5982\u4e0b\u4ee3\u7801 import scipy.misc mat = scipy.misc.imread('/img/jp.jpg') print(mat.shape) # (270, 480, 3) \u8bf4\u660e\u8fd9\u4e2a\u56fe\u50cf\u6709 270 \u884c, 480 \u5217, \u4ee5\u53ca\u5728\u8272\u5f69\u4e0a\u6709 3 \u4e2a\u5206\u91cf. \u8fdb\u4e00\u6b65\u5206\u89e3\u8be5\u56fe\u7247\u5f97\u5230 R, G, B \u4e09\u4e2a\u901a\u9053\u5206\u91cf: import PIL.Image im = PIL.Image.open('/img/jp.jpg') r, g, b = im.split() r.show() g.show() b.show() \u5f97\u5230\u5982\u4e0b\u4e09\u5f20\u56fe\u7247, \u6bcf\u4e2a\u5206\u91cf\u5355\u72ec\u62ff\u51fa\u6765\u90fd\u662f\u4e00\u4e2a [270, 480, 1] \u7684\u77e9\u9635 R \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: G \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: B \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: \u5982\u4f60\u6240\u89c1, \u5b83\u4eec\u5e76\u4e0d\u662f\u5f69\u8272\u7684\uff0c\u800c\u662f\u4e00\u5e45\u7070\u5ea6\u56fe\u50cf \u4ea4\u6362\u901a\u9053 \u5982\u679c\u6211\u4eec\u4ea4\u6362\u4e00\u4e0b\u5206\u91cf\u653e\u7f6e\u7684\u987a\u5e8f, \u628a B \u5206\u91cf\u653e\u8fdb\u7ea2\u8272\u901a\u9053\u91cc, \u628a G \u5206\u91cf\u653e\u8fdb\u7eff\u8272\u901a\u9053\u91cc, R \u5206\u91cf\u653e\u8fdb\u84dd\u8272\u901a\u9053\u91cc, \u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u4e00\u526f\u56fe\u50cf: import PIL.Image im = PIL.Image.open('/img/jp.jpg') r, g, b = im.split() im = PIL.Image.merge('RGB', (b, g, r)) im.show() \u9664\u4e86\u4ea4\u6362\u901a\u9053\u987a\u5e8f\u5916, \u751a\u81f3\u53ef\u4ee5\u4f20\u5165\u81ea\u5df1\u5b9a\u4e49\u7684\u901a\u9053\u5206\u91cf import PIL.Image im = PIL.Image.open('/img/jp.jpg') _, g, b = im.split() # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 r \u901a\u9053\u5206\u91cf, \u6ce8\u610f mode \u503c\u4e3a 'L' r = PIL.Image.new('L', im.size, color=255) im = PIL.Image.merge('RGB', (r, g, b)) im.show() \u554a, \u6211\u7684\u773c\u775b \u5b66\u4e60\u901a\u9053\u7684\u73b0\u5b9e\u610f\u4e49 \u4f5c\u8005\u5728\u529e\u7406\u793e\u4fdd\u5361\u7684\u65f6\u5019, \u8981\u6c42\u7535\u5b50\u8bc1\u4ef6\u7167\u4e3a\u767d\u8272\u80cc\u666f\u5e55\u5e03, \u4f46\u4f5c\u8005\u53ea\u6709\u84dd\u8272\u80cc\u666f\u5e55\u5e03\u7684\u7535\u5b50\u7167. \u4f5c\u4e3a\u4e00\u4e2a\u61d2\u4eba, \u65e2\u4e0d\u60f3\u53bb\u91cd\u65b0\u62cd\u7167\u53c8\u4e0d\u60f3\u4e0b\u8f7dphotoshop, \u6240\u4ee5\u5c31\u7406\u6240\u5f53\u7136\u7684\u5bf9\u7167\u7247\u7684\u84dd\u8272\u901a\u9053\u52a8\u8d77\u4e86\u624b\u811a.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u901a\u9053"},{"location":"content/pil/channel/#_1","text":"\u6570\u5b57\u56fe\u50cf\u7684\u672c\u8d28\u662f\u4e00\u4e2a\u591a\u7ef4\u77e9\u9635 . \u4ee5\u4e00\u5f20 480x270 \u7684 RGB \u8272\u5f69\u7a7a\u95f4\u56fe\u50cf\u4e3a\u4f8b, \u7f16\u5199\u5982\u4e0b\u4ee3\u7801 import scipy.misc mat = scipy.misc.imread('/img/jp.jpg') print(mat.shape) # (270, 480, 3) \u8bf4\u660e\u8fd9\u4e2a\u56fe\u50cf\u6709 270 \u884c, 480 \u5217, \u4ee5\u53ca\u5728\u8272\u5f69\u4e0a\u6709 3 \u4e2a\u5206\u91cf. \u8fdb\u4e00\u6b65\u5206\u89e3\u8be5\u56fe\u7247\u5f97\u5230 R, G, B \u4e09\u4e2a\u901a\u9053\u5206\u91cf: import PIL.Image im = PIL.Image.open('/img/jp.jpg') r, g, b = im.split() r.show() g.show() b.show() \u5f97\u5230\u5982\u4e0b\u4e09\u5f20\u56fe\u7247, \u6bcf\u4e2a\u5206\u91cf\u5355\u72ec\u62ff\u51fa\u6765\u90fd\u662f\u4e00\u4e2a [270, 480, 1] \u7684\u77e9\u9635 R \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: G \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: B \u901a\u9053\u7684\u7070\u5ea6\u56fe\u50cf: \u5982\u4f60\u6240\u89c1, \u5b83\u4eec\u5e76\u4e0d\u662f\u5f69\u8272\u7684\uff0c\u800c\u662f\u4e00\u5e45\u7070\u5ea6\u56fe\u50cf","title":"\u6570\u5b57\u56fe\u50cf\u7684\u672c\u8d28"},{"location":"content/pil/channel/#_2","text":"\u5982\u679c\u6211\u4eec\u4ea4\u6362\u4e00\u4e0b\u5206\u91cf\u653e\u7f6e\u7684\u987a\u5e8f, \u628a B \u5206\u91cf\u653e\u8fdb\u7ea2\u8272\u901a\u9053\u91cc, \u628a G \u5206\u91cf\u653e\u8fdb\u7eff\u8272\u901a\u9053\u91cc, R \u5206\u91cf\u653e\u8fdb\u84dd\u8272\u901a\u9053\u91cc, \u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u4e00\u526f\u56fe\u50cf: import PIL.Image im = PIL.Image.open('/img/jp.jpg') r, g, b = im.split() im = PIL.Image.merge('RGB', (b, g, r)) im.show() \u9664\u4e86\u4ea4\u6362\u901a\u9053\u987a\u5e8f\u5916, \u751a\u81f3\u53ef\u4ee5\u4f20\u5165\u81ea\u5df1\u5b9a\u4e49\u7684\u901a\u9053\u5206\u91cf import PIL.Image im = PIL.Image.open('/img/jp.jpg') _, g, b = im.split() # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 r \u901a\u9053\u5206\u91cf, \u6ce8\u610f mode \u503c\u4e3a 'L' r = PIL.Image.new('L', im.size, color=255) im = PIL.Image.merge('RGB', (r, g, b)) im.show() \u554a, \u6211\u7684\u773c\u775b","title":"\u4ea4\u6362\u901a\u9053"},{"location":"content/pil/channel/#_3","text":"\u4f5c\u8005\u5728\u529e\u7406\u793e\u4fdd\u5361\u7684\u65f6\u5019, \u8981\u6c42\u7535\u5b50\u8bc1\u4ef6\u7167\u4e3a\u767d\u8272\u80cc\u666f\u5e55\u5e03, \u4f46\u4f5c\u8005\u53ea\u6709\u84dd\u8272\u80cc\u666f\u5e55\u5e03\u7684\u7535\u5b50\u7167. \u4f5c\u4e3a\u4e00\u4e2a\u61d2\u4eba, \u65e2\u4e0d\u60f3\u53bb\u91cd\u65b0\u62cd\u7167\u53c8\u4e0d\u60f3\u4e0b\u8f7dphotoshop, \u6240\u4ee5\u5c31\u7406\u6240\u5f53\u7136\u7684\u5bf9\u7167\u7247\u7684\u84dd\u8272\u901a\u9053\u52a8\u8d77\u4e86\u624b\u811a.","title":"\u5b66\u4e60\u901a\u9053\u7684\u73b0\u5b9e\u610f\u4e49"},{"location":"content/pil/complementary_and_invert_color/","text":"\u8865\u8272 import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) im_converted_mat = np.zeros_like(im_mat, dtype=np.uint8) for x in range(im_mat.shape[0]): for y in range(im_mat.shape[1]): # \u8865\u8272\u7684\u516c\u5f0f\u662f max(r, g, b) + min(r, g, b) - [r, g, b] maxrgb = im_mat[x][y].max() minrgb = im_mat[x][y].min() im_converted_mat[x][y] = (int(maxrgb) + int(minrgb)) * np.ones(3) - im_mat[x][y] im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u53cd\u8272 import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) # \u53cd\u8272\u7684\u516c\u5f0f\u662f [255, 255, 255] - [r, g, b] im_converted_mat = np.ones_like(im_mat) * 255 - im_mat im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u8865\u8272\u548c\u53cd\u8272"},{"location":"content/pil/complementary_and_invert_color/#_1","text":"import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) im_converted_mat = np.zeros_like(im_mat, dtype=np.uint8) for x in range(im_mat.shape[0]): for y in range(im_mat.shape[1]): # \u8865\u8272\u7684\u516c\u5f0f\u662f max(r, g, b) + min(r, g, b) - [r, g, b] maxrgb = im_mat[x][y].max() minrgb = im_mat[x][y].min() im_converted_mat[x][y] = (int(maxrgb) + int(minrgb)) * np.ones(3) - im_mat[x][y] im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u8865\u8272"},{"location":"content/pil/complementary_and_invert_color/#_2","text":"import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) # \u53cd\u8272\u7684\u516c\u5f0f\u662f [255, 255, 255] - [r, g, b] im_converted_mat = np.ones_like(im_mat) * 255 - im_mat im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u53cd\u8272"},{"location":"content/pil/contrast/","text":"\u5e42\u6b21\u53d8\u6362 \u5047\u8bbe\u539f\u56fe\u50cf\u4e3a r, \u76ee\u6807\u56fe\u50cf\u4e3a s, \u8f6c\u6362\u51fd\u6570\u4e3a T, \u53ef\u4ee5\u4f7f\u7528\u5f62\u5f0f\u5982\u4e0b\u7684\u8868\u8fbe\u5f0f\u8868\u793a: $$ s = T(r) $$ \u5e42\u6b21\u53d8\u6362\u8f6c\u6362\u51fd\u6570\u7684\u57fa\u672c\u5f62\u5f0f\u4e3a $s = cr^\\lambda$, \u5176\u4e2d $c$ \u548c $\\lambda$ \u4e3a\u6b63\u5e38\u6570. \u5e42\u6b21\u53d8\u6362\u662f\u5e38\u7528\u7684\u56fe\u50cf \u5bf9\u6bd4\u5ea6\u8c03\u6574 \u7b97\u6cd5\u4e2d\u7684\u4e00\u79cd. \u7531\u56fe\u53ef\u4ee5\u770b\u51fa, \u5f53 $\\lambda < 1$ \u65f6, \u5e42\u6b21\u53d8\u6362\u5c06\u7a84\u5e26\u8f93\u5165\u6697\u503c\u6620\u5c04\u5230\u5bbd\u5e26\u8f93\u51fa, \u5c06\u5bbd\u5e26\u8f93\u5165\u4eae\u503c\u6620\u5c04\u5230\u7a84\u5e26\u8f93\u51fa\u503c; \u5f53 $\\lambda > 1$ \u65f6, \u5e42\u6b21\u53d8\u6362\u5c06\u5bbd\u5e26\u8f93\u5165\u6697\u503c\u6620\u5c04\u5230\u7a84\u5e26\u8f93\u51fa\u503c, \u5c06\u7a84\u5e26\u8f93\u5165\u4eae\u503c\u6620\u5c04\u5230\u5bbd\u5e26\u8f93\u51fa\u503c; \u5f53 $\\lambda = 1$ \u65f6, \u5373\u4e3a\u6b63\u6bd4\u53d8\u6362. \u4ee3\u7801\u5b9e\u73b0 \u5f53\u539f\u56fe\u50cf\u5728\u6697\u5904\u7ec6\u8282\u8f83\u591a, \u5e76\u4e14\u5e0c\u671b\u5ffd\u7565\u4e00\u90e8\u5206\u4eae\u5904\u7ec6\u8282\u65f6, \u53ef\u53d6 $c = 1, \\lambda = 0.67$. import PIL.Image import scipy.misc import numpy as np def convert_3d(r): s = np.empty(r.shape, dtype=np.uint8) for j in range(r.shape[0]): for i in range(r.shape[1]): s[j][i] = (r[j][i] / 255) ** 0.67 * 255 return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u6548\u679c\u5c55\u793a \u539f\u56fe\u6574\u4f53\u8f83\u4e3a\u660f\u6697, \u4e14\u5728\u56fe\u50cf\u6697\u5904\u6709\u8f83\u591a\u7ec6\u8282 \u7ecf\u8fc7 $c = 1, \\lambda = 0.67$ \u5e42\u6b21\u53d8\u6362\u540e, \u6697\u5904\u7684\u7ec6\u8282\u6e05\u6670\u7684\u5c55\u73b0 \u539f\u56fe\u6574\u4f53\u8f83\u4e3a\u660e\u4eae, \u4e14\u5728\u56fe\u50cf\u4eae\u5904\u6709\u8f83\u591a\u7ec6\u8282 \u7ecf\u8fc7 $c = 1, \\lambda = 1.5$ \u5e42\u6b21\u53d8\u6362\u540e, \u4eae\u5904\u7684\u7ec6\u8282\u6e05\u6670\u7684\u5c55\u73b0(\u89c2\u5bdf\u56fe\u50cf\u5de6\u4fa7\u7684\u82b1\u4e0e\u5973\u5b69\u53d1\u68a2)","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u5bf9\u6bd4\u589e\u5f3a"},{"location":"content/pil/contrast/#_1","text":"\u5047\u8bbe\u539f\u56fe\u50cf\u4e3a r, \u76ee\u6807\u56fe\u50cf\u4e3a s, \u8f6c\u6362\u51fd\u6570\u4e3a T, \u53ef\u4ee5\u4f7f\u7528\u5f62\u5f0f\u5982\u4e0b\u7684\u8868\u8fbe\u5f0f\u8868\u793a: $$ s = T(r) $$ \u5e42\u6b21\u53d8\u6362\u8f6c\u6362\u51fd\u6570\u7684\u57fa\u672c\u5f62\u5f0f\u4e3a $s = cr^\\lambda$, \u5176\u4e2d $c$ \u548c $\\lambda$ \u4e3a\u6b63\u5e38\u6570. \u5e42\u6b21\u53d8\u6362\u662f\u5e38\u7528\u7684\u56fe\u50cf \u5bf9\u6bd4\u5ea6\u8c03\u6574 \u7b97\u6cd5\u4e2d\u7684\u4e00\u79cd. \u7531\u56fe\u53ef\u4ee5\u770b\u51fa, \u5f53 $\\lambda < 1$ \u65f6, \u5e42\u6b21\u53d8\u6362\u5c06\u7a84\u5e26\u8f93\u5165\u6697\u503c\u6620\u5c04\u5230\u5bbd\u5e26\u8f93\u51fa, \u5c06\u5bbd\u5e26\u8f93\u5165\u4eae\u503c\u6620\u5c04\u5230\u7a84\u5e26\u8f93\u51fa\u503c; \u5f53 $\\lambda > 1$ \u65f6, \u5e42\u6b21\u53d8\u6362\u5c06\u5bbd\u5e26\u8f93\u5165\u6697\u503c\u6620\u5c04\u5230\u7a84\u5e26\u8f93\u51fa\u503c, \u5c06\u7a84\u5e26\u8f93\u5165\u4eae\u503c\u6620\u5c04\u5230\u5bbd\u5e26\u8f93\u51fa\u503c; \u5f53 $\\lambda = 1$ \u65f6, \u5373\u4e3a\u6b63\u6bd4\u53d8\u6362.","title":"\u5e42\u6b21\u53d8\u6362"},{"location":"content/pil/contrast/#_2","text":"\u5f53\u539f\u56fe\u50cf\u5728\u6697\u5904\u7ec6\u8282\u8f83\u591a, \u5e76\u4e14\u5e0c\u671b\u5ffd\u7565\u4e00\u90e8\u5206\u4eae\u5904\u7ec6\u8282\u65f6, \u53ef\u53d6 $c = 1, \\lambda = 0.67$. import PIL.Image import scipy.misc import numpy as np def convert_3d(r): s = np.empty(r.shape, dtype=np.uint8) for j in range(r.shape[0]): for i in range(r.shape[1]): s[j][i] = (r[j][i] / 255) ** 0.67 * 255 return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/contrast/#_3","text":"\u539f\u56fe\u6574\u4f53\u8f83\u4e3a\u660f\u6697, \u4e14\u5728\u56fe\u50cf\u6697\u5904\u6709\u8f83\u591a\u7ec6\u8282 \u7ecf\u8fc7 $c = 1, \\lambda = 0.67$ \u5e42\u6b21\u53d8\u6362\u540e, \u6697\u5904\u7684\u7ec6\u8282\u6e05\u6670\u7684\u5c55\u73b0 \u539f\u56fe\u6574\u4f53\u8f83\u4e3a\u660e\u4eae, \u4e14\u5728\u56fe\u50cf\u4eae\u5904\u6709\u8f83\u591a\u7ec6\u8282 \u7ecf\u8fc7 $c = 1, \\lambda = 1.5$ \u5e42\u6b21\u53d8\u6362\u540e, \u4eae\u5904\u7684\u7ec6\u8282\u6e05\u6670\u7684\u5c55\u73b0(\u89c2\u5bdf\u56fe\u50cf\u5de6\u4fa7\u7684\u82b1\u4e0e\u5973\u5b69\u53d1\u68a2)","title":"\u6548\u679c\u5c55\u793a"},{"location":"content/pil/contrast_tensile/","text":"\u5bf9\u6bd4\u62c9\u4f38 \u4f4e\u5bf9\u6bd4\u5ea6\u7684\u56fe\u50cf\u53ef\u7531\u7167\u660e\u4e0d\u8db3, \u6210\u50cf\u4f20\u611f\u5668\u52a8\u6001\u8303\u56f4\u592a\u5c0f, \u751a\u81f3\u5728\u56fe\u50cf\u83b7\u53d6\u8fc7\u7a0b\u4e2d\u900f\u955c\u5149\u5708\u8bbe\u7f6e\u9519\u8bef\u5f15\u8d77. \u5bf9\u6bd4\u62c9\u4f38\u7684\u601d\u60f3\u662f\u63d0\u9ad8\u56fe\u50cf\u5904\u7406\u65f6\u7070\u5ea6\u7ea7\u7684\u52a8\u6001\u8303\u56f4. \u8f6c\u6362\u51fd\u6570 $$ T(x) = (x - r_{min})(r_{max} - r_{min}) \\cdot 255 $$ \u8be5\u51fd\u6570\u5c06\u539f\u56fe\u50cf $[r_{min}, r_{max}]$ \u7684\u50cf\u7d20\u53d6\u503c\u8303\u56f4\u62c9\u4f38\u81f3 $[0, 255]$. \u4ee3\u7801\u5b9e\u73b0 import PIL.Image import scipy.misc import numpy as np def convert_2d(r): rmin = np.min(r) rmax = np.max(r) if rmin == rmax: return r s = np.empty(r.shape, dtype=np.uint8) for j in range(r.shape[0]): for i in range(r.shape[1]): s[j][i] = (r[j][i] - rmin) / (rmax - rmin) * 255 return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u5bf9\u6bd4\u62c9\u4f38"},{"location":"content/pil/contrast_tensile/#_1","text":"\u4f4e\u5bf9\u6bd4\u5ea6\u7684\u56fe\u50cf\u53ef\u7531\u7167\u660e\u4e0d\u8db3, \u6210\u50cf\u4f20\u611f\u5668\u52a8\u6001\u8303\u56f4\u592a\u5c0f, \u751a\u81f3\u5728\u56fe\u50cf\u83b7\u53d6\u8fc7\u7a0b\u4e2d\u900f\u955c\u5149\u5708\u8bbe\u7f6e\u9519\u8bef\u5f15\u8d77. \u5bf9\u6bd4\u62c9\u4f38\u7684\u601d\u60f3\u662f\u63d0\u9ad8\u56fe\u50cf\u5904\u7406\u65f6\u7070\u5ea6\u7ea7\u7684\u52a8\u6001\u8303\u56f4.","title":"\u5bf9\u6bd4\u62c9\u4f38"},{"location":"content/pil/contrast_tensile/#_2","text":"$$ T(x) = (x - r_{min})(r_{max} - r_{min}) \\cdot 255 $$ \u8be5\u51fd\u6570\u5c06\u539f\u56fe\u50cf $[r_{min}, r_{max}]$ \u7684\u50cf\u7d20\u53d6\u503c\u8303\u56f4\u62c9\u4f38\u81f3 $[0, 255]$.","title":"\u8f6c\u6362\u51fd\u6570"},{"location":"content/pil/contrast_tensile/#_3","text":"import PIL.Image import scipy.misc import numpy as np def convert_2d(r): rmin = np.min(r) rmax = np.max(r) if rmin == rmax: return r s = np.empty(r.shape, dtype=np.uint8) for j in range(r.shape[0]): for i in range(r.shape[1]): s[j][i] = (r[j][i] - rmin) / (rmax - rmin) * 255 return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/frequency_filter/","text":"\u5085\u91cc\u53f6\u53d8\u6362 \u5085\u91cc\u53f6\u53d8\u6362(Fourier transform)\u662f\u4e00\u79cd\u7ebf\u6027\u7684\u79ef\u5206\u53d8\u6362, \u5e38\u5728\u5c06\u4fe1\u53f7\u5728\u65f6\u57df(\u6216\u7a7a\u57df)\u548c\u9891\u57df\u4e4b\u95f4\u53d8\u6362\u65f6\u4f7f\u7528, \u5728\u7269\u7406\u5b66\u548c\u5de5\u7a0b\u5b66\u4e2d\u6709\u8bb8\u591a\u5e94\u7528. \u56e0\u5176\u57fa\u672c\u601d\u60f3\u9996\u5148\u7531\u6cd5\u56fd\u5b66\u8005\u7ea6\u745f\u592b\u00b7\u5085\u91cc\u53f6\u7cfb\u7edf\u5730\u63d0\u51fa, \u6240\u4ee5\u4ee5\u5176\u540d\u5b57\u6765\u547d\u540d\u4ee5\u793a\u7eaa\u5ff5. \u7ecf\u8fc7\u5085\u91cc\u53f6\u53d8\u6362\u800c\u751f\u6210\u7684\u51fd\u6570 $\\hat f$ \u79f0\u4f5c\u539f\u51fd\u6570 $f$ \u7684\u5085\u91cc\u53f6\u53d8\u6362\u3001\u4ea6\u6216\u5176\u9891\u8c31. \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b, \u5085\u91cc\u53f6\u53d8\u6362\u662f\u53ef\u9006\u7684, \u5373\u53ef\u901a\u8fc7 $\\hat f$ \u5f97\u5230\u5176\u539f\u51fd\u6570 $f$ .\u901a\u5e38\u60c5\u51b5\u4e0b, $f$ \u662f\u5b9e\u6570\u51fd\u6570, \u800c $\\hat f$ \u5219\u662f\u590d\u6570\u51fd\u6570, \u7528\u4e00\u4e2a\u590d\u6570\u6765\u8868\u793a\u632f\u5e45\u548c\u76f8\u4f4d. \u5085\u91cc\u53f6\u53d8\u6362\u5c06\u51fd\u6570\u7684\u65f6\u57df(\u7ea2\u8272)\u4e0e\u9891\u57df(\u84dd\u8272)\u76f8\u5173\u8054. \u9891\u8c31\u4e2d\u7684\u4e0d\u540c\u6210\u5206\u9891\u7387\u5728\u9891\u57df\u4e2d\u4ee5\u5cf0\u503c\u5f62\u5f0f\u8868\u793a: \u9891\u57df\u4e2d\u7684\u6ee4\u6ce2\u57fa\u7840 \u5c06 M * N \u5927\u5c0f\u7684\u56fe\u50cf\u6269\u5c55\u5230 2M * 2N, \u591a\u4f59\u50cf\u7d20\u4ee5 0 \u586b\u5145 \u7528 $(-1)^{M+N}$ \u4e58\u4ee5\u8f93\u5165\u56fe\u50cf\u8fdb\u884c\u4e2d\u5fc3\u53d8\u6362 \u8ba1\u7b97\u56fe\u50cf\u7684 DFT, \u5373 $F(u, v)$ \u7528\u6ee4\u6ce2\u5668\u51fd\u6570 $H(u, v)$ \u4e58\u4ee5 $F(u, v)$ \u8ba1\u7b97 4 \u4e2d\u7ed3\u679c\u7684\u53cd DFT \u5f97\u5230 5 \u4e2d\u7ed3\u679c\u7684\u5b9e\u90e8 \u7528 $(-1)^{M+N}$ \u4e58\u4ee5 6 \u4e2d\u7684\u7ed3\u679c \u63d0\u53d6 7 \u4e2d\u7ed3\u679c\u5de6\u4e0a\u8c61\u9650 $M * N$ \u5927\u5c0f\u7684\u533a\u57df $F(u, v)$ \u7684\u4e2d\u5fc3\u90e8\u5206\u4e3a\u4f4e\u9891\u4fe1\u53f7, \u8fb9\u7f18\u90e8\u5206\u4e3a\u9ad8\u9891\u4fe1\u53f7. \u9ad8\u9891\u4fe1\u53f7\u4fdd\u5b58\u4e86\u56fe\u50cf\u7684 \u7ec6\u8282 . $H(u, v)$ \u4e5f\u88ab\u79f0\u4e3a\u6ee4\u6ce2\u5668. \u8f93\u51fa\u56fe\u50cf\u7684\u5085\u91cc\u53f6\u53d8\u6362\u4e3a: $$ G(u, v) = F(u, v)H(u, v) $$ $H$ \u4e0e $F$ \u7684\u76f8\u4e58\u6d89\u53ca\u4e8c\u7ef4\u51fd\u6570, \u5e76\u5728\u9010\u5143\u7d20\u7684\u57fa\u7840\u4e0a\u5b9a\u4e49. \u5373: $H$ \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e58\u4ee5 $F$ \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20, $H$ \u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e58\u4ee5 $F$ \u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20, \u4ee5\u6b64\u7c7b\u63a8. \u76f8\u5173\u4ee3\u7801 # \u56fe\u50cf\u7684\u5085\u91cc\u53f6\u53d8\u6362\u4e0e\u53cd\u53d8\u6362 import numpy as np import scipy.misc import PIL.Image import matplotlib.pyplot as plt im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) rows, cols = im_mat.shape # \u6269\u5c55 M * N \u56fe\u50cf\u5230 2M * 2N im_mat_ext = np.zeros((rows * 2, cols * 2)) for i in range(rows): for j in range(cols): im_mat_ext[i][j] = im_mat[i][j] # \u5085\u91cc\u53f6\u53d8\u6362 im_mat_fu = np.fft.fft2(im_mat_ext) # \u5c06\u4f4e\u9891\u4fe1\u53f7\u79fb\u690d\u4e2d\u95f4, \u7b49\u6548\u4e8e\u5728\u65f6\u57df\u4e0a\u5bf9 f(x, y) \u4e58\u4ee5 (-1)^(m + n) im_mat_fu = np.fft.fftshift(im_mat_fu) # \u663e\u793a\u539f\u56fe plt.subplot(121) plt.imshow(im_mat, 'gray') plt.title('original') plt.subplot(122) # \u5728\u663e\u793a\u9891\u7387\u8c31\u4e4b\u524d, \u5bf9\u9891\u7387\u8c31\u53d6\u5b9e\u90e8\u5e76\u8fdb\u884c\u5bf9\u6570\u53d8\u6362 plt.imshow(np.log(np.abs(im_mat_fu)), 'gray') plt.title('fourier') plt.show() # \u5085\u91cc\u53f6\u53cd\u53d8\u6362 im_converted_mat = np.fft.ifft2(np.fft.ifftshift(im_mat_fu)) # \u5f97\u5230\u5085\u91cc\u53f6\u53cd\u53d8\u6362\u7ed3\u679c\u7684\u5b9e\u90e8 im_converted_mat = np.abs(im_converted_mat) # \u63d0\u53d6\u5de6\u4e0a\u8c61\u9650 im_converted_mat = im_converted_mat[0:rows, 0:cols] # \u663e\u793a\u56fe\u50cf im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u56fe\u50cf\u4e0e\u5176\u9891\u7387\u8c31\u56fe\u50cf:","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u9891\u57df\u6ee4\u6ce2\u57fa\u7840"},{"location":"content/pil/frequency_filter/#_1","text":"\u5085\u91cc\u53f6\u53d8\u6362(Fourier transform)\u662f\u4e00\u79cd\u7ebf\u6027\u7684\u79ef\u5206\u53d8\u6362, \u5e38\u5728\u5c06\u4fe1\u53f7\u5728\u65f6\u57df(\u6216\u7a7a\u57df)\u548c\u9891\u57df\u4e4b\u95f4\u53d8\u6362\u65f6\u4f7f\u7528, \u5728\u7269\u7406\u5b66\u548c\u5de5\u7a0b\u5b66\u4e2d\u6709\u8bb8\u591a\u5e94\u7528. \u56e0\u5176\u57fa\u672c\u601d\u60f3\u9996\u5148\u7531\u6cd5\u56fd\u5b66\u8005\u7ea6\u745f\u592b\u00b7\u5085\u91cc\u53f6\u7cfb\u7edf\u5730\u63d0\u51fa, \u6240\u4ee5\u4ee5\u5176\u540d\u5b57\u6765\u547d\u540d\u4ee5\u793a\u7eaa\u5ff5. \u7ecf\u8fc7\u5085\u91cc\u53f6\u53d8\u6362\u800c\u751f\u6210\u7684\u51fd\u6570 $\\hat f$ \u79f0\u4f5c\u539f\u51fd\u6570 $f$ \u7684\u5085\u91cc\u53f6\u53d8\u6362\u3001\u4ea6\u6216\u5176\u9891\u8c31. \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b, \u5085\u91cc\u53f6\u53d8\u6362\u662f\u53ef\u9006\u7684, \u5373\u53ef\u901a\u8fc7 $\\hat f$ \u5f97\u5230\u5176\u539f\u51fd\u6570 $f$ .\u901a\u5e38\u60c5\u51b5\u4e0b, $f$ \u662f\u5b9e\u6570\u51fd\u6570, \u800c $\\hat f$ \u5219\u662f\u590d\u6570\u51fd\u6570, \u7528\u4e00\u4e2a\u590d\u6570\u6765\u8868\u793a\u632f\u5e45\u548c\u76f8\u4f4d. \u5085\u91cc\u53f6\u53d8\u6362\u5c06\u51fd\u6570\u7684\u65f6\u57df(\u7ea2\u8272)\u4e0e\u9891\u57df(\u84dd\u8272)\u76f8\u5173\u8054. \u9891\u8c31\u4e2d\u7684\u4e0d\u540c\u6210\u5206\u9891\u7387\u5728\u9891\u57df\u4e2d\u4ee5\u5cf0\u503c\u5f62\u5f0f\u8868\u793a:","title":"\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"content/pil/frequency_filter/#_2","text":"\u5c06 M * N \u5927\u5c0f\u7684\u56fe\u50cf\u6269\u5c55\u5230 2M * 2N, \u591a\u4f59\u50cf\u7d20\u4ee5 0 \u586b\u5145 \u7528 $(-1)^{M+N}$ \u4e58\u4ee5\u8f93\u5165\u56fe\u50cf\u8fdb\u884c\u4e2d\u5fc3\u53d8\u6362 \u8ba1\u7b97\u56fe\u50cf\u7684 DFT, \u5373 $F(u, v)$ \u7528\u6ee4\u6ce2\u5668\u51fd\u6570 $H(u, v)$ \u4e58\u4ee5 $F(u, v)$ \u8ba1\u7b97 4 \u4e2d\u7ed3\u679c\u7684\u53cd DFT \u5f97\u5230 5 \u4e2d\u7ed3\u679c\u7684\u5b9e\u90e8 \u7528 $(-1)^{M+N}$ \u4e58\u4ee5 6 \u4e2d\u7684\u7ed3\u679c \u63d0\u53d6 7 \u4e2d\u7ed3\u679c\u5de6\u4e0a\u8c61\u9650 $M * N$ \u5927\u5c0f\u7684\u533a\u57df $F(u, v)$ \u7684\u4e2d\u5fc3\u90e8\u5206\u4e3a\u4f4e\u9891\u4fe1\u53f7, \u8fb9\u7f18\u90e8\u5206\u4e3a\u9ad8\u9891\u4fe1\u53f7. \u9ad8\u9891\u4fe1\u53f7\u4fdd\u5b58\u4e86\u56fe\u50cf\u7684 \u7ec6\u8282 . $H(u, v)$ \u4e5f\u88ab\u79f0\u4e3a\u6ee4\u6ce2\u5668. \u8f93\u51fa\u56fe\u50cf\u7684\u5085\u91cc\u53f6\u53d8\u6362\u4e3a: $$ G(u, v) = F(u, v)H(u, v) $$ $H$ \u4e0e $F$ \u7684\u76f8\u4e58\u6d89\u53ca\u4e8c\u7ef4\u51fd\u6570, \u5e76\u5728\u9010\u5143\u7d20\u7684\u57fa\u7840\u4e0a\u5b9a\u4e49. \u5373: $H$ \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e58\u4ee5 $F$ \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20, $H$ \u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e58\u4ee5 $F$ \u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20, \u4ee5\u6b64\u7c7b\u63a8.","title":"\u9891\u57df\u4e2d\u7684\u6ee4\u6ce2\u57fa\u7840"},{"location":"content/pil/frequency_filter/#_3","text":"# \u56fe\u50cf\u7684\u5085\u91cc\u53f6\u53d8\u6362\u4e0e\u53cd\u53d8\u6362 import numpy as np import scipy.misc import PIL.Image import matplotlib.pyplot as plt im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) rows, cols = im_mat.shape # \u6269\u5c55 M * N \u56fe\u50cf\u5230 2M * 2N im_mat_ext = np.zeros((rows * 2, cols * 2)) for i in range(rows): for j in range(cols): im_mat_ext[i][j] = im_mat[i][j] # \u5085\u91cc\u53f6\u53d8\u6362 im_mat_fu = np.fft.fft2(im_mat_ext) # \u5c06\u4f4e\u9891\u4fe1\u53f7\u79fb\u690d\u4e2d\u95f4, \u7b49\u6548\u4e8e\u5728\u65f6\u57df\u4e0a\u5bf9 f(x, y) \u4e58\u4ee5 (-1)^(m + n) im_mat_fu = np.fft.fftshift(im_mat_fu) # \u663e\u793a\u539f\u56fe plt.subplot(121) plt.imshow(im_mat, 'gray') plt.title('original') plt.subplot(122) # \u5728\u663e\u793a\u9891\u7387\u8c31\u4e4b\u524d, \u5bf9\u9891\u7387\u8c31\u53d6\u5b9e\u90e8\u5e76\u8fdb\u884c\u5bf9\u6570\u53d8\u6362 plt.imshow(np.log(np.abs(im_mat_fu)), 'gray') plt.title('fourier') plt.show() # \u5085\u91cc\u53f6\u53cd\u53d8\u6362 im_converted_mat = np.fft.ifft2(np.fft.ifftshift(im_mat_fu)) # \u5f97\u5230\u5085\u91cc\u53f6\u53cd\u53d8\u6362\u7ed3\u679c\u7684\u5b9e\u90e8 im_converted_mat = np.abs(im_converted_mat) # \u63d0\u53d6\u5de6\u4e0a\u8c61\u9650 im_converted_mat = im_converted_mat[0:rows, 0:cols] # \u663e\u793a\u56fe\u50cf im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u56fe\u50cf\u4e0e\u5176\u9891\u7387\u8c31\u56fe\u50cf:","title":"\u76f8\u5173\u4ee3\u7801"},{"location":"content/pil/frequency_filter_br_bp/","text":"\u5e26\u963b\u548c\u5e26\u901a\u6ee4\u6ce2 \u5e26\u963b\u6ee4\u6ce2\u5668(BR)\u4f20\u9012\u51fd\u6570: \\ \u7406\u60f3 \u5df4\u7279\u6c83\u65af \u9ad8\u65af H $$H(u, v) = \\begin{cases} 0 & D_0 - \\frac{W}{2} \\le D \\le D_0 + \\frac{W}{2} \\\\ 1 & \\text else \\end{cases}$$ $$H(u, v) = \\frac{1}{1 + [\\frac{DW}{D^2 - D_0^2}]^{2n}}$$ $$H(u, v) = 1 - e^-[\\frac{D^2 - D_0^2}{DW}]^2$$ \u5176\u4e2d $W$ \u662f\u5e26\u5bbd, $D$ \u662f $D(u, v)$ \u8ddd\u79bb\u6ee4\u6ce2\u4e2d\u5fc3\u7684\u8ddd\u79bb, $D_0$ \u662f\u622a\u6b62\u9891\u7387, $n$ \u662f\u5df4\u7279\u6c83\u65af\u6ee4\u6ce2\u5668\u7684\u9636\u6570. \u4e00\u4e2a\u5e26\u901a\u6ee4\u6ce2\u5668(BP) \u7684\u4f20\u9012\u51fd\u6570\u662f $$ H_{BP}(u, v) = 1 - H_{BR}(u, v) $$","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u9891\u57df\u6ee4\u6ce2-\u5e26\u963b\u548c\u5e26\u901a\u6ee4\u6ce2"},{"location":"content/pil/frequency_filter_br_bp/#_1","text":"\u5e26\u963b\u6ee4\u6ce2\u5668(BR)\u4f20\u9012\u51fd\u6570: \\ \u7406\u60f3 \u5df4\u7279\u6c83\u65af \u9ad8\u65af H $$H(u, v) = \\begin{cases} 0 & D_0 - \\frac{W}{2} \\le D \\le D_0 + \\frac{W}{2} \\\\ 1 & \\text else \\end{cases}$$ $$H(u, v) = \\frac{1}{1 + [\\frac{DW}{D^2 - D_0^2}]^{2n}}$$ $$H(u, v) = 1 - e^-[\\frac{D^2 - D_0^2}{DW}]^2$$ \u5176\u4e2d $W$ \u662f\u5e26\u5bbd, $D$ \u662f $D(u, v)$ \u8ddd\u79bb\u6ee4\u6ce2\u4e2d\u5fc3\u7684\u8ddd\u79bb, $D_0$ \u662f\u622a\u6b62\u9891\u7387, $n$ \u662f\u5df4\u7279\u6c83\u65af\u6ee4\u6ce2\u5668\u7684\u9636\u6570. \u4e00\u4e2a\u5e26\u901a\u6ee4\u6ce2\u5668(BP) \u7684\u4f20\u9012\u51fd\u6570\u662f $$ H_{BP}(u, v) = 1 - H_{BR}(u, v) $$","title":"\u5e26\u963b\u548c\u5e26\u901a\u6ee4\u6ce2"},{"location":"content/pil/frequency_filter_hpf/","text":"\u9ad8\u901a\u6ee4\u6ce2 \u5728 \u4f4e\u901a\u6ee4\u6ce2 \u4e2d\u6211\u4eec\u8bf4\u660e\u4e86\u901a\u8fc7\u8870\u51cf\u56fe\u50cf\u5085\u91cc\u53f6\u53d8\u6362\u7684\u9ad8\u9891\u4fe1\u53f7\u53ef\u4ee5\u5e73\u6ed1\u56fe\u50cf. \u56e0\u4e3a\u8fb9\u7f18\u548c\u5176\u4ed6\u7070\u5ea6\u6025\u5267\u53d8\u5316\u7684\u533a\u57df\u4e0e\u9ad8\u9891\u5206\u91cf\u6709\u5173, \u6240\u4ee5\u56fe\u50cf\u7684\u9510\u5316\u53ef\u4ee5\u901a\u8fc7\u5728\u9891\u7387\u57df\u7684\u9ad8\u901a\u6ee4\u6ce2\u5b9e\u73b0. \u4e00\u4e2a\u9ad8\u901a\u6ee4\u6ce2\u5668\u662f\u4ece\u7ed9\u5b9a\u7684\u4f4e\u901a\u6ee4\u6ce2\u5668\u7528\u4e0b\u5f0f\u5f97\u5230: $$ H_{HP}(u, v) = 1 - H_{LP}(u, v) $$ \u5176\u4e2d $H_{LP}(u, v)$ \u662f\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u4f20\u9012\u51fd\u6570. \u540c\u6837\u7684, \u9ad8\u901a\u6ee4\u6ce2\u5668\u4e5f\u6709\u7406\u60f3(IHPF), \u5df4\u7279\u6c83\u65af(BHPF)\u548c\u9ad8\u65af\u9ad8\u901a\u6ee4\u6ce2\u5668(GHPF). \u4e09\u79cd\u9ad8\u901a\u6ee4\u6ce2\u5668\u4f20\u9012\u51fd\u6570\u5982\u4e0b\u8868\u6240\u793a: \\ \u7406\u60f3 \u5df4\u7279\u6c83\u65af \u9ad8\u65af H $$H(u, v) = \\begin{cases} 0 & D(u, v) \\le D_0 \\\\ 1 & D(u, v) > D_0 \\\\ \\end{cases}$$ $$H(u, v) = \\frac{1}{1 + [D_0 / D(u, v)]^{2n}}$$ $$H(u, v) = 1 - e^{-D^2(u, v) / 2D_0^2}$$ \u5b9e\u9a8c\u7ed3\u679c \u4f7f\u7528 $n=2$ \u9636, \u622a\u6b62\u9891\u7387\u4e3a 20 \u7684\u5df4\u7279\u6c83\u65af\u9ad8\u901a\u6ee4\u6ce2\u5668\u5904\u7406\u540e\u7684\u7ed3\u679c\u5982\u4e0b: # \u5b9e\u9a8c\u4ee3\u7801 import numpy as np import PIL.Image import scipy.misc def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 20 d0 = 20 # 2 \u9636\u5df4\u7279\u6c83\u65af n = 2 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 if duv == 0: h[u][v] = 0 else: h[u][v] = 1 / ((1 + (d0 / duv)) ** (2*n)) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u9891\u57df\u6ee4\u6ce2-\u9ad8\u901a\u6ee4\u6ce2"},{"location":"content/pil/frequency_filter_hpf/#_1","text":"\u5728 \u4f4e\u901a\u6ee4\u6ce2 \u4e2d\u6211\u4eec\u8bf4\u660e\u4e86\u901a\u8fc7\u8870\u51cf\u56fe\u50cf\u5085\u91cc\u53f6\u53d8\u6362\u7684\u9ad8\u9891\u4fe1\u53f7\u53ef\u4ee5\u5e73\u6ed1\u56fe\u50cf. \u56e0\u4e3a\u8fb9\u7f18\u548c\u5176\u4ed6\u7070\u5ea6\u6025\u5267\u53d8\u5316\u7684\u533a\u57df\u4e0e\u9ad8\u9891\u5206\u91cf\u6709\u5173, \u6240\u4ee5\u56fe\u50cf\u7684\u9510\u5316\u53ef\u4ee5\u901a\u8fc7\u5728\u9891\u7387\u57df\u7684\u9ad8\u901a\u6ee4\u6ce2\u5b9e\u73b0. \u4e00\u4e2a\u9ad8\u901a\u6ee4\u6ce2\u5668\u662f\u4ece\u7ed9\u5b9a\u7684\u4f4e\u901a\u6ee4\u6ce2\u5668\u7528\u4e0b\u5f0f\u5f97\u5230: $$ H_{HP}(u, v) = 1 - H_{LP}(u, v) $$ \u5176\u4e2d $H_{LP}(u, v)$ \u662f\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u4f20\u9012\u51fd\u6570. \u540c\u6837\u7684, \u9ad8\u901a\u6ee4\u6ce2\u5668\u4e5f\u6709\u7406\u60f3(IHPF), \u5df4\u7279\u6c83\u65af(BHPF)\u548c\u9ad8\u65af\u9ad8\u901a\u6ee4\u6ce2\u5668(GHPF). \u4e09\u79cd\u9ad8\u901a\u6ee4\u6ce2\u5668\u4f20\u9012\u51fd\u6570\u5982\u4e0b\u8868\u6240\u793a: \\ \u7406\u60f3 \u5df4\u7279\u6c83\u65af \u9ad8\u65af H $$H(u, v) = \\begin{cases} 0 & D(u, v) \\le D_0 \\\\ 1 & D(u, v) > D_0 \\\\ \\end{cases}$$ $$H(u, v) = \\frac{1}{1 + [D_0 / D(u, v)]^{2n}}$$ $$H(u, v) = 1 - e^{-D^2(u, v) / 2D_0^2}$$","title":"\u9ad8\u901a\u6ee4\u6ce2"},{"location":"content/pil/frequency_filter_hpf/#_2","text":"\u4f7f\u7528 $n=2$ \u9636, \u622a\u6b62\u9891\u7387\u4e3a 20 \u7684\u5df4\u7279\u6c83\u65af\u9ad8\u901a\u6ee4\u6ce2\u5668\u5904\u7406\u540e\u7684\u7ed3\u679c\u5982\u4e0b: # \u5b9e\u9a8c\u4ee3\u7801 import numpy as np import PIL.Image import scipy.misc def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 20 d0 = 20 # 2 \u9636\u5df4\u7279\u6c83\u65af n = 2 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 if duv == 0: h[u][v] = 0 else: h[u][v] = 1 / ((1 + (d0 / duv)) ** (2*n)) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u5b9e\u9a8c\u7ed3\u679c"},{"location":"content/pil/frequency_filter_lpf/","text":"\u4f4e\u901a\u6ee4\u6ce2 \u4e00\u5e45\u56fe\u50cf\u7684\u8fb9\u7f18\u548c\u5176\u4ed6\u5c16\u9510\u7684\u7070\u5ea6\u8f6c\u6362\u5bf9\u5176\u5085\u91cc\u53f6\u53d8\u6362\u7684\u9ad8\u9891\u4fe1\u53f7\u6709\u8d21\u732e. \u56e0\u6b64, \u5728\u9891\u57df\u5e73\u6ed1(\u6a21\u7cca)\u53ef\u901a\u8fc7\u5bf9\u9ad8\u9891\u4fe1\u53f7\u7684\u8870\u51cf\u6765\u8fbe\u5230. \u56e0\u4e3a $F(u, v)$ \u7684\u4e2d\u5fc3\u90e8\u5206\u4e3a\u4f4e\u9891\u4fe1\u53f7, \u8fb9\u7f18\u90e8\u5206\u4e3a\u9ad8\u9891\u4fe1\u53f7, \u5982\u679c\u5c06 $F(u, v)$ \u8fb9\u7f18\u90e8\u5206\u5c4f\u853d, \u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u8fdb\u884c\u4e86\u4f4e\u901a\u6ee4\u6ce2. \u8003\u8651\u4e09\u79cd\u6ee4\u6ce2\u5668: \u7406\u60f3\u6ee4\u6ce2\u5668, \u5df4\u7279\u6c83\u65af\u6ee4\u6ce2\u5668\u548c\u9ad8\u65af\u6ee4\u6ce2\u5668. \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668 \u5728\u4ee5\u539f\u70b9\u4e3a\u5706\u5fc3, $D_0$ \u4e3a\u534a\u5f84\u7684\u5706\u5185, \u65e0\u8870\u51cf\u7684\u901a\u8fc7\u6240\u6709\u9891\u7387, \u800c\u5728\u8be5\u5706\u5916\u963b\u65ad\u6240\u6709\u9891\u7387\u7684\u6ee4\u6ce2\u5668\u79f0\u4e3a\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668(ILPF). \u5b83\u7531\u4e0b\u9762\u7684\u51fd\u6570\u6240\u51b3\u5b9a: $$ H(u, v) = \\begin{cases} 1 & D(u, v) < D_0 \\\\ 0 & D(u, v) >= D_0 \\end{cases} $$ \u5176\u4e2d, $D_0$ \u4e3a\u4e00\u4e2a\u6b63\u5e38\u6570(\u79f0\u4e3a\u622a\u6b62\u9891\u7387), $D(u, v)$ \u662f\u9891\u7387\u57df\u4e2d\u5fc3\u70b9 $(u, v)$ \u4e0e\u9891\u7387\u77e9\u5f62\u4e2d\u5fc3\u7684\u8ddd\u79bb. # \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u4ee3\u7801\u5b9e\u73b0 import numpy as np import PIL.Image import scipy.misc def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = duv < d0 s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u5982\u4e0a\u56fe\u6240\u793a, \u4f7f\u7528\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u53ef\u4ee5\u770b\u5230\u660e\u663e\u7684\u632f\u94c3\u72b6\u6ce2\u7eb9, \u56e0\u6b64\u5e94\u7528\u4e2d\u5f88\u5c11\u91c7\u7528\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668. \u5df4\u7279\u6c83\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668 \u622a\u6b62\u9891\u7387\u4f4d\u4e8e\u8ddd\u539f\u70b9 $D_0$ \u5904\u7684 n \u9636\u5df4\u7279\u6c83\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668(BLPF)\u7684\u4f20\u9012\u51fd\u6570\u4e3a $$ H(u, v) = \\frac{1}{1 + [D(u, v) / D_0]^{2n}} $$ \u4e0e ILPF \u4e0d\u540c, BLPF \u4f20\u9012\u51fd\u6570\u5e76\u6ca1\u6709\u5728\u901a\u8fc7\u9891\u7387\u4e0e\u6ee4\u9664\u9891\u7387\u4e4b\u95f4\u7ed9\u51fa\u660e\u663e\u622a\u6b62\u7684\u5c16\u9510\u7684\u4e0d\u8fde\u7eed\u6027. \u5bf9\u4e8e\u5177\u6709\u5e73\u6ed1\u4f20\u9012\u51fd\u6570\u7684\u6ee4\u6ce2\u5668, \u53ef\u5728\u8fd9\u6837\u4e00\u70b9\u4e0a\u5b9a\u4e49\u622a\u6b62\u9891\u7387, \u5373\u4f7f $H(u, v)$ \u4e0b\u964d\u4e3a\u5176\u6700\u5927\u503c\u7684\u67d0\u4e2a\u767e\u5206\u6bd4\u7684\u70b9(\u5982 50%). # \u5c06\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684 convert_2d \u51fd\u6570\u4fee\u6539\u4e00\u4e0b def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # 2 \u9636\u5df4\u7279\u6c83\u65af n = 2 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = 1 / ((1 + (duv / d0)) ** (2*n)) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) \u5f52\u529f\u4e8e\u8fd9\u79cd\u6ee4\u6ce2\u5668\u5728\u4f4e\u9891\u5230\u9ad8\u9891\u4e4b\u95f4\u7684\u5e73\u6ed1\u8fc7\u6e21, BLPF \u6ca1\u6709\u4ea7\u751f\u53ef\u89c1\u7684\u632f\u94c3\u6548\u679c. \u9ad8\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668 \u9ad8\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668(GLPF)\u7684\u4f20\u9012\u51fd\u6570\u4e3a $$ H(u, v) = e^{-D^2(u, v) / 2D_0^2} $$ \u5176\u4e2d, $D_0$ \u662f\u622a\u6b62\u9891\u7387, \u5f53 $D(u, v) = D_0$ \u65f6\u5019, GLPF \u4e0b\u964d\u5230\u6700\u5927\u503c\u7684 0.607 \u5904. # \u5c06\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684 convert_2d \u51fd\u6570\u4fee\u6539\u4e00\u4e0b def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = np.e ** (-duv**2 / d0 ** 2) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8)","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u9891\u57df\u6ee4\u6ce2-\u4f4e\u901a\u6ee4\u6ce2"},{"location":"content/pil/frequency_filter_lpf/#_1","text":"\u4e00\u5e45\u56fe\u50cf\u7684\u8fb9\u7f18\u548c\u5176\u4ed6\u5c16\u9510\u7684\u7070\u5ea6\u8f6c\u6362\u5bf9\u5176\u5085\u91cc\u53f6\u53d8\u6362\u7684\u9ad8\u9891\u4fe1\u53f7\u6709\u8d21\u732e. \u56e0\u6b64, \u5728\u9891\u57df\u5e73\u6ed1(\u6a21\u7cca)\u53ef\u901a\u8fc7\u5bf9\u9ad8\u9891\u4fe1\u53f7\u7684\u8870\u51cf\u6765\u8fbe\u5230. \u56e0\u4e3a $F(u, v)$ \u7684\u4e2d\u5fc3\u90e8\u5206\u4e3a\u4f4e\u9891\u4fe1\u53f7, \u8fb9\u7f18\u90e8\u5206\u4e3a\u9ad8\u9891\u4fe1\u53f7, \u5982\u679c\u5c06 $F(u, v)$ \u8fb9\u7f18\u90e8\u5206\u5c4f\u853d, \u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u8fdb\u884c\u4e86\u4f4e\u901a\u6ee4\u6ce2. \u8003\u8651\u4e09\u79cd\u6ee4\u6ce2\u5668: \u7406\u60f3\u6ee4\u6ce2\u5668, \u5df4\u7279\u6c83\u65af\u6ee4\u6ce2\u5668\u548c\u9ad8\u65af\u6ee4\u6ce2\u5668.","title":"\u4f4e\u901a\u6ee4\u6ce2"},{"location":"content/pil/frequency_filter_lpf/#_2","text":"\u5728\u4ee5\u539f\u70b9\u4e3a\u5706\u5fc3, $D_0$ \u4e3a\u534a\u5f84\u7684\u5706\u5185, \u65e0\u8870\u51cf\u7684\u901a\u8fc7\u6240\u6709\u9891\u7387, \u800c\u5728\u8be5\u5706\u5916\u963b\u65ad\u6240\u6709\u9891\u7387\u7684\u6ee4\u6ce2\u5668\u79f0\u4e3a\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668(ILPF). \u5b83\u7531\u4e0b\u9762\u7684\u51fd\u6570\u6240\u51b3\u5b9a: $$ H(u, v) = \\begin{cases} 1 & D(u, v) < D_0 \\\\ 0 & D(u, v) >= D_0 \\end{cases} $$ \u5176\u4e2d, $D_0$ \u4e3a\u4e00\u4e2a\u6b63\u5e38\u6570(\u79f0\u4e3a\u622a\u6b62\u9891\u7387), $D(u, v)$ \u662f\u9891\u7387\u57df\u4e2d\u5fc3\u70b9 $(u, v)$ \u4e0e\u9891\u7387\u77e9\u5f62\u4e2d\u5fc3\u7684\u8ddd\u79bb. # \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u4ee3\u7801\u5b9e\u73b0 import numpy as np import PIL.Image import scipy.misc def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = duv < d0 s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u5982\u4e0a\u56fe\u6240\u793a, \u4f7f\u7528\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u53ef\u4ee5\u770b\u5230\u660e\u663e\u7684\u632f\u94c3\u72b6\u6ce2\u7eb9, \u56e0\u6b64\u5e94\u7528\u4e2d\u5f88\u5c11\u91c7\u7528\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668.","title":"\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668"},{"location":"content/pil/frequency_filter_lpf/#_3","text":"\u622a\u6b62\u9891\u7387\u4f4d\u4e8e\u8ddd\u539f\u70b9 $D_0$ \u5904\u7684 n \u9636\u5df4\u7279\u6c83\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668(BLPF)\u7684\u4f20\u9012\u51fd\u6570\u4e3a $$ H(u, v) = \\frac{1}{1 + [D(u, v) / D_0]^{2n}} $$ \u4e0e ILPF \u4e0d\u540c, BLPF \u4f20\u9012\u51fd\u6570\u5e76\u6ca1\u6709\u5728\u901a\u8fc7\u9891\u7387\u4e0e\u6ee4\u9664\u9891\u7387\u4e4b\u95f4\u7ed9\u51fa\u660e\u663e\u622a\u6b62\u7684\u5c16\u9510\u7684\u4e0d\u8fde\u7eed\u6027. \u5bf9\u4e8e\u5177\u6709\u5e73\u6ed1\u4f20\u9012\u51fd\u6570\u7684\u6ee4\u6ce2\u5668, \u53ef\u5728\u8fd9\u6837\u4e00\u70b9\u4e0a\u5b9a\u4e49\u622a\u6b62\u9891\u7387, \u5373\u4f7f $H(u, v)$ \u4e0b\u964d\u4e3a\u5176\u6700\u5927\u503c\u7684\u67d0\u4e2a\u767e\u5206\u6bd4\u7684\u70b9(\u5982 50%). # \u5c06\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684 convert_2d \u51fd\u6570\u4fee\u6539\u4e00\u4e0b def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # 2 \u9636\u5df4\u7279\u6c83\u65af n = 2 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = 1 / ((1 + (duv / d0)) ** (2*n)) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8) \u5f52\u529f\u4e8e\u8fd9\u79cd\u6ee4\u6ce2\u5668\u5728\u4f4e\u9891\u5230\u9ad8\u9891\u4e4b\u95f4\u7684\u5e73\u6ed1\u8fc7\u6e21, BLPF \u6ca1\u6709\u4ea7\u751f\u53ef\u89c1\u7684\u632f\u94c3\u6548\u679c.","title":"\u5df4\u7279\u6c83\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668"},{"location":"content/pil/frequency_filter_lpf/#_4","text":"\u9ad8\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668(GLPF)\u7684\u4f20\u9012\u51fd\u6570\u4e3a $$ H(u, v) = e^{-D^2(u, v) / 2D_0^2} $$ \u5176\u4e2d, $D_0$ \u662f\u622a\u6b62\u9891\u7387, \u5f53 $D(u, v) = D_0$ \u65f6\u5019, GLPF \u4e0b\u964d\u5230\u6700\u5927\u503c\u7684 0.607 \u5904. # \u5c06\u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684 convert_2d \u51fd\u6570\u4fee\u6539\u4e00\u4e0b def convert_2d(r): r_ext = np.zeros((r.shape[0] * 2, r.shape[1] * 2)) for i in range(r.shape[0]): for j in range(r.shape[1]): r_ext[i][j] = r[i][j] r_ext_fu = np.fft.fft2(r_ext) r_ext_fu = np.fft.fftshift(r_ext_fu) # \u622a\u6b62\u9891\u7387\u4e3a 100 d0 = 100 # \u9891\u7387\u57df\u4e2d\u5fc3\u5750\u6807 center = (r_ext_fu.shape[0] // 2, r_ext_fu.shape[1] // 2) h = np.empty(r_ext_fu.shape) # \u7ed8\u5236\u6ee4\u6ce2\u5668 H(u, v) for u in range(h.shape[0]): for v in range(h.shape[1]): duv = ((u - center[0]) ** 2 + (v - center[1]) ** 2) ** 0.5 h[u][v] = np.e ** (-duv**2 / d0 ** 2) s_ext_fu = r_ext_fu * h s_ext = np.fft.ifft2(np.fft.ifftshift(s_ext_fu)) s_ext = np.abs(s_ext) s = s_ext[0:r.shape[0], 0:r.shape[1]] for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(s[i][j], 0), 255) return s.astype(np.uint8)","title":"\u9ad8\u65af\u4f4e\u901a\u6ee4\u6ce2\u5668"},{"location":"content/pil/histogram_equalization/","text":"\u76f4\u65b9\u56fe\u5747\u8861\u5316 \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5904\u7406\u7684\u4e2d\u5fc3\u601d\u60f3\u662f\u628a\u539f\u59cb\u56fe\u50cf\u7684\u7070\u5ea6\u76f4\u65b9\u56fe\u4ece\u6bd4\u8f83\u96c6\u4e2d\u7684\u67d0\u4e2a\u7070\u5ea6\u533a\u95f4\u53d8\u6210\u5728\u5168\u90e8\u7070\u5ea6\u8303\u56f4\u5185\u7684\u5747\u5300\u5206\u5e03. \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5c31\u662f\u5bf9\u56fe\u50cf\u8fdb\u884c\u975e\u7ebf\u6027\u62c9\u4f38, \u91cd\u65b0\u5206\u914d\u56fe\u50cf\u50cf\u7d20\u503c, \u4f7f\u4e00\u5b9a\u7070\u5ea6\u8303\u56f4\u5185\u7684\u50cf\u7d20\u6570\u91cf\u5927\u81f4\u76f8\u540c. \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5c31\u662f\u628a\u7ed9\u5b9a\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u5206\u5e03\u6539\u53d8\u6210\"\u5747\u5300\"\u5206\u5e03\u76f4\u65b9\u56fe\u5206\u5e03. \u5047\u8bbe\u8f93\u5165\u662f\u4e00\u5f20 8 \u6bd4\u7279\u7070\u5ea6\u56fe(\u5373\u7070\u5ea6\u7ea7\u4e3a 0 \u81f3 255), \u5219\u4efb\u610f\u7070\u5ea6\u7ea7\u7684\u6982\u7387\u51fd\u6570\u4e3a $$ P(r_k) = n_k/n, k \\in 0-255 $$ \u5176\u4e2d $n_k$ \u4e3a\u7070\u5ea6\u7ea7\u4e3a k \u7684\u50cf\u7d20\u4e2a\u6570, n \u4e3a\u603b\u50cf\u7d20\u4e2a\u6570. \u8bbe\u8f6c\u6362\u51fd\u6570\u4e3a T, \u5219 $$ s_k = T(r_k) = 255 \\sum_{j=0}^k\\frac{n_j}{n} $$ \u4ee3\u7801\u5b9e\u73b0 import matplotlib.pyplot as plt import numpy as np import PIL.Image import scipy.misc def convert_2d(r): x = np.zeros([256]) for i in range(r.shape[0]): for j in range(r.shape[1]): x[r[i][j]] += 1 x = x / r.size sum_x = np.zeros([256]) for i, _ in enumerate(x): sum_x[i] = sum(x[:i]) s = np.empty(r.shape, dtype=np.uint8) for i in range(r.shape[0]): for j in range(r.shape[1]): s[i][j] = 255 * sum_x[r[i][j]] return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) # \u663e\u793a\u8f93\u5165\u76f4\u65b9\u56fe plt.hist(im_mat.reshape([im_mat.size]), 256, normed=1) plt.show() im_converted_mat = convert_2d(im_mat) # \u663e\u793a\u8f93\u51fa\u76f4\u65b9\u56fe plt.hist(im_converted_mat.reshape([im_converted_mat.size]), 256, normed=1) plt.show() im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u5b9e\u9a8c\u7ed3\u679c \u539f\u59cb\u76f4\u65b9\u56fe \u76f4\u65b9\u56fe\u5747\u8861\u5316\u540e\u7684\u76f4\u65b9\u56fe, \u53ef\u4ee5\u770b\u5230\u56fe\u50cf\u5206\u5e03\u53d8\u5f97\u5747\u5300","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u76f4\u65b9\u56fe\u5747\u8861\u5316"},{"location":"content/pil/histogram_equalization/#_1","text":"\u76f4\u65b9\u56fe\u5747\u8861\u5316\u5904\u7406\u7684\u4e2d\u5fc3\u601d\u60f3\u662f\u628a\u539f\u59cb\u56fe\u50cf\u7684\u7070\u5ea6\u76f4\u65b9\u56fe\u4ece\u6bd4\u8f83\u96c6\u4e2d\u7684\u67d0\u4e2a\u7070\u5ea6\u533a\u95f4\u53d8\u6210\u5728\u5168\u90e8\u7070\u5ea6\u8303\u56f4\u5185\u7684\u5747\u5300\u5206\u5e03. \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5c31\u662f\u5bf9\u56fe\u50cf\u8fdb\u884c\u975e\u7ebf\u6027\u62c9\u4f38, \u91cd\u65b0\u5206\u914d\u56fe\u50cf\u50cf\u7d20\u503c, \u4f7f\u4e00\u5b9a\u7070\u5ea6\u8303\u56f4\u5185\u7684\u50cf\u7d20\u6570\u91cf\u5927\u81f4\u76f8\u540c. \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5c31\u662f\u628a\u7ed9\u5b9a\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u5206\u5e03\u6539\u53d8\u6210\"\u5747\u5300\"\u5206\u5e03\u76f4\u65b9\u56fe\u5206\u5e03. \u5047\u8bbe\u8f93\u5165\u662f\u4e00\u5f20 8 \u6bd4\u7279\u7070\u5ea6\u56fe(\u5373\u7070\u5ea6\u7ea7\u4e3a 0 \u81f3 255), \u5219\u4efb\u610f\u7070\u5ea6\u7ea7\u7684\u6982\u7387\u51fd\u6570\u4e3a $$ P(r_k) = n_k/n, k \\in 0-255 $$ \u5176\u4e2d $n_k$ \u4e3a\u7070\u5ea6\u7ea7\u4e3a k \u7684\u50cf\u7d20\u4e2a\u6570, n \u4e3a\u603b\u50cf\u7d20\u4e2a\u6570. \u8bbe\u8f6c\u6362\u51fd\u6570\u4e3a T, \u5219 $$ s_k = T(r_k) = 255 \\sum_{j=0}^k\\frac{n_j}{n} $$","title":"\u76f4\u65b9\u56fe\u5747\u8861\u5316"},{"location":"content/pil/histogram_equalization/#_2","text":"import matplotlib.pyplot as plt import numpy as np import PIL.Image import scipy.misc def convert_2d(r): x = np.zeros([256]) for i in range(r.shape[0]): for j in range(r.shape[1]): x[r[i][j]] += 1 x = x / r.size sum_x = np.zeros([256]) for i, _ in enumerate(x): sum_x[i] = sum(x[:i]) s = np.empty(r.shape, dtype=np.uint8) for i in range(r.shape[0]): for j in range(r.shape[1]): s[i][j] = 255 * sum_x[r[i][j]] return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('L') im_mat = scipy.misc.fromimage(im) # \u663e\u793a\u8f93\u5165\u76f4\u65b9\u56fe plt.hist(im_mat.reshape([im_mat.size]), 256, normed=1) plt.show() im_converted_mat = convert_2d(im_mat) # \u663e\u793a\u8f93\u51fa\u76f4\u65b9\u56fe plt.hist(im_converted_mat.reshape([im_converted_mat.size]), 256, normed=1) plt.show() im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/histogram_equalization/#_3","text":"\u539f\u59cb\u76f4\u65b9\u56fe \u76f4\u65b9\u56fe\u5747\u8861\u5316\u540e\u7684\u76f4\u65b9\u56fe, \u53ef\u4ee5\u770b\u5230\u56fe\u50cf\u5206\u5e03\u53d8\u5f97\u5747\u5300","title":"\u5b9e\u9a8c\u7ed3\u679c"},{"location":"content/pil/macaron_color/","text":"\u9a6c\u5361\u9f99\u8272 \u8ba9\u4eba\u770b\u4e86\u975e\u5e38\u8212\u670d\u7684 10 \u79cd\u989c\u8272, \u636e\u8bf4\u6765\u81ea\u9a6c\u5361\u9f99. \u6536\u85cf\u8bb0\u5f55\u4e00\u4e0b\u4ee5\u5907\u4e0d\u65f6\u4e4b\u9700, \u8fd9\u5341\u79cd\u989c\u8272\u5206\u522b\u662f: #19CAAD #19CAAD #8CC7B5 #8CC7B5 #A0EEE1 #A0EEE1 #BEE7E9 #BEE7E9 #BEEDC7 #BEEDC7 #D6D5B7 #D6D5B7 #D1BA74 #D1BA74 #E6CEAC #E6CEAC #ECAD9E #ECAD9E #F4606C #F4606C","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u9a6c\u5361\u9f99\u8272"},{"location":"content/pil/macaron_color/#_1","text":"\u8ba9\u4eba\u770b\u4e86\u975e\u5e38\u8212\u670d\u7684 10 \u79cd\u989c\u8272, \u636e\u8bf4\u6765\u81ea\u9a6c\u5361\u9f99. \u6536\u85cf\u8bb0\u5f55\u4e00\u4e0b\u4ee5\u5907\u4e0d\u65f6\u4e4b\u9700, \u8fd9\u5341\u79cd\u989c\u8272\u5206\u522b\u662f: #19CAAD #19CAAD #8CC7B5 #8CC7B5 #A0EEE1 #A0EEE1 #BEE7E9 #BEE7E9 #BEEDC7 #BEEDC7 #D6D5B7 #D6D5B7 #D1BA74 #D1BA74 #E6CEAC #E6CEAC #ECAD9E #ECAD9E #F4606C #F4606C","title":"\u9a6c\u5361\u9f99\u8272"},{"location":"content/pil/mean/","text":"\u56fe\u50cf\u5747\u503c \u5728 PIL \u4e2d, \u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u83b7\u53d6\u56fe\u50cf\u5747\u503c: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean print(mean) # [98.61, 97.29, 100.91, 255.0], \u6bcf\u4e00\u9879\u5206\u522b\u4ee3\u8868 RGBA \u56fe\u50cf\u5747\u503c\u5728\u4ee5\u4e0b\u65b9\u9762\u6709\u91cd\u8981\u610f\u4e49: \u7279\u5f81\u6807\u51c6\u5316 . \u5bf9\u4e8e\u56fe\u50cf, \u9010\u50cf\u7d20\u51cf\u53bb\u5747\u503c, \u8fd9\u79cd\u5f52\u4e00\u5316\u53ef\u4ee5\u79fb\u9664\u56fe\u50cf\u7684\u5e73\u5747\u4eae\u5ea6\u503c. \u5f88\u591a\u60c5\u51b5\u4e0b\u6211\u4eec\u5bf9\u56fe\u50cf\u7684\u7167\u5ea6\u5e76\u4e0d\u611f\u5174\u8da3, \u800c\u66f4\u591a\u5730\u5173\u6ce8\u5176\u5185\u5bb9, \u8fd9\u65f6\u5bf9\u6bcf\u4e2a \u6570\u636e\u70b9\u79fb\u9664\u50cf\u7d20\u7684\u5747\u503c\u662f\u6709\u610f\u4e49\u7684. \u6ce8\u610f: \u867d\u7136\u8be5\u65b9\u6cd5\u5e7f\u6cdb\u5730\u5e94\u7528\u4e8e\u56fe\u50cf, \u4f46\u5728\u5904\u7406\u5f69\u8272\u56fe\u50cf\u65f6\u9700\u8981\u683c\u5916\u5c0f\u5fc3, \u5177\u4f53\u6765\u8bf4, \u662f\u56e0\u4e3a\u4e0d\u540c\u8272\u5f69\u901a\u9053\u4e2d\u7684\u50cf\u7d20\u5e76\u4e0d\u90fd\u5b58\u5728\u5e73\u7a33\u7279\u6027. \u5728 \u56fe\u50cf\u5904\u7406-\u5b57\u7b26\u753b \u4e00\u6587\u4e2d\u6709\u4f7f\u7528\u4f8b\u7a0b. \u5747\u503c\u6ee4\u6ce2 . \u5747\u503c\u6ee4\u6ce2\u662f\u5178\u578b\u7684\u7ebf\u6027\u6ee4\u6ce2\u7b97\u6cd5, \u5b83\u662f\u6307\u5728\u56fe\u50cf\u4e0a\u5bf9\u76ee\u6807\u50cf\u7d20\u7ed9\u4e00\u4e2a\u6a21\u677f, \u8be5\u6a21\u677f\u5305\u62ec\u4e86\u5176\u5468\u56f4\u7684\u4e34\u8fd1\u50cf\u7d20(\u4ee5\u76ee\u6807\u8c61\u7d20\u4e3a\u4e2d\u5fc3\u7684\u5468\u56f48\u4e2a\u50cf\u7d20, \u6784\u6210 \u4e00\u4e2a\u6ee4\u6ce2\u6a21\u677f, \u5373\u53bb\u6389\u76ee\u6807\u50cf\u7d20\u672c\u8eab), \u518d\u7528\u6a21\u677f\u4e2d\u7684\u5168\u4f53\u50cf\u7d20\u7684\u5e73\u5747\u503c\u6765\u4ee3\u66ff\u539f\u6765\u50cf\u7d20\u503c. \u4e3b\u9898\u8272\u63d0\u53d6 . \u50cf windows10, \u90e8\u5206\u5b9a\u5236\u5316 android \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6839\u636e\u684c\u9762\u80cc\u666f\u81ea\u52a8\u66f4\u6539\u7cfb\u7edf\u4e3b\u9898\u8272.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u5747\u503c"},{"location":"content/pil/mean/#_1","text":"\u5728 PIL \u4e2d, \u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u83b7\u53d6\u56fe\u50cf\u5747\u503c: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean print(mean) # [98.61, 97.29, 100.91, 255.0], \u6bcf\u4e00\u9879\u5206\u522b\u4ee3\u8868 RGBA \u56fe\u50cf\u5747\u503c\u5728\u4ee5\u4e0b\u65b9\u9762\u6709\u91cd\u8981\u610f\u4e49: \u7279\u5f81\u6807\u51c6\u5316 . \u5bf9\u4e8e\u56fe\u50cf, \u9010\u50cf\u7d20\u51cf\u53bb\u5747\u503c, \u8fd9\u79cd\u5f52\u4e00\u5316\u53ef\u4ee5\u79fb\u9664\u56fe\u50cf\u7684\u5e73\u5747\u4eae\u5ea6\u503c. \u5f88\u591a\u60c5\u51b5\u4e0b\u6211\u4eec\u5bf9\u56fe\u50cf\u7684\u7167\u5ea6\u5e76\u4e0d\u611f\u5174\u8da3, \u800c\u66f4\u591a\u5730\u5173\u6ce8\u5176\u5185\u5bb9, \u8fd9\u65f6\u5bf9\u6bcf\u4e2a \u6570\u636e\u70b9\u79fb\u9664\u50cf\u7d20\u7684\u5747\u503c\u662f\u6709\u610f\u4e49\u7684. \u6ce8\u610f: \u867d\u7136\u8be5\u65b9\u6cd5\u5e7f\u6cdb\u5730\u5e94\u7528\u4e8e\u56fe\u50cf, \u4f46\u5728\u5904\u7406\u5f69\u8272\u56fe\u50cf\u65f6\u9700\u8981\u683c\u5916\u5c0f\u5fc3, \u5177\u4f53\u6765\u8bf4, \u662f\u56e0\u4e3a\u4e0d\u540c\u8272\u5f69\u901a\u9053\u4e2d\u7684\u50cf\u7d20\u5e76\u4e0d\u90fd\u5b58\u5728\u5e73\u7a33\u7279\u6027. \u5728 \u56fe\u50cf\u5904\u7406-\u5b57\u7b26\u753b \u4e00\u6587\u4e2d\u6709\u4f7f\u7528\u4f8b\u7a0b. \u5747\u503c\u6ee4\u6ce2 . \u5747\u503c\u6ee4\u6ce2\u662f\u5178\u578b\u7684\u7ebf\u6027\u6ee4\u6ce2\u7b97\u6cd5, \u5b83\u662f\u6307\u5728\u56fe\u50cf\u4e0a\u5bf9\u76ee\u6807\u50cf\u7d20\u7ed9\u4e00\u4e2a\u6a21\u677f, \u8be5\u6a21\u677f\u5305\u62ec\u4e86\u5176\u5468\u56f4\u7684\u4e34\u8fd1\u50cf\u7d20(\u4ee5\u76ee\u6807\u8c61\u7d20\u4e3a\u4e2d\u5fc3\u7684\u5468\u56f48\u4e2a\u50cf\u7d20, \u6784\u6210 \u4e00\u4e2a\u6ee4\u6ce2\u6a21\u677f, \u5373\u53bb\u6389\u76ee\u6807\u50cf\u7d20\u672c\u8eab), \u518d\u7528\u6a21\u677f\u4e2d\u7684\u5168\u4f53\u50cf\u7d20\u7684\u5e73\u5747\u503c\u6765\u4ee3\u66ff\u539f\u6765\u50cf\u7d20\u503c. \u4e3b\u9898\u8272\u63d0\u53d6 . \u50cf windows10, \u90e8\u5206\u5b9a\u5236\u5316 android \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6839\u636e\u684c\u9762\u80cc\u666f\u81ea\u52a8\u66f4\u6539\u7cfb\u7edf\u4e3b\u9898\u8272.","title":"\u56fe\u50cf\u5747\u503c"},{"location":"content/pil/noise/","text":"\u4e00\u4e9b\u91cd\u8981\u566a\u58f0\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u9ad8\u65af\u566a\u58f0 $$ p(z) = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-(z - \\bar z)^2 / 2\\sigma^2} $$ \u5176\u4e2d $z$ \u8868\u793a\u7070\u5ea6\u503c, $\\bar z$ \u8868\u793a $z$ \u7684\u5747\u503c, $\\sigma$ \u8868\u793a $z$ \u7684\u6807\u51c6\u5dee. \u5f53 $z$ \u670d\u4ece\u9ad8\u65af\u5206\u5e03\u65f6, \u5176\u503c\u6709 68% \u843d\u5728\u8303\u56f4 $[(\\bar z - \\sigma), (\\bar z + \\sigma)]$ \u5185, \u6709 95% \u843d\u5728\u8303\u56f4 $[(\\bar z - 2\\sigma), (\\bar z + 2\\sigma)]$ \u5185, \u745e\u5229\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{2}{b}(z-a)e^{-(z-a)^2 / b} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = a + \\sqrt{\\pi b/4}$, $\\sigma^2 = \\frac{b(4-\\pi)}{4}$ \u4f3d\u9a6c(\u7231\u5c14\u5170)\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{a^bz^{b-1}}{(b-1)!}e^{-az} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{b}{a}$, $\\sigma^2 = \\frac{b}{a^2}$ \u6307\u6570\u566a\u58f0 $$ p(z) = \\begin{cases} ae^{-az} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{1}{a}$, $\\sigma^2 = \\frac{1}{a^2}$ \u5747\u5300\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{1}{b-a} & a \\le z \\le b \\\\ 0 & \\text else \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{a+b}{2}$, $\\sigma^2 = \\frac{(b-a)^2}{12}$ \u8109\u51b2(\u6912\u76d0)\u566a\u58f0 $$ p(z) = \\begin{cases} P_a & z = a \\\\ P_b & z = b \\\\ 1-P_a-P_b & \\text else \\end{cases} $$ \u5982\u679c b > a, \u5219\u7070\u5ea6\u7ea7 b \u5728\u56fe\u50cf\u4e2d\u5c06\u663e\u793a\u4e00\u4e2a\u4eae\u70b9, \u53cd\u4e4b, \u7070\u5ea6\u7ea7 a \u5728\u56fe\u50cf\u4e2d\u5c06\u663e\u793a\u4e00\u4e2a\u6697\u70b9. \u82e5 $P_a$ \u6216 $P_b$ \u4e3a 0, \u5219\u8109\u51b2\u566a\u58f0\u79f0\u4e3a \u5355\u6781\u8109\u51b2 . \u5982\u679c $P_a$ \u548c $P_b$ \u4e24\u8005\u5747\u4e0d\u4e3a 0, \u5c24\u5176\u662f\u5b83\u4eec\u8fd1\u4f3c\u76f8\u7b49\u65f6, \u79f0 \u53cc\u6781\u8109\u51b2 , \u4e5f\u79f0\u4e3a \u6912\u76d0\u8109\u51b2 (\u56e0\u4e3a\u56fe\u50cf\u9177\u4f3c\u88ab\u968f\u673a\u6492\u4e86\u80e1\u6912\u9897\u7c92\u548c\u76d0\u7c89\u9897\u7c92). \u4f7f\u7528 numpy.random \u751f\u6210\u6307\u5b9a\u7c7b\u578b\u7684\u566a\u58f0 import matplotlib.pyplot as plt import numpy as np # \u9ad8\u65af\u566a\u58f0: \u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 x1 = np.random.normal(loc=0, scale=64, size=(256, 256)) # \u745e\u5229\u566a\u58f0: (2 / b) ** 0.5 \u4e3a 1 x2 = np.random.rayleigh(scale=64, size=(256, 256)) # \u4f3d\u9a6c\u566a\u58f0: (b-1) / a \u4e3a 2, \u653e\u5927 32 \u500d x3 = np.random.gamma(shape=2, scale=32, size=(256, 256)) # \u6307\u6570\u566a\u58f0: a = 1/32 x4 = np.random.exponential(scale=32, size=(256, 256)) # \u5747\u5300\u566a\u58f0 x5 = np.random.uniform(low=0, high=1.0, size=(256, 256)) # \u8109\u51b2\u566a\u58f0 x6 = np.random.random_integers(low=0.1, high=2.0, size=(256, 256)) for i, x in enumerate([x1, x2, x3, x4, x5, x6]): ax = plt.subplot(23 * 10 + i + 1) ax.hist(x.reshape(x.size), 64, normed=True) ax.set_yticks([]) ax.set_xticks([]) plt.show() \u8f93\u51fa\u7ed3\u679c: \u4f7f\u7528\u566a\u58f0\u9000\u5316\u539f\u56fe \u4ee3\u7801\u5927\u81f4\u4e0e \u6570\u5b57\u56fe\u50cf\u5904\u7406-\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0\u4e0e\u53bb\u566a \u4e00\u81f4.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u566a\u58f0"},{"location":"content/pil/noise/#_1","text":"\u9ad8\u65af\u566a\u58f0 $$ p(z) = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-(z - \\bar z)^2 / 2\\sigma^2} $$ \u5176\u4e2d $z$ \u8868\u793a\u7070\u5ea6\u503c, $\\bar z$ \u8868\u793a $z$ \u7684\u5747\u503c, $\\sigma$ \u8868\u793a $z$ \u7684\u6807\u51c6\u5dee. \u5f53 $z$ \u670d\u4ece\u9ad8\u65af\u5206\u5e03\u65f6, \u5176\u503c\u6709 68% \u843d\u5728\u8303\u56f4 $[(\\bar z - \\sigma), (\\bar z + \\sigma)]$ \u5185, \u6709 95% \u843d\u5728\u8303\u56f4 $[(\\bar z - 2\\sigma), (\\bar z + 2\\sigma)]$ \u5185, \u745e\u5229\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{2}{b}(z-a)e^{-(z-a)^2 / b} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = a + \\sqrt{\\pi b/4}$, $\\sigma^2 = \\frac{b(4-\\pi)}{4}$ \u4f3d\u9a6c(\u7231\u5c14\u5170)\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{a^bz^{b-1}}{(b-1)!}e^{-az} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{b}{a}$, $\\sigma^2 = \\frac{b}{a^2}$ \u6307\u6570\u566a\u58f0 $$ p(z) = \\begin{cases} ae^{-az} & z \\ge a \\\\ 0 & z < a \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{1}{a}$, $\\sigma^2 = \\frac{1}{a^2}$ \u5747\u5300\u566a\u58f0 $$ p(z) = \\begin{cases} \\frac{1}{b-a} & a \\le z \\le b \\\\ 0 & \\text else \\end{cases} $$ \u6982\u7387\u5bc6\u5ea6\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e3a $\\bar z = \\frac{a+b}{2}$, $\\sigma^2 = \\frac{(b-a)^2}{12}$ \u8109\u51b2(\u6912\u76d0)\u566a\u58f0 $$ p(z) = \\begin{cases} P_a & z = a \\\\ P_b & z = b \\\\ 1-P_a-P_b & \\text else \\end{cases} $$ \u5982\u679c b > a, \u5219\u7070\u5ea6\u7ea7 b \u5728\u56fe\u50cf\u4e2d\u5c06\u663e\u793a\u4e00\u4e2a\u4eae\u70b9, \u53cd\u4e4b, \u7070\u5ea6\u7ea7 a \u5728\u56fe\u50cf\u4e2d\u5c06\u663e\u793a\u4e00\u4e2a\u6697\u70b9. \u82e5 $P_a$ \u6216 $P_b$ \u4e3a 0, \u5219\u8109\u51b2\u566a\u58f0\u79f0\u4e3a \u5355\u6781\u8109\u51b2 . \u5982\u679c $P_a$ \u548c $P_b$ \u4e24\u8005\u5747\u4e0d\u4e3a 0, \u5c24\u5176\u662f\u5b83\u4eec\u8fd1\u4f3c\u76f8\u7b49\u65f6, \u79f0 \u53cc\u6781\u8109\u51b2 , \u4e5f\u79f0\u4e3a \u6912\u76d0\u8109\u51b2 (\u56e0\u4e3a\u56fe\u50cf\u9177\u4f3c\u88ab\u968f\u673a\u6492\u4e86\u80e1\u6912\u9897\u7c92\u548c\u76d0\u7c89\u9897\u7c92).","title":"\u4e00\u4e9b\u91cd\u8981\u566a\u58f0\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570"},{"location":"content/pil/noise/#numpyrandom","text":"import matplotlib.pyplot as plt import numpy as np # \u9ad8\u65af\u566a\u58f0: \u5747\u503c\u4e3a 0, \u6807\u51c6\u5dee\u4e3a 64 x1 = np.random.normal(loc=0, scale=64, size=(256, 256)) # \u745e\u5229\u566a\u58f0: (2 / b) ** 0.5 \u4e3a 1 x2 = np.random.rayleigh(scale=64, size=(256, 256)) # \u4f3d\u9a6c\u566a\u58f0: (b-1) / a \u4e3a 2, \u653e\u5927 32 \u500d x3 = np.random.gamma(shape=2, scale=32, size=(256, 256)) # \u6307\u6570\u566a\u58f0: a = 1/32 x4 = np.random.exponential(scale=32, size=(256, 256)) # \u5747\u5300\u566a\u58f0 x5 = np.random.uniform(low=0, high=1.0, size=(256, 256)) # \u8109\u51b2\u566a\u58f0 x6 = np.random.random_integers(low=0.1, high=2.0, size=(256, 256)) for i, x in enumerate([x1, x2, x3, x4, x5, x6]): ax = plt.subplot(23 * 10 + i + 1) ax.hist(x.reshape(x.size), 64, normed=True) ax.set_yticks([]) ax.set_xticks([]) plt.show() \u8f93\u51fa\u7ed3\u679c:","title":"\u4f7f\u7528 numpy.random \u751f\u6210\u6307\u5b9a\u7c7b\u578b\u7684\u566a\u58f0"},{"location":"content/pil/noise/#_2","text":"\u4ee3\u7801\u5927\u81f4\u4e0e \u6570\u5b57\u56fe\u50cf\u5904\u7406-\u52a0\u6027\u9ad8\u65af\u767d\u566a\u58f0\u4e0e\u53bb\u566a \u4e00\u81f4.","title":"\u4f7f\u7528\u566a\u58f0\u9000\u5316\u539f\u56fe"},{"location":"content/pil/pil_image/","text":"\u5408\u5e76\u56fe\u50cf \u5408\u5e76\u56fe\u50cf\u53ef\u4ee5\u4f7f\u7528 PIL.Image.alpha_composite , PIL.Image.blend \u548c PIL.Image.composite , \u8fd9\u91cc\u7b80\u5355\u6f14\u793a\u4e0b\u7b2c\u4e00\u79cd\u65b9\u5f0f: import PIL.Image import numpy as np im = PIL.Image.open('jp.jpg') im = im.convert('RGBA') mask_mat = np.zeros((im.size[1], im.size[0], 4), dtype=np.uint8) mask_mat[:, :, 0] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0xFF mask_mat[:, :, 1] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0xCC mask_mat[:, :, 2] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0x33 mask_mat[:, :, 3] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 80 mask = PIL.Image.fromarray(mask_mat) # \u4e3a\u539f\u56fe\u50cf\u6dfb\u52a0 (0xFF, 0xCC, 0x33, 80) \u7684\u8499\u7248 im = PIL.Image.alpha_composite(im, mask) im.show() \u5bf9\u6bcf\u4e2a\u50cf\u7d20\u70b9\u8fdb\u884c\u64cd\u4f5c PIL.Image.eval \u5c06\u6307\u5b9a\u7684\u51fd\u6570\u5e94\u7528\u5728\u56fe\u50cf\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u4e4b\u4e0a. import PIL.Image im = PIL.Image.open('jp.jpg') # \u4f7f\u7528 lambda x: 255-x \u53d6\u53cd\u8272 im = PIL.Image.eval(im, lambda x: 255-x) im.show() \u5206\u79bb\u4e0e\u5408\u5e76\u901a\u9053 import PIL.Image im = PIL.Image.open('jp.jpg') # \u5206\u79bb\u6bcf\u4e2a\u901a\u9053, \u8fd4\u56de Image \u5143\u7ec4 r, g, b = im.split() # \u5408\u5e76\u591a\u4e2a\u901a\u9053, \u53c2\u6570 Image \u5143\u7ec4 im = PIL.Image.merge('RGB', (r, g, b)) # \u5982\u679c\u4f60\u53ea\u671f\u671b\u83b7\u5f97\u4e00\u4e2a\u901a\u9053\u7684 Image, \u5219\u53ef\u4ee5\u4f7f\u7528 getchannel() r = im.getchannel('R') r.show() # \u83b7\u53d6\u56fe\u50cf\u50cf\u7d20\u6570\u636e mat = list(im.getdata()) print(mat[0]) # (84, 70, 59) # \u83b7\u53d6\u56fe\u50cf\u4e00\u4e2a\u901a\u9053\u7684\u50cf\u7d20\u6570\u636e mat = list(im.getdata(0)) print(mat[0]) # 84 \u521b\u5efa\u65b0\u7684\u56fe\u50cf import PIL.Image im = PIL.Image.new('RGB', (480, 270), color=(0xFF, 0xCC, 0x33)) im.show() \u83b7\u53d6\u4e0e\u66f4\u65b0\u50cf\u7d20\u70b9 \u4f7f\u7528\u4e24\u4e2a\u65b9\u6cd5: getpixel \u4e0e putpixel . import PIL.Image im = PIL.Image.open('jp.jpg') # \u83b7\u53d6\u5176\u4e2d\u4e00\u4e2a\u50cf\u7d20\u70b9 print(im.getpixel((40, 40))) # (87, 84, 77) # \u66f4\u65b0\u5176\u4e2d\u4e00\u4e2a\u50cf\u7d20\u70b9 im.putpixel((40, 40), (0, 0, 0)) \u76f4\u65b9\u56fe import matplotlib.pyplot as plt import numpy as np import PIL.Image im = PIL.Image.open('jp.jpg') im = im.convert('L') ax = plt.subplot() ax.bar(np.arange(0, 256), im.histogram()) plt.show() \u5e94\u7528\u6ee4\u6ce2\u5668 import PIL.Image import PIL.ImageFilter im = PIL.Image.open('jp.jpg') im = im.filter(PIL.ImageFilter.GaussianBlur) # \u9ad8\u65af\u6ee4\u6ce2 im.show() \u5c5e\u6027 import PIL.Image im = PIL.Image.open('jp.jpg') print(im.filename) # jp.jpg print(im.format) # JPEG print(im.mode) # RGB print(im.size) # (480, 270) print(im.width) # 480 print(im.height) # 270 print(im.palette) # None print(im.info) # {'jfif': 257, 'jfif_version': (1, 1), 'jfif_unit': 0, 'jfif_density': (1, 1)}","title":"Python-PIL-Image"},{"location":"content/pil/pil_image/#_1","text":"\u5408\u5e76\u56fe\u50cf\u53ef\u4ee5\u4f7f\u7528 PIL.Image.alpha_composite , PIL.Image.blend \u548c PIL.Image.composite , \u8fd9\u91cc\u7b80\u5355\u6f14\u793a\u4e0b\u7b2c\u4e00\u79cd\u65b9\u5f0f: import PIL.Image import numpy as np im = PIL.Image.open('jp.jpg') im = im.convert('RGBA') mask_mat = np.zeros((im.size[1], im.size[0], 4), dtype=np.uint8) mask_mat[:, :, 0] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0xFF mask_mat[:, :, 1] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0xCC mask_mat[:, :, 2] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 0x33 mask_mat[:, :, 3] = np.ones((im.size[1], im.size[0]), dtype=np.uint8) * 80 mask = PIL.Image.fromarray(mask_mat) # \u4e3a\u539f\u56fe\u50cf\u6dfb\u52a0 (0xFF, 0xCC, 0x33, 80) \u7684\u8499\u7248 im = PIL.Image.alpha_composite(im, mask) im.show()","title":"\u5408\u5e76\u56fe\u50cf"},{"location":"content/pil/pil_image/#_2","text":"PIL.Image.eval \u5c06\u6307\u5b9a\u7684\u51fd\u6570\u5e94\u7528\u5728\u56fe\u50cf\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u4e4b\u4e0a. import PIL.Image im = PIL.Image.open('jp.jpg') # \u4f7f\u7528 lambda x: 255-x \u53d6\u53cd\u8272 im = PIL.Image.eval(im, lambda x: 255-x) im.show()","title":"\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u70b9\u8fdb\u884c\u64cd\u4f5c"},{"location":"content/pil/pil_image/#_3","text":"import PIL.Image im = PIL.Image.open('jp.jpg') # \u5206\u79bb\u6bcf\u4e2a\u901a\u9053, \u8fd4\u56de Image \u5143\u7ec4 r, g, b = im.split() # \u5408\u5e76\u591a\u4e2a\u901a\u9053, \u53c2\u6570 Image \u5143\u7ec4 im = PIL.Image.merge('RGB', (r, g, b)) # \u5982\u679c\u4f60\u53ea\u671f\u671b\u83b7\u5f97\u4e00\u4e2a\u901a\u9053\u7684 Image, \u5219\u53ef\u4ee5\u4f7f\u7528 getchannel() r = im.getchannel('R') r.show() # \u83b7\u53d6\u56fe\u50cf\u50cf\u7d20\u6570\u636e mat = list(im.getdata()) print(mat[0]) # (84, 70, 59) # \u83b7\u53d6\u56fe\u50cf\u4e00\u4e2a\u901a\u9053\u7684\u50cf\u7d20\u6570\u636e mat = list(im.getdata(0)) print(mat[0]) # 84","title":"\u5206\u79bb\u4e0e\u5408\u5e76\u901a\u9053"},{"location":"content/pil/pil_image/#_4","text":"import PIL.Image im = PIL.Image.new('RGB', (480, 270), color=(0xFF, 0xCC, 0x33)) im.show()","title":"\u521b\u5efa\u65b0\u7684\u56fe\u50cf"},{"location":"content/pil/pil_image/#_5","text":"\u4f7f\u7528\u4e24\u4e2a\u65b9\u6cd5: getpixel \u4e0e putpixel . import PIL.Image im = PIL.Image.open('jp.jpg') # \u83b7\u53d6\u5176\u4e2d\u4e00\u4e2a\u50cf\u7d20\u70b9 print(im.getpixel((40, 40))) # (87, 84, 77) # \u66f4\u65b0\u5176\u4e2d\u4e00\u4e2a\u50cf\u7d20\u70b9 im.putpixel((40, 40), (0, 0, 0))","title":"\u83b7\u53d6\u4e0e\u66f4\u65b0\u50cf\u7d20\u70b9"},{"location":"content/pil/pil_image/#_6","text":"import matplotlib.pyplot as plt import numpy as np import PIL.Image im = PIL.Image.open('jp.jpg') im = im.convert('L') ax = plt.subplot() ax.bar(np.arange(0, 256), im.histogram()) plt.show()","title":"\u76f4\u65b9\u56fe"},{"location":"content/pil/pil_image/#_7","text":"import PIL.Image import PIL.ImageFilter im = PIL.Image.open('jp.jpg') im = im.filter(PIL.ImageFilter.GaussianBlur) # \u9ad8\u65af\u6ee4\u6ce2 im.show()","title":"\u5e94\u7528\u6ee4\u6ce2\u5668"},{"location":"content/pil/pil_image/#_8","text":"import PIL.Image im = PIL.Image.open('jp.jpg') print(im.filename) # jp.jpg print(im.format) # JPEG print(im.mode) # RGB print(im.size) # (480, 270) print(im.width) # 480 print(im.height) # 270 print(im.palette) # None print(im.info) # {'jfif': 257, 'jfif_version': (1, 1), 'jfif_unit': 0, 'jfif_density': (1, 1)}","title":"\u5c5e\u6027"},{"location":"content/pil/pil_imagechops/","text":"PIL.ImageChops \u5305\u542b\u4e00\u7cfb\u5217\u7684\u56fe\u50cf\u7b97\u672f\u64cd\u4f5c. \u52a0\u6cd5 import PIL.Image import PIL.ImageChops im1 = PIL.Image.new('RGB', (480, 270), (0, 255, 0)) im2 = PIL.Image.new('RGB', (480, 270), (255, 0, 0)) # out = ((image1 + image2) / scale + offset) im = PIL.ImageChops.add(im1, im2) im.show() # out = ((image1 + image2) % MAX) im = PIL.ImageChops.add_modulo(im1, im2) im.show() \u51cf\u6cd5 # out = ((image1 - image2) / scale + offset) im = PIL.ImageChops.subtract(im1, im2) im.show() # out = ((image1 - image2) % MAX) im = PIL.ImageChops.subtract_modulo(im1, im2) im.show() \u4e58\u6cd5 # out = image1 * image2 / MAX im = PIL.ImageChops.multiply(im1, im2) im.show() \u6700\u5927\u503c # out = max(image1, image2) im = PIL.ImageChops.lighter(im1, im2) im.show() \u6700\u5c0f\u503c # out = min(image1, image2) im = PIL.ImageChops.darker(im1, im2) im.show() \u5dee\u5f02 # out = abs(image1 - image2) im = PIL.ImageChops.difference(im1, im2) im.show() \u53cd\u8272 # out = MAX - image im = PIL.ImageChops.invert(im1) im.show() \u903b\u8f91\u64cd\u4f5c # out = ((image1 and image2) % MAX) im = PIL.ImageChops.logical_and(im1, im2) im.show() # out = ((image1 or image2) % MAX) im = PIL.ImageChops.logical_or(im1, im2) im.show() \u903b\u8f91\u64cd\u4f5c\u7684\u53c2\u6570\u56fe\u50cf\u6a21\u5f0f\u5fc5\u987b\u662f 1 .","title":"Python-PIL-ImageChops"},{"location":"content/pil/pil_imagechops/#_1","text":"import PIL.Image import PIL.ImageChops im1 = PIL.Image.new('RGB', (480, 270), (0, 255, 0)) im2 = PIL.Image.new('RGB', (480, 270), (255, 0, 0)) # out = ((image1 + image2) / scale + offset) im = PIL.ImageChops.add(im1, im2) im.show() # out = ((image1 + image2) % MAX) im = PIL.ImageChops.add_modulo(im1, im2) im.show()","title":"\u52a0\u6cd5"},{"location":"content/pil/pil_imagechops/#_2","text":"# out = ((image1 - image2) / scale + offset) im = PIL.ImageChops.subtract(im1, im2) im.show() # out = ((image1 - image2) % MAX) im = PIL.ImageChops.subtract_modulo(im1, im2) im.show()","title":"\u51cf\u6cd5"},{"location":"content/pil/pil_imagechops/#_3","text":"# out = image1 * image2 / MAX im = PIL.ImageChops.multiply(im1, im2) im.show()","title":"\u4e58\u6cd5"},{"location":"content/pil/pil_imagechops/#_4","text":"# out = max(image1, image2) im = PIL.ImageChops.lighter(im1, im2) im.show()","title":"\u6700\u5927\u503c"},{"location":"content/pil/pil_imagechops/#_5","text":"# out = min(image1, image2) im = PIL.ImageChops.darker(im1, im2) im.show()","title":"\u6700\u5c0f\u503c"},{"location":"content/pil/pil_imagechops/#_6","text":"# out = abs(image1 - image2) im = PIL.ImageChops.difference(im1, im2) im.show()","title":"\u5dee\u5f02"},{"location":"content/pil/pil_imagechops/#_7","text":"# out = MAX - image im = PIL.ImageChops.invert(im1) im.show()","title":"\u53cd\u8272"},{"location":"content/pil/pil_imagechops/#_8","text":"# out = ((image1 and image2) % MAX) im = PIL.ImageChops.logical_and(im1, im2) im.show() # out = ((image1 or image2) % MAX) im = PIL.ImageChops.logical_or(im1, im2) im.show() \u903b\u8f91\u64cd\u4f5c\u7684\u53c2\u6570\u56fe\u50cf\u6a21\u5f0f\u5fc5\u987b\u662f 1 .","title":"\u903b\u8f91\u64cd\u4f5c"},{"location":"content/pil/pil_imagecolor/","text":"PIL.ImageColor \u5305\u542b\u4e24\u4e2a\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u989c\u8272\u503c\u7684\u51fd\u6570 getrgb() \u4e0e getcolor() . import PIL.ImageColor # getrgb(color) \u8fd4\u56de (red, green, blue[, alpha]) print(PIL.ImageColor.getrgb('#FFCC33')) print(PIL.ImageColor.getrgb('rgb(255, 204, 51)')) print(PIL.ImageColor.getrgb('rgb(100%,0%,0%)')) print(PIL.ImageColor.getrgb('hsl(0,100%,50%)')) # \u989c\u8272\u540d\u79f0\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165, \u5141\u8bb8\u7684\u540d\u79f0\u5b9a\u4e49\u5728 PIL.ImageColor.colormap \u4e2d print(PIL.ImageColor.getrgb('pink')) # getcolor(color, mode) \u8fd4\u56de (graylevel [, alpha]) \u6216 (red, green, blue[, alpha]) print(PIL.ImageColor.getcolor('#FFCC33', 'L'))","title":"Python-PIL-ImageColor"},{"location":"content/pil/pil_imagedraw/","text":"PIL.ImageDraw \u63d0\u4f9b\u7b80\u5355\u7684 2D \u7ed8\u56fe\u529f\u80fd. \u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u521b\u5efa\u65b0\u7684\u56fe\u50cf\u6216\u4fee\u6539\u5df2\u6709\u7684\u56fe\u50cf. \u7ed8\u5236\u7ebf\u6bb5 import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.line((0, 0) + im.size, fill='#FFFFFF') draw.line((0, im.size[1], im.size[0], 0), fill='#FFFFFF') im.show() \u7ed8\u5236\u79bb\u6563\u7684\u70b9 draw.point([(x1, y1), (x2, y2), (x3, y3)...], fill='#FFFFFF') \u7ed8\u5236\u5706\u5f27 PIL.ImageDraw.Draw.arc \u65b9\u6cd5\u53ef\u4ee5\u5728\u7ed9\u5b9a\u7684\u77e9\u5f62\u9009\u6846\u5185\u7ed8\u5236\u4e00\u6bb5(\u5185\u5207)\u5706\u5f27. \u7ed8\u5236\u8d77\u70b9\u4e3a 3 \u70b9\u949f\u4f4d\u7f6e. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.arc((100, 50, 379, 219), 0, 180, fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.chord \u65b9\u6cd5\u4e0e PIL.ImageDraw.Draw.arc \u7c7b\u4f3c, \u4e0d\u540c\u7684\u662f\u4f1a\u586b\u5145\u5706\u5f27. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.chord((100, 50, 379, 219), 0, 180, fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.ellipse \u65b9\u6cd5\u7ed8\u5236\u5e76\u586b\u5145\u692d\u5706. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.ellipse((100, 50, 379, 219), fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.pieslice \u65b9\u6cd5\u7ed8\u5236\u5e76\u586b\u5145\u6247\u5f62. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.pieslice((100, 50, 379, 219), 0, 90, fill='#FFFFFF') im.show() \u7ed8\u5236\u77e9\u5f62 import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.rectangle((100, 50, 379, 219), fill='#FFFFFF') im.show() \u7ed8\u5236\u591a\u8fb9\u5f62 import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.polygon([(100, 50), (380, 50), (240, 250)], fill='#FFFFFF') im.show() \u7ed8\u5236\u6587\u5b57 import PIL.Image import PIL.ImageDraw import PIL.ImageFont font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) print(draw.textsize('Hello World!', font)) # (96, 10), \u8fd4\u56de\u5b57\u7b26\u4e32\u5c06\u8981\u5360\u7528\u7684\u50cf\u7d20\u533a\u57df\u5927\u5c0f draw.text((192, 130), 'Hello World!', '#FFFFFF', font) im.show() \u4e0e draw.text \u7c7b\u4f3c\u7684\u8fd8\u6709\u4e00\u4e2a draw.multiline_text \u65b9\u6cd5, \u4e0d\u591a\u505a\u4ecb\u7ecd.","title":"Python-PIL-ImageDraw"},{"location":"content/pil/pil_imagedraw/#_1","text":"import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.line((0, 0) + im.size, fill='#FFFFFF') draw.line((0, im.size[1], im.size[0], 0), fill='#FFFFFF') im.show()","title":"\u7ed8\u5236\u7ebf\u6bb5"},{"location":"content/pil/pil_imagedraw/#_2","text":"draw.point([(x1, y1), (x2, y2), (x3, y3)...], fill='#FFFFFF')","title":"\u7ed8\u5236\u79bb\u6563\u7684\u70b9"},{"location":"content/pil/pil_imagedraw/#_3","text":"PIL.ImageDraw.Draw.arc \u65b9\u6cd5\u53ef\u4ee5\u5728\u7ed9\u5b9a\u7684\u77e9\u5f62\u9009\u6846\u5185\u7ed8\u5236\u4e00\u6bb5(\u5185\u5207)\u5706\u5f27. \u7ed8\u5236\u8d77\u70b9\u4e3a 3 \u70b9\u949f\u4f4d\u7f6e. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.arc((100, 50, 379, 219), 0, 180, fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.chord \u65b9\u6cd5\u4e0e PIL.ImageDraw.Draw.arc \u7c7b\u4f3c, \u4e0d\u540c\u7684\u662f\u4f1a\u586b\u5145\u5706\u5f27. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.chord((100, 50, 379, 219), 0, 180, fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.ellipse \u65b9\u6cd5\u7ed8\u5236\u5e76\u586b\u5145\u692d\u5706. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.ellipse((100, 50, 379, 219), fill='#FFFFFF') im.show() PIL.ImageDraw.Draw.pieslice \u65b9\u6cd5\u7ed8\u5236\u5e76\u586b\u5145\u6247\u5f62. import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.pieslice((100, 50, 379, 219), 0, 90, fill='#FFFFFF') im.show()","title":"\u7ed8\u5236\u5706\u5f27"},{"location":"content/pil/pil_imagedraw/#_4","text":"import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.rectangle((100, 50, 379, 219), fill='#FFFFFF') im.show()","title":"\u7ed8\u5236\u77e9\u5f62"},{"location":"content/pil/pil_imagedraw/#_5","text":"import PIL.Image import PIL.ImageDraw im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) draw.polygon([(100, 50), (380, 50), (240, 250)], fill='#FFFFFF') im.show()","title":"\u7ed8\u5236\u591a\u8fb9\u5f62"},{"location":"content/pil/pil_imagedraw/#_6","text":"import PIL.Image import PIL.ImageDraw import PIL.ImageFont font = PIL.ImageFont.truetype('consola', 14) im = PIL.Image.new('RGB', (480, 270), '#333333') draw = PIL.ImageDraw.Draw(im) print(draw.textsize('Hello World!', font)) # (96, 10), \u8fd4\u56de\u5b57\u7b26\u4e32\u5c06\u8981\u5360\u7528\u7684\u50cf\u7d20\u533a\u57df\u5927\u5c0f draw.text((192, 130), 'Hello World!', '#FFFFFF', font) im.show() \u4e0e draw.text \u7c7b\u4f3c\u7684\u8fd8\u6709\u4e00\u4e2a draw.multiline_text \u65b9\u6cd5, \u4e0d\u591a\u505a\u4ecb\u7ecd.","title":"\u7ed8\u5236\u6587\u5b57"},{"location":"content/pil/pil_imageenhance/","text":"PIL.ImageEnhance \u5305\u542b\u4e00\u7cfb\u5217\u7684\u56fe\u50cf\u589e\u5f3a\u7b97\u6cd5. \u8272\u5f69\u5e73\u8861\u5ea6 PIL.ImageEnhance.Color import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Color(im) # \u4ece\u7070\u5ea6\u56fe\u9010\u6e10\u6062\u590d\u5230\u539f\u56fe for i in range(11): enhancer.enhance(i / 10.0).show() \u5bf9\u6bd4\u5ea6 PIL.ImageEnhance.Contrast import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Contrast(im) enhancer.enhance(0.5).show() enhancer.enhance(2.0).show() \u4eae\u5ea6 PIL.ImageEnhance.Brightness import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Brightness(im) enhancer.enhance(0.5).show() enhancer.enhance(2.0).show() \u9510\u5316 PIL.ImageEnhance.Sharpness import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Sharpness(im) # \u4f4e\u4e8e 1 \u65f6\u6a21\u7cca, \u9ad8\u4e8e 1 \u65f6\u9510\u5316 enhancer.enhance(0.5).show() enhancer.enhance(2.0).show()","title":"Python-PIL-ImageEnhance"},{"location":"content/pil/pil_imageenhance/#_1","text":"PIL.ImageEnhance.Color import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Color(im) # \u4ece\u7070\u5ea6\u56fe\u9010\u6e10\u6062\u590d\u5230\u539f\u56fe for i in range(11): enhancer.enhance(i / 10.0).show()","title":"\u8272\u5f69\u5e73\u8861\u5ea6"},{"location":"content/pil/pil_imageenhance/#_2","text":"PIL.ImageEnhance.Contrast import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Contrast(im) enhancer.enhance(0.5).show() enhancer.enhance(2.0).show()","title":"\u5bf9\u6bd4\u5ea6"},{"location":"content/pil/pil_imageenhance/#_3","text":"PIL.ImageEnhance.Brightness import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Brightness(im) enhancer.enhance(0.5).show() enhancer.enhance(2.0).show()","title":"\u4eae\u5ea6"},{"location":"content/pil/pil_imageenhance/#_4","text":"PIL.ImageEnhance.Sharpness import PIL.Image import PIL.ImageEnhance im = PIL.Image.open('jp.jpg') enhancer = PIL.ImageEnhance.Sharpness(im) # \u4f4e\u4e8e 1 \u65f6\u6a21\u7cca, \u9ad8\u4e8e 1 \u65f6\u9510\u5316 enhancer.enhance(0.5).show() enhancer.enhance(2.0).show()","title":"\u9510\u5316"},{"location":"content/pil/pil_imageops/","text":"PIL.ImageOps \u5305\u542b\u4e00\u4e9b\u9884\u5b9a\u4e49\u7684\u56fe\u50cf\u5904\u7406\u64cd\u4f5c, \u5927\u591a\u6570\u53ea\u5de5\u4f5c\u4e8e L \u548c RGB \u6a21\u5f0f\u4e0b. \u81ea\u52a8\u8c03\u6574\u5bf9\u6bd4\u5ea6 im = PIL.ImageOps.autocontrast(image, cutoff=0, ignore=None) \u8be5\u51fd\u6570\u8ba1\u7b97\u56fe\u50cf\u7684\u76f4\u65b9\u56fe, \u79fb\u9664\u6700\u5927\u548c\u6700\u5c0f\u7684 cutoff \u767e\u5206\u6bd4\u50cf\u7d20, \u5e76\u5c06\u50cf\u7d20\u8303\u56f4\u62c9\u4f38\u5230 0 - 255. \u7070\u5ea6\u56fe\u7740\u8272 im = PIL.ImageOps.colorize(image, black, white) \u7740\u8272\u4e00\u5e45\u7070\u5ea6\u56fe. \u53c2\u6570\u4e2d\u7684 black \u548c white \u9700\u8981\u4e3a RGB \u989c\u8272. \u79fb\u9664\u6216\u6dfb\u52a0\u6307\u5b9a\u50cf\u7d20\u7684\u8fb9\u6846 # \u79fb\u9664\u8fb9\u6846 im = PIL.ImageOps.crop(image, border=0) # \u6dfb\u52a0\u8fb9\u6846 im = PIL.ImageOps.expand(image, border=0, fill=0) \u79fb\u9664\u56fe\u50cf\u4e0a\u4e0b\u5de6\u53f3 border \u50cf\u7d20. \u76f4\u65b9\u56fe\u5747\u8861\u5316 im = PIL.ImageOps.equalize(image, mask=None) \u7ffb\u8f6c\u56fe\u50cf # \u4e0a\u4e0b\u7ffb\u8f6c im = PIL.ImageOps.flip(image) # \u5de6\u53f3\u7ffb\u8f6c im = PIL.ImageIps.mirror(image) \u53cd\u8272 im = PIL.ImageOps.invert(image) \u964d\u4f4e\u989c\u8272\u4f4d\u6570 im = PIL.ImageOps.posterize(image, bits) bits \u4e3a\u6bcf\u4e2a\u901a\u9053\u4fdd\u7559\u7684\u989c\u8272\u4f4d\u6570, \u8303\u56f4 (1-8).","title":"Python-PIL-ImageOps"},{"location":"content/pil/pil_imageops/#_1","text":"im = PIL.ImageOps.autocontrast(image, cutoff=0, ignore=None) \u8be5\u51fd\u6570\u8ba1\u7b97\u56fe\u50cf\u7684\u76f4\u65b9\u56fe, \u79fb\u9664\u6700\u5927\u548c\u6700\u5c0f\u7684 cutoff \u767e\u5206\u6bd4\u50cf\u7d20, \u5e76\u5c06\u50cf\u7d20\u8303\u56f4\u62c9\u4f38\u5230 0 - 255.","title":"\u81ea\u52a8\u8c03\u6574\u5bf9\u6bd4\u5ea6"},{"location":"content/pil/pil_imageops/#_2","text":"im = PIL.ImageOps.colorize(image, black, white) \u7740\u8272\u4e00\u5e45\u7070\u5ea6\u56fe. \u53c2\u6570\u4e2d\u7684 black \u548c white \u9700\u8981\u4e3a RGB \u989c\u8272.","title":"\u7070\u5ea6\u56fe\u7740\u8272"},{"location":"content/pil/pil_imageops/#_3","text":"# \u79fb\u9664\u8fb9\u6846 im = PIL.ImageOps.crop(image, border=0) # \u6dfb\u52a0\u8fb9\u6846 im = PIL.ImageOps.expand(image, border=0, fill=0) \u79fb\u9664\u56fe\u50cf\u4e0a\u4e0b\u5de6\u53f3 border \u50cf\u7d20.","title":"\u79fb\u9664\u6216\u6dfb\u52a0\u6307\u5b9a\u50cf\u7d20\u7684\u8fb9\u6846"},{"location":"content/pil/pil_imageops/#_4","text":"im = PIL.ImageOps.equalize(image, mask=None)","title":"\u76f4\u65b9\u56fe\u5747\u8861\u5316"},{"location":"content/pil/pil_imageops/#_5","text":"# \u4e0a\u4e0b\u7ffb\u8f6c im = PIL.ImageOps.flip(image) # \u5de6\u53f3\u7ffb\u8f6c im = PIL.ImageIps.mirror(image)","title":"\u7ffb\u8f6c\u56fe\u50cf"},{"location":"content/pil/pil_imageops/#_6","text":"im = PIL.ImageOps.invert(image)","title":"\u53cd\u8272"},{"location":"content/pil/pil_imageops/#_7","text":"im = PIL.ImageOps.posterize(image, bits) bits \u4e3a\u6bcf\u4e2a\u901a\u9053\u4fdd\u7559\u7684\u989c\u8272\u4f4d\u6570, \u8303\u56f4 (1-8).","title":"\u964d\u4f4e\u989c\u8272\u4f4d\u6570"},{"location":"content/pil/pil_tutorial_overview/","text":"PIL \u5e93\u6982\u89c8 PIL\u5e93\u6559\u7a0b \u7cfb\u5217\u5927\u90e8\u5206\u7ffb\u8bd1\u81ea\u5b98\u65b9\u6587\u6863: https://pillow.readthedocs.io , \u4f7f\u7528\u7684 PIL \u7248\u672c\u53f7\u4e3a 4.3.x . \u4f7f\u7528 Image \u5bf9\u8c61 import PIL.Image im = PIL.Image.open('jp.jpg') im.show() \u4fdd\u5b58\u56fe\u50cf im.save('jp.png') PIL \u5728\u4fdd\u5b58\u56fe\u50cf\u65f6, \u4f1a\u81ea\u52a8\u6839\u636e\u6587\u4ef6\u540e\u7f00\u540d\u8fdb\u884c\u683c\u5f0f\u8f6c\u5316. \u7f29\u7565\u56fe im.thumbnail((160, 120)) im.show() thumbnail \u65b9\u6cd5\u4f1a\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u7f29\u7565\u56fe. \u6b64\u65b9\u6cd5\u4fee\u6539\u56fe\u50cf\u4e3a\u672c\u8eab\u7684\u7f29\u7565\u56fe\u7248\u672c, \u7f29\u7565\u56fe\u4e0d\u5927\u4e8e\u7ed9\u5b9a\u5927\u5c0f. \u5c5e\u6027 print(im.format, im.size, im.mode) # JPEG (960, 540) RGB \u88c1\u526a, \u7c98\u8d34\u4e0e\u5408\u5e76\u56fe\u50cf # \u88c1\u526a box = (100, 100, 400, 400) region = im.crop(box) # \u65cb\u8f6c\u88c1\u526a\u7684\u56fe\u50cf, \u5e76\u7c98\u8d34\u56de\u539f\u4f4d\u7f6e region = region.transpose(PIL.Image.ROTATE_180) im.paste(region, box) im.show() \u5f53\u5c06\u5b50\u56fe\u50cf\u7c98\u8d34\u81f3\u7236\u539f\u56fe\u65f6, \u5b50\u56fe\u50cf\u7684\u5927\u5c0f\u5fc5\u987b\u4e0e\u7ed9\u5b9a\u533a\u57df\u5b8c\u5168\u5339\u914d. \u6b64\u5916, \u8be5\u533a\u57df\u4e0d\u80fd\u6269\u5c55\u5230\u7236\u56fe\u50cf\u4e4b\u5916. \u4f46\u662f, \u5b50\u56fe\u50cf\u548c\u7236\u56fe\u50cf\u7684\u6a21\u5f0f(mode)\u4e0d\u9700\u8981\u5339\u914d. \u5728\u7c98\u8d34\u4e4b\u524d, \u5b50\u56fe\u50cf\u4f1a\u81ea\u52a8\u8f6c\u6362\u81f3\u7236\u56fe\u50cf\u7684\u6a21\u5f0f. \u6eda\u52a8\u56fe\u50cf def roll(image, delta): \"\"\"Roll an image sideways. \"\"\" xsize, ysize = image.size delta = delta % xsize if delta == 0: return image part1 = image.crop((0, 0, delta, ysize)) part2 = image.crop((delta, 0, xsize, ysize)) part1.load() part2.load() image.paste(part2, (0, 0, xsize - delta, ysize)) image.paste(part1, (xsize - delta, 0, xsize, ysize)) return image roll(im, 100).show() \u8bf7\u6ce8\u610f, \u5f53\u4ece crop() \u64cd\u4f5c\u4e2d\u5c06\u5176\u7c98\u8d34\u56de\u65f6, \u5c06\u9996\u5148\u8c03\u7528 load() . \u8fd9\u662f\u56e0\u4e3a\u88c1\u526a\u662f\u4e00\u4e2a\u60f0\u6027\u64cd\u4f5c. \u5982\u679c\u672a\u8c03\u7528 load() , \u5219\u5728\u7c98\u8d34\u547d\u4ee4\u4e2d\u4f7f\u7528\u56fe\u50cf\u4e4b\u524d, \u5c06\u4e0d\u4f1a\u6267\u884c\u88c1\u526a\u64cd\u4f5c. \u8fd9\u5c06\u610f\u5473\u7740 part1 \u5c06\u4ece\u5df2\u7531\u7b2c\u4e00\u4e2a\u7c98\u8d34\u4fee\u6539\u7684\u56fe\u50cf\u7248\u672c\u4e2d\u88c1\u526a\u51fa\u6765. \u5206\u79bb\u4e0e\u5408\u5e76\u901a\u9053 r, g, b = im.split() im = PIL.Image.merge('RGB', (b, g, r)) im.show() \u7b80\u5355\u51e0\u4f55\u53d8\u6362 out = im.resize((128, 128)) out = im.rotate(45) # degrees counter-clockwise resize \u4e0e rotate \u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 Image \u5bf9\u8c61. \u6a21\u5f0f\u8f6c\u6362 out = im.convert(mode='L') \u53ef\u9009\u7684\u6a21\u5f0f\u5305\u62ec: 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) CMYK (4x8-bit pixels, color separation) YCbCr (3x8-bit pixels, color video format) Note that this refers to the JPEG, and not the ITU-R BT.2020, standard LAB (3x8-bit pixels, the L*a*b color space) HSV (3x8-bit pixels, Hue, Saturation, Value color space) I (32-bit signed integer pixels) F (32-bit floating point pixels) \u6ee4\u955c import PIL.ImageFilter out = im.filter(PIL.ImageFilter.DETAIL) \u53ef\u9009\u7684\u6ee4\u955c\u5305\u62ec: BLUR CONTOUR DETAIL EDGE_ENHANCE EDGE_ENHANCE_MORE EMBOSS FIND_EDGES SMOOTH SMOOTH_MORE SHARPEN \u50cf\u7d20\u64cd\u4f5c \u4f7f\u7528 point() \u65b9\u6cd5\u5bf9\u56fe\u50cf\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u505a\u76f8\u5e94\u64cd\u4f5c. # \u53cd\u8272: \u6240\u6709\u50cf\u7d20\u70b9 i \u4f1a\u88ab 255 - i \u66ff\u6362 out = im.point(lambda i: 255-i) out.show() \u56fe\u50cf\u589e\u5f3a import PIL.ImageEnhance # \u5bf9\u6bd4\u5ea6\u8c03\u6574 enh = PIL.ImageEnhance.Contrast(im) enh.enhance(1.3).show() \u8bfb\u53d6 GIF \u52a8\u753b im = PIL.Image.open('sample.gif') im.seek(20) im.show() \u4f7f\u7528\u8fed\u4ee3\u5668\u8bfb\u53d6 import PIL.ImageSequence im = PIL.Image.open('sample.gif') for frame in PIL.ImageSequence.Iterator(im): print(frame) \u5173\u4e8e\u8bfb\u53d6\u56fe\u50cf\u7684\u66f4\u591a\u8bf4\u660e \u5927\u591a\u6570\u65f6\u5019, \u901a\u8fc7\u4f20\u5165\u6587\u4ef6\u540d\u81f3 open() \u51fd\u6570\u8bfb\u53d6\u4e00\u5f20\u56fe\u50cf. \u4f46\u540c\u65f6\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u65b9\u5f0f\u8bfb\u53d6\u56fe\u50cf: import io import PIL.Image import numpy as np # \u4ece fp \u4e2d\u8bfb\u53d6 with open('jp.jpg', 'rb') as fp: im = PIL.Image.open(fp) # \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6 im = PIL.Image.open(io.StringIO('...')) # \u4ece\u77e9\u9635\u4e2d\u8bfb\u53d6 im = PIL.Image.fromarray(255 * np.ones((100, 100))) \u91c7\u6837\u5668 PIL \u652f\u6301\u5982\u4e0b 6 \u79cd\u91c7\u6837\u5668, \u5747\u4f4d\u4e8e PIL.Image \u5305\u5185. NEAREST BOX BILINEAR HAMMING BICUBIC LANCZOS \u663e\u793a\u56fe\u50cf \u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d, \u4f7f\u7528 im.show() \u53ef\u4ee5\u65b9\u4fbf\u7684\u5c55\u793a\u56fe\u50cf, \u4f46\u540c\u65f6\u4e5f\u53ef\u4ee5\u501f\u52a9\u4e00\u4e9b\u5176\u4ed6\u65b9\u5f0f\u5c55\u793a\u56fe\u50cf, \u5982 matplotlib \u548c opencv import PIL.Image im = PIL.Image.new('RGB', (480, 270), color=(0xFF, 0xCC, 0x33)) im.show() import matplotlib.pyplot as plt plt.imshow(im) plt.axis('off') plt.show() import cv2 import scipy.misc cv2.imshow(\"im\", scipy.misc.fromimage(im)) cv2.waitKey(0) cv2.destroyAllWindows()","title":"Python-PIL-\u6982\u89c8"},{"location":"content/pil/pil_tutorial_overview/#pil","text":"PIL\u5e93\u6559\u7a0b \u7cfb\u5217\u5927\u90e8\u5206\u7ffb\u8bd1\u81ea\u5b98\u65b9\u6587\u6863: https://pillow.readthedocs.io , \u4f7f\u7528\u7684 PIL \u7248\u672c\u53f7\u4e3a 4.3.x .","title":"PIL \u5e93\u6982\u89c8"},{"location":"content/pil/pil_tutorial_overview/#image","text":"import PIL.Image im = PIL.Image.open('jp.jpg') im.show()","title":"\u4f7f\u7528 Image \u5bf9\u8c61"},{"location":"content/pil/pil_tutorial_overview/#_1","text":"im.save('jp.png') PIL \u5728\u4fdd\u5b58\u56fe\u50cf\u65f6, \u4f1a\u81ea\u52a8\u6839\u636e\u6587\u4ef6\u540e\u7f00\u540d\u8fdb\u884c\u683c\u5f0f\u8f6c\u5316.","title":"\u4fdd\u5b58\u56fe\u50cf"},{"location":"content/pil/pil_tutorial_overview/#_2","text":"im.thumbnail((160, 120)) im.show() thumbnail \u65b9\u6cd5\u4f1a\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u7f29\u7565\u56fe. \u6b64\u65b9\u6cd5\u4fee\u6539\u56fe\u50cf\u4e3a\u672c\u8eab\u7684\u7f29\u7565\u56fe\u7248\u672c, \u7f29\u7565\u56fe\u4e0d\u5927\u4e8e\u7ed9\u5b9a\u5927\u5c0f.","title":"\u7f29\u7565\u56fe"},{"location":"content/pil/pil_tutorial_overview/#_3","text":"print(im.format, im.size, im.mode) # JPEG (960, 540) RGB","title":"\u5c5e\u6027"},{"location":"content/pil/pil_tutorial_overview/#_4","text":"# \u88c1\u526a box = (100, 100, 400, 400) region = im.crop(box) # \u65cb\u8f6c\u88c1\u526a\u7684\u56fe\u50cf, \u5e76\u7c98\u8d34\u56de\u539f\u4f4d\u7f6e region = region.transpose(PIL.Image.ROTATE_180) im.paste(region, box) im.show() \u5f53\u5c06\u5b50\u56fe\u50cf\u7c98\u8d34\u81f3\u7236\u539f\u56fe\u65f6, \u5b50\u56fe\u50cf\u7684\u5927\u5c0f\u5fc5\u987b\u4e0e\u7ed9\u5b9a\u533a\u57df\u5b8c\u5168\u5339\u914d. \u6b64\u5916, \u8be5\u533a\u57df\u4e0d\u80fd\u6269\u5c55\u5230\u7236\u56fe\u50cf\u4e4b\u5916. \u4f46\u662f, \u5b50\u56fe\u50cf\u548c\u7236\u56fe\u50cf\u7684\u6a21\u5f0f(mode)\u4e0d\u9700\u8981\u5339\u914d. \u5728\u7c98\u8d34\u4e4b\u524d, \u5b50\u56fe\u50cf\u4f1a\u81ea\u52a8\u8f6c\u6362\u81f3\u7236\u56fe\u50cf\u7684\u6a21\u5f0f.","title":"\u88c1\u526a, \u7c98\u8d34\u4e0e\u5408\u5e76\u56fe\u50cf"},{"location":"content/pil/pil_tutorial_overview/#_5","text":"def roll(image, delta): \"\"\"Roll an image sideways. \"\"\" xsize, ysize = image.size delta = delta % xsize if delta == 0: return image part1 = image.crop((0, 0, delta, ysize)) part2 = image.crop((delta, 0, xsize, ysize)) part1.load() part2.load() image.paste(part2, (0, 0, xsize - delta, ysize)) image.paste(part1, (xsize - delta, 0, xsize, ysize)) return image roll(im, 100).show() \u8bf7\u6ce8\u610f, \u5f53\u4ece crop() \u64cd\u4f5c\u4e2d\u5c06\u5176\u7c98\u8d34\u56de\u65f6, \u5c06\u9996\u5148\u8c03\u7528 load() . \u8fd9\u662f\u56e0\u4e3a\u88c1\u526a\u662f\u4e00\u4e2a\u60f0\u6027\u64cd\u4f5c. \u5982\u679c\u672a\u8c03\u7528 load() , \u5219\u5728\u7c98\u8d34\u547d\u4ee4\u4e2d\u4f7f\u7528\u56fe\u50cf\u4e4b\u524d, \u5c06\u4e0d\u4f1a\u6267\u884c\u88c1\u526a\u64cd\u4f5c. \u8fd9\u5c06\u610f\u5473\u7740 part1 \u5c06\u4ece\u5df2\u7531\u7b2c\u4e00\u4e2a\u7c98\u8d34\u4fee\u6539\u7684\u56fe\u50cf\u7248\u672c\u4e2d\u88c1\u526a\u51fa\u6765.","title":"\u6eda\u52a8\u56fe\u50cf"},{"location":"content/pil/pil_tutorial_overview/#_6","text":"r, g, b = im.split() im = PIL.Image.merge('RGB', (b, g, r)) im.show()","title":"\u5206\u79bb\u4e0e\u5408\u5e76\u901a\u9053"},{"location":"content/pil/pil_tutorial_overview/#_7","text":"out = im.resize((128, 128)) out = im.rotate(45) # degrees counter-clockwise resize \u4e0e rotate \u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 Image \u5bf9\u8c61.","title":"\u7b80\u5355\u51e0\u4f55\u53d8\u6362"},{"location":"content/pil/pil_tutorial_overview/#_8","text":"out = im.convert(mode='L') \u53ef\u9009\u7684\u6a21\u5f0f\u5305\u62ec: 1 (1-bit pixels, black and white, stored with one pixel per byte) L (8-bit pixels, black and white) P (8-bit pixels, mapped to any other mode using a color palette) RGB (3x8-bit pixels, true color) RGBA (4x8-bit pixels, true color with transparency mask) CMYK (4x8-bit pixels, color separation) YCbCr (3x8-bit pixels, color video format) Note that this refers to the JPEG, and not the ITU-R BT.2020, standard LAB (3x8-bit pixels, the L*a*b color space) HSV (3x8-bit pixels, Hue, Saturation, Value color space) I (32-bit signed integer pixels) F (32-bit floating point pixels)","title":"\u6a21\u5f0f\u8f6c\u6362"},{"location":"content/pil/pil_tutorial_overview/#_9","text":"import PIL.ImageFilter out = im.filter(PIL.ImageFilter.DETAIL) \u53ef\u9009\u7684\u6ee4\u955c\u5305\u62ec: BLUR CONTOUR DETAIL EDGE_ENHANCE EDGE_ENHANCE_MORE EMBOSS FIND_EDGES SMOOTH SMOOTH_MORE SHARPEN","title":"\u6ee4\u955c"},{"location":"content/pil/pil_tutorial_overview/#_10","text":"\u4f7f\u7528 point() \u65b9\u6cd5\u5bf9\u56fe\u50cf\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u505a\u76f8\u5e94\u64cd\u4f5c. # \u53cd\u8272: \u6240\u6709\u50cf\u7d20\u70b9 i \u4f1a\u88ab 255 - i \u66ff\u6362 out = im.point(lambda i: 255-i) out.show()","title":"\u50cf\u7d20\u64cd\u4f5c"},{"location":"content/pil/pil_tutorial_overview/#_11","text":"import PIL.ImageEnhance # \u5bf9\u6bd4\u5ea6\u8c03\u6574 enh = PIL.ImageEnhance.Contrast(im) enh.enhance(1.3).show()","title":"\u56fe\u50cf\u589e\u5f3a"},{"location":"content/pil/pil_tutorial_overview/#gif","text":"im = PIL.Image.open('sample.gif') im.seek(20) im.show() \u4f7f\u7528\u8fed\u4ee3\u5668\u8bfb\u53d6 import PIL.ImageSequence im = PIL.Image.open('sample.gif') for frame in PIL.ImageSequence.Iterator(im): print(frame)","title":"\u8bfb\u53d6 GIF \u52a8\u753b"},{"location":"content/pil/pil_tutorial_overview/#_12","text":"\u5927\u591a\u6570\u65f6\u5019, \u901a\u8fc7\u4f20\u5165\u6587\u4ef6\u540d\u81f3 open() \u51fd\u6570\u8bfb\u53d6\u4e00\u5f20\u56fe\u50cf. \u4f46\u540c\u65f6\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u65b9\u5f0f\u8bfb\u53d6\u56fe\u50cf: import io import PIL.Image import numpy as np # \u4ece fp \u4e2d\u8bfb\u53d6 with open('jp.jpg', 'rb') as fp: im = PIL.Image.open(fp) # \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6 im = PIL.Image.open(io.StringIO('...')) # \u4ece\u77e9\u9635\u4e2d\u8bfb\u53d6 im = PIL.Image.fromarray(255 * np.ones((100, 100)))","title":"\u5173\u4e8e\u8bfb\u53d6\u56fe\u50cf\u7684\u66f4\u591a\u8bf4\u660e"},{"location":"content/pil/pil_tutorial_overview/#_13","text":"PIL \u652f\u6301\u5982\u4e0b 6 \u79cd\u91c7\u6837\u5668, \u5747\u4f4d\u4e8e PIL.Image \u5305\u5185. NEAREST BOX BILINEAR HAMMING BICUBIC LANCZOS","title":"\u91c7\u6837\u5668"},{"location":"content/pil/pil_tutorial_overview/#_14","text":"\u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d, \u4f7f\u7528 im.show() \u53ef\u4ee5\u65b9\u4fbf\u7684\u5c55\u793a\u56fe\u50cf, \u4f46\u540c\u65f6\u4e5f\u53ef\u4ee5\u501f\u52a9\u4e00\u4e9b\u5176\u4ed6\u65b9\u5f0f\u5c55\u793a\u56fe\u50cf, \u5982 matplotlib \u548c opencv import PIL.Image im = PIL.Image.new('RGB', (480, 270), color=(0xFF, 0xCC, 0x33)) im.show() import matplotlib.pyplot as plt plt.imshow(im) plt.axis('off') plt.show() import cv2 import scipy.misc cv2.imshow(\"im\", scipy.misc.fromimage(im)) cv2.waitKey(0) cv2.destroyAllWindows()","title":"\u663e\u793a\u56fe\u50cf"},{"location":"content/pil/resize_bicubic/","text":"\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5 \u53cc\u4e09\u6b21\u63d2\u503c\u6cd5\u901a\u5e38\u5e94\u7528\u5728\u56fe\u50cf\u653e\u5927\u4e2d. \u76f8\u6bd4\u4e8e\u53cc\u7ebf\u6027\u7b97\u6cd5, \u5b83\u5728\u653e\u5927\u540e\u4fdd\u7559\u4e86\u66f4\u597d\u7684\u7ec6\u8282. \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d, \u51fd\u6570 $f$ \u5728\u70b9 $(x, y)$ \u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u77e9\u5f62\u7f51\u683c\u4e2d\u6700\u8fd1\u7684\u5341\u516d\u4e2a\u91c7\u6837\u70b9\u7684\u52a0\u6743\u5e73\u5747\u5f97\u5230, \u5728\u8fd9\u91cc\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u591a\u9879\u5f0f\u63d2\u503c\u4e09\u6b21\u51fd\u6570, \u6bcf\u4e2a\u65b9\u5411\u4f7f\u7528\u4e00\u4e2a. \u673a\u7406 \u5148\u4e86\u89e3\u4e0b\u4e09\u6b21\u63d2\u503c\u7b97\u6cd5\u5728\u5904\u7406\u4e00\u7ef4\u6570\u636e\u65f6\u7684\u8fc7\u7a0b.\u5047\u8bbe\u5df2\u77e5\u4e00\u4e2a\u4e00\u7ef4\u77e9\u9635: $$ A = [10, 20, 20, 10] $$ \u8be5\u77e9\u9635\u4e0b\u6807\u4ece -1 \u5f00\u59cb, \u5373 $A[-1] = 10$, $A[0] = A[1] = 20$, $A[2] = 10$, \u5982\u679c\u6211\u4eec\u5e0c\u671b(\u8fd1\u4f3c)\u5f97\u5230 A[0.5] \u7684\u7ed3\u679c, \u90a3\u4e48\u53ef\u4ee5\u9996\u5148\u5047\u8bbe\u6709\u4e00\u4e2a \u57fa\u4e8e\u8ddd\u79bb\u7684\u6743\u91cd\u51fd\u6570 $W$, \u5bb9\u6613\u5f97\u5230 $$ A[0.5] = W(-1.5)A[-1] + W(-0.5)A[0] + W(0.5)A[1] + W(1.5)A[2] $$ \u5373\u5bf9\u4e8e\u4e00\u7ef4\u77e9\u9635, \u4efb\u610f\u70b9\u7684\u503c\u6709\u5982\u4e0b\u8868\u8fbe\u5f0f: $$P(x) = \\sum_{i=-1}^2W(x-i)$$ \u6269\u5c55\u5230\u4e8c\u7ef4\u77e9\u9635: $$P(x, y) = \\sum_{i=-1}^2\\sum_{j=-1}^2W(x-i)W(y-j)$$ \u6743\u91cd\u51fd\u6570 \u5728\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5\u4e2d, \u6743\u91cd\u51fd\u6570 $W$ \u901a\u5e38\u4e3a: $$ W(x) = \\begin{cases} (a+2)|x|^3 - (a+3)|x|^2 + 1 & |x| \\le 1 \\\\ a|x|^3 - 5a|x|^2 + 8a|x|-4a & 1 < |x| < 2 \\\\ 0 & |x| \\ge 2 \\end{cases} $$ \u5728\u53cc\u4e09\u6b21\u63d2\u503c\u7b97\u6cd5\u4e2d, $a$ \u5e38\u53d6 -0.5 \u6216 -0.75. \u56e0\u6b64\u82e5\u5c06 $W$ \u4ee3\u5165, \u53ef\u5f97\u4e0a\u8ff0\u5217\u9898 $A[0.5]=21.25$. $W$ \u5728 [-2, 2] \u533a\u95f4\u4e0a\u7684\u51fd\u6570\u56fe\u50cf\u5982\u4e0b\u56fe\u6240\u793a: \u4ee3\u7801\u5b9e\u73b0 import numpy as np import PIL.Image import scipy.misc def get_item(arr, *args): indexes = [] for i, entry in enumerate(args): index = entry if index < 0: index = abs(index) - 1 if index >= arr.shape[i]: index = arr.shape[i] - index % arr.shape[i] - 1 indexes.append(index) r = arr for index in indexes: r = r[index] return r def get_w(x): a = -0.5 absx = abs(x) if absx <= 1: return (a + 2) * absx**3 - (a + 3) * absx ** 2 + 1 elif 1 < absx < 2: return a * absx**3 - 5 * a * absx**2 + 8 * a * absx - 4 * a else: return 0 im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_mat_resized = np.empty((270, 480, im_mat.shape[2]), dtype=np.uint8) for r in range(im_mat_resized.shape[0]): for c in range(im_mat_resized.shape[1]): rr = (r + 1) / im_mat_resized.shape[0] * im_mat.shape[0] - 1 cc = (c + 1) / im_mat_resized.shape[1] * im_mat.shape[1] - 1 rr_int = int(rr) cc_int = int(cc) sum_p = np.empty(im_mat.shape[2]) for j in range(rr_int - 1, rr_int + 3): for i in range(cc_int - 1, cc_int + 3): w = get_w(rr - j) * get_w(cc - i) p = get_item(im_mat, j, i) * w sum_p += p for i, entry in enumerate(sum_p): sum_p[i] = min(max(entry, 0), 255) im_mat_resized[r][c] = sum_p im_resized = PIL.Image.fromarray(im_mat_resized) im_resized.show() \u4e0a\u8ff0\u4ee3\u7801\u672a\u7ecf\u4f18\u5316, \u5728\u653e\u5927\u56fe\u7247\u81f3 2160*3840 \u65f6\u53ef\u80fd\u9700\u8981\u82b1\u8d39\u8d85\u8fc7 1 \u5c0f\u65f6\u5728\u6211\u7684 xeon cpu \u4e0a.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7f29\u653e-\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5"},{"location":"content/pil/resize_bicubic/#_1","text":"\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5\u901a\u5e38\u5e94\u7528\u5728\u56fe\u50cf\u653e\u5927\u4e2d. \u76f8\u6bd4\u4e8e\u53cc\u7ebf\u6027\u7b97\u6cd5, \u5b83\u5728\u653e\u5927\u540e\u4fdd\u7559\u4e86\u66f4\u597d\u7684\u7ec6\u8282. \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d, \u51fd\u6570 $f$ \u5728\u70b9 $(x, y)$ \u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u77e9\u5f62\u7f51\u683c\u4e2d\u6700\u8fd1\u7684\u5341\u516d\u4e2a\u91c7\u6837\u70b9\u7684\u52a0\u6743\u5e73\u5747\u5f97\u5230, \u5728\u8fd9\u91cc\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u591a\u9879\u5f0f\u63d2\u503c\u4e09\u6b21\u51fd\u6570, \u6bcf\u4e2a\u65b9\u5411\u4f7f\u7528\u4e00\u4e2a.","title":"\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5"},{"location":"content/pil/resize_bicubic/#_2","text":"\u5148\u4e86\u89e3\u4e0b\u4e09\u6b21\u63d2\u503c\u7b97\u6cd5\u5728\u5904\u7406\u4e00\u7ef4\u6570\u636e\u65f6\u7684\u8fc7\u7a0b.\u5047\u8bbe\u5df2\u77e5\u4e00\u4e2a\u4e00\u7ef4\u77e9\u9635: $$ A = [10, 20, 20, 10] $$ \u8be5\u77e9\u9635\u4e0b\u6807\u4ece -1 \u5f00\u59cb, \u5373 $A[-1] = 10$, $A[0] = A[1] = 20$, $A[2] = 10$, \u5982\u679c\u6211\u4eec\u5e0c\u671b(\u8fd1\u4f3c)\u5f97\u5230 A[0.5] \u7684\u7ed3\u679c, \u90a3\u4e48\u53ef\u4ee5\u9996\u5148\u5047\u8bbe\u6709\u4e00\u4e2a \u57fa\u4e8e\u8ddd\u79bb\u7684\u6743\u91cd\u51fd\u6570 $W$, \u5bb9\u6613\u5f97\u5230 $$ A[0.5] = W(-1.5)A[-1] + W(-0.5)A[0] + W(0.5)A[1] + W(1.5)A[2] $$ \u5373\u5bf9\u4e8e\u4e00\u7ef4\u77e9\u9635, \u4efb\u610f\u70b9\u7684\u503c\u6709\u5982\u4e0b\u8868\u8fbe\u5f0f: $$P(x) = \\sum_{i=-1}^2W(x-i)$$ \u6269\u5c55\u5230\u4e8c\u7ef4\u77e9\u9635: $$P(x, y) = \\sum_{i=-1}^2\\sum_{j=-1}^2W(x-i)W(y-j)$$","title":"\u673a\u7406"},{"location":"content/pil/resize_bicubic/#_3","text":"\u5728\u53cc\u4e09\u6b21\u63d2\u503c\u6cd5\u4e2d, \u6743\u91cd\u51fd\u6570 $W$ \u901a\u5e38\u4e3a: $$ W(x) = \\begin{cases} (a+2)|x|^3 - (a+3)|x|^2 + 1 & |x| \\le 1 \\\\ a|x|^3 - 5a|x|^2 + 8a|x|-4a & 1 < |x| < 2 \\\\ 0 & |x| \\ge 2 \\end{cases} $$ \u5728\u53cc\u4e09\u6b21\u63d2\u503c\u7b97\u6cd5\u4e2d, $a$ \u5e38\u53d6 -0.5 \u6216 -0.75. \u56e0\u6b64\u82e5\u5c06 $W$ \u4ee3\u5165, \u53ef\u5f97\u4e0a\u8ff0\u5217\u9898 $A[0.5]=21.25$. $W$ \u5728 [-2, 2] \u533a\u95f4\u4e0a\u7684\u51fd\u6570\u56fe\u50cf\u5982\u4e0b\u56fe\u6240\u793a:","title":"\u6743\u91cd\u51fd\u6570"},{"location":"content/pil/resize_bicubic/#_4","text":"import numpy as np import PIL.Image import scipy.misc def get_item(arr, *args): indexes = [] for i, entry in enumerate(args): index = entry if index < 0: index = abs(index) - 1 if index >= arr.shape[i]: index = arr.shape[i] - index % arr.shape[i] - 1 indexes.append(index) r = arr for index in indexes: r = r[index] return r def get_w(x): a = -0.5 absx = abs(x) if absx <= 1: return (a + 2) * absx**3 - (a + 3) * absx ** 2 + 1 elif 1 < absx < 2: return a * absx**3 - 5 * a * absx**2 + 8 * a * absx - 4 * a else: return 0 im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_mat_resized = np.empty((270, 480, im_mat.shape[2]), dtype=np.uint8) for r in range(im_mat_resized.shape[0]): for c in range(im_mat_resized.shape[1]): rr = (r + 1) / im_mat_resized.shape[0] * im_mat.shape[0] - 1 cc = (c + 1) / im_mat_resized.shape[1] * im_mat.shape[1] - 1 rr_int = int(rr) cc_int = int(cc) sum_p = np.empty(im_mat.shape[2]) for j in range(rr_int - 1, rr_int + 3): for i in range(cc_int - 1, cc_int + 3): w = get_w(rr - j) * get_w(cc - i) p = get_item(im_mat, j, i) * w sum_p += p for i, entry in enumerate(sum_p): sum_p[i] = min(max(entry, 0), 255) im_mat_resized[r][c] = sum_p im_resized = PIL.Image.fromarray(im_mat_resized) im_resized.show() \u4e0a\u8ff0\u4ee3\u7801\u672a\u7ecf\u4f18\u5316, \u5728\u653e\u5927\u56fe\u7247\u81f3 2160*3840 \u65f6\u53ef\u80fd\u9700\u8981\u82b1\u8d39\u8d85\u8fc7 1 \u5c0f\u65f6\u5728\u6211\u7684 xeon cpu \u4e0a.","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/resize_bilinear/","text":"\u53cc\u7ebf\u6027\u7b97\u6cd5 \u53cc\u7ebf\u6027\u63d2\u503c\u6cd5\u4e0e\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5\u7c7b\u4f3c, \u4e0d\u540c\u70b9\u662f\u53d6\u539f\u56fe\u50cf\u4e2d\u8ddd\u79bb\u76ee\u6807\u50cf\u7d20\u70b9\u6700\u8fd1\u7684 4 \u4e2a\u70b9, \u5e76\u5bf9\u8fd9 4 \u4e2a\u70b9\u4e0e\u5176\u5bf9\u5e94\u6743\u503c\u7684\u4e58\u79ef\u6c42\u548c, \u83b7\u5f97\u6700\u7ec8\u50cf\u7d20\u503c. \u5982\u4e0b\u56fe: \u76ee\u6807\u70b9\u4e3a $P$, \u8ddd\u79bb $P$ \u6700\u8fd1\u7684\u56db\u4e2a\u70b9\u4e3a $Q_{11}$, $Q_{12}$, $Q_{21}$, $Q_{22}$, \u4e0e $P$ \u56f4\u6210\u7684\u9762\u79ef\u4e3a $S_{11}$, $S_{12}$, $S_{21}$, $S_{22}$, \u5206\u522b\u4ee5\u9ec4, \u7ea2, \u9752, \u6a59\u6807\u51fa. \u7531\u4e8e $S_{11} + S_{12} + S_{21} + S_{22} = 1$, \u56e0\u6b64\u6700\u7ec8\u6c42\u5f97\u7684 $P$ \u7684\u50cf\u7d20\u503c\u4e3a $$ P = Q_{11} \\times S_{22} + Q_{12} \\times S_{21} + Q_{21} \\times S_{12} + Q_{22} \\times S_{11} $$ \u4ee3\u7801\u5b9e\u73b0 \u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97, \u4e0b\u8ff0\u7a0b\u5e8f\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u77e9\u9635\u8fdb\u884c\u64cd\u4f5c. import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_mat_resized = np.empty((270, 480, im_mat.shape[2]), dtype=np.uint8) for r in range(im_mat_resized.shape[0]): for c in range(im_mat_resized.shape[1]): rr = (r + 1) / im_mat_resized.shape[0] * im_mat.shape[0] - 1 cc = (c + 1) / im_mat_resized.shape[1] * im_mat.shape[1] - 1 rr_int = int(rr) cc_int = int(cc) if rr == rr_int and cc == cc_int: p = im_mat[rr_int][cc_int] elif rr == rr_int: p = im_mat[rr_int][cc_int] * (cc_int + 1 - cc) + im_mat[rr_int][cc_int + 1] * (cc - cc_int) elif cc == cc_int: p = im_mat[rr_int][cc_int] * (rr_int + 1 - rr) + im_mat[rr_int + 1][cc_int] * (rr - rr_int) else: p11 = (rr_int, cc_int) p12 = (rr_int, cc_int + 1) p21 = (rr_int + 1, cc_int) p22 = (rr_int + 1, cc_int + 1) dr1 = rr - rr_int dr2 = rr_int + 1 - rr dc1 = cc - cc_int dc2 = cc_int + 1 - cc w11 = dr2 * dc2 w12 = dr2 * dc1 w21 = dr1 * dc2 w22 = dr1 * dc1 p = im_mat[p11[0]][p11[1]] * w11 + im_mat[p21[0]][p21[1]] * w12 + \\ im_mat[p12[0]][p12[1]] * w21 + im_mat[p22[0]][p22[1]] * w22 im_mat_resized[r][c] = p im_resized = PIL.Image.fromarray(im_mat_resized) im_resized.show() \u4f18\u5316 \u8be6\u89c1 https://en.wikipedia.org/wiki/Bilinear_interpolation","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7f29\u653e-\u53cc\u7ebf\u6027\u7b97\u6cd5"},{"location":"content/pil/resize_bilinear/#_1","text":"\u53cc\u7ebf\u6027\u63d2\u503c\u6cd5\u4e0e\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5\u7c7b\u4f3c, \u4e0d\u540c\u70b9\u662f\u53d6\u539f\u56fe\u50cf\u4e2d\u8ddd\u79bb\u76ee\u6807\u50cf\u7d20\u70b9\u6700\u8fd1\u7684 4 \u4e2a\u70b9, \u5e76\u5bf9\u8fd9 4 \u4e2a\u70b9\u4e0e\u5176\u5bf9\u5e94\u6743\u503c\u7684\u4e58\u79ef\u6c42\u548c, \u83b7\u5f97\u6700\u7ec8\u50cf\u7d20\u503c. \u5982\u4e0b\u56fe: \u76ee\u6807\u70b9\u4e3a $P$, \u8ddd\u79bb $P$ \u6700\u8fd1\u7684\u56db\u4e2a\u70b9\u4e3a $Q_{11}$, $Q_{12}$, $Q_{21}$, $Q_{22}$, \u4e0e $P$ \u56f4\u6210\u7684\u9762\u79ef\u4e3a $S_{11}$, $S_{12}$, $S_{21}$, $S_{22}$, \u5206\u522b\u4ee5\u9ec4, \u7ea2, \u9752, \u6a59\u6807\u51fa. \u7531\u4e8e $S_{11} + S_{12} + S_{21} + S_{22} = 1$, \u56e0\u6b64\u6700\u7ec8\u6c42\u5f97\u7684 $P$ \u7684\u50cf\u7d20\u503c\u4e3a $$ P = Q_{11} \\times S_{22} + Q_{12} \\times S_{21} + Q_{21} \\times S_{12} + Q_{22} \\times S_{11} $$","title":"\u53cc\u7ebf\u6027\u7b97\u6cd5"},{"location":"content/pil/resize_bilinear/#_2","text":"\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97, \u4e0b\u8ff0\u7a0b\u5e8f\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u77e9\u9635\u8fdb\u884c\u64cd\u4f5c. import numpy as np import PIL.Image import scipy.misc im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_mat_resized = np.empty((270, 480, im_mat.shape[2]), dtype=np.uint8) for r in range(im_mat_resized.shape[0]): for c in range(im_mat_resized.shape[1]): rr = (r + 1) / im_mat_resized.shape[0] * im_mat.shape[0] - 1 cc = (c + 1) / im_mat_resized.shape[1] * im_mat.shape[1] - 1 rr_int = int(rr) cc_int = int(cc) if rr == rr_int and cc == cc_int: p = im_mat[rr_int][cc_int] elif rr == rr_int: p = im_mat[rr_int][cc_int] * (cc_int + 1 - cc) + im_mat[rr_int][cc_int + 1] * (cc - cc_int) elif cc == cc_int: p = im_mat[rr_int][cc_int] * (rr_int + 1 - rr) + im_mat[rr_int + 1][cc_int] * (rr - rr_int) else: p11 = (rr_int, cc_int) p12 = (rr_int, cc_int + 1) p21 = (rr_int + 1, cc_int) p22 = (rr_int + 1, cc_int + 1) dr1 = rr - rr_int dr2 = rr_int + 1 - rr dc1 = cc - cc_int dc2 = cc_int + 1 - cc w11 = dr2 * dc2 w12 = dr2 * dc1 w21 = dr1 * dc2 w22 = dr1 * dc1 p = im_mat[p11[0]][p11[1]] * w11 + im_mat[p21[0]][p21[1]] * w12 + \\ im_mat[p12[0]][p12[1]] * w21 + im_mat[p22[0]][p22[1]] * w22 im_mat_resized[r][c] = p im_resized = PIL.Image.fromarray(im_mat_resized) im_resized.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/resize_bilinear/#_3","text":"\u8be6\u89c1 https://en.wikipedia.org/wiki/Bilinear_interpolation","title":"\u4f18\u5316"},{"location":"content/pil/resize_nearst/","text":"\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5 \u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d, \u56fe\u50cf\u7f29\u653e\u6307\u7684\u662f\u901a\u8fc7\u589e\u52a0\u6216\u53bb\u6389\u50cf\u7d20\u6765\u6539\u53d8\u56fe\u7247\u7684\u5c3a\u5bf8. \u7531\u4e8e\u8981\u5728\u6548\u7387\u548c\u56fe\u50cf\u8d28\u91cf\u6bd4\u5982\u5e73\u6ed1\u5ea6\u548c\u6e05\u6670\u5ea6\u4e4b\u95f4\u505a\u6298\u8877, \u56fe\u50cf\u7f29\u653e\u5e76\u4e0d\u662f\u4e2a\u5e73\u5eb8\u7684\u8fc7\u7a0b. \u5f53\u56fe\u50cf\u5c3a\u5bf8\u589e\u5927\u7684\u65f6\u5019, \u7ec4\u6210\u56fe\u50cf\u7684\u50cf\u7d20\u4e5f\u8d8a\u6765\u8d8a\u5927, \u56fe\u50cf\u770b\u4e0a\u53bb\u5c31\u53d8\"\u67d4\u548c\"\u4e86. \u800c\u7f29\u5c0f\u56fe\u50cf\u7684\u65f6\u5019, \u56fe\u50cf\u5c31\u53d8\u5f97\u5e73\u6ed1\u548c\u6e05\u6670\u4e86. \u672c\u6587\u4ecb\u7ecd\u6700\u7b80\u5355\u7684 \u6700\u8fd1\u90bb\u63d2\u503c\u6cd5(Nearest-neighbor interpolation) . \u539f\u7406 \u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u662f\u5c06\u76ee\u6807\u56fe\u50cf\u5404\u70b9\u7684\u50cf\u7d20\u503c\u8bbe\u4e3a\u539f\u56fe\u50cf\u4e2d\u4e0e\u5176\u6700\u8fd1\u7684\u70b9. \u5047\u8bbe\u539f\u56fe\u7684\u5927\u5c0f\u4e3a (w0, h0) , \u5750\u6807\u4ee5 (x0, y0) \u63cf\u8ff0, \u7f29\u653e\u540e\u7684\u56fe\u50cf\u5927\u5c0f\u4e3a (w1, h1) , \u5750\u6807\u4ee5 (x1, y1) \u63cf\u8ff0, \u5219\u6709 $$ \\begin{cases} \\frac{x_1 + 1}{x_0 + 1} = \\frac{w_1}{w_0} \\\\ \\frac{y_1 + 1}{y_0 + 1} = \\frac{h_1}{h_0} \\end{cases} $$ \u4ee3\u7801\u5b9e\u73b0 import PIL.Image im = PIL.Image.open('/img/jp.jpg') im_resized = PIL.Image.new(im.mode, (480, 270)) for r in range(im_resized.size[1]): for c in range(im_resized.size[0]): rr = round((r+1) / im_resized.size[1] * im.size[1]) - 1 cc = round((c+1) / im_resized.size[0] * im.size[0]) - 1 im_resized.putpixel((c, r), im.getpixel((cc, rr))) im_resized.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7f29\u653e-\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5"},{"location":"content/pil/resize_nearst/#_1","text":"\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d, \u56fe\u50cf\u7f29\u653e\u6307\u7684\u662f\u901a\u8fc7\u589e\u52a0\u6216\u53bb\u6389\u50cf\u7d20\u6765\u6539\u53d8\u56fe\u7247\u7684\u5c3a\u5bf8. \u7531\u4e8e\u8981\u5728\u6548\u7387\u548c\u56fe\u50cf\u8d28\u91cf\u6bd4\u5982\u5e73\u6ed1\u5ea6\u548c\u6e05\u6670\u5ea6\u4e4b\u95f4\u505a\u6298\u8877, \u56fe\u50cf\u7f29\u653e\u5e76\u4e0d\u662f\u4e2a\u5e73\u5eb8\u7684\u8fc7\u7a0b. \u5f53\u56fe\u50cf\u5c3a\u5bf8\u589e\u5927\u7684\u65f6\u5019, \u7ec4\u6210\u56fe\u50cf\u7684\u50cf\u7d20\u4e5f\u8d8a\u6765\u8d8a\u5927, \u56fe\u50cf\u770b\u4e0a\u53bb\u5c31\u53d8\"\u67d4\u548c\"\u4e86. \u800c\u7f29\u5c0f\u56fe\u50cf\u7684\u65f6\u5019, \u56fe\u50cf\u5c31\u53d8\u5f97\u5e73\u6ed1\u548c\u6e05\u6670\u4e86. \u672c\u6587\u4ecb\u7ecd\u6700\u7b80\u5355\u7684 \u6700\u8fd1\u90bb\u63d2\u503c\u6cd5(Nearest-neighbor interpolation) .","title":"\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5"},{"location":"content/pil/resize_nearst/#_2","text":"\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u662f\u5c06\u76ee\u6807\u56fe\u50cf\u5404\u70b9\u7684\u50cf\u7d20\u503c\u8bbe\u4e3a\u539f\u56fe\u50cf\u4e2d\u4e0e\u5176\u6700\u8fd1\u7684\u70b9. \u5047\u8bbe\u539f\u56fe\u7684\u5927\u5c0f\u4e3a (w0, h0) , \u5750\u6807\u4ee5 (x0, y0) \u63cf\u8ff0, \u7f29\u653e\u540e\u7684\u56fe\u50cf\u5927\u5c0f\u4e3a (w1, h1) , \u5750\u6807\u4ee5 (x1, y1) \u63cf\u8ff0, \u5219\u6709 $$ \\begin{cases} \\frac{x_1 + 1}{x_0 + 1} = \\frac{w_1}{w_0} \\\\ \\frac{y_1 + 1}{y_0 + 1} = \\frac{h_1}{h_0} \\end{cases} $$","title":"\u539f\u7406"},{"location":"content/pil/resize_nearst/#_3","text":"import PIL.Image im = PIL.Image.open('/img/jp.jpg') im_resized = PIL.Image.new(im.mode, (480, 270)) for r in range(im_resized.size[1]): for c in range(im_resized.size[0]): rr = round((r+1) / im_resized.size[1] * im.size[1]) - 1 cc = round((c+1) / im_resized.size[0] * im.size[0]) - 1 im_resized.putpixel((c, r), im.getpixel((cc, rr))) im_resized.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/resize_nearst_ghost/","text":"\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u7684\u5e7d\u7075\u4e8b\u4ef6 \u5f53\u901a\u8fc7\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u5bf9\u56fe\u7247\u8fdb\u884c\u7f29\u653e\u7684\u65f6\u5019, \u76ee\u6807\u56fe\u50cf\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6765\u6e90\u4e8e\u539f\u56fe\u50cf\u7684\u5bf9\u5e94\u4f4d\u7f6e\u50cf\u7d20 . \u8fd9\u53ef\u80fd\u4f1a\u9020\u6210\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c.\u8003\u8651\u5982\u4e0b\u56fe\u7247, \u8be5\u56fe\u50cf\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u522b, \u4f46\u5bf9\u8be5\u56fe\u50cf\u8fdb\u884c\u7f29\u653e\u65f6: import PIL.Image im = PIL.Image.open('/img/jp_ghost.bmp') im = im.resize((im.size[0] // 2, im.size[1] // 2), PIL.Image.NEAREST) im.show() \u957f\u5bbd\u5747\u7f29\u653e 1/2 \u540e\u7684\u56fe\u7247\u5982\u4e0b: \u539f\u56fe\u53d8\u6210\u4e86\u4e00\u5f20\u989c\u8272\u4e3a (99, 97, 101) \u7684\u7eaf\u8272\u56fe\u7247. \u5206\u6790 \u5728\u4f7f\u7528\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u7f29\u653e\u7684\u65f6\u5019, \u539f\u56fe\u4e2d\u7279\u5b9a\u7684\u50cf\u7d20\u70b9\u5c06\u7ec4\u5408\u6210\u65b0\u7684\u56fe\u7247. \u56e0\u6b64\u53ea\u9700\u8981\u63a7\u5236\u539f\u56fe\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\u7684\u50cf\u7d20\u70b9, \u5c31\u80fd\u63a7\u5236\u7f29\u653e\u540e\u751f\u6210\u7684\u56fe\u50cf. \u5c06\u539f\u56fe\u653e\u5927, \u89c2\u5bdf\u5230\u5982\u4e0b\u7ed3\u6784, \u53ef\u4ee5\u770b\u5230\u5927\u91cf\u89c4\u5219\u6392\u5217\u7684 (99, 97, 101) \u50cf\u7d20\u70b9\u8986\u76d6\u4e86\u6574\u4e2a\u539f\u56fe. \u5f53\u7f29\u653e\u81f3 1/2 \u65f6, \u8fd9\u4e9b\u50cf\u7d20\u70b9\u88ab\u53d6\u51fa\u5e76\u7ec4\u5408\u6210\u4e86\u65b0\u7684\u56fe\u50cf. \u5176\u4e2d (99, 97, 101) \u662f\u539f\u56fe\u7684 \u56fe\u50cf\u5747\u503c . \u6ce8: \u751f\u6210\u5e7d\u7075\u56fe\u7247\u7684\u4ee3\u7801\u5982\u4e0b: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean mean = tuple(int(e) for e in mean) for x in range(im.size[0] // 2): for y in range(im.size[1] // 2): im.putpixel((2 * x + 1, 2 * y + 1), mean) im.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7f29\u653e-\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5\u7684\u5e7d\u7075\u4e8b\u4ef6"},{"location":"content/pil/resize_nearst_ghost/#_1","text":"\u5f53\u901a\u8fc7\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u5bf9\u56fe\u7247\u8fdb\u884c\u7f29\u653e\u7684\u65f6\u5019, \u76ee\u6807\u56fe\u50cf\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6765\u6e90\u4e8e\u539f\u56fe\u50cf\u7684\u5bf9\u5e94\u4f4d\u7f6e\u50cf\u7d20 . \u8fd9\u53ef\u80fd\u4f1a\u9020\u6210\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c.\u8003\u8651\u5982\u4e0b\u56fe\u7247, \u8be5\u56fe\u50cf\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u522b, \u4f46\u5bf9\u8be5\u56fe\u50cf\u8fdb\u884c\u7f29\u653e\u65f6: import PIL.Image im = PIL.Image.open('/img/jp_ghost.bmp') im = im.resize((im.size[0] // 2, im.size[1] // 2), PIL.Image.NEAREST) im.show() \u957f\u5bbd\u5747\u7f29\u653e 1/2 \u540e\u7684\u56fe\u7247\u5982\u4e0b: \u539f\u56fe\u53d8\u6210\u4e86\u4e00\u5f20\u989c\u8272\u4e3a (99, 97, 101) \u7684\u7eaf\u8272\u56fe\u7247.","title":"\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u7684\u5e7d\u7075\u4e8b\u4ef6"},{"location":"content/pil/resize_nearst_ghost/#_2","text":"\u5728\u4f7f\u7528\u8fd1\u90bb\u53d6\u6837\u63d2\u503c\u6cd5\u7f29\u653e\u7684\u65f6\u5019, \u539f\u56fe\u4e2d\u7279\u5b9a\u7684\u50cf\u7d20\u70b9\u5c06\u7ec4\u5408\u6210\u65b0\u7684\u56fe\u7247. \u56e0\u6b64\u53ea\u9700\u8981\u63a7\u5236\u539f\u56fe\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\u7684\u50cf\u7d20\u70b9, \u5c31\u80fd\u63a7\u5236\u7f29\u653e\u540e\u751f\u6210\u7684\u56fe\u50cf. \u5c06\u539f\u56fe\u653e\u5927, \u89c2\u5bdf\u5230\u5982\u4e0b\u7ed3\u6784, \u53ef\u4ee5\u770b\u5230\u5927\u91cf\u89c4\u5219\u6392\u5217\u7684 (99, 97, 101) \u50cf\u7d20\u70b9\u8986\u76d6\u4e86\u6574\u4e2a\u539f\u56fe. \u5f53\u7f29\u653e\u81f3 1/2 \u65f6, \u8fd9\u4e9b\u50cf\u7d20\u70b9\u88ab\u53d6\u51fa\u5e76\u7ec4\u5408\u6210\u4e86\u65b0\u7684\u56fe\u50cf. \u5176\u4e2d (99, 97, 101) \u662f\u539f\u56fe\u7684 \u56fe\u50cf\u5747\u503c . \u6ce8: \u751f\u6210\u5e7d\u7075\u56fe\u7247\u7684\u4ee3\u7801\u5982\u4e0b: import PIL.Image import PIL.ImageStat im = PIL.Image.open('/img/jp.jpg') mean = PIL.ImageStat.Stat(im).mean mean = tuple(int(e) for e in mean) for x in range(im.size[0] // 2): for y in range(im.size[1] // 2): im.putpixel((2 * x + 1, 2 * y + 1), mean) im.show()","title":"\u5206\u6790"},{"location":"content/pil/safe_color/","text":"216 \u5b89\u5168\u8272 \u867d\u7136\u76ee\u524d\u663e\u793a\u5668, \u663e\u5361\u63d0\u4f9b 24 \u6bd4\u7279\u7684 RGB \u56fe\u50cf\u7684\u5408\u7406\u7684\u5f69\u8272\u518d\u73b0, \u4f46\u4eca\u5929\u6240\u7528\u7684\u7cfb\u7edf\u5f88\u591a\u4ecd\u7136\u5c40\u9650\u4e8e 256 \u79cd\u989c\u8272. \u989c\u8272\u7684\u663e\u793a\u4e0e\u89c2\u5bdf\u8005\u786c\u4ef6\u65e0\u5173\u662f\u975e\u5e38\u91cd\u8981\u7684, \u8fd9\u79cd\u989c\u8272\u5b50\u96c6\u79f0\u4e3a \u5b89\u5168\u8272 . \u5176\u4e2d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u662f 216 \u79cd\u5b89\u5168\u8272. \u5b89\u5168\u8272\u8981\u6c42 RGB \u4e09\u4e2a\u901a\u9053\u5206\u91cf\u53ea\u80fd\u7531 0x00 , 0x33 , 0x66 , 0x99 , 0xCC , 0xFF \u6784\u6210, \u56e0\u6b64\u603b\u8ba1 $$6^3 = 216$$ \u79cd\u989c\u8272.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u5b89\u5168\u8272"},{"location":"content/pil/safe_color/#216","text":"\u867d\u7136\u76ee\u524d\u663e\u793a\u5668, \u663e\u5361\u63d0\u4f9b 24 \u6bd4\u7279\u7684 RGB \u56fe\u50cf\u7684\u5408\u7406\u7684\u5f69\u8272\u518d\u73b0, \u4f46\u4eca\u5929\u6240\u7528\u7684\u7cfb\u7edf\u5f88\u591a\u4ecd\u7136\u5c40\u9650\u4e8e 256 \u79cd\u989c\u8272. \u989c\u8272\u7684\u663e\u793a\u4e0e\u89c2\u5bdf\u8005\u786c\u4ef6\u65e0\u5173\u662f\u975e\u5e38\u91cd\u8981\u7684, \u8fd9\u79cd\u989c\u8272\u5b50\u96c6\u79f0\u4e3a \u5b89\u5168\u8272 . \u5176\u4e2d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u662f 216 \u79cd\u5b89\u5168\u8272. \u5b89\u5168\u8272\u8981\u6c42 RGB \u4e09\u4e2a\u901a\u9053\u5206\u91cf\u53ea\u80fd\u7531 0x00 , 0x33 , 0x66 , 0x99 , 0xCC , 0xFF \u6784\u6210, \u56e0\u6b64\u603b\u8ba1 $$6^3 = 216$$ \u79cd\u989c\u8272.","title":"216 \u5b89\u5168\u8272"},{"location":"content/pil/spatial_filter/","text":"\u7a7a\u95f4\u6ee4\u6ce2\u57fa\u7840 \u67d0\u4e9b\u90bb\u57df\u5904\u7406\u5de5\u4f5c\u662f\u64cd\u4f5c\u90bb\u57df\u7684\u56fe\u50cf\u50cf\u7d20\u503c\u4ee5\u53ca\u76f8\u5e94\u7684\u4e0e\u90bb\u57df\u6709\u76f8\u540c\u7ef4\u6570\u7684\u5b50\u56fe\u50cf\u7684\u503c. \u8fd9\u4e9b\u5b50\u56fe\u50cf\u53ef\u4ee5\u88ab\u79f0\u4e3a \u6ee4\u6ce2\u5668 , \u63a9\u6a21 , \u6838 , \u6a21\u677f \u6216 \u7a97\u53e3 . \u5728\u6ee4\u6ce2\u5668\u5b50\u56fe\u50cf\u4e2d\u7684\u503c\u662f\u7cfb\u6570, \u800c\u4e0d\u662f\u50cf\u7d20\u503c. \u7a7a\u95f4\u6ee4\u6ce2\u7684\u673a\u7406\u5c31\u662f\u5728\u5f85\u5904\u7406\u56fe\u50cf\u4e0a\u9010\u70b9\u5730\u79fb\u52a8\u63a9\u6a21. \u5728\u6bcf\u4e00\u70b9, \u6ee4\u6ce2\u5668\u7684\u54cd\u5e94\u901a\u8fc7\u4e8b\u5148\u5b9a\u4e49\u7684\u5173\u7cfb\u6765\u8ba1\u7b97. \u5bf9\u4e8e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2, \u5176\u76f8\u5e94\u7531\u6ee4\u6ce2\u5668\u7cfb\u6570\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u626b\u8fc7\u533a\u57df\u7684\u76f8\u5e94\u50cf\u7d20\u503c\u7684\u4e58\u79ef\u4e4b\u548c\u7ed9\u51fa. \u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5904\u7406\u7ecf\u5e38\u88ab\u79f0\u4e3a\"\u63a9\u6a21\u4e0e\u56fe\u50cf\u7684\u5377\u79ef\", \u7c7b\u4f3c\u7684, \u6ee4\u6ce2\u6a21\u677f\u6709\u65f6\u4e5f\u6210\u4e3a\"\u5377\u79ef\u6a21\u677f\", \"\u5377\u79ef\u6838\" \u4e00\u8bcd\u4e5f\u5e38\u7528\u4e8e\u6b64. \u5b9e\u73b0\u7a7a\u95f4\u6ee4\u6ce2\u90bb\u57df\u5904\u7406\u65f6\u7684\u4e00\u4e2a\u91cd\u8981\u8003\u8651\u56e0\u7d20\u5c31\u662f \u6ee4\u6ce2\u4e2d\u5fc3\u9760\u8fd1\u56fe\u50cf\u8f6e\u5eca\u65f6\u53d1\u751f\u7684\u60c5\u51b5 . \u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u5927\u5c0f\u4e3a n * n \u7684\u65b9\u5f62\u63a9\u6a21, \u5f53\u63a9\u6a21\u4e2d\u5fc3\u8ddd\u79bb\u56fe\u50cf\u8fb9\u7f18\u4e3a (n-1)/2 \u4e2a\u50cf\u7d20\u65f6, \u8be5\u63a9\u6a21\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0e\u56fe\u50cf\u8f6e\u5ed3\u76f8\u91cd\u5408. \u5982\u679c\u63a9\u6a21\u7684\u4e2d\u5fc3\u7ee7\u7eed\u5411\u56fe\u50cf\u8fb9\u7f18\u9760\u8fd1,\u90a3\u4e48\u63a9\u6a21\u7684\u884c\u6216\u5217\u5c31\u4f1a\u5904\u4e8e\u56fe\u50cf\u5e73\u9762\u4e4b\u5916. \u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u8fd9\u79cd\u95ee\u9898. \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5c06\u63a9\u6a21\u4e2d\u5fc3\u70b9\u7684\u79fb\u52a8\u8303\u56f4\u9650\u5236\u5728\u8ddd\u79bb\u56fe\u50cf\u8fb9\u7f18\u4e0d\u5c0f\u4e8e (n-1)/2\u4e2a\u50cf\u7d20\u5904. \u8fd9\u79cd\u505a\u6cd5\u5c06\u4f7f\u5904\u7406\u540e\u7684\u56fe\u50cf\u6bd4\u539f\u59cb\u56fe\u50cf\u7a0d\u5c0f, \u4f46\u6ee4\u6ce2\u540e\u7684\u56fe\u50cf\u4e2d\u7684\u6240\u6709\u50cf\u7d20\u70b9\u90fd\u7531\u6574\u4e2a\u63a9\u6a21\u5904\u7406. \u5982\u679c\u8981\u6c42\u5904\u7406\u540e\u7684\u8f93\u51fa\u56fe\u50cf\u4e0e\u539f\u59cb\u56fe\u50cf\u4e00\u6837\u5927, \u90a3\u4e48\u6240\u91c7\u7528\u7684\u5178\u578b\u65b9\u6cd5\u662f, \u7528\u5168\u90e8\u5305\u542b\u4e8e\u56fe\u50cf\u4e2d\u7684\u63a9\u6a21\u90e8\u5206\u6ee4\u6ce2\u6240\u6709\u50cf\u7d20. \u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5, \u56fe\u50cf\u9760\u8fd1\u8fb9\u7f18\u90e8\u5206\u7684\u50cf\u7d20\u5e26\u5c06\u7528\u90e8\u5206\u6ee4\u6ce2\u63a9\u6a21\u6765\u5904\u7406. \u53e6\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u5728\u56fe\u50cf\u8fb9\u7f18\u4ee5\u5916\u518d\u8865\u4e0a\u4e00\u884c\u548c\u4e00\u5217\u7070\u5ea6\u4e3a\u96f6\u7684\u50cf\u7d20\u70b9(\u5176\u7070\u5ea6\u4e5f\u53ef\u4ee5\u4e3a\u5176\u4ed6\u5e38\u503c), \u6216\u8005\u5c06\u8fb9\u7f18\u590d\u5236\u8865\u5728\u56fe\u50cf\u4e4b\u5916. \u8865\u4e0a\u7684\u90a3\u90e8\u5206\u7ecf\u8fc7\u5904\u7406\u540e\u53bb\u9664. \u8fd9\u79cd\u65b9\u6cd5\u4fdd\u6301\u4e86\u5904\u73b0\u540e\u7684\u56fe\u50cf\u5f13\u539f\u59cb\u56fe\u50cf\u5c3a\u5bf8\u5927\u5c0f\u76f8\u7b49, \u4f46\u662f\u8865\u5728\u9760\u8fd1\u56fe\u50cf\u8fb9\u7f18\u7684\u90e8\u5206\u4f1a\u5e26\u6765\u4e0d\u826f\u5f71\u54cd, \u8fd9\u79cd\u5f71\u54cd\u968f\u7740\u63a9\u6a21\u5c3a\u5bf8\u7684\u589e\u52a0\u800c\u589e\u5927. \u603b\u4e4b, \u83b7\u5f97\u6700\u4f73\u6ee4\u6ce2\u6548\u679c\u7684\u60df\u4e00\u65b9\u6cd5\u662f\u4f7f\u6ee4\u6ce2\u63a9\u6a21\u5c6e\u5fc3\u8ddd\u539f\u56fe\u50cf\u8fb9\u7f18\u7684\u8ddd\u79bb\u4e0d\u5c0f\u4e8e (n-1)/2 \u4e2a\u50cf\u7d20.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7a7a\u95f4\u6ee4\u6ce2\u57fa\u7840"},{"location":"content/pil/spatial_filter/#_1","text":"\u67d0\u4e9b\u90bb\u57df\u5904\u7406\u5de5\u4f5c\u662f\u64cd\u4f5c\u90bb\u57df\u7684\u56fe\u50cf\u50cf\u7d20\u503c\u4ee5\u53ca\u76f8\u5e94\u7684\u4e0e\u90bb\u57df\u6709\u76f8\u540c\u7ef4\u6570\u7684\u5b50\u56fe\u50cf\u7684\u503c. \u8fd9\u4e9b\u5b50\u56fe\u50cf\u53ef\u4ee5\u88ab\u79f0\u4e3a \u6ee4\u6ce2\u5668 , \u63a9\u6a21 , \u6838 , \u6a21\u677f \u6216 \u7a97\u53e3 . \u5728\u6ee4\u6ce2\u5668\u5b50\u56fe\u50cf\u4e2d\u7684\u503c\u662f\u7cfb\u6570, \u800c\u4e0d\u662f\u50cf\u7d20\u503c. \u7a7a\u95f4\u6ee4\u6ce2\u7684\u673a\u7406\u5c31\u662f\u5728\u5f85\u5904\u7406\u56fe\u50cf\u4e0a\u9010\u70b9\u5730\u79fb\u52a8\u63a9\u6a21. \u5728\u6bcf\u4e00\u70b9, \u6ee4\u6ce2\u5668\u7684\u54cd\u5e94\u901a\u8fc7\u4e8b\u5148\u5b9a\u4e49\u7684\u5173\u7cfb\u6765\u8ba1\u7b97. \u5bf9\u4e8e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2, \u5176\u76f8\u5e94\u7531\u6ee4\u6ce2\u5668\u7cfb\u6570\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u626b\u8fc7\u533a\u57df\u7684\u76f8\u5e94\u50cf\u7d20\u503c\u7684\u4e58\u79ef\u4e4b\u548c\u7ed9\u51fa. \u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5904\u7406\u7ecf\u5e38\u88ab\u79f0\u4e3a\"\u63a9\u6a21\u4e0e\u56fe\u50cf\u7684\u5377\u79ef\", \u7c7b\u4f3c\u7684, \u6ee4\u6ce2\u6a21\u677f\u6709\u65f6\u4e5f\u6210\u4e3a\"\u5377\u79ef\u6a21\u677f\", \"\u5377\u79ef\u6838\" \u4e00\u8bcd\u4e5f\u5e38\u7528\u4e8e\u6b64. \u5b9e\u73b0\u7a7a\u95f4\u6ee4\u6ce2\u90bb\u57df\u5904\u7406\u65f6\u7684\u4e00\u4e2a\u91cd\u8981\u8003\u8651\u56e0\u7d20\u5c31\u662f \u6ee4\u6ce2\u4e2d\u5fc3\u9760\u8fd1\u56fe\u50cf\u8f6e\u5eca\u65f6\u53d1\u751f\u7684\u60c5\u51b5 . \u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u5927\u5c0f\u4e3a n * n \u7684\u65b9\u5f62\u63a9\u6a21, \u5f53\u63a9\u6a21\u4e2d\u5fc3\u8ddd\u79bb\u56fe\u50cf\u8fb9\u7f18\u4e3a (n-1)/2 \u4e2a\u50cf\u7d20\u65f6, \u8be5\u63a9\u6a21\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0e\u56fe\u50cf\u8f6e\u5ed3\u76f8\u91cd\u5408. \u5982\u679c\u63a9\u6a21\u7684\u4e2d\u5fc3\u7ee7\u7eed\u5411\u56fe\u50cf\u8fb9\u7f18\u9760\u8fd1,\u90a3\u4e48\u63a9\u6a21\u7684\u884c\u6216\u5217\u5c31\u4f1a\u5904\u4e8e\u56fe\u50cf\u5e73\u9762\u4e4b\u5916. \u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u8fd9\u79cd\u95ee\u9898. \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5c06\u63a9\u6a21\u4e2d\u5fc3\u70b9\u7684\u79fb\u52a8\u8303\u56f4\u9650\u5236\u5728\u8ddd\u79bb\u56fe\u50cf\u8fb9\u7f18\u4e0d\u5c0f\u4e8e (n-1)/2\u4e2a\u50cf\u7d20\u5904. \u8fd9\u79cd\u505a\u6cd5\u5c06\u4f7f\u5904\u7406\u540e\u7684\u56fe\u50cf\u6bd4\u539f\u59cb\u56fe\u50cf\u7a0d\u5c0f, \u4f46\u6ee4\u6ce2\u540e\u7684\u56fe\u50cf\u4e2d\u7684\u6240\u6709\u50cf\u7d20\u70b9\u90fd\u7531\u6574\u4e2a\u63a9\u6a21\u5904\u7406. \u5982\u679c\u8981\u6c42\u5904\u7406\u540e\u7684\u8f93\u51fa\u56fe\u50cf\u4e0e\u539f\u59cb\u56fe\u50cf\u4e00\u6837\u5927, \u90a3\u4e48\u6240\u91c7\u7528\u7684\u5178\u578b\u65b9\u6cd5\u662f, \u7528\u5168\u90e8\u5305\u542b\u4e8e\u56fe\u50cf\u4e2d\u7684\u63a9\u6a21\u90e8\u5206\u6ee4\u6ce2\u6240\u6709\u50cf\u7d20. \u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5, \u56fe\u50cf\u9760\u8fd1\u8fb9\u7f18\u90e8\u5206\u7684\u50cf\u7d20\u5e26\u5c06\u7528\u90e8\u5206\u6ee4\u6ce2\u63a9\u6a21\u6765\u5904\u7406. \u53e6\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u5728\u56fe\u50cf\u8fb9\u7f18\u4ee5\u5916\u518d\u8865\u4e0a\u4e00\u884c\u548c\u4e00\u5217\u7070\u5ea6\u4e3a\u96f6\u7684\u50cf\u7d20\u70b9(\u5176\u7070\u5ea6\u4e5f\u53ef\u4ee5\u4e3a\u5176\u4ed6\u5e38\u503c), \u6216\u8005\u5c06\u8fb9\u7f18\u590d\u5236\u8865\u5728\u56fe\u50cf\u4e4b\u5916. \u8865\u4e0a\u7684\u90a3\u90e8\u5206\u7ecf\u8fc7\u5904\u7406\u540e\u53bb\u9664. \u8fd9\u79cd\u65b9\u6cd5\u4fdd\u6301\u4e86\u5904\u73b0\u540e\u7684\u56fe\u50cf\u5f13\u539f\u59cb\u56fe\u50cf\u5c3a\u5bf8\u5927\u5c0f\u76f8\u7b49, \u4f46\u662f\u8865\u5728\u9760\u8fd1\u56fe\u50cf\u8fb9\u7f18\u7684\u90e8\u5206\u4f1a\u5e26\u6765\u4e0d\u826f\u5f71\u54cd, \u8fd9\u79cd\u5f71\u54cd\u968f\u7740\u63a9\u6a21\u5c3a\u5bf8\u7684\u589e\u52a0\u800c\u589e\u5927. \u603b\u4e4b, \u83b7\u5f97\u6700\u4f73\u6ee4\u6ce2\u6548\u679c\u7684\u60df\u4e00\u65b9\u6cd5\u662f\u4f7f\u6ee4\u6ce2\u63a9\u6a21\u5c6e\u5fc3\u8ddd\u539f\u56fe\u50cf\u8fb9\u7f18\u7684\u8ddd\u79bb\u4e0d\u5c0f\u4e8e (n-1)/2 \u4e2a\u50cf\u7d20.","title":"\u7a7a\u95f4\u6ee4\u6ce2\u57fa\u7840"},{"location":"content/pil/spatial_filter_gaussian_blur/","text":"\u9ad8\u65af\u6a21\u7cca \u9ad8\u65af\u6a21\u7cca(\u82f1\u8bed: Gaussian Blur), \u4e5f\u53eb\u9ad8\u65af\u5e73\u6ed1, \u662f\u5728 Adobe Photoshop, GIMP \u4ee5\u53ca Paint.NET \u7b49\u56fe\u50cf\u5904\u7406\u8f6f\u4ef6\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u5904\u7406\u6548\u679c, \u901a\u5e38\u7528\u5b83\u6765\u51cf\u5c11\u56fe\u50cf\u566a\u58f0\u4ee5\u53ca\u964d\u4f4e\u7ec6\u8282\u5c42\u6b21. \u8fd9\u79cd\u6a21\u7cca\u6280\u672f\u751f\u6210\u7684\u56fe\u50cf, \u5176\u89c6\u89c9\u6548\u679c\u5c31\u50cf\u662f\u7ecf\u8fc7\u4e00\u4e2a\u534a\u900f\u660e\u5c4f\u5e55\u5728\u89c2\u5bdf\u56fe\u50cf, \u8fd9\u4e0e\u955c\u5934\u7126\u5916\u6210\u50cf\u6548\u679c\u6563\u666f\u4ee5\u53ca\u666e\u901a\u7167\u660e\u9634\u5f71\u4e2d\u7684\u6548\u679c\u90fd\u660e\u663e\u4e0d\u540c. \u9ad8\u65af\u5e73\u6ed1\u4e5f\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u7b97\u6cd5\u4e2d\u7684\u9884\u5148\u5904\u7406\u9636\u6bb5, \u4ee5\u589e\u5f3a\u56fe\u50cf\u5728\u4e0d\u540c\u6bd4\u4f8b\u5927\u5c0f\u4e0b\u7684\u56fe\u50cf\u6548\u679c(\u53c2\u89c1\u5c3a\u5ea6\u7a7a\u95f4\u8868\u793a\u4ee5\u53ca\u5c3a\u5ea6\u7a7a\u95f4\u5b9e\u73b0). \u4ece\u6570\u5b66\u7684\u89d2\u5ea6\u6765\u770b, \u56fe\u50cf\u7684\u9ad8\u65af\u6a21\u7cca\u8fc7\u7a0b\u5c31\u662f\u56fe\u50cf\u4e0e\u6b63\u6001\u5206\u5e03\u505a\u5377\u79ef. \u7531\u4e8e\u6b63\u6001\u5206\u5e03\u53c8\u53eb\u4f5c\u9ad8\u65af\u5206\u5e03, \u6240\u4ee5\u8fd9\u9879\u6280\u672f\u5c31\u53eb\u4f5c\u9ad8\u65af\u6a21\u7cca. \u56fe\u50cf\u4e0e\u5706\u5f62\u65b9\u6846\u6a21\u7cca\u505a\u5377\u79ef\u5c06\u4f1a\u751f\u6210\u66f4\u52a0\u7cbe\u786e\u7684\u7126\u5916\u6210\u50cf\u6548\u679c. \u7531\u4e8e\u9ad8\u65af\u51fd\u6570\u7684\u5085\u7acb\u53f6\u53d8\u6362\u662f\u53e6\u5916\u4e00\u4e2a\u9ad8\u65af\u51fd\u6570, \u6240\u4ee5\u9ad8\u65af\u6a21\u7cca\u5bf9\u4e8e\u56fe\u50cf\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u4f4e\u901a\u6ee4\u6ce2\u5668. \u6548\u679c\u5c55\u793a \u673a\u7406 \u9ad8\u65af\u6a21\u7cca\u662f\u4e00\u79cd\u56fe\u50cf\u6a21\u7cca\u6ee4\u6ce2\u5668, \u5b83\u7528\u6b63\u6001\u5206\u5e03\u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u53d8\u6362. N\u7ef4\u7a7a\u95f4\u6b63\u6001\u5206\u5e03\u65b9\u7a0b\u4e3a $$ G(r) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}^N}e^{-r^2 / 2\\sigma^2} $$ \u5728\u4e8c\u7ef4\u7a7a\u95f4\u5b9a\u4e49\u4e3a $$ G(r) = \\frac{1}{2\\pi\\sigma^2}e^{-(u^2 + v^2) / 2\\sigma^2} $$ \u5176\u4e2d r \u662f\u6a21\u7cca\u534a\u5f84 $r^2 = u^2 + v^2$, \u03c3 \u662f\u6b63\u6001\u5206\u5e03\u7684\u6807\u51c6\u504f\u5dee. \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d, \u8fd9\u4e2a\u516c\u5f0f\u751f\u6210\u7684\u66f2\u9762\u7684\u7b49\u9ad8\u7ebf\u662f\u4ece\u4e2d\u5fc3\u5f00\u59cb\u5448\u6b63\u6001\u5206\u5e03\u7684\u540c\u5fc3\u5706. \u5206\u5e03\u4e0d\u4e3a\u96f6\u7684\u50cf\u7d20\u7ec4\u6210\u7684\u5377\u79ef\u77e9\u9635\u4e0e\u539f\u59cb\u56fe\u50cf\u505a\u53d8\u6362. \u6bcf\u4e2a\u50cf\u7d20\u7684\u503c\u90fd\u662f\u5468\u56f4\u76f8\u90bb\u50cf\u7d20\u503c\u7684\u52a0\u6743\u5e73\u5747. \u539f\u59cb\u50cf\u7d20\u7684\u503c\u6709\u6700\u5927\u7684\u9ad8\u65af\u5206\u5e03\u503c, \u6240\u4ee5\u6709\u6700\u5927\u7684\u6743\u91cd, \u76f8\u90bb\u50cf\u7d20\u968f\u7740\u8ddd\u79bb\u539f\u59cb\u50cf\u7d20\u8d8a\u6765\u8d8a\u8fdc, \u5176\u6743\u91cd\u4e5f\u8d8a\u6765\u8d8a\u5c0f. \u8fd9\u6837\u8fdb\u884c\u6a21\u7cca\u5904\u7406\u6bd4\u5176\u5b83\u7684\u5747\u8861\u6a21\u7cca\u6ee4\u6ce2\u5668\u66f4\u9ad8\u5730\u4fdd\u7559\u4e86\u8fb9\u7f18\u6548\u679c. \u03c3 \u503c\u4ecb\u7ecd \u5c3a\u5ea6\u53c2\u6570 \u03c3 \u51b3\u5b9a\u4e86\u5206\u5e03\u5e45\u5ea6, \u4ee5\u4e0b\u662f\u4e0d\u540c\u5c3a\u5ea6\u53c2\u6570 \u03c3 \u7684\u4e00\u7ef4\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u56fe\u50cf, \u5728\u9ad8\u65af\u6a21\u7cca\u5904\u7406\u4e2d, \u03c3 \u5e38\u53d6 1.5. \u6807\u51c6\u6b63\u6001\u5206\u5e03\u662f\u4f4d\u7f6e\u53c2\u6570 \u03bc = 0, \u5c3a\u5ea6\u53c2\u6570 \u03c3 = 1 \u7684\u6b63\u6001\u5206\u5e03 \u6743\u91cd\u77e9\u9635 \u6839\u636e\u5b9a\u4e49, \u5199\u51fa\u4e8c\u7ef4\u6b63\u6001\u5206\u5e03\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4ee3\u7801\u8868\u8fbe\u5f0f: import math def get_cv(r, sigma): return 1 / (2 * math.pi * sigma ** 2) * math.exp((-r**2) / (2 * sigma ** 2)) \u53d6 \u03c3 = 1.5, \u5e76\u5047\u5b9a\u4e2d\u5fc3\u5750\u6807\u4e3a (0, 0), \u4ee3\u5165\u516c\u5f0f, \u5219\u5bb9\u6613\u5f97\u5230\u5305\u542b\u4e2d\u5fc3\u5750\u6807\u5728\u5185\u7684 25(\u5373: \u6a21\u7cca\u534a\u5f84 r=2) \u4e2a\u5750\u6807\u7684\u6743\u91cd\u4e3a [[ 0.01195525 0.02328564 0.02908025 0.02328564 0.01195525] [ 0.02328564 0.04535423 0.05664058 0.04535423 0.02328564] [ 0.02908025 0.05664058 0.07073553 0.05664058 0.02908025] [ 0.02328564 0.04535423 0.05664058 0.04535423 0.02328564] [ 0.01195525 0.02328564 0.02908025 0.02328564 0.01195525]] \u5176\u6743\u91cd\u603b\u548c\u7b49\u4e8e 0.82914190, \u6211\u4eec\u9700\u8981\u5176\u6743\u91cd\u548c\u4e3a 1, \u56e0\u6b64\u6bcf\u4e00\u9879\u9664\u4ee5 0.82914190 \u540e\u5f97\u5230 [[ 0.01441882 0.02808402 0.0350727 0.02808402 0.01441882] [ 0.02808402 0.05470021 0.06831229 0.05470021 0.02808402] [ 0.0350727 0.06831229 0.08531173 0.06831229 0.0350727 ] [ 0.02808402 0.05470021 0.06831229 0.05470021 0.02808402] [ 0.01441882 0.02808402 0.0350727 0.02808402 0.01441882]] \u5047\u8bbe\u73b0\u5728\u6709 25 \u4e2a\u50cf\u7d20\u70b9, \u6bcf\u4e2a\u50cf\u7d20\u70b9\u90fd\u662f (0~255) \u7684\u7070\u5ea6\u503c, \u4e2d\u5fc3\u5750\u6807\u7070\u5ea6\u503c\u4e3a 200, \u5176\u4f59\u5750\u6807\u7070\u5ea6\u503c\u5747\u4e3a 10: [[ 10 10 10 10 10] [ 10 10 10 10 10] [ 10 10 200 10 10] [ 10 10 10 10 10] [ 10 10 10 10 10]] \u6bcf\u4e2a\u50cf\u7d20\u5206\u522b\u4e58\u4ee5\u6743\u91cd\u77e9\u9635, \u5f97\u5230 [[ 0.14418818 0.28084023 0.35072701 0.28084023 0.14418818] [ 0.28084023 0.54700208 0.68312293 0.54700208 0.28084023] [ 0.35072701 0.68312293 17.06234604 0.68312293 0.35072701] [ 0.28084023 0.54700208 0.68312293 0.54700208 0.28084023] [ 0.14418818 0.28084023 0.35072701 0.28084023 0.14418818]] \u5bf9\u8be5\u77e9\u9635\u6c42\u548c, \u5f97\u5230 sum = 26, \u5373\u9ad8\u65af\u6a21\u7cca\u540e, \u4e2d\u5fc3\u5750\u6807\u7684\u7070\u5ea6\u503c\u4e3a 26. \u53ef\u4ee5\u770b\u5230, \u76f8\u6bd4\u539f\u5148 200 \u7684\u7070\u5ea6\u503c, \u9ad8\u65af\u6a21\u7cca\u540e\u7684\u7070\u5ea6\u503c\u4e0e\"\u5468\u56f4\u50cf\u7d20\"\u7684\u566a\u58f0\u4ee5\u53ca\u7ec6\u8282\u5c42\u6b21\u964d\u4f4e\u4e86, \u4ea6\u5373\"\u6a21\u7cca\"\u4e86. \u5982\u679c\u5bf9 RGB \u4e09\u4e2a\u901a\u9053\u5206\u522b\u8fdb\u884c\u9ad8\u65af\u6a21\u7cca\u5728\u5408\u5e76\u5904\u7406, \u5c31\u80fd\u5f97\u5230\u6a21\u7cca\u540e\u7684\u56fe\u50cf\u4e86 \u4ee3\u7801\u5b9e\u73b0 import math import numpy as np import PIL.Image import PIL.ImageFilter import scipy.misc import scipy.signal # \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 def get_cv(r, sigma): return 1 / (2 * math.pi * sigma ** 2) * math.exp((-r**2) / (2 * sigma ** 2)) # \u9ad8\u65af\u6ee4\u6ce2\u63a9\u6a21 def get_window(): # \u6a21\u7cca\u534a\u5f84\u4e3a 2, sigma \u4e3a 1.5 radius, sigma = 2, 1.5 window = np.zeros((radius * 2 + 1, radius * 2 + 1)) for i in range(-radius, radius + 1): for j in range(-radius, radius + 1): r = (i ** 2 + j ** 2) ** 0.5 window[i + radius][j + radius] = get_cv(r, sigma) return window / np.sum(window) def convert_2d(r): window = get_window() s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() PIL \u7248\u672c\u4ee3\u7801\u5bf9\u5e94\u5982\u4e0b: import PIL.Image import PIL.ImageFilter im = PIL.Image.open('/img/jp.jpg') im = im.filter(PIL.ImageFilter.GaussianBlur(radius=2)) im.show() \u7b97\u6cd5\u5c42\u9762\u53ef\u884c\u7684\u4f18\u5316\u9879: \u7ebf\u6027\u53ef\u5206\u6027 . \u4e8c\u7ef4\u77e9\u9635\u53d8\u6362\u5f97\u5230\u7684\u6548\u679c\u53ef\u4ee5\u901a\u8fc7\u5728\u6c34\u5e73\u65b9\u5411\u8fdb\u884c\u4e00\u7ef4\u9ad8\u65af\u77e9\u9635\u53d8\u6362\u52a0\u4e0a\u7ad6\u76f4\u65b9\u5411\u7684\u4e00\u7ef4\u9ad8\u65af\u77e9\u9635\u53d8\u6362\u5f97\u5230. \u4ece\u8ba1\u7b97\u7684\u89d2\u5ea6\u6765\u770b, \u8fd9\u6837\u53ea\u9700\u8981 O(n \u00d7 M \u00d7 N) + O(m \u00d7 M \u00d7 N) \u6b21\u8ba1\u7b97\uff0c\u800c\u4e0d\u53ef\u5206\u7684\u77e9\u9635\u5219\u9700\u8981 O(m x n x M x N) \u6b21\u8ba1\u7b97. \u7a7a\u95f4\u6362\u65f6\u95f4 . \u6a21\u7cca\u534a\u5f84\u4e3a 2 \u7684\u6743\u91cd\u8868\u4ec5\u6709 6 \u4e2a\u53ef\u9009\u6743\u503c, \u4e14\u56fe\u50cf\u7070\u5ea6\u503c\u4ec5\u6709 256 \u79cd. \u56e0\u6b64\u53ea\u9700\u9884\u5148\u8ba1\u7b97 6 * 256 = 1536 \u6b21\u4e58\u6cd5\u8ba1\u7b97, \u4e4b\u540e\u7684\u6240\u6709\u4e58\u6cd5\u8ba1\u7b97\u5c31\u90fd\u80fd\u8f6c\u6362\u4e3a O(1) \u7684\u67e5\u8868. \u4f7f\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u7531\u4f18\u5316\u524d\u7684 25 \u6b21\u4e58\u6cd5\u8ba1\u7b97 + 24 \u6b21\u52a0\u6cd5\u8ba1\u7b97\u51cf\u5c11\u4e3a 24 \u6b21\u52a0\u6cd5\u8ba1\u7b97. \u76f8\u5173\u94fe\u63a5 \u6570\u5b66-\u65b9\u5dee\u4e0e\u6807\u51c6\u5dee \u6570\u5b66-\u6b63\u6001\u5206\u5e03","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7a7a\u95f4\u6ee4\u6ce2-\u9ad8\u65af\u6ee4\u6ce2"},{"location":"content/pil/spatial_filter_gaussian_blur/#_1","text":"\u9ad8\u65af\u6a21\u7cca(\u82f1\u8bed: Gaussian Blur), \u4e5f\u53eb\u9ad8\u65af\u5e73\u6ed1, \u662f\u5728 Adobe Photoshop, GIMP \u4ee5\u53ca Paint.NET \u7b49\u56fe\u50cf\u5904\u7406\u8f6f\u4ef6\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u5904\u7406\u6548\u679c, \u901a\u5e38\u7528\u5b83\u6765\u51cf\u5c11\u56fe\u50cf\u566a\u58f0\u4ee5\u53ca\u964d\u4f4e\u7ec6\u8282\u5c42\u6b21. \u8fd9\u79cd\u6a21\u7cca\u6280\u672f\u751f\u6210\u7684\u56fe\u50cf, \u5176\u89c6\u89c9\u6548\u679c\u5c31\u50cf\u662f\u7ecf\u8fc7\u4e00\u4e2a\u534a\u900f\u660e\u5c4f\u5e55\u5728\u89c2\u5bdf\u56fe\u50cf, \u8fd9\u4e0e\u955c\u5934\u7126\u5916\u6210\u50cf\u6548\u679c\u6563\u666f\u4ee5\u53ca\u666e\u901a\u7167\u660e\u9634\u5f71\u4e2d\u7684\u6548\u679c\u90fd\u660e\u663e\u4e0d\u540c. \u9ad8\u65af\u5e73\u6ed1\u4e5f\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u7b97\u6cd5\u4e2d\u7684\u9884\u5148\u5904\u7406\u9636\u6bb5, \u4ee5\u589e\u5f3a\u56fe\u50cf\u5728\u4e0d\u540c\u6bd4\u4f8b\u5927\u5c0f\u4e0b\u7684\u56fe\u50cf\u6548\u679c(\u53c2\u89c1\u5c3a\u5ea6\u7a7a\u95f4\u8868\u793a\u4ee5\u53ca\u5c3a\u5ea6\u7a7a\u95f4\u5b9e\u73b0). \u4ece\u6570\u5b66\u7684\u89d2\u5ea6\u6765\u770b, \u56fe\u50cf\u7684\u9ad8\u65af\u6a21\u7cca\u8fc7\u7a0b\u5c31\u662f\u56fe\u50cf\u4e0e\u6b63\u6001\u5206\u5e03\u505a\u5377\u79ef. \u7531\u4e8e\u6b63\u6001\u5206\u5e03\u53c8\u53eb\u4f5c\u9ad8\u65af\u5206\u5e03, \u6240\u4ee5\u8fd9\u9879\u6280\u672f\u5c31\u53eb\u4f5c\u9ad8\u65af\u6a21\u7cca. \u56fe\u50cf\u4e0e\u5706\u5f62\u65b9\u6846\u6a21\u7cca\u505a\u5377\u79ef\u5c06\u4f1a\u751f\u6210\u66f4\u52a0\u7cbe\u786e\u7684\u7126\u5916\u6210\u50cf\u6548\u679c. \u7531\u4e8e\u9ad8\u65af\u51fd\u6570\u7684\u5085\u7acb\u53f6\u53d8\u6362\u662f\u53e6\u5916\u4e00\u4e2a\u9ad8\u65af\u51fd\u6570, \u6240\u4ee5\u9ad8\u65af\u6a21\u7cca\u5bf9\u4e8e\u56fe\u50cf\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u4f4e\u901a\u6ee4\u6ce2\u5668.","title":"\u9ad8\u65af\u6a21\u7cca"},{"location":"content/pil/spatial_filter_gaussian_blur/#_2","text":"","title":"\u6548\u679c\u5c55\u793a"},{"location":"content/pil/spatial_filter_gaussian_blur/#_3","text":"\u9ad8\u65af\u6a21\u7cca\u662f\u4e00\u79cd\u56fe\u50cf\u6a21\u7cca\u6ee4\u6ce2\u5668, \u5b83\u7528\u6b63\u6001\u5206\u5e03\u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u53d8\u6362. N\u7ef4\u7a7a\u95f4\u6b63\u6001\u5206\u5e03\u65b9\u7a0b\u4e3a $$ G(r) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}^N}e^{-r^2 / 2\\sigma^2} $$ \u5728\u4e8c\u7ef4\u7a7a\u95f4\u5b9a\u4e49\u4e3a $$ G(r) = \\frac{1}{2\\pi\\sigma^2}e^{-(u^2 + v^2) / 2\\sigma^2} $$ \u5176\u4e2d r \u662f\u6a21\u7cca\u534a\u5f84 $r^2 = u^2 + v^2$, \u03c3 \u662f\u6b63\u6001\u5206\u5e03\u7684\u6807\u51c6\u504f\u5dee. \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d, \u8fd9\u4e2a\u516c\u5f0f\u751f\u6210\u7684\u66f2\u9762\u7684\u7b49\u9ad8\u7ebf\u662f\u4ece\u4e2d\u5fc3\u5f00\u59cb\u5448\u6b63\u6001\u5206\u5e03\u7684\u540c\u5fc3\u5706. \u5206\u5e03\u4e0d\u4e3a\u96f6\u7684\u50cf\u7d20\u7ec4\u6210\u7684\u5377\u79ef\u77e9\u9635\u4e0e\u539f\u59cb\u56fe\u50cf\u505a\u53d8\u6362. \u6bcf\u4e2a\u50cf\u7d20\u7684\u503c\u90fd\u662f\u5468\u56f4\u76f8\u90bb\u50cf\u7d20\u503c\u7684\u52a0\u6743\u5e73\u5747. \u539f\u59cb\u50cf\u7d20\u7684\u503c\u6709\u6700\u5927\u7684\u9ad8\u65af\u5206\u5e03\u503c, \u6240\u4ee5\u6709\u6700\u5927\u7684\u6743\u91cd, \u76f8\u90bb\u50cf\u7d20\u968f\u7740\u8ddd\u79bb\u539f\u59cb\u50cf\u7d20\u8d8a\u6765\u8d8a\u8fdc, \u5176\u6743\u91cd\u4e5f\u8d8a\u6765\u8d8a\u5c0f. \u8fd9\u6837\u8fdb\u884c\u6a21\u7cca\u5904\u7406\u6bd4\u5176\u5b83\u7684\u5747\u8861\u6a21\u7cca\u6ee4\u6ce2\u5668\u66f4\u9ad8\u5730\u4fdd\u7559\u4e86\u8fb9\u7f18\u6548\u679c.","title":"\u673a\u7406"},{"location":"content/pil/spatial_filter_gaussian_blur/#_4","text":"\u5c3a\u5ea6\u53c2\u6570 \u03c3 \u51b3\u5b9a\u4e86\u5206\u5e03\u5e45\u5ea6, \u4ee5\u4e0b\u662f\u4e0d\u540c\u5c3a\u5ea6\u53c2\u6570 \u03c3 \u7684\u4e00\u7ef4\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u56fe\u50cf, \u5728\u9ad8\u65af\u6a21\u7cca\u5904\u7406\u4e2d, \u03c3 \u5e38\u53d6 1.5. \u6807\u51c6\u6b63\u6001\u5206\u5e03\u662f\u4f4d\u7f6e\u53c2\u6570 \u03bc = 0, \u5c3a\u5ea6\u53c2\u6570 \u03c3 = 1 \u7684\u6b63\u6001\u5206\u5e03","title":"\u03c3 \u503c\u4ecb\u7ecd"},{"location":"content/pil/spatial_filter_gaussian_blur/#_5","text":"\u6839\u636e\u5b9a\u4e49, \u5199\u51fa\u4e8c\u7ef4\u6b63\u6001\u5206\u5e03\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4ee3\u7801\u8868\u8fbe\u5f0f: import math def get_cv(r, sigma): return 1 / (2 * math.pi * sigma ** 2) * math.exp((-r**2) / (2 * sigma ** 2)) \u53d6 \u03c3 = 1.5, \u5e76\u5047\u5b9a\u4e2d\u5fc3\u5750\u6807\u4e3a (0, 0), \u4ee3\u5165\u516c\u5f0f, \u5219\u5bb9\u6613\u5f97\u5230\u5305\u542b\u4e2d\u5fc3\u5750\u6807\u5728\u5185\u7684 25(\u5373: \u6a21\u7cca\u534a\u5f84 r=2) \u4e2a\u5750\u6807\u7684\u6743\u91cd\u4e3a [[ 0.01195525 0.02328564 0.02908025 0.02328564 0.01195525] [ 0.02328564 0.04535423 0.05664058 0.04535423 0.02328564] [ 0.02908025 0.05664058 0.07073553 0.05664058 0.02908025] [ 0.02328564 0.04535423 0.05664058 0.04535423 0.02328564] [ 0.01195525 0.02328564 0.02908025 0.02328564 0.01195525]] \u5176\u6743\u91cd\u603b\u548c\u7b49\u4e8e 0.82914190, \u6211\u4eec\u9700\u8981\u5176\u6743\u91cd\u548c\u4e3a 1, \u56e0\u6b64\u6bcf\u4e00\u9879\u9664\u4ee5 0.82914190 \u540e\u5f97\u5230 [[ 0.01441882 0.02808402 0.0350727 0.02808402 0.01441882] [ 0.02808402 0.05470021 0.06831229 0.05470021 0.02808402] [ 0.0350727 0.06831229 0.08531173 0.06831229 0.0350727 ] [ 0.02808402 0.05470021 0.06831229 0.05470021 0.02808402] [ 0.01441882 0.02808402 0.0350727 0.02808402 0.01441882]] \u5047\u8bbe\u73b0\u5728\u6709 25 \u4e2a\u50cf\u7d20\u70b9, \u6bcf\u4e2a\u50cf\u7d20\u70b9\u90fd\u662f (0~255) \u7684\u7070\u5ea6\u503c, \u4e2d\u5fc3\u5750\u6807\u7070\u5ea6\u503c\u4e3a 200, \u5176\u4f59\u5750\u6807\u7070\u5ea6\u503c\u5747\u4e3a 10: [[ 10 10 10 10 10] [ 10 10 10 10 10] [ 10 10 200 10 10] [ 10 10 10 10 10] [ 10 10 10 10 10]] \u6bcf\u4e2a\u50cf\u7d20\u5206\u522b\u4e58\u4ee5\u6743\u91cd\u77e9\u9635, \u5f97\u5230 [[ 0.14418818 0.28084023 0.35072701 0.28084023 0.14418818] [ 0.28084023 0.54700208 0.68312293 0.54700208 0.28084023] [ 0.35072701 0.68312293 17.06234604 0.68312293 0.35072701] [ 0.28084023 0.54700208 0.68312293 0.54700208 0.28084023] [ 0.14418818 0.28084023 0.35072701 0.28084023 0.14418818]] \u5bf9\u8be5\u77e9\u9635\u6c42\u548c, \u5f97\u5230 sum = 26, \u5373\u9ad8\u65af\u6a21\u7cca\u540e, \u4e2d\u5fc3\u5750\u6807\u7684\u7070\u5ea6\u503c\u4e3a 26. \u53ef\u4ee5\u770b\u5230, \u76f8\u6bd4\u539f\u5148 200 \u7684\u7070\u5ea6\u503c, \u9ad8\u65af\u6a21\u7cca\u540e\u7684\u7070\u5ea6\u503c\u4e0e\"\u5468\u56f4\u50cf\u7d20\"\u7684\u566a\u58f0\u4ee5\u53ca\u7ec6\u8282\u5c42\u6b21\u964d\u4f4e\u4e86, \u4ea6\u5373\"\u6a21\u7cca\"\u4e86. \u5982\u679c\u5bf9 RGB \u4e09\u4e2a\u901a\u9053\u5206\u522b\u8fdb\u884c\u9ad8\u65af\u6a21\u7cca\u5728\u5408\u5e76\u5904\u7406, \u5c31\u80fd\u5f97\u5230\u6a21\u7cca\u540e\u7684\u56fe\u50cf\u4e86","title":"\u6743\u91cd\u77e9\u9635"},{"location":"content/pil/spatial_filter_gaussian_blur/#_6","text":"import math import numpy as np import PIL.Image import PIL.ImageFilter import scipy.misc import scipy.signal # \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 def get_cv(r, sigma): return 1 / (2 * math.pi * sigma ** 2) * math.exp((-r**2) / (2 * sigma ** 2)) # \u9ad8\u65af\u6ee4\u6ce2\u63a9\u6a21 def get_window(): # \u6a21\u7cca\u534a\u5f84\u4e3a 2, sigma \u4e3a 1.5 radius, sigma = 2, 1.5 window = np.zeros((radius * 2 + 1, radius * 2 + 1)) for i in range(-radius, radius + 1): for j in range(-radius, radius + 1): r = (i ** 2 + j ** 2) ** 0.5 window[i + radius][j + radius] = get_cv(r, sigma) return window / np.sum(window) def convert_2d(r): window = get_window() s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() PIL \u7248\u672c\u4ee3\u7801\u5bf9\u5e94\u5982\u4e0b: import PIL.Image import PIL.ImageFilter im = PIL.Image.open('/img/jp.jpg') im = im.filter(PIL.ImageFilter.GaussianBlur(radius=2)) im.show() \u7b97\u6cd5\u5c42\u9762\u53ef\u884c\u7684\u4f18\u5316\u9879: \u7ebf\u6027\u53ef\u5206\u6027 . \u4e8c\u7ef4\u77e9\u9635\u53d8\u6362\u5f97\u5230\u7684\u6548\u679c\u53ef\u4ee5\u901a\u8fc7\u5728\u6c34\u5e73\u65b9\u5411\u8fdb\u884c\u4e00\u7ef4\u9ad8\u65af\u77e9\u9635\u53d8\u6362\u52a0\u4e0a\u7ad6\u76f4\u65b9\u5411\u7684\u4e00\u7ef4\u9ad8\u65af\u77e9\u9635\u53d8\u6362\u5f97\u5230. \u4ece\u8ba1\u7b97\u7684\u89d2\u5ea6\u6765\u770b, \u8fd9\u6837\u53ea\u9700\u8981 O(n \u00d7 M \u00d7 N) + O(m \u00d7 M \u00d7 N) \u6b21\u8ba1\u7b97\uff0c\u800c\u4e0d\u53ef\u5206\u7684\u77e9\u9635\u5219\u9700\u8981 O(m x n x M x N) \u6b21\u8ba1\u7b97. \u7a7a\u95f4\u6362\u65f6\u95f4 . \u6a21\u7cca\u534a\u5f84\u4e3a 2 \u7684\u6743\u91cd\u8868\u4ec5\u6709 6 \u4e2a\u53ef\u9009\u6743\u503c, \u4e14\u56fe\u50cf\u7070\u5ea6\u503c\u4ec5\u6709 256 \u79cd. \u56e0\u6b64\u53ea\u9700\u9884\u5148\u8ba1\u7b97 6 * 256 = 1536 \u6b21\u4e58\u6cd5\u8ba1\u7b97, \u4e4b\u540e\u7684\u6240\u6709\u4e58\u6cd5\u8ba1\u7b97\u5c31\u90fd\u80fd\u8f6c\u6362\u4e3a O(1) \u7684\u67e5\u8868. \u4f7f\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u7531\u4f18\u5316\u524d\u7684 25 \u6b21\u4e58\u6cd5\u8ba1\u7b97 + 24 \u6b21\u52a0\u6cd5\u8ba1\u7b97\u51cf\u5c11\u4e3a 24 \u6b21\u52a0\u6cd5\u8ba1\u7b97.","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/spatial_filter_gaussian_blur/#_7","text":"\u6570\u5b66-\u65b9\u5dee\u4e0e\u6807\u51c6\u5dee \u6570\u5b66-\u6b63\u6001\u5206\u5e03","title":"\u76f8\u5173\u94fe\u63a5"},{"location":"content/pil/spatial_filter_mean/","text":"\u7a7a\u95f4\u6ee4\u6ce2-\u5747\u503c\u6ee4\u6ce2 \u5747\u503c\u6ee4\u6ce2\u5668\u7684\u8f93\u51fa\u662f\u5305\u542b\u5728\u6ee4\u6ce2\u63a9\u6a21\u9886\u57df\u5185\u50cf\u7d20\u7684\u7b80\u5355\u5e73\u5747\u503c. \u5747\u503c\u6ee4\u6ce2\u5668\u6700\u5e38\u7528\u7684\u76ee\u7684\u5c31\u662f\u51cf\u566a. \u7136\u800c, \u56fe\u50cf\u8fb9\u7f18\u4e5f\u662f\u7531\u56fe\u50cf\u7070\u5ea6\u5c16\u9510\u53d8\u5316\u5e26\u6765\u7684\u7279\u6027, \u6240\u4ee5\u5747\u503c\u6ee4\u6ce2\u8fd8\u662f\u5b58\u5728\u4e0d\u5e0c\u671b\u7684\u8fb9\u7f18\u6a21\u7cca\u8d1f\u9762\u6548\u5e94. \u5747\u503c\u6ee4\u6ce2\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u5e94\u7528, \u4e3a\u4e86\u5bf9\u611f\u5174\u8da3\u7684\u56fe\u50cf\u5f97\u51fa\u4e00\u4e2a\u7c97\u7565\u63cf\u8ff0\u800c\u6a21\u7cca\u4e00\u5e45\u56fe\u50cf. \u8fd9\u6837, \u90a3\u4e9b\u8f83\u5c0f\u7269\u4f53\u7684\u5f3a\u5ea6\u4e0e\u80cc\u666f\u63c9\u5408\u5728\u4e00\u8d77\u4e86, \u8f83\u5927\u7269\u4f53\u53d8\u5f97\u50cf\u6591\u70b9\u800c\u6613\u4e8e\u68c0\u6d4b.\u63a9\u6a21\u7684\u5927\u5c0f\u7531\u5373\u5c06\u878d\u5165\u80cc\u666f\u4e2d\u7684\u7269\u4f53\u5c3a\u5bf8\u51b3\u5b9a. \u4ee3\u7801\u5b9e\u73b0 \u4f7f\u7528\u4e00\u4e2a 3*3 \u5747\u503c\u6ee4\u6ce2\u5668\u5904\u7406\u56fe\u50cf import numpy as np import PIL.Image import scipy.misc import scipy.signal def convert_2d(r): n = 3 # 3*3 \u6ee4\u6ce2\u5668, \u6bcf\u4e2a\u7cfb\u6570\u90fd\u662f 1/9 window = np.ones((n, n)) / n ** 2 # \u4f7f\u7528\u6ee4\u6ce2\u5668\u5377\u79ef\u56fe\u50cf # mode = same \u8868\u793a\u8f93\u51fa\u5c3a\u5bf8\u7b49\u4e8e\u8f93\u5165\u5c3a\u5bf8 # boundary \u8868\u793a\u91c7\u7528\u5bf9\u79f0\u8fb9\u754c\u6761\u4ef6\u5904\u7406\u56fe\u50cf\u8fb9\u7f18 s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7a7a\u95f4\u6ee4\u6ce2-\u5747\u503c\u6ee4\u6ce2"},{"location":"content/pil/spatial_filter_mean/#-","text":"\u5747\u503c\u6ee4\u6ce2\u5668\u7684\u8f93\u51fa\u662f\u5305\u542b\u5728\u6ee4\u6ce2\u63a9\u6a21\u9886\u57df\u5185\u50cf\u7d20\u7684\u7b80\u5355\u5e73\u5747\u503c. \u5747\u503c\u6ee4\u6ce2\u5668\u6700\u5e38\u7528\u7684\u76ee\u7684\u5c31\u662f\u51cf\u566a. \u7136\u800c, \u56fe\u50cf\u8fb9\u7f18\u4e5f\u662f\u7531\u56fe\u50cf\u7070\u5ea6\u5c16\u9510\u53d8\u5316\u5e26\u6765\u7684\u7279\u6027, \u6240\u4ee5\u5747\u503c\u6ee4\u6ce2\u8fd8\u662f\u5b58\u5728\u4e0d\u5e0c\u671b\u7684\u8fb9\u7f18\u6a21\u7cca\u8d1f\u9762\u6548\u5e94. \u5747\u503c\u6ee4\u6ce2\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u5e94\u7528, \u4e3a\u4e86\u5bf9\u611f\u5174\u8da3\u7684\u56fe\u50cf\u5f97\u51fa\u4e00\u4e2a\u7c97\u7565\u63cf\u8ff0\u800c\u6a21\u7cca\u4e00\u5e45\u56fe\u50cf. \u8fd9\u6837, \u90a3\u4e9b\u8f83\u5c0f\u7269\u4f53\u7684\u5f3a\u5ea6\u4e0e\u80cc\u666f\u63c9\u5408\u5728\u4e00\u8d77\u4e86, \u8f83\u5927\u7269\u4f53\u53d8\u5f97\u50cf\u6591\u70b9\u800c\u6613\u4e8e\u68c0\u6d4b.\u63a9\u6a21\u7684\u5927\u5c0f\u7531\u5373\u5c06\u878d\u5165\u80cc\u666f\u4e2d\u7684\u7269\u4f53\u5c3a\u5bf8\u51b3\u5b9a.","title":"\u7a7a\u95f4\u6ee4\u6ce2-\u5747\u503c\u6ee4\u6ce2"},{"location":"content/pil/spatial_filter_mean/#_1","text":"\u4f7f\u7528\u4e00\u4e2a 3*3 \u5747\u503c\u6ee4\u6ce2\u5668\u5904\u7406\u56fe\u50cf import numpy as np import PIL.Image import scipy.misc import scipy.signal def convert_2d(r): n = 3 # 3*3 \u6ee4\u6ce2\u5668, \u6bcf\u4e2a\u7cfb\u6570\u90fd\u662f 1/9 window = np.ones((n, n)) / n ** 2 # \u4f7f\u7528\u6ee4\u6ce2\u5668\u5377\u79ef\u56fe\u50cf # mode = same \u8868\u793a\u8f93\u51fa\u5c3a\u5bf8\u7b49\u4e8e\u8f93\u5165\u5c3a\u5bf8 # boundary \u8868\u793a\u91c7\u7528\u5bf9\u79f0\u8fb9\u754c\u6761\u4ef6\u5904\u7406\u56fe\u50cf\u8fb9\u7f18 s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/spatial_filter_medium/","text":"\u4e2d\u503c\u6ee4\u6ce2 \u4e2d\u503c\u6ee4\u6ce2\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5668, \u5b83\u7684\u54cd\u5e94\u57fa\u4e8e\u56fe\u50cf\u6ee4\u6ce2\u5668\u5305\u56f4\u7684\u56fe\u50cf\u533a\u57df\u4e2d\u50cf\u7d20\u7684\u7edf\u8ba1\u6392\u5e8f, \u7136\u540e\u7531\u7edf\u8ba1\u6392\u5e8f\u7ed3\u679c\u7684\u503c\u4ee3\u66ff\u4e2d\u5fc3\u50cf\u7d20\u7684\u503c. \u4e2d\u503c\u6ee4\u6ce2\u5668\u5c06\u5176\u50cf\u7d20\u90bb\u57df\u5185\u7684\u7070\u5ea6\u4e2d\u503c\u4ee3\u66ff\u4ee3\u66ff\u8be5\u50cf\u7d20\u7684\u503c. \u4e2d\u503c\u6ee4\u6ce2\u5668\u7684\u4f7f\u7528\u975e\u5e38\u666e\u904d, \u8fd9\u662f\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u5b9a\u7c7b\u578b\u7684\u968f\u673a\u566a\u58f0, \u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f18\u79c0\u7684\u53bb\u566a\u80fd\u529b, \u6bd4\u5c0f\u5c3a\u5bf8\u7684\u5747\u503c\u6ee4\u6ce2\u5668\u6a21\u7cca\u7a0b\u5ea6\u660e\u663e\u8981\u4f4e. \u4e2d\u503c\u6ee4\u6ce2\u5668\u5bf9\u5904\u7406\u8109\u51b2\u566a\u58f0(\u4e5f\u79f0\u6912\u76d0\u566a\u58f0)\u975e\u5e38\u6709\u6548, \u56e0\u4e3a\u8be5\u566a\u58f0\u662f\u4ee5\u9ed1\u767d\u70b9\u53e0\u52a0\u5728\u56fe\u50cf\u4e0a\u9762\u7684. \u4e0e\u4e2d\u503c\u6ee4\u6ce2\u76f8\u4f3c\u7684\u8fd8\u6709\u6700\u5927\u503c\u6ee4\u6ce2\u5668\u548c\u6700\u5c0f\u503c\u6ee4\u6ce2\u5668. \u4ee3\u7801\u5b9e\u73b0 10 * 10 \u7684\u4e2d\u503c\u6ee4\u6ce2\u5668\u5b9e\u73b0 import numpy as np import PIL.Image import scipy.misc import scipy.ndimage def convert_2d(r): n = 10 s = scipy.ndimage.median_filter(r, (n, n)) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u6548\u679c\u5c55\u793a \u4e2d\u503c\u6ee4\u6ce2\u80fd\u4ea7\u751f\u7c7b\u4f3c\u6cb9\u5f69\u4e00\u6837\u7684\u6548\u679c, \u5982\u4e0b\u662f\u4f7f\u7528 10 * 10 \u4e2d\u503c\u6ee4\u6ce2\u5668\u5904\u7406\u540e\u7684\u56fe\u50cf \u5982\u4e0b\u662f\u4f7f\u7528\u4e2d\u503c\u6ee4\u6ce2\u53bb\u9664\u6912\u76d0\u566a\u58f0\u7684\u793a\u4f8b. \u4ece\u5de6\u81f3\u53f3\u5206\u522b\u4e3a \u539f\u59cb\u56fe\u50cf , \u52a0\u5165 \u6912\u76d0\u566a\u58f0 \u540e\u7684\u56fe\u50cf, \u5747\u503c\u6ee4\u6ce2 \u540e\u7684\u56fe\u50cf\u4e0e \u4e2d\u503c\u6ee4\u6ce2 \u540e\u7684\u56fe\u50cf","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7a7a\u95f4\u6ee4\u6ce2-\u4e2d\u503c\u6ee4\u6ce2"},{"location":"content/pil/spatial_filter_medium/#_1","text":"\u4e2d\u503c\u6ee4\u6ce2\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5668, \u5b83\u7684\u54cd\u5e94\u57fa\u4e8e\u56fe\u50cf\u6ee4\u6ce2\u5668\u5305\u56f4\u7684\u56fe\u50cf\u533a\u57df\u4e2d\u50cf\u7d20\u7684\u7edf\u8ba1\u6392\u5e8f, \u7136\u540e\u7531\u7edf\u8ba1\u6392\u5e8f\u7ed3\u679c\u7684\u503c\u4ee3\u66ff\u4e2d\u5fc3\u50cf\u7d20\u7684\u503c. \u4e2d\u503c\u6ee4\u6ce2\u5668\u5c06\u5176\u50cf\u7d20\u90bb\u57df\u5185\u7684\u7070\u5ea6\u4e2d\u503c\u4ee3\u66ff\u4ee3\u66ff\u8be5\u50cf\u7d20\u7684\u503c. \u4e2d\u503c\u6ee4\u6ce2\u5668\u7684\u4f7f\u7528\u975e\u5e38\u666e\u904d, \u8fd9\u662f\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u5b9a\u7c7b\u578b\u7684\u968f\u673a\u566a\u58f0, \u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f18\u79c0\u7684\u53bb\u566a\u80fd\u529b, \u6bd4\u5c0f\u5c3a\u5bf8\u7684\u5747\u503c\u6ee4\u6ce2\u5668\u6a21\u7cca\u7a0b\u5ea6\u660e\u663e\u8981\u4f4e. \u4e2d\u503c\u6ee4\u6ce2\u5668\u5bf9\u5904\u7406\u8109\u51b2\u566a\u58f0(\u4e5f\u79f0\u6912\u76d0\u566a\u58f0)\u975e\u5e38\u6709\u6548, \u56e0\u4e3a\u8be5\u566a\u58f0\u662f\u4ee5\u9ed1\u767d\u70b9\u53e0\u52a0\u5728\u56fe\u50cf\u4e0a\u9762\u7684. \u4e0e\u4e2d\u503c\u6ee4\u6ce2\u76f8\u4f3c\u7684\u8fd8\u6709\u6700\u5927\u503c\u6ee4\u6ce2\u5668\u548c\u6700\u5c0f\u503c\u6ee4\u6ce2\u5668.","title":"\u4e2d\u503c\u6ee4\u6ce2"},{"location":"content/pil/spatial_filter_medium/#_2","text":"10 * 10 \u7684\u4e2d\u503c\u6ee4\u6ce2\u5668\u5b9e\u73b0 import numpy as np import PIL.Image import scipy.misc import scipy.ndimage def convert_2d(r): n = 10 s = scipy.ndimage.median_filter(r, (n, n)) return s.astype(np.uint8) def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/spatial_filter_medium/#_3","text":"\u4e2d\u503c\u6ee4\u6ce2\u80fd\u4ea7\u751f\u7c7b\u4f3c\u6cb9\u5f69\u4e00\u6837\u7684\u6548\u679c, \u5982\u4e0b\u662f\u4f7f\u7528 10 * 10 \u4e2d\u503c\u6ee4\u6ce2\u5668\u5904\u7406\u540e\u7684\u56fe\u50cf \u5982\u4e0b\u662f\u4f7f\u7528\u4e2d\u503c\u6ee4\u6ce2\u53bb\u9664\u6912\u76d0\u566a\u58f0\u7684\u793a\u4f8b. \u4ece\u5de6\u81f3\u53f3\u5206\u522b\u4e3a \u539f\u59cb\u56fe\u50cf , \u52a0\u5165 \u6912\u76d0\u566a\u58f0 \u540e\u7684\u56fe\u50cf, \u5747\u503c\u6ee4\u6ce2 \u540e\u7684\u56fe\u50cf\u4e0e \u4e2d\u503c\u6ee4\u6ce2 \u540e\u7684\u56fe\u50cf","title":"\u6548\u679c\u5c55\u793a"},{"location":"content/pil/spatial_filter_sharpening/","text":"\u9510\u5316\u6ee4\u6ce2 \u5728\u6570\u5b66\u4e2d, \u5fae\u5206\u662f\u5bf9\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u5316\u7387\u7684\u4e00\u79cd\u7ebf\u6027\u63cf\u8ff0. \u5fae\u5206\u53ef\u4ee5\u8fd1\u4f3c\u5730\u63cf\u8ff0\u5f53\u51fd\u6570\u81ea\u53d8\u91cf\u7684\u53d6\u503c\u4f5c\u8db3\u591f\u5c0f\u7684\u6539\u53d8\u65f6, \u51fd\u6570\u7684\u503c\u662f\u600e\u6837\u6539\u53d8\u7684. \u6700\u7b80\u5355\u7684\u5404\u5411\u540c\u6027\u5fae\u5206\u7b97\u5b50\u662f\u62c9\u666e\u62c9\u65af\u7b97\u5b50. \u4e00\u4e2a\u4e8c\u5143\u56fe\u50cf\u51fd\u6570 $f(x, y)$ \u7684\u62c9\u666e\u62c9\u65af\u53d8\u6362\u5b9a\u4e49\u4e3a $$ \\bigtriangledown ^2f = \\frac{\\partial ^2f}{\\partial x^2} + \\frac{\\partial ^ 2f}{\\partial y^2} $$ \u56e0\u4e3a\u4efb\u610f\u9636\u5fae\u5206\u90fd\u662f\u7ebf\u6027\u64cd\u4f5c, \u6240\u4ee5\u62c9\u666e\u62c9\u65af\u53d8\u6362\u4e5f\u662f\u4e00\u4e2a\u7ebf\u6027\u64cd\u4f5c. \u4e3a\u4e86\u66f4\u9002\u5408\u4e8e\u56fe\u50cf\u5904\u7406, \u8fd9\u4e00\u65b9\u7a0b\u5fc5\u987b\u8868\u73b0\u4e3a\u79bb\u6563\u5f62\u5f0f. \u8003\u8651\u5230\u6709\u4e24\u4e2a\u53d8\u91cf, \u56e0\u6b64, \u6211\u4eec\u5728 x \u65b9\u5411\u4e0a\u5bf9\u4e8c\u9636\u504f\u5fae\u5206\u91c7\u7528\u4e0b\u5217\u5b9a\u4e49: $$ \\frac{\\partial ^2f}{\\partial x^2} = f(x+1, y) + f(x-1, y) -2f(x, y) $$ \u7c7b\u4f3c\u7684, \u5728 y \u65b9\u5411\u4e0a\u4e3a $$ \\frac{\\partial ^2f}{\\partial y^2} = f(x, y+1) + f(x, y-1) -2f(x, y) $$ \u56e0\u6b64 $$ \\bigtriangledown ^2f = f(x+1, y) + f(x-1, y) + f(x, y+1) + f(x, y-1) -4f(x, y) $$ \u56e0\u6b64, \u6267\u884c\u8fd9\u4e00\u65b0\u5b9a\u4e49\u7684\u63a9\u819c\u5982\u4e0b $$ \\begin{bmatrix} 0 & 1 & 0 \\\\ 1 & -4 & 1\\\\ 0 & 1 & 0 \\end{bmatrix} $$ \u7531\u4e8e\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u662f\u4e00\u79cd\u5fae\u5206\u7b97\u5b50, \u5b83\u7684\u5e94\u7528\u5f3a\u8c03\u56fe\u50cf\u4e2d\u7070\u5ea6\u7684\u7a81\u53d8\u548c\u964d\u4f4e\u7070\u5ea6\u6162\u53d8\u5316\u7684\u533a\u57df. \u8fd9\u5c06\u4ea7\u751f\u4e00\u5e45\u628a\u56fe\u50cf\u4e2d\u7684\u6d45\u7070\u8272\u8fb9\u7ebf\u548c\u7a81\u53d8\u70b9\u53e0\u52a0\u5230\u6697\u80cc\u666f\u4e2d\u7684\u56fe\u50cf. \u5c06\u539f\u59cb\u56fe\u50cf\u548c\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u53e0\u52a0\u5728\u4e00\u8d77\u7684\u7b80\u5355\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u62c9\u666e\u62c9\u65af\u9510\u5316\u540e\u7684\u6548\u679c, \u540c\u65f6\u53c8\u80fd\u590d\u539f\u80cc\u666f\u4fe1\u606f. \u9664\u4e0a\u8ff0\u7684\u6df9\u819c\u5916, \u5e38\u89c1\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u8fd8\u6709 $$ \\begin{bmatrix} 0 & -1 & 0 \\\\ -1 & 4 & -1\\\\ 0 & -1 & 0 \\end{bmatrix} $$ $$ \\begin{bmatrix} -1 & -1 & -1 \\\\ -1 & 8 & -1\\\\ -1 & -1 & -1 \\end{bmatrix} $$ $$ \\begin{bmatrix} 1 & 1 & 1 \\\\ 1 & -8 & 1\\\\ 1 & 1 & 1 \\end{bmatrix} $$ \u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\u7684\u57fa\u672c\u8868\u793a\u65b9\u6cd5\u5982\u4e0b $$ g(x, y)= \\begin{cases} f(x, y) - \\bigtriangledown ^2f(x, y) & \\text{\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u4e2d\u5fc3\u7cfb\u6570\u4e3a\u8d1f} \\\\ f(x, y) + \\bigtriangledown ^2f(x, y) & \\text{\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u4e2d\u5fc3\u7cfb\u6570\u4e3a\u6b63} \\end{cases} $$ \u4ee3\u7801\u5b9e\u73b0 \u5728\u673a\u7406\u4e2d, \u6211\u4eec\u9996\u5148\u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u8fc7\u6ee4\u56fe\u50cf, \u7136\u540e, \u4ece\u539f\u56fe\u50cf\u4e2d\u51cf\u53bb\u8be5\u56fe\u50cf. \u4f46\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d, \u901a\u5e38\u4f7f\u7528\u5355\u4e00\u63a9\u819c\u626b\u63cf\u6765\u5b9e\u73b0. \u5047\u8bbe\u4f7f\u7528 2 \u53f7\u62c9\u666e\u62c9\u65af\u7b97\u5b50, \u4ee3\u5165\u673a\u7406\u6700\u540e\u4e00\u6b65, \u5f97\u5230 $$ g(x, y) = f(x, y) - \\bigtriangledown ^2f(x, y) = 5f(x, y) - [f(x+1, y) + f(x-1, y) + f(x, y+1) + f(x, y-1)] $$ \u56e0\u6b64, $g(x, y)$ \u53ef\u4ee5\u89c6\u4e3a $f(x, y)$ \u7ecf\u8fc7 $$ \\begin{bmatrix} 0 & -1 & 0 \\\\ -1 & 5 & -1\\\\ 0 & -1 & 0 \\end{bmatrix} $$ \u8fc7\u6ee4\u5f97\u5230. import numpy as np import PIL.Image import scipy.misc import scipy.signal def convert_2d(r): # \u6ee4\u6ce2\u63a9\u6a21 window = np.array([ [0, -1, 0], [-1, 5, -1], [0, -1, 0] ]) s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') # \u50cf\u7d20\u503c\u5982\u679c\u5927\u4e8e 255 \u5219\u53d6 255, \u5c0f\u4e8e 0 \u5219\u53d6 0 for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(0, s[i][j]), 255) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show() \u6548\u679c\u5c55\u793a \u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5bf9\u56fe\u50cf\u8fdb\u884c\u6ee4\u6ce2, \u5f97\u5230\u56fe\u50cf\u50cf\u7d20\u7a81\u53d8\u90e8\u5206(\u8fb9\u7f18)\u4fe1\u606f \u5c06\u7ecf\u8fc7\u62c9\u666e\u62c9\u65af\u8fc7\u6ee4\u7684\u56fe\u50cf\u4e0e\u539f\u56fe\u53e0\u52a0, \u5c31\u80fd\u5f97\u5230\u539f\u56fe\u7684\u9510\u5316","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u7a7a\u95f4\u6ee4\u6ce2-\u9510\u5316\u6ee4\u6ce2"},{"location":"content/pil/spatial_filter_sharpening/#_1","text":"\u5728\u6570\u5b66\u4e2d, \u5fae\u5206\u662f\u5bf9\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u5316\u7387\u7684\u4e00\u79cd\u7ebf\u6027\u63cf\u8ff0. \u5fae\u5206\u53ef\u4ee5\u8fd1\u4f3c\u5730\u63cf\u8ff0\u5f53\u51fd\u6570\u81ea\u53d8\u91cf\u7684\u53d6\u503c\u4f5c\u8db3\u591f\u5c0f\u7684\u6539\u53d8\u65f6, \u51fd\u6570\u7684\u503c\u662f\u600e\u6837\u6539\u53d8\u7684. \u6700\u7b80\u5355\u7684\u5404\u5411\u540c\u6027\u5fae\u5206\u7b97\u5b50\u662f\u62c9\u666e\u62c9\u65af\u7b97\u5b50. \u4e00\u4e2a\u4e8c\u5143\u56fe\u50cf\u51fd\u6570 $f(x, y)$ \u7684\u62c9\u666e\u62c9\u65af\u53d8\u6362\u5b9a\u4e49\u4e3a $$ \\bigtriangledown ^2f = \\frac{\\partial ^2f}{\\partial x^2} + \\frac{\\partial ^ 2f}{\\partial y^2} $$ \u56e0\u4e3a\u4efb\u610f\u9636\u5fae\u5206\u90fd\u662f\u7ebf\u6027\u64cd\u4f5c, \u6240\u4ee5\u62c9\u666e\u62c9\u65af\u53d8\u6362\u4e5f\u662f\u4e00\u4e2a\u7ebf\u6027\u64cd\u4f5c. \u4e3a\u4e86\u66f4\u9002\u5408\u4e8e\u56fe\u50cf\u5904\u7406, \u8fd9\u4e00\u65b9\u7a0b\u5fc5\u987b\u8868\u73b0\u4e3a\u79bb\u6563\u5f62\u5f0f. \u8003\u8651\u5230\u6709\u4e24\u4e2a\u53d8\u91cf, \u56e0\u6b64, \u6211\u4eec\u5728 x \u65b9\u5411\u4e0a\u5bf9\u4e8c\u9636\u504f\u5fae\u5206\u91c7\u7528\u4e0b\u5217\u5b9a\u4e49: $$ \\frac{\\partial ^2f}{\\partial x^2} = f(x+1, y) + f(x-1, y) -2f(x, y) $$ \u7c7b\u4f3c\u7684, \u5728 y \u65b9\u5411\u4e0a\u4e3a $$ \\frac{\\partial ^2f}{\\partial y^2} = f(x, y+1) + f(x, y-1) -2f(x, y) $$ \u56e0\u6b64 $$ \\bigtriangledown ^2f = f(x+1, y) + f(x-1, y) + f(x, y+1) + f(x, y-1) -4f(x, y) $$ \u56e0\u6b64, \u6267\u884c\u8fd9\u4e00\u65b0\u5b9a\u4e49\u7684\u63a9\u819c\u5982\u4e0b $$ \\begin{bmatrix} 0 & 1 & 0 \\\\ 1 & -4 & 1\\\\ 0 & 1 & 0 \\end{bmatrix} $$ \u7531\u4e8e\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u662f\u4e00\u79cd\u5fae\u5206\u7b97\u5b50, \u5b83\u7684\u5e94\u7528\u5f3a\u8c03\u56fe\u50cf\u4e2d\u7070\u5ea6\u7684\u7a81\u53d8\u548c\u964d\u4f4e\u7070\u5ea6\u6162\u53d8\u5316\u7684\u533a\u57df. \u8fd9\u5c06\u4ea7\u751f\u4e00\u5e45\u628a\u56fe\u50cf\u4e2d\u7684\u6d45\u7070\u8272\u8fb9\u7ebf\u548c\u7a81\u53d8\u70b9\u53e0\u52a0\u5230\u6697\u80cc\u666f\u4e2d\u7684\u56fe\u50cf. \u5c06\u539f\u59cb\u56fe\u50cf\u548c\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u53e0\u52a0\u5728\u4e00\u8d77\u7684\u7b80\u5355\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u62c9\u666e\u62c9\u65af\u9510\u5316\u540e\u7684\u6548\u679c, \u540c\u65f6\u53c8\u80fd\u590d\u539f\u80cc\u666f\u4fe1\u606f. \u9664\u4e0a\u8ff0\u7684\u6df9\u819c\u5916, \u5e38\u89c1\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u8fd8\u6709 $$ \\begin{bmatrix} 0 & -1 & 0 \\\\ -1 & 4 & -1\\\\ 0 & -1 & 0 \\end{bmatrix} $$ $$ \\begin{bmatrix} -1 & -1 & -1 \\\\ -1 & 8 & -1\\\\ -1 & -1 & -1 \\end{bmatrix} $$ $$ \\begin{bmatrix} 1 & 1 & 1 \\\\ 1 & -8 & 1\\\\ 1 & 1 & 1 \\end{bmatrix} $$ \u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\u7684\u57fa\u672c\u8868\u793a\u65b9\u6cd5\u5982\u4e0b $$ g(x, y)= \\begin{cases} f(x, y) - \\bigtriangledown ^2f(x, y) & \\text{\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u4e2d\u5fc3\u7cfb\u6570\u4e3a\u8d1f} \\\\ f(x, y) + \\bigtriangledown ^2f(x, y) & \\text{\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u4e2d\u5fc3\u7cfb\u6570\u4e3a\u6b63} \\end{cases} $$","title":"\u9510\u5316\u6ee4\u6ce2"},{"location":"content/pil/spatial_filter_sharpening/#_2","text":"\u5728\u673a\u7406\u4e2d, \u6211\u4eec\u9996\u5148\u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u8fc7\u6ee4\u56fe\u50cf, \u7136\u540e, \u4ece\u539f\u56fe\u50cf\u4e2d\u51cf\u53bb\u8be5\u56fe\u50cf. \u4f46\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d, \u901a\u5e38\u4f7f\u7528\u5355\u4e00\u63a9\u819c\u626b\u63cf\u6765\u5b9e\u73b0. \u5047\u8bbe\u4f7f\u7528 2 \u53f7\u62c9\u666e\u62c9\u65af\u7b97\u5b50, \u4ee3\u5165\u673a\u7406\u6700\u540e\u4e00\u6b65, \u5f97\u5230 $$ g(x, y) = f(x, y) - \\bigtriangledown ^2f(x, y) = 5f(x, y) - [f(x+1, y) + f(x-1, y) + f(x, y+1) + f(x, y-1)] $$ \u56e0\u6b64, $g(x, y)$ \u53ef\u4ee5\u89c6\u4e3a $f(x, y)$ \u7ecf\u8fc7 $$ \\begin{bmatrix} 0 & -1 & 0 \\\\ -1 & 5 & -1\\\\ 0 & -1 & 0 \\end{bmatrix} $$ \u8fc7\u6ee4\u5f97\u5230. import numpy as np import PIL.Image import scipy.misc import scipy.signal def convert_2d(r): # \u6ee4\u6ce2\u63a9\u6a21 window = np.array([ [0, -1, 0], [-1, 5, -1], [0, -1, 0] ]) s = scipy.signal.convolve2d(r, window, mode='same', boundary='symm') # \u50cf\u7d20\u503c\u5982\u679c\u5927\u4e8e 255 \u5219\u53d6 255, \u5c0f\u4e8e 0 \u5219\u53d6 0 for i in range(s.shape[0]): for j in range(s.shape[1]): s[i][j] = min(max(0, s[i][j]), 255) s = s.astype(np.uint8) return s def convert_3d(r): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] ss = convert_2d(rr) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im_mat = scipy.misc.fromimage(im) im_converted_mat = convert_3d(im_mat) im_converted = PIL.Image.fromarray(im_converted_mat) im_converted.show()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/spatial_filter_sharpening/#_3","text":"\u4f7f\u7528\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5bf9\u56fe\u50cf\u8fdb\u884c\u6ee4\u6ce2, \u5f97\u5230\u56fe\u50cf\u50cf\u7d20\u7a81\u53d8\u90e8\u5206(\u8fb9\u7f18)\u4fe1\u606f \u5c06\u7ecf\u8fc7\u62c9\u666e\u62c9\u65af\u8fc7\u6ee4\u7684\u56fe\u50cf\u4e0e\u539f\u56fe\u53e0\u52a0, \u5c31\u80fd\u5f97\u5230\u539f\u56fe\u7684\u9510\u5316","title":"\u6548\u679c\u5c55\u793a"},{"location":"content/pil/sub/","text":"\u56fe\u50cf\u51cf\u6cd5 \u4e24\u5e45\u56fe\u50cf $f(x, y)$ \u4e0e $h(x, y)$ \u7684\u5dee\u5f02\u8868\u793a\u4e3a: $$ g(x, y) = f(x, y) - h(x, y) $$ \u56fe\u50cf\u7684\u5dee\u5f02\u662f\u901a\u8fc7\u8ba1\u7b97\u8fd9\u4e24\u5e45\u56fe\u50cf\u6240\u6709\u5bf9\u5e94\u50cf\u7d20\u70b9\u7684\u5dee\u800c\u5f97\u51fa\u7684. \u51cf\u6cd5\u5904\u7406\u6700\u4e3b\u8981\u7684\u4f5c\u7528\u5c31\u662f\u589e\u5f3a\u4e24\u5e45\u56fe\u50cf\u7684\u5dee\u5f02. \u5728\u5dee\u503c\u56fe\u50cf\u4e2d, \u50cf\u7d20\u6700\u5c0f\u53d6\u503c\u4e3a -255, \u6700\u5927\u53d6\u503c\u4e3a 255. \u56e0\u6b64, \u663e\u793a\u8fd9\u4e00\u56fe\u50cf\u9700\u8981\u67d0\u79cd\u6807\u5ea6. \u9996\u5148, \u63d0\u53d6\u6700\u5c0f\u5dee\u503c, \u5e76\u4e14\u628a\u5b83\u7684\u8d1f\u503c\u52a0\u5230\u63d2\u503c\u56fe\u50cf\u7684\u6240\u6709\u50cf\u7d20\u4e2d, \u7136\u540e, \u901a\u8fc7 255/Max \u503c\u53bb\u4e58\u6bcf\u4e2a\u50cf\u7d20(\u5176\u4e2d Max \u4e3a\u6539\u8fdb\u7684\u5dee\u503c\u56fe\u50cf\u4e2d\u6700\u5927\u50cf\u7d20\u53d6\u503c)\u5c06\u56fe\u50cf\u4e2d\u6240\u6709\u50cf\u7d20\u6807\u5b9a\u5230 0 \u5230 255 \u8303\u56f4\u4e2d. \u6ce8\u610f\u4e8b\u9879 \u5728 numpy \u4e2d\u56fe\u50cf\u5b58\u50a8\u7c7b\u578b\u662f uint8, \u8303\u56f4\u662f 0-255, \u5982\u679c\u56fe\u50cf\u76f8\u51cf\u540e\u5f97\u5230\u8d1f\u503c, \u5c31\u4f1a\u622a\u53d6\u4e3a 0 \u503c. \u56e0\u6b64\u5904\u7406\u5dee\u503c\u56fe\u50cf\u65f6\u9700\u8981\u5c06\u6570\u636e\u4ee5 float \u4fdd\u5b58. \u5904\u7406\u5b8c\u6210\u540e\u518d\u8f6c\u6362\u4e3a uint8. \u4ee3\u7801\u5b9e\u73b0 # \u53d6\u5f97\u539f\u56fe\u4e0e\u5176\u9ad8\u65af\u6a21\u7cca\u56fe\u50cf\u7684\u5dee\u503c\u56fe\u50cf import PIL.Image import PIL.ImageFilter import scipy.misc import numpy as np def convert_2d(r, h): # \u77e9\u9635\u51cf\u6cd5 s = r - h if np.min(s) >= 0 and np.max(s) <= 255: return s # \u7ebf\u6027\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r, h): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] hh = h[:, :, d] ss = convert_2d(rr, hh) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) # \u9ad8\u65af\u6a21\u7cca im_converted = im.filter(PIL.ImageFilter.GaussianBlur(radius=2)) im_converted_mat = scipy.misc.fromimage(im_converted) im_sub_mat = convert_3d(im_mat, im_converted_mat) im_sub = PIL.Image.fromarray(im_sub_mat) im_sub.show() \u8f93\u51fa\u7ed3\u679c","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u56fe\u50cf\u51cf\u6cd5"},{"location":"content/pil/sub/#_1","text":"\u4e24\u5e45\u56fe\u50cf $f(x, y)$ \u4e0e $h(x, y)$ \u7684\u5dee\u5f02\u8868\u793a\u4e3a: $$ g(x, y) = f(x, y) - h(x, y) $$ \u56fe\u50cf\u7684\u5dee\u5f02\u662f\u901a\u8fc7\u8ba1\u7b97\u8fd9\u4e24\u5e45\u56fe\u50cf\u6240\u6709\u5bf9\u5e94\u50cf\u7d20\u70b9\u7684\u5dee\u800c\u5f97\u51fa\u7684. \u51cf\u6cd5\u5904\u7406\u6700\u4e3b\u8981\u7684\u4f5c\u7528\u5c31\u662f\u589e\u5f3a\u4e24\u5e45\u56fe\u50cf\u7684\u5dee\u5f02. \u5728\u5dee\u503c\u56fe\u50cf\u4e2d, \u50cf\u7d20\u6700\u5c0f\u53d6\u503c\u4e3a -255, \u6700\u5927\u53d6\u503c\u4e3a 255. \u56e0\u6b64, \u663e\u793a\u8fd9\u4e00\u56fe\u50cf\u9700\u8981\u67d0\u79cd\u6807\u5ea6. \u9996\u5148, \u63d0\u53d6\u6700\u5c0f\u5dee\u503c, \u5e76\u4e14\u628a\u5b83\u7684\u8d1f\u503c\u52a0\u5230\u63d2\u503c\u56fe\u50cf\u7684\u6240\u6709\u50cf\u7d20\u4e2d, \u7136\u540e, \u901a\u8fc7 255/Max \u503c\u53bb\u4e58\u6bcf\u4e2a\u50cf\u7d20(\u5176\u4e2d Max \u4e3a\u6539\u8fdb\u7684\u5dee\u503c\u56fe\u50cf\u4e2d\u6700\u5927\u50cf\u7d20\u53d6\u503c)\u5c06\u56fe\u50cf\u4e2d\u6240\u6709\u50cf\u7d20\u6807\u5b9a\u5230 0 \u5230 255 \u8303\u56f4\u4e2d.","title":"\u56fe\u50cf\u51cf\u6cd5"},{"location":"content/pil/sub/#_2","text":"\u5728 numpy \u4e2d\u56fe\u50cf\u5b58\u50a8\u7c7b\u578b\u662f uint8, \u8303\u56f4\u662f 0-255, \u5982\u679c\u56fe\u50cf\u76f8\u51cf\u540e\u5f97\u5230\u8d1f\u503c, \u5c31\u4f1a\u622a\u53d6\u4e3a 0 \u503c. \u56e0\u6b64\u5904\u7406\u5dee\u503c\u56fe\u50cf\u65f6\u9700\u8981\u5c06\u6570\u636e\u4ee5 float \u4fdd\u5b58. \u5904\u7406\u5b8c\u6210\u540e\u518d\u8f6c\u6362\u4e3a uint8.","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"content/pil/sub/#_3","text":"# \u53d6\u5f97\u539f\u56fe\u4e0e\u5176\u9ad8\u65af\u6a21\u7cca\u56fe\u50cf\u7684\u5dee\u503c\u56fe\u50cf import PIL.Image import PIL.ImageFilter import scipy.misc import numpy as np def convert_2d(r, h): # \u77e9\u9635\u51cf\u6cd5 s = r - h if np.min(s) >= 0 and np.max(s) <= 255: return s # \u7ebf\u6027\u62c9\u4f38 s = s - np.full(s.shape, np.min(s)) s = s * 255 / np.max(s) s = s.astype(np.uint8) return s def convert_3d(r, h): s_dsplit = [] for d in range(r.shape[2]): rr = r[:, :, d] hh = h[:, :, d] ss = convert_2d(rr, hh) s_dsplit.append(ss) s = np.dstack(s_dsplit) return s im = PIL.Image.open('/img/jp.jpg') im = im.convert('RGB') im_mat = scipy.misc.fromimage(im) # \u9ad8\u65af\u6a21\u7cca im_converted = im.filter(PIL.ImageFilter.GaussianBlur(radius=2)) im_converted_mat = scipy.misc.fromimage(im_converted) im_sub_mat = convert_3d(im_mat, im_converted_mat) im_sub = PIL.Image.fromarray(im_sub_mat) im_sub.show() \u8f93\u51fa\u7ed3\u679c","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"content/pil/watermark/","text":"\u7b80\u5355\u53ef\u89c1\u6c34\u5370 \u7b80\u5355\u53ef\u89c1\u6c34\u5370\u53ef\u7531\u5982\u4e0b\u516c\u5f0f\u751f\u6210 $$ f_w = (1 - \\alpha)f + \\alpha w $$ \u5176\u4e2d $\\alpha$ \u63a7\u5236\u6c34\u5370\u548c\u886c\u5e95\u7684\u76f8\u5bf9\u53ef\u89c1\u6027, $f$ \u4e3a\u886c\u5e95, $w$ \u4e3a\u6c34\u5370\u56fe\u7247. \u7279\u522b\u7684, \u5f53 $w$ \u4e3a RGBA \u6a21\u5f0f\u65f6, \u53c2\u4e0e\u8ba1\u7b97\u7684 $\\alpha$ \u9700\u8981\u4e58\u4ee5\u6c34\u5370\u7684 A \u901a\u9053\u4e0e 255 \u7684\u6bd4\u503c. import PIL.Image import scipy.misc im = scipy.misc.imread('/img/jp.jpg', mode='RGBA') im_water = scipy.misc.imread('/img/watermark.jpg', mode='RGBA') for x in range(im_water.shape[0]): for y in range(im_water.shape[1]): a = 0.3 * im_water[x][y][-1] / 255 im[x][y][0:3] = (1 - a) * im[x][y][0:3] + a * im_water[x][y][0:3] PIL.Image.fromarray(im).show() \u4ee5\u4e0b\u56fe\u7247\u662f\u4e0a\u8ff0\u4ee3\u7801\u4f7f\u7528 $\\alpha=0.3$ \u7684\u8fd0\u884c\u7ed3\u679c, \u5176\u4e2d\u5de6\u4e0a\u89d2\u4e3a\u6c34\u5370\u56fe\u7247. LSB \u4e0d\u53ef\u89c1\u6c34\u5370 \u5728 \u6570\u5b57\u56fe\u50cf\u5904\u7406-\u4f4d\u56fe\u5207\u5272 \u4e00\u6587\u4e2d, \u5df2\u7ecf\u77e5\u6653\u4e86 8 \u6bd4\u7279\u4f4d\u56fe\u50cf\u7684\u6700\u4f4e\u9636\u6bd4\u7279\u5bf9\u4eba\u773c\u611f\u77e5\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd, \u56e0\u6b64, \u53ef\u4ee5\u5c06\u6c34\u5370\u56fe\u50cf\u7684\u9ad8\u9636\u6bd4\u7279\u4f4d\"\u63d2\u5165\"\u5728\u886c\u5e95\u7684\u4f4e\u9636\u6bd4\u7279\u4f4d\u4e2d. $$ f_w = 4(\\frac{f}{4}) + \\frac{w}{64} $$ \u4e0a\u8ff0\u516c\u5f0f\u5c06\u539f\u56fe\u4f7f\u7528\u65e0\u7b26\u53f7\u6574\u6570\u9664\u4ee5 4 \u5e76\u4e58\u4ee5 4, \u6765\u7f6e\u6700\u4f4e\u4e24\u4e2a\u6bd4\u7279\u4f4d\u4e3a 0, \u5e76\u7528 64 \u9664 $w$, \u5c06 $w$ \u7684\u4e24\u4e2a\u6700\u9ad8\u6bd4\u7279\u4f4d\u79fb\u5230\u886c\u5e95\u7684\u6700\u4f4e\u6bd4\u7279\u4f4d\u4e0a. import PIL.Image import numpy as np import scipy.misc im = scipy.misc.imread('/img/jp.jpg', mode='RGBA') im_water = scipy.misc.imread('/img/water.jpg', mode='RGBA') # LSB \u6c34\u5370\u7684\u7b2c\u4e00\u6b65\u662f\u6ee4\u9664\u886c\u5e95\u6700\u540e 2 \u4e2a\u4f4e\u9636\u6bd4\u7279\u4f4d im = im // 4 * 4 for x in range(im_water.shape[0]): for y in range(im_water.shape[1]): im[x][y] += im_water[x][y] // 64 # \u663e\u793a\u52a0\u6c34\u5370\u540e\u7684\u56fe\u50cf PIL.Image.fromarray(im.astype(np.uint8)).show() im = im % 4 / 3 * 255 # \u663e\u793a\u63d0\u53d6\u7684\u6c34\u5370\u56fe\u50cf PIL.Image.fromarray(im.astype(np.uint8)).show() \u663e\u793a\u52a0\u6c34\u5370\u540e\u7684\u56fe\u50cf \u663e\u793a\u63d0\u53d6\u7684\u6c34\u5370\u56fe\u50cf \u8981\u8bf4\u660e\u7684\u662f, LSB \u6c34\u5370\u975e\u5e38\u8106\u5f31, \u8bf8\u5982\u88c1\u526a, \u65cb\u8f6c, \u7f29\u653e, \u56fe\u50cf\u538b\u7f29\u7b49\u64cd\u4f5c\u53ef\u4ee5\u8f7b\u6613\u7834\u574f\u8be5\u6c34\u5370.","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406-\u6c34\u5370"},{"location":"content/pil/watermark/#_1","text":"\u7b80\u5355\u53ef\u89c1\u6c34\u5370\u53ef\u7531\u5982\u4e0b\u516c\u5f0f\u751f\u6210 $$ f_w = (1 - \\alpha)f + \\alpha w $$ \u5176\u4e2d $\\alpha$ \u63a7\u5236\u6c34\u5370\u548c\u886c\u5e95\u7684\u76f8\u5bf9\u53ef\u89c1\u6027, $f$ \u4e3a\u886c\u5e95, $w$ \u4e3a\u6c34\u5370\u56fe\u7247. \u7279\u522b\u7684, \u5f53 $w$ \u4e3a RGBA \u6a21\u5f0f\u65f6, \u53c2\u4e0e\u8ba1\u7b97\u7684 $\\alpha$ \u9700\u8981\u4e58\u4ee5\u6c34\u5370\u7684 A \u901a\u9053\u4e0e 255 \u7684\u6bd4\u503c. import PIL.Image import scipy.misc im = scipy.misc.imread('/img/jp.jpg', mode='RGBA') im_water = scipy.misc.imread('/img/watermark.jpg', mode='RGBA') for x in range(im_water.shape[0]): for y in range(im_water.shape[1]): a = 0.3 * im_water[x][y][-1] / 255 im[x][y][0:3] = (1 - a) * im[x][y][0:3] + a * im_water[x][y][0:3] PIL.Image.fromarray(im).show() \u4ee5\u4e0b\u56fe\u7247\u662f\u4e0a\u8ff0\u4ee3\u7801\u4f7f\u7528 $\\alpha=0.3$ \u7684\u8fd0\u884c\u7ed3\u679c, \u5176\u4e2d\u5de6\u4e0a\u89d2\u4e3a\u6c34\u5370\u56fe\u7247.","title":"\u7b80\u5355\u53ef\u89c1\u6c34\u5370"},{"location":"content/pil/watermark/#lsb","text":"\u5728 \u6570\u5b57\u56fe\u50cf\u5904\u7406-\u4f4d\u56fe\u5207\u5272 \u4e00\u6587\u4e2d, \u5df2\u7ecf\u77e5\u6653\u4e86 8 \u6bd4\u7279\u4f4d\u56fe\u50cf\u7684\u6700\u4f4e\u9636\u6bd4\u7279\u5bf9\u4eba\u773c\u611f\u77e5\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd, \u56e0\u6b64, \u53ef\u4ee5\u5c06\u6c34\u5370\u56fe\u50cf\u7684\u9ad8\u9636\u6bd4\u7279\u4f4d\"\u63d2\u5165\"\u5728\u886c\u5e95\u7684\u4f4e\u9636\u6bd4\u7279\u4f4d\u4e2d. $$ f_w = 4(\\frac{f}{4}) + \\frac{w}{64} $$ \u4e0a\u8ff0\u516c\u5f0f\u5c06\u539f\u56fe\u4f7f\u7528\u65e0\u7b26\u53f7\u6574\u6570\u9664\u4ee5 4 \u5e76\u4e58\u4ee5 4, \u6765\u7f6e\u6700\u4f4e\u4e24\u4e2a\u6bd4\u7279\u4f4d\u4e3a 0, \u5e76\u7528 64 \u9664 $w$, \u5c06 $w$ \u7684\u4e24\u4e2a\u6700\u9ad8\u6bd4\u7279\u4f4d\u79fb\u5230\u886c\u5e95\u7684\u6700\u4f4e\u6bd4\u7279\u4f4d\u4e0a. import PIL.Image import numpy as np import scipy.misc im = scipy.misc.imread('/img/jp.jpg', mode='RGBA') im_water = scipy.misc.imread('/img/water.jpg', mode='RGBA') # LSB \u6c34\u5370\u7684\u7b2c\u4e00\u6b65\u662f\u6ee4\u9664\u886c\u5e95\u6700\u540e 2 \u4e2a\u4f4e\u9636\u6bd4\u7279\u4f4d im = im // 4 * 4 for x in range(im_water.shape[0]): for y in range(im_water.shape[1]): im[x][y] += im_water[x][y] // 64 # \u663e\u793a\u52a0\u6c34\u5370\u540e\u7684\u56fe\u50cf PIL.Image.fromarray(im.astype(np.uint8)).show() im = im % 4 / 3 * 255 # \u663e\u793a\u63d0\u53d6\u7684\u6c34\u5370\u56fe\u50cf PIL.Image.fromarray(im.astype(np.uint8)).show() \u663e\u793a\u52a0\u6c34\u5370\u540e\u7684\u56fe\u50cf \u663e\u793a\u63d0\u53d6\u7684\u6c34\u5370\u56fe\u50cf \u8981\u8bf4\u660e\u7684\u662f, LSB \u6c34\u5370\u975e\u5e38\u8106\u5f31, \u8bf8\u5982\u88c1\u526a, \u65cb\u8f6c, \u7f29\u653e, \u56fe\u50cf\u538b\u7f29\u7b49\u64cd\u4f5c\u53ef\u4ee5\u8f7b\u6613\u7834\u574f\u8be5\u6c34\u5370.","title":"LSB \u4e0d\u53ef\u89c1\u6c34\u5370"},{"location":"content/py/f_string/","text":"\u5728 python3.6 \u4f53\u9a8c\u65b0\u7684 f-string f-string \u662f python3.6 \u65b0\u589e\u7684\u529f\u80fd. \u8fd9\u91cc\u7b80\u8981\u6458\u5f55\u4e00\u4e0b f-string \u8bed\u6cd5\u907f\u514d\u9057\u5fd8. \u8bed\u6cd5 f-string \u7684\u6807\u51c6\u8bed\u6cd5\u975e\u5e38\u7b80\u5355, \u7406\u89e3\u4e3a\u5f85\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 {} \u5c06\u4f1a\u88ab\u5f53\u4f5c python \u4ee3\u7801\u6c42\u503c\u5373\u53ef. name = 'mohanson' pi = 3.14 # \u8bed\u6cd5: \u6267\u884c python \u4ee3\u7801 print(f'name: {name}') # name: mohanson print(f'name: {str.upper(name)}') # name: MOHANSON print(f'2 * pi = {2 * pi}') # 2 * pi = 6.28 # \u8bed\u6cd5: \u5bf9\u9f50 print(f'pi: {pi:0<10}') # pi: 3.14000000 print(f'pi: {pi:0>10}') # pi: 0000003.14 print(f'pi: {pi:0^10}') # pi: 0003.14000 # \u8bed\u6cd5: \u56fa\u5b9a\u6d6e\u70b9\u6570\u4f4d\u6570 print(f'pi: {pi:.1f}') # pi: 3.1 # \u8bed\u6cd5: !r, !s, !a \u66ff\u4ee3 repr(), str(), ascii() print(f'name: {name!r}') # name: 'mohanson' \u53c2\u8003 [1] Eric V.Smith: PEP 498 -- Literal String Interpolation https://www.python.org/dev/peps/pep-0498/","title":"Python-f-string"},{"location":"content/py/f_string/#python36-f-string","text":"f-string \u662f python3.6 \u65b0\u589e\u7684\u529f\u80fd. \u8fd9\u91cc\u7b80\u8981\u6458\u5f55\u4e00\u4e0b f-string \u8bed\u6cd5\u907f\u514d\u9057\u5fd8.","title":"\u5728 python3.6 \u4f53\u9a8c\u65b0\u7684 f-string"},{"location":"content/py/f_string/#_1","text":"f-string \u7684\u6807\u51c6\u8bed\u6cd5\u975e\u5e38\u7b80\u5355, \u7406\u89e3\u4e3a\u5f85\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 {} \u5c06\u4f1a\u88ab\u5f53\u4f5c python \u4ee3\u7801\u6c42\u503c\u5373\u53ef. name = 'mohanson' pi = 3.14 # \u8bed\u6cd5: \u6267\u884c python \u4ee3\u7801 print(f'name: {name}') # name: mohanson print(f'name: {str.upper(name)}') # name: MOHANSON print(f'2 * pi = {2 * pi}') # 2 * pi = 6.28 # \u8bed\u6cd5: \u5bf9\u9f50 print(f'pi: {pi:0<10}') # pi: 3.14000000 print(f'pi: {pi:0>10}') # pi: 0000003.14 print(f'pi: {pi:0^10}') # pi: 0003.14000 # \u8bed\u6cd5: \u56fa\u5b9a\u6d6e\u70b9\u6570\u4f4d\u6570 print(f'pi: {pi:.1f}') # pi: 3.1 # \u8bed\u6cd5: !r, !s, !a \u66ff\u4ee3 repr(), str(), ascii() print(f'name: {name!r}') # name: 'mohanson'","title":"\u8bed\u6cd5"},{"location":"content/py/f_string/#_2","text":"[1] Eric V.Smith: PEP 498 -- Literal String Interpolation https://www.python.org/dev/peps/pep-0498/","title":"\u53c2\u8003"},{"location":"content/py/setup/","text":"\u5b98\u65b9\u6559\u7a0b: https://packaging.python.org/tutorials/distributing-packages/ \u793a\u4f8b\u9879\u76ee: https://github.com/pypa/sampleproject \u914d\u7f6e\u8d26\u53f7 \u5728 $HOME \u4e0b\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9\u81f3 .pypirc [distutils] index-servers = pypi [pypi] username = username password = password \u521b\u5efa setup.py import setuptools setuptools.setup( name='sample', version='1.2.0', url='https://github.com/pypa/sampleproject', license='MIT', author='The Python Packaging Authority', author_email='pypa-dev@googlegroups.com', description='A sample Python project', packages=['sample'], install_requires=[ 'peppercorn', ] ) \u6253\u5305\u5e76\u53d1\u5e03 $ python setup.py sdist bdist_wheel $ python -m pip install --upgrade twine $ python -m twine upload dist/* \u63d0\u793a \u53d1\u5e03\u6a21\u5757\u4e0e\u6587\u4ef6 \u5728 setup.py \u4e2d, \u4f7f\u7528 packages=['sample'] \u4f1a\u53d1\u5e03 sample \u76ee\u5f55(\u5305), \u800c\u4f7f\u7528 py_modules=['sample'] \u4f1a\u53d1\u5e03 sample.py \u6587\u4ef6. \u5927\u591a\u6570\u60c5\u51b5\u4e0b, \u4f60\u53ef\u4ee5\u4f7f\u7528 packages=setuptools.find_packages() \u81ea\u52a8\u53d1\u73b0\u4ee3\u66ff\u624b\u52a8\u586b\u5199. \u751f\u6210\u547d\u4ee4\u884c\u7a0b\u5e8f entry_points={ 'console_scripts': [ 'sample=sample:main', ], } \u5728 setup.py \u4e2d\u914d\u7f6e\u4ee5\u4e0a\u4ee3\u7801, \u4e00\u4e2a\u540d\u4e3a sample \u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\u5c06\u5728\u5b89\u88c5\u6b64\u6a21\u5757\u540e\u751f\u6210.","title":"Python-\u6253\u5305\u5e76\u53d1\u5e03\u4ee3\u7801\u81f3 PyPI"},{"location":"content/py/setup/#_1","text":"\u5728 $HOME \u4e0b\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9\u81f3 .pypirc [distutils] index-servers = pypi [pypi] username = username password = password","title":"\u914d\u7f6e\u8d26\u53f7"},{"location":"content/py/setup/#setuppy","text":"import setuptools setuptools.setup( name='sample', version='1.2.0', url='https://github.com/pypa/sampleproject', license='MIT', author='The Python Packaging Authority', author_email='pypa-dev@googlegroups.com', description='A sample Python project', packages=['sample'], install_requires=[ 'peppercorn', ] )","title":"\u521b\u5efa setup.py"},{"location":"content/py/setup/#_2","text":"$ python setup.py sdist bdist_wheel $ python -m pip install --upgrade twine $ python -m twine upload dist/*","title":"\u6253\u5305\u5e76\u53d1\u5e03"},{"location":"content/py/setup/#_3","text":"\u53d1\u5e03\u6a21\u5757\u4e0e\u6587\u4ef6 \u5728 setup.py \u4e2d, \u4f7f\u7528 packages=['sample'] \u4f1a\u53d1\u5e03 sample \u76ee\u5f55(\u5305), \u800c\u4f7f\u7528 py_modules=['sample'] \u4f1a\u53d1\u5e03 sample.py \u6587\u4ef6. \u5927\u591a\u6570\u60c5\u51b5\u4e0b, \u4f60\u53ef\u4ee5\u4f7f\u7528 packages=setuptools.find_packages() \u81ea\u52a8\u53d1\u73b0\u4ee3\u66ff\u624b\u52a8\u586b\u5199. \u751f\u6210\u547d\u4ee4\u884c\u7a0b\u5e8f entry_points={ 'console_scripts': [ 'sample=sample:main', ], } \u5728 setup.py \u4e2d\u914d\u7f6e\u4ee5\u4e0a\u4ee3\u7801, \u4e00\u4e2a\u540d\u4e3a sample \u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\u5c06\u5728\u5b89\u88c5\u6b64\u6a21\u5757\u540e\u751f\u6210.","title":"\u63d0\u793a"},{"location":"content/py/ctypes/overview/","text":"\u8be5\u7cfb\u5217\u6587\u7ae0\u5f88\u65e9\u5c31\u51c6\u5907\u5199\u4e86, \u4f46\u662f\u4e00\u76f4\u62d6\u7740... \u6545\u4e8b\u7684\u8d77\u56e0\u662f\u6211\u5728 windows \u4e0b rm -rf \u4e86\u81ea\u5df1\u7684\u7528\u6237\u76ee\u5f55, \u56e0\u6b64\u5728\u8be5\u8d77\u4e8b\u4ef6\u540e\u5c31\u7814\u7a76\u8d77\u6765\u5982\u4f55 rm \u7684\u65f6\u5019\u628a\u6587\u4ef6\u653e\u5165\u56de\u6536\u7ad9\u800c\u4e0d\u662f\u76f4\u63a5\u5220\u9664, windows \u63d0\u4f9b\u4e86 C++ \u7248\u672c\u7684 api \u6765\u5b9e\u73b0\u8fd9\u4e00\u9700\u6c42, \u4f46\u4f5c\u4e3a\u4e00\u4e2a\u61d2\u4eba\u6211\u5e76\u4e0d\u60f3\u73a9 C++, \u6240\u4ee5, Python \u5927\u6cd5\u597d~ Python windows \u7f16\u7a0b: \u6982\u89c8 \u5728 windows \u5e73\u53f0\u4e0b, python \u901a\u8fc7 ctypes \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u4e0e windows api \u8fdb\u884c\u4ea4\u4e92. \u5982\u4e0b\u7684\u4ee3\u7801\u5c06\u5728\u684c\u9762\u521b\u5efa\u4e00\u4e2a MessageBoxW , \u5e76\u5728\u901a\u77e5\u7684\u5185\u5bb9\u4e2d\u663e\u793a\u5f53\u524d\u65f6\u95f4. import ctypes import datetime c = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') ctypes.windll.user32.MessageBoxW(0, c, '\u67e5\u8be2\u65f6\u95f4', 1) MessageBoxW \u7684 C++ \u63a5\u53e3\u6587\u6863\u4f4d\u4e8e https://msdn.microsoft.com/en-us/library/windows/desktop/ms645505(v=vs.85).aspx , \u5982\u6587\u6863\u6240\u89c1, \u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4fee\u6539\u5305\u62ec\u6807\u9898, \u6b63\u6587, \u6309\u94ae\u548c icon \u7b49\u5728\u5185\u7684\u51e0\u4e4e\u6240\u6709\u5185\u5bb9. \u4e0e\u4e0a\u8ff0 Python \u4ee3\u7801\u7b49\u6548\u7684 C++ \u4ee3\u7801\u5982\u4e0b\u6240\u793a: #include <windows.h> #pragma comment (lib, \"User32.lib\") int WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow ){ MessageBoxW(NULL, (LPCWSTR)L\"2018-05-20 10:22:38\", (LPCWSTR)L\"\u67e5\u8be2\u65f6\u95f4\", MB_OKCANCEL); return 0; }","title":"Python-windows\u7f16\u7a0b-\u6982\u89c8"},{"location":"content/py/ctypes/overview/#python-windows","text":"\u5728 windows \u5e73\u53f0\u4e0b, python \u901a\u8fc7 ctypes \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u4e0e windows api \u8fdb\u884c\u4ea4\u4e92. \u5982\u4e0b\u7684\u4ee3\u7801\u5c06\u5728\u684c\u9762\u521b\u5efa\u4e00\u4e2a MessageBoxW , \u5e76\u5728\u901a\u77e5\u7684\u5185\u5bb9\u4e2d\u663e\u793a\u5f53\u524d\u65f6\u95f4. import ctypes import datetime c = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') ctypes.windll.user32.MessageBoxW(0, c, '\u67e5\u8be2\u65f6\u95f4', 1) MessageBoxW \u7684 C++ \u63a5\u53e3\u6587\u6863\u4f4d\u4e8e https://msdn.microsoft.com/en-us/library/windows/desktop/ms645505(v=vs.85).aspx , \u5982\u6587\u6863\u6240\u89c1, \u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4fee\u6539\u5305\u62ec\u6807\u9898, \u6b63\u6587, \u6309\u94ae\u548c icon \u7b49\u5728\u5185\u7684\u51e0\u4e4e\u6240\u6709\u5185\u5bb9. \u4e0e\u4e0a\u8ff0 Python \u4ee3\u7801\u7b49\u6548\u7684 C++ \u4ee3\u7801\u5982\u4e0b\u6240\u793a: #include <windows.h> #pragma comment (lib, \"User32.lib\") int WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow ){ MessageBoxW(NULL, (LPCWSTR)L\"2018-05-20 10:22:38\", (LPCWSTR)L\"\u67e5\u8be2\u65f6\u95f4\", MB_OKCANCEL); return 0; }","title":"Python windows \u7f16\u7a0b: \u6982\u89c8"},{"location":"content/py/ctypes/recycle/","text":"Python windows \u7f16\u7a0b: \u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9 \u73b0\u5728\u8981\u5b9e\u73b0\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u7f16\u7a0b: \u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9. \u67e5\u9605 MSDN \u627e\u5230\u5982\u4e0b\u6587\u6863: https://msdn.microsoft.com/en-us/library/windows/desktop/bb762164(v=vs.85).aspx , \u53d1\u73b0\u6b63\u597d\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42. SHFileOperation \u51fd\u6570\u7684\u8bf4\u660e\u662f \"Copies, moves, renames, or deletes a file system object.\" \u4e0e\u4f7f\u7528 rm \u6216 os.remove \u7b49\u5220\u9664\u547d\u4ee4/\u51fd\u6570\u4e0d\u540c, \u8be5\u51fd\u6570\u7ecf\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u7684\u5c01\u88c5, \u4ed6\u4f1a\u5728\u5220\u9664\u6587\u4ef6\u65f6\u8be2\u95ee\u4f60 \"\u662f\u5426\u771f\u7684\u5220\u9664\u8be5\u6587\u4ef6\" \u6216\u5728\u590d\u5236\u6587\u4ef6\u65f6\u63d0\u9192\u4f60 \"\u6587\u4ef6\u5df2\u5b58\u5728, \u662f\u5426\u8986\u76d6\", \u5927\u90e8\u5206\u60c5\u51b5\u4e0b, \u4f60\u53ef\u4ee5\u5c06\u4ed6\u7b49\u4ef7\u4e3a\u4f60\u5728 windows \u7684\u6587\u4ef6\u7cfb\u7edf\u91cc\u6267\u884c\u67d0\u4e00\u64cd\u4f5c, \u5c31\u50cf\u4f60\u5728\u624b\u52a8\u64cd\u4f5c\u4e00\u6837. int SHFileOperation( _Inout_ LPSHFILEOPSTRUCT lpFileOp ); \u5f88\u597d! \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8be5\u8c03\u7528\u54ea\u4e2a\u51fd\u6570\u4e86. \u4f46\u73b0\u5728\u9047\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898, SHFileOperation \u7684\u53c2\u6570 lpFileOp \u65e2\u4e0d\u662f\u6211\u4eec\u719f\u77e5\u7684\u6574\u5f62, \u4e5f\u4e0d\u662f\u5b57\u7b26\u4e32, \u800c\u662f\u4e00\u4e2a\u540d\u4e3a LPSHFILEOPSTRUCT \u7684\u7ed3\u6784\u4f53: typedef struct _SHFILEOPSTRUCT { HWND hwnd; UINT wFunc; PCZZTSTR pFrom; PCZZTSTR pTo; FILEOP_FLAGS fFlags; BOOL fAnyOperationsAborted; LPVOID hNameMappings; PCTSTR lpszProgressTitle; } SHFILEOPSTRUCT, *LPSHFILEOPSTRUCT; \u4e3a\u4e86\u5728 Python \u4e2d\u8c03\u7528\u8be5\u51fd\u6570, \u6211\u4eec\u5fc5\u987b\u5b9e\u73b0 LPSHFILEOPSTRUCT \u5728 Python \u4e2d\u7684\u6620\u5c04. \u5b9a\u4e49\u4e00\u4e2a\u7c7b\u5e76\u7ee7\u627f ctypes.Structure , \u7136\u540e\u4e3a\u5176\u6dfb\u52a0 _fields_ \u5b57\u6bb5, \u5b57\u6bb5\u5185\u90e8\u662f\u6210\u5458\u540d\u4e0e\u7c7b\u578b\u7684\u5143\u7ec4. import ctypes import ctypes.wintypes class LPSHFILEOPSTRUCT(ctypes.Structure): _fields_ = [ ('hwnd', ctypes.wintypes.HWND), ('wFunc', ctypes.wintypes.UINT), ('pFrom', ctypes.wintypes.PCHAR), ('pTo', ctypes.wintypes.PCHAR), ('fFlags', ctypes.wintypes.INT), ('fAnyOperationsAborted', ctypes.wintypes.BOOL), ('hNameMappings', ctypes.wintypes.LPVOID), ('lpszProgressTitle', ctypes.wintypes.PCHAR) ] FO_DELETE = 3 FOF_SILENT = 4 FOF_NOCONFIRMATION = 16 FOF_ALLOWUNDO = 64 FOF_NOCONFIRMMKDIR = 512 FOF_NOERRORUI = 1024 FOF_NO_UI = FOF_SILENT | FOF_NOCONFIRMATION | FOF_NOERRORUI | FOF_NOCONFIRMMKDIR def rm(p): r = ctypes.windll.shell32.SHFileOperation(LPSHFILEOPSTRUCT( hwnd=0, wFunc=FO_DELETE, pFrom=ctypes.create_string_buffer(p.encode()), fFlags=FOF_ALLOWUNDO | FOF_NO_UI )) if r: raise Exception(r) \u5b8c\u6210\u4e86! \u8c03\u7528 rm() \u51fd\u6570\u5373\u53ef\u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9. \u6ce8\u610f\u4e0a\u9762\u7684\u4ee3\u7801, \u6211\u4e3a LPSHFILEOPSTRUCT \u7684 fFlags \u8bbe\u7f6e\u4e86\u51e0\u4e2a\u6807\u7b7e, \u4ee5\u5b9e\u73b0\u9759\u9ed8\u5220\u9664\u6587\u4ef6\u548c\u5220\u9664\u6587\u4ef6\u5939\u81f3\u56de\u6536\u7ad9.","title":"Python-windows\u7f16\u7a0b-\u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9"},{"location":"content/py/ctypes/recycle/#python-windows","text":"\u73b0\u5728\u8981\u5b9e\u73b0\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u7f16\u7a0b: \u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9. \u67e5\u9605 MSDN \u627e\u5230\u5982\u4e0b\u6587\u6863: https://msdn.microsoft.com/en-us/library/windows/desktop/bb762164(v=vs.85).aspx , \u53d1\u73b0\u6b63\u597d\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42. SHFileOperation \u51fd\u6570\u7684\u8bf4\u660e\u662f \"Copies, moves, renames, or deletes a file system object.\" \u4e0e\u4f7f\u7528 rm \u6216 os.remove \u7b49\u5220\u9664\u547d\u4ee4/\u51fd\u6570\u4e0d\u540c, \u8be5\u51fd\u6570\u7ecf\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u7684\u5c01\u88c5, \u4ed6\u4f1a\u5728\u5220\u9664\u6587\u4ef6\u65f6\u8be2\u95ee\u4f60 \"\u662f\u5426\u771f\u7684\u5220\u9664\u8be5\u6587\u4ef6\" \u6216\u5728\u590d\u5236\u6587\u4ef6\u65f6\u63d0\u9192\u4f60 \"\u6587\u4ef6\u5df2\u5b58\u5728, \u662f\u5426\u8986\u76d6\", \u5927\u90e8\u5206\u60c5\u51b5\u4e0b, \u4f60\u53ef\u4ee5\u5c06\u4ed6\u7b49\u4ef7\u4e3a\u4f60\u5728 windows \u7684\u6587\u4ef6\u7cfb\u7edf\u91cc\u6267\u884c\u67d0\u4e00\u64cd\u4f5c, \u5c31\u50cf\u4f60\u5728\u624b\u52a8\u64cd\u4f5c\u4e00\u6837. int SHFileOperation( _Inout_ LPSHFILEOPSTRUCT lpFileOp ); \u5f88\u597d! \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8be5\u8c03\u7528\u54ea\u4e2a\u51fd\u6570\u4e86. \u4f46\u73b0\u5728\u9047\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898, SHFileOperation \u7684\u53c2\u6570 lpFileOp \u65e2\u4e0d\u662f\u6211\u4eec\u719f\u77e5\u7684\u6574\u5f62, \u4e5f\u4e0d\u662f\u5b57\u7b26\u4e32, \u800c\u662f\u4e00\u4e2a\u540d\u4e3a LPSHFILEOPSTRUCT \u7684\u7ed3\u6784\u4f53: typedef struct _SHFILEOPSTRUCT { HWND hwnd; UINT wFunc; PCZZTSTR pFrom; PCZZTSTR pTo; FILEOP_FLAGS fFlags; BOOL fAnyOperationsAborted; LPVOID hNameMappings; PCTSTR lpszProgressTitle; } SHFILEOPSTRUCT, *LPSHFILEOPSTRUCT; \u4e3a\u4e86\u5728 Python \u4e2d\u8c03\u7528\u8be5\u51fd\u6570, \u6211\u4eec\u5fc5\u987b\u5b9e\u73b0 LPSHFILEOPSTRUCT \u5728 Python \u4e2d\u7684\u6620\u5c04. \u5b9a\u4e49\u4e00\u4e2a\u7c7b\u5e76\u7ee7\u627f ctypes.Structure , \u7136\u540e\u4e3a\u5176\u6dfb\u52a0 _fields_ \u5b57\u6bb5, \u5b57\u6bb5\u5185\u90e8\u662f\u6210\u5458\u540d\u4e0e\u7c7b\u578b\u7684\u5143\u7ec4. import ctypes import ctypes.wintypes class LPSHFILEOPSTRUCT(ctypes.Structure): _fields_ = [ ('hwnd', ctypes.wintypes.HWND), ('wFunc', ctypes.wintypes.UINT), ('pFrom', ctypes.wintypes.PCHAR), ('pTo', ctypes.wintypes.PCHAR), ('fFlags', ctypes.wintypes.INT), ('fAnyOperationsAborted', ctypes.wintypes.BOOL), ('hNameMappings', ctypes.wintypes.LPVOID), ('lpszProgressTitle', ctypes.wintypes.PCHAR) ] FO_DELETE = 3 FOF_SILENT = 4 FOF_NOCONFIRMATION = 16 FOF_ALLOWUNDO = 64 FOF_NOCONFIRMMKDIR = 512 FOF_NOERRORUI = 1024 FOF_NO_UI = FOF_SILENT | FOF_NOCONFIRMATION | FOF_NOERRORUI | FOF_NOCONFIRMMKDIR def rm(p): r = ctypes.windll.shell32.SHFileOperation(LPSHFILEOPSTRUCT( hwnd=0, wFunc=FO_DELETE, pFrom=ctypes.create_string_buffer(p.encode()), fFlags=FOF_ALLOWUNDO | FOF_NO_UI )) if r: raise Exception(r) \u5b8c\u6210\u4e86! \u8c03\u7528 rm() \u51fd\u6570\u5373\u53ef\u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9. \u6ce8\u610f\u4e0a\u9762\u7684\u4ee3\u7801, \u6211\u4e3a LPSHFILEOPSTRUCT \u7684 fFlags \u8bbe\u7f6e\u4e86\u51e0\u4e2a\u6807\u7b7e, \u4ee5\u5b9e\u73b0\u9759\u9ed8\u5220\u9664\u6587\u4ef6\u548c\u5220\u9664\u6587\u4ef6\u5939\u81f3\u56de\u6536\u7ad9.","title":"Python windows \u7f16\u7a0b: \u5220\u9664\u6587\u4ef6\u81f3\u56de\u6536\u7ad9"},{"location":"content/py/np/split/","text":"\u9996\u5148\u521d\u59cb\u5316\u4e00\u4e0b\u8fd0\u884c\u73af\u5883. \u5728\u8be5\u4f8b\u7a0b\u4e2d\u4f7f\u7528\u4e00\u5f20 (270, 480, 4) \u7684 RGBA \u56fe\u50cf\u4f5c\u4e3a\u539f\u6570\u636e: import skimage.io import numpy as np im = skimage.io.imread('jp.jpg') print(im.shape) # (270, 480, 4) \u56fe\u50cf\u5206\u5272\u4e0e\u5408\u5e76 # \u7eb5\u5411\u5206\u5272\u4e3a\u76f8\u7b49\u4e24\u4efd r = np.split(im, 2, axis=1) # \u5c06\u4e24\u4efd\u56fe\u50cf\u7eb5\u5411\u5408\u5e76 im = np.concatenate(r, axis=1) # \u6a2a\u5411\u5206\u5272\u4e3a\u76f8\u7b49\u4e24\u4efd r = np.split(im, 2, axis=0) # \u5c06\u4e24\u4efd\u56fe\u50cf\u6a2a\u5411\u5408\u5e76 im = np.concatenate(r, axis=0) # \u7eb5\u5411\u5206\u5272\u4e3a 0-50, 50-430, 430-480 \u4e09\u90e8\u5206 r = np.split(im, [50, 430], axis=1) \u901a\u9053\u5206\u5272\u4e0e\u5408\u5e76 # \u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u76f4\u63a5\u8bbf\u95ee RGBA \u901a\u9053 r = im[:, :, 0] g = im[:, :, 1] b = im[:, :, 2] a = im[:, :, 3] # \u6216\u8005\u4f7f\u7528 split \u51fd\u6570, \u5e76\u8c03\u7528 squeeze \u79fb\u9664\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6 splits = np.split(im, 4, axis=2) r = np.squeeze(splits[0], 2) g = np.squeeze(splits[1], 2) b = np.squeeze(splits[2], 2) a = np.squeeze(splits[3], 2) # \u4f7f\u7528 stack \u91cd\u5efa\u539f\u59cb\u56fe\u50cf im = np.stack((r, g, b, a), axis=2) # \u7f8e\u7f8e\u54d2\u5c55\u793a\u51fa\u6765 import matplotlib.pyplot as plt plt.style.use('seaborn') _, axes = plt.subplots(2, 2) axes[0][0].imshow(im) axes[0][0].axis('off') axes[0][1].imshow(r, cmap='Reds') axes[0][1].axis('off') axes[1][0].imshow(g, cmap='Greens') axes[1][0].axis('off') axes[1][1].imshow(b, cmap='Blues') axes[1][1].axis('off') plt.show()","title":"Python-np-\u5206\u5272\u4e0e\u5408\u5e76"},{"location":"content/py/np/split/#_1","text":"# \u7eb5\u5411\u5206\u5272\u4e3a\u76f8\u7b49\u4e24\u4efd r = np.split(im, 2, axis=1) # \u5c06\u4e24\u4efd\u56fe\u50cf\u7eb5\u5411\u5408\u5e76 im = np.concatenate(r, axis=1) # \u6a2a\u5411\u5206\u5272\u4e3a\u76f8\u7b49\u4e24\u4efd r = np.split(im, 2, axis=0) # \u5c06\u4e24\u4efd\u56fe\u50cf\u6a2a\u5411\u5408\u5e76 im = np.concatenate(r, axis=0) # \u7eb5\u5411\u5206\u5272\u4e3a 0-50, 50-430, 430-480 \u4e09\u90e8\u5206 r = np.split(im, [50, 430], axis=1)","title":"\u56fe\u50cf\u5206\u5272\u4e0e\u5408\u5e76"},{"location":"content/py/np/split/#_2","text":"# \u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u76f4\u63a5\u8bbf\u95ee RGBA \u901a\u9053 r = im[:, :, 0] g = im[:, :, 1] b = im[:, :, 2] a = im[:, :, 3] # \u6216\u8005\u4f7f\u7528 split \u51fd\u6570, \u5e76\u8c03\u7528 squeeze \u79fb\u9664\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6 splits = np.split(im, 4, axis=2) r = np.squeeze(splits[0], 2) g = np.squeeze(splits[1], 2) b = np.squeeze(splits[2], 2) a = np.squeeze(splits[3], 2) # \u4f7f\u7528 stack \u91cd\u5efa\u539f\u59cb\u56fe\u50cf im = np.stack((r, g, b, a), axis=2) # \u7f8e\u7f8e\u54d2\u5c55\u793a\u51fa\u6765 import matplotlib.pyplot as plt plt.style.use('seaborn') _, axes = plt.subplots(2, 2) axes[0][0].imshow(im) axes[0][0].axis('off') axes[0][1].imshow(r, cmap='Reds') axes[0][1].axis('off') axes[1][0].imshow(g, cmap='Greens') axes[1][0].axis('off') axes[1][1].imshow(b, cmap='Blues') axes[1][1].axis('off') plt.show()","title":"\u901a\u9053\u5206\u5272\u4e0e\u5408\u5e76"},{"location":"content/py/plt/bar/","text":"\u67f1\u72b6\u56fe import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y = np.array([0.5, 0.67, 0.71, 0.56, 0.8]) ax = plt.subplot() ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V']) # \u5728\u67f1\u72b6\u56fe\u4e0a\u6807\u8bb0 y \u8f74\u5927\u5c0f for x, y in zip(X, Y): ax.text(x, y, f'{y:.2}', ha='center', va='bottom') plt.show() \u989c\u8272 axes.bar \u51fd\u6570\u7684 color \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u989c\u8272; color \u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u989c\u8272, \u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u989c\u8272\u6570\u7ec4 ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V'], color=['pink', 'purple']) \u586b\u5145 axes.bar \u51fd\u6570\u7684 hatch \u53c2\u6570\u53ef\u4ee5\u586b\u5145\u6837\u5f0f, \u53ef\u53d6\u503c\u4e3a: / , \\ , | , - , + , x , o , O , . , * ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V'], hatch='/') \u5806\u53e0\u67f1\u72b6\u56fe \u4f7f\u7528 bottom \u53c2\u6570\u5806\u53e0\u67f1\u72b6\u56fe import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y1 = np.array([0.5, 0.67, 0.71, 0.56, 0.8]) Y2 = np.random.random(5) ax = plt.subplot() ax.bar(X, Y1, tick_label=['I', 'II', 'III', 'IV', 'V'], label='Y1') ax.bar(X, Y2, bottom=Y1, label='Y2') plt.legend() plt.show() \u67f1\u72b6\u56fe\u5e76\u5217 \u8bbe\u7f6e\u67f1\u72b6\u56fe\u7684 bar_width \u5b9e\u73b0\u67f1\u72b6\u56fe\u5e76\u5217 import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') bar_width = 0.8 / 2 X1 = np.arange(5) + 1 Y1 = np.random.random(5) X2 = X1 + bar_width Y2 = np.random.random(5) plt.bar(X1, Y1, bar_width) plt.bar(X2, Y2, bar_width) plt.xticks(X1+bar_width / 2, ['I', 'II', 'III', 'IV', 'V']) plt.show() \u6761\u72b6\u56fe \u6761\u72b6\u56fe\u4e0e\u67f1\u72b6\u56fe\u57fa\u672c\u7c7b\u4f3c. import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y = np.random.random(5) ax = plt.subplot() ax.barh(X, Y) ax.set_yticks(X) ax.set_yticklabels(['I', 'II', 'III', 'IV', 'V']) plt.show()","title":"Python-matplotlib-\u67f1\u72b6\u56fe"},{"location":"content/py/plt/bar/#_1","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y = np.array([0.5, 0.67, 0.71, 0.56, 0.8]) ax = plt.subplot() ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V']) # \u5728\u67f1\u72b6\u56fe\u4e0a\u6807\u8bb0 y \u8f74\u5927\u5c0f for x, y in zip(X, Y): ax.text(x, y, f'{y:.2}', ha='center', va='bottom') plt.show()","title":"\u67f1\u72b6\u56fe"},{"location":"content/py/plt/bar/#_2","text":"axes.bar \u51fd\u6570\u7684 color \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u989c\u8272; color \u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u989c\u8272, \u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u989c\u8272\u6570\u7ec4 ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V'], color=['pink', 'purple'])","title":"\u989c\u8272"},{"location":"content/py/plt/bar/#_3","text":"axes.bar \u51fd\u6570\u7684 hatch \u53c2\u6570\u53ef\u4ee5\u586b\u5145\u6837\u5f0f, \u53ef\u53d6\u503c\u4e3a: / , \\ , | , - , + , x , o , O , . , * ax.bar(X, Y, tick_label=['I', 'II', 'III', 'IV', 'V'], hatch='/')","title":"\u586b\u5145"},{"location":"content/py/plt/bar/#_4","text":"\u4f7f\u7528 bottom \u53c2\u6570\u5806\u53e0\u67f1\u72b6\u56fe import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y1 = np.array([0.5, 0.67, 0.71, 0.56, 0.8]) Y2 = np.random.random(5) ax = plt.subplot() ax.bar(X, Y1, tick_label=['I', 'II', 'III', 'IV', 'V'], label='Y1') ax.bar(X, Y2, bottom=Y1, label='Y2') plt.legend() plt.show()","title":"\u5806\u53e0\u67f1\u72b6\u56fe"},{"location":"content/py/plt/bar/#_5","text":"\u8bbe\u7f6e\u67f1\u72b6\u56fe\u7684 bar_width \u5b9e\u73b0\u67f1\u72b6\u56fe\u5e76\u5217 import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') bar_width = 0.8 / 2 X1 = np.arange(5) + 1 Y1 = np.random.random(5) X2 = X1 + bar_width Y2 = np.random.random(5) plt.bar(X1, Y1, bar_width) plt.bar(X2, Y2, bar_width) plt.xticks(X1+bar_width / 2, ['I', 'II', 'III', 'IV', 'V']) plt.show()","title":"\u67f1\u72b6\u56fe\u5e76\u5217"},{"location":"content/py/plt/bar/#_6","text":"\u6761\u72b6\u56fe\u4e0e\u67f1\u72b6\u56fe\u57fa\u672c\u7c7b\u4f3c. import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') X = np.arange(5) + 1 Y = np.random.random(5) ax = plt.subplot() ax.barh(X, Y) ax.set_yticks(X) ax.set_yticklabels(['I', 'II', 'III', 'IV', 'V']) plt.show()","title":"\u6761\u72b6\u56fe"},{"location":"content/py/plt/line/","text":"\u6298\u7ebf import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) plt.show() \u6298\u7ebf\u6837\u5f0f import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() # \u8bbe\u7f6e\u989c\u8272 color # \u5982\u4e0b\u7684 color \u503c\u662f\u88ab\u652f\u6301\u7684 # ========== ======== # character color # ========== ======== # 'b' blue # 'g' green # 'r' red # 'c' cyan # 'm' magenta # 'y' yellow # 'k' black # 'w' white # ========== ======== # \u53e6\u5916, \u53ef\u4ee5\u4f7f\u7528\u5168\u540d('green'), 16 \u8fdb\u5236('#008000'), RGB \u6216 RGBA \u5143\u7ec4(0,1,0,1) \u6216 # \u7070\u5ea6\u503c(0.8) # \u8bbe\u7f6e\u6837\u5f0f linestyle # ================ =============================== # character description # ================ =============================== # ``'-'`` solid line style # ``'--'`` dashed line style # ``'-.'`` dash-dot line style # ``':'`` dotted line style # ``'.'`` point marker # ``','`` pixel marker # ``'o'`` circle marker # ``'v'`` triangle_down marker # ``'^'`` triangle_up marker # ``'<'`` triangle_left marker # ``'>'`` triangle_right marker # ``'1'`` tri_down marker # ``'2'`` tri_up marker # ``'3'`` tri_left marker # ``'4'`` tri_right marker # ``'s'`` square marker # ``'p'`` pentagon marker # ``'*'`` star marker # ``'h'`` hexagon1 marker # ``'H'`` hexagon2 marker # ``'+'`` plus marker # ``'x'`` x marker # ``'D'`` diamond marker # ``'d'`` thin_diamond marker # ``'|'`` vline marker # ``'_'`` hline marker # \u8bbe\u7f6e\u66f2\u7ebf\u5bbd\u5ea6 linewidth ax.plot(x, np.sin(x), color='pink', linewidth=2, linestyle='--') plt.show() \u5750\u6807\u8303\u56f4 import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u8bbe\u7f6e x \u8f74\u5750\u6807\u5bbd\u5ea6; \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5de6\u53f3\u4f1a\u5404\u4fdd\u7559\u4e00\u5c0f\u6bb5\u7a7a\u767d\u533a\u95f4 ax.set_xlim(x.min(), x.max()) plt.show() \u586b\u5145\u66f2\u7ebf import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi*2, np.pi*2, 256) ax = plt.subplot() # \u53c2\u6570\u4ee5 .plot \u76f8\u4f3c, \u533a\u522b\u662f\u4f1a\u586b\u5145\u66f2\u7ebf\u7684\u9762\u79ef, \u586b\u5145\u5206\u754c\u7ebf\u4e3a y=c(c \u4e3a x = 0 \u65f6\u7684\u6570) # alpha \u4e3a\u900f\u660e\u5ea6 ax.fill(x, np.sin(x), alpha=0.5) # \u5f53\u9700\u8981\u81ea\u5b9a\u4e49\u5206\u754c\u7ebf\u65f6, \u4f7f\u7528 .fill_between \u51fd\u6570 ax.fill_between(x, 0, np.sin(x - np.pi / 4), alpha=0.5) plt.show() \u5750\u6807\u4f4d\u7f6e\u4e0e\u5750\u6807\u6837\u5f0f import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u79fb\u52a8\u5750\u6807\u8f74\u4e0e\u8bbe\u7f6e\u5750\u6807\u8f74\u6837\u5f0f ax.spines['bottom'].set_color('#646882') ax.spines['bottom'].set_linewidth(1) ax.spines['bottom'].set_position(('data', 0)) ax.spines['left'].set_color('#646882') ax.spines['left'].set_linewidth(1) ax.spines['left'].set_position(('data', 0)) plt.show() \u5750\u6807\u523b\u5ea6 import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u624b\u5de5\u6307\u5b9a\u5750\u6807\u8f74\u4e0a\u7684\u523b\u5ea6 ax.set_xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi]) ax.set_yticks([]) plt.show() \u51fd\u6570\u540d\u79f0 import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() # \u4e3a\u66f2\u7ebf\u6dfb\u52a0\u540d\u79f0 ax.plot(x, np.sin(x), label='sin(x)') ax.legend(loc='lower right') plt.show()","title":"Python-matplotlib-\u6298\u7ebf\u56fe"},{"location":"content/py/plt/line/#_1","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) plt.show()","title":"\u6298\u7ebf"},{"location":"content/py/plt/line/#_2","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() # \u8bbe\u7f6e\u989c\u8272 color # \u5982\u4e0b\u7684 color \u503c\u662f\u88ab\u652f\u6301\u7684 # ========== ======== # character color # ========== ======== # 'b' blue # 'g' green # 'r' red # 'c' cyan # 'm' magenta # 'y' yellow # 'k' black # 'w' white # ========== ======== # \u53e6\u5916, \u53ef\u4ee5\u4f7f\u7528\u5168\u540d('green'), 16 \u8fdb\u5236('#008000'), RGB \u6216 RGBA \u5143\u7ec4(0,1,0,1) \u6216 # \u7070\u5ea6\u503c(0.8) # \u8bbe\u7f6e\u6837\u5f0f linestyle # ================ =============================== # character description # ================ =============================== # ``'-'`` solid line style # ``'--'`` dashed line style # ``'-.'`` dash-dot line style # ``':'`` dotted line style # ``'.'`` point marker # ``','`` pixel marker # ``'o'`` circle marker # ``'v'`` triangle_down marker # ``'^'`` triangle_up marker # ``'<'`` triangle_left marker # ``'>'`` triangle_right marker # ``'1'`` tri_down marker # ``'2'`` tri_up marker # ``'3'`` tri_left marker # ``'4'`` tri_right marker # ``'s'`` square marker # ``'p'`` pentagon marker # ``'*'`` star marker # ``'h'`` hexagon1 marker # ``'H'`` hexagon2 marker # ``'+'`` plus marker # ``'x'`` x marker # ``'D'`` diamond marker # ``'d'`` thin_diamond marker # ``'|'`` vline marker # ``'_'`` hline marker # \u8bbe\u7f6e\u66f2\u7ebf\u5bbd\u5ea6 linewidth ax.plot(x, np.sin(x), color='pink', linewidth=2, linestyle='--') plt.show()","title":"\u6298\u7ebf\u6837\u5f0f"},{"location":"content/py/plt/line/#_3","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u8bbe\u7f6e x \u8f74\u5750\u6807\u5bbd\u5ea6; \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5de6\u53f3\u4f1a\u5404\u4fdd\u7559\u4e00\u5c0f\u6bb5\u7a7a\u767d\u533a\u95f4 ax.set_xlim(x.min(), x.max()) plt.show()","title":"\u5750\u6807\u8303\u56f4"},{"location":"content/py/plt/line/#_4","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi*2, np.pi*2, 256) ax = plt.subplot() # \u53c2\u6570\u4ee5 .plot \u76f8\u4f3c, \u533a\u522b\u662f\u4f1a\u586b\u5145\u66f2\u7ebf\u7684\u9762\u79ef, \u586b\u5145\u5206\u754c\u7ebf\u4e3a y=c(c \u4e3a x = 0 \u65f6\u7684\u6570) # alpha \u4e3a\u900f\u660e\u5ea6 ax.fill(x, np.sin(x), alpha=0.5) # \u5f53\u9700\u8981\u81ea\u5b9a\u4e49\u5206\u754c\u7ebf\u65f6, \u4f7f\u7528 .fill_between \u51fd\u6570 ax.fill_between(x, 0, np.sin(x - np.pi / 4), alpha=0.5) plt.show()","title":"\u586b\u5145\u66f2\u7ebf"},{"location":"content/py/plt/line/#_5","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u79fb\u52a8\u5750\u6807\u8f74\u4e0e\u8bbe\u7f6e\u5750\u6807\u8f74\u6837\u5f0f ax.spines['bottom'].set_color('#646882') ax.spines['bottom'].set_linewidth(1) ax.spines['bottom'].set_position(('data', 0)) ax.spines['left'].set_color('#646882') ax.spines['left'].set_linewidth(1) ax.spines['left'].set_position(('data', 0)) plt.show()","title":"\u5750\u6807\u4f4d\u7f6e\u4e0e\u5750\u6807\u6837\u5f0f"},{"location":"content/py/plt/line/#_6","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() ax.plot(x, np.sin(x)) # \u624b\u5de5\u6307\u5b9a\u5750\u6807\u8f74\u4e0a\u7684\u523b\u5ea6 ax.set_xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi]) ax.set_yticks([]) plt.show()","title":"\u5750\u6807\u523b\u5ea6"},{"location":"content/py/plt/line/#_7","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') x = np.linspace(-np.pi, np.pi, 256) ax = plt.subplot() # \u4e3a\u66f2\u7ebf\u6dfb\u52a0\u540d\u79f0 ax.plot(x, np.sin(x), label='sin(x)') ax.legend(loc='lower right') plt.show()","title":"\u51fd\u6570\u540d\u79f0"},{"location":"content/py/plt/pie/","text":"\u997c\u56fe import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' ax = plt.subplot() ax.pie(X, labels=labels, autopct='%1.1f%%', startangle=90) plt.show() \u6b63\u5706 import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' ax = plt.subplot() ax.pie(X, labels=labels, autopct='%1.1f%%', startangle=90) # \u8bbe\u7f6e x \u8f74\u4e0e y \u8f74\u76f8\u7b49 ax.axis('equal') plt.show() \u5f3a\u8c03 import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' explode = [0, 0.1, 0, 0] ax = plt.subplot() # explode \u53c2\u6570\u53ef\u4ee5\u5f3a\u8c03\u6570\u636e ax.pie(X, explode=explode, labels=labels, autopct='%1.1f%%', startangle=90) ax.axis('equal') plt.show()","title":"Python-matplotlib-\u997c\u56fe"},{"location":"content/py/plt/pie/#_1","text":"import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' ax = plt.subplot() ax.pie(X, labels=labels, autopct='%1.1f%%', startangle=90) plt.show()","title":"\u997c\u56fe"},{"location":"content/py/plt/pie/#_2","text":"import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' ax = plt.subplot() ax.pie(X, labels=labels, autopct='%1.1f%%', startangle=90) # \u8bbe\u7f6e x \u8f74\u4e0e y \u8f74\u76f8\u7b49 ax.axis('equal') plt.show()","title":"\u6b63\u5706"},{"location":"content/py/plt/pie/#_3","text":"import matplotlib.pyplot as plt plt.style.use('seaborn') X = [15, 30, 45, 10] labels = 'I', 'II', 'III', 'IV' explode = [0, 0.1, 0, 0] ax = plt.subplot() # explode \u53c2\u6570\u53ef\u4ee5\u5f3a\u8c03\u6570\u636e ax.pie(X, explode=explode, labels=labels, autopct='%1.1f%%', startangle=90) ax.axis('equal') plt.show()","title":"\u5f3a\u8c03"},{"location":"content/py/plt/scatter/","text":"\u6563\u70b9\u56fe import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') ax = plt.subplot() x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) # s: \u6563\u70b9\u5927\u5c0f, \u9ed8\u8ba4 20 # c: \u989c\u8272 # alpha: \u900f\u660e\u5ea6 ax.scatter(x, y, s=50, c='#FF0000', alpha=0.5) plt.show() \u6837\u5f0f import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') ax = plt.subplot() x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) # marker: \u6563\u70b9\u6837\u5f0f. \u5168\u90e8\u53ef\u652f\u6301\u6563\u70b9\u6837\u5f0f\u89c1 matplotlib.markers \u6a21\u5757 ax.scatter(x, y, s=50, c='#FF0000', marker='+', alpha=0.5) plt.show() \u4e09\u7ef4\u5750\u6807 import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D import numpy as np plt.style.use('seaborn') ax = plt.subplot(projection='3d') x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) z = np.linspace(-np.pi, np.pi, 16) ax.scatter(x, y, z, s=50, c='#FF0000', alpha=0.5) ax.set_zlabel('Z') ax.set_ylabel('Y') ax.set_xlabel('X') plt.show()","title":"Python-matplotlib-\u6563\u70b9\u56fe"},{"location":"content/py/plt/scatter/#_1","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') ax = plt.subplot() x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) # s: \u6563\u70b9\u5927\u5c0f, \u9ed8\u8ba4 20 # c: \u989c\u8272 # alpha: \u900f\u660e\u5ea6 ax.scatter(x, y, s=50, c='#FF0000', alpha=0.5) plt.show()","title":"\u6563\u70b9\u56fe"},{"location":"content/py/plt/scatter/#_2","text":"import numpy as np import matplotlib.pyplot as plt plt.style.use('seaborn') ax = plt.subplot() x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) # marker: \u6563\u70b9\u6837\u5f0f. \u5168\u90e8\u53ef\u652f\u6301\u6563\u70b9\u6837\u5f0f\u89c1 matplotlib.markers \u6a21\u5757 ax.scatter(x, y, s=50, c='#FF0000', marker='+', alpha=0.5) plt.show()","title":"\u6837\u5f0f"},{"location":"content/py/plt/scatter/#_3","text":"import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D import numpy as np plt.style.use('seaborn') ax = plt.subplot(projection='3d') x = np.linspace(-np.pi, np.pi, 16) y = np.sin(x) z = np.linspace(-np.pi, np.pi, 16) ax.scatter(x, y, z, s=50, c='#FF0000', alpha=0.5) ax.set_zlabel('Z') ax.set_ylabel('Y') ax.set_xlabel('X') plt.show()","title":"\u4e09\u7ef4\u5750\u6807"},{"location":"content/py/pywasm/leb128/","text":"LEB128 LEB128(Little Endian Base 128)\u662f\u4e00\u79cd\u53d8\u957f\u4ee3\u7801\u538b\u7f29\u5f62\u5f0f, \u7528\u4e8e\u5728\u5c11\u91cf\u5b57\u8282\u4e2d\u5b58\u50a8\u4efb\u610f\u5927\u6574\u6570. LEB128 \u76ee\u524d\u88ab\u5e94\u7528\u5728 DWARF \u8c03\u8bd5\u6587\u4ef6\u683c\u5f0f\u548c WebAssembly \u4e8c\u8fdb\u5236\u7f16\u7801\u4e2d. LEB128 \u6709 2 \u4e2a\u4e0d\u540c\u7684\u7248\u672c: \u65e0\u7b26\u53f7\u7684 LEB128 \u548c\u6709\u7b26\u53f7\u7684 LEB128. \u89e3\u7801\u5668\u5fc5\u987b\u63d0\u524d\u77e5\u9053\u7f16\u7801\u503c\u662f\u65e0\u7b26\u53f7 LEB128 \u8fd8\u662f\u6709\u7b26\u53f7 LEB128. \u65e0\u7b26\u53f7 LEB128 \u8981\u4f7f\u7528\u65e0\u7b26\u53f7\u7684 LEB128 \u7f16\u7801\u65e0\u7b26\u53f7\u7684\u6570\u5b57, \u9996\u5148\u8981\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u6570\u5b57, \u7136\u540e zero extend \u6269\u5c55\u5230 7 \u4f4d\u7684\u500d\u6570(\u8fd9\u6837, \u5982\u679c\u8be5\u6570\u5b57\u4e0d\u4e3a\u96f6, \u5219\u6700\u9ad8 7 \u4f4d\u5e76\u4e0d\u5168\u4e3a 0). \u7136\u540e\u5c06\u6570\u5b57\u6309 7 \u4f4d\u5212\u5206, \u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5230\u6700\u9ad8\u6709\u6548\u4f4d\u5f00\u59cb, \u6bcf 7 \u4f4d\u6570\u7ec4\u8f93\u51fa\u4e00\u4e2a\u7f16\u7801\u5b57\u8282. \u9664\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5916, \u5728\u6bcf\u4e2a\u5b57\u8282\u4e0a\u8bbe\u7f6e\u6700\u9ad8\u6709\u6548\u4f4d. \u6570\u5b57\u96f6\u88ab\u7f16\u7801\u4e3a\u5355\u4e2a\u5b57\u8282 0x00. \u4f8b\u5982, \u4ee5\u4e0b\u662f\u65e0\u7b26\u53f7\u6570\u5b57 624485 \u7684\u7f16\u7801\u65b9\u5f0f: MSB ------------------ LSB 10011000011101100101 In raw binary 010011000011101100101 Padded to a multiple of 7 bits 0100110 0001110 1100101 Split into 7-bit groups 00100110 10001110 11100101 Add high 1 bits on all but last (most significant) group to form bytes 0x26 0x8E 0xE5 In hexadecimal > 0xE5 0x8E 0x26 Output stream (LSB to MSB) \u6709\u7b26\u53f7 LEB128 \u6709\u7b26\u53f7 LEB128 \u7f16\u7801\u4e0e\u65e0\u7b26\u53f7 LEB128 \u7f16\u7801\u8fc7\u7a0b\u7c7b\u4f3c, \u533a\u522b\u5728\u4e8e\u5728 zero extend \u540e, \u9700\u8981\u5bf9\u8f93\u51fa\u505a\u4e00\u6b21\u8865\u7801\u8fd0\u7b97. \u4f8b\u5982, -123456 \u5c06\u88ab\u7f16\u7801\u4e3a 0xC0 0xBB 0x78: MSB ------------------ LSB 11110001001000000 Binary encoding of 123456 000011110001001000000 As a 21-bit number 111100001110110111111 Negating all bits (one\u2019s complement) 111100001110111000000 Adding one (two\u2019s complement) 1111000 0111011 1000000 Split into 7-bit groups 01111000 10111011 11000000 Add high 1 bits on all but last (most significant) group to form bytes 0x78 0xBB 0xC0 In hexadecimal > 0xC0 0xBB 0x78 Output stream (LSB to MSB) \u6d4b\u8bd5\u7528\u4f8b \u65e0\u7b26\u53f7 LEB128 Number Bytes 0 0x00 624485 0xe5, 0x8e, 0x26 \u6709\u7b26\u53f7 LEB128 Number Bytes 0 0x00 624485 0xe5, 0x8e, 0x26 -123456 0xc0, 0xbb, 0x78 \u53c2\u8003 [1] \u7ef4\u57fa: LEB128 https://en.wikipedia.org/wiki/LEB128","title":"Python-pywasm-LEB128"},{"location":"content/py/pywasm/leb128/#leb128","text":"LEB128(Little Endian Base 128)\u662f\u4e00\u79cd\u53d8\u957f\u4ee3\u7801\u538b\u7f29\u5f62\u5f0f, \u7528\u4e8e\u5728\u5c11\u91cf\u5b57\u8282\u4e2d\u5b58\u50a8\u4efb\u610f\u5927\u6574\u6570. LEB128 \u76ee\u524d\u88ab\u5e94\u7528\u5728 DWARF \u8c03\u8bd5\u6587\u4ef6\u683c\u5f0f\u548c WebAssembly \u4e8c\u8fdb\u5236\u7f16\u7801\u4e2d. LEB128 \u6709 2 \u4e2a\u4e0d\u540c\u7684\u7248\u672c: \u65e0\u7b26\u53f7\u7684 LEB128 \u548c\u6709\u7b26\u53f7\u7684 LEB128. \u89e3\u7801\u5668\u5fc5\u987b\u63d0\u524d\u77e5\u9053\u7f16\u7801\u503c\u662f\u65e0\u7b26\u53f7 LEB128 \u8fd8\u662f\u6709\u7b26\u53f7 LEB128.","title":"LEB128"},{"location":"content/py/pywasm/leb128/#leb128_1","text":"\u8981\u4f7f\u7528\u65e0\u7b26\u53f7\u7684 LEB128 \u7f16\u7801\u65e0\u7b26\u53f7\u7684\u6570\u5b57, \u9996\u5148\u8981\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u6570\u5b57, \u7136\u540e zero extend \u6269\u5c55\u5230 7 \u4f4d\u7684\u500d\u6570(\u8fd9\u6837, \u5982\u679c\u8be5\u6570\u5b57\u4e0d\u4e3a\u96f6, \u5219\u6700\u9ad8 7 \u4f4d\u5e76\u4e0d\u5168\u4e3a 0). \u7136\u540e\u5c06\u6570\u5b57\u6309 7 \u4f4d\u5212\u5206, \u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5230\u6700\u9ad8\u6709\u6548\u4f4d\u5f00\u59cb, \u6bcf 7 \u4f4d\u6570\u7ec4\u8f93\u51fa\u4e00\u4e2a\u7f16\u7801\u5b57\u8282. \u9664\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5916, \u5728\u6bcf\u4e2a\u5b57\u8282\u4e0a\u8bbe\u7f6e\u6700\u9ad8\u6709\u6548\u4f4d. \u6570\u5b57\u96f6\u88ab\u7f16\u7801\u4e3a\u5355\u4e2a\u5b57\u8282 0x00. \u4f8b\u5982, \u4ee5\u4e0b\u662f\u65e0\u7b26\u53f7\u6570\u5b57 624485 \u7684\u7f16\u7801\u65b9\u5f0f: MSB ------------------ LSB 10011000011101100101 In raw binary 010011000011101100101 Padded to a multiple of 7 bits 0100110 0001110 1100101 Split into 7-bit groups 00100110 10001110 11100101 Add high 1 bits on all but last (most significant) group to form bytes 0x26 0x8E 0xE5 In hexadecimal > 0xE5 0x8E 0x26 Output stream (LSB to MSB)","title":"\u65e0\u7b26\u53f7 LEB128"},{"location":"content/py/pywasm/leb128/#leb128_2","text":"\u6709\u7b26\u53f7 LEB128 \u7f16\u7801\u4e0e\u65e0\u7b26\u53f7 LEB128 \u7f16\u7801\u8fc7\u7a0b\u7c7b\u4f3c, \u533a\u522b\u5728\u4e8e\u5728 zero extend \u540e, \u9700\u8981\u5bf9\u8f93\u51fa\u505a\u4e00\u6b21\u8865\u7801\u8fd0\u7b97. \u4f8b\u5982, -123456 \u5c06\u88ab\u7f16\u7801\u4e3a 0xC0 0xBB 0x78: MSB ------------------ LSB 11110001001000000 Binary encoding of 123456 000011110001001000000 As a 21-bit number 111100001110110111111 Negating all bits (one\u2019s complement) 111100001110111000000 Adding one (two\u2019s complement) 1111000 0111011 1000000 Split into 7-bit groups 01111000 10111011 11000000 Add high 1 bits on all but last (most significant) group to form bytes 0x78 0xBB 0xC0 In hexadecimal > 0xC0 0xBB 0x78 Output stream (LSB to MSB)","title":"\u6709\u7b26\u53f7 LEB128"},{"location":"content/py/pywasm/leb128/#_1","text":"\u65e0\u7b26\u53f7 LEB128 Number Bytes 0 0x00 624485 0xe5, 0x8e, 0x26 \u6709\u7b26\u53f7 LEB128 Number Bytes 0 0x00 624485 0xe5, 0x8e, 0x26 -123456 0xc0, 0xbb, 0x78","title":"\u6d4b\u8bd5\u7528\u4f8b"},{"location":"content/py/pywasm/leb128/#_2","text":"[1] \u7ef4\u57fa: LEB128 https://en.wikipedia.org/wiki/LEB128","title":"\u53c2\u8003"},{"location":"content/py/pywasm/overview/","text":"Pywasm: Python \u7231\u4e0a Wasm, \u7f8e\u5473\u5c1d\u9c9c! pywasm \u662f\u4e00\u4e2a\u4f7f\u7528\u7eaf Python \u5b9e\u73b0\u7684 WebAssembly \u89e3\u91ca\u5668. \u60a8\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6765\u5b89\u88c5\u5b83: $ pip3 install pywasm WebAssembly WebAssembly/wasm \u662f\u4e00\u4e2a\u53ef\u79fb\u690d, \u4f53\u79ef\u5c0f, \u52a0\u8f7d\u5feb\u5e76\u4e14\u517c\u5bb9 Web \u7684\u5168\u65b0\u683c\u5f0f. WebAssembly \u662f\u7531\u4e3b\u6d41\u6d4f\u89c8\u5668\u5382\u5546\u7ec4\u6210\u7684 W3C \u793e\u533a\u56e2\u4f53 \u5236\u5b9a\u7684\u4e00\u4e2a\u65b0\u7684\u89c4\u8303. \u9ad8\u6548: WebAssembly \u6709\u4e00\u5957\u5b8c\u6574\u7684\u8bed\u4e49, \u5b9e\u9645\u4e0a wasm \u662f\u4f53\u79ef\u5c0f\u4e14\u52a0\u8f7d\u5feb\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f, \u5176\u76ee\u6807\u5c31\u662f\u5145\u5206\u53d1\u6325\u786c\u4ef6\u80fd\u529b\u4ee5\u8fbe\u5230\u539f\u751f\u6267\u884c\u6548\u7387 \u5b89\u5168: WebAssembly \u8fd0\u884c\u5728\u4e00\u4e2a\u6c99\u7bb1\u5316\u7684\u6267\u884c\u73af\u5883\u4e2d, \u751a\u81f3\u53ef\u4ee5\u5728\u73b0\u6709\u7684 JavaScript \u865a\u62df\u673a\u4e2d\u5b9e\u73b0. \u5728 web \u73af\u5883\u4e2d, WebAssembly \u5c06\u4f1a\u4e25\u683c\u9075\u5b88\u540c\u6e90\u7b56\u7565\u4ee5\u53ca\u6d4f\u89c8\u5668\u5b89\u5168\u7b56\u7565. \u5f00\u653e: WebAssembly \u8bbe\u8ba1\u4e86\u4e00\u4e2a\u975e\u5e38\u89c4\u6574\u7684\u6587\u672c\u683c\u5f0f\u7528\u6765, \u8c03\u8bd5, \u6d4b\u8bd5, \u5b9e\u9a8c, \u4f18\u5316, \u5b66\u4e60, \u6559\u5b66\u6216\u8005\u7f16\u5199\u7a0b\u5e8f. \u53ef\u4ee5\u4ee5\u8fd9\u79cd\u6587\u672c\u683c\u5f0f\u5728web\u9875\u9762\u4e0a\u67e5\u770bwasm\u6a21\u5757\u7684\u6e90\u7801. \u6807\u51c6: WebAssembly \u5728 web \u4e2d\u88ab\u8bbe\u8ba1\u6210\u65e0\u7248\u672c, \u7279\u6027\u53ef\u6d4b\u8bd5, \u5411\u540e\u517c\u5bb9\u7684. WebAssembly \u53ef\u4ee5\u88ab JavaScript \u8c03\u7528, \u8fdb\u5165 JavaScript \u4e0a\u4e0b\u6587, \u4e5f\u53ef\u4ee5\u50cf Web API \u4e00\u6837\u8c03\u7528\u6d4f\u89c8\u5668\u7684\u529f\u80fd. \u5f53\u7136, WebAssembly \u4e0d\u4ec5\u53ef\u4ee5\u8fd0\u884c\u5728\u6d4f\u89c8\u5668\u4e0a, \u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u975eweb\u73af\u5883\u4e0b. AssemblyScript: \u4e3a wasm \u53d1\u660e\u7684\u7f16\u7a0b\u8bed\u8a00 \u76ee\u524d\u4e3a\u6b62, \u8bb8\u591a\u9ad8\u7ea7\u8bed\u8a00\u90fd\u80fd\u7f16\u8bd1\u5230 wasm. \u5176\u4e2d\u6700\u6210\u719f\u7684\u662f C \u8bed\u8a00: \u6bd5\u7adf\u5728\u8bbe\u8ba1\u5f00\u53d1\u8fc7\u7a0b\u4e2d C \u5c31\u662f wasm \u7684\u7b2c\u4e00\u76ee\u6807. \u4f46\u662f C \u6bd5\u7adf\u5bf9\u5927\u4f17\u4e0d\u592a\u53cb\u597d, \u56e0\u6b64\u5728 C \u4e4b\u4e0a\u4e00\u95e8\u65b0\u7684\u8bed\u8a00\u51fa\u73b0\u4e86, \u5b83\u5c31\u662f AssemblyScript, \u4e00\u95e8\u5bf9 TypeScript \u505a\u4e86\u51cf\u6cd5\u7684\u7f16\u7a0b\u8bed\u8a00. \u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u76ee\u5f55, \u8fdb\u5165\u8be5\u76ee\u5f55 $ npm install --save-dev assemblyscript $ npx asinit . asinit \u547d\u4ee4\u81ea\u52a8\u521b\u5efa\u5efa\u8bae\u7684\u76ee\u5f55\u7ed3\u6784\u548c\u914d\u7f6e\u6587\u4ef6, \u5305\u62ec: \u5305\u542b\u8981\u7f16\u8bd1\u4e3a WebAssembly \u6e90\u4ee3\u7801\u7684 ./assembly \u76ee\u5f55(\u4e00\u4e2a index.ts \u548c tsconfig.json) ./build \u76ee\u5f55, \u7528\u4e8e\u653e\u7f6e\u5df2\u7f16\u8bd1\u7684 WebAssembly \u4e8c\u8fdb\u5236\u6587\u4ef6 \u7136\u540e, \u6253\u5f00 ./assembly/index.ts, \u5176\u6e90\u4ee3\u7801\u662f\u4e00\u4e2a\u793a\u4f8b\u7684\u52a0\u6cd5\u51fd\u6570, \u5982\u4e0b export function add(a: i32, b: i32): i32 { return a + b; } $ npm run asbuild \u8fd0\u884c\u5982\u4e0a\u547d\u4ee4\u5c06\u7a0b\u5e8f\u7f16\u8bd1\u4e3a WebAssembly. \u4f7f\u7528\u6839\u76ee\u5f55\u4e2d\u7684 index.js \u5b9e\u4f8b\u5316\u548c\u5bfc\u51fa WebAssembly \u6a21\u5757, \u60a8\u5c06\u53ef\u4ee5\u50cf\u4efb\u4f55\u5176\u5b83\u6a21\u5757\u4e00\u6837\u4f7f\u7528\u5b83, \u5176\u663e\u7740\u533a\u522b\u5728\u4e8e, \u6a21\u5757\u5bfc\u51fa\u7684\u552f\u4e00\u503c\u662f\u6574\u6570\u548c\u6d6e\u70b9\u6570. \u5230\u76ee\u524d\u4e3a\u6b62, \u4e00\u5207\u90fd\u5f88\u597d... Run on pywasm $ vim index.py \u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u5230 index.py \u4e2d, \u4ee3\u7801\u4e2d\u505a\u4e86\u4e24\u4ef6\u4e8b: \u8f7d\u5165 wasm \u4e8c\u8fdb\u5236\u6587\u4ef6, \u5e76\u8c03\u7528\u51fd\u6570 add(10, 20) . import pywasm def env_abort(_: pywasm.Ctx): return vm = pywasm.load('./build/optimized.wasm', { 'env': { 'abort': env_abort, } }) r = vm.exec('add', [10, 20]) print(r) $ python3 index.py # 30 Bingo! \u53e6\u5916, \u672c\u6587\u4ee3\u7801\u5df2\u53d1\u5e03\u81f3 github, \u60a8\u53ef\u4ee5\u76f4\u63a5\u514b\u9686\u4ee3\u7801\u5230\u672c\u5730, \u5982\u6b64, \u5c31\u4e0d\u7528\u81ea\u5df1\u6572\u4ee3\u7801\u5566! $ git clone https://github.com/mohanson/pywasm_assemblyscript","title":"Python-pywasm-\u7f8e\u5473\u5c1d\u9c9c"},{"location":"content/py/pywasm/overview/#pywasm-python-wasm","text":"pywasm \u662f\u4e00\u4e2a\u4f7f\u7528\u7eaf Python \u5b9e\u73b0\u7684 WebAssembly \u89e3\u91ca\u5668. \u60a8\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6765\u5b89\u88c5\u5b83: $ pip3 install pywasm","title":"Pywasm: Python \u7231\u4e0a Wasm, \u7f8e\u5473\u5c1d\u9c9c!"},{"location":"content/py/pywasm/overview/#webassembly","text":"WebAssembly/wasm \u662f\u4e00\u4e2a\u53ef\u79fb\u690d, \u4f53\u79ef\u5c0f, \u52a0\u8f7d\u5feb\u5e76\u4e14\u517c\u5bb9 Web \u7684\u5168\u65b0\u683c\u5f0f. WebAssembly \u662f\u7531\u4e3b\u6d41\u6d4f\u89c8\u5668\u5382\u5546\u7ec4\u6210\u7684 W3C \u793e\u533a\u56e2\u4f53 \u5236\u5b9a\u7684\u4e00\u4e2a\u65b0\u7684\u89c4\u8303. \u9ad8\u6548: WebAssembly \u6709\u4e00\u5957\u5b8c\u6574\u7684\u8bed\u4e49, \u5b9e\u9645\u4e0a wasm \u662f\u4f53\u79ef\u5c0f\u4e14\u52a0\u8f7d\u5feb\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f, \u5176\u76ee\u6807\u5c31\u662f\u5145\u5206\u53d1\u6325\u786c\u4ef6\u80fd\u529b\u4ee5\u8fbe\u5230\u539f\u751f\u6267\u884c\u6548\u7387 \u5b89\u5168: WebAssembly \u8fd0\u884c\u5728\u4e00\u4e2a\u6c99\u7bb1\u5316\u7684\u6267\u884c\u73af\u5883\u4e2d, \u751a\u81f3\u53ef\u4ee5\u5728\u73b0\u6709\u7684 JavaScript \u865a\u62df\u673a\u4e2d\u5b9e\u73b0. \u5728 web \u73af\u5883\u4e2d, WebAssembly \u5c06\u4f1a\u4e25\u683c\u9075\u5b88\u540c\u6e90\u7b56\u7565\u4ee5\u53ca\u6d4f\u89c8\u5668\u5b89\u5168\u7b56\u7565. \u5f00\u653e: WebAssembly \u8bbe\u8ba1\u4e86\u4e00\u4e2a\u975e\u5e38\u89c4\u6574\u7684\u6587\u672c\u683c\u5f0f\u7528\u6765, \u8c03\u8bd5, \u6d4b\u8bd5, \u5b9e\u9a8c, \u4f18\u5316, \u5b66\u4e60, \u6559\u5b66\u6216\u8005\u7f16\u5199\u7a0b\u5e8f. \u53ef\u4ee5\u4ee5\u8fd9\u79cd\u6587\u672c\u683c\u5f0f\u5728web\u9875\u9762\u4e0a\u67e5\u770bwasm\u6a21\u5757\u7684\u6e90\u7801. \u6807\u51c6: WebAssembly \u5728 web \u4e2d\u88ab\u8bbe\u8ba1\u6210\u65e0\u7248\u672c, \u7279\u6027\u53ef\u6d4b\u8bd5, \u5411\u540e\u517c\u5bb9\u7684. WebAssembly \u53ef\u4ee5\u88ab JavaScript \u8c03\u7528, \u8fdb\u5165 JavaScript \u4e0a\u4e0b\u6587, \u4e5f\u53ef\u4ee5\u50cf Web API \u4e00\u6837\u8c03\u7528\u6d4f\u89c8\u5668\u7684\u529f\u80fd. \u5f53\u7136, WebAssembly \u4e0d\u4ec5\u53ef\u4ee5\u8fd0\u884c\u5728\u6d4f\u89c8\u5668\u4e0a, \u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u975eweb\u73af\u5883\u4e0b.","title":"WebAssembly"},{"location":"content/py/pywasm/overview/#assemblyscript-wasm","text":"\u76ee\u524d\u4e3a\u6b62, \u8bb8\u591a\u9ad8\u7ea7\u8bed\u8a00\u90fd\u80fd\u7f16\u8bd1\u5230 wasm. \u5176\u4e2d\u6700\u6210\u719f\u7684\u662f C \u8bed\u8a00: \u6bd5\u7adf\u5728\u8bbe\u8ba1\u5f00\u53d1\u8fc7\u7a0b\u4e2d C \u5c31\u662f wasm \u7684\u7b2c\u4e00\u76ee\u6807. \u4f46\u662f C \u6bd5\u7adf\u5bf9\u5927\u4f17\u4e0d\u592a\u53cb\u597d, \u56e0\u6b64\u5728 C \u4e4b\u4e0a\u4e00\u95e8\u65b0\u7684\u8bed\u8a00\u51fa\u73b0\u4e86, \u5b83\u5c31\u662f AssemblyScript, \u4e00\u95e8\u5bf9 TypeScript \u505a\u4e86\u51cf\u6cd5\u7684\u7f16\u7a0b\u8bed\u8a00. \u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u76ee\u5f55, \u8fdb\u5165\u8be5\u76ee\u5f55 $ npm install --save-dev assemblyscript $ npx asinit . asinit \u547d\u4ee4\u81ea\u52a8\u521b\u5efa\u5efa\u8bae\u7684\u76ee\u5f55\u7ed3\u6784\u548c\u914d\u7f6e\u6587\u4ef6, \u5305\u62ec: \u5305\u542b\u8981\u7f16\u8bd1\u4e3a WebAssembly \u6e90\u4ee3\u7801\u7684 ./assembly \u76ee\u5f55(\u4e00\u4e2a index.ts \u548c tsconfig.json) ./build \u76ee\u5f55, \u7528\u4e8e\u653e\u7f6e\u5df2\u7f16\u8bd1\u7684 WebAssembly \u4e8c\u8fdb\u5236\u6587\u4ef6 \u7136\u540e, \u6253\u5f00 ./assembly/index.ts, \u5176\u6e90\u4ee3\u7801\u662f\u4e00\u4e2a\u793a\u4f8b\u7684\u52a0\u6cd5\u51fd\u6570, \u5982\u4e0b export function add(a: i32, b: i32): i32 { return a + b; } $ npm run asbuild \u8fd0\u884c\u5982\u4e0a\u547d\u4ee4\u5c06\u7a0b\u5e8f\u7f16\u8bd1\u4e3a WebAssembly. \u4f7f\u7528\u6839\u76ee\u5f55\u4e2d\u7684 index.js \u5b9e\u4f8b\u5316\u548c\u5bfc\u51fa WebAssembly \u6a21\u5757, \u60a8\u5c06\u53ef\u4ee5\u50cf\u4efb\u4f55\u5176\u5b83\u6a21\u5757\u4e00\u6837\u4f7f\u7528\u5b83, \u5176\u663e\u7740\u533a\u522b\u5728\u4e8e, \u6a21\u5757\u5bfc\u51fa\u7684\u552f\u4e00\u503c\u662f\u6574\u6570\u548c\u6d6e\u70b9\u6570. \u5230\u76ee\u524d\u4e3a\u6b62, \u4e00\u5207\u90fd\u5f88\u597d...","title":"AssemblyScript: \u4e3a wasm \u53d1\u660e\u7684\u7f16\u7a0b\u8bed\u8a00"},{"location":"content/py/pywasm/overview/#run-on-pywasm","text":"$ vim index.py \u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u5230 index.py \u4e2d, \u4ee3\u7801\u4e2d\u505a\u4e86\u4e24\u4ef6\u4e8b: \u8f7d\u5165 wasm \u4e8c\u8fdb\u5236\u6587\u4ef6, \u5e76\u8c03\u7528\u51fd\u6570 add(10, 20) . import pywasm def env_abort(_: pywasm.Ctx): return vm = pywasm.load('./build/optimized.wasm', { 'env': { 'abort': env_abort, } }) r = vm.exec('add', [10, 20]) print(r) $ python3 index.py # 30 Bingo! \u53e6\u5916, \u672c\u6587\u4ee3\u7801\u5df2\u53d1\u5e03\u81f3 github, \u60a8\u53ef\u4ee5\u76f4\u63a5\u514b\u9686\u4ee3\u7801\u5230\u672c\u5730, \u5982\u6b64, \u5c31\u4e0d\u7528\u81ea\u5df1\u6572\u4ee3\u7801\u5566! $ git clone https://github.com/mohanson/pywasm_assemblyscript","title":"Run on pywasm"},{"location":"content/rust/concurrent/","text":"Rust \u5e76\u53d1 \u5e76\u53d1\u4e0e\u5e76\u884c\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u76f8\u5f53\u91cd\u8981\u7684\u4e24\u4e2a\u4e3b\u9898, \u5e76\u4e14\u5728\u5f53\u4eca\u751f\u4ea7\u73af\u5883\u4e2d\u4e5f\u5341\u5206\u70ed\u95e8. \u8ba1\u7b97\u673a\u6b63\u62e5\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u6838\u5fc3, \u7136\u800c\u5f88\u591a\u7a0b\u5e8f\u5458\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u53bb\u5b8c\u5168\u7684\u5229\u7528\u5b83\u4eec. Rust \u7684\u5185\u5b58\u5b89\u5168\u529f\u80fd\u4e5f\u9002\u7528\u4e8e\u5e76\u53d1\u73af\u5883.\u751a\u81f3\u5e76\u53d1\u7684 Rust \u7a0b\u5e8f\u4e5f\u4f1a\u662f\u5185\u5b58\u5b89\u5168\u7684, \u5e76\u4e14\u6ca1\u6709\u6570\u636e\u7ade\u4e89. Rust \u7684\u7c7b\u578b\u7cfb\u7edf\u4e5f\u80fd\u80dc\u4efb, \u5e76\u4e14\u5728\u7f16\u8bd1\u65f6\u80fd\u63d0\u4f9b\u4f60\u5f3a\u5927\u7684\u65b9\u5f0f\u53bb\u63a8\u8bba\u5e76\u53d1\u4ee3\u7801. \u521b\u5efa\u7ebf\u7a0b use std::thread; fn main() { let handle = thread::spawn(|| { println!(\"Hello from a thread!\"); }); // \u7b49\u5f85\u5b50\u7ebf\u7a0b\u7ed3\u675f handle.join().unwrap(); } move \u95ed\u5305 \u4f7f\u7528 move \u53ef\u4ee5\u5c06\u53d8\u91cf\u4ece\u73af\u5883\u5f15\u7528\u81f3\u81ea\u8eab. use std::thread; fn main() { let x = 1; thread::spawn(move || { println!(\"x is {}\", x); }).join() .unwrap(); } \u5171\u4eab\u53d8\u91cf \u56e0\u4e3a Rust \u7684\u6240\u6709\u6743\u673a\u5236, \u6211\u4eec\u65e0\u6cd5\u5728\u591a\u4e2a\u7ebf\u7a0b\u95f4\u5171\u4eab\u4e00\u4e2a(\u53ef\u8bfb)\u53d8\u91cf. \u8003\u8651\u5982\u4e0b\u4ee3\u7801: use std::thread; use std::time::Duration; fn main() { let data = vec![1, 2, 3]; for _ in 0..3 { thread::spawn(move || { println!(\"{:?}\", data[0]); }); } thread::sleep(Duration::from_secs(1)); } \u4ed6\u65e0\u6cd5\u8fd0\u884c, \u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u63d0\u793a: note: move occurs because `data` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898, \u6211\u4eec\u4f7f\u7528 Arc<T> , Rust \u6807\u51c6\u7684\u539f\u5b50\u5f15\u7528\u8ba1\u6570\u7c7b\u578b. Arc<T> \u7684\u539f\u5b50\u90e8\u5206\u53ef\u4ee5\u5728\u591a\u7ebf\u7a0b\u4e2d\u5b89\u5168\u7684\u8bbf\u95ee. \u4e3a\u6b64\u7f16\u8bd1\u5668\u786e\u4fdd\u4e86\u5185\u90e8\u8ba1\u6570\u7684\u6539\u53d8\u90fd\u662f\u4e0d\u53ef\u5206\u5272\u7684\u64cd\u4f5c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u4ea7\u751f\u6570\u636e\u7ade\u4e89. \u672c\u8d28\u4e0a, Arc<T> \u662f\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u7ebf\u7a0b\u95f4\u5b89\u5168\u7684\u5171\u4eab\u6240\u6709\u6743\u7684\u7c7b\u578b. use std::thread; use std::sync::Arc; use std::time::Duration; fn main() { let data = Arc::new(vec![1, 2, 3]); for _ in 0..3 { let data = data.clone(); thread::spawn(move || { println!(\"{:?}\", data[0]); }); } thread::sleep(Duration::from_secs(1)); } Arc<T> \u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684, \u4e3a\u4e86\u83b7\u5f97\u53ef\u53d8\u53d8\u91cf, \u6211\u4eec\u4f7f\u7528 Mutex<T> use std::thread; use std::sync::{Arc, Mutex}; use std::time::Duration; fn main() { let data = Arc::new(Mutex::new(vec![1, 2, 3])); for _ in 0..3 { let data = data.clone(); thread::spawn(move || { let mut data = data.lock().unwrap(); data[0] += 1; }); } thread::sleep(Duration::from_secs(1)); println!(\"{:?}\", data.lock().unwrap()[0]); } \u8fd9\u91cc\u6211\u4eec \"\u9501\u5b9a\" \u4e86\u4e92\u65a5\u9501(mutex). \u4e00\u4e2a\u4e92\u65a5\u9501, \u6b63\u5982\u5176\u540d, \u540c\u65f6\u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u4e00\u4e2a\u503c. \u5f53\u6211\u4eec\u60f3\u8981\u8bbf\u95ee\u4e00\u4e2a\u503c\u65f6, \u6211\u4eec lock() \u5b83. \u8fd9\u4f1a \"\u9501\u5b9a\" mutex, \u5e76\u4e14\u5176\u4ed6\u7ebf\u7a0b\u4e0d\u80fd\u9501\u5b9a\u5b83(\u4e5f\u5c31\u662f\u6539\u53d8\u5b83\u7684\u503c), \u76f4\u5230\u6211\u4eec\u5904\u7406\u5b8c\u4e4b\u540e. \u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5c1d\u8bd5\u9501\u5b9a\u4e00\u4e2a\u5df2\u7ecf\u88ab\u9501\u5b9a\u7684 mutex, \u5b83\u5c06\u4f1a\u7b49\u5f85\u76f4\u5230\u5176\u4ed6\u7ebf\u7a0b\u91ca\u653e\u8fd9\u4e2a\u9501\u4e3a\u6b62. \u4fe1\u9053 \u4e0e Go \u91cc\u9762\u7684\u4fe1\u9053\u51e0\u4e4e\u4e00\u81f4. \u4efb\u4f55\u5b9e\u73b0\u4e86 Send \u7684\u6570\u636e\u90fd\u53ef\u4ee5\u4f20\u5165\u4fe1\u9053. \u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u521b\u5efa 10 \u4e2a\u7ebf\u7a0b\u5e76\u7b49\u5f85 10 \u4e2a\u7ebf\u7a0b\u5168\u90e8\u6267\u884c\u5b8c\u6bd5. \u901a\u5e38\u5e76\u4e0d\u9700\u8981\u624b\u52a8\u5b9e\u73b0 Send \u548c Sync trait, \u56e0\u4e3a\u7531 Send \u548c Sync \u7684\u7c7b\u578b\u7ec4\u6210\u7684\u7c7b\u578b, \u81ea\u52a8\u5c31\u662f Send \u548c Sync \u7684. \u56e0\u4e3a\u4ed6\u4eec\u662f\u6807\u8bb0 trait, \u751a\u81f3\u90fd\u4e0d\u9700\u8981\u5b9e\u73b0\u4efb\u4f55\u65b9\u6cd5. \u4ed6\u4eec\u53ea\u662f\u7528\u6765\u52a0\u5f3a\u5e76\u53d1\u76f8\u5173\u7684\u4e0d\u53ef\u53d8\u6027\u7684. use std::sync::mpsc; use std::thread; fn main() { let (tx, rx) = mpsc::channel(); for i in 0..10 { let tx = tx.clone(); thread::spawn(move || { tx.send(i).unwrap(); }); } for _ in 0..10 { let r = rx.recv().unwrap(); println!(\"{}\", r); } } \u53c2\u8003 [1] kaisery: Rust \u7a0b\u5e8f\u8bbe\u8ba1-5.6 \u5e76\u53d1 https://kaisery.gitbooks.io/rust-book-chinese/content/content/Concurrency%20\u5e76\u53d1.html","title":"Rust-\u5e76\u53d1"},{"location":"content/rust/concurrent/#rust","text":"\u5e76\u53d1\u4e0e\u5e76\u884c\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u76f8\u5f53\u91cd\u8981\u7684\u4e24\u4e2a\u4e3b\u9898, \u5e76\u4e14\u5728\u5f53\u4eca\u751f\u4ea7\u73af\u5883\u4e2d\u4e5f\u5341\u5206\u70ed\u95e8. \u8ba1\u7b97\u673a\u6b63\u62e5\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u6838\u5fc3, \u7136\u800c\u5f88\u591a\u7a0b\u5e8f\u5458\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u53bb\u5b8c\u5168\u7684\u5229\u7528\u5b83\u4eec. Rust \u7684\u5185\u5b58\u5b89\u5168\u529f\u80fd\u4e5f\u9002\u7528\u4e8e\u5e76\u53d1\u73af\u5883.\u751a\u81f3\u5e76\u53d1\u7684 Rust \u7a0b\u5e8f\u4e5f\u4f1a\u662f\u5185\u5b58\u5b89\u5168\u7684, \u5e76\u4e14\u6ca1\u6709\u6570\u636e\u7ade\u4e89. Rust \u7684\u7c7b\u578b\u7cfb\u7edf\u4e5f\u80fd\u80dc\u4efb, \u5e76\u4e14\u5728\u7f16\u8bd1\u65f6\u80fd\u63d0\u4f9b\u4f60\u5f3a\u5927\u7684\u65b9\u5f0f\u53bb\u63a8\u8bba\u5e76\u53d1\u4ee3\u7801.","title":"Rust \u5e76\u53d1"},{"location":"content/rust/concurrent/#_1","text":"use std::thread; fn main() { let handle = thread::spawn(|| { println!(\"Hello from a thread!\"); }); // \u7b49\u5f85\u5b50\u7ebf\u7a0b\u7ed3\u675f handle.join().unwrap(); }","title":"\u521b\u5efa\u7ebf\u7a0b"},{"location":"content/rust/concurrent/#move","text":"\u4f7f\u7528 move \u53ef\u4ee5\u5c06\u53d8\u91cf\u4ece\u73af\u5883\u5f15\u7528\u81f3\u81ea\u8eab. use std::thread; fn main() { let x = 1; thread::spawn(move || { println!(\"x is {}\", x); }).join() .unwrap(); }","title":"move \u95ed\u5305"},{"location":"content/rust/concurrent/#_2","text":"\u56e0\u4e3a Rust \u7684\u6240\u6709\u6743\u673a\u5236, \u6211\u4eec\u65e0\u6cd5\u5728\u591a\u4e2a\u7ebf\u7a0b\u95f4\u5171\u4eab\u4e00\u4e2a(\u53ef\u8bfb)\u53d8\u91cf. \u8003\u8651\u5982\u4e0b\u4ee3\u7801: use std::thread; use std::time::Duration; fn main() { let data = vec![1, 2, 3]; for _ in 0..3 { thread::spawn(move || { println!(\"{:?}\", data[0]); }); } thread::sleep(Duration::from_secs(1)); } \u4ed6\u65e0\u6cd5\u8fd0\u884c, \u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u63d0\u793a: note: move occurs because `data` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898, \u6211\u4eec\u4f7f\u7528 Arc<T> , Rust \u6807\u51c6\u7684\u539f\u5b50\u5f15\u7528\u8ba1\u6570\u7c7b\u578b. Arc<T> \u7684\u539f\u5b50\u90e8\u5206\u53ef\u4ee5\u5728\u591a\u7ebf\u7a0b\u4e2d\u5b89\u5168\u7684\u8bbf\u95ee. \u4e3a\u6b64\u7f16\u8bd1\u5668\u786e\u4fdd\u4e86\u5185\u90e8\u8ba1\u6570\u7684\u6539\u53d8\u90fd\u662f\u4e0d\u53ef\u5206\u5272\u7684\u64cd\u4f5c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u4ea7\u751f\u6570\u636e\u7ade\u4e89. \u672c\u8d28\u4e0a, Arc<T> \u662f\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u7ebf\u7a0b\u95f4\u5b89\u5168\u7684\u5171\u4eab\u6240\u6709\u6743\u7684\u7c7b\u578b. use std::thread; use std::sync::Arc; use std::time::Duration; fn main() { let data = Arc::new(vec![1, 2, 3]); for _ in 0..3 { let data = data.clone(); thread::spawn(move || { println!(\"{:?}\", data[0]); }); } thread::sleep(Duration::from_secs(1)); } Arc<T> \u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684, \u4e3a\u4e86\u83b7\u5f97\u53ef\u53d8\u53d8\u91cf, \u6211\u4eec\u4f7f\u7528 Mutex<T> use std::thread; use std::sync::{Arc, Mutex}; use std::time::Duration; fn main() { let data = Arc::new(Mutex::new(vec![1, 2, 3])); for _ in 0..3 { let data = data.clone(); thread::spawn(move || { let mut data = data.lock().unwrap(); data[0] += 1; }); } thread::sleep(Duration::from_secs(1)); println!(\"{:?}\", data.lock().unwrap()[0]); } \u8fd9\u91cc\u6211\u4eec \"\u9501\u5b9a\" \u4e86\u4e92\u65a5\u9501(mutex). \u4e00\u4e2a\u4e92\u65a5\u9501, \u6b63\u5982\u5176\u540d, \u540c\u65f6\u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u4e00\u4e2a\u503c. \u5f53\u6211\u4eec\u60f3\u8981\u8bbf\u95ee\u4e00\u4e2a\u503c\u65f6, \u6211\u4eec lock() \u5b83. \u8fd9\u4f1a \"\u9501\u5b9a\" mutex, \u5e76\u4e14\u5176\u4ed6\u7ebf\u7a0b\u4e0d\u80fd\u9501\u5b9a\u5b83(\u4e5f\u5c31\u662f\u6539\u53d8\u5b83\u7684\u503c), \u76f4\u5230\u6211\u4eec\u5904\u7406\u5b8c\u4e4b\u540e. \u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5c1d\u8bd5\u9501\u5b9a\u4e00\u4e2a\u5df2\u7ecf\u88ab\u9501\u5b9a\u7684 mutex, \u5b83\u5c06\u4f1a\u7b49\u5f85\u76f4\u5230\u5176\u4ed6\u7ebf\u7a0b\u91ca\u653e\u8fd9\u4e2a\u9501\u4e3a\u6b62.","title":"\u5171\u4eab\u53d8\u91cf"},{"location":"content/rust/concurrent/#_3","text":"\u4e0e Go \u91cc\u9762\u7684\u4fe1\u9053\u51e0\u4e4e\u4e00\u81f4. \u4efb\u4f55\u5b9e\u73b0\u4e86 Send \u7684\u6570\u636e\u90fd\u53ef\u4ee5\u4f20\u5165\u4fe1\u9053. \u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u521b\u5efa 10 \u4e2a\u7ebf\u7a0b\u5e76\u7b49\u5f85 10 \u4e2a\u7ebf\u7a0b\u5168\u90e8\u6267\u884c\u5b8c\u6bd5. \u901a\u5e38\u5e76\u4e0d\u9700\u8981\u624b\u52a8\u5b9e\u73b0 Send \u548c Sync trait, \u56e0\u4e3a\u7531 Send \u548c Sync \u7684\u7c7b\u578b\u7ec4\u6210\u7684\u7c7b\u578b, \u81ea\u52a8\u5c31\u662f Send \u548c Sync \u7684. \u56e0\u4e3a\u4ed6\u4eec\u662f\u6807\u8bb0 trait, \u751a\u81f3\u90fd\u4e0d\u9700\u8981\u5b9e\u73b0\u4efb\u4f55\u65b9\u6cd5. \u4ed6\u4eec\u53ea\u662f\u7528\u6765\u52a0\u5f3a\u5e76\u53d1\u76f8\u5173\u7684\u4e0d\u53ef\u53d8\u6027\u7684. use std::sync::mpsc; use std::thread; fn main() { let (tx, rx) = mpsc::channel(); for i in 0..10 { let tx = tx.clone(); thread::spawn(move || { tx.send(i).unwrap(); }); } for _ in 0..10 { let r = rx.recv().unwrap(); println!(\"{}\", r); } }","title":"\u4fe1\u9053"},{"location":"content/rust/concurrent/#_4","text":"[1] kaisery: Rust \u7a0b\u5e8f\u8bbe\u8ba1-5.6 \u5e76\u53d1 https://kaisery.gitbooks.io/rust-book-chinese/content/content/Concurrency%20\u5e76\u53d1.html","title":"\u53c2\u8003"},{"location":"content/rust/http/","text":"HTTP \u8bf7\u6c42 \u8bb0\u5f55\u4e00\u4e0b\u4f7f\u7528 reqwest \u5e93\u8fdb\u884c HTTP \u8bf7\u6c42\u7684\u64cd\u4f5c. GET \u53d1\u9001 GET \u8bf7\u6c42\u8be5\u6b7b\u7684\u7b80\u5355: extern crate reqwest; fn main() { let res = reqwest::get(\"https://httpbin.org/get\").unwrap(); println!(\"{}\", res.status()); } \u5176\u4e2d reqwest::get \u662f\u5982\u4e0b\u4ee3\u7801\u7684\u7b80\u5199: let res = reqwest::Client::new().get(URL).send(); GET Stream \u6d41\u5f0f\u4e0b\u8f7d, \u5b58\u50a8 GET \u8bf7\u6c42\u7684 Body \u81f3\u6587\u4ef6: extern crate reqwest; use std::io; use std::fs::File; fn main() { let mut res = reqwest::get(\"https://httpbin.org/get\").unwrap(); println!(\"{}\", res.status()); let mut f = File::create(\"/tmp/dst\").unwrap(); io::copy(&mut res, &mut f).unwrap(); } POST \u53d1\u9001/\u89e3\u6790 JSON \u683c\u5f0f\u7684\u8f93\u5165\u8f93\u51fa: extern crate reqwest; #[macro_use] extern crate serde_derive; extern crate serde_json; use std::collections::HashMap; #[derive(Deserialize)] struct URL { url: String, } fn main() { let mut data = HashMap::new(); data.insert(\"from\", \"rust\"); let mut res = reqwest::Client::new() .post(\"https://httpbin.org/post\") .json(&data) .send() .unwrap(); println!(\"{}\", res.status()); let json: URL = res.json().unwrap(); println!(\"{}\", json.url); }","title":"Rust-HTTP"},{"location":"content/rust/http/#http","text":"\u8bb0\u5f55\u4e00\u4e0b\u4f7f\u7528 reqwest \u5e93\u8fdb\u884c HTTP \u8bf7\u6c42\u7684\u64cd\u4f5c.","title":"HTTP \u8bf7\u6c42"},{"location":"content/rust/http/#get","text":"\u53d1\u9001 GET \u8bf7\u6c42\u8be5\u6b7b\u7684\u7b80\u5355: extern crate reqwest; fn main() { let res = reqwest::get(\"https://httpbin.org/get\").unwrap(); println!(\"{}\", res.status()); } \u5176\u4e2d reqwest::get \u662f\u5982\u4e0b\u4ee3\u7801\u7684\u7b80\u5199: let res = reqwest::Client::new().get(URL).send();","title":"GET"},{"location":"content/rust/http/#get-stream","text":"\u6d41\u5f0f\u4e0b\u8f7d, \u5b58\u50a8 GET \u8bf7\u6c42\u7684 Body \u81f3\u6587\u4ef6: extern crate reqwest; use std::io; use std::fs::File; fn main() { let mut res = reqwest::get(\"https://httpbin.org/get\").unwrap(); println!(\"{}\", res.status()); let mut f = File::create(\"/tmp/dst\").unwrap(); io::copy(&mut res, &mut f).unwrap(); }","title":"GET Stream"},{"location":"content/rust/http/#post","text":"\u53d1\u9001/\u89e3\u6790 JSON \u683c\u5f0f\u7684\u8f93\u5165\u8f93\u51fa: extern crate reqwest; #[macro_use] extern crate serde_derive; extern crate serde_json; use std::collections::HashMap; #[derive(Deserialize)] struct URL { url: String, } fn main() { let mut data = HashMap::new(); data.insert(\"from\", \"rust\"); let mut res = reqwest::Client::new() .post(\"https://httpbin.org/post\") .json(&data) .send() .unwrap(); println!(\"{}\", res.status()); let json: URL = res.json().unwrap(); println!(\"{}\", json.url); }","title":"POST"},{"location":"content/rust/io/","text":"\u6587\u4ef6\u8bfb\u5199 Everything is a file. \u8fd9\u91cc\u4e0d\u5f97\u4e0d\u63d0\u4e00\u4e0b Unix \u54f2\u5b66: \"\u4e00\u5207\u7686\u6587\u4ef6\". \u5b83\u63cf\u8ff0\u4e86 Unix \u7684\u7279\u6027--\u6240\u6709\u8f93\u5165/\u8f93\u51fa\u8d44\u6e90, \u5982\u6587\u6863, \u76ee\u5f55, \u786c\u76d8\u9a71\u52a8\u5668, \u8c03\u5236\u89e3\u8c03\u5668, \u952e\u76d8, \u6253\u5370\u673a\u751a\u81f3\u4e00\u4e9b\u8fdb\u7a0b\u95f4\u548c\u7f51\u7edc\u901a\u4fe1, \u90fd\u662f\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u63cf\u8ff0\u7684\u7b80\u5355\u7684\u5b57\u8282\u6d41. Rust \u521d\u5b66\u4e5f\u5c06\u4ece\u6587\u4ef6\u8bfb\u5199\u5f00\u59cb. \u5b57\u8282\u8bfb\u53d6 use std::fs::File; use std::io::prelude::*; fn main() { let mut f = File::open(\"/tmp/src\").unwrap(); let mut buf = vec![0; 8]; let n = f.read(&mut buf[..]).unwrap(); println!(\"{:?}\", &buf[..n]); } \u8bfb\u53d6\u5168\u90e8 use std::fs::File; use std::io::prelude::*; fn main() { let mut f = File::open(\"/tmp/src\").unwrap(); let mut buf = String::new(); f.read_to_string(&mut buf).unwrap(); println!(\"{}\", buf); } \u9010\u884c\u8bfb\u53d6 use std::fs::File; use std::io::prelude::*; use std::io::BufReader; fn main() { let f = File::open(\"/tmp/src\").unwrap(); let reader = BufReader::new(f); for line in reader.lines() { // line \u662f std::result::Result<std::string::String, std::io::Error> \u7c7b\u578b // line \u4e0d\u5305\u542b\u6362\u884c\u7b26 let line = line.unwrap(); println!(\"{}\", line); } } \u5199\u5165\u6587\u4ef6 use std::fs::File; use std::io::prelude::*; fn main() { let mut f = File::create(\"/tmp/dst\").unwrap(); f.write(\"Hello\\n\".as_bytes()).unwrap(); f.write(\"\u4f60\u597d\\n\".as_bytes()).unwrap(); f.write(\"\uc548\ub155\ud558\uc138\uc694\\n\".as_bytes()).unwrap(); } \u8ffd\u52a0\u6587\u4ef6 use std::fs::OpenOptions; use std::io::prelude::*; fn main() { let mut f = OpenOptions::new().create(true).append(true).open(\"/tmp/dst\").unwrap(); f.write(\"Hello\\n\".as_bytes()).unwrap(); f.write(\"\u4f60\u597d\\n\".as_bytes()).unwrap(); f.write(\"\uc548\ub155\ud558\uc138\uc694\\n\".as_bytes()).unwrap(); }","title":"Rust-\u6587\u4ef6\u8bfb\u53d6"},{"location":"content/rust/io/#_1","text":"Everything is a file. \u8fd9\u91cc\u4e0d\u5f97\u4e0d\u63d0\u4e00\u4e0b Unix \u54f2\u5b66: \"\u4e00\u5207\u7686\u6587\u4ef6\". \u5b83\u63cf\u8ff0\u4e86 Unix \u7684\u7279\u6027--\u6240\u6709\u8f93\u5165/\u8f93\u51fa\u8d44\u6e90, \u5982\u6587\u6863, \u76ee\u5f55, \u786c\u76d8\u9a71\u52a8\u5668, \u8c03\u5236\u89e3\u8c03\u5668, \u952e\u76d8, \u6253\u5370\u673a\u751a\u81f3\u4e00\u4e9b\u8fdb\u7a0b\u95f4\u548c\u7f51\u7edc\u901a\u4fe1, \u90fd\u662f\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u63cf\u8ff0\u7684\u7b80\u5355\u7684\u5b57\u8282\u6d41. Rust \u521d\u5b66\u4e5f\u5c06\u4ece\u6587\u4ef6\u8bfb\u5199\u5f00\u59cb. \u5b57\u8282\u8bfb\u53d6 use std::fs::File; use std::io::prelude::*; fn main() { let mut f = File::open(\"/tmp/src\").unwrap(); let mut buf = vec![0; 8]; let n = f.read(&mut buf[..]).unwrap(); println!(\"{:?}\", &buf[..n]); } \u8bfb\u53d6\u5168\u90e8 use std::fs::File; use std::io::prelude::*; fn main() { let mut f = File::open(\"/tmp/src\").unwrap(); let mut buf = String::new(); f.read_to_string(&mut buf).unwrap(); println!(\"{}\", buf); } \u9010\u884c\u8bfb\u53d6 use std::fs::File; use std::io::prelude::*; use std::io::BufReader; fn main() { let f = File::open(\"/tmp/src\").unwrap(); let reader = BufReader::new(f); for line in reader.lines() { // line \u662f std::result::Result<std::string::String, std::io::Error> \u7c7b\u578b // line \u4e0d\u5305\u542b\u6362\u884c\u7b26 let line = line.unwrap(); println!(\"{}\", line); } } \u5199\u5165\u6587\u4ef6 use std::fs::File; use std::io::prelude::*; fn main() { let mut f = File::create(\"/tmp/dst\").unwrap(); f.write(\"Hello\\n\".as_bytes()).unwrap(); f.write(\"\u4f60\u597d\\n\".as_bytes()).unwrap(); f.write(\"\uc548\ub155\ud558\uc138\uc694\\n\".as_bytes()).unwrap(); } \u8ffd\u52a0\u6587\u4ef6 use std::fs::OpenOptions; use std::io::prelude::*; fn main() { let mut f = OpenOptions::new().create(true).append(true).open(\"/tmp/dst\").unwrap(); f.write(\"Hello\\n\".as_bytes()).unwrap(); f.write(\"\u4f60\u597d\\n\".as_bytes()).unwrap(); f.write(\"\uc548\ub155\ud558\uc138\uc694\\n\".as_bytes()).unwrap(); }","title":"\u6587\u4ef6\u8bfb\u5199"},{"location":"content/rust/json/","text":"JSON \u5904\u7406 JSON \u662f\u4e00\u79cd\u65e0\u5904\u4e0d\u5728\u7684\u5f00\u653e\u6807\u51c6\u683c\u5f0f, \u5b83\u4f7f\u7528\u4eba\u7c7b\u53ef\u8bfb\u7684\u6587\u672c\u6765\u4f20\u8f93\u7531\u952e\u503c\u5bf9\u7ec4\u6210\u7684\u6570\u636e\u5bf9\u8c61. \u8fd9\u91cc\u501f\u52a9\u4e00\u4e0b serde_json \u8fd9\u4e2a\u5e93. [dependencies] serde = \"*\" serde_derive = \"*\" serde_json = \"*\" \u5047\u8bbe\u6709\u5982\u4e0b\u6587\u4ef6: { \"name\": \"John Doe\", \"age\": 43, \"address\": { \"street\": \"10 Downing Street\", \"city\": \"London\" }, \"phones\": [ \"+44 1234567\", \"+44 2345678\" ] } \u89e3\u6790\u4e3a\u810f\u7c7b\u578b extern crate serde_json; use std::fs::File; fn main() { let f = File::open(\"sample.json\").unwrap(); let v: serde_json::Value = serde_json::from_reader(f).unwrap(); println!(\"{:?}\", v[\"name\"].as_str().unwrap()); println!(\"{:?}\", v[\"age\"].as_i64().unwrap()); } \u89e3\u6790\u4e3a\u5f3a\u7c7b\u578b extern crate serde; #[macro_use] extern crate serde_derive; extern crate serde_json; use std::fs::File; #[derive(Debug, Serialize, Deserialize)] struct Address { street: String, city: String, } #[derive(Debug, Serialize, Deserialize)] struct Person { name: String, age: u8, address: Address, phones: Vec<String>, } fn main() { let f = File::open(\"/src/sandbox/main.json\").unwrap(); let v: Person = serde_json::from_reader(f).unwrap(); println!(\"{:?}\", v); }","title":"Rust-JSON"},{"location":"content/rust/json/#json","text":"JSON \u662f\u4e00\u79cd\u65e0\u5904\u4e0d\u5728\u7684\u5f00\u653e\u6807\u51c6\u683c\u5f0f, \u5b83\u4f7f\u7528\u4eba\u7c7b\u53ef\u8bfb\u7684\u6587\u672c\u6765\u4f20\u8f93\u7531\u952e\u503c\u5bf9\u7ec4\u6210\u7684\u6570\u636e\u5bf9\u8c61. \u8fd9\u91cc\u501f\u52a9\u4e00\u4e0b serde_json \u8fd9\u4e2a\u5e93. [dependencies] serde = \"*\" serde_derive = \"*\" serde_json = \"*\" \u5047\u8bbe\u6709\u5982\u4e0b\u6587\u4ef6: { \"name\": \"John Doe\", \"age\": 43, \"address\": { \"street\": \"10 Downing Street\", \"city\": \"London\" }, \"phones\": [ \"+44 1234567\", \"+44 2345678\" ] }","title":"JSON \u5904\u7406"},{"location":"content/rust/json/#_1","text":"extern crate serde_json; use std::fs::File; fn main() { let f = File::open(\"sample.json\").unwrap(); let v: serde_json::Value = serde_json::from_reader(f).unwrap(); println!(\"{:?}\", v[\"name\"].as_str().unwrap()); println!(\"{:?}\", v[\"age\"].as_i64().unwrap()); }","title":"\u89e3\u6790\u4e3a\u810f\u7c7b\u578b"},{"location":"content/rust/json/#_2","text":"extern crate serde; #[macro_use] extern crate serde_derive; extern crate serde_json; use std::fs::File; #[derive(Debug, Serialize, Deserialize)] struct Address { street: String, city: String, } #[derive(Debug, Serialize, Deserialize)] struct Person { name: String, age: u8, address: Address, phones: Vec<String>, } fn main() { let f = File::open(\"/src/sandbox/main.json\").unwrap(); let v: Person = serde_json::from_reader(f).unwrap(); println!(\"{:?}\", v); }","title":"\u89e3\u6790\u4e3a\u5f3a\u7c7b\u578b"},{"location":"content/rust/overview/","text":"\u7531\u4e8e\u65b0\u516c\u53f8\u4f7f\u7528 Rust \u6808, \u56e0\u6b64\u5b66\u4e60 Rust \u6210\u4e3a\u5f53\u52a1\u4e4b\u6025. Rust \u7cfb\u5217\u7b2c\u4e00\u7bc7\u6587\u7ae0\u5927\u6982\u662f\u4f5c\u8005\u5b66\u4e60 Rust \u7684\u7b2c 4 \u5468, \u77ed\u6682\u63a5\u89e6\u8fc7\u7a0b\u4e2d, Rust \u6709\u5176\u60ca\u8273\u7684\u5730\u65b9, \u4e5f\u6709\u5176\u4ee4\u4eba\u4e0d\u6ee1\u7684\u5730\u65b9. \u5f53\u524d\u7684\u4e00\u4e2a\u73b0\u72b6\u662f Rust \u4f7f\u7528\u8005(\u5305\u62ec\u4eba\u4e0e\u516c\u53f8)\u8fdc\u4e0d\u5982 Go, \u5728\u676d\u5dde\u641c\u7d22 Rust \u5c97\u4f4d, \u5728\u62c9\u94a9\u4e0a\u5c3d\u7136\u53ea\u6709\u4e00\u5bb6\u516c\u53f8\u5728\u62db\u8058 Rust \u5f00\u53d1\u8005... Rust \u4ecb\u7ecd Rust \u662f\u4e00\u79cd\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00. \u5b83\u6709\u7740\u60ca\u4eba\u7684\u8fd0\u884c\u901f\u5ea6, \u80fd\u591f\u9632\u6b62\u6bb5\u9519\u8bef, \u5e76\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168. \u7279\u70b9: \u96f6\u5f00\u9500\u62bd\u8c61 \u8f6c\u79fb\u8bed\u4e49 \u4fdd\u8bc1\u5185\u5b58\u5b89\u5168 \u7ebf\u7a0b\u65e0\u6570\u636e\u7ade\u4e89 \u57fa\u4e8e trait \u7684\u6cdb\u578b \u6a21\u5f0f\u5339\u914d \u7c7b\u578b\u63a8\u65ad \u6781\u5c0f\u8fd0\u884c\u65f6 \u9ad8\u6548 C \u7ed1\u5b9a fn main() { let greetings = [\"Hello\", \"Hola\", \"Bonjour\", \"Ciao\", \"\u3053\u3093\u306b\u3061\u306f\", \"\uc548\ub155\ud558\uc138\uc694\", \"Cze\u015b\u0107\", \"Ol\u00e1\", \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\", \"Ch\u00e0o b\u1ea1n\", \"\u60a8\u597d\", \"Hallo\", \"Hej\", \"Ahoj\", \"\u0633\u0644\u0627\u0645\",\"\u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\"]; for (num, greeting) in greetings.iter().enumerate() { print!(\"{} : \", greeting); match num { 0 => println!(\"This code is editable and runnable!\"), 1 => println!(\"\u00a1Este c\u00f3digo es editable y ejecutable!\"), 2 => println!(\"Ce code est modifiable et ex\u00e9cutable !\"), 3 => println!(\"Questo codice \u00e8 modificabile ed eseguibile!\"), 4 => println!(\"\u3053\u306e\u30b3\u30fc\u30c9\u306f\u7de8\u96c6\u3057\u3066\u5b9f\u884c\u51fa\u6765\u307e\u3059\uff01\"), 5 => println!(\"\uc5ec\uae30\uc5d0\uc11c \ucf54\ub4dc\ub97c \uc218\uc815\ud558\uace0 \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4!\"), 6 => println!(\"Ten kod mo\u017cna edytowa\u0107 oraz uruchomi\u0107!\"), 7 => println!(\"Este c\u00f3digo \u00e9 edit\u00e1vel e execut\u00e1vel!\"), 8 => println!(\"\u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c!\"), 9 => println!(\"B\u1ea1n c\u00f3 th\u1ec3 edit v\u00e0 run code tr\u1ef1c ti\u1ebfp!\"), 10 => println!(\"\u8fd9\u6bb5\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8f91\u5e76\u4e14\u80fd\u591f\u8fd0\u884c\u7684\uff01\"), 11 => println!(\"Dieser Code kann bearbeitet und ausgef\u00fchrt werden!\"), 12 => println!(\"Den h\u00e4r koden kan redigeras och k\u00f6ras!\"), 13 => println!(\"Tento k\u00f3d m\u016f\u017eete upravit a spustit\"), 14 => println!(\"\u0627\u06cc\u0646 \u06a9\u062f \u0642\u0627\u0628\u0644\u06cc\u062a \u0648\u06cc\u0631\u0627\u06cc\u0634 \u0648 \u0627\u062c\u0631\u0627 \u062f\u0627\u0631\u062f!\"), 15 => println!(\"\u0e42\u0e04\u0e49\u0e14\u0e19\u0e35\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e14\u0e49\u0e41\u0e25\u0e30\u0e23\u0e31\u0e19\u0e44\u0e14\u0e49\"), _ => {}, } } } \u5b89\u88c5-windows [TODO] \u5b89\u88c5\u65b9\u5f0f \u5b89\u88c5-linux [TODO] \u5b89\u88c5\u65b9\u5f0f [TODO] Vim \u81ea\u52a8\u8865\u5168\u914d\u7f6e \u53c2\u8003 [1] Rust: \u9996\u9875 https://www.rust-lang.org/zh-CN/","title":"Rust-\u6982\u89c8"},{"location":"content/rust/overview/#rust","text":"Rust \u662f\u4e00\u79cd\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00. \u5b83\u6709\u7740\u60ca\u4eba\u7684\u8fd0\u884c\u901f\u5ea6, \u80fd\u591f\u9632\u6b62\u6bb5\u9519\u8bef, \u5e76\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168. \u7279\u70b9: \u96f6\u5f00\u9500\u62bd\u8c61 \u8f6c\u79fb\u8bed\u4e49 \u4fdd\u8bc1\u5185\u5b58\u5b89\u5168 \u7ebf\u7a0b\u65e0\u6570\u636e\u7ade\u4e89 \u57fa\u4e8e trait \u7684\u6cdb\u578b \u6a21\u5f0f\u5339\u914d \u7c7b\u578b\u63a8\u65ad \u6781\u5c0f\u8fd0\u884c\u65f6 \u9ad8\u6548 C \u7ed1\u5b9a fn main() { let greetings = [\"Hello\", \"Hola\", \"Bonjour\", \"Ciao\", \"\u3053\u3093\u306b\u3061\u306f\", \"\uc548\ub155\ud558\uc138\uc694\", \"Cze\u015b\u0107\", \"Ol\u00e1\", \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\", \"Ch\u00e0o b\u1ea1n\", \"\u60a8\u597d\", \"Hallo\", \"Hej\", \"Ahoj\", \"\u0633\u0644\u0627\u0645\",\"\u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\"]; for (num, greeting) in greetings.iter().enumerate() { print!(\"{} : \", greeting); match num { 0 => println!(\"This code is editable and runnable!\"), 1 => println!(\"\u00a1Este c\u00f3digo es editable y ejecutable!\"), 2 => println!(\"Ce code est modifiable et ex\u00e9cutable !\"), 3 => println!(\"Questo codice \u00e8 modificabile ed eseguibile!\"), 4 => println!(\"\u3053\u306e\u30b3\u30fc\u30c9\u306f\u7de8\u96c6\u3057\u3066\u5b9f\u884c\u51fa\u6765\u307e\u3059\uff01\"), 5 => println!(\"\uc5ec\uae30\uc5d0\uc11c \ucf54\ub4dc\ub97c \uc218\uc815\ud558\uace0 \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4!\"), 6 => println!(\"Ten kod mo\u017cna edytowa\u0107 oraz uruchomi\u0107!\"), 7 => println!(\"Este c\u00f3digo \u00e9 edit\u00e1vel e execut\u00e1vel!\"), 8 => println!(\"\u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c!\"), 9 => println!(\"B\u1ea1n c\u00f3 th\u1ec3 edit v\u00e0 run code tr\u1ef1c ti\u1ebfp!\"), 10 => println!(\"\u8fd9\u6bb5\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8f91\u5e76\u4e14\u80fd\u591f\u8fd0\u884c\u7684\uff01\"), 11 => println!(\"Dieser Code kann bearbeitet und ausgef\u00fchrt werden!\"), 12 => println!(\"Den h\u00e4r koden kan redigeras och k\u00f6ras!\"), 13 => println!(\"Tento k\u00f3d m\u016f\u017eete upravit a spustit\"), 14 => println!(\"\u0627\u06cc\u0646 \u06a9\u062f \u0642\u0627\u0628\u0644\u06cc\u062a \u0648\u06cc\u0631\u0627\u06cc\u0634 \u0648 \u0627\u062c\u0631\u0627 \u062f\u0627\u0631\u062f!\"), 15 => println!(\"\u0e42\u0e04\u0e49\u0e14\u0e19\u0e35\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e14\u0e49\u0e41\u0e25\u0e30\u0e23\u0e31\u0e19\u0e44\u0e14\u0e49\"), _ => {}, } } }","title":"Rust \u4ecb\u7ecd"},{"location":"content/rust/overview/#-windows","text":"[TODO] \u5b89\u88c5\u65b9\u5f0f","title":"\u5b89\u88c5-windows"},{"location":"content/rust/overview/#-linux","text":"[TODO] \u5b89\u88c5\u65b9\u5f0f [TODO] Vim \u81ea\u52a8\u8865\u5168\u914d\u7f6e","title":"\u5b89\u88c5-linux"},{"location":"content/rust/overview/#_1","text":"[1] Rust: \u9996\u9875 https://www.rust-lang.org/zh-CN/","title":"\u53c2\u8003"},{"location":"content/rust/tcp/","text":"TCP \u4f7f\u7528 Rust \u5b9e\u73b0\u4e00\u4e2a ping/pong \u670d\u52a1\u5668. \u76ee\u524d\u5b9e\u73b0\u662f\u4e00\u4e2a\u8fde\u63a5\u4e00\u4e2a\u7ebf\u7a0b, \u6027\u80fd\u611f\u89c9\u76f8\u5f53\u4e0d\u9760\u8c31. TCP Server use std::io::prelude::*; use std::io::BufReader; use std::io::BufWriter; use std::net::TcpListener; use std::thread; fn main() { let l = TcpListener::bind(\"127.0.0.1:8080\").unwrap(); for stream in l.incoming() { thread::spawn(move || { let stream = stream.unwrap(); let reader = BufReader::new(&stream); let mut writer = BufWriter::new(&stream); for line in reader.lines() { let line = line.unwrap(); println!(\"{}\", line); if line == \"ping\" { writer.write_all(b\"pong\\n\").unwrap(); writer.flush().unwrap(); } } }); } } TCP Client use std::io::prelude::*; use std::io::BufReader; use std::io::BufWriter; use std::net::TcpStream; fn main() { let stream = TcpStream::connect(\"127.0.0.1:8080\").unwrap(); let mut reader = BufReader::new(&stream); let mut writer = BufWriter::new(&stream); writer.write_all(b\"ping\\n\").unwrap(); writer.flush().unwrap(); let mut line = String::new(); reader.read_line(&mut line).unwrap(); println!(\"{}\", line); }","title":"Rust-TCP"},{"location":"content/rust/tcp/#tcp","text":"\u4f7f\u7528 Rust \u5b9e\u73b0\u4e00\u4e2a ping/pong \u670d\u52a1\u5668. \u76ee\u524d\u5b9e\u73b0\u662f\u4e00\u4e2a\u8fde\u63a5\u4e00\u4e2a\u7ebf\u7a0b, \u6027\u80fd\u611f\u89c9\u76f8\u5f53\u4e0d\u9760\u8c31.","title":"TCP"},{"location":"content/rust/tcp/#tcp-server","text":"use std::io::prelude::*; use std::io::BufReader; use std::io::BufWriter; use std::net::TcpListener; use std::thread; fn main() { let l = TcpListener::bind(\"127.0.0.1:8080\").unwrap(); for stream in l.incoming() { thread::spawn(move || { let stream = stream.unwrap(); let reader = BufReader::new(&stream); let mut writer = BufWriter::new(&stream); for line in reader.lines() { let line = line.unwrap(); println!(\"{}\", line); if line == \"ping\" { writer.write_all(b\"pong\\n\").unwrap(); writer.flush().unwrap(); } } }); } }","title":"TCP Server"},{"location":"content/rust/tcp/#tcp-client","text":"use std::io::prelude::*; use std::io::BufReader; use std::io::BufWriter; use std::net::TcpStream; fn main() { let stream = TcpStream::connect(\"127.0.0.1:8080\").unwrap(); let mut reader = BufReader::new(&stream); let mut writer = BufWriter::new(&stream); writer.write_all(b\"ping\\n\").unwrap(); writer.flush().unwrap(); let mut line = String::new(); reader.read_line(&mut line).unwrap(); println!(\"{}\", line); }","title":"TCP Client"},{"location":"content/speech/blockchain_privacy_protection/","text":"\u533a\u5757\u94fe\u9690\u79c1\u4fdd\u62a4\u5bc6\u7801\u6280\u672f\u4ecb\u7ecd \u65f6\u95f4: 2020-03-05 \u5730\u70b9: \u89c6\u9891\u4f1a\u8bae \u4e3b\u8bb2: \u90c1\u6631, \u4e0a\u6d77\u4ea4\u901a\u5927\u5b66 \u6e05\u534e\u738b\u5c0f\u4e91\u8001\u5e08\u56e2\u961f\u7ec4\u7ec7\u7684\u4e00\u4e2a\u533a\u5757\u94fe\u5b66\u672f\u62a5\u544a, \u62a5\u544a\u4eba\u90c1\u6631\u8001\u5e08\u5728\u5bc6\u7801\u5b66\u9876\u4f1a\u91cc\u975e\u5e38\u9ad8\u4ea7... \u533a\u5757\u94fe\u4e2d\u5bc6\u7801\u6280\u672f\u7b80\u4ecb \u533a\u5757\u94fe\u4e2d\u5bc6\u7801\u6280\u672f\u4e3b\u8981\u4f5c\u7528\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762: Hash \u51fd\u6570\u548c\u6570\u5b57\u7b7e\u540d \u6570\u636e\u7684 Hash \u94fe + \u5206\u5e03\u5f0f\u5171\u8bc6\u7b97\u6cd5\u4fdd\u8bc1\u4e86\u533a\u5757\u94fe\u4e0a\u6570\u636e\u7684\u4e0d\u53ef\u7be1\u6539 \u6570\u5b57\u7b7e\u540d \u6388\u6743. \u6570\u5b57\u8d44\u4ea7, \u4e1a\u52a1\u5904\u7406\u6743\u7b49\u4e8e\u7b7e\u540d\u516c\u94a5\u5173\u8054, \u53ea\u6709\u516c\u94a5\u7684 owner \u53ef\u4ee5\u4ea7\u751f\u7b7e\u540d \u6570\u5b57\u7b7e\u540d\u4fdd\u8bc1\u4e86\u5904\u4e8e\u5171\u8bc6\u8fdb\u884c\u8fc7\u7a0b\u4e2d\u7684\u4e1a\u52a1\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u4e0d\u53ef\u5426\u8ba4\u6027 \u533a\u5757\u94fe\u7684\u9690\u79c1\u4fdd\u62a4\u95ee\u9898 \u4ee5\u6bd4\u7279\u5e01\u4e3a\u4f8b, \u6bd4\u7279\u5e01\u7684\u4ea4\u6613\u57fa\u672c\u7ed3\u6784\u4e3a \u6bcf\u4e2a\u4ea4\u6613\u4ea7\u751f\u4e00\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u8f93\u51fa(TXO), \u540c\u65f6\u6d88\u8d39\u4e00\u4e2a\u6216\u591a\u4e2a\u4e4b\u524d\u7684\u4ea4\u6613\u8f93\u51fa \u6bcf\u4e2a TXO \u5c5e\u4e8e/\u5173\u8054\u5230\u4e00\u4e2a\u7b7e\u540d\u516c\u94a5, \u5e76\u8bb0\u5f55\u4ea4\u6613\u91d1\u989d \u4e00\u4e2a\u4ea4\u6613\u8f93\u5165\u8981\u6d88\u8d39\u4e00\u4e2a\u4e4b\u524d\u7684 TXO, \u5fc5\u987b\u63d0\u4f9b\u6388\u6743\u8bc1\u660e(\u8be5 TXO \u7684\u516c\u94a5\u9a8c\u8bc1\u901a\u8fc7\u7684\u6570\u5b57\u7b7e\u540d) \u6bd4\u7279\u5e01\u6240\u6709\u516c\u94a5\u7684\u5386\u53f2\u6d88\u8d39\u8bb0\u5f55\u5747\u53ef\u4ee5\u516c\u5f00\u53d6\u5f97, \u4f46\u65e0\u6cd5\u8f7b\u6613\u5730\u5173\u8054\u5230\u73b0\u5b9e\u4e2d\u7684\u4eba. \u4f46\u76ee\u524d\u901a\u8fc7\u4e00\u4e9b\u6280\u672f\u5206\u6790\u4f9d\u7136\u53ef\u4ee5\u5b8c\u6210\u5b9a\u4f4d, \u6bd4\u5982\u5927\u90e8\u5206\u4ea4\u6613\u6240\u7684\u5730\u5740\u5747\u5df2\u7ecf\u88ab\u6807\u8bb0. \u533a\u5757\u94fe\u7684\u9690\u79c1\u4fdd\u62a4\u4e3b\u8981\u6311\u6218\u5728\u4e8e \u9690\u79c1\u4fdd\u62a4\u4e0e\u533a\u5757\u94fe\u6570\u636e\u516c\u5f00\u53ef\u9a8c\u8bc1 \u662f\u51b2\u7a81\u7684. \u9690\u79c1\u4fdd\u62a4\u4e3b\u8981\u6709\u4e09\u4e2a\u624b\u6bb5: \u9690\u85cf\u4ea4\u6613\u8f93\u51fa\u53bb\u5411(\u76f8\u5bf9\u5bb9\u6613, \u4f8b\u5982\u91c7\u7528\u4e00\u6b21\u6027\u5730\u5740) \u9690\u85cf\u4ea4\u6613\u8f93\u5165\u6765\u6e90 \u65b0\u4ea4\u6613\u8981\u6d88\u8d39\u4e4b\u524d\u7684\u4e00\u4e2a TXO, \u9700\u8981\u5728\u8fd9\u4e2a\u65b0\u4ea4\u6613\u4e2d\u5305\u542b\u53ef\u516c\u5f00\u9a8c\u8bc1\u7684, \u5bf9\u8be5 TXO \u6d88\u8d39\u7684\u6388\u6743\u8bc1\u660e, \u800c\u8fd9\u5bfc\u81f4\u4e86\u6b64\u65b0\u4ea4\u6613\u4e0e\u8be5 TXO \u4e4b\u95f4\u7684\u53ef\u8ffd\u8e2a\u6027 \u6bcf\u4e2a TXO \u53ea\u80fd\u88ab\u6d88\u8d39\u4e00\u6b21\u4e5f\u5fc5\u987b\u516c\u5f00\u53ef\u9a8c\u8bc1 \u9690\u85cf\u4ea4\u6613\u91d1\u989d \u76ee\u524d\u6709\u4e00\u4e9b\u975e\u5bc6\u7801\u6280\u672f\u624b\u6bb5\u53ef\u7528\u4e8e\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898: \u4f7f\u7528\u4e00\u6b21\u6027\u5730\u5740 \u6df7\u5e01, \u5207\u65ad/\u9690\u85cf\u4ea4\u6613\u4e4b\u95f4\u7684\u5173\u8054\u5173\u7cfb(\u7c7b\u4f3c\u73b0\u5b9e\u4e2d\u7684\u6d17\u94b1) \u6df7\u5e01. \u57fa\u4e8e\u4e2d\u4ecb\u670d\u52a1 \u6d17\u5e01. \u7528\u6237\u95f4\u81ea\u4e3b\u4ea4\u4e92 Dash \u53e6\u5916\u57fa\u4e8e\u5bc6\u7801\u6280\u672f\u6709\u4e24\u4e2a\u975e\u5e38\u5178\u578b\u7684\u6280\u672f\u8def\u7ebf: Menero(\u95e8\u7f57\u5e01) Zcash Menero \u9690\u5f62\u5730\u5740(\u516c\u94a5\u6d3e\u751f\u7b97\u6cd5), \u6587\u7ae0: https://cryptonote.org/whitepaper.pdf . \u4ed8\u6b3e\u4eba\u4e0d\u7528\u4e8e\u6536\u6b3e\u4eba\u4ea4\u4e92, \u4ece\u6536\u6b3e\u4eba\u7684\u4e3b\u516c\u94a5\u8ba1\u7b97\u51fa\u4e00\u6b21\u6027\u7684\u6d3e\u751f\u516c\u94a5, \u6536\u6b3e\u4eba\u4e0d\u5fc5\u4e0e\u4ed8\u6b3e\u4eba\u4ea4\u4e92, \u81ea\u884c\u8ba1\u7b97\u51fa\u6d3e\u751f\u516c\u94a5\u5bf9\u5e94\u7684\u79c1\u94a5. \u6d3e\u751f\u516c\u94a5\u516c\u5f00, \u4f46(\u76f4\u89c2\u4e0a)\u4e0d\u6cc4\u9732\u5176\u4e3b\u516c\u94a5, \u4ece\u540c\u4e00\u4e3b\u5171\u516c\u94a5\u7684\u6d3e\u751f\u516c\u94a5\u4e5f\u4e0d\u4f1a\u88ab\u5173\u8054\u8d77\u6765, \u8fbe\u5230\u4e86\u9690\u85cf\u8f93\u51fa\u7684\u76ee\u7684. \u5b58\u5728\u6548\u7387\u95ee\u9898: \u6536\u6b3e\u4eba\u9700\u8981\u5224\u65ad\u94fe\u4e0a\u7684\u6bcf\u4e00\u4e2a\u4ea4\u6613\u662f\u5426\u5c5e\u4e8e\u4ed6 \u53ef\u94fe\u63a5\u73af\u7b7e \u9690\u85cf\u4ea4\u6613\u8f93\u5165\u6d88\u8d39\u7684\u771f\u5b9e TXO, \u5207\u65ad\u4ea4\u6613\u95f4\u7684\u53ef\u8ffd\u8e2a\u6027 \u533f\u540d\u96c6, \u9690\u79c1\u6c34\u5e73 1-out-of-n, \u8fbe\u5230\u7684\u9690\u79c1\u7ea7\u522b\u53d6\u51b3\u4e8e\u533f\u540d\u96c6\u7684\u5927\u5c0f \u627f\u8bfa\u548c\u96f6\u77e5\u8bc6\u8bc1\u660e(\u96f6\u77e5\u8bc6\u662f\u4e07\u80fd\u7684!) \u6b64\u5904\u5927\u91cf\u5173\u4e8e\u95e8\u7f57\u91c7\u7528\u6280\u672f\u7684\u6570\u5b66\u8bc1\u660e\u7b80\u4ecb, \u7565\u8fc7 Zcash Zcash \u7684\u6838\u5fc3\u6280\u672f\u662f zk-SNARKs. \u6bcf\u4e2a\u4ea4\u6613\u8f93\u51fa: \u627f\u8bfa owner \u7684\u516c\u94a5, \u5e01\u503c, \u968f\u673a\u6570 \u627f\u8bfa\u7684 hiding: \u516c\u94a5\u4e0e\u5e01\u503c\u4e0d\u88ab\u6cc4\u9732 \u94fe\u4e0a\u6240\u6709\u7684\u627f\u8bfa\u7ec4\u6210\u4e00\u4e2a\u96c6\u5408 S \u5f53\u4e00\u4e2a\u7528\u6237\u8981\u6d88\u8d39\u4e00\u4e2a\u4ed6\u7684\u5e01, \u628a\u5176\u4e2d\u7684\u5e01\u503c\u8f6c\u79fb\u5230\u65b0\u7684\u627f\u8bfa(\u4ea4\u6613\u8f93\u51fa)\u4e2d\u65f6, \u9700\u8981\u7528\u4ed6\u6240\u77e5\u9053\u7684\u8be5\u5e01\u7684\u5e01\u503c, \u968f\u673a\u6570, \u516c\u94a5\u5730\u5740\u548c\u76f8\u5e94\u7684\u5bc6\u94a5, \u8c03\u7528 zk-SNARKs \u4ea7\u751f\u8be5\u4ea4\u6613\u7684\u4e00\u4e2a\u8bc1\u636e \u8bc1\u636e\u53ef\u88ab\u4efb\u4f55\u4eba\u516c\u5f00\u9a8c\u8bc1 \u4ea7\u751f\u8bc1\u636e\u7684\u4eba\u77e5\u9053 S \u4e2d\u67d0\u4e00\u4e2a\u627f\u8bfa\u7684\u5168\u90e8\u4fe1\u606f\u548c\u5bc6\u94a5, \u4e14 \u8be5\u627f\u8bfa\u6ca1\u6709\u88ab\u4e4b\u524d\u7684\u4ea4\u6613\u6d88\u8d39\u8fc7 \u8be5\u627f\u8bfa\u4e2d\u7684\u5e01\u503c\u4e0e\u4ea4\u6613\u4ea7\u751f\u7684\u65b0\u627f\u8bfa\u4e2d\u7684\u5e01\u503c\u7ef4\u6301\u5e73\u8861 \u8bc1\u636e\u4e0d\u4f1a\u6cc4\u9732\"\u6240\u6d88\u8d39\u7684\u627f\u8bfa\u662f S \u4e2d\u7684\u4e00\u4e2a\"\u4e4b\u5916\u5173\u4e8e\u88ab\u6d88\u8d39\u7684\u627f\u8bfa\u4fe1\u606f \u8bc1\u636e\u4e0d\u4f1a\u6cc4\u9732\u88ab\u6d88\u8d39\u627f\u8bfa\u5bf9\u5e94\u7684 owner \u516c\u94a5, \u5e01\u503c, \u968f\u673a\u6570\u548c\u79c1\u94a5\u7684\u4efb\u4f55\u4fe1\u606f \u8bc1\u636e\u4e0d\u4f1a\u6cc4\u9732\u65b0\u4ea7\u751f\u7684\u627f\u8bfa \u611f\u60f3 \u4e2a\u4eba\u7531\u4e8e\u6ca1\u6709\u53d7\u8fc7\u7cfb\u7edf\u7684\u5b66\u672f\u8bad\u7ec3\u548c\u7f3a\u5c11\u5bf9\u5e38\u7528\u6570\u5b66\u5de5\u5177\u7684\u8ba4\u77e5, \u542c\u8be5\u62a5\u544a\u53ea\u80fd\u5b8c\u5168\u5ffd\u7565\u5176\u4e2d\u7684\u6570\u5b66\u8bc1\u660e\u90e8\u5206, \u4f46\u5bf9\u4e8e\u773c\u754c\u7684\u62d3\u5c55\u4ecd\u7136\u6709\u610f\u4e49. \u6211\u5f88\u65e9\u5c31\u4e86\u89e3\u5230\u95e8\u7f57\u5e01, \u628a\u5b83\u7684\u6d4f\u89c8\u5668\u6316\u77ff\u811a\u672c\u690d\u5165\u5728\u81ea\u5df1\u7684\u4e00\u4e9b\u7f51\u7ad9\u4e2d, \u4e5f\u66fe\u542c\u8bf4\u8fc7\u5b83\u662f\u6697\u7f51\u4ea4\u6613\u6240\u4f7f\u7528\u7684\u6392\u540d\u7b2c\u4e8c\u7684\u6570\u5b57\u8d27\u5e01. \u95e8\u7f57\u8fd9\u4e2a\u56e2\u961f\u5728\u6570\u5b66\u8bc1\u660e\u8fd8\u4e0d\u5b8c\u5907\u7684\u60c5\u51b5\u4e0b\u5c31\u4e8e 2015 \u5e74\u5306\u5306\u63a8\u51fa\u8fd9\u4e2a\u9879\u76ee\u7136\u540e\u53d1\u5e01, \u867d\u8bf4\u8d5a\u4e86\u5f88\u591a\u94b1\u4f46\u4ece\u4eca\u5929\u770b\u6765\u5176\u540e\u52b2\u660e\u663e\u4e0d\u8db3. \u5feb\u94b1\u4e00\u65f6\u723d, \u4e00\u76f4\u5feb\u94b1\u4e00\u76f4\u723d.","title":"\u533a\u5757\u94fe\u9690\u79c1\u4fdd\u62a4\u5bc6\u7801\u6280\u672f\u4ecb\u7ecd"},{"location":"content/speech/blockchain_privacy_protection/#_1","text":"\u65f6\u95f4: 2020-03-05 \u5730\u70b9: \u89c6\u9891\u4f1a\u8bae \u4e3b\u8bb2: \u90c1\u6631, \u4e0a\u6d77\u4ea4\u901a\u5927\u5b66 \u6e05\u534e\u738b\u5c0f\u4e91\u8001\u5e08\u56e2\u961f\u7ec4\u7ec7\u7684\u4e00\u4e2a\u533a\u5757\u94fe\u5b66\u672f\u62a5\u544a, \u62a5\u544a\u4eba\u90c1\u6631\u8001\u5e08\u5728\u5bc6\u7801\u5b66\u9876\u4f1a\u91cc\u975e\u5e38\u9ad8\u4ea7...","title":"\u533a\u5757\u94fe\u9690\u79c1\u4fdd\u62a4\u5bc6\u7801\u6280\u672f\u4ecb\u7ecd"},{"location":"content/speech/blockchain_privacy_protection/#_2","text":"\u533a\u5757\u94fe\u4e2d\u5bc6\u7801\u6280\u672f\u4e3b\u8981\u4f5c\u7528\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762: Hash \u51fd\u6570\u548c\u6570\u5b57\u7b7e\u540d \u6570\u636e\u7684 Hash \u94fe + \u5206\u5e03\u5f0f\u5171\u8bc6\u7b97\u6cd5\u4fdd\u8bc1\u4e86\u533a\u5757\u94fe\u4e0a\u6570\u636e\u7684\u4e0d\u53ef\u7be1\u6539 \u6570\u5b57\u7b7e\u540d \u6388\u6743. \u6570\u5b57\u8d44\u4ea7, \u4e1a\u52a1\u5904\u7406\u6743\u7b49\u4e8e\u7b7e\u540d\u516c\u94a5\u5173\u8054, \u53ea\u6709\u516c\u94a5\u7684 owner \u53ef\u4ee5\u4ea7\u751f\u7b7e\u540d \u6570\u5b57\u7b7e\u540d\u4fdd\u8bc1\u4e86\u5904\u4e8e\u5171\u8bc6\u8fdb\u884c\u8fc7\u7a0b\u4e2d\u7684\u4e1a\u52a1\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u4e0d\u53ef\u5426\u8ba4\u6027","title":"\u533a\u5757\u94fe\u4e2d\u5bc6\u7801\u6280\u672f\u7b80\u4ecb"},{"location":"content/speech/blockchain_privacy_protection/#_3","text":"\u4ee5\u6bd4\u7279\u5e01\u4e3a\u4f8b, \u6bd4\u7279\u5e01\u7684\u4ea4\u6613\u57fa\u672c\u7ed3\u6784\u4e3a \u6bcf\u4e2a\u4ea4\u6613\u4ea7\u751f\u4e00\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u8f93\u51fa(TXO), \u540c\u65f6\u6d88\u8d39\u4e00\u4e2a\u6216\u591a\u4e2a\u4e4b\u524d\u7684\u4ea4\u6613\u8f93\u51fa \u6bcf\u4e2a TXO \u5c5e\u4e8e/\u5173\u8054\u5230\u4e00\u4e2a\u7b7e\u540d\u516c\u94a5, \u5e76\u8bb0\u5f55\u4ea4\u6613\u91d1\u989d \u4e00\u4e2a\u4ea4\u6613\u8f93\u5165\u8981\u6d88\u8d39\u4e00\u4e2a\u4e4b\u524d\u7684 TXO, \u5fc5\u987b\u63d0\u4f9b\u6388\u6743\u8bc1\u660e(\u8be5 TXO \u7684\u516c\u94a5\u9a8c\u8bc1\u901a\u8fc7\u7684\u6570\u5b57\u7b7e\u540d) \u6bd4\u7279\u5e01\u6240\u6709\u516c\u94a5\u7684\u5386\u53f2\u6d88\u8d39\u8bb0\u5f55\u5747\u53ef\u4ee5\u516c\u5f00\u53d6\u5f97, \u4f46\u65e0\u6cd5\u8f7b\u6613\u5730\u5173\u8054\u5230\u73b0\u5b9e\u4e2d\u7684\u4eba. \u4f46\u76ee\u524d\u901a\u8fc7\u4e00\u4e9b\u6280\u672f\u5206\u6790\u4f9d\u7136\u53ef\u4ee5\u5b8c\u6210\u5b9a\u4f4d, \u6bd4\u5982\u5927\u90e8\u5206\u4ea4\u6613\u6240\u7684\u5730\u5740\u5747\u5df2\u7ecf\u88ab\u6807\u8bb0. \u533a\u5757\u94fe\u7684\u9690\u79c1\u4fdd\u62a4\u4e3b\u8981\u6311\u6218\u5728\u4e8e \u9690\u79c1\u4fdd\u62a4\u4e0e\u533a\u5757\u94fe\u6570\u636e\u516c\u5f00\u53ef\u9a8c\u8bc1 \u662f\u51b2\u7a81\u7684. \u9690\u79c1\u4fdd\u62a4\u4e3b\u8981\u6709\u4e09\u4e2a\u624b\u6bb5: \u9690\u85cf\u4ea4\u6613\u8f93\u51fa\u53bb\u5411(\u76f8\u5bf9\u5bb9\u6613, \u4f8b\u5982\u91c7\u7528\u4e00\u6b21\u6027\u5730\u5740) \u9690\u85cf\u4ea4\u6613\u8f93\u5165\u6765\u6e90 \u65b0\u4ea4\u6613\u8981\u6d88\u8d39\u4e4b\u524d\u7684\u4e00\u4e2a TXO, \u9700\u8981\u5728\u8fd9\u4e2a\u65b0\u4ea4\u6613\u4e2d\u5305\u542b\u53ef\u516c\u5f00\u9a8c\u8bc1\u7684, \u5bf9\u8be5 TXO \u6d88\u8d39\u7684\u6388\u6743\u8bc1\u660e, \u800c\u8fd9\u5bfc\u81f4\u4e86\u6b64\u65b0\u4ea4\u6613\u4e0e\u8be5 TXO \u4e4b\u95f4\u7684\u53ef\u8ffd\u8e2a\u6027 \u6bcf\u4e2a TXO \u53ea\u80fd\u88ab\u6d88\u8d39\u4e00\u6b21\u4e5f\u5fc5\u987b\u516c\u5f00\u53ef\u9a8c\u8bc1 \u9690\u85cf\u4ea4\u6613\u91d1\u989d \u76ee\u524d\u6709\u4e00\u4e9b\u975e\u5bc6\u7801\u6280\u672f\u624b\u6bb5\u53ef\u7528\u4e8e\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898: \u4f7f\u7528\u4e00\u6b21\u6027\u5730\u5740 \u6df7\u5e01, \u5207\u65ad/\u9690\u85cf\u4ea4\u6613\u4e4b\u95f4\u7684\u5173\u8054\u5173\u7cfb(\u7c7b\u4f3c\u73b0\u5b9e\u4e2d\u7684\u6d17\u94b1) \u6df7\u5e01. \u57fa\u4e8e\u4e2d\u4ecb\u670d\u52a1 \u6d17\u5e01. \u7528\u6237\u95f4\u81ea\u4e3b\u4ea4\u4e92 Dash \u53e6\u5916\u57fa\u4e8e\u5bc6\u7801\u6280\u672f\u6709\u4e24\u4e2a\u975e\u5e38\u5178\u578b\u7684\u6280\u672f\u8def\u7ebf: Menero(\u95e8\u7f57\u5e01) Zcash","title":"\u533a\u5757\u94fe\u7684\u9690\u79c1\u4fdd\u62a4\u95ee\u9898"},{"location":"content/speech/blockchain_privacy_protection/#menero","text":"\u9690\u5f62\u5730\u5740(\u516c\u94a5\u6d3e\u751f\u7b97\u6cd5), \u6587\u7ae0: https://cryptonote.org/whitepaper.pdf . \u4ed8\u6b3e\u4eba\u4e0d\u7528\u4e8e\u6536\u6b3e\u4eba\u4ea4\u4e92, \u4ece\u6536\u6b3e\u4eba\u7684\u4e3b\u516c\u94a5\u8ba1\u7b97\u51fa\u4e00\u6b21\u6027\u7684\u6d3e\u751f\u516c\u94a5, \u6536\u6b3e\u4eba\u4e0d\u5fc5\u4e0e\u4ed8\u6b3e\u4eba\u4ea4\u4e92, \u81ea\u884c\u8ba1\u7b97\u51fa\u6d3e\u751f\u516c\u94a5\u5bf9\u5e94\u7684\u79c1\u94a5. \u6d3e\u751f\u516c\u94a5\u516c\u5f00, \u4f46(\u76f4\u89c2\u4e0a)\u4e0d\u6cc4\u9732\u5176\u4e3b\u516c\u94a5, \u4ece\u540c\u4e00\u4e3b\u5171\u516c\u94a5\u7684\u6d3e\u751f\u516c\u94a5\u4e5f\u4e0d\u4f1a\u88ab\u5173\u8054\u8d77\u6765, \u8fbe\u5230\u4e86\u9690\u85cf\u8f93\u51fa\u7684\u76ee\u7684. \u5b58\u5728\u6548\u7387\u95ee\u9898: \u6536\u6b3e\u4eba\u9700\u8981\u5224\u65ad\u94fe\u4e0a\u7684\u6bcf\u4e00\u4e2a\u4ea4\u6613\u662f\u5426\u5c5e\u4e8e\u4ed6 \u53ef\u94fe\u63a5\u73af\u7b7e \u9690\u85cf\u4ea4\u6613\u8f93\u5165\u6d88\u8d39\u7684\u771f\u5b9e TXO, \u5207\u65ad\u4ea4\u6613\u95f4\u7684\u53ef\u8ffd\u8e2a\u6027 \u533f\u540d\u96c6, \u9690\u79c1\u6c34\u5e73 1-out-of-n, \u8fbe\u5230\u7684\u9690\u79c1\u7ea7\u522b\u53d6\u51b3\u4e8e\u533f\u540d\u96c6\u7684\u5927\u5c0f \u627f\u8bfa\u548c\u96f6\u77e5\u8bc6\u8bc1\u660e(\u96f6\u77e5\u8bc6\u662f\u4e07\u80fd\u7684!) \u6b64\u5904\u5927\u91cf\u5173\u4e8e\u95e8\u7f57\u91c7\u7528\u6280\u672f\u7684\u6570\u5b66\u8bc1\u660e\u7b80\u4ecb, \u7565\u8fc7","title":"Menero"},{"location":"content/speech/blockchain_privacy_protection/#zcash","text":"Zcash \u7684\u6838\u5fc3\u6280\u672f\u662f zk-SNARKs. \u6bcf\u4e2a\u4ea4\u6613\u8f93\u51fa: \u627f\u8bfa owner \u7684\u516c\u94a5, \u5e01\u503c, \u968f\u673a\u6570 \u627f\u8bfa\u7684 hiding: \u516c\u94a5\u4e0e\u5e01\u503c\u4e0d\u88ab\u6cc4\u9732 \u94fe\u4e0a\u6240\u6709\u7684\u627f\u8bfa\u7ec4\u6210\u4e00\u4e2a\u96c6\u5408 S \u5f53\u4e00\u4e2a\u7528\u6237\u8981\u6d88\u8d39\u4e00\u4e2a\u4ed6\u7684\u5e01, \u628a\u5176\u4e2d\u7684\u5e01\u503c\u8f6c\u79fb\u5230\u65b0\u7684\u627f\u8bfa(\u4ea4\u6613\u8f93\u51fa)\u4e2d\u65f6, \u9700\u8981\u7528\u4ed6\u6240\u77e5\u9053\u7684\u8be5\u5e01\u7684\u5e01\u503c, \u968f\u673a\u6570, \u516c\u94a5\u5730\u5740\u548c\u76f8\u5e94\u7684\u5bc6\u94a5, \u8c03\u7528 zk-SNARKs \u4ea7\u751f\u8be5\u4ea4\u6613\u7684\u4e00\u4e2a\u8bc1\u636e \u8bc1\u636e\u53ef\u88ab\u4efb\u4f55\u4eba\u516c\u5f00\u9a8c\u8bc1 \u4ea7\u751f\u8bc1\u636e\u7684\u4eba\u77e5\u9053 S \u4e2d\u67d0\u4e00\u4e2a\u627f\u8bfa\u7684\u5168\u90e8\u4fe1\u606f\u548c\u5bc6\u94a5, \u4e14 \u8be5\u627f\u8bfa\u6ca1\u6709\u88ab\u4e4b\u524d\u7684\u4ea4\u6613\u6d88\u8d39\u8fc7 \u8be5\u627f\u8bfa\u4e2d\u7684\u5e01\u503c\u4e0e\u4ea4\u6613\u4ea7\u751f\u7684\u65b0\u627f\u8bfa\u4e2d\u7684\u5e01\u503c\u7ef4\u6301\u5e73\u8861 \u8bc1\u636e\u4e0d\u4f1a\u6cc4\u9732\"\u6240\u6d88\u8d39\u7684\u627f\u8bfa\u662f S \u4e2d\u7684\u4e00\u4e2a\"\u4e4b\u5916\u5173\u4e8e\u88ab\u6d88\u8d39\u7684\u627f\u8bfa\u4fe1\u606f \u8bc1\u636e\u4e0d\u4f1a\u6cc4\u9732\u88ab\u6d88\u8d39\u627f\u8bfa\u5bf9\u5e94\u7684 owner \u516c\u94a5, \u5e01\u503c, \u968f\u673a\u6570\u548c\u79c1\u94a5\u7684\u4efb\u4f55\u4fe1\u606f \u8bc1\u636e\u4e0d\u4f1a\u6cc4\u9732\u65b0\u4ea7\u751f\u7684\u627f\u8bfa","title":"Zcash"},{"location":"content/speech/blockchain_privacy_protection/#_4","text":"\u4e2a\u4eba\u7531\u4e8e\u6ca1\u6709\u53d7\u8fc7\u7cfb\u7edf\u7684\u5b66\u672f\u8bad\u7ec3\u548c\u7f3a\u5c11\u5bf9\u5e38\u7528\u6570\u5b66\u5de5\u5177\u7684\u8ba4\u77e5, \u542c\u8be5\u62a5\u544a\u53ea\u80fd\u5b8c\u5168\u5ffd\u7565\u5176\u4e2d\u7684\u6570\u5b66\u8bc1\u660e\u90e8\u5206, \u4f46\u5bf9\u4e8e\u773c\u754c\u7684\u62d3\u5c55\u4ecd\u7136\u6709\u610f\u4e49. \u6211\u5f88\u65e9\u5c31\u4e86\u89e3\u5230\u95e8\u7f57\u5e01, \u628a\u5b83\u7684\u6d4f\u89c8\u5668\u6316\u77ff\u811a\u672c\u690d\u5165\u5728\u81ea\u5df1\u7684\u4e00\u4e9b\u7f51\u7ad9\u4e2d, \u4e5f\u66fe\u542c\u8bf4\u8fc7\u5b83\u662f\u6697\u7f51\u4ea4\u6613\u6240\u4f7f\u7528\u7684\u6392\u540d\u7b2c\u4e8c\u7684\u6570\u5b57\u8d27\u5e01. \u95e8\u7f57\u8fd9\u4e2a\u56e2\u961f\u5728\u6570\u5b66\u8bc1\u660e\u8fd8\u4e0d\u5b8c\u5907\u7684\u60c5\u51b5\u4e0b\u5c31\u4e8e 2015 \u5e74\u5306\u5306\u63a8\u51fa\u8fd9\u4e2a\u9879\u76ee\u7136\u540e\u53d1\u5e01, \u867d\u8bf4\u8d5a\u4e86\u5f88\u591a\u94b1\u4f46\u4ece\u4eca\u5929\u770b\u6765\u5176\u540e\u52b2\u660e\u663e\u4e0d\u8db3. \u5feb\u94b1\u4e00\u65f6\u723d, \u4e00\u76f4\u5feb\u94b1\u4e00\u76f4\u723d.","title":"\u611f\u60f3"},{"location":"content/speech/minits/","text":"minits: \u4ee5 LLVM \u4e3a\u540e\u7aef\u7684 TypeScript \u9759\u6001\u7f16\u8bd1\u5668 \u65f6\u95f4: 2019-11-03 \u5730\u70b9: 2019 \u4e2d\u56fd\u5f00\u6e90\u5e74\u4f1a(COSCon'19), \u534e\u4e1c\u5e08\u8303\u5927\u5b66 \u4e3b\u8bb2: \u81ea\u5df1 Hello, \u5927\u5bb6\u4e0b\u5348\u597d! \u6b22\u8fce\u53c2\u52a0\u6709\u5173 minits \u7f16\u8bd1\u5668\u7684\u4e3b\u9898\u6f14\u8bb2, \u6211\u53eb\u53f6\u4e07\u6807, \u4e5f\u5e38\u7528\u82f1\u6587\u540d mohanson, \u662f\u4e00\u4e2a\u865a\u62df\u673a\u4e0e\u7f16\u8bd1\u5668\u7684\u7231\u597d\u8005. \u5148\u7b80\u5355\u4ecb\u7ecd\u4e0b\u81ea\u5df1, \u6211\u5bf9\u4e00\u4e9b\u53e4\u8463\u673a\u5668\u6bd4\u8f83\u611f\u5174\u8da3, \u66fe\u5199\u8fc7\u4e0a\u4e16\u7eaa 70 \u5e74\u4ee3\u7684\u96c5\u8fbe\u5229\u8857\u673a\u6a21\u62df\u5668, \u4efb\u5929\u5802\u7684 Game Boy \u6a21\u62df\u5668, \u82f1\u7279\u5c14\u7684 4004 \u548c 8080 CPU \u6a21\u62df\u5668\u7b49, \u5f53\u7136\u6211\u4e5f\u4e0d\u4e00\u76f4\u505a\u8fd9\u4e9b\u8003\u53e4\u5de5\u4f5c, \u50cf\u76ee\u524d\u6bd4\u8f83\u706b\u70ed\u7684 WebAssembly \u6280\u672f, \u5176\u865a\u62df\u5668\u7684 Python \u5b9e\u73b0 \"pywasm\", \u6211\u5c31\u662f\u5176\u4e3b\u8981\u4f5c\u8005. \u6211\u4eec\u63a5\u4e0b\u6765\u5c06\u8c08\u8bba\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u7f16\u8bd1\u5668\u6216\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00. \u8fd9\u4e2a\u5185\u5bb9\u6216\u8bb8\u6709\u70b9\u4e25\u8083, \u4e8b\u5b9e\u4e0a, \u5f53\u6211\u6700\u521d\u51c6\u5907\u6f14\u8bb2\u5185\u5bb9\u7684\u65f6\u5019, \u60f3\u6cd5\u662f\u4ecb\u7ecd minits \u8fd9\u4e2a\u9879\u76ee\u672c\u8eab: \u5373\u5b83\u7684\u8bbe\u8ba1, \u601d\u8def, \u4ee3\u7801\u5b9e\u73b0\u6216\u4f7f\u7528. minits \u7684\u8bbe\u8ba1\u76ee\u6807\u662f\u5c06 TypeScript \u4ece\u6d4f\u89c8\u5668\u6216\u8005 NodeJS \u4e2d\u89e3\u653e\u51fa\u6765. \u4f46\u540e\u6765\u6211\u53d1\u73b0 minits \u5b83\u672c\u8eab\u592a\u666e\u901a\u4e86, \u5b83\u4e0e\u73b0\u4ee3\u7f16\u8bd1\u5668\u4eec: \u6bd4\u5982 Clang \u6216 Rust \u6ca1\u6709\u592a\u591a\u7684\u533a\u522b, \u5e76\u4e14\u8fdc\u4e0d\u5982\u8fd9\u4e9b\u6210\u719f\u7684\u7f16\u8bd1\u5668\u4f18\u79c0\u548c\u5b8c\u5584. \u56e0\u6b64\u6211\u51b3\u5b9a\u5728\u6b64\u65f6\u6b64\u5730\u66f4\u591a\u7684\u8bb2\u8bb2\u7f16\u8bd1\u5668\u672c\u8eab\u4ee5\u53ca minits \u7684\u5de5\u4f5c\u6d41\u7a0b. \u5e0c\u671b\u53ef\u4ee5\u8ba9\u66f4\u591a\u7684\u5c0f\u4f19\u4f34\u5bf9\u7f16\u8bd1\u5668\u4e0d\u518d\u611f\u5230\u964c\u751f. \u89e3\u91ca\u5668/\u7f16\u8bd1\u5668 \u901a\u5e38\u6765\u8bb2, \u6709\u4e24\u79cd\u4e3b\u8981\u7684\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00: \u89e3\u91ca\u5668 \u7f16\u8bd1\u5668 \u5bf9\u4e8e\u89e3\u91ca\u5668\u6765\u8bf4, \u5b83\u63a5\u6536\u60a8\u7f16\u5199\u7684\u7a0b\u5e8f\u6e90\u4ee3\u7801\u548c\u8f93\u5165\u6570\u636e, \u7136\u540e\u89e3\u91ca\u5668\u5f00\u59cb\u8fd0\u884c\u5e76\u4ea7\u751f\u8f93\u51fa. \u5728\u8fd9\u4e2a\u5de5\u4f5c\u6d41\u7a0b\u4e0b, \u89e3\u91ca\u5668\u662f\u53c2\u4e0e\u7a0b\u5e8f\u8fd0\u884c\u7684, \u56e0\u6b64\u53ef\u4ee5\u79f0\u89e3\u91ca\u5668\u662f online \u7684. \u5bf9\u4e8e\u7f16\u8bd1\u5668\u6765\u8bf4\u60c5\u51b5\u6709\u70b9\u4e0d\u540c. \u7f16\u8bd1\u5668\u662f\u4e00\u79cd\u5c06\u6e90\u8bed\u8a00\u7ffb\u8bd1\u4e3a\u53e6\u4e00\u79cd\u8bed\u4e49\u4e0a\u7b49\u4ef7\u8bed\u8a00\u7684\u7a0b\u5e8f\u8f6f\u4ef6. \u5b83\u63a5\u6536\u7528\u6237\u7684\u6e90\u7801\u8f93\u5165, \u4f46\u5e76\u4e0d\u6267\u884c\u7528\u6237\u7684\u7a0b\u5e8f, \u800c\u662f\u5c06\u7528\u6237\u7684\u7a0b\u5e8f\u7ffb\u8bd1\u4e3a Target output. Target output \u53ef\u4ee5\u662f\u673a\u5668\u7801, \u865a\u62df\u673a\u5b57\u8282\u7801\u751a\u81f3\u662f\u53e6\u4e00\u95e8\u9ad8\u7ea7\u8bed\u8a00. \u4e3e\u4e24\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u8fd9\u51e0\u79cd\u60c5\u51b5, \u7b2c\u4e00\u4e2a\u4f8b\u5b50\u662f C \u8bed\u8a00, \u5b83\u7684\u7f16\u8bd1\u7ed3\u679c\u662f\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6, \u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d; \u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f Java, JDK \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u53eb javac \u7684\u7f16\u8bd1\u5668, \u8be5\u7f16\u8bd1\u5668\u7684\u7f16\u8bd1\u7ed3\u679c\u662f\u751f\u6210 Java \u5b57\u8282\u7801, \u5b83\u5fc5\u987b\u88ab\u8fd0\u884c\u5728 JVM \u4e2d. \u4e4b\u540e\u7528\u6237\u7684\u8f93\u5165\u6570\u636e\u5c06\u4e0e Target output \u4e00\u8d77\u534f\u540c\u4f5c\u7528\u4ea7\u751f Output. \u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u7f16\u8bd1\u5668\u662f\u79bb\u7ebf\u7684, \u5b83\u4e0d\u53c2\u4e0e\u6700\u540e\u751f\u6210\u8f93\u51fa Output \u7684\u8fc7\u7a0b. \u4e00\u4e2a\u5178\u578b\u7684\u7f16\u8bd1\u53ef\u80fd\u4f1a\u5305\u542b\u5982\u4e0b 6 \u4e2a\u9636\u6bb5: \u8bcd\u6cd5\u5206\u6790 \u8bed\u6cd5\u5206\u6790 \u8bed\u4e49\u5206\u6790 \u751f\u6210\u4e2d\u95f4\u4ee3\u7801(\u53ef\u9009\u7684) \u4f18\u5316(\u53ef\u9009\u7684) \u4ee3\u7801\u751f\u6210 \u524d 3 \u4e2a\u9636\u6bb5\u901a\u5e38\u88ab\u79f0\u4e3a\u7f16\u8bd1\u5668\u524d\u7aef, \u7b2c 4 \u4e2a\u9636\u6bb5\u88ab\u79f0\u4e3a\u524d\u7aef\u7684\u540e\u7aef, \u7b2c 5 \u4e2a\u9636\u6bb5\u88ab\u79f0\u4e3a\u4e2d\u7aef, \u7b2c 6 \u4e2a\u9636\u6bb5\u88ab\u79f0\u4e3a\u540e\u7aef. minits \u9879\u76ee\u7684\u4e3b\u8981\u5de5\u4f5c\u5c31\u96c6\u4e2d\u5728\u7b2c 4 \u9636\u6bb5 \"\u751f\u6210\u4e2d\u95f4\u4ee3\u7801\". \u5176\u4e2d\u7684\u4f18\u5316\u9636\u6bb5\u662f\u4e3a\u4e86\u8ba9\u4f60\u7684\u7a0b\u5e8f\u8dd1\u7684\u66f4\u5feb\u6216\u66f4\u8282\u7701\u8d44\u6e90, \u4f46\u5b83\u548c \"\u751f\u6210\u4e2d\u95f4\u4ee3\u7801\" \u8fd9\u4e00\u9636\u6bb5\u4e00\u6837, \u5bf9\u4e8e\u7f16\u8bd1\u5668\u800c\u8a00\u90fd\u662f\u53ef\u9009\u7684. \u7b2c 6 \u9636\u6bb5 \"\u4ee3\u7801\u751f\u6210\", \u5b83\u7684\u7ed3\u679c\u53ef\u4ee5\u662f\u591a\u79cd\u591a\u6837\u7684. \u4e0a\u9762\u5df2\u7ecf\u4ecb\u7ecd\u8fc7, \u53ef\u4ee5\u662f\u673a\u5668\u7801, \u865a\u62df\u673a\u5b57\u8282\u7801\u751a\u81f3\u662f\u53e6\u4e00\u95e8\u9ad8\u7ea7\u8bed\u8a00. \u6211\u66fe\u770b\u8fc7\u4e00\u95e8\u6bd4\u8f83\u6709\u8da3\u7684\u8bed\u8a00, \u8fd9\u95e8\u8bed\u8a00\u7684\u540d\u5b57\u53eb\u505a Nim. \u5b83\u6709\u8da3\u7684\u5730\u65b9\u5728\u4e8e, \u5b83\u7684\u7f16\u8bd1\u5668\u53ef\u4ee5\u5c06 Nim \u6e90\u4ee3\u7801\u7f16\u8bd1\u4e3a C \u8bed\u8a00\u4ee3\u7801, JS \u4ee3\u7801, OC \u4ee3\u7801\u7b49, \u7136\u540e\u518d\u4f7f\u7528\u5bf9\u5e94\u7684 gcc \u7f16\u8bd1\u5668\u6216 nodejs \u89e3\u91ca\u5668\u8fd0\u884c\u4ee3\u7801. \u5728\u89c1\u5230\u8fd9\u95e8\u8bed\u8a00\u4e4b\u524d, \u6211\u5176\u5b9e\u5e76\u4e0d\u77e5\u9053\u7f16\u8bd1\u5668\u771f\u7684\u53ef\u4ee5\u8fd9\u4e48\u505a. \u5f53\u7136\u4e86, \u5230\u540e\u9762\u518d\u89c1\u5230 TypeScript \u6216 CoffeeScript \u8fd9\u4e9b\u7f16\u8bd1\u5230 JS \u7684\u7f16\u8bd1\u5668\u4e5f\u5c31\u4e60\u60ef\u4e86. \u8bcd\u6cd5\u5206\u6790 \u901a\u5e38\u800c\u8a00, \u7f16\u8bd1\u5668\u7684\u7b2c\u4e00\u9879\u5de5\u4f5c\u53eb\u505a\u8bcd\u6cd5\u5206\u6790. \u5f53\u4f60\u9605\u8bfb\u82f1\u6587\u53e5\u5b50\u65f6, \u4f60\u4f1a\u4e60\u60ef\u6027\u7684\u5c06\u53e5\u5b50\u5206\u4e3a\u4e00\u4e2a\u4e2a\u5355\u8bcd, \u5e76\u9010\u4e2a\u7406\u89e3\u6bcf\u4e2a\u5355\u8bcd\u7684\u542b\u4e49. \u5728\u7f16\u8bd1\u5668\u4e2d, \u6211\u4eec\u4f7f\u7528 Token \u6765\u4ee3\u8868\u8fd9\u4e9b\u5355\u8bcd, \u6216\u8005\u4e2d\u6587\u540d\u53eb \"\u8bcd\u6cd5\u8bb0\u53f7\". \u4e3e\u4e2a\u4f8b\u5b50, \u4ee5\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u4e3a\u4f8b: var a = \"10\" + 1; \u5982\u679c\u5c06\u5b83\u5206\u5272\u4e3a\u4e00\u4e2a\u4e00\u4e2a Token, \u90a3\u4e48\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a\u5982\u4e0b\u7684 Token \u5217\u8868: [\"var\", \"a\", \"=\", \"10\", \"+\", \"1\"] \u5b83\u5f88\u7b80\u5355, \u53ea\u9700\u8981\u6309\u7167\u7a7a\u683c\u5206\u5272\u8fd9\u53e5\u8868\u8fbe\u5f0f\u5c31\u53ef\u4ee5\u4e86. \u4f46\u662f, \u4e8b\u5b9e\u771f\u7684\u5c31\u8fd9\u4e48\u7b80\u5355\u5417? \u6765\u770b\u4e0b\u4e0b\u9762\u7684\u51e0\u884c\u4ee3\u7801: var a=\"10\"+1; var b =\"10\"-1; var c= \"10\" + 1; \u53ef\u4ee5\u770b\u5230, \u64cd\u4f5c\u7b26\u65c1\u8fb9\u7684\u7a7a\u683c\u5c31\u50cf\u859b\u5b9a\u8c14\u7684\u732b\u4e00\u6837, \u65f6\u6709\u65f6\u65e0, \u4f46\u4f60\u4e0d\u80fd\u5bf9\u5199\u51fa\u8fd9\u4e9b\u4ee3\u7801\u7684\u5f00\u53d1\u8005\u8bf4\u4ec0\u4e48, \u56e0\u4e3a\u8fd9\u4e9b\u786e\u5b9e\u662f\u7b26\u5408 TypeScript \u8bed\u6cd5\u7684\u4ee3\u7801. \u8fd9\u4e2a\u65f6\u5019\u5c31\u4e0d\u80fd\u7b80\u5355\u7684\u6309\u7167\u7a7a\u683c\u5206\u5272\u4ee3\u7801\u4e86. \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898, \u6709\u5f88\u591a\u79cd\u7b56\u7565. \u4f60\u5982\u679c\u7ffb\u9605\u8fc7\u76f8\u5173\u53c2\u8003\u8d44\u6599, \u5927\u81f4\u4e0a\u4f1a\u627e\u5230\u4e0d\u5c11. \u603b\u7684\u6765\u8bf4\u6709\u4e24\u79cd\u65b9\u6cd5, \u4e00\u79cd\u662f\u79fb\u9664\u5168\u90e8\u65e0\u7528\u7684\u7a7a\u683c, \u4e00\u79cd\u662f\u5c06\u539f\u672c\u7f3a\u5c11\u7a7a\u683c\u7684\u4ee3\u7801 \"\u5c55\u5f00\". \u4e24\u79cd\u65b9\u5f0f\u90fd\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898, \u5c31 minits \u8fd9\u4e2a\u9879\u76ee\u800c\u8a00, \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u91c7\u7528\u7684\u65b9\u5f0f\u662f\u79fb\u9664\u5168\u90e8\u65e0\u7528\u7684\u7a7a\u683c. \u867d\u7136\u5b9e\u9645\u4ee3\u7801\u6bd4\u4e0a\u9762\u6240\u8bf4\u7684\u590d\u6742, \u4f46\u5927\u4f53\u4e0a\u5c31\u662f\u5982\u6b64. \u8bed\u6cd5\u5206\u6790 \u8bcd\u6cd5\u5206\u6790\u7684\u4e0b\u4e00\u4e2a\u9636\u6bb5\u662f\u8bed\u6cd5\u5206\u6790. \u5982\u679c\u662f\u8bcd\u6cd5\u5206\u6790\u662f\u8bc6\u522b\u4e00\u4e2a\u4e00\u4e2a\u5355\u8bcd\u7684\u8bdd, \u90a3\u8bed\u6cd5\u5206\u6790\u5c31\u662f\u8bc6\u522b\u4e00\u4e2a\u4e00\u4e2a\u53e5\u5b50. \u6211\u4eec\u5728\u5c0f\u65f6\u5019\u5b66\u4e60\u8bed\u6587\u6216\u8005\u82f1\u6587\u7684\u65f6\u5019, \u5e94\u8be5\u90fd\u5b66\u4e60\u8fc7\u6240\u8c13\u7684\u4e3b\u8c13\u5bbe\u5b9a\u72b6\u8865, \u8fd9\u4e9b\u5c31\u662f\u53e5\u5b50\u7684\u8bed\u6cd5\u7ed3\u6784. \u5728\u7f16\u8bd1\u5668\u4e2d, \u6e90\u4ee3\u7801\u901a\u5e38\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u6811\u72b6\u7ed3\u6784, \u5728\u505a\u8bed\u6cd5\u5206\u6790\u65f6\u5e38\u7528\u7684\u6280\u672f\u624b\u6bb5\u662f\u9012\u5f52\u4e0b\u964d\u548c\u589e\u91cf\u5206\u6790. \u9012\u5f52\u4e0b\u964d\u7b97\u6cd5\u57fa\u672c\u601d\u60f3\u662f: \u81ea\u9876\u5411\u4e0b \u6bcf\u4e2a\u975e\u7ec8\u7ed3\u7b26\u6784\u9020\u4e00\u4e2a\u5206\u6790\u51fd\u6570. \u524d\u5411\u9884\u6d4b \u9012\u5f52\u4e0b\u964d\u7684\u57fa\u672c\u7b97\u6cd5\u662f\u4e3a\u6bcf\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u6784\u5efa\u4e00\u4e2a parse \u51fd\u6570, \u4f2a\u4ee3\u7801\u53ef\u4ee5\u8868\u793a\u4e3a\u5982\u4e0b\u5f62\u5f0f: parse_statement() parse_statement_variable_declare() parse_statement_if() parse_expression() ... parse_statement_if() cond = parse_expression() thenBody = parse_statement() elseBody = parse_statement() \u89e3\u6790\u4e00\u4e2a\u8868\u8fbe\u5f0f\u65f6, \u53ef\u4ee5 \"\u9884\u5148\" \u8bfb\u53d6\u4e0b\u4e00\u4e2a Token, \u5224\u65ad\u8be5\u8868\u8fbe\u5f0f\u7684\u5177\u4f53\u7c7b\u578b, \u7136\u540e\u8c03\u7528\u5177\u4f53\u7684 parse \u51fd\u6570; \u540c\u65f6, \u5b50 parse \u51fd\u6570\u4e5f\u53ef\u4ee5\u9012\u5f52\u8c03\u7528\u7236 parse \u51fd\u6570. \u7a0b\u5e8f\u7684\u8bed\u6cd5\u5206\u6790\u8fc7\u7a0b, \u5c31\u662f\u6784\u9020\u4e00\u68f5\u62bd\u8c61\u8bed\u6cd5\u6811(AST)\u7684\u8fc7\u7a0b. \u6811\u7684\u6bcf\u4e2a\u8282\u70b9(\u5b50\u6811)\u662f\u4e00\u4e2a\u8bed\u6cd5\u5355\u5143, \u8fd9\u4e2a\u5355\u5143\u7684\u6784\u6210\u89c4\u5219\u5c31\u53eb \"\u8bed\u6cd5\". \u6bcf\u4e2a\u8282\u70b9\u8fd8\u53ef\u4ee5\u6709\u4e0b\u7ea7\u8282\u70b9. \u63a5\u4e0b\u6765, \u6211\u4eec\u76f4\u89c2\u5730\u770b\u4e00\u4e0b\u62bd\u8c61\u8bed\u6cd5\u6811\u957f\u4ec0\u4e48\u6837\u5b50. \u4e0b\u9762\u7684\u56fe\u7247\u662f TypeScript \u5b9e\u73b0\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5217\u6e90\u7801\u7684\u62bd\u8c61\u8bed\u6cd5\u6811. https://ts-ast-viewer.com/ \u8bed\u4e49\u5206\u6790 \u8bcd\u6cd5\u5206\u6790, \u8bed\u6cd5\u5206\u6790\u7684\u4e0b\u4e00\u6b65\u662f\u8fdb\u884c\u8bed\u4e49\u5206\u6790. \u8bed\u4e49\u5206\u6790\u5c31\u662f\u8bc6\u522b\u4e00\u7bc7\u6587\u7ae0, \u5173\u8054\u6587\u7ae0\u7684\u4e0a\u4e0b\u6587, \u7406\u89e3\u6587\u7ae0\u7684\u610f\u56fe, \u540c\u65f6\u5982\u679c\u6587\u7ae0\u4e2d\u6709\u54ea\u4e9b\u725b\u5934\u4e0d\u5bf9\u9a6c\u5634\u7684\u5730\u65b9\u4e5f\u8981\u53ca\u65f6\u63d0\u9192\u4f5c\u8005. \u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50: \u7c7b\u578b let a = 10; let b: number = 10; \u6211\u4eec\u4e3a\u4e24\u4e2a\u53d8\u91cf\u90fd\u8fdb\u884c\u4e86\u8d4b\u503c, \u4f46\u533a\u522b\u5728\u4e8e\u5728\u5bf9 a \u8fdb\u884c\u8d4b\u503c\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u663e\u793a\u6307\u660e\u5b83\u7684\u7c7b\u578b. \u5f53\u6211\u4eec\u5728\u8fdb\u884c\u8bed\u6cd5\u5206\u6790\u7684\u65f6\u5019, Token \u662f\u4e00\u4e2a\u4e00\u4e2a\u88ab\u8bfb\u53d6\u7684, \u6362\u53e5\u8bdd\u8bf4\u5f53\u89e3\u6790\u5230 \"let a\" \u7684\u65f6\u5019, a \u53d8\u91cf\u7684\u7c7b\u578b\u662f\u4e0d\u786e\u5b9a\u7684, a \u53d8\u91cf\u7684\u7c7b\u578b\u5c06\u6839\u636e\u7b49\u53f7\u540e\u9762\u7684\u8868\u8fbe\u5f0f\u51b3\u5b9a. TypeScript \u4e2d\u8d1f\u8d23\u5bf9\u53d8\u91cf\u7c7b\u578b\u8fdb\u884c\u68c0\u67e5\u548c\u63a8\u5bfc\u7684\u6a21\u5757\u53eb TypeChecker, TypeChecker \u9664\u4e86\u7ef4\u62a4\u7c7b\u578b\u4e4b\u5916, \u540c\u65f6\u8fd8\u7ef4\u62a4\u4e86\u51fd\u6570\u548c\u7c7b\u7684\u7b7e\u540d. \u7b26\u53f7\u8868\u4e0e\u4f5c\u7528\u57df . \u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\u5c06\u6253\u5370\u51fa 10 \u8fd8\u662f 20? let a = 10; for (;;) { let a = 20; console.log(a); } \u53d8\u91cf, \u51fd\u6570, \u7c7b\u7684\u91cd\u590d\u5b9a\u4e49\u68c0\u67e5 . \u6bcf\u4e00\u884c\u4ee3\u7801\u5355\u72ec\u770b\u90fd\u662f\u6b63\u786e\u7684, \u4f46\u4f60\u4e0d\u80fd\u628a\u5b83\u4eec\u5199\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc. function a() {} function a() {} \u8bed\u4e49\u5206\u6790\u5de5\u4f5c\u7684\u67d0\u4e9b\u7ed3\u679c\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u6807\u6ce8\u5728\u62bd\u8c61\u8bed\u6cd5\u6811\u4e0a, \u6bd4\u5982\u4e0a\u8ff0\u63d0\u5230\u7684\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b. \u751f\u6210\u4e2d\u95f4\u4ee3\u7801 \u4f20\u7edf\u7f16\u8bd1\u5668\u6700\u6d41\u884c\u7684\u8bbe\u8ba1\u662f\u4e09\u9636\u6bb5\u8bbe\u8ba1\uff0c\u5176\u4e3b\u8981\u7ec4\u4ef6\u662f\u524d\u7aef, \u4f18\u5316\u5668, \u540e\u7aef. \u524d\u7aef\u89e3\u6790\u6e90\u4ee3\u7801, \u68c0\u67e5\u5b83\u662f\u5426\u6709\u9519\u8bef, \u5e76\u6784\u5efa\u4e00\u4e2a\u7279\u5b9a\u4e8e\u8bed\u8a00\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\u6765\u8868\u793a\u8f93\u5165\u4ee3\u7801. \u4f18\u5316\u5668\u8d1f\u8d23\u8fdb\u884c\u5404\u79cd\u5404\u6837\u7684\u8f6c\u6362\u4ee5\u52aa\u529b\u6539\u8fdb\u4ee3\u7801\u7684\u8fd0\u884c\u65f6\u95f4, \u4f8b\u5982\u6d88\u9664\u5197\u4f59\u8ba1\u7b97, \u5e76\u4e14\u901a\u5e38\u4ed6\u4eec\u7684\u7b97\u6cd5\u548c\u5b9e\u73b0\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\u6216\u76ee\u6807\u673a\u5668\u67b6\u6784. \u7136\u540e, \u540e\u7aef(\u4e5f\u79f0\u4e3a\u4ee3\u7801\u751f\u6210\u5668)\u5c06\u4ee3\u7801\u6620\u5c04\u5230\u76ee\u6807\u6307\u4ee4\u96c6. \u7f16\u8bd1\u5668\u540e\u7aef\u7684\u516c\u5171\u90e8\u5206\u5305\u62ec\u6307\u4ee4\u9009\u62e9, \u5bc4\u5b58\u5668\u5206\u914d\u548c\u6307\u4ee4\u8c03\u5ea6. LLVM \u662f\u4e00\u4e2a\u6a21\u5757\u5316\u7684\u7f16\u8bd1\u5668\u5957\u4ef6, \u5b83\u540c\u6837\u9075\u5faa\u4e0a\u9762\u7684\u51e0\u4e2a\u539f\u5219, \u4f46\u5b83\u6700\u4f1f\u5927\u7684\u8d21\u732e\u5728\u4e8e\u63d0\u51fa\u4e86\u901a\u7528\u4e2d\u95f4\u8bed\u8a00\u8868\u793a, \u4e5f\u5c31\u662f LLVM IR. \u4f46\u5176\u5b9e\u5728 LLVM \u4e4b\u524d, \u7edd\u5927\u90e8\u5206\u7f16\u8bd1\u5668\u90fd\u6709\u81ea\u5df1\u7684\u4e2d\u95f4\u8868\u793a, \u4f46\u7f3a\u70b9\u662f\u5b83\u4eec\u8981\u4e48\u975e\u901a\u7528, \u8981\u4e48\u6ca1\u4eba\u7528. \u5927\u90e8\u5206\u540e\u7aef\u4f18\u5316, \u6bd4\u5982\u6d88\u9664\u5197\u4f59\u4ee3\u7801, \u5b83\u4eec\u7684\u7b97\u6cd5\u662f\u76f8\u540c\u7684, \u4f46\u5728 LLVM \u4e4b\u524d\u5b83\u4eec\u8981\u5728\u4e0d\u540c\u7684\u8bed\u8a00\u4e0a\u5404\u81ea\u5b9e\u73b0\u4e00\u904d. \u6709\u4e00\u4e9b\u5e38\u89c1\u7684\u4e2d\u95f4\u8bed\u8a00\u8868\u793a, \u6bd4\u5982 GCC, \u5b83\u4e3a\u4e86\u652f\u6301\u4e0d\u540c\u786c\u4ef6\u5e73\u53f0, \u5b83\u5185\u90e8\u7684\u8bb8\u591a\u7f16\u8bd1\u9636\u6bb5\u5fc5\u987b\u505a\u5230\u786c\u4ef6\u65e0\u5173\u6027, \u56e0\u6b64\u5185\u90e8\u4f7f\u7528\u4e86\u4e00\u79cd\u786c\u4ef6\u5e73\u53f0\u65e0\u5173\u7684\u8bed\u8a00 RTL. \u53e6\u5916, Java \u5b57\u8282\u7801\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u79cd\u4e2d\u95f4\u8bed\u8a00, \u5b83\u8fd0\u884c\u5728 JVM \u4e0a. \u7f16\u8bd1\u6210\u4e2d\u95f4\u8bed\u8a00\u6709\u5f88\u591a\u4f18\u52bf, \u4e00\u662f\u4f18\u5316, \u5927\u90e8\u5206\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u9636\u6bb5\u90fd\u662f\u5bf9\u4e2d\u95f4\u8bed\u8a00\u8fdb\u884c\u4f18\u5316, \u518d\u5c06\u5176\u8f6c\u6362\u6210\u673a\u5668\u6307\u4ee4, \u56e0\u6b64\u4f60\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u9488\u5bf9\u4e2d\u95f4\u8bed\u8a00\u7684\u4f18\u5316\u5668, \u800c\u4e0d\u662f\u5bf9\u6bcf\u4e2a\u786c\u4ef6\u5e73\u53f0\u5199\u5bf9\u5e94\u7684\u4f18\u5316\u5668; \u5176\u4e8c\u662f\u53ef\u4ee5\u5b9e\u73b0\u8de8\u5e73\u53f0, \u9488\u5bf9\u540c\u4e00\u79cd\u4e2d\u95f4\u8bed\u8a00, \u4e0d\u540c\u5e73\u53f0\u7684\u7f16\u8bd1\u5668\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u6210\u4e0e\u8be5\u5e73\u53f0\u517c\u5bb9\u7684\u4e8c\u8fdb\u5236\u6307\u4ee4. \u4ece\u800c\u4f7f\u5f97\u4e00\u79cd\u6e90\u7a0b\u5e8f\u4ee3\u7801\u53ef\u4ee5\u8fd0\u884c\u5230\u4e0d\u540c\u7684\u786c\u4ef6\u5e73\u53f0\u4e0a. \u6211\u4f1a\u7528\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u6765\u5c55\u793a\u4e00\u4e0b LLVM IR \u7684\u6837\u8c8c, \u8fd9\u6bb5\u4ee3\u7801\u662f\u7528 TypeScript \u5199\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5217\u5b9e\u73b0: function fibo(n: number): number { if (n < 2) { return n; } return fibo(n - 1) + fibo(n - 2); } \u4e0b\u9762\u662f\u5c06\u5176\u4f7f\u7528 minits \u7f16\u8bd1\u5230 LLVM IR \u540e\u7684\u7ed3\u679c. \u53ef\u4ee5\u770b\u5230, LLVM IR \u770b\u8d77\u6765\u50cf\u662f\u4e00\u79cd\u4ecb\u4e8e\u9ad8\u7ea7\u8bed\u8a00\u548c\u6c47\u7f16\u4ee3\u7801\u4e4b\u95f4\u7684\u5d4c\u5408\u4f53. define i64 @fibo(i64 %n) { body: %0 = icmp slt i64 %n, 2 br i1 %0, label %if.then, label %if.else if.then: ; preds = %body ret i64 %n if.else: ; preds = %body br label %if.quit if.quit: ; preds = %if.else %1 = sub i64 %n, 1 %2 = call i64 @fibo(i64 %1) %3 = sub i64 %n, 2 %4 = call i64 @fibo(i64 %3) %5 = add i64 %2, %4 ret i64 %5 } \u5bf9\u4e8e minits \u9879\u76ee\u6765\u8bf4, \u8fd9\u4e00\u9636\u6bb5\u7684\u5de5\u4f5c\u662f\u5c06\u4e0a\u9762\u51e0\u6b65\u5f97\u5230\u7684 AST \u8f6c\u6362\u4e3a LLVM IR. minits \u4f7f\u7528\u4e86 LLVM \u7684 TypeScript \u7ed1\u5b9a, \u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 LLVM \u7684 API \u6765\u751f\u6210 LLVM IR. \u6bd4\u5982\u5982\u4e0b\u8fd9\u6bb5 TypeScript \u4ee3\u7801\u6f14\u793a\u4e86\u4e00\u4e2a\u52a0\u6cd5\u64cd\u4f5c let a = 1; let b = 2; let c = a + b; \u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 LLVM API \u6765\u5c06\u5176\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684 LLVM IR. \u8fd9\u4e00\u90e8\u5206\u7684\u539f\u7406\u5e76\u4e0d\u96be, \u4e8b\u5b9e\u4e0a\u6574\u4e2a minits \u9879\u76ee\u5927\u90e8\u5206\u90fd\u5728\u505a\u8fd9\u4ef6\u5de5\u4f5c: \u5c06 TypeScript \u7684\u62bd\u8c61\u8bed\u6cd5\u6811\u8f6c\u6362\u4e3a LLVM IR. let lhs = llvm.ConstantInt.get(llvmContext, 1, 64); let rhs = llvm.ConstantInt.get(llvmContext, 2, 64); let r = llvmBuilder.createAdd(lhs, rhs); \u4f18\u5316/\u4ee3\u7801\u751f\u6210 \u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u8ba4\u4e3a\u7b80\u5355\u7684\u65b9\u6848\u5f80\u5f80\u6bd4\u590d\u6742\u7684\u65b9\u6848\u66f4\u6709\u6548: \u56e0\u6b64\u6211\u4eec\u51b3\u5b9a\u590d\u7528\u6574\u4e2a Clang \u7f16\u8bd1\u5668. \u5f53 minits \u7f16\u8bd1\u5f97\u5230 LLVM IR \u540e, \u5c06 LLVM IR \u6295\u5582\u7ed9 Clang \u7f16\u8bd1\u5668, \u53ef\u4ee5\u5b9e\u73b0\u5b8c\u5168\u590d\u7528 Clang \u7684 IR \u4f18\u5316\u548c\u5bf9\u5e94\u786c\u4ef6\u5e73\u53f0\u7684\u4ee3\u7801\u751f\u6210: \u8fd9\u4f7f\u5f97 minits \u53ef\u4ee5\u8fd0\u884c\u5728 x86, arm, \u751a\u81f3\u662f riscv \u67b6\u6784\u4e0a. \u5728\u7a0d\u540e\u6211\u5c06\u5b9e\u9645\u6f14\u793a\u4e00\u904d. \u6f14\u793a \u8fd9\u662f\u672c\u573a\u6f14\u8bb2\u7684\u6700\u540e\u4e00\u4e2a\u91cd\u8981\u4efb\u52a1, \u8fdb\u884c minits \u6f14\u793a. \u8981\u6f14\u793a\u7684\u9879\u76ee\u662f\u4f7f\u7528 minits \u7f16\u5199\u7684 brainfuck \u89e3\u91ca\u5668. Brainfuck \u662f\u4e00\u79cd\u6781\u5c0f\u5316\u7684\u7a0b\u5e8f\u8bed\u8a00, \u5176\u672c\u8d28\u662f\u4e00\u4e2a\u56fe\u7075\u7eb8\u5e26\u673a. \u8fd9\u79cd\u8bed\u8a00\u7531\u516b\u79cd\u8fd0\u7b97\u7b26\u6784\u6210: \u5b57\u7b26 \u542b\u4e49 > \u6307\u9488\u52a0\u4e00 < \u6307\u9488\u51cf\u4e00 + \u6307\u9488\u6307\u5411\u7684\u5b57\u8282\u7684\u503c\u52a0\u4e00 - \u6307\u9488\u6307\u5411\u7684\u5b57\u8282\u7684\u503c\u51cf\u4e00 . \u8f93\u51fa\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u5185\u5bb9(ASCII\u7801) , \u8f93\u5165\u5185\u5bb9\u5230\u6307\u9488\u6307\u5411\u7684\u5355\u5143(ASCII\u7801) [ \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e3a\u96f6, \u5411\u540e\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684]\u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 ] \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e0d\u4e3a\u96f6, \u5411\u524d\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684[\u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 \u6bd4\u5982\u5982\u4e0b\u8fd9\u6bb5\u6e90\u7801\u5728 Brainfuck \u89e3\u91ca\u5668\u4e2d\u5c06\u6253\u5370\u51fa \"Hello World!\" ++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>. \u6765\u770b\u4e00\u4e0b\u4f7f\u7528 TypeScript \u7f16\u5199 Brainfuck \u89e3\u91ca\u5668\u7684\u6e90\u7801: \u5728\u6e90\u7801\u4e2d\u9996\u5148\u4f7f\u7528\u679a\u4e3e\u7c7b\u65b0\u5b9a\u4e49\u4e86 8 \u79cd\u64cd\u4f5c\u7b26, \u7136\u540e\u5728 main \u51fd\u6570\u4e2d\u63a5\u6536 Brainfuck \u6e90\u4ee3\u7801, \u5e76\u5728\u5faa\u73af\u4e2d\u9010\u4e2a\u5b57\u7b26\u8fdb\u884c\u89e3\u91ca\u6267\u884c: const enum Opcode { SHR = '>', SHL = '<', ADD = '+', SUB = '-', PUTCHAR = '.', GETCHAR = ',', LB = '[', RB = ']', } function uint8(n: number): number { if (n > 0xff) { return uint8(n - 256); } if (n < 0x00) { return uint8(n + 256); } return n } function main(argc: number, argv: string[]): number { if (argc !== 2) { return 1; } let pc = 0; let ps = 0; // pre generated space: stack and src. let stack = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]; let srclet arg1 = argv[1]; for (let i = 0; i < arg1.length; i++) { src[i] = arg1[i]; } for (; pc < arg1.length;) { let op = src[pc]; if (op === Opcode.SHR) { ps += 1; pc += 1; continue } if (op === Opcode.SHL) { ps -= 1; pc += 1; continue } if (op === Opcode.ADD) { stack[ps] = uint8(stack[ps] + 1); pc += 1; continue } if (op === Opcode.SUB) { stack[ps] = uint8(stack[ps] - 1); pc += 1; continue } if (op === Opcode.PUTCHAR) { console.log('%c', stack[ps]); pc += 1; continue } if (op === Opcode.GETCHAR) { console.log('GETCHAR is disabled'); return 1; } if (op === Opcode.LB) { if (stack[ps] != 0x00) { pc += 1; continue } let n = 1; for (; n !== 0;) { pc += 1; if (src[pc] === Opcode.LB) { n += 1; continue } if (src[pc] === Opcode.RB) { n -= 1; continue } } pc += 1; continue } if (op === Opcode.RB) { if (stack[ps] === 0x00) { pc += 1; continue } let n = 1; for (; n !== 0;) { pc -= 1; if (src[pc] === Opcode.RB) { n += 1; continue } if (src[pc] === Opcode.LB) { n -= 1; continue } } pc += 1; continue } } return 0; } \u7f16\u8bd1\u9636\u6bb5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206, \u5206\u522b\u662f\u4f7f\u7528 minits \u7f16\u8bd1 TypeScript \u6e90\u7801\u5f97\u5230 LLVM IR, \u7136\u540e\u4f7f\u7528 Clang \u7f16\u8bd1 LLVM IR \u5f97\u5230\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6. \u6700\u540e\u5b9e\u9645\u6d4b\u8bd5\u4e00\u4e0b\u6211\u4eec\u7f16\u5199\u7684\u89e3\u91ca\u5668, \u6d4b\u8bd5\u4ee3\u7801\u662f\u4e00\u6bb5\u8c22\u5c14\u5bbe\u65af\u57fa\u4e09\u89d2\u5f62. $ cd minits $ ts-node src/index.ts build examples/brainfuck.ts -o brainfuck.ll $ clang brainfuck.ll -o brainfuck $ ./brainfuck \">++++[<++++++++>-]>++++++++[>++++<-]>>++>>>+>>>+<<<<<<<<<<[-[->+<]>[-<+>>>.<<]>>>[[->++++++++[>++++<-]>.<<[->+<]+>[->++++++++++<<+>]>.[-]>]]+<<<[-[->+<]+>[-<+>>>-[->+<]++>[-<->]<<<]<<<<]++++++++++.+++.[-]<]+++++\" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \u5b83\u6210\u529f\u4e86! \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u4ee5 Brainfuck \u4f5c\u4e3a minits \u7684 Hello World \u9879\u76ee, \u5176\u5b9e\u5f88\u7b80\u5355, \u56e0\u4e3a Brainfuck \u662f\u4e00\u4e2a\u6700\u5c0f\u7684\u56fe\u7075\u673a\u5b9e\u73b0, \u56e0\u6b64, minits \u7f16\u8bd1\u5668\u76ee\u524d\u662f\u56fe\u7075\u5b8c\u5907\u7684. \u9879\u76ee\u8fdb\u5ea6 \u5df2\u5168\u90e8\u5f00\u6e90. \u5730\u5740: https://github.com/cryptape/minits \u5df2\u5b9e\u73b0\u5927\u90e8\u5206 TypeScript \u8fc7\u7a0b\u5f0f\u7f16\u7a0b\u8bed\u6cd5 \u7cfb\u7edf\u8c03\u7528 syscall \u521d\u6b65\u5b8c\u6210 \u56fe\u7075\u5b8c\u5907 Fin Thanks for you listening and sleeping! \u656c\u5177.","title":"minits, \u4ee5 LLVM \u4e3a\u540e\u7aef\u7684 TypeScript \u9759\u6001\u7f16\u8bd1\u5668"},{"location":"content/speech/minits/#minits-llvm-typescript","text":"\u65f6\u95f4: 2019-11-03 \u5730\u70b9: 2019 \u4e2d\u56fd\u5f00\u6e90\u5e74\u4f1a(COSCon'19), \u534e\u4e1c\u5e08\u8303\u5927\u5b66 \u4e3b\u8bb2: \u81ea\u5df1 Hello, \u5927\u5bb6\u4e0b\u5348\u597d! \u6b22\u8fce\u53c2\u52a0\u6709\u5173 minits \u7f16\u8bd1\u5668\u7684\u4e3b\u9898\u6f14\u8bb2, \u6211\u53eb\u53f6\u4e07\u6807, \u4e5f\u5e38\u7528\u82f1\u6587\u540d mohanson, \u662f\u4e00\u4e2a\u865a\u62df\u673a\u4e0e\u7f16\u8bd1\u5668\u7684\u7231\u597d\u8005. \u5148\u7b80\u5355\u4ecb\u7ecd\u4e0b\u81ea\u5df1, \u6211\u5bf9\u4e00\u4e9b\u53e4\u8463\u673a\u5668\u6bd4\u8f83\u611f\u5174\u8da3, \u66fe\u5199\u8fc7\u4e0a\u4e16\u7eaa 70 \u5e74\u4ee3\u7684\u96c5\u8fbe\u5229\u8857\u673a\u6a21\u62df\u5668, \u4efb\u5929\u5802\u7684 Game Boy \u6a21\u62df\u5668, \u82f1\u7279\u5c14\u7684 4004 \u548c 8080 CPU \u6a21\u62df\u5668\u7b49, \u5f53\u7136\u6211\u4e5f\u4e0d\u4e00\u76f4\u505a\u8fd9\u4e9b\u8003\u53e4\u5de5\u4f5c, \u50cf\u76ee\u524d\u6bd4\u8f83\u706b\u70ed\u7684 WebAssembly \u6280\u672f, \u5176\u865a\u62df\u5668\u7684 Python \u5b9e\u73b0 \"pywasm\", \u6211\u5c31\u662f\u5176\u4e3b\u8981\u4f5c\u8005. \u6211\u4eec\u63a5\u4e0b\u6765\u5c06\u8c08\u8bba\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u7f16\u8bd1\u5668\u6216\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00. \u8fd9\u4e2a\u5185\u5bb9\u6216\u8bb8\u6709\u70b9\u4e25\u8083, \u4e8b\u5b9e\u4e0a, \u5f53\u6211\u6700\u521d\u51c6\u5907\u6f14\u8bb2\u5185\u5bb9\u7684\u65f6\u5019, \u60f3\u6cd5\u662f\u4ecb\u7ecd minits \u8fd9\u4e2a\u9879\u76ee\u672c\u8eab: \u5373\u5b83\u7684\u8bbe\u8ba1, \u601d\u8def, \u4ee3\u7801\u5b9e\u73b0\u6216\u4f7f\u7528. minits \u7684\u8bbe\u8ba1\u76ee\u6807\u662f\u5c06 TypeScript \u4ece\u6d4f\u89c8\u5668\u6216\u8005 NodeJS \u4e2d\u89e3\u653e\u51fa\u6765. \u4f46\u540e\u6765\u6211\u53d1\u73b0 minits \u5b83\u672c\u8eab\u592a\u666e\u901a\u4e86, \u5b83\u4e0e\u73b0\u4ee3\u7f16\u8bd1\u5668\u4eec: \u6bd4\u5982 Clang \u6216 Rust \u6ca1\u6709\u592a\u591a\u7684\u533a\u522b, \u5e76\u4e14\u8fdc\u4e0d\u5982\u8fd9\u4e9b\u6210\u719f\u7684\u7f16\u8bd1\u5668\u4f18\u79c0\u548c\u5b8c\u5584. \u56e0\u6b64\u6211\u51b3\u5b9a\u5728\u6b64\u65f6\u6b64\u5730\u66f4\u591a\u7684\u8bb2\u8bb2\u7f16\u8bd1\u5668\u672c\u8eab\u4ee5\u53ca minits \u7684\u5de5\u4f5c\u6d41\u7a0b. \u5e0c\u671b\u53ef\u4ee5\u8ba9\u66f4\u591a\u7684\u5c0f\u4f19\u4f34\u5bf9\u7f16\u8bd1\u5668\u4e0d\u518d\u611f\u5230\u964c\u751f.","title":"minits: \u4ee5 LLVM \u4e3a\u540e\u7aef\u7684 TypeScript \u9759\u6001\u7f16\u8bd1\u5668"},{"location":"content/speech/minits/#_1","text":"\u901a\u5e38\u6765\u8bb2, \u6709\u4e24\u79cd\u4e3b\u8981\u7684\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00: \u89e3\u91ca\u5668 \u7f16\u8bd1\u5668 \u5bf9\u4e8e\u89e3\u91ca\u5668\u6765\u8bf4, \u5b83\u63a5\u6536\u60a8\u7f16\u5199\u7684\u7a0b\u5e8f\u6e90\u4ee3\u7801\u548c\u8f93\u5165\u6570\u636e, \u7136\u540e\u89e3\u91ca\u5668\u5f00\u59cb\u8fd0\u884c\u5e76\u4ea7\u751f\u8f93\u51fa. \u5728\u8fd9\u4e2a\u5de5\u4f5c\u6d41\u7a0b\u4e0b, \u89e3\u91ca\u5668\u662f\u53c2\u4e0e\u7a0b\u5e8f\u8fd0\u884c\u7684, \u56e0\u6b64\u53ef\u4ee5\u79f0\u89e3\u91ca\u5668\u662f online \u7684. \u5bf9\u4e8e\u7f16\u8bd1\u5668\u6765\u8bf4\u60c5\u51b5\u6709\u70b9\u4e0d\u540c. \u7f16\u8bd1\u5668\u662f\u4e00\u79cd\u5c06\u6e90\u8bed\u8a00\u7ffb\u8bd1\u4e3a\u53e6\u4e00\u79cd\u8bed\u4e49\u4e0a\u7b49\u4ef7\u8bed\u8a00\u7684\u7a0b\u5e8f\u8f6f\u4ef6. \u5b83\u63a5\u6536\u7528\u6237\u7684\u6e90\u7801\u8f93\u5165, \u4f46\u5e76\u4e0d\u6267\u884c\u7528\u6237\u7684\u7a0b\u5e8f, \u800c\u662f\u5c06\u7528\u6237\u7684\u7a0b\u5e8f\u7ffb\u8bd1\u4e3a Target output. Target output \u53ef\u4ee5\u662f\u673a\u5668\u7801, \u865a\u62df\u673a\u5b57\u8282\u7801\u751a\u81f3\u662f\u53e6\u4e00\u95e8\u9ad8\u7ea7\u8bed\u8a00. \u4e3e\u4e24\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u8fd9\u51e0\u79cd\u60c5\u51b5, \u7b2c\u4e00\u4e2a\u4f8b\u5b50\u662f C \u8bed\u8a00, \u5b83\u7684\u7f16\u8bd1\u7ed3\u679c\u662f\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6, \u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d; \u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f Java, JDK \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u53eb javac \u7684\u7f16\u8bd1\u5668, \u8be5\u7f16\u8bd1\u5668\u7684\u7f16\u8bd1\u7ed3\u679c\u662f\u751f\u6210 Java \u5b57\u8282\u7801, \u5b83\u5fc5\u987b\u88ab\u8fd0\u884c\u5728 JVM \u4e2d. \u4e4b\u540e\u7528\u6237\u7684\u8f93\u5165\u6570\u636e\u5c06\u4e0e Target output \u4e00\u8d77\u534f\u540c\u4f5c\u7528\u4ea7\u751f Output. \u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u7f16\u8bd1\u5668\u662f\u79bb\u7ebf\u7684, \u5b83\u4e0d\u53c2\u4e0e\u6700\u540e\u751f\u6210\u8f93\u51fa Output \u7684\u8fc7\u7a0b. \u4e00\u4e2a\u5178\u578b\u7684\u7f16\u8bd1\u53ef\u80fd\u4f1a\u5305\u542b\u5982\u4e0b 6 \u4e2a\u9636\u6bb5: \u8bcd\u6cd5\u5206\u6790 \u8bed\u6cd5\u5206\u6790 \u8bed\u4e49\u5206\u6790 \u751f\u6210\u4e2d\u95f4\u4ee3\u7801(\u53ef\u9009\u7684) \u4f18\u5316(\u53ef\u9009\u7684) \u4ee3\u7801\u751f\u6210 \u524d 3 \u4e2a\u9636\u6bb5\u901a\u5e38\u88ab\u79f0\u4e3a\u7f16\u8bd1\u5668\u524d\u7aef, \u7b2c 4 \u4e2a\u9636\u6bb5\u88ab\u79f0\u4e3a\u524d\u7aef\u7684\u540e\u7aef, \u7b2c 5 \u4e2a\u9636\u6bb5\u88ab\u79f0\u4e3a\u4e2d\u7aef, \u7b2c 6 \u4e2a\u9636\u6bb5\u88ab\u79f0\u4e3a\u540e\u7aef. minits \u9879\u76ee\u7684\u4e3b\u8981\u5de5\u4f5c\u5c31\u96c6\u4e2d\u5728\u7b2c 4 \u9636\u6bb5 \"\u751f\u6210\u4e2d\u95f4\u4ee3\u7801\". \u5176\u4e2d\u7684\u4f18\u5316\u9636\u6bb5\u662f\u4e3a\u4e86\u8ba9\u4f60\u7684\u7a0b\u5e8f\u8dd1\u7684\u66f4\u5feb\u6216\u66f4\u8282\u7701\u8d44\u6e90, \u4f46\u5b83\u548c \"\u751f\u6210\u4e2d\u95f4\u4ee3\u7801\" \u8fd9\u4e00\u9636\u6bb5\u4e00\u6837, \u5bf9\u4e8e\u7f16\u8bd1\u5668\u800c\u8a00\u90fd\u662f\u53ef\u9009\u7684. \u7b2c 6 \u9636\u6bb5 \"\u4ee3\u7801\u751f\u6210\", \u5b83\u7684\u7ed3\u679c\u53ef\u4ee5\u662f\u591a\u79cd\u591a\u6837\u7684. \u4e0a\u9762\u5df2\u7ecf\u4ecb\u7ecd\u8fc7, \u53ef\u4ee5\u662f\u673a\u5668\u7801, \u865a\u62df\u673a\u5b57\u8282\u7801\u751a\u81f3\u662f\u53e6\u4e00\u95e8\u9ad8\u7ea7\u8bed\u8a00. \u6211\u66fe\u770b\u8fc7\u4e00\u95e8\u6bd4\u8f83\u6709\u8da3\u7684\u8bed\u8a00, \u8fd9\u95e8\u8bed\u8a00\u7684\u540d\u5b57\u53eb\u505a Nim. \u5b83\u6709\u8da3\u7684\u5730\u65b9\u5728\u4e8e, \u5b83\u7684\u7f16\u8bd1\u5668\u53ef\u4ee5\u5c06 Nim \u6e90\u4ee3\u7801\u7f16\u8bd1\u4e3a C \u8bed\u8a00\u4ee3\u7801, JS \u4ee3\u7801, OC \u4ee3\u7801\u7b49, \u7136\u540e\u518d\u4f7f\u7528\u5bf9\u5e94\u7684 gcc \u7f16\u8bd1\u5668\u6216 nodejs \u89e3\u91ca\u5668\u8fd0\u884c\u4ee3\u7801. \u5728\u89c1\u5230\u8fd9\u95e8\u8bed\u8a00\u4e4b\u524d, \u6211\u5176\u5b9e\u5e76\u4e0d\u77e5\u9053\u7f16\u8bd1\u5668\u771f\u7684\u53ef\u4ee5\u8fd9\u4e48\u505a. \u5f53\u7136\u4e86, \u5230\u540e\u9762\u518d\u89c1\u5230 TypeScript \u6216 CoffeeScript \u8fd9\u4e9b\u7f16\u8bd1\u5230 JS \u7684\u7f16\u8bd1\u5668\u4e5f\u5c31\u4e60\u60ef\u4e86.","title":"\u89e3\u91ca\u5668/\u7f16\u8bd1\u5668"},{"location":"content/speech/minits/#_2","text":"\u901a\u5e38\u800c\u8a00, \u7f16\u8bd1\u5668\u7684\u7b2c\u4e00\u9879\u5de5\u4f5c\u53eb\u505a\u8bcd\u6cd5\u5206\u6790. \u5f53\u4f60\u9605\u8bfb\u82f1\u6587\u53e5\u5b50\u65f6, \u4f60\u4f1a\u4e60\u60ef\u6027\u7684\u5c06\u53e5\u5b50\u5206\u4e3a\u4e00\u4e2a\u4e2a\u5355\u8bcd, \u5e76\u9010\u4e2a\u7406\u89e3\u6bcf\u4e2a\u5355\u8bcd\u7684\u542b\u4e49. \u5728\u7f16\u8bd1\u5668\u4e2d, \u6211\u4eec\u4f7f\u7528 Token \u6765\u4ee3\u8868\u8fd9\u4e9b\u5355\u8bcd, \u6216\u8005\u4e2d\u6587\u540d\u53eb \"\u8bcd\u6cd5\u8bb0\u53f7\". \u4e3e\u4e2a\u4f8b\u5b50, \u4ee5\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u4e3a\u4f8b: var a = \"10\" + 1; \u5982\u679c\u5c06\u5b83\u5206\u5272\u4e3a\u4e00\u4e2a\u4e00\u4e2a Token, \u90a3\u4e48\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a\u5982\u4e0b\u7684 Token \u5217\u8868: [\"var\", \"a\", \"=\", \"10\", \"+\", \"1\"] \u5b83\u5f88\u7b80\u5355, \u53ea\u9700\u8981\u6309\u7167\u7a7a\u683c\u5206\u5272\u8fd9\u53e5\u8868\u8fbe\u5f0f\u5c31\u53ef\u4ee5\u4e86. \u4f46\u662f, \u4e8b\u5b9e\u771f\u7684\u5c31\u8fd9\u4e48\u7b80\u5355\u5417? \u6765\u770b\u4e0b\u4e0b\u9762\u7684\u51e0\u884c\u4ee3\u7801: var a=\"10\"+1; var b =\"10\"-1; var c= \"10\" + 1; \u53ef\u4ee5\u770b\u5230, \u64cd\u4f5c\u7b26\u65c1\u8fb9\u7684\u7a7a\u683c\u5c31\u50cf\u859b\u5b9a\u8c14\u7684\u732b\u4e00\u6837, \u65f6\u6709\u65f6\u65e0, \u4f46\u4f60\u4e0d\u80fd\u5bf9\u5199\u51fa\u8fd9\u4e9b\u4ee3\u7801\u7684\u5f00\u53d1\u8005\u8bf4\u4ec0\u4e48, \u56e0\u4e3a\u8fd9\u4e9b\u786e\u5b9e\u662f\u7b26\u5408 TypeScript \u8bed\u6cd5\u7684\u4ee3\u7801. \u8fd9\u4e2a\u65f6\u5019\u5c31\u4e0d\u80fd\u7b80\u5355\u7684\u6309\u7167\u7a7a\u683c\u5206\u5272\u4ee3\u7801\u4e86. \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898, \u6709\u5f88\u591a\u79cd\u7b56\u7565. \u4f60\u5982\u679c\u7ffb\u9605\u8fc7\u76f8\u5173\u53c2\u8003\u8d44\u6599, \u5927\u81f4\u4e0a\u4f1a\u627e\u5230\u4e0d\u5c11. \u603b\u7684\u6765\u8bf4\u6709\u4e24\u79cd\u65b9\u6cd5, \u4e00\u79cd\u662f\u79fb\u9664\u5168\u90e8\u65e0\u7528\u7684\u7a7a\u683c, \u4e00\u79cd\u662f\u5c06\u539f\u672c\u7f3a\u5c11\u7a7a\u683c\u7684\u4ee3\u7801 \"\u5c55\u5f00\". \u4e24\u79cd\u65b9\u5f0f\u90fd\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898, \u5c31 minits \u8fd9\u4e2a\u9879\u76ee\u800c\u8a00, \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u91c7\u7528\u7684\u65b9\u5f0f\u662f\u79fb\u9664\u5168\u90e8\u65e0\u7528\u7684\u7a7a\u683c. \u867d\u7136\u5b9e\u9645\u4ee3\u7801\u6bd4\u4e0a\u9762\u6240\u8bf4\u7684\u590d\u6742, \u4f46\u5927\u4f53\u4e0a\u5c31\u662f\u5982\u6b64.","title":"\u8bcd\u6cd5\u5206\u6790"},{"location":"content/speech/minits/#_3","text":"\u8bcd\u6cd5\u5206\u6790\u7684\u4e0b\u4e00\u4e2a\u9636\u6bb5\u662f\u8bed\u6cd5\u5206\u6790. \u5982\u679c\u662f\u8bcd\u6cd5\u5206\u6790\u662f\u8bc6\u522b\u4e00\u4e2a\u4e00\u4e2a\u5355\u8bcd\u7684\u8bdd, \u90a3\u8bed\u6cd5\u5206\u6790\u5c31\u662f\u8bc6\u522b\u4e00\u4e2a\u4e00\u4e2a\u53e5\u5b50. \u6211\u4eec\u5728\u5c0f\u65f6\u5019\u5b66\u4e60\u8bed\u6587\u6216\u8005\u82f1\u6587\u7684\u65f6\u5019, \u5e94\u8be5\u90fd\u5b66\u4e60\u8fc7\u6240\u8c13\u7684\u4e3b\u8c13\u5bbe\u5b9a\u72b6\u8865, \u8fd9\u4e9b\u5c31\u662f\u53e5\u5b50\u7684\u8bed\u6cd5\u7ed3\u6784. \u5728\u7f16\u8bd1\u5668\u4e2d, \u6e90\u4ee3\u7801\u901a\u5e38\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u6811\u72b6\u7ed3\u6784, \u5728\u505a\u8bed\u6cd5\u5206\u6790\u65f6\u5e38\u7528\u7684\u6280\u672f\u624b\u6bb5\u662f\u9012\u5f52\u4e0b\u964d\u548c\u589e\u91cf\u5206\u6790. \u9012\u5f52\u4e0b\u964d\u7b97\u6cd5\u57fa\u672c\u601d\u60f3\u662f: \u81ea\u9876\u5411\u4e0b \u6bcf\u4e2a\u975e\u7ec8\u7ed3\u7b26\u6784\u9020\u4e00\u4e2a\u5206\u6790\u51fd\u6570. \u524d\u5411\u9884\u6d4b \u9012\u5f52\u4e0b\u964d\u7684\u57fa\u672c\u7b97\u6cd5\u662f\u4e3a\u6bcf\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u6784\u5efa\u4e00\u4e2a parse \u51fd\u6570, \u4f2a\u4ee3\u7801\u53ef\u4ee5\u8868\u793a\u4e3a\u5982\u4e0b\u5f62\u5f0f: parse_statement() parse_statement_variable_declare() parse_statement_if() parse_expression() ... parse_statement_if() cond = parse_expression() thenBody = parse_statement() elseBody = parse_statement() \u89e3\u6790\u4e00\u4e2a\u8868\u8fbe\u5f0f\u65f6, \u53ef\u4ee5 \"\u9884\u5148\" \u8bfb\u53d6\u4e0b\u4e00\u4e2a Token, \u5224\u65ad\u8be5\u8868\u8fbe\u5f0f\u7684\u5177\u4f53\u7c7b\u578b, \u7136\u540e\u8c03\u7528\u5177\u4f53\u7684 parse \u51fd\u6570; \u540c\u65f6, \u5b50 parse \u51fd\u6570\u4e5f\u53ef\u4ee5\u9012\u5f52\u8c03\u7528\u7236 parse \u51fd\u6570. \u7a0b\u5e8f\u7684\u8bed\u6cd5\u5206\u6790\u8fc7\u7a0b, \u5c31\u662f\u6784\u9020\u4e00\u68f5\u62bd\u8c61\u8bed\u6cd5\u6811(AST)\u7684\u8fc7\u7a0b. \u6811\u7684\u6bcf\u4e2a\u8282\u70b9(\u5b50\u6811)\u662f\u4e00\u4e2a\u8bed\u6cd5\u5355\u5143, \u8fd9\u4e2a\u5355\u5143\u7684\u6784\u6210\u89c4\u5219\u5c31\u53eb \"\u8bed\u6cd5\". \u6bcf\u4e2a\u8282\u70b9\u8fd8\u53ef\u4ee5\u6709\u4e0b\u7ea7\u8282\u70b9. \u63a5\u4e0b\u6765, \u6211\u4eec\u76f4\u89c2\u5730\u770b\u4e00\u4e0b\u62bd\u8c61\u8bed\u6cd5\u6811\u957f\u4ec0\u4e48\u6837\u5b50. \u4e0b\u9762\u7684\u56fe\u7247\u662f TypeScript \u5b9e\u73b0\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5217\u6e90\u7801\u7684\u62bd\u8c61\u8bed\u6cd5\u6811. https://ts-ast-viewer.com/","title":"\u8bed\u6cd5\u5206\u6790"},{"location":"content/speech/minits/#_4","text":"\u8bcd\u6cd5\u5206\u6790, \u8bed\u6cd5\u5206\u6790\u7684\u4e0b\u4e00\u6b65\u662f\u8fdb\u884c\u8bed\u4e49\u5206\u6790. \u8bed\u4e49\u5206\u6790\u5c31\u662f\u8bc6\u522b\u4e00\u7bc7\u6587\u7ae0, \u5173\u8054\u6587\u7ae0\u7684\u4e0a\u4e0b\u6587, \u7406\u89e3\u6587\u7ae0\u7684\u610f\u56fe, \u540c\u65f6\u5982\u679c\u6587\u7ae0\u4e2d\u6709\u54ea\u4e9b\u725b\u5934\u4e0d\u5bf9\u9a6c\u5634\u7684\u5730\u65b9\u4e5f\u8981\u53ca\u65f6\u63d0\u9192\u4f5c\u8005. \u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50: \u7c7b\u578b let a = 10; let b: number = 10; \u6211\u4eec\u4e3a\u4e24\u4e2a\u53d8\u91cf\u90fd\u8fdb\u884c\u4e86\u8d4b\u503c, \u4f46\u533a\u522b\u5728\u4e8e\u5728\u5bf9 a \u8fdb\u884c\u8d4b\u503c\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u663e\u793a\u6307\u660e\u5b83\u7684\u7c7b\u578b. \u5f53\u6211\u4eec\u5728\u8fdb\u884c\u8bed\u6cd5\u5206\u6790\u7684\u65f6\u5019, Token \u662f\u4e00\u4e2a\u4e00\u4e2a\u88ab\u8bfb\u53d6\u7684, \u6362\u53e5\u8bdd\u8bf4\u5f53\u89e3\u6790\u5230 \"let a\" \u7684\u65f6\u5019, a \u53d8\u91cf\u7684\u7c7b\u578b\u662f\u4e0d\u786e\u5b9a\u7684, a \u53d8\u91cf\u7684\u7c7b\u578b\u5c06\u6839\u636e\u7b49\u53f7\u540e\u9762\u7684\u8868\u8fbe\u5f0f\u51b3\u5b9a. TypeScript \u4e2d\u8d1f\u8d23\u5bf9\u53d8\u91cf\u7c7b\u578b\u8fdb\u884c\u68c0\u67e5\u548c\u63a8\u5bfc\u7684\u6a21\u5757\u53eb TypeChecker, TypeChecker \u9664\u4e86\u7ef4\u62a4\u7c7b\u578b\u4e4b\u5916, \u540c\u65f6\u8fd8\u7ef4\u62a4\u4e86\u51fd\u6570\u548c\u7c7b\u7684\u7b7e\u540d. \u7b26\u53f7\u8868\u4e0e\u4f5c\u7528\u57df . \u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\u5c06\u6253\u5370\u51fa 10 \u8fd8\u662f 20? let a = 10; for (;;) { let a = 20; console.log(a); } \u53d8\u91cf, \u51fd\u6570, \u7c7b\u7684\u91cd\u590d\u5b9a\u4e49\u68c0\u67e5 . \u6bcf\u4e00\u884c\u4ee3\u7801\u5355\u72ec\u770b\u90fd\u662f\u6b63\u786e\u7684, \u4f46\u4f60\u4e0d\u80fd\u628a\u5b83\u4eec\u5199\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc. function a() {} function a() {} \u8bed\u4e49\u5206\u6790\u5de5\u4f5c\u7684\u67d0\u4e9b\u7ed3\u679c\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u6807\u6ce8\u5728\u62bd\u8c61\u8bed\u6cd5\u6811\u4e0a, \u6bd4\u5982\u4e0a\u8ff0\u63d0\u5230\u7684\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b.","title":"\u8bed\u4e49\u5206\u6790"},{"location":"content/speech/minits/#_5","text":"\u4f20\u7edf\u7f16\u8bd1\u5668\u6700\u6d41\u884c\u7684\u8bbe\u8ba1\u662f\u4e09\u9636\u6bb5\u8bbe\u8ba1\uff0c\u5176\u4e3b\u8981\u7ec4\u4ef6\u662f\u524d\u7aef, \u4f18\u5316\u5668, \u540e\u7aef. \u524d\u7aef\u89e3\u6790\u6e90\u4ee3\u7801, \u68c0\u67e5\u5b83\u662f\u5426\u6709\u9519\u8bef, \u5e76\u6784\u5efa\u4e00\u4e2a\u7279\u5b9a\u4e8e\u8bed\u8a00\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\u6765\u8868\u793a\u8f93\u5165\u4ee3\u7801. \u4f18\u5316\u5668\u8d1f\u8d23\u8fdb\u884c\u5404\u79cd\u5404\u6837\u7684\u8f6c\u6362\u4ee5\u52aa\u529b\u6539\u8fdb\u4ee3\u7801\u7684\u8fd0\u884c\u65f6\u95f4, \u4f8b\u5982\u6d88\u9664\u5197\u4f59\u8ba1\u7b97, \u5e76\u4e14\u901a\u5e38\u4ed6\u4eec\u7684\u7b97\u6cd5\u548c\u5b9e\u73b0\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\u6216\u76ee\u6807\u673a\u5668\u67b6\u6784. \u7136\u540e, \u540e\u7aef(\u4e5f\u79f0\u4e3a\u4ee3\u7801\u751f\u6210\u5668)\u5c06\u4ee3\u7801\u6620\u5c04\u5230\u76ee\u6807\u6307\u4ee4\u96c6. \u7f16\u8bd1\u5668\u540e\u7aef\u7684\u516c\u5171\u90e8\u5206\u5305\u62ec\u6307\u4ee4\u9009\u62e9, \u5bc4\u5b58\u5668\u5206\u914d\u548c\u6307\u4ee4\u8c03\u5ea6. LLVM \u662f\u4e00\u4e2a\u6a21\u5757\u5316\u7684\u7f16\u8bd1\u5668\u5957\u4ef6, \u5b83\u540c\u6837\u9075\u5faa\u4e0a\u9762\u7684\u51e0\u4e2a\u539f\u5219, \u4f46\u5b83\u6700\u4f1f\u5927\u7684\u8d21\u732e\u5728\u4e8e\u63d0\u51fa\u4e86\u901a\u7528\u4e2d\u95f4\u8bed\u8a00\u8868\u793a, \u4e5f\u5c31\u662f LLVM IR. \u4f46\u5176\u5b9e\u5728 LLVM \u4e4b\u524d, \u7edd\u5927\u90e8\u5206\u7f16\u8bd1\u5668\u90fd\u6709\u81ea\u5df1\u7684\u4e2d\u95f4\u8868\u793a, \u4f46\u7f3a\u70b9\u662f\u5b83\u4eec\u8981\u4e48\u975e\u901a\u7528, \u8981\u4e48\u6ca1\u4eba\u7528. \u5927\u90e8\u5206\u540e\u7aef\u4f18\u5316, \u6bd4\u5982\u6d88\u9664\u5197\u4f59\u4ee3\u7801, \u5b83\u4eec\u7684\u7b97\u6cd5\u662f\u76f8\u540c\u7684, \u4f46\u5728 LLVM \u4e4b\u524d\u5b83\u4eec\u8981\u5728\u4e0d\u540c\u7684\u8bed\u8a00\u4e0a\u5404\u81ea\u5b9e\u73b0\u4e00\u904d. \u6709\u4e00\u4e9b\u5e38\u89c1\u7684\u4e2d\u95f4\u8bed\u8a00\u8868\u793a, \u6bd4\u5982 GCC, \u5b83\u4e3a\u4e86\u652f\u6301\u4e0d\u540c\u786c\u4ef6\u5e73\u53f0, \u5b83\u5185\u90e8\u7684\u8bb8\u591a\u7f16\u8bd1\u9636\u6bb5\u5fc5\u987b\u505a\u5230\u786c\u4ef6\u65e0\u5173\u6027, \u56e0\u6b64\u5185\u90e8\u4f7f\u7528\u4e86\u4e00\u79cd\u786c\u4ef6\u5e73\u53f0\u65e0\u5173\u7684\u8bed\u8a00 RTL. \u53e6\u5916, Java \u5b57\u8282\u7801\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u79cd\u4e2d\u95f4\u8bed\u8a00, \u5b83\u8fd0\u884c\u5728 JVM \u4e0a. \u7f16\u8bd1\u6210\u4e2d\u95f4\u8bed\u8a00\u6709\u5f88\u591a\u4f18\u52bf, \u4e00\u662f\u4f18\u5316, \u5927\u90e8\u5206\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u9636\u6bb5\u90fd\u662f\u5bf9\u4e2d\u95f4\u8bed\u8a00\u8fdb\u884c\u4f18\u5316, \u518d\u5c06\u5176\u8f6c\u6362\u6210\u673a\u5668\u6307\u4ee4, \u56e0\u6b64\u4f60\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u9488\u5bf9\u4e2d\u95f4\u8bed\u8a00\u7684\u4f18\u5316\u5668, \u800c\u4e0d\u662f\u5bf9\u6bcf\u4e2a\u786c\u4ef6\u5e73\u53f0\u5199\u5bf9\u5e94\u7684\u4f18\u5316\u5668; \u5176\u4e8c\u662f\u53ef\u4ee5\u5b9e\u73b0\u8de8\u5e73\u53f0, \u9488\u5bf9\u540c\u4e00\u79cd\u4e2d\u95f4\u8bed\u8a00, \u4e0d\u540c\u5e73\u53f0\u7684\u7f16\u8bd1\u5668\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u6210\u4e0e\u8be5\u5e73\u53f0\u517c\u5bb9\u7684\u4e8c\u8fdb\u5236\u6307\u4ee4. \u4ece\u800c\u4f7f\u5f97\u4e00\u79cd\u6e90\u7a0b\u5e8f\u4ee3\u7801\u53ef\u4ee5\u8fd0\u884c\u5230\u4e0d\u540c\u7684\u786c\u4ef6\u5e73\u53f0\u4e0a. \u6211\u4f1a\u7528\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u6765\u5c55\u793a\u4e00\u4e0b LLVM IR \u7684\u6837\u8c8c, \u8fd9\u6bb5\u4ee3\u7801\u662f\u7528 TypeScript \u5199\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5217\u5b9e\u73b0: function fibo(n: number): number { if (n < 2) { return n; } return fibo(n - 1) + fibo(n - 2); } \u4e0b\u9762\u662f\u5c06\u5176\u4f7f\u7528 minits \u7f16\u8bd1\u5230 LLVM IR \u540e\u7684\u7ed3\u679c. \u53ef\u4ee5\u770b\u5230, LLVM IR \u770b\u8d77\u6765\u50cf\u662f\u4e00\u79cd\u4ecb\u4e8e\u9ad8\u7ea7\u8bed\u8a00\u548c\u6c47\u7f16\u4ee3\u7801\u4e4b\u95f4\u7684\u5d4c\u5408\u4f53. define i64 @fibo(i64 %n) { body: %0 = icmp slt i64 %n, 2 br i1 %0, label %if.then, label %if.else if.then: ; preds = %body ret i64 %n if.else: ; preds = %body br label %if.quit if.quit: ; preds = %if.else %1 = sub i64 %n, 1 %2 = call i64 @fibo(i64 %1) %3 = sub i64 %n, 2 %4 = call i64 @fibo(i64 %3) %5 = add i64 %2, %4 ret i64 %5 } \u5bf9\u4e8e minits \u9879\u76ee\u6765\u8bf4, \u8fd9\u4e00\u9636\u6bb5\u7684\u5de5\u4f5c\u662f\u5c06\u4e0a\u9762\u51e0\u6b65\u5f97\u5230\u7684 AST \u8f6c\u6362\u4e3a LLVM IR. minits \u4f7f\u7528\u4e86 LLVM \u7684 TypeScript \u7ed1\u5b9a, \u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 LLVM \u7684 API \u6765\u751f\u6210 LLVM IR. \u6bd4\u5982\u5982\u4e0b\u8fd9\u6bb5 TypeScript \u4ee3\u7801\u6f14\u793a\u4e86\u4e00\u4e2a\u52a0\u6cd5\u64cd\u4f5c let a = 1; let b = 2; let c = a + b; \u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 LLVM API \u6765\u5c06\u5176\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684 LLVM IR. \u8fd9\u4e00\u90e8\u5206\u7684\u539f\u7406\u5e76\u4e0d\u96be, \u4e8b\u5b9e\u4e0a\u6574\u4e2a minits \u9879\u76ee\u5927\u90e8\u5206\u90fd\u5728\u505a\u8fd9\u4ef6\u5de5\u4f5c: \u5c06 TypeScript \u7684\u62bd\u8c61\u8bed\u6cd5\u6811\u8f6c\u6362\u4e3a LLVM IR. let lhs = llvm.ConstantInt.get(llvmContext, 1, 64); let rhs = llvm.ConstantInt.get(llvmContext, 2, 64); let r = llvmBuilder.createAdd(lhs, rhs);","title":"\u751f\u6210\u4e2d\u95f4\u4ee3\u7801"},{"location":"content/speech/minits/#_6","text":"\u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u8ba4\u4e3a\u7b80\u5355\u7684\u65b9\u6848\u5f80\u5f80\u6bd4\u590d\u6742\u7684\u65b9\u6848\u66f4\u6709\u6548: \u56e0\u6b64\u6211\u4eec\u51b3\u5b9a\u590d\u7528\u6574\u4e2a Clang \u7f16\u8bd1\u5668. \u5f53 minits \u7f16\u8bd1\u5f97\u5230 LLVM IR \u540e, \u5c06 LLVM IR \u6295\u5582\u7ed9 Clang \u7f16\u8bd1\u5668, \u53ef\u4ee5\u5b9e\u73b0\u5b8c\u5168\u590d\u7528 Clang \u7684 IR \u4f18\u5316\u548c\u5bf9\u5e94\u786c\u4ef6\u5e73\u53f0\u7684\u4ee3\u7801\u751f\u6210: \u8fd9\u4f7f\u5f97 minits \u53ef\u4ee5\u8fd0\u884c\u5728 x86, arm, \u751a\u81f3\u662f riscv \u67b6\u6784\u4e0a. \u5728\u7a0d\u540e\u6211\u5c06\u5b9e\u9645\u6f14\u793a\u4e00\u904d.","title":"\u4f18\u5316/\u4ee3\u7801\u751f\u6210"},{"location":"content/speech/minits/#_7","text":"\u8fd9\u662f\u672c\u573a\u6f14\u8bb2\u7684\u6700\u540e\u4e00\u4e2a\u91cd\u8981\u4efb\u52a1, \u8fdb\u884c minits \u6f14\u793a. \u8981\u6f14\u793a\u7684\u9879\u76ee\u662f\u4f7f\u7528 minits \u7f16\u5199\u7684 brainfuck \u89e3\u91ca\u5668. Brainfuck \u662f\u4e00\u79cd\u6781\u5c0f\u5316\u7684\u7a0b\u5e8f\u8bed\u8a00, \u5176\u672c\u8d28\u662f\u4e00\u4e2a\u56fe\u7075\u7eb8\u5e26\u673a. \u8fd9\u79cd\u8bed\u8a00\u7531\u516b\u79cd\u8fd0\u7b97\u7b26\u6784\u6210: \u5b57\u7b26 \u542b\u4e49 > \u6307\u9488\u52a0\u4e00 < \u6307\u9488\u51cf\u4e00 + \u6307\u9488\u6307\u5411\u7684\u5b57\u8282\u7684\u503c\u52a0\u4e00 - \u6307\u9488\u6307\u5411\u7684\u5b57\u8282\u7684\u503c\u51cf\u4e00 . \u8f93\u51fa\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u5185\u5bb9(ASCII\u7801) , \u8f93\u5165\u5185\u5bb9\u5230\u6307\u9488\u6307\u5411\u7684\u5355\u5143(ASCII\u7801) [ \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e3a\u96f6, \u5411\u540e\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684]\u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 ] \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e0d\u4e3a\u96f6, \u5411\u524d\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684[\u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 \u6bd4\u5982\u5982\u4e0b\u8fd9\u6bb5\u6e90\u7801\u5728 Brainfuck \u89e3\u91ca\u5668\u4e2d\u5c06\u6253\u5370\u51fa \"Hello World!\" ++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>. \u6765\u770b\u4e00\u4e0b\u4f7f\u7528 TypeScript \u7f16\u5199 Brainfuck \u89e3\u91ca\u5668\u7684\u6e90\u7801: \u5728\u6e90\u7801\u4e2d\u9996\u5148\u4f7f\u7528\u679a\u4e3e\u7c7b\u65b0\u5b9a\u4e49\u4e86 8 \u79cd\u64cd\u4f5c\u7b26, \u7136\u540e\u5728 main \u51fd\u6570\u4e2d\u63a5\u6536 Brainfuck \u6e90\u4ee3\u7801, \u5e76\u5728\u5faa\u73af\u4e2d\u9010\u4e2a\u5b57\u7b26\u8fdb\u884c\u89e3\u91ca\u6267\u884c: const enum Opcode { SHR = '>', SHL = '<', ADD = '+', SUB = '-', PUTCHAR = '.', GETCHAR = ',', LB = '[', RB = ']', } function uint8(n: number): number { if (n > 0xff) { return uint8(n - 256); } if (n < 0x00) { return uint8(n + 256); } return n } function main(argc: number, argv: string[]): number { if (argc !== 2) { return 1; } let pc = 0; let ps = 0; // pre generated space: stack and src. let stack = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]; let srclet arg1 = argv[1]; for (let i = 0; i < arg1.length; i++) { src[i] = arg1[i]; } for (; pc < arg1.length;) { let op = src[pc]; if (op === Opcode.SHR) { ps += 1; pc += 1; continue } if (op === Opcode.SHL) { ps -= 1; pc += 1; continue } if (op === Opcode.ADD) { stack[ps] = uint8(stack[ps] + 1); pc += 1; continue } if (op === Opcode.SUB) { stack[ps] = uint8(stack[ps] - 1); pc += 1; continue } if (op === Opcode.PUTCHAR) { console.log('%c', stack[ps]); pc += 1; continue } if (op === Opcode.GETCHAR) { console.log('GETCHAR is disabled'); return 1; } if (op === Opcode.LB) { if (stack[ps] != 0x00) { pc += 1; continue } let n = 1; for (; n !== 0;) { pc += 1; if (src[pc] === Opcode.LB) { n += 1; continue } if (src[pc] === Opcode.RB) { n -= 1; continue } } pc += 1; continue } if (op === Opcode.RB) { if (stack[ps] === 0x00) { pc += 1; continue } let n = 1; for (; n !== 0;) { pc -= 1; if (src[pc] === Opcode.RB) { n += 1; continue } if (src[pc] === Opcode.LB) { n -= 1; continue } } pc += 1; continue } } return 0; } \u7f16\u8bd1\u9636\u6bb5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206, \u5206\u522b\u662f\u4f7f\u7528 minits \u7f16\u8bd1 TypeScript \u6e90\u7801\u5f97\u5230 LLVM IR, \u7136\u540e\u4f7f\u7528 Clang \u7f16\u8bd1 LLVM IR \u5f97\u5230\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6. \u6700\u540e\u5b9e\u9645\u6d4b\u8bd5\u4e00\u4e0b\u6211\u4eec\u7f16\u5199\u7684\u89e3\u91ca\u5668, \u6d4b\u8bd5\u4ee3\u7801\u662f\u4e00\u6bb5\u8c22\u5c14\u5bbe\u65af\u57fa\u4e09\u89d2\u5f62. $ cd minits $ ts-node src/index.ts build examples/brainfuck.ts -o brainfuck.ll $ clang brainfuck.ll -o brainfuck $ ./brainfuck \">++++[<++++++++>-]>++++++++[>++++<-]>>++>>>+>>>+<<<<<<<<<<[-[->+<]>[-<+>>>.<<]>>>[[->++++++++[>++++<-]>.<<[->+<]+>[->++++++++++<<+>]>.[-]>]]+<<<[-[->+<]+>[-<+>>>-[->+<]++>[-<->]<<<]<<<<]++++++++++.+++.[-]<]+++++\" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \u5b83\u6210\u529f\u4e86! \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u4ee5 Brainfuck \u4f5c\u4e3a minits \u7684 Hello World \u9879\u76ee, \u5176\u5b9e\u5f88\u7b80\u5355, \u56e0\u4e3a Brainfuck \u662f\u4e00\u4e2a\u6700\u5c0f\u7684\u56fe\u7075\u673a\u5b9e\u73b0, \u56e0\u6b64, minits \u7f16\u8bd1\u5668\u76ee\u524d\u662f\u56fe\u7075\u5b8c\u5907\u7684.","title":"\u6f14\u793a"},{"location":"content/speech/minits/#_8","text":"\u5df2\u5168\u90e8\u5f00\u6e90. \u5730\u5740: https://github.com/cryptape/minits \u5df2\u5b9e\u73b0\u5927\u90e8\u5206 TypeScript \u8fc7\u7a0b\u5f0f\u7f16\u7a0b\u8bed\u6cd5 \u7cfb\u7edf\u8c03\u7528 syscall \u521d\u6b65\u5b8c\u6210 \u56fe\u7075\u5b8c\u5907","title":"\u9879\u76ee\u8fdb\u5ea6"},{"location":"content/speech/minits/#fin","text":"Thanks for you listening and sleeping! \u656c\u5177.","title":"Fin"}]}